GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"EH.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 2A2D2D2D 		.string	"*---------------------------------------------------------*\n"
   6      2D2D2D2D 
   6      2D2D2D2D 
   6      2D2D2D2D 
   6      2D2D2D2D 
   7              	.LC1:
   8 003d 45483A0A 		.string	"EH:\n"
   8      00
   9              	.LC2:
  10 0042 4576656E 		.string	"Events:\t"
  10      74733A09 
  10      00
  11              	.LC3:
  12 004b 25642C25 		.string	"%d,%d,%d, %s\t"
  12      642C2564 
  12      2C202573 
  12      0900
  13              	.LC4:
  14 0059 0A00     		.string	"\n"
  15              	.LC5:
  16 005b 48616E64 		.string	"Handlers:\t"
  16      6C657273 
  16      3A0900
  17              	.LC6:
  18 0066 25700900 		.string	"%p\t"
  19              	.LC7:
  20 006a 51756575 		.string	"Queue:\t"
  20      653A0900 
  21              	.LC8:
  22 0072 25642C20 		.string	"%d, %s\t"
  22      25730900 
  23              	.LC9:
  24 007a 496E6974 		.string	"Init:%d,Sz:%d\n"
  24      3A25642C 
  24      537A3A25 
  24      640A00
  25              		.text
  26              		.globl	print_EH
  28              	print_EH:
  29              	.LFB19:
  30              		.file 1 "src/EH.c"
   1:src/EH.c      **** /***************************************************************************
   2:src/EH.c      ****  *   Copyright (C) 2015 by                                                 *
   3:src/EH.c      ****  *   - Carlos Eduardo Millani (carloseduardomillani@gmail.com)             *
   4:src/EH.c      ****  *   - Edson Borin (edson@ic.unicamp.br)                                   *
   5:src/EH.c      ****  *                                                                         *
   6:src/EH.c      ****  *   This program is free software; you can redistribute it and/or modify  *
   7:src/EH.c      ****  *   it under the terms of the GNU General Public License as published by  *
   8:src/EH.c      ****  *   the Free Software Foundation; either version 2 of the License, or     *
   9:src/EH.c      ****  *   (at your option) any later version.                                   *
  10:src/EH.c      ****  *                                                                         *
  11:src/EH.c      ****  *   This program is distributed in the hope that it will be useful,       *
GAS LISTING /tmp/cc15eBE3.s 			page 2


  12:src/EH.c      ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  13:src/EH.c      ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  14:src/EH.c      ****  *   GNU General Public License for more details.                          *
  15:src/EH.c      ****  *                                                                         *
  16:src/EH.c      ****  *   You should have received a copy of the GNU General Public License     *
  17:src/EH.c      ****  *   along with this program; if not, write to the                         *
  18:src/EH.c      ****  *   Free Software Foundation, Inc.,                                       *
  19:src/EH.c      ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  20:src/EH.c      ****  ***************************************************************************/
  21:src/EH.c      **** 
  22:src/EH.c      **** #ifdef __cplusplus
  23:src/EH.c      **** extern "C" {
  24:src/EH.c      **** #endif
  25:src/EH.c      **** 	
  26:src/EH.c      **** #include <EH.h>
  27:src/EH.c      **** #include <vm.h>
  28:src/EH.c      **** #include <string.h>
  29:src/EH.c      **** 	
  30:src/EH.c      **** #include <stdio.h>
  31:src/EH.c      **** void print_EH(void)
  32:src/EH.c      **** {
  31              		.loc 1 32 0
  32              		.cfi_startproc
  33              	.LVL0:
  34 0000 53       		pushq	%rbx
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              	.LBB35:
  38              	.LBB36:
  39              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
GAS LISTING /tmp/cc15eBE3.s 			page 3


  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
GAS LISTING /tmp/cc15eBE3.s 			page 4


  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  40              		.loc 2 104 0
  41 0001 BE000000 		movl	$.LC0, %esi
  41      00
  42 0006 BF010000 		movl	$1, %edi
  42      00
  43 000b 31C0     		xorl	%eax, %eax
  44 000d BB000000 		movl	$ehvecpointers+8, %ebx
  44      00
  45 0012 E8000000 		call	__printf_chk
  45      00
  46              	.LVL1:
  47              	.LBE36:
  48              	.LBE35:
  49              	.LBB37:
  50              	.LBB38:
  51 0017 BE000000 		movl	$.LC1, %esi
  51      00
  52 001c BF010000 		movl	$1, %edi
  52      00
  53 0021 31C0     		xorl	%eax, %eax
  54 0023 E8000000 		call	__printf_chk
  54      00
  55              	.LVL2:
  56              	.LBE38:
  57              	.LBE37:
  58              	.LBB39:
  59              	.LBB40:
  60 0028 BE000000 		movl	$.LC2, %esi
  60      00
  61 002d BF010000 		movl	$1, %edi
  61      00
  62 0032 31C0     		xorl	%eax, %eax
  63 0034 E8000000 		call	__printf_chk
  63      00
  64              	.LVL3:
  65              	.L3:
  66              	.LBE40:
GAS LISTING /tmp/cc15eBE3.s 			page 5


  67              	.LBE39:
  68              	.LBB41:
  33:src/EH.c      **** 	printf("*---------------------------------------------------------*\n");
  34:src/EH.c      **** 	printf("EH:\n");
  35:src/EH.c      **** 	printf("Events:\t");
  36:src/EH.c      **** 	for (int i = 0; i < EVENTQTTY; i++)
  37:src/EH.c      **** 	{
  38:src/EH.c      **** 		printf("%d,%d,%d, %s\t", ehvecpointers[i].id, ehvecpointers[i].pos, ehvecpointers[i].sz, ehvecpoi
  69              		.loc 1 38 0 discriminator 2
  70 0039 0FB64B08 		movzbl	8(%rbx), %ecx
  71 003d 0FBE53F8 		movsbl	-8(%rbx), %edx
  72              	.LBB42:
  73              	.LBB43:
  74              		.loc 2 104 0 discriminator 2
  75 0041 31C0     		xorl	%eax, %eax
  76 0043 440FB643 		movzbl	9(%rbx), %r8d
  76      09
  77 0048 4C8B0B   		movq	(%rbx), %r9
  78 004b BE000000 		movl	$.LC3, %esi
  78      00
  79 0050 BF010000 		movl	$1, %edi
  79      00
  80 0055 4883C318 		addq	$24, %rbx
  81 0059 E8000000 		call	__printf_chk
  81      00
  82              	.LVL4:
  83              	.LBE43:
  84              	.LBE42:
  36:src/EH.c      **** 	{
  85              		.loc 1 36 0 discriminator 2
  86 005e 4881FB00 		cmpq	$ehvecpointers+104, %rbx
  86      000000
  87 0065 75D2     		jne	.L3
  88              	.LVL5:
  89              	.LBE41:
  90              	.LBB44:
  91              	.LBB45:
  92              		.loc 2 104 0
  93 0067 BE000000 		movl	$.LC4, %esi
  93      00
  94 006c BF010000 		movl	$1, %edi
  94      00
  95 0071 31C0     		xorl	%eax, %eax
  96 0073 E8000000 		call	__printf_chk
  96      00
  97              	.LVL6:
  98              	.LBE45:
  99              	.LBE44:
 100              	.LBB46:
 101              	.LBB47:
 102 0078 31DB     		xorl	%ebx, %ebx
 103 007a BE000000 		movl	$.LC5, %esi
 103      00
 104 007f BF010000 		movl	$1, %edi
 104      00
 105 0084 31C0     		xorl	%eax, %eax
 106 0086 E8000000 		call	__printf_chk
GAS LISTING /tmp/cc15eBE3.s 			page 6


 106      00
 107              	.LVL7:
 108              	.L5:
 109              	.LBE47:
 110              	.LBE46:
 111              	.LBB48:
 112              	.LBB49:
 113              	.LBB50:
 114              		.loc 2 104 0 is_stmt 0 discriminator 2
 115 008b 488B9300 		movq	ehvec(%rbx), %rdx
 115      000000
 116 0092 31C0     		xorl	%eax, %eax
 117 0094 BE000000 		movl	$.LC6, %esi
 117      00
 118 0099 BF010000 		movl	$1, %edi
 118      00
 119 009e 4883C308 		addq	$8, %rbx
 120 00a2 E8000000 		call	__printf_chk
 120      00
 121              	.LVL8:
 122              	.LBE50:
 123              	.LBE49:
  39:src/EH.c      **** 	}
  40:src/EH.c      **** 	printf("\n");
  41:src/EH.c      **** 	printf("Handlers:\t");
  42:src/EH.c      **** 	for (int i = 0; i < EHVECSZ; i++)
 124              		.loc 1 42 0 is_stmt 1 discriminator 2
 125 00a7 4883FB50 		cmpq	$80, %rbx
 126 00ab 75DE     		jne	.L5
 127              	.LVL9:
 128              	.LBE48:
 129              	.LBB51:
 130              	.LBB52:
 131              		.loc 2 104 0
 132 00ad BE000000 		movl	$.LC4, %esi
 132      00
 133 00b2 BF010000 		movl	$1, %edi
 133      00
 134 00b7 31C0     		xorl	%eax, %eax
 135 00b9 E8000000 		call	__printf_chk
 135      00
 136              	.LVL10:
 137              	.LBE52:
 138              	.LBE51:
 139              	.LBB53:
 140              	.LBB54:
 141 00be 30DB     		xorb	%bl, %bl
 142 00c0 BE000000 		movl	$.LC7, %esi
 142      00
 143 00c5 BF010000 		movl	$1, %edi
 143      00
 144 00ca 31C0     		xorl	%eax, %eax
 145 00cc E8000000 		call	__printf_chk
 145      00
 146              	.LVL11:
 147              	.L7:
 148              	.LBE54:
GAS LISTING /tmp/cc15eBE3.s 			page 7


 149              	.LBE53:
 150              	.LBB55:
  43:src/EH.c      **** 	{
  44:src/EH.c      **** 		printf("%p\t", ehvec[i]);
  45:src/EH.c      **** 	}
  46:src/EH.c      **** 	printf("\n");
  47:src/EH.c      **** 	printf("Queue:\t");
  48:src/EH.c      **** 	for (int i = 0; i < EHQUEUESZ; i++)
  49:src/EH.c      **** 	{
  50:src/EH.c      **** 		printf("%d, %s\t", ehqueue[i].id, ehqueue[i].name);
 151              		.loc 1 50 0 discriminator 2
 152 00d1 0FB69300 		movzbl	ehqueue(%rbx), %edx
 152      000000
 153              	.LBB56:
 154              	.LBB57:
 155              		.loc 2 104 0 discriminator 2
 156 00d8 488B8B00 		movq	ehqueue+8(%rbx), %rcx
 156      000000
 157 00df 31C0     		xorl	%eax, %eax
 158 00e1 BE000000 		movl	$.LC8, %esi
 158      00
 159 00e6 BF010000 		movl	$1, %edi
 159      00
 160 00eb 4883C310 		addq	$16, %rbx
 161 00ef E8000000 		call	__printf_chk
 161      00
 162              	.LVL12:
 163              	.LBE57:
 164              	.LBE56:
  48:src/EH.c      **** 	{
 165              		.loc 1 48 0 discriminator 2
 166 00f4 4881FBA0 		cmpq	$160, %rbx
 166      000000
 167 00fb 75D4     		jne	.L7
 168              	.LVL13:
 169              	.LBE55:
  51:src/EH.c      **** 	}
  52:src/EH.c      **** 	printf("Init:%d,Sz:%d\n", queue_init, queue_size);
 170              		.loc 1 52 0
 171 00fd 0FB60D00 		movzbl	queue_size(%rip), %ecx
 171      000000
 172 0104 0FB61500 		movzbl	queue_init(%rip), %edx
 172      000000
 173              	.LBB58:
 174              	.LBB59:
 175              		.loc 2 104 0
 176 010b BE000000 		movl	$.LC9, %esi
 176      00
 177 0110 BF010000 		movl	$1, %edi
 177      00
 178 0115 31C0     		xorl	%eax, %eax
 179 0117 E8000000 		call	__printf_chk
 179      00
 180              	.LVL14:
 181              	.LBE59:
 182              	.LBE58:
  53:src/EH.c      **** 	printf("*---------------------------------------------------------*\n");
GAS LISTING /tmp/cc15eBE3.s 			page 8


  54:src/EH.c      **** }
 183              		.loc 1 54 0
 184 011c 5B       		popq	%rbx
 185              		.cfi_def_cfa_offset 8
 186              	.LBB60:
 187              	.LBB61:
 188              		.loc 2 104 0
 189 011d BE000000 		movl	$.LC0, %esi
 189      00
 190 0122 BF010000 		movl	$1, %edi
 190      00
 191 0127 31C0     		xorl	%eax, %eax
 192 0129 E9000000 		jmp	__printf_chk
 192      00
 193              	.LVL15:
 194              	.LBE61:
 195              	.LBE60:
 196              		.cfi_endproc
 197              	.LFE19:
 199              		.globl	eh_init
 201              	eh_init:
 202              	.LFB20:
  55:src/EH.c      **** 
  56:src/EH.c      **** void (*ehvec[EHVECSZ])(void) = {0};
  57:src/EH.c      **** uint8_t vec_size = 0;
  58:src/EH.c      **** new_event ehqueue[EHQUEUESZ] = {0};
  59:src/EH.c      **** uint8_t queue_init = 0;
  60:src/EH.c      **** uint8_t queue_size = 0;
  61:src/EH.c      **** uint8_t timer_flag = 0;
  62:src/EH.c      **** ev_point ehvecpointers[EVENTQTTY];
  63:src/EH.c      **** 
  64:src/EH.c      **** void eh_init(void)
  65:src/EH.c      **** {
 203              		.loc 1 65 0
 204              		.cfi_startproc
 205              	.LVL16:
 206 012e B8000000 		movl	$ehvecpointers+16, %eax
 206      00
 207              	.LVL17:
 208              	.L12:
  66:src/EH.c      **** 	//initialize timer - HAL WORK
  67:src/EH.c      **** 	
  68:src/EH.c      **** 	/*Initializes the event descriptors*/
  69:src/EH.c      **** 	register uint8_t i = 0;
  70:src/EH.c      **** 	for (i = 0; i < EVENTQTTY; i++)
  71:src/EH.c      **** 	{
  72:src/EH.c      **** 		ehvecpointers[i].id = -1;
 209              		.loc 1 72 0 discriminator 2
 210 0133 C640F0FF 		movb	$-1, -16(%rax)
  73:src/EH.c      **** 		ehvecpointers[i].pos = 0;
 211              		.loc 1 73 0 discriminator 2
 212 0137 C60000   		movb	$0, (%rax)
 213 013a 4883C018 		addq	$24, %rax
  74:src/EH.c      **** 		ehvecpointers[i].sz = 0;
 214              		.loc 1 74 0 discriminator 2
 215 013e C640E900 		movb	$0, -23(%rax)
  70:src/EH.c      **** 	{
GAS LISTING /tmp/cc15eBE3.s 			page 9


 216              		.loc 1 70 0 discriminator 2
 217 0142 483D0000 		cmpq	$ehvecpointers+112, %rax
 217      0000
 218 0148 75E9     		jne	.L12
  75:src/EH.c      **** 	}
  76:src/EH.c      **** 	/*---------------------------------*/
  77:src/EH.c      **** }
 219              		.loc 1 77 0
 220 014a C3       		ret
 221              		.cfi_endproc
 222              	.LFE20:
 224              		.globl	register_handler
 226              	register_handler:
 227              	.LFB21:
  78:src/EH.c      **** 
  79:src/EH.c      **** 
  80:src/EH.c      **** int8_t register_handler(uint8_t event_id, void (*handler)(void), char * evname, ...)
  81:src/EH.c      **** {
 228              		.loc 1 81 0
 229              		.cfi_startproc
 230              	.LVL18:
  82:src/EH.c      **** 	if (!(vec_size < EHVECSZ)) return -1; //No space for one more handler
 231              		.loc 1 82 0
 232 014b 448A1500 		movb	vec_size(%rip), %r10b
 232      000000
  81:src/EH.c      **** 	if (!(vec_size < EHVECSZ)) return -1; //No space for one more handler
 233              		.loc 1 81 0
 234 0152 55       		pushq	%rbp
 235              		.cfi_def_cfa_offset 16
 236              		.cfi_offset 6, -16
 237 0153 440FB6CF 		movzbl	%dil, %r9d
 238 0157 53       		pushq	%rbx
 239              		.cfi_def_cfa_offset 24
 240              		.cfi_offset 3, -24
 241              		.loc 1 82 0
 242 0158 4180FA09 		cmpb	$9, %r10b
 243 015c 0F873B02 		ja	.L43
 243      0000
 244 0162 B9000000 		movl	$ehvecpointers, %ecx
 244      00
 245 0167 31C0     		xorl	%eax, %eax
 246              	.L17:
 247              	.LVL19:
  83:src/EH.c      **** 	register uint8_t selected;
  84:src/EH.c      **** 	for (selected = 0; selected < EVENTQTTY; selected++)
  85:src/EH.c      **** 	{
  86:src/EH.c      **** 		if (ehvecpointers[selected].id == event_id && ehvecpointers[selected].name == evname) break; //Se
 248              		.loc 1 86 0
 249 0169 440FBE01 		movsbl	(%rcx), %r8d
 250 016d 4539C8   		cmpl	%r9d, %r8d
 251 0170 7506     		jne	.L15
 252              		.loc 1 86 0 is_stmt 0 discriminator 1
 253 0172 48395108 		cmpq	%rdx, 8(%rcx)
 254 0176 740D     		je	.L16
 255              	.L15:
  84:src/EH.c      **** 	{
 256              		.loc 1 84 0 is_stmt 1
GAS LISTING /tmp/cc15eBE3.s 			page 10


 257 0178 FFC0     		incl	%eax
 258              	.LVL20:
 259 017a 4883C118 		addq	$24, %rcx
 260 017e 3C04     		cmpb	$4, %al
 261 0180 75E7     		jne	.L17
 262              		.loc 1 86 0
 263 0182 4589C8   		movl	%r9d, %r8d
 264              	.L16:
  87:src/EH.c      **** 	}
  88:src/EH.c      **** 	if (ehvecpointers[selected].id != event_id || ehvecpointers[selected].name != evname) //Case where
 265              		.loc 1 88 0
 266 0185 0FB6C8   		movzbl	%al, %ecx
 267 0188 486BC918 		imulq	$24, %rcx, %rcx
 268 018c 4C8D8900 		leaq	ehvecpointers(%rcx), %r9
 268      000000
 269 0193 0FBE8900 		movsbl	ehvecpointers(%rcx), %ecx
 269      000000
 270 019a 4439C1   		cmpl	%r8d, %ecx
 271 019d 7506     		jne	.L18
 272              		.loc 1 88 0 is_stmt 0 discriminator 1
 273 019f 49395108 		cmpq	%rdx, 8(%r9)
 274 01a3 7462     		je	.L19
 275              	.L18:
  86:src/EH.c      **** 	}
 276              		.loc 1 86 0 is_stmt 1
 277 01a5 B9000000 		movl	$ehvecpointers, %ecx
 277      00
 278 01aa 31C0     		xorl	%eax, %eax
 279              	.LVL21:
 280              	.L21:
  89:src/EH.c      **** 	{
  90:src/EH.c      **** 		for (selected = 0; selected < EVENTQTTY; selected++)//Searches for the first empty space
  91:src/EH.c      **** 		{
  92:src/EH.c      **** 			if (ehvecpointers[selected].id == -1) break; //Selected is now the position of the first empty s
 281              		.loc 1 92 0
 282 01ac 8039FF   		cmpb	$-1, (%rcx)
 283 01af 740A     		je	.L20
  90:src/EH.c      **** 		{
 284              		.loc 1 90 0
 285 01b1 FFC0     		incl	%eax
 286              	.LVL22:
 287 01b3 4883C118 		addq	$24, %rcx
 288 01b7 3C04     		cmpb	$4, %al
 289 01b9 75F1     		jne	.L21
 290              	.L20:
  93:src/EH.c      **** 		}
  94:src/EH.c      **** 		if (ehvecpointers[selected].id != -1) return -1;//No empty space
 291              		.loc 1 94 0
 292 01bb 0FB6C8   		movzbl	%al, %ecx
 293 01be 486BC918 		imulq	$24, %rcx, %rcx
 294 01c2 80B90000 		cmpb	$-1, ehvecpointers(%rcx)
 294      0000FF
 295 01c9 0F85CE01 		jne	.L43
 295      0000
  95:src/EH.c      **** 		ehvecpointers[selected].id = event_id; //marks the empty space as the new event
 296              		.loc 1 95 0
 297 01cf 4088B900 		movb	%dil, ehvecpointers(%rcx)
GAS LISTING /tmp/cc15eBE3.s 			page 11


 297      000000
  96:src/EH.c      **** 		ehvecpointers[selected].name = evname;
 298              		.loc 1 96 0
 299 01d6 48899100 		movq	%rdx, ehvecpointers+8(%rcx)
 299      000000
  97:src/EH.c      **** 		for (ehvecpointers[selected].pos = 0; ehvecpointers[selected].pos < EHVECSZ; ehvecpointers[select
 300              		.loc 1 97 0
 301 01dd C6810000 		movb	$0, ehvecpointers+16(%rcx)
 301      000000
 302              	.LVL23:
 303              	.L22:
 304              		.loc 1 97 0 is_stmt 0 discriminator 1
 305 01e4 8A910000 		movb	ehvecpointers+16(%rcx), %dl
 305      0000
 306 01ea 80FA09   		cmpb	$9, %dl
 307 01ed 7718     		ja	.L19
  98:src/EH.c      **** 		{
  99:src/EH.c      **** 			if (ehvec[ehvecpointers[selected].pos] == 0) break;
 308              		.loc 1 99 0 is_stmt 1
 309 01ef 0FB6FA   		movzbl	%dl, %edi
 310 01f2 48833CFD 		cmpq	$0, ehvec(,%rdi,8)
 310      00000000 
 310      00
 311 01fb 740A     		je	.L19
  97:src/EH.c      **** 		for (ehvecpointers[selected].pos = 0; ehvecpointers[selected].pos < EHVECSZ; ehvecpointers[select
 312              		.loc 1 97 0
 313 01fd FFC2     		incl	%edx
 314 01ff 88910000 		movb	%dl, ehvecpointers+16(%rcx)
 314      0000
 315 0205 EBDD     		jmp	.L22
 316              	.LVL24:
 317              	.L19:
 100:src/EH.c      **** 		}//Gets the first free position for the new event
 101:src/EH.c      **** 		
 102:src/EH.c      **** 	}
 103:src/EH.c      **** 	if (ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz] == 0) //No handler in the posi
 318              		.loc 1 103 0
 319 0207 440FB6C0 		movzbl	%al, %r8d
 320 020b 31C9     		xorl	%ecx, %ecx
 321 020d 496BD018 		imulq	$24, %r8, %rdx
 322 0211 448A8A00 		movb	ehvecpointers+16(%rdx), %r9b
 322      000000
 323 0218 0FB69200 		movzbl	ehvecpointers+17(%rdx), %edx
 323      000000
 324 021f 410FB6F9 		movzbl	%r9b, %edi
 325 0223 01D7     		addl	%edx, %edi
 326 0225 4863D7   		movslq	%edi, %rdx
 327 0228 48833CD5 		cmpq	$0, ehvec(,%rdx,8)
 327      00000000 
 327      00
 328 0231 750D     		jne	.L48
 104:src/EH.c      **** 	{
 105:src/EH.c      **** 		ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz] = handler;
 329              		.loc 1 105 0
 330 0233 488934D5 		movq	%rsi, ehvec(,%rdx,8)
 330      00000000 
 331 023b E9440100 		jmp	.L25
GAS LISTING /tmp/cc15eBE3.s 			page 12


 331      00
 332              	.L48:
 333              	.LBB62:
 106:src/EH.c      **** 	}
 107:src/EH.c      **** 	else //Shift to get space
 108:src/EH.c      **** 	{
 109:src/EH.c      **** 		register uint8_t first_zero;
 110:src/EH.c      **** 		register uint8_t idnearfz;
 111:src/EH.c      **** 		for (first_zero = 0; first_zero < EHVECSZ; first_zero++)
 112:src/EH.c      **** 		{
 113:src/EH.c      **** 			if (ehvec[first_zero] == 0) break;
 334              		.loc 1 113 0
 335 0240 48833CCD 		cmpq	$0, ehvec(,%rcx,8)
 335      00000000 
 335      00
 336 0249 88CA     		movb	%cl, %dl
 337              	.LVL25:
 338 024b 740B     		je	.L26
 339              	.LVL26:
 340 024d 48FFC1   		incq	%rcx
 111:src/EH.c      **** 		{
 341              		.loc 1 111 0
 342 0250 4883F90A 		cmpq	$10, %rcx
 343 0254 75EA     		jne	.L48
 344 0256 B20A     		movb	$10, %dl
 345              	.LVL27:
 346              	.L26:
 114:src/EH.c      **** 		}//find first empty, check which event it is from, then shift... firstzero>pos and <= pos+sz
 115:src/EH.c      **** 		if (first_zero < ehvecpointers[selected].pos) // the empty space is before the event, should shif
 347              		.loc 1 115 0
 348 0258 4438CA   		cmpb	%r9b, %dl
 349 025b 0F838B00 		jnb	.L28
 349      0000
 350 0261 BF000000 		movl	$ehvecpointers+16, %edi
 350      00
 351 0266 31C9     		xorl	%ecx, %ecx
 116:src/EH.c      **** 		{
 117:src/EH.c      **** 			for (idnearfz = 0; idnearfz < selected; idnearfz++) //To set idnearfz
 118:src/EH.c      **** 			{
 119:src/EH.c      **** 				if(first_zero < ehvecpointers[idnearfz].pos + ehvecpointers[idnearfz].sz -1) break; //Ensures t
 352              		.loc 1 119 0
 353 0268 440FB6DA 		movzbl	%dl, %r11d
 354              	.L29:
 355              	.LVL28:
 117:src/EH.c      **** 			{
 356              		.loc 1 117 0 discriminator 1
 357 026c 38C1     		cmpb	%al, %cl
 358 026e 741E     		je	.L31
 359 0270 4989F9   		movq	%rdi, %r9
 360 0273 4883C718 		addq	$24, %rdi
 361              		.loc 1 119 0
 362 0277 410FB619 		movzbl	(%r9), %ebx
 363 027b 450FB649 		movzbl	1(%r9), %r9d
 363      01
 364 0280 468D4C0B 		leal	-1(%rbx,%r9), %r9d
 364      FF
 365 0285 4539CB   		cmpl	%r9d, %r11d
GAS LISTING /tmp/cc15eBE3.s 			page 13


 366 0288 7C04     		jl	.L31
 117:src/EH.c      **** 			{
 367              		.loc 1 117 0
 368 028a FFC1     		incl	%ecx
 369              	.LVL29:
 370 028c EBDE     		jmp	.L29
 371              	.L31:
 372              	.LVL30:
 120:src/EH.c      **** 			}
 121:src/EH.c      **** 			for (;idnearfz <= selected; idnearfz++) //Starts shifting id by id
 373              		.loc 1 121 0 discriminator 1
 374 028e 38C1     		cmpb	%al, %cl
 375 0290 0F87D000 		ja	.L51
 375      0000
 122:src/EH.c      **** 			{
 123:src/EH.c      **** 				ehvec[first_zero] = ehvec[ehvecpointers[idnearfz].pos + ehvecpointers[idnearfz].sz -1];
 376              		.loc 1 123 0 discriminator 2
 377 0296 0FB6F9   		movzbl	%cl, %edi
 378 0299 0FB6D2   		movzbl	%dl, %edx
 121:src/EH.c      **** 			{
 379              		.loc 1 121 0 discriminator 2
 380 029c FFC1     		incl	%ecx
 381              	.LVL31:
 382              		.loc 1 123 0 discriminator 2
 383 029e 486BFF18 		imulq	$24, %rdi, %rdi
 384              	.LVL32:
 385 02a2 448A8F00 		movb	ehvecpointers+16(%rdi), %r9b
 385      000000
 386 02a9 448A9F00 		movb	ehvecpointers+17(%rdi), %r11b
 386      000000
 387 02b0 410FB6E9 		movzbl	%r9b, %ebp
 388 02b4 410FB6DB 		movzbl	%r11b, %ebx
 389 02b8 8D5C1DFF 		leal	-1(%rbp,%rbx), %ebx
 390 02bc 4863DB   		movslq	%ebx, %rbx
 391 02bf 488B2CDD 		movq	ehvec(,%rbx,8), %rbp
 391      00000000 
 392 02c7 48892CD5 		movq	%rbp, ehvec(,%rdx,8)
 392      00000000 
 124:src/EH.c      **** 				ehvec[ehvecpointers[idnearfz].pos + ehvecpointers[idnearfz].sz -1] = 0;
 125:src/EH.c      **** 				first_zero = ehvecpointers[idnearfz].pos + ehvecpointers[idnearfz].sz -1;
 393              		.loc 1 125 0 discriminator 2
 394 02cf 438D5419 		leal	-1(%r9,%r11), %edx
 394      FF
 395              	.LVL33:
 126:src/EH.c      **** 				ehvecpointers[idnearfz].pos--;
 396              		.loc 1 126 0 discriminator 2
 397 02d4 41FFC9   		decl	%r9d
 124:src/EH.c      **** 				ehvec[ehvecpointers[idnearfz].pos + ehvecpointers[idnearfz].sz -1] = 0;
 398              		.loc 1 124 0 discriminator 2
 399 02d7 48C704DD 		movq	$0, ehvec(,%rbx,8)
 399      00000000 
 399      00000000 
 400              		.loc 1 126 0 discriminator 2
 401 02e3 44888F00 		movb	%r9b, ehvecpointers+16(%rdi)
 401      000000
 402 02ea EBA2     		jmp	.L31
 403              	.LVL34:
GAS LISTING /tmp/cc15eBE3.s 			page 14


 404              	.L28:
 127:src/EH.c      **** 			}
 128:src/EH.c      **** 			ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz] = handler;
 129:src/EH.c      **** 		}
 130:src/EH.c      **** 		else if (first_zero > ehvecpointers[selected].pos + ehvecpointers[selected].sz)
 405              		.loc 1 130 0
 406 02ec 440FB6CA 		movzbl	%dl, %r9d
 407 02f0 4139F9   		cmpl	%edi, %r9d
 408 02f3 0F8EA800 		jle	.L45
 408      0000
 409 02f9 BF000000 		movl	$ehvecpointers+88, %edi
 409      00
 410 02fe B103     		movb	$3, %cl
 411              	.L35:
 412              	.LVL35:
 131:src/EH.c      **** 		{
 132:src/EH.c      **** 			for (idnearfz = EVENTQTTY-1; idnearfz > selected; idnearfz--) //To set idnearfz
 413              		.loc 1 132 0 discriminator 1
 414 0300 38C1     		cmpb	%al, %cl
 415 0302 761E     		jbe	.L37
 133:src/EH.c      **** 			{
 134:src/EH.c      **** 				if (ehvecpointers[idnearfz].id == -1) continue; //Position not used
 416              		.loc 1 134 0
 417 0304 807FF0FF 		cmpb	$-1, -16(%rdi)
 418 0308 7410     		je	.L36
 135:src/EH.c      **** 				if(first_zero > ehvecpointers[idnearfz].pos + ehvecpointers[idnearfz].sz -1) break; //Ensures t
 419              		.loc 1 135 0
 420 030a 0FB61F   		movzbl	(%rdi), %ebx
 421 030d 440FB65F 		movzbl	1(%rdi), %r11d
 421      01
 422 0312 4101DB   		addl	%ebx, %r11d
 423 0315 4539CB   		cmpl	%r9d, %r11d
 424 0318 7E08     		jle	.L37
 425              	.L36:
 132:src/EH.c      **** 			{
 426              		.loc 1 132 0
 427 031a FFC9     		decl	%ecx
 428              	.LVL36:
 429 031c 4883EF18 		subq	$24, %rdi
 430 0320 EBDE     		jmp	.L35
 431              	.L37:
 432              	.LVL37:
 136:src/EH.c      **** 			}
 137:src/EH.c      **** 			for (;idnearfz > selected; idnearfz--) //Starts shifting id by id
 433              		.loc 1 137 0 discriminator 1
 434 0322 38C1     		cmpb	%al, %cl
 435 0324 7640     		jbe	.L51
 138:src/EH.c      **** 			{
 139:src/EH.c      **** 				ehvec[first_zero] = ehvec[ehvecpointers[idnearfz].pos];
 436              		.loc 1 139 0 discriminator 2
 437 0326 0FB6F9   		movzbl	%cl, %edi
 438 0329 440FB6DA 		movzbl	%dl, %r11d
 137:src/EH.c      **** 			{
 439              		.loc 1 137 0 discriminator 2
 440 032d FFC9     		decl	%ecx
 441              	.LVL38:
 442              		.loc 1 139 0 discriminator 2
GAS LISTING /tmp/cc15eBE3.s 			page 15


 443 032f 486BFF18 		imulq	$24, %rdi, %rdi
 444              	.LVL39:
 445 0333 8A970000 		movb	ehvecpointers+16(%rdi), %dl
 445      0000
 446              	.LVL40:
 447 0339 440FB6CA 		movzbl	%dl, %r9d
 448 033d 4A8B1CCD 		movq	ehvec(,%r9,8), %rbx
 448      00000000 
 449 0345 4A891CDD 		movq	%rbx, ehvec(,%r11,8)
 449      00000000 
 140:src/EH.c      **** 				ehvec[ehvecpointers[idnearfz].pos] = 0;
 450              		.loc 1 140 0 discriminator 2
 451 034d 4AC704CD 		movq	$0, ehvec(,%r9,8)
 451      00000000 
 451      00000000 
 452              	.LVL41:
 141:src/EH.c      **** 				first_zero = ehvecpointers[idnearfz].pos;
 142:src/EH.c      **** 				ehvecpointers[idnearfz].pos++;
 453              		.loc 1 142 0 discriminator 2
 454 0359 448D4A01 		leal	1(%rdx), %r9d
 455 035d 44888F00 		movb	%r9b, ehvecpointers+16(%rdi)
 455      000000
 456 0364 EBBC     		jmp	.L37
 457              	.L51:
 143:src/EH.c      **** 			}
 144:src/EH.c      **** 			ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz] = handler;
 458              		.loc 1 144 0
 459 0366 496BC018 		imulq	$24, %r8, %rax
 460              	.LVL42:
 461 036a 0FB69000 		movzbl	ehvecpointers+16(%rax), %edx
 461      000000
 462              	.LVL43:
 463 0371 0FB68000 		movzbl	ehvecpointers+17(%rax), %eax
 463      000000
 464 0378 01D0     		addl	%edx, %eax
 465 037a 4898     		cltq
 466 037c 488934C5 		movq	%rsi, ehvec(,%rax,8)
 466      00000000 
 467              	.LVL44:
 468              	.L25:
 469              	.LBE62:
 145:src/EH.c      **** 		}
 146:src/EH.c      **** 		else //Should never get here
 147:src/EH.c      **** 		{
 148:src/EH.c      **** 			return -3;
 149:src/EH.c      **** 		}
 150:src/EH.c      **** 		
 151:src/EH.c      **** 	}
 152:src/EH.c      **** 	
 153:src/EH.c      **** 	//TODO:Remember to tell HAL to generate events!
 154:src/EH.c      **** 	
 155:src/EH.c      **** 	ehvecpointers[selected].sz++;
 470              		.loc 1 155 0
 471 0384 4D6BC018 		imulq	$24, %r8, %r8
 472              	.LVL45:
 156:src/EH.c      **** 	vec_size++;
 473              		.loc 1 156 0
GAS LISTING /tmp/cc15eBE3.s 			page 16


 474 0388 41FFC2   		incl	%r10d
 157:src/EH.c      **** 	return 1;
 475              		.loc 1 157 0
 476 038b B001     		movb	$1, %al
 156:src/EH.c      **** 	vec_size++;
 477              		.loc 1 156 0
 478 038d 44881500 		movb	%r10b, vec_size(%rip)
 478      000000
 155:src/EH.c      **** 	vec_size++;
 479              		.loc 1 155 0
 480 0394 41FE8000 		incb	ehvecpointers+17(%r8)
 480      000000
 481              		.loc 1 157 0
 482 039b EB06     		jmp	.L14
 483              	.LVL46:
 484              	.L43:
  82:src/EH.c      **** 	register uint8_t selected;
 485              		.loc 1 82 0
 486 039d B0FF     		movb	$-1, %al
 487 039f EB02     		jmp	.L14
 488              	.LVL47:
 489              	.L45:
 490              	.LBB63:
 148:src/EH.c      **** 		}
 491              		.loc 1 148 0
 492 03a1 B0FD     		movb	$-3, %al
 493              	.LVL48:
 494              	.L14:
 495              	.LBE63:
 158:src/EH.c      **** }
 496              		.loc 1 158 0
 497 03a3 5B       		popq	%rbx
 498              		.cfi_def_cfa_offset 16
 499 03a4 5D       		popq	%rbp
 500              		.cfi_def_cfa_offset 8
 501 03a5 C3       		ret
 502              		.cfi_endproc
 503              	.LFE21:
 505              		.globl	remove_handler
 507              	remove_handler:
 508              	.LFB22:
 159:src/EH.c      **** int8_t remove_handler(uint8_t event_id, void (*handler)(void), char * evname)
 160:src/EH.c      **** {
 509              		.loc 1 160 0
 510              		.cfi_startproc
 511              	.LVL49:
 512 03a6 B9000000 		movl	$ehvecpointers, %ecx
 512      00
 161:src/EH.c      **** 	register int8_t selected;
 162:src/EH.c      **** 	for (selected = 0; selected < EVENTQTTY; selected++)
 513              		.loc 1 162 0
 514 03ab 31C0     		xorl	%eax, %eax
 163:src/EH.c      **** 	{
 164:src/EH.c      **** 		if (ehvecpointers[selected].id == event_id && ehvecpointers[selected].name == evname) break; //Se
 515              		.loc 1 164 0
 516 03ad 400FB6FF 		movzbl	%dil, %edi
 517              	.LVL50:
GAS LISTING /tmp/cc15eBE3.s 			page 17


 518              	.L55:
 519 03b1 440FBE01 		movsbl	(%rcx), %r8d
 520 03b5 4139F8   		cmpl	%edi, %r8d
 521 03b8 7506     		jne	.L53
 522              		.loc 1 164 0 is_stmt 0 discriminator 1
 523 03ba 48395108 		cmpq	%rdx, 8(%rcx)
 524 03be 740D     		je	.L54
 525              	.L53:
 526 03c0 FFC0     		incl	%eax
 527              	.LVL51:
 528 03c2 4883C118 		addq	$24, %rcx
 162:src/EH.c      **** 	{
 529              		.loc 1 162 0 is_stmt 1
 530 03c6 3C04     		cmpb	$4, %al
 531 03c8 75E7     		jne	.L55
 532              		.loc 1 164 0
 533 03ca 4189F8   		movl	%edi, %r8d
 534              	.L54:
 165:src/EH.c      **** 	}
 166:src/EH.c      **** 	if (ehvecpointers[selected].id != event_id || ehvecpointers[selected].name != evname) return -1; /
 535              		.loc 1 166 0
 536 03cd 4C0FBEC8 		movsbq	%al, %r9
 537 03d1 496BC918 		imulq	$24, %r9, %rcx
 538 03d5 0FBE8100 		movsbl	ehvecpointers(%rcx), %eax
 538      000000
 539              	.LVL52:
 540 03dc 4439C0   		cmpl	%r8d, %eax
 541 03df B0FF     		movb	$-1, %al
 542 03e1 0F859100 		jne	.L56
 542      0000
 543              		.loc 1 166 0 is_stmt 0 discriminator 2
 544 03e7 48399100 		cmpq	%rdx, ehvecpointers+8(%rcx)
 544      000000
 545 03ee 0F858400 		jne	.L56
 545      0000
 167:src/EH.c      **** 
 168:src/EH.c      **** 	register int8_t event;
 169:src/EH.c      **** 	for (event = ehvecpointers[selected].pos; event < ehvecpointers[selected].sz; event++)
 546              		.loc 1 169 0 is_stmt 1
 547 03f4 440FB691 		movzbl	ehvecpointers+16(%rcx), %r10d
 547      00000000 
 548 03fc 8A910000 		movb	ehvecpointers+17(%rcx), %dl
 548      0000
 549              	.LVL53:
 550 0402 440FB6C2 		movzbl	%dl, %r8d
 551 0406 4488D7   		movb	%r10b, %dil
 552              	.LVL54:
 553              	.L57:
 554              		.loc 1 169 0 is_stmt 0 discriminator 1
 555 0409 480FBECF 		movsbq	%dil, %rcx
 556 040d 4439C1   		cmpl	%r8d, %ecx
 557 0410 7D0A     		jge	.L61
 170:src/EH.c      **** 	{
 171:src/EH.c      **** 		if (ehvec[event] == handler) break;
 558              		.loc 1 171 0 is_stmt 1
 559 0412 483934CD 		cmpq	%rsi, ehvec(,%rcx,8)
 559      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 18


 560 041a 750D     		jne	.L58
 561              	.L61:
 172:src/EH.c      **** 	}
 173:src/EH.c      **** 	if (ehvec[event] != handler) return -1; //No such handler
 562              		.loc 1 173 0
 563 041c 483934CD 		cmpq	%rsi, ehvec(,%rcx,8)
 563      00000000 
 166:src/EH.c      **** 
 564              		.loc 1 166 0
 565 0424 B0FF     		movb	$-1, %al
 566              		.loc 1 173 0
 567 0426 7405     		je	.L67
 568 0428 C3       		ret
 569              	.L58:
 570 0429 FFC7     		incl	%edi
 571              	.LVL55:
 572 042b EBDC     		jmp	.L57
 573              	.LVL56:
 574              	.L67:
 174:src/EH.c      **** 	
 175:src/EH.c      **** 	
 176:src/EH.c      **** 	ehvec[event] = ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz -1]; //Make sure the
 575              		.loc 1 176 0
 576 042d 438D7410 		leal	-1(%r8,%r10), %esi
 576      FF
 577              	.LVL57:
 578 0432 4863F6   		movslq	%esi, %rsi
 579 0435 488B3CF5 		movq	ehvec(,%rsi,8), %rdi
 579      00000000 
 580              	.LVL58:
 581 043d 48893CCD 		movq	%rdi, ehvec(,%rcx,8)
 581      00000000 
 177:src/EH.c      **** 	ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz - 1] = 0;
 178:src/EH.c      **** 	
 179:src/EH.c      **** 	if (--ehvecpointers[selected].sz == 0) //Became empty
 582              		.loc 1 179 0
 583 0445 8D4AFF   		leal	-1(%rdx), %ecx
 584              	.LVL59:
 177:src/EH.c      **** 	ehvec[ehvecpointers[selected].pos + ehvecpointers[selected].sz - 1] = 0;
 585              		.loc 1 177 0
 586 0448 48C704F5 		movq	$0, ehvec(,%rsi,8)
 586      00000000 
 586      00000000 
 587              		.loc 1 179 0
 588 0454 496BD118 		imulq	$24, %r9, %rdx
 589 0458 84C9     		testb	%cl, %cl
 590 045a 888A0000 		movb	%cl, ehvecpointers+17(%rdx)
 590      0000
 591 0460 750D     		jne	.L62
 180:src/EH.c      **** 	{
 181:src/EH.c      **** 		ehvecpointers[selected].id = -1;
 592              		.loc 1 181 0
 593 0462 88820000 		movb	%al, ehvecpointers(%rdx)
 593      0000
 182:src/EH.c      **** 		ehvecpointers[selected].pos = 0;
 594              		.loc 1 182 0
 595 0468 C6820000 		movb	$0, ehvecpointers+16(%rdx)
GAS LISTING /tmp/cc15eBE3.s 			page 19


 595      000000
 596              	.L62:
 183:src/EH.c      **** 	}
 184:src/EH.c      **** 	
 185:src/EH.c      **** 	//TODO:VERIFY HAL after removing, should stop generating events?
 186:src/EH.c      **** 	
 187:src/EH.c      **** 	
 188:src/EH.c      **** 	vec_size--;
 597              		.loc 1 188 0
 598 046f FE0D0000 		decb	vec_size(%rip)
 598      0000
 189:src/EH.c      **** 	return 1;
 599              		.loc 1 189 0
 600 0475 B001     		movb	$1, %al
 601 0477 C3       		ret
 602              	.LVL60:
 603              	.L56:
 190:src/EH.c      **** }
 604              		.loc 1 190 0
 605 0478 C3       		ret
 606              		.cfi_endproc
 607              	.LFE22:
 609              		.globl	insert_event
 611              	insert_event:
 612              	.LFB24:
 191:src/EH.c      **** void __inline__ event_timer(void)
 192:src/EH.c      **** {
 193:src/EH.c      **** 	timer_flag = 1; //Set flag to true
 194:src/EH.c      **** }
 195:src/EH.c      **** 
 196:src/EH.c      **** 
 197:src/EH.c      **** int8_t insert_event(uint8_t event_id, char * evname)
 198:src/EH.c      **** {
 613              		.loc 1 198 0
 614              		.cfi_startproc
 615              	.LVL61:
 199:src/EH.c      **** 	if (queue_size < EHQUEUESZ) //Still has space
 616              		.loc 1 199 0
 617 0479 8A0D0000 		movb	queue_size(%rip), %cl
 617      0000
 618 047f 80F909   		cmpb	$9, %cl
 619 0482 7736     		ja	.L70
 200:src/EH.c      **** 	{
 201:src/EH.c      **** 		ehqueue[(queue_init + queue_size) % EHQUEUESZ].id = event_id; //Its a vector list
 620              		.loc 1 201 0
 621 0484 0FB61500 		movzbl	queue_init(%rip), %edx
 621      000000
 622 048b 0FB6C1   		movzbl	%cl, %eax
 623 048e 41B80A00 		movl	$10, %r8d
 623      0000
 202:src/EH.c      **** 		ehqueue[(queue_init + queue_size) % EHQUEUESZ].name = evname; //Its a vector list
 203:src/EH.c      **** 		queue_size++; 
 624              		.loc 1 203 0
 625 0494 FFC1     		incl	%ecx
 626 0496 880D0000 		movb	%cl, queue_size(%rip)
 626      0000
 201:src/EH.c      **** 		ehqueue[(queue_init + queue_size) % EHQUEUESZ].name = evname; //Its a vector list
GAS LISTING /tmp/cc15eBE3.s 			page 20


 627              		.loc 1 201 0
 628 049c 01D0     		addl	%edx, %eax
 629 049e 99       		cltd
 630 049f 41F7F8   		idivl	%r8d
 631 04a2 4863C2   		movslq	%edx, %rax
 632 04a5 48C1E004 		salq	$4, %rax
 633 04a9 4088B800 		movb	%dil, ehqueue(%rax)
 633      000000
 202:src/EH.c      **** 		ehqueue[(queue_init + queue_size) % EHQUEUESZ].name = evname; //Its a vector list
 634              		.loc 1 202 0
 635 04b0 4889B000 		movq	%rsi, ehqueue+8(%rax)
 635      000000
 204:src/EH.c      **** 		return 1; //Success
 636              		.loc 1 204 0
 637 04b7 B001     		movb	$1, %al
 638 04b9 C3       		ret
 639              	.L70:
 205:src/EH.c      **** 	}
 206:src/EH.c      **** 	else return -1; // No space, returns error
 640              		.loc 1 206 0
 641 04ba B0FF     		movb	$-1, %al
 207:src/EH.c      **** }
 642              		.loc 1 207 0
 643 04bc C3       		ret
 644              		.cfi_endproc
 645              	.LFE24:
 647              		.section	.rodata.str1.1
 648              	.LC10:
 649 0089 3E3E436F 		.string	">>Consuming event<<\n"
 649      6E73756D 
 649      696E6720 
 649      6576656E 
 649      743C3C0A 
 650              	.LC11:
 651 009e 45563A20 		.string	"EV: %d || Jump to:%p\n"
 651      2564207C 
 651      7C204A75 
 651      6D702074 
 651      6F3A2570 
 652              		.text
 653              		.globl	consume_event
 655              	consume_event:
 656              	.LFB25:
 208:src/EH.c      **** int8_t consume_event(void)
 209:src/EH.c      **** {
 657              		.loc 1 209 0
 658              		.cfi_startproc
 210:src/EH.c      **** 	if (queue_size > 0) //Has something
 659              		.loc 1 210 0
 660 04bd 803D0000 		cmpb	$0, queue_size(%rip)
 660      000000
 661 04c4 0F84D200 		je	.L83
 661      0000
 209:src/EH.c      **** 	if (queue_size > 0) //Has something
 662              		.loc 1 209 0
 663 04ca 55       		pushq	%rbp
 664              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/cc15eBE3.s 			page 21


 665              		.cfi_offset 6, -16
 666              	.LBB64:
 667              	.LBB65:
 668              	.LBB66:
 669              		.loc 2 104 0
 670 04cb BE000000 		movl	$.LC10, %esi
 670      00
 671 04d0 BF010000 		movl	$1, %edi
 671      00
 672 04d5 31C0     		xorl	%eax, %eax
 673              	.LBE66:
 674              	.LBE65:
 675              	.LBE64:
 209:src/EH.c      **** 	if (queue_size > 0) //Has something
 676              		.loc 1 209 0
 677 04d7 53       		pushq	%rbx
 678              		.cfi_def_cfa_offset 24
 679              		.cfi_offset 3, -24
 680 04d8 51       		pushq	%rcx
 681              		.cfi_def_cfa_offset 32
 682              	.LBB75:
 683              	.LBB68:
 684              	.LBB67:
 685              		.loc 2 104 0
 686 04d9 E8000000 		call	__printf_chk
 686      00
 687              	.LBE67:
 688              	.LBE68:
 689              	.LBB69:
 211:src/EH.c      **** 	{
 212:src/EH.c      **** 		printf(">>Consuming event<<\n");
 213:src/EH.c      **** 		register int8_t selected;
 214:src/EH.c      **** 		{ //Block used to scope the event variable
 215:src/EH.c      **** 			register new_event event = ehqueue[queue_init];
 690              		.loc 1 215 0
 691 04de 0FB60500 		movzbl	queue_init(%rip), %eax
 691      000000
 216:src/EH.c      **** 			queue_size--;
 692              		.loc 1 216 0
 693 04e5 FE0D0000 		decb	queue_size(%rip)
 693      0000
 215:src/EH.c      **** 			queue_size--;
 694              		.loc 1 215 0
 695 04eb 4863C8   		movslq	%eax, %rcx
 217:src/EH.c      **** 			queue_init = (queue_init+1)%(EHQUEUESZ); //Pops the first value and updates 
 696              		.loc 1 217 0
 697 04ee FFC0     		incl	%eax
 215:src/EH.c      **** 			queue_size--;
 698              		.loc 1 215 0
 699 04f0 48C1E104 		salq	$4, %rcx
 700              		.loc 1 217 0
 701 04f4 99       		cltd
 215:src/EH.c      **** 			queue_size--;
 702              		.loc 1 215 0
 703 04f5 0FB6B900 		movzbl	ehqueue(%rcx), %edi
 703      000000
 704 04fc 488BB100 		movq	ehqueue+8(%rcx), %rsi
GAS LISTING /tmp/cc15eBE3.s 			page 22


 704      000000
 705              		.loc 1 217 0
 706 0503 B90A0000 		movl	$10, %ecx
 706      00
 707 0508 F7F9     		idivl	%ecx
 218:src/EH.c      **** 		
 219:src/EH.c      **** 			//Gets the event pointer to
 220:src/EH.c      **** 			for (selected = 0; selected < EVENTQTTY; selected++)
 708              		.loc 1 220 0
 709 050a 31C0     		xorl	%eax, %eax
 217:src/EH.c      **** 			queue_init = (queue_init+1)%(EHQUEUESZ); //Pops the first value and updates 
 710              		.loc 1 217 0
 711 050c 88150000 		movb	%dl, queue_init(%rip)
 711      0000
 712 0512 BA000000 		movl	$ehvecpointers, %edx
 712      00
 713              	.L76:
 221:src/EH.c      **** 			{
 222:src/EH.c      **** 				if (ehvecpointers[selected].id == event.id && ehvecpointers[selected].name == event.name) break
 714              		.loc 1 222 0
 715 0517 0FBE0A   		movsbl	(%rdx), %ecx
 716 051a 39F9     		cmpl	%edi, %ecx
 717 051c 7506     		jne	.L74
 718              		.loc 1 222 0 is_stmt 0 discriminator 1
 719 051e 48397208 		cmpq	%rsi, 8(%rdx)
 720 0522 740C     		je	.L75
 721              	.L74:
 722 0524 FFC0     		incl	%eax
 723 0526 4883C218 		addq	$24, %rdx
 220:src/EH.c      **** 			{
 724              		.loc 1 220 0 is_stmt 1
 725 052a 3C04     		cmpb	$4, %al
 726 052c 75E9     		jne	.L76
 727              		.loc 1 222 0
 728 052e 89F9     		movl	%edi, %ecx
 729              	.L75:
 223:src/EH.c      **** 			}
 224:src/EH.c      **** 			if (ehvecpointers[selected].id != event.id || ehvecpointers[selected].name != event.name) return
 730              		.loc 1 224 0
 731 0530 480FBEC0 		movsbq	%al, %rax
 732 0534 486BC018 		imulq	$24, %rax, %rax
 733 0538 0FBEB800 		movsbl	ehvecpointers(%rax), %edi
 733      000000
 734 053f 39CF     		cmpl	%ecx, %edi
 735 0541 7404     		je	.L84
 736              	.L77:
 737              	.LBE69:
 738              	.LBE75:
 225:src/EH.c      **** 		}
 226:src/EH.c      **** 		register  uint8_t loop;
 227:src/EH.c      **** 		for (loop = ehvecpointers[selected].pos; loop < ehvecpointers[selected].pos + ehvecpointers[selec
 228:src/EH.c      **** 		{
 229:src/EH.c      **** 			printf("EV: %d || Jump to:%p\n", ehvecpointers[selected].id ,ehvec[loop]);
 230:src/EH.c      **** 			// vm_cpu(ehvec[loop]); // TODO:Should call CPU this way, sending the address to the function
 231:src/EH.c      **** 		}
 232:src/EH.c      **** 		return 1; // Success
 233:src/EH.c      **** 	}
GAS LISTING /tmp/cc15eBE3.s 			page 23


 234:src/EH.c      **** 	else return -1; //Nothing to Consume
 739              		.loc 1 234 0
 740 0543 B0FF     		movb	$-1, %al
 741 0545 EB51     		jmp	.L73
 742              	.L84:
 743              	.LBB76:
 744              	.LBB70:
 224:src/EH.c      **** 		}
 745              		.loc 1 224 0 discriminator 2
 746 0547 4839B000 		cmpq	%rsi, ehvecpointers+8(%rax)
 746      000000
 747 054e 75F3     		jne	.L77
 748              	.LBE70:
 227:src/EH.c      **** 		{
 749              		.loc 1 227 0
 750 0550 408AA800 		movb	ehvecpointers+16(%rax), %bpl
 750      000000
 751 0557 4889C3   		movq	%rax, %rbx
 752              	.L78:
 227:src/EH.c      **** 		{
 753              		.loc 1 227 0 is_stmt 0 discriminator 1
 754 055a 0FB68B00 		movzbl	ehvecpointers+16(%rbx), %ecx
 754      000000
 755 0561 0FB69300 		movzbl	ehvecpointers+17(%rbx), %edx
 755      000000
 756 0568 400FB6C5 		movzbl	%bpl, %eax
 757 056c 01CA     		addl	%ecx, %edx
 758 056e 39D0     		cmpl	%edx, %eax
 759 0570 7D24     		jge	.L85
 229:src/EH.c      **** 			// vm_cpu(ehvec[loop]); // TODO:Should call CPU this way, sending the address to the function
 760              		.loc 1 229 0 is_stmt 1 discriminator 2
 761 0572 0FBE9300 		movsbl	ehvecpointers(%rbx), %edx
 761      000000
 762              	.LBB71:
 763              	.LBB72:
 764              		.loc 2 104 0 discriminator 2
 765 0579 488B0CC5 		movq	ehvec(,%rax,8), %rcx
 765      00000000 
 766 0581 BE000000 		movl	$.LC11, %esi
 766      00
 767 0586 BF010000 		movl	$1, %edi
 767      00
 768 058b 31C0     		xorl	%eax, %eax
 769              	.LBE72:
 770              	.LBE71:
 227:src/EH.c      **** 		{
 771              		.loc 1 227 0 discriminator 2
 772 058d FFC5     		incl	%ebp
 773              	.LBB74:
 774              	.LBB73:
 775              		.loc 2 104 0 discriminator 2
 776 058f E8000000 		call	__printf_chk
 776      00
 777 0594 EBC4     		jmp	.L78
 778              	.L85:
 779              	.LBE73:
 780              	.LBE74:
GAS LISTING /tmp/cc15eBE3.s 			page 24


 232:src/EH.c      **** 	}
 781              		.loc 1 232 0
 782 0596 B001     		movb	$1, %al
 783              	.L73:
 784              	.LBE76:
 235:src/EH.c      **** }
 785              		.loc 1 235 0
 786 0598 5A       		popq	%rdx
 787              		.cfi_def_cfa_offset 24
 788 0599 5B       		popq	%rbx
 789              		.cfi_restore 3
 790              		.cfi_def_cfa_offset 16
 791 059a 5D       		popq	%rbp
 792              		.cfi_restore 6
 793              		.cfi_def_cfa_offset 8
 794 059b C3       		ret
 795              	.L83:
 234:src/EH.c      **** }
 796              		.loc 1 234 0
 797 059c B0FF     		movb	$-1, %al
 798              		.loc 1 235 0
 799 059e C3       		ret
 800              		.cfi_endproc
 801              	.LFE25:
 803              		.comm	ehvecpointers,96,16
 804              		.globl	timer_flag
 805              		.bss
 808              	timer_flag:
 809 0000 00       		.zero	1
 810              		.globl	queue_size
 813              	queue_size:
 814 0001 00       		.zero	1
 815              		.globl	queue_init
 818              	queue_init:
 819 0002 00       		.zero	1
 820              		.globl	ehqueue
 821 0003 00000000 		.align 16
 821      00000000 
 821      00000000 
 821      00
 824              	ehqueue:
 825 0010 00000000 		.zero	160
 825      00000000 
 825      00000000 
 825      00000000 
 825      00000000 
 826              		.globl	vec_size
 829              	vec_size:
 830 00b0 00       		.zero	1
 831              		.globl	ehvec
 832 00b1 00000000 		.align 16
 832      00000000 
 832      00000000 
 832      000000
 835              	ehvec:
 836 00c0 00000000 		.zero	80
 836      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 25


 836      00000000 
 836      00000000 
 836      00000000 
 837              		.text
 838              	.Letext0:
 839              		.file 3 "/usr/include/stdint.h"
 840              		.file 4 "src/EH.h"
GAS LISTING /tmp/cc15eBE3.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 EH.c
     /tmp/cc15eBE3.s:28     .text:0000000000000000 print_EH
                            *COM*:0000000000000060 ehvecpointers
     /tmp/cc15eBE3.s:835    .bss:00000000000000c0 ehvec
     /tmp/cc15eBE3.s:824    .bss:0000000000000010 ehqueue
     /tmp/cc15eBE3.s:813    .bss:0000000000000001 queue_size
     /tmp/cc15eBE3.s:818    .bss:0000000000000002 queue_init
     /tmp/cc15eBE3.s:201    .text:000000000000012e eh_init
     /tmp/cc15eBE3.s:226    .text:000000000000014b register_handler
     /tmp/cc15eBE3.s:829    .bss:00000000000000b0 vec_size
     /tmp/cc15eBE3.s:507    .text:00000000000003a6 remove_handler
     /tmp/cc15eBE3.s:611    .text:0000000000000479 insert_event
     /tmp/cc15eBE3.s:655    .text:00000000000004bd consume_event
     /tmp/cc15eBE3.s:808    .bss:0000000000000000 timer_flag

UNDEFINED SYMBOLS
__printf_chk
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"HAL.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 55535F53 		.string	"US_S"
   6      00
   7              	.LC1:
   8 0005 454E4344 		.string	"ENCD"
   8      00
   9              	.LC2:
  10 000a 52585458 		.string	"RXTX"
  10      00
  11              		.text
  12              		.globl	hal_call
  14              	hal_call:
  15              	.LFB19:
  16              		.file 1 "src/HAL.c"
   1:src/HAL.c     **** /***************************************************************************
   2:src/HAL.c     ****  *   Copyright (C) 2015 by                                                 *
   3:src/HAL.c     ****  *   - Carlos Eduardo Millani (carloseduardomillani@gmail.com)             *
   4:src/HAL.c     ****  *   - Edson Borin (edson@ic.unicamp.br)                                   *
   5:src/HAL.c     ****  *                                                                         *
   6:src/HAL.c     ****  *   This program is free software; you can redistribute it and/or modify  *
   7:src/HAL.c     ****  *   it under the terms of the GNU General Public License as published by  *
   8:src/HAL.c     ****  *   the Free Software Foundation; either version 2 of the License, or     *
   9:src/HAL.c     ****  *   (at your option) any later version.                                   *
  10:src/HAL.c     ****  *                                                                         *
  11:src/HAL.c     ****  *   This program is distributed in the hope that it will be useful,       *
  12:src/HAL.c     ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  13:src/HAL.c     ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  14:src/HAL.c     ****  *   GNU General Public License for more details.                          *
  15:src/HAL.c     ****  *                                                                         *
  16:src/HAL.c     ****  *   You should have received a copy of the GNU General Public License     *
  17:src/HAL.c     ****  *   along with this program; if not, write to the                         *
  18:src/HAL.c     ****  *   Free Software Foundation, Inc.,                                       *
  19:src/HAL.c     ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  20:src/HAL.c     ****  ***************************************************************************/
  21:src/HAL.c     **** #ifdef __cplusplus
  22:src/HAL.c     **** extern "C" {
  23:src/HAL.c     **** #endif    
  24:src/HAL.c     **** 
  25:src/HAL.c     **** #include "HAL.h"
  26:src/HAL.c     **** #include "vm.h"
  27:src/HAL.c     **** #include <string.h>
  28:src/HAL.c     **** 	
  29:src/HAL.c     **** #if PRINTING
  30:src/HAL.c     **** #include <stdio.h>
  31:src/HAL.c     **** #endif
  32:src/HAL.c     **** #include <stdio.h>
  33:src/HAL.c     **** 
  34:src/HAL.c     **** /*Defined peripherals ids:
  35:src/HAL.c     **** 	Ultrasonic  0
  36:src/HAL.c     **** 	Encoder     5
  37:src/HAL.c     **** 	Serial      10
  38:src/HAL.c     **** 	Moviment    15
  39:src/HAL.c     **** 	
GAS LISTING /tmp/cc15eBE3.s 			page 2


  40:src/HAL.c     **** */
  41:src/HAL.c     **** 
  42:src/HAL.c     **** uint8_t hal_call(uint32_t sensid, char identifier[])//Call to hardware I/O
  43:src/HAL.c     **** {
  17              		.loc 1 43 0
  18              		.cfi_startproc
  19              	.LVL0:
  20 0000 55       		pushq	%rbp
  21              		.cfi_def_cfa_offset 16
  22              		.cfi_offset 6, -16
  23 0001 89FD     		movl	%edi, %ebp
  24 0003 53       		pushq	%rbx
  25              		.cfi_def_cfa_offset 24
  26              		.cfi_offset 3, -24
  27 0004 4889F3   		movq	%rsi, %rbx
  44:src/HAL.c     **** 	uint8_t retval = 0;
  45:src/HAL.c     **** 	if (!strcmp(identifier,"US_S"))
  28              		.loc 1 45 0
  29 0007 BE000000 		movl	$.LC0, %esi
  29      00
  30              	.LVL1:
  31 000c 4889DF   		movq	%rbx, %rdi
  32              	.LVL2:
  43:src/HAL.c     **** 	uint8_t retval = 0;
  33              		.loc 1 43 0
  34 000f 51       		pushq	%rcx
  35              		.cfi_def_cfa_offset 32
  36              		.loc 1 45 0
  37 0010 E8000000 		call	strcmp
  37      00
  38              	.LVL3:
  39 0015 85C0     		testl	%eax, %eax
  40 0017 747B     		je	.L2
  46:src/HAL.c     **** 	{
  47:src/HAL.c     **** #if HAS_ULTRASONIC
  48:src/HAL.c     **** 		switch (sensid)
  49:src/HAL.c     **** 		{
  50:src/HAL.c     **** 			case 0: { //Read Ultrasonic
  51:src/HAL.c     **** 	#if PRINTING
  52:src/HAL.c     **** 				printf("(HAL)Read Ultra called\n");
  53:src/HAL.c     **** 	#endif // PRINTING
  54:src/HAL.c     **** 				break;
  55:src/HAL.c     **** 			}
  56:src/HAL.c     **** 			case 1: {
  57:src/HAL.c     **** 	#if PRINTING
  58:src/HAL.c     **** 				printf("(HAL)Config Ultra called\n");
  59:src/HAL.c     **** 	#endif // PRINTING
  60:src/HAL.c     **** 				break;
  61:src/HAL.c     **** 			}
  62:src/HAL.c     **** 		}
  63:src/HAL.c     **** #endif
  64:src/HAL.c     **** 	}
  65:src/HAL.c     **** 	else if (!strcmp(identifier,"ENCD"))
  41              		.loc 1 65 0
  42 0019 BE000000 		movl	$.LC1, %esi
  42      00
  43 001e 4889DF   		movq	%rbx, %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 3


  44 0021 E8000000 		call	strcmp
  44      00
  45              	.LVL4:
  46 0026 85C0     		testl	%eax, %eax
  47 0028 746A     		je	.L2
  66:src/HAL.c     **** 	{
  67:src/HAL.c     **** #if HAS_ENCODER
  68:src/HAL.c     **** 		switch (sensid)
  69:src/HAL.c     **** 		{
  70:src/HAL.c     **** 			case 5 : {
  71:src/HAL.c     **** 	#if PRINTING
  72:src/HAL.c     **** 				printf("(HAL)Read Encoder Count called\n");
  73:src/HAL.c     **** 	#endif // PRINTING	
  74:src/HAL.c     **** 				// read_encoder_counter(0);
  75:src/HAL.c     **** 				break;
  76:src/HAL.c     **** 			}
  77:src/HAL.c     **** 			case 6 : {
  78:src/HAL.c     **** 	#if PRINTING
  79:src/HAL.c     **** 				printf("(HAL)Read Encoder Time called\n");
  80:src/HAL.c     **** 	#endif // PRINTING	
  81:src/HAL.c     **** 				break;
  82:src/HAL.c     **** 			}
  83:src/HAL.c     **** 		}
  84:src/HAL.c     **** #endif
  85:src/HAL.c     **** 	}
  86:src/HAL.c     **** 	else if (!strcmp(identifier,"RXTX"))
  48              		.loc 1 86 0
  49 002a BE000000 		movl	$.LC2, %esi
  49      00
  50 002f 4889DF   		movq	%rbx, %rdi
  51 0032 E8000000 		call	strcmp
  51      00
  52              	.LVL5:
  53 0037 85C0     		testl	%eax, %eax
  54 0039 7559     		jne	.L2
  87:src/HAL.c     **** 	{
  88:src/HAL.c     **** #if HAS_SERIAL 
  89:src/HAL.c     **** 		switch (sensid)
  55              		.loc 1 89 0
  56 003b 8D7DF6   		leal	-10(%rbp), %edi
  57 003e 83FF04   		cmpl	$4, %edi
  58 0041 7751     		ja	.L2
  59 0043 FF24FD00 		jmp	*.L4(,%rdi,8)
  59      000000
  60              		.section	.rodata
  61              		.align 8
  62              		.align 4
  63              	.L4:
  64 0000 00000000 		.quad	.L3
  64      00000000 
  65 0008 00000000 		.quad	.L5
  65      00000000 
  66 0010 00000000 		.quad	.L6
  66      00000000 
  67 0018 00000000 		.quad	.L7
  67      00000000 
  68 0020 00000000 		.quad	.L8
GAS LISTING /tmp/cc15eBE3.s 			page 4


  68      00000000 
  69              		.text
  70              	.L3:
  71 004a 0FB63D00 		movzbl	RF+16(%rip), %edi
  71      000000
  90:src/HAL.c     **** 		{
  91:src/HAL.c     **** 			case 10: {
  92:src/HAL.c     **** 	#if PRINTING
  93:src/HAL.c     **** 				printf("(HAL)Send Byte called\n");
  94:src/HAL.c     **** 	#endif // PRINTING	
  95:src/HAL.c     **** 				send_byte(RF[4]);
  72              		.loc 1 95 0
  73 0051 E8000000 		call	send_byte
  73      00
  74              	.LVL6:
  96:src/HAL.c     **** 				break;
  75              		.loc 1 96 0
  76 0056 EB3C     		jmp	.L2
  77              	.L5:
  97:src/HAL.c     **** 			}
  98:src/HAL.c     **** 			case 11: {
  99:src/HAL.c     **** 	#if PRINTING
 100:src/HAL.c     **** 				printf("(HAL)Read Byte called\n");
 101:src/HAL.c     **** 	#endif // PRINTING
 102:src/HAL.c     **** 				RF[2] = read_byte();	
  78              		.loc 1 102 0
  79 0058 E8000000 		call	read_byte
  79      00
  80              	.LVL7:
  81 005d 0FBEC0   		movsbl	%al, %eax
  82 0060 89050000 		movl	%eax, RF+8(%rip)
  82      0000
 103:src/HAL.c     **** 				break;	
  83              		.loc 1 103 0
  84 0066 EB2C     		jmp	.L2
  85              	.L6:
 104:src/HAL.c     **** 			}
 105:src/HAL.c     **** 			case 12: {
 106:src/HAL.c     **** 	#if PRINTING
 107:src/HAL.c     **** 				printf("(HAL)Configure serial called\n");
 108:src/HAL.c     **** 	#endif // PRINTING	
 109:src/HAL.c     **** 				serial_configure(RF[4]); //TODO: Allow user to enable and disable interruptions later
  86              		.loc 1 109 0
  87 0068 8B3D0000 		movl	RF+16(%rip), %edi
  87      0000
  88 006e E8000000 		call	serial_configure
  88      00
  89              	.LVL8:
 110:src/HAL.c     **** 				break;
  90              		.loc 1 110 0
  91 0073 EB1F     		jmp	.L2
  92              	.L7:
 111:src/HAL.c     **** 			}
 112:src/HAL.c     **** 			case 13: {
 113:src/HAL.c     **** 	#if PRINTING
 114:src/HAL.c     **** 				printf("(HAL)Print number called\n");
 115:src/HAL.c     **** 	#endif // PRINTING	
GAS LISTING /tmp/cc15eBE3.s 			page 5


 116:src/HAL.c     **** 				printnum(RF[4]); 
  93              		.loc 1 116 0
  94 0075 8B3D0000 		movl	RF+16(%rip), %edi
  94      0000
  95 007b E8000000 		call	printnum
  95      00
  96              	.LVL9:
 117:src/HAL.c     **** 				break;
  97              		.loc 1 117 0
  98 0080 EB12     		jmp	.L2
  99              	.L8:
 118:src/HAL.c     **** 			}
 119:src/HAL.c     **** 			case 14: {
 120:src/HAL.c     **** 	#if PRINTING
 121:src/HAL.c     **** 				printf("(HAL)Print string called\n");
 122:src/HAL.c     **** 	#endif // PRINTING	
 123:src/HAL.c     **** 				print((char *)&VM_memory[RF[4]]);
 100              		.loc 1 123 0
 101 0082 8B3D0000 		movl	RF+16(%rip), %edi
 101      0000
 102 0088 4881C700 		addq	$VM_memory, %rdi
 102      000000
 103 008f E8000000 		call	print
 103      00
 104              	.LVL10:
 105              	.L2:
 124:src/HAL.c     **** 				break;
 125:src/HAL.c     **** 			}
 126:src/HAL.c     **** 		}
 127:src/HAL.c     **** #endif
 128:src/HAL.c     **** 	}
 129:src/HAL.c     **** 	else if (!strcmp(identifier,"MOVM"))
 130:src/HAL.c     **** 	{
 131:src/HAL.c     **** #if HAS_MOTORS
 132:src/HAL.c     **** 		switch (sensid)
 133:src/HAL.c     **** 		{
 134:src/HAL.c     **** 			case 15: {
 135:src/HAL.c     **** 	#if PRINTING
 136:src/HAL.c     **** 				printf("(HAL)Ahead called\n");
 137:src/HAL.c     **** 	#endif		
 138:src/HAL.c     **** 				ahead();
 139:src/HAL.c     **** 				break;
 140:src/HAL.c     **** 			}
 141:src/HAL.c     **** 			case 16: { 
 142:src/HAL.c     **** 	#if PRINTING
 143:src/HAL.c     **** 				printf("(HAL)Right called\n");
 144:src/HAL.c     **** 	#endif		
 145:src/HAL.c     **** 				turn_right();
 146:src/HAL.c     **** 				break;
 147:src/HAL.c     **** 			}
 148:src/HAL.c     **** 			case 17: {
 149:src/HAL.c     **** 	#if PRINTING
 150:src/HAL.c     **** 				printf("(HAL)Left called\n");
 151:src/HAL.c     **** 	#endif		
 152:src/HAL.c     **** 				turn_left();
 153:src/HAL.c     **** 				break;
 154:src/HAL.c     **** 			}
GAS LISTING /tmp/cc15eBE3.s 			page 6


 155:src/HAL.c     **** 			case 18: {
 156:src/HAL.c     **** 	#if PRINTING
 157:src/HAL.c     **** 				printf("(HAL)Mov. Setup called\n");
 158:src/HAL.c     **** 	#endif		
 159:src/HAL.c     **** 				setup_movement();
 160:src/HAL.c     **** 				break;
 161:src/HAL.c     **** 			}
 162:src/HAL.c     **** 			case 20: {
 163:src/HAL.c     **** 	#if PRINTING
 164:src/HAL.c     **** 				printf("(HAL)PWM called\n");
 165:src/HAL.c     **** 	#endif		
 166:src/HAL.c     **** 				break;
 167:src/HAL.c     **** 			}
 168:src/HAL.c     **** 		}
 169:src/HAL.c     **** #endif
 170:src/HAL.c     **** 	}
 171:src/HAL.c     **** 	else
 172:src/HAL.c     **** 	{
 173:src/HAL.c     **** #if PRINTING
 174:src/HAL.c     **** 			printf("(HAL) error - Unknown Hal Call number\n");
 175:src/HAL.c     **** #endif	
 176:src/HAL.c     **** 	}
 177:src/HAL.c     **** 	return retval;
 178:src/HAL.c     **** }
 106              		.loc 1 178 0
 107 0094 5A       		popq	%rdx
 108              		.cfi_def_cfa_offset 24
 109 0095 5B       		popq	%rbx
 110              		.cfi_def_cfa_offset 16
 111              	.LVL11:
 112 0096 31C0     		xorl	%eax, %eax
 113 0098 5D       		popq	%rbp
 114              		.cfi_def_cfa_offset 8
 115              	.LVL12:
 116 0099 C3       		ret
 117              		.cfi_endproc
 118              	.LFE19:
 120              	.Letext0:
 121              		.file 2 "/usr/include/stdint.h"
 122              		.file 3 "src/peripherals/serial/ARCH_serial.h"
 123              		.file 4 "src/vm.h"
 124              		.file 5 "/usr/include/string.h"
GAS LISTING /tmp/cc15eBE3.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 HAL.c
     /tmp/cc15eBE3.s:14     .text:0000000000000000 hal_call

UNDEFINED SYMBOLS
strcmp
RF
send_byte
read_byte
serial_configure
printnum
VM_memory
print
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"journal.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	JOURNAL_init
   6              	JOURNAL_init:
   7              	.LFB29:
   8              		.file 1 "src/journal.c"
   1:src/journal.c **** /*
   2:src/journal.c ****  * Copyright 2014 Alexandre Luiz Brisighello Filho <albf.unicamp@gmail.com>
   3:src/journal.c ****  *
   4:src/journal.c ****  * This file is part of spitz.
   5:src/journal.c ****  *
   6:src/journal.c ****  * spitz is free software: you can redistribute it and/or modify
   7:src/journal.c ****  * it under the terms of the GNU General Public License as published by
   8:src/journal.c ****  * the Free Software Foundation, either version 3 of the License, or
   9:src/journal.c ****  * (at your option) any later version.
  10:src/journal.c ****  *
  11:src/journal.c ****  * spitz is distributed in the hope that it will be useful,
  12:src/journal.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:src/journal.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:src/journal.c ****  * GNU General Public License for more details.
  15:src/journal.c ****  *
  16:src/journal.c ****  * You should have received a copy of the GNU General Public License
  17:src/journal.c ****  * along with spitz.  If not, see <http://www.gnu.org/licenses/>.
  18:src/journal.c ****  */
  19:src/journal.c **** 
  20:src/journal.c **** #include "journal.h"
  21:src/journal.c **** 
  22:src/journal.c **** #include <stdio.h>
  23:src/journal.c **** #include <stdlib.h>
  24:src/journal.c **** #include <string.h>
  25:src/journal.c **** #include <unistd.h>
  26:src/journal.c **** #include "log.h"
  27:src/journal.c **** 
  28:src/journal.c **** #define JOURNAL_INITIAL_CAPACITY 16
  29:src/journal.c **** 
  30:src/journal.c **** // Init journal, allocate all necessary memory to start booking.
  31:src/journal.c **** void JOURNAL_init(struct journal *dia, int num_threads, int parallel, int time) {
   9              		.loc 1 31 0
  10              		.cfi_startproc
  11              	.LVL0:
  12 0000 4157     		pushq	%r15
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 15, -16
  15 0002 4189CF   		movl	%ecx, %r15d
  16 0005 4156     		pushq	%r14
  17              		.cfi_def_cfa_offset 24
  18              		.cfi_offset 14, -24
  19 0007 4189D6   		movl	%edx, %r14d
  20 000a 4155     		pushq	%r13
  21              		.cfi_def_cfa_offset 32
  22              		.cfi_offset 13, -32
  23 000c 4154     		pushq	%r12
  24              		.cfi_def_cfa_offset 40
  25              		.cfi_offset 12, -40
  26 000e 4189F4   		movl	%esi, %r12d
  27 0011 55       		pushq	%rbp
GAS LISTING /tmp/cc15eBE3.s 			page 2


  28              		.cfi_def_cfa_offset 48
  29              		.cfi_offset 6, -48
  32:src/journal.c ****     int i;
  33:src/journal.c ****     
  34:src/journal.c ****     //if (time) {
  35:src/journal.c ****     //  gettimeofday(&dia->zero, NULL);
  36:src/journal.c ****     //}
  37:src/journal.c **** 
  38:src/journal.c ****     dia->size = (int *) malloc(sizeof(int)*num_threads);
  30              		.loc 1 38 0
  31 0012 4863EE   		movslq	%esi, %rbp
  32 0015 4C8D2CAD 		leaq	0(,%rbp,4), %r13
  32      00000000 
  31:src/journal.c ****     int i;
  33              		.loc 1 31 0
  34 001d 53       		pushq	%rbx
  35              		.cfi_def_cfa_offset 56
  36              		.cfi_offset 3, -56
  37 001e 4889FB   		movq	%rdi, %rbx
  38              		.loc 1 38 0
  39 0021 4C89EF   		movq	%r13, %rdi
  40              	.LVL1:
  31:src/journal.c ****     int i;
  41              		.loc 1 31 0
  42 0024 4150     		pushq	%r8
  43              		.cfi_def_cfa_offset 64
  44              		.loc 1 38 0
  45 0026 E8000000 		call	malloc
  45      00
  46              	.LVL2:
  39:src/journal.c ****     dia->capacity = (int *) malloc(sizeof(int)*num_threads);
  47              		.loc 1 39 0
  48 002b 4C89EF   		movq	%r13, %rdi
  38:src/journal.c ****     dia->capacity = (int *) malloc(sizeof(int)*num_threads);
  49              		.loc 1 38 0
  50 002e 48894308 		movq	%rax, 8(%rbx)
  51              		.loc 1 39 0
  52 0032 E8000000 		call	malloc
  52      00
  53              	.LVL3:
  40:src/journal.c ****     dia->entries = (struct j_entry **) malloc(sizeof(struct j_entry *)*num_threads);
  54              		.loc 1 40 0
  55 0037 488D3CED 		leaq	0(,%rbp,8), %rdi
  55      00000000 
  39:src/journal.c ****     dia->capacity = (int *) malloc(sizeof(int)*num_threads);
  56              		.loc 1 39 0
  57 003f 48894310 		movq	%rax, 16(%rbx)
  58              		.loc 1 40 0
  59 0043 E8000000 		call	malloc
  59      00
  60              	.LVL4:
  41:src/journal.c ****     dia->id_type = (char *) malloc(sizeof(char)*num_threads);
  61              		.loc 1 41 0
  62 0048 4889EF   		movq	%rbp, %rdi
  40:src/journal.c ****     dia->entries = (struct j_entry **) malloc(sizeof(struct j_entry *)*num_threads);
  63              		.loc 1 40 0
  64 004b 488903   		movq	%rax, (%rbx)
GAS LISTING /tmp/cc15eBE3.s 			page 3


  42:src/journal.c ****     dia->parallel = parallel;
  43:src/journal.c ****     dia->time = time;
  44:src/journal.c **** 
  45:src/journal.c ****     for(i = 0; i < num_threads; i++) {
  65              		.loc 1 45 0
  66 004e 31ED     		xorl	%ebp, %ebp
  41:src/journal.c ****     dia->id_type = (char *) malloc(sizeof(char)*num_threads);
  67              		.loc 1 41 0
  68 0050 E8000000 		call	malloc
  68      00
  69              	.LVL5:
  42:src/journal.c ****     dia->parallel = parallel;
  70              		.loc 1 42 0
  71 0055 44897328 		movl	%r14d, 40(%rbx)
  41:src/journal.c ****     dia->id_type = (char *) malloc(sizeof(char)*num_threads);
  72              		.loc 1 41 0
  73 0059 48894320 		movq	%rax, 32(%rbx)
  43:src/journal.c **** 
  74              		.loc 1 43 0
  75 005d 44897B2C 		movl	%r15d, 44(%rbx)
  76              	.LVL6:
  77              	.L2:
  78              		.loc 1 45 0 discriminator 1
  79 0061 4139EC   		cmpl	%ebp, %r12d
  80 0064 7E30     		jle	.L6
  46:src/journal.c ****         dia->size[i] = 0;
  81              		.loc 1 46 0 discriminator 2
  82 0066 488B4308 		movq	8(%rbx), %rax
  47:src/journal.c ****         dia->capacity[i] = JOURNAL_INITIAL_CAPACITY;
  48:src/journal.c ****         dia->entries[i] = (struct j_entry *) malloc(sizeof(struct j_entry)*JOURNAL_INITIAL_CAPACITY
  83              		.loc 1 48 0 discriminator 2
  84 006a BF000100 		movl	$256, %edi
  84      00
  46:src/journal.c ****         dia->size[i] = 0;
  85              		.loc 1 46 0 discriminator 2
  86 006f C704A800 		movl	$0, (%rax,%rbp,4)
  86      000000
  47:src/journal.c ****         dia->capacity[i] = JOURNAL_INITIAL_CAPACITY;
  87              		.loc 1 47 0 discriminator 2
  88 0076 488B4310 		movq	16(%rbx), %rax
  89 007a C704A810 		movl	$16, (%rax,%rbp,4)
  89      000000
  90              		.loc 1 48 0 discriminator 2
  91 0081 488B03   		movq	(%rbx), %rax
  92 0084 4C8D2CE8 		leaq	(%rax,%rbp,8), %r13
  93 0088 48FFC5   		incq	%rbp
  94              	.LVL7:
  95 008b E8000000 		call	malloc
  95      00
  96              	.LVL8:
  97 0090 49894500 		movq	%rax, 0(%r13)
  98 0094 EBCB     		jmp	.L2
  99              	.LVL9:
 100              	.L6:
  49:src/journal.c ****     }
  50:src/journal.c **** 
  51:src/journal.c ****     //if (parallel) {
GAS LISTING /tmp/cc15eBE3.s 			page 4


  52:src/journal.c ****     //  pthread_mutex_init(&dia->id_lock, NULL);
  53:src/journal.c ****     //}
  54:src/journal.c ****       
  55:src/journal.c ****     dia->c_id = 0;
 101              		.loc 1 55 0
 102 0096 C7433000 		movl	$0, 48(%rbx)
 102      000000
  56:src/journal.c ****     dia->num_threads = num_threads;
 103              		.loc 1 56 0
 104 009d 44896318 		movl	%r12d, 24(%rbx)
  57:src/journal.c **** }
 105              		.loc 1 57 0
 106 00a1 58       		popq	%rax
 107              		.cfi_def_cfa_offset 56
 108 00a2 5B       		popq	%rbx
 109              		.cfi_def_cfa_offset 48
 110              	.LVL10:
 111 00a3 5D       		popq	%rbp
 112              		.cfi_def_cfa_offset 40
 113              	.LVL11:
 114 00a4 415C     		popq	%r12
 115              		.cfi_def_cfa_offset 32
 116              	.LVL12:
 117 00a6 415D     		popq	%r13
 118              		.cfi_def_cfa_offset 24
 119 00a8 415E     		popq	%r14
 120              		.cfi_def_cfa_offset 16
 121              	.LVL13:
 122 00aa 415F     		popq	%r15
 123              		.cfi_def_cfa_offset 8
 124              	.LVL14:
 125 00ac C3       		ret
 126              		.cfi_endproc
 127              	.LFE29:
 129              		.section	.rodata.str1.1,"aMS",@progbits,1
 130              	.LC0:
 131 0000 54727969 		.string	"Trying to use more threads than available."
 131      6E672074 
 131      6F207573 
 131      65206D6F 
 131      72652074 
 132              		.text
 133              		.globl	JOURNAL_get_id
 135              	JOURNAL_get_id:
 136              	.LFB30:
  58:src/journal.c **** 
  59:src/journal.c **** // Get id to a thread. Each thread has a different id.
  60:src/journal.c **** int JOURNAL_get_id(struct journal *dia, char my_type) {
 137              		.loc 1 60 0
 138              		.cfi_startproc
 139              	.LVL15:
 140 00ad 55       		pushq	%rbp
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 6, -16
 143 00ae 89F5     		movl	%esi, %ebp
 144 00b0 53       		pushq	%rbx
 145              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/cc15eBE3.s 			page 5


 146              		.cfi_offset 3, -24
 147 00b1 4889FB   		movq	%rdi, %rbx
 148 00b4 51       		pushq	%rcx
 149              		.cfi_def_cfa_offset 32
  61:src/journal.c ****     int ret;
  62:src/journal.c ****     
  63:src/journal.c ****     if (dia->c_id >= dia->num_threads) {
 150              		.loc 1 63 0
 151 00b5 8B4718   		movl	24(%rdi), %eax
 152 00b8 394730   		cmpl	%eax, 48(%rdi)
 153 00bb 7C0C     		jl	.L8
  64:src/journal.c **** 	error("Trying to use more threads than available.");
 154              		.loc 1 64 0
 155 00bd BF000000 		movl	$.LC0, %edi
 155      00
 156              	.LVL16:
 157 00c2 31C0     		xorl	%eax, %eax
 158 00c4 E8000000 		call	error
 158      00
 159              	.LVL17:
 160              	.L8:
  65:src/journal.c ****     }
  66:src/journal.c ****     
  67:src/journal.c ****     //if (dia->parallel) {
  68:src/journal.c ****     //  pthread_mutex_lock(&dia->id_lock);
  69:src/journal.c ****     //}
  70:src/journal.c ****     ret = dia->c_id;
 161              		.loc 1 70 0
 162 00c9 8B4330   		movl	48(%rbx), %eax
 163              	.LVL18:
  71:src/journal.c ****     dia->c_id++;
  72:src/journal.c ****     //if (dia->parallel) {
  73:src/journal.c ****     //  pthread_mutex_unlock(&dia->id_lock);
  74:src/journal.c ****     //}
  75:src/journal.c ****     dia->id_type[ret] = my_type;
 164              		.loc 1 75 0
 165 00cc 488B4B20 		movq	32(%rbx), %rcx
  71:src/journal.c ****     dia->c_id++;
 166              		.loc 1 71 0
 167 00d0 8D5001   		leal	1(%rax), %edx
 168 00d3 895330   		movl	%edx, 48(%rbx)
 169              		.loc 1 75 0
 170 00d6 4863D0   		movslq	%eax, %rdx
 171 00d9 40882C11 		movb	%bpl, (%rcx,%rdx)
  76:src/journal.c ****     
  77:src/journal.c ****     return ret;
  78:src/journal.c **** }
 172              		.loc 1 78 0
 173 00dd 5A       		popq	%rdx
 174              		.cfi_def_cfa_offset 24
 175 00de 5B       		popq	%rbx
 176              		.cfi_def_cfa_offset 16
 177              	.LVL19:
 178 00df 5D       		popq	%rbp
 179              		.cfi_def_cfa_offset 8
 180 00e0 C3       		ret
 181              		.cfi_endproc
GAS LISTING /tmp/cc15eBE3.s 			page 6


 182              	.LFE30:
 184              		.globl	JOURNAL_new_entry
 186              	JOURNAL_new_entry:
 187              	.LFB31:
  79:src/journal.c **** 
  80:src/journal.c **** // Get reference to the next entry. Update the values to the allocated entry.
  81:src/journal.c **** struct j_entry * JOURNAL_new_entry(struct journal *dia, int id) {
 188              		.loc 1 81 0
 189              		.cfi_startproc
 190              	.LVL20:
 191 00e1 4156     		pushq	%r14
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 14, -16
 194 00e3 4155     		pushq	%r13
 195              		.cfi_def_cfa_offset 24
 196              		.cfi_offset 13, -24
 197 00e5 4154     		pushq	%r12
 198              		.cfi_def_cfa_offset 32
 199              		.cfi_offset 12, -32
 200 00e7 55       		pushq	%rbp
 201              		.cfi_def_cfa_offset 40
 202              		.cfi_offset 6, -40
  82:src/journal.c ****     int index = dia->size[id];
 203              		.loc 1 82 0
 204 00e8 4863EE   		movslq	%esi, %rbp
 205 00eb 4C8D2CAD 		leaq	0(,%rbp,4), %r13
 205      00000000 
  81:src/journal.c ****     int index = dia->size[id];
 206              		.loc 1 81 0
 207 00f3 53       		pushq	%rbx
 208              		.cfi_def_cfa_offset 48
 209              		.cfi_offset 3, -48
 210              		.loc 1 82 0
 211 00f4 488B4708 		movq	8(%rdi), %rax
  81:src/journal.c ****     int index = dia->size[id];
 212              		.loc 1 81 0
 213 00f8 4889FB   		movq	%rdi, %rbx
 214              		.loc 1 82 0
 215 00fb 448B24A8 		movl	(%rax,%rbp,4), %r12d
 216              	.LVL21:
  83:src/journal.c **** 
  84:src/journal.c ****     if(dia->capacity[id] == dia->size[id]) {
 217              		.loc 1 84 0
 218 00ff 4C89E8   		movq	%r13, %rax
 219 0102 48034710 		addq	16(%rdi), %rax
 220 0106 443920   		cmpl	%r12d, (%rax)
 221 0109 751F     		jne	.L11
  85:src/journal.c ****         dia->capacity[id] = dia->capacity[id]*2;
 222              		.loc 1 85 0
 223 010b 438D3424 		leal	(%r12,%r12), %esi
 224              	.LVL22:
 225 010f 8930     		movl	%esi, (%rax)
  86:src/journal.c ****         dia->entries[id] = (struct j_entry *) realloc (dia->entries[id], sizeof(struct j_entry)*dia
 226              		.loc 1 86 0
 227 0111 488B07   		movq	(%rdi), %rax
 228 0114 4863F6   		movslq	%esi, %rsi
 229 0117 48C1E604 		salq	$4, %rsi
GAS LISTING /tmp/cc15eBE3.s 			page 7


 230 011b 4C8D34E8 		leaq	(%rax,%rbp,8), %r14
 231 011f 498B3E   		movq	(%r14), %rdi
 232              	.LVL23:
 233 0122 E8000000 		call	realloc
 233      00
 234              	.LVL24:
 235 0127 498906   		movq	%rax, (%r14)
 236              	.L11:
  87:src/journal.c ****     }
  88:src/journal.c **** 
  89:src/journal.c ****     dia->size[id]++;    
  90:src/journal.c ****     dia->entries[id][index].size = -1;
 237              		.loc 1 90 0
 238 012a 488B03   		movq	(%rbx), %rax
  89:src/journal.c ****     dia->entries[id][index].size = -1;
 239              		.loc 1 89 0
 240 012d 4C036B08 		addq	8(%rbx), %r13
 241              		.loc 1 90 0
 242 0131 488D14E8 		leaq	(%rax,%rbp,8), %rdx
 243 0135 4963C4   		movslq	%r12d, %rax
 244 0138 48C1E004 		salq	$4, %rax
  89:src/journal.c ****     dia->entries[id][index].size = -1;
 245              		.loc 1 89 0
 246 013c 41FF4500 		incl	0(%r13)
 247              		.loc 1 90 0
 248 0140 4889C1   		movq	%rax, %rcx
 249 0143 48030A   		addq	(%rdx), %rcx
  91:src/journal.c ****     dia->entries[id][index].action = NULL;
 250              		.loc 1 91 0
 251 0146 48C70100 		movq	$0, (%rcx)
 251      000000
  90:src/journal.c ****     dia->entries[id][index].action = NULL;
 252              		.loc 1 90 0
 253 014d C74108FF 		movl	$-1, 8(%rcx)
 253      FFFFFF
  92:src/journal.c ****     return &(dia->entries[id][index]);
  93:src/journal.c **** }
 254              		.loc 1 93 0
 255 0154 5B       		popq	%rbx
 256              		.cfi_def_cfa_offset 40
 257              	.LVL25:
 258 0155 5D       		popq	%rbp
 259              		.cfi_def_cfa_offset 32
 260              	.LVL26:
 261 0156 415C     		popq	%r12
 262              		.cfi_def_cfa_offset 24
 263              	.LVL27:
 264 0158 415D     		popq	%r13
 265              		.cfi_def_cfa_offset 16
  92:src/journal.c ****     return &(dia->entries[id][index]);
 266              		.loc 1 92 0
 267 015a 480302   		addq	(%rdx), %rax
 268              		.loc 1 93 0
 269 015d 415E     		popq	%r14
 270              		.cfi_def_cfa_offset 8
 271 015f C3       		ret
 272              		.cfi_endproc
GAS LISTING /tmp/cc15eBE3.s 			page 8


 273              	.LFE31:
 275              		.globl	JOURNAL_insert_text
 277              	JOURNAL_insert_text:
 278              	.LFB32:
  94:src/journal.c **** 
  95:src/journal.c **** // Add text to entry.
  96:src/journal.c **** void JOURNAL_insert_text(struct j_entry * entry, char * text) {
 279              		.loc 1 96 0
 280              		.cfi_startproc
 281              	.LVL28:
 282 0160 53       		pushq	%rbx
 283              		.cfi_def_cfa_offset 16
 284              		.cfi_offset 3, -16
  97:src/journal.c ****     entry->action = (char *) malloc (sizeof(char)*(strlen(text)+10));
 285              		.loc 1 97 0
 286 0161 31C0     		xorl	%eax, %eax
  96:src/journal.c ****     entry->action = (char *) malloc (sizeof(char)*(strlen(text)+10));
 287              		.loc 1 96 0
 288 0163 4889FB   		movq	%rdi, %rbx
 289              		.loc 1 97 0
 290 0166 4883C9FF 		orq	$-1, %rcx
 291 016a 4889F7   		movq	%rsi, %rdi
 292              	.LVL29:
  96:src/journal.c ****     entry->action = (char *) malloc (sizeof(char)*(strlen(text)+10));
 293              		.loc 1 96 0
 294 016d 4883EC10 		subq	$16, %rsp
 295              		.cfi_def_cfa_offset 32
 296              		.loc 1 97 0
 297 0171 48897424 		movq	%rsi, 8(%rsp)
 297      08
 298 0176 F2AE     		repnz scasb
 299              	.LVL30:
 300 0178 48F7D1   		notq	%rcx
 301 017b 488D7909 		leaq	9(%rcx), %rdi
 302 017f E8000000 		call	malloc
 302      00
 303              	.LVL31:
 304              	.LBB18:
 305              	.LBB19:
 306              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2014 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
GAS LISTING /tmp/cc15eBE3.s 			page 9


  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  27:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  28:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  29:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  30:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_BSD
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  51:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  57:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  59:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  65:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  71:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  72:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
GAS LISTING /tmp/cc15eBE3.s 			page 10


  75:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  76:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  78:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  79:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  82:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  85:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  86:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  87:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_BSD
  88:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (bcopy (const void *__src, void *__dest, size_t __len))
  90:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  91:/usr/include/x86_64-linux-gnu/bits/string3.h ****   (void) __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  92:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  93:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  94:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void
  95:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (bzero (void *__dest, size_t __len))
  96:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/string3.h ****   (void) __builtin___memset_chk (__dest, '\0', __len, __bos0 (__dest));
  98:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  99:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
 100:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function char *
 102:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
 103:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
 307              		.loc 2 104 0
 308 0184 488B7424 		movq	8(%rsp), %rsi
 308      08
 309              	.LBE19:
 310              	.LBE18:
 311              		.loc 1 97 0
 312 0189 488903   		movq	%rax, (%rbx)
 313              	.LVL32:
  98:src/journal.c ****     strcpy(entry->action, text);
  99:src/journal.c ****     //printf("%s\n", text);
 100:src/journal.c **** }
 314              		.loc 1 100 0
 315 018c 4883C410 		addq	$16, %rsp
 316              		.cfi_def_cfa_offset 16
 317 0190 5B       		popq	%rbx
 318              		.cfi_def_cfa_offset 8
 319              	.LVL33:
 320              	.LBB21:
 321              	.LBB20:
 322              		.loc 2 104 0
 323 0191 4889C7   		movq	%rax, %rdi
 324 0194 E9000000 		jmp	strcpy
 324      00
 325              	.LVL34:
 326              	.LBE20:
 327              	.LBE21:
 328              		.cfi_endproc
GAS LISTING /tmp/cc15eBE3.s 			page 11


 329              	.LFE32:
 331              		.globl	JOURNAL_remove_entry
 333              	JOURNAL_remove_entry:
 334              	.LFB33:
 101:src/journal.c **** 
 102:src/journal.c **** // Used to fix id, removing the latest entry from the journal.
 103:src/journal.c **** void JOURNAL_remove_entry(struct journal *dia, int id) {
 335              		.loc 1 103 0
 336              		.cfi_startproc
 337              	.LVL35:
 104:src/journal.c ****     dia->size[id]--;
 338              		.loc 1 104 0
 339 0199 488B4708 		movq	8(%rdi), %rax
 340 019d 4863F6   		movslq	%esi, %rsi
 341 01a0 FF0CB0   		decl	(%rax,%rsi,4)
 342 01a3 C3       		ret
 343              		.cfi_endproc
 344              	.LFE33:
 346              		.globl	JOURNAL_free
 348              	JOURNAL_free:
 349              	.LFB34:
 105:src/journal.c **** }
 106:src/journal.c **** 
 107:src/journal.c **** // Free memory allocated by the journal.
 108:src/journal.c **** void JOURNAL_free(struct journal *dia) {
 350              		.loc 1 108 0
 351              		.cfi_startproc
 352              	.LVL36:
 353 01a4 4156     		pushq	%r14
 354              		.cfi_def_cfa_offset 16
 355              		.cfi_offset 14, -16
 356 01a6 4155     		pushq	%r13
 357              		.cfi_def_cfa_offset 24
 358              		.cfi_offset 13, -24
 109:src/journal.c ****     int i, j;
 110:src/journal.c **** 
 111:src/journal.c ****     free(dia->capacity);
 112:src/journal.c **** 
 113:src/journal.c ****     for(i = 0; i < dia->num_threads; i++) {
 359              		.loc 1 113 0
 360 01a8 4531ED   		xorl	%r13d, %r13d
 108:src/journal.c ****     int i, j;
 361              		.loc 1 108 0
 362 01ab 4154     		pushq	%r12
 363              		.cfi_def_cfa_offset 32
 364              		.cfi_offset 12, -32
 365              		.loc 1 113 0
 366 01ad 4531E4   		xorl	%r12d, %r12d
 108:src/journal.c ****     int i, j;
 367              		.loc 1 108 0
 368 01b0 55       		pushq	%rbp
 369              		.cfi_def_cfa_offset 40
 370              		.cfi_offset 6, -40
 371 01b1 53       		pushq	%rbx
 372              		.cfi_def_cfa_offset 48
 373              		.cfi_offset 3, -48
 108:src/journal.c ****     int i, j;
GAS LISTING /tmp/cc15eBE3.s 			page 12


 374              		.loc 1 108 0
 375 01b2 4889FB   		movq	%rdi, %rbx
 111:src/journal.c **** 
 376              		.loc 1 111 0
 377 01b5 488B7F10 		movq	16(%rdi), %rdi
 378              	.LVL37:
 379 01b9 E8000000 		call	free
 379      00
 380              	.LVL38:
 381              	.L17:
 382              		.loc 1 113 0 discriminator 1
 383 01be 44396318 		cmpl	%r12d, 24(%rbx)
 384 01c2 7E41     		jle	.L19
 385 01c4 4E8D34A5 		leaq	0(,%r12,4), %r14
 385      00000000 
 386              		.loc 1 113 0 is_stmt 0
 387 01cc 31ED     		xorl	%ebp, %ebp
 388              	.L20:
 389              	.LVL39:
 114:src/journal.c **** 	for(j=0; j < dia->size[i]; j++) {
 390              		.loc 1 114 0 is_stmt 1 discriminator 1
 391 01ce 488B4308 		movq	8(%rbx), %rax
 392 01d2 488B13   		movq	(%rbx), %rdx
 393 01d5 42392C30 		cmpl	%ebp, (%rax,%r14)
 394 01d9 7E18     		jle	.L22
 115:src/journal.c **** 	    free(dia->entries[i][j].action);
 395              		.loc 1 115 0 discriminator 2
 396 01db 4889E8   		movq	%rbp, %rax
 397 01de 48FFC5   		incq	%rbp
 398              	.LVL40:
 399 01e1 48C1E004 		salq	$4, %rax
 400 01e5 4A03042A 		addq	(%rdx,%r13), %rax
 401 01e9 488B38   		movq	(%rax), %rdi
 402 01ec E8000000 		call	free
 402      00
 403              	.LVL41:
 404 01f1 EBDB     		jmp	.L20
 405              	.LVL42:
 406              	.L22:
 116:src/journal.c **** 	}
 117:src/journal.c ****         free(dia->entries[i]);
 407              		.loc 1 117 0
 408 01f3 4A8B3C2A 		movq	(%rdx,%r13), %rdi
 409 01f7 49FFC4   		incq	%r12
 410              	.LVL43:
 411 01fa 4983C508 		addq	$8, %r13
 412 01fe E8000000 		call	free
 412      00
 413              	.LVL44:
 414 0203 EBB9     		jmp	.L17
 415              	.LVL45:
 416              	.L19:
 118:src/journal.c ****     }
 119:src/journal.c **** 
 120:src/journal.c ****     free(dia->size);
 417              		.loc 1 120 0
 418 0205 488B7B08 		movq	8(%rbx), %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 13


 419 0209 E8000000 		call	free
 419      00
 420              	.LVL46:
 121:src/journal.c ****     free(dia->entries);
 421              		.loc 1 121 0
 422 020e 488B3B   		movq	(%rbx), %rdi
 423 0211 E8000000 		call	free
 423      00
 424              	.LVL47:
 122:src/journal.c ****     free(dia->id_type);
 425              		.loc 1 122 0
 426 0216 488B7B20 		movq	32(%rbx), %rdi
 123:src/journal.c ****     //free(dia);
 124:src/journal.c **** }
 427              		.loc 1 124 0
 428 021a 5B       		popq	%rbx
 429              		.cfi_def_cfa_offset 40
 430              	.LVL48:
 431 021b 5D       		popq	%rbp
 432              		.cfi_def_cfa_offset 32
 433 021c 415C     		popq	%r12
 434              		.cfi_def_cfa_offset 24
 435              	.LVL49:
 436 021e 415D     		popq	%r13
 437              		.cfi_def_cfa_offset 16
 438 0220 415E     		popq	%r14
 439              		.cfi_def_cfa_offset 8
 122:src/journal.c ****     free(dia->id_type);
 440              		.loc 1 122 0
 441 0222 E9000000 		jmp	free
 441      00
 442              	.LVL50:
 443              		.cfi_endproc
 444              	.LFE34:
 446              		.section	.rodata.str1.1
 447              	.LC1:
 448 002b 25647C25 		.string	"%d|%s\n"
 448      730A00
 449              	.LC2:
 450 0032 7C00     		.string	"|"
 451              	.LC3:
 452 0034 256400   		.string	"%d"
 453              	.LC4:
 454 0037 456E7472 		.string	"Entry without action, size and time=0, number %d, thread %d"
 454      79207769 
 454      74686F75 
 454      74206163 
 454      74696F6E 
 455              	.LC5:
 456 0073 7700     		.string	"w"
 457              	.LC6:
 458 0075 257300   		.string	"%s"
 459              		.text
 460              		.globl	JOURNAL_generate_info
 462              	JOURNAL_generate_info:
 463              	.LFB35:
 125:src/journal.c **** 
GAS LISTING /tmp/cc15eBE3.s 			page 14


 126:src/journal.c **** // Genereate info and save to filename (if filename != NULL)
 127:src/journal.c **** // Format: action(1) + | + start(30) + | + finish(30) + ;\n <= 70
 128:src/journal.c **** char * JOURNAL_generate_info(struct journal *dia, char * filename) {
 464              		.loc 1 128 0
 465              		.cfi_startproc
 466              	.LVL51:
 467 0227 4157     		pushq	%r15
 468              		.cfi_def_cfa_offset 16
 469              		.cfi_offset 15, -16
 470 0229 4156     		pushq	%r14
 471              		.cfi_def_cfa_offset 24
 472              		.cfi_offset 14, -24
 473 022b 4155     		pushq	%r13
 474              		.cfi_def_cfa_offset 32
 475              		.cfi_offset 13, -32
 476 022d 4989FD   		movq	%rdi, %r13
 477 0230 4154     		pushq	%r12
 478              		.cfi_def_cfa_offset 40
 479              		.cfi_offset 12, -40
 129:src/journal.c ****     int size = 0;
 130:src/journal.c ****     int i,j, check;
 131:src/journal.c ****     char * info;
 132:src/journal.c ****     char aux[10], buffer[50];
 133:src/journal.c ****     FILE *f;
 134:src/journal.c ****     int counter=0;
 480              		.loc 1 134 0
 481 0232 4531E4   		xorl	%r12d, %r12d
 128:src/journal.c ****     int size = 0;
 482              		.loc 1 128 0
 483 0235 55       		pushq	%rbp
 484              		.cfi_def_cfa_offset 48
 485              		.cfi_offset 6, -48
 486 0236 53       		pushq	%rbx
 487              		.cfi_def_cfa_offset 56
 488              		.cfi_offset 3, -56
 135:src/journal.c **** 
 136:src/journal.c ****     /*for(i=0; i < dia->num_threads; i++) {
 137:src/journal.c **** 	for(j=0; j < dia->size[i]; j++) {
 138:src/journal.c **** 	    if(dia->entries[i][j].action != NULL) {
 139:src/journal.c **** 		size += strlen(dia->entries[i][j].action);
 140:src/journal.c **** 	    }
 141:src/journal.c **** 	    else {
 142:src/journal.c **** 		warning("No text in entry %d of thread %d", j, i);
 143:src/journal.c **** 	    }
 144:src/journal.c **** 	    if(dia->time) {
 145:src/journal.c **** 	      size += 50;
 146:src/journal.c **** 	    }
 147:src/journal.c **** 	    if(dia->entries[i][j].size >= 0) {
 148:src/journal.c **** 	      size += 15;
 149:src/journal.c **** 	    }
 150:src/journal.c **** 	}
 151:src/journal.c **** 	size++;
 152:src/journal.c ****     }
 153:src/journal.c **** 
 154:src/journal.c ****     info = (char *) malloc ((size+(dia->num_threads*20)+1)*sizeof(char));
 155:src/journal.c ****     info[0] = '\0'; */
 156:src/journal.c ****     
GAS LISTING /tmp/cc15eBE3.s 			page 15


 157:src/journal.c ****     for(i=0; i < dia->num_threads; i++) {
 489              		.loc 1 157 0
 490 0237 31DB     		xorl	%ebx, %ebx
 128:src/journal.c ****     int size = 0;
 491              		.loc 1 128 0
 492 0239 4883EC68 		subq	$104, %rsp
 493              		.cfi_def_cfa_offset 160
 128:src/journal.c ****     int size = 0;
 494              		.loc 1 128 0
 495 023d 64488B04 		movq	%fs:40, %rax
 495      25280000 
 495      00
 496 0246 48894424 		movq	%rax, 88(%rsp)
 496      58
 497 024b 31C0     		xorl	%eax, %eax
 498              	.LVL52:
 499 024d 48893424 		movq	%rsi, (%rsp)
 500              	.LVL53:
 501              	.L24:
 502              		.loc 1 157 0 discriminator 1
 503 0251 413B5D18 		cmpl	24(%r13), %ebx
 504 0255 895C240C 		movl	%ebx, 12(%rsp)
 505              	.LVL54:
 506 0259 0F8D1701 		jge	.L31
 506      0000
 507 025f 488D049D 		leaq	0(,%rbx,4), %rax
 507      00000000 
 508 0267 4C8D34DD 		leaq	0(,%rbx,8), %r14
 508      00000000 
 509              		.loc 1 157 0 is_stmt 0
 510 026f 31ED     		xorl	%ebp, %ebp
 511 0271 48894424 		movq	%rax, 24(%rsp)
 511      18
 512              	.L32:
 158:src/journal.c ****             /*strcat(info, "\n");
 159:src/journal.c ****             sprintf(aux, "%d", i);
 160:src/journal.c ****             strcat(info, aux);
 161:src/journal.c ****             strcat(info, "|");
 162:src/journal.c ****             aux[1] = '\0';
 163:src/journal.c ****             aux[0] = dia->id_type[i];
 164:src/journal.c ****             strcat(info, aux);
 165:src/journal.c ****             strcat(info, ";\n"); */
 166:src/journal.c ****         for(j=0; j < dia->size[i]; j++) {
 513              		.loc 1 166 0 is_stmt 1 discriminator 1
 514 0276 498B4508 		movq	8(%r13), %rax
 515 027a 488B5424 		movq	24(%rsp), %rdx
 515      18
 516 027f 896C2410 		movl	%ebp, 16(%rsp)
 517              	.LVL55:
 518 0283 3B2C10   		cmpl	(%rax,%rdx), %ebp
 519 0286 0F8DE200 		jge	.L45
 519      0000
 167:src/journal.c **** 	    counter++;
 168:src/journal.c **** 	    check = 0;
 169:src/journal.c **** 	    if(dia->entries[i][j].action != NULL) {
 520              		.loc 1 169 0
 521 028c 498B5500 		movq	0(%r13), %rdx
GAS LISTING /tmp/cc15eBE3.s 			page 16


 522 0290 4989EF   		movq	%rbp, %r15
 167:src/journal.c **** 	    counter++;
 523              		.loc 1 167 0
 524 0293 418D4424 		leal	1(%r12), %eax
 524      01
 525              	.LVL56:
 526 0298 49C1E704 		salq	$4, %r15
 527              		.loc 1 169 0
 528 029c 4A8B1432 		movq	(%rdx,%r14), %rdx
 529 02a0 4A8B0C3A 		movq	(%rdx,%r15), %rcx
 530 02a4 4885C9   		testq	%rcx, %rcx
 531 02a7 744D     		je	.L36
 167:src/journal.c **** 	    counter++;
 532              		.loc 1 167 0
 533 02a9 803923   		cmpb	$35, (%rcx)
 534              	.LBB22:
 535              	.LBB23:
 536              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
GAS LISTING /tmp/cc15eBE3.s 			page 17


  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
GAS LISTING /tmp/cc15eBE3.s 			page 18


  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 537              		.loc 3 104 0
 538 02ac BE000000 		movl	$.LC1, %esi
 538      00
 539 02b1 BF010000 		movl	$1, %edi
 539      00
 540              	.LBE23:
 541              	.LBE22:
 167:src/journal.c **** 	    counter++;
 542              		.loc 1 167 0
 543 02b6 440F45E0 		cmovne	%eax, %r12d
 544              	.LVL57:
 545              	.LBB25:
 546              	.LBB24:
 547              		.loc 3 104 0
 548 02ba 31C0     		xorl	%eax, %eax
 549 02bc 4489E2   		movl	%r12d, %edx
 550 02bf E8000000 		call	__printf_chk
 550      00
 551              	.LVL58:
 552              	.LBE24:
 553              	.LBE25:
 170:src/journal.c **** 		if (dia->entries[i][j].action[0] == '#') {
 171:src/journal.c **** 		  counter--;
 172:src/journal.c **** 		}
 173:src/journal.c **** 		//strcat(info, dia->entries[i][j].action);
 174:src/journal.c **** 		printf("%d|%s\n",counter,dia->entries[i][j].action);
 175:src/journal.c **** 		//printf("strlen(text):%d ; strlen(info):%d\n", strlen(dia->entries[i][j].action), strlen(info));
 176:src/journal.c **** 		check = 1;
 177:src/journal.c **** 		if((dia->entries[i][j].size >= 0)||(dia->time)) {
 554              		.loc 1 177 0
 555 02c4 498B4500 		movq	0(%r13), %rax
 556 02c8 4A8B0430 		movq	(%rax,%r14), %rax
 557 02cc 42837C38 		cmpl	$0, 8(%rax,%r15)
 557      0800
 558 02d2 790C     		jns	.L27
 559              		.loc 1 177 0 is_stmt 0 discriminator 1
 560 02d4 41837D2C 		cmpl	$0, 44(%r13)
 560      00
 176:src/journal.c **** 		if((dia->entries[i][j].size >= 0)||(dia->time)) {
 561              		.loc 1 176 0 is_stmt 1 discriminator 1
 562 02d9 B8010000 		movl	$1, %eax
 562      00
 563              		.loc 1 177 0 discriminator 1
 564 02de 741B     		je	.L25
 565              	.L27:
 566              	.LVL59:
 567              	.LBB26:
 568              	.LBB27:
 105:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
GAS LISTING /tmp/cc15eBE3.s 			page 19


 106:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 107:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
 108:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function char *
 109:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (stpcpy (char *__restrict __dest, const char *__restrict __src))
 110:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
 111:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___stpcpy_chk (__dest, __src, __bos (__dest));
 112:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 113:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
 114:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 115:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 116:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function char *
 117:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
 118:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
 119:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
 120:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
 121:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 122:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 123:/usr/include/x86_64-linux-gnu/bits/string3.h **** // XXX We have no corresponding builtin yet.
 124:/usr/include/x86_64-linux-gnu/bits/string3.h **** extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
 125:/usr/include/x86_64-linux-gnu/bits/string3.h **** 			    size_t __destlen) __THROW;
 126:/usr/include/x86_64-linux-gnu/bits/string3.h **** extern char *__REDIRECT_NTH (__stpncpy_alias, (char *__dest, const char *__src,
 127:/usr/include/x86_64-linux-gnu/bits/string3.h **** 					       size_t __n), stpncpy);
 128:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 129:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function char *
 130:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (stpncpy (char *__dest, const char *__src, size_t __n))
 131:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
 132:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__bos (__dest) != (size_t) -1
 133:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__n) || __n <= __bos (__dest)))
 134:/usr/include/x86_64-linux-gnu/bits/string3.h ****     return __stpncpy_chk (__dest, __src, __n, __bos (__dest));
 135:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __stpncpy_alias (__dest, __src, __n);
 136:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 137:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 138:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
 139:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function char *
 140:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (strcat (char *__restrict __dest, const char *__restrict __src))
 141:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
 142:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___strcat_chk (__dest, __src, __bos (__dest));
 569              		.loc 2 142 0
 570 02e0 31C9     		xorl	%ecx, %ecx
 571 02e2 BE000000 		movl	$.LC2, %esi
 571      00
 572 02e7 4889CF   		movq	%rcx, %rdi
 573 02ea E8000000 		call	strcat
 573      00
 574              	.LVL60:
 575              	.LBE27:
 576              	.LBE26:
 176:src/journal.c **** 		if((dia->entries[i][j].size >= 0)||(dia->time)) {
 577              		.loc 1 176 0
 578 02ef B8010000 		movl	$1, %eax
 578      00
 579 02f4 EB05     		jmp	.L25
 580              	.LVL61:
 581              	.L36:
 167:src/journal.c **** 	    check = 0;
 582              		.loc 1 167 0
 583 02f6 4189C4   		movl	%eax, %r12d
GAS LISTING /tmp/cc15eBE3.s 			page 20


 168:src/journal.c **** 	    if(dia->entries[i][j].action != NULL) {
 584              		.loc 1 168 0
 585 02f9 31C0     		xorl	%eax, %eax
 586              	.LVL62:
 587              	.L25:
 178:src/journal.c **** 		  strcat(info, "|");
 179:src/journal.c **** 		}
 180:src/journal.c **** 	    }
 181:src/journal.c **** 	    
 182:src/journal.c **** 	    if(dia->entries[i][j].size >= 0) {
 588              		.loc 1 182 0
 589 02fb 498B5500 		movq	0(%r13), %rdx
 590 02ff 4A8B1432 		movq	(%rdx,%r14), %rdx
 591 0303 468B443A 		movl	8(%rdx,%r15), %r8d
 591      08
 592 0308 4585C0   		testl	%r8d, %r8d
 593 030b 7843     		js	.L28
 594              	.LVL63:
 595              	.LBB28:
 596              	.LBB29:
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
 597              		.loc 3 33 0
 598 030d 488D7C24 		leaq	38(%rsp), %rdi
 598      26
 599              	.LVL64:
 600 0312 BA320000 		movl	$50, %edx
 600      00
 601 0317 B9000000 		movl	$.LC3, %ecx
 601      00
 602 031c BE010000 		movl	$1, %esi
 602      00
 603 0321 31C0     		xorl	%eax, %eax
 604              	.LVL65:
 605 0323 E8000000 		call	__sprintf_chk
 605      00
 606              	.LVL66:
 607              	.LBE29:
 608              	.LBE28:
 609              	.LBB30:
 610              	.LBB31:
 611              		.loc 2 142 0
 612 0328 31C9     		xorl	%ecx, %ecx
 613 032a 488D7424 		leaq	38(%rsp), %rsi
 613      26
 614              	.LVL67:
 615 032f 4889CF   		movq	%rcx, %rdi
 616 0332 48894C24 		movq	%rcx, 16(%rsp)
 616      10
 617 0337 E8000000 		call	strcat
 617      00
 618              	.LVL68:
 619              	.LBE31:
 620              	.LBE30:
 621              	.LBB32:
 622              	.LBB33:
 623 033c 488B4C24 		movq	16(%rsp), %rcx
 623      10
GAS LISTING /tmp/cc15eBE3.s 			page 21


 624 0341 BE000000 		movl	$.LC2, %esi
 624      00
 625 0346 4889CF   		movq	%rcx, %rdi
 626 0349 E8000000 		call	strcat
 626      00
 627              	.LVL69:
 628 034e EB16     		jmp	.L29
 629              	.LVL70:
 630              	.L28:
 631              	.LBE33:
 632              	.LBE32:
 183:src/journal.c ****                 sprintf(buffer, "%d", dia->entries[i][j].size);
 184:src/journal.c ****                 strcat(info, buffer); 
 185:src/journal.c **** 		strcat(info, "|");
 186:src/journal.c **** 		check = 1;
 187:src/journal.c ****             }
 188:src/journal.c **** 	    
 189:src/journal.c **** 	    /*if(dia->time) {
 190:src/journal.c **** 		timeval_subtract(&dia->entries[i][j].start, &dia->entries[i][j].start, &dia->zero);
 191:src/journal.c **** 		sprintf(buffer, "%ld.%06ld", dia->entries[i][j].start.tv_sec, dia->entries[i][j].start.tv_usec);
 192:src/journal.c **** 		strcat(info, buffer);
 193:src/journal.c **** 		strcat(info, "|");
 194:src/journal.c **** 		timeval_subtract(&dia->entries[i][j].end, &dia->entries[i][j].end, &dia->zero);
 195:src/journal.c **** 		sprintf(buffer, "%ld.%06ld", dia->entries[i][j].end.tv_sec, dia->entries[i][j].end.tv_usec);
 196:src/journal.c **** 		strcat(info, buffer);
 197:src/journal.c **** 		check = 1;
 198:src/journal.c **** 	    } */
 199:src/journal.c **** 	    
 200:src/journal.c **** 	    if (check == 0) {
 633              		.loc 1 200 0
 634 0350 85C0     		testl	%eax, %eax
 635 0352 7512     		jne	.L29
 636              	.LVL71:
 201:src/journal.c **** 		warning("Entry without action, size and time=0, number %d, thread %d", j, i);
 637              		.loc 1 201 0
 638 0354 8B54240C 		movl	12(%rsp), %edx
 639 0358 8B742410 		movl	16(%rsp), %esi
 640 035c BF000000 		movl	$.LC4, %edi
 640      00
 641 0361 E8000000 		call	warning
 641      00
 642              	.LVL72:
 643              	.L29:
 644 0366 48FFC5   		incq	%rbp
 645              	.LVL73:
 646 0369 E908FFFF 		jmp	.L32
 646      FF
 647              	.LVL74:
 648              	.L45:
 649 036e 48FFC3   		incq	%rbx
 650              	.LVL75:
 651 0371 E9DBFEFF 		jmp	.L24
 651      FF
 652              	.LVL76:
 653              	.L31:
 202:src/journal.c **** 	    }
 203:src/journal.c **** 
GAS LISTING /tmp/cc15eBE3.s 			page 22


 204:src/journal.c ****             //strcat(info, ";\n");
 205:src/journal.c ****         }
 206:src/journal.c ****     }
 207:src/journal.c ****     strcat(info, "\0");
 208:src/journal.c **** 
 209:src/journal.c ****     if(filename) {
 654              		.loc 1 209 0
 655 0376 488B1C24 		movq	(%rsp), %rbx
 656              	.LVL77:
 657 037a 4885DB   		testq	%rbx, %rbx
 658 037d 7445     		je	.L33
 210:src/journal.c ****         // Remove file if exist.
 211:src/journal.c ****         if( access(filename, F_OK) != -1 ) {
 659              		.loc 1 211 0
 660 037f 31F6     		xorl	%esi, %esi
 661 0381 4889DF   		movq	%rbx, %rdi
 662 0384 E8000000 		call	access
 662      00
 663              	.LVL78:
 664 0389 FFC0     		incl	%eax
 665 038b 7408     		je	.L34
 212:src/journal.c ****             remove(filename);
 666              		.loc 1 212 0
 667 038d 4889DF   		movq	%rbx, %rdi
 668 0390 E8000000 		call	remove
 668      00
 669              	.LVL79:
 670              	.L34:
 213:src/journal.c ****         }
 214:src/journal.c ****         // Create file with info string.
 215:src/journal.c ****         f = fopen(filename, "w");
 671              		.loc 1 215 0
 672 0395 488B3C24 		movq	(%rsp), %rdi
 673 0399 BE000000 		movl	$.LC5, %esi
 673      00
 674 039e E8000000 		call	fopen
 674      00
 675              	.LVL80:
 676              	.LBB34:
 677              	.LBB35:
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 678              		.loc 3 97 0
 679 03a3 31C9     		xorl	%ecx, %ecx
 680 03a5 4889C7   		movq	%rax, %rdi
 681              	.LBE35:
 682              	.LBE34:
 683              		.loc 1 215 0
 684 03a8 4889C3   		movq	%rax, %rbx
 685              	.LVL81:
 686              	.LBB37:
 687              	.LBB36:
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 688              		.loc 3 97 0
 689 03ab BA000000 		movl	$.LC6, %edx
 689      00
 690 03b0 BE010000 		movl	$1, %esi
 690      00
GAS LISTING /tmp/cc15eBE3.s 			page 23


 691 03b5 31C0     		xorl	%eax, %eax
 692              	.LVL82:
 693 03b7 E8000000 		call	__fprintf_chk
 693      00
 694              	.LVL83:
 695              	.LBE36:
 696              	.LBE37:
 216:src/journal.c ****         fprintf(f, "%s", info);
 217:src/journal.c ****         fclose(f);
 697              		.loc 1 217 0
 698 03bc 4889DF   		movq	%rbx, %rdi
 699 03bf E8000000 		call	fclose
 699      00
 700              	.LVL84:
 701              	.L33:
 218:src/journal.c ****         return info;
 219:src/journal.c ****     }
 220:src/journal.c ****     else {
 221:src/journal.c ****         return NULL;
 222:src/journal.c ****     }
 223:src/journal.c **** }
 702              		.loc 1 223 0
 703 03c4 31C0     		xorl	%eax, %eax
 704 03c6 488B7424 		movq	88(%rsp), %rsi
 704      58
 705 03cb 64483334 		xorq	%fs:40, %rsi
 705      25280000 
 705      00
 706 03d4 7405     		je	.L35
 707 03d6 E8000000 		call	__stack_chk_fail
 707      00
 708              	.LVL85:
 709              	.L35:
 710 03db 4883C468 		addq	$104, %rsp
 711              		.cfi_def_cfa_offset 56
 712              	.LVL86:
 713 03df 5B       		popq	%rbx
 714              		.cfi_def_cfa_offset 48
 715 03e0 5D       		popq	%rbp
 716              		.cfi_def_cfa_offset 40
 717 03e1 415C     		popq	%r12
 718              		.cfi_def_cfa_offset 32
 719              	.LVL87:
 720 03e3 415D     		popq	%r13
 721              		.cfi_def_cfa_offset 24
 722              	.LVL88:
 723 03e5 415E     		popq	%r14
 724              		.cfi_def_cfa_offset 16
 725 03e7 415F     		popq	%r15
 726              		.cfi_def_cfa_offset 8
 727 03e9 C3       		ret
 728              		.cfi_endproc
 729              	.LFE35:
 731              	.Letext0:
 732              		.file 4 "src/journal.h"
 733              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 734              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
GAS LISTING /tmp/cc15eBE3.s 			page 24


 735              		.file 7 "/usr/include/stdio.h"
 736              		.file 8 "/usr/include/libio.h"
 737              		.file 9 "/usr/include/stdlib.h"
 738              		.file 10 "<built-in>"
 739              		.file 11 "src/log.h"
 740              		.file 12 "/usr/include/unistd.h"
GAS LISTING /tmp/cc15eBE3.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 journal.c
     /tmp/cc15eBE3.s:6      .text:0000000000000000 JOURNAL_init
     /tmp/cc15eBE3.s:135    .text:00000000000000ad JOURNAL_get_id
     /tmp/cc15eBE3.s:186    .text:00000000000000e1 JOURNAL_new_entry
     /tmp/cc15eBE3.s:277    .text:0000000000000160 JOURNAL_insert_text
     /tmp/cc15eBE3.s:333    .text:0000000000000199 JOURNAL_remove_entry
     /tmp/cc15eBE3.s:348    .text:00000000000001a4 JOURNAL_free
     /tmp/cc15eBE3.s:462    .text:0000000000000227 JOURNAL_generate_info

UNDEFINED SYMBOLS
malloc
error
realloc
strcpy
free
__printf_chk
strcat
__sprintf_chk
warning
access
remove
fopen
__fprintf_chk
fclose
__stack_chk_fail
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"log.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 25732573 		.string	"%s%s%s "
   6      25732000 
   7              	.LC1:
   8 0008 25732000 		.string	"%s "
   9              	.LC2:
  10 000c 0A00     		.string	"\n"
  11              		.text
  13              	vmessage:
  14              	.LFB16:
  15              		.file 1 "src/log.c"
   1:src/log.c     **** /*
   2:src/log.c     ****  * Copyright 2014 Ian Liu Rodrigues <ian.liu@ggaunicamp.com>
   3:src/log.c     ****  *
   4:src/log.c     ****  * This file is part of spitz.
   5:src/log.c     ****  *
   6:src/log.c     ****  * spitz is free software: you can redistribute it and/or modify
   7:src/log.c     ****  * it under the terms of the GNU General Public License as published by
   8:src/log.c     ****  * the Free Software Foundation, either version 3 of the License, or
   9:src/log.c     ****  * (at your option) any later version.
  10:src/log.c     ****  *
  11:src/log.c     ****  * spitz is distributed in the hope that it will be useful,
  12:src/log.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:src/log.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:src/log.c     ****  * GNU General Public License for more details.
  15:src/log.c     ****  *
  16:src/log.c     ****  * You should have received a copy of the GNU General Public License
  17:src/log.c     ****  * along with spitz.  If not, see <http://www.gnu.org/licenses/>.
  18:src/log.c     ****  */
  19:src/log.c     **** 
  20:src/log.c     **** #include "log.h"
  21:src/log.c     **** //#include <time.h>
  22:src/log.c     **** #include <unistd.h>
  23:src/log.c     **** #include <stdarg.h>
  24:src/log.c     **** 
  25:src/log.c     **** int LOG_LEVEL=2;
  26:src/log.c     **** 
  27:src/log.c     **** enum color {
  28:src/log.c     **** 	RED,
  29:src/log.c     **** 	GREEN,
  30:src/log.c     **** 	YELLOW,
  31:src/log.c     **** 	BLUE,
  32:src/log.c     **** 	NORMAL
  33:src/log.c     **** };
  34:src/log.c     **** 
  35:src/log.c     **** const char *color_codes[] = {
  36:src/log.c     **** 	"\033[1;31m",
  37:src/log.c     **** 	"\033[1;32m",
  38:src/log.c     **** 	"\033[1;33m",
  39:src/log.c     **** 	"\033[1;34m",
  40:src/log.c     **** 	"\033[0m",
  41:src/log.c     **** };
  42:src/log.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 2


  43:src/log.c     **** static void vmessage(FILE *f, const char *msg, const char *prefix,
  44:src/log.c     **** 		enum color color, va_list ap)
  45:src/log.c     **** {
  16              		.loc 1 45 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 4156     		pushq	%r14
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 14, -16
  46:src/log.c     **** 	if (prefix) {
  22              		.loc 1 46 0
  23 0002 4885D2   		testq	%rdx, %rdx
  45:src/log.c     **** 	if (prefix) {
  24              		.loc 1 45 0
  25 0005 4189CE   		movl	%ecx, %r14d
  26 0008 4155     		pushq	%r13
  27              		.cfi_def_cfa_offset 24
  28              		.cfi_offset 13, -24
  29 000a 4D89C5   		movq	%r8, %r13
  30 000d 4154     		pushq	%r12
  31              		.cfi_def_cfa_offset 32
  32              		.cfi_offset 12, -32
  33 000f 4989F4   		movq	%rsi, %r12
  34 0012 55       		pushq	%rbp
  35              		.cfi_def_cfa_offset 40
  36              		.cfi_offset 6, -40
  37 0013 4889D5   		movq	%rdx, %rbp
  38 0016 53       		pushq	%rbx
  39              		.cfi_def_cfa_offset 48
  40              		.cfi_offset 3, -48
  45:src/log.c     **** 	if (prefix) {
  41              		.loc 1 45 0
  42 0017 4889FB   		movq	%rdi, %rbx
  43              		.loc 1 46 0
  44 001a 7451     		je	.L2
  45              	.LBB11:
  47:src/log.c     **** 		if (isatty(fileno(f)))
  46              		.loc 1 47 0
  47 001c 31C0     		xorl	%eax, %eax
  48 001e E8000000 		call	fileno
  48      00
  49              	.LVL1:
  50 0023 89C7     		movl	%eax, %edi
  51 0025 E8000000 		call	isatty
  51      00
  52              	.LVL2:
  53 002a 85C0     		testl	%eax, %eax
  54 002c 7428     		je	.L3
  55              	.LVL3:
  56              	.LBB12:
  57              	.LBB13:
  58              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
GAS LISTING /tmp/cc15eBE3.s 			page 3


   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
GAS LISTING /tmp/cc15eBE3.s 			page 4


  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  59              		.loc 2 97 0
  60 002e 4A8B0CF5 		movq	color_codes(,%r14,8), %rcx
  60      00000000 
  61 0036 4C8B0D00 		movq	color_codes+32(%rip), %r9
  61      000000
  62 003d 4989E8   		movq	%rbp, %r8
  63 0040 BA000000 		movl	$.LC0, %edx
  63      00
  64 0045 BE010000 		movl	$1, %esi
  64      00
  65 004a 4889DF   		movq	%rbx, %rdi
  66 004d 31C0     		xorl	%eax, %eax
  67 004f E8000000 		call	__fprintf_chk
  67      00
  68              	.LVL4:
  69 0054 EB17     		jmp	.L2
  70              	.LVL5:
  71              	.L3:
  72              	.LBE13:
  73              	.LBE12:
  74              	.LBB14:
  75              	.LBB15:
GAS LISTING /tmp/cc15eBE3.s 			page 5


  76 0056 4889E9   		movq	%rbp, %rcx
  77 0059 BA000000 		movl	$.LC1, %edx
  77      00
  78 005e BE010000 		movl	$1, %esi
  78      00
  79 0063 4889DF   		movq	%rbx, %rdi
  80 0066 31C0     		xorl	%eax, %eax
  81 0068 E8000000 		call	__fprintf_chk
  81      00
  82              	.LVL6:
  83              	.L2:
  84              	.LBE15:
  85              	.LBE14:
  86              	.LBE11:
  87              	.LBB16:
  88              	.LBB17:
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 106:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
 107:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define printf(...) \
 108:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __printf_chk (__USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 109:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define fprintf(stream, ...) \
 110:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __fprintf_chk (stream, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 111:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
 112:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 113:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 114:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** vprintf (const char *__restrict __fmt, _G_va_list __ap)
 115:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 116:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __USE_EXTERN_INLINES
 117:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vfprintf_chk (stdout, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 118:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #else
 119:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vprintf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 120:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
 121:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 122:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 123:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 124:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** vfprintf (FILE *__restrict __stream,
 125:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	  const char *__restrict __fmt, _G_va_list __ap)
 126:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 127:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
  89              		.loc 2 127 0
  90 006d 4C89E2   		movq	%r12, %rdx
  91 0070 4889DF   		movq	%rbx, %rdi
  92 0073 4C89E9   		movq	%r13, %rcx
  93 0076 BE010000 		movl	$1, %esi
  93      00
  94 007b E8000000 		call	__vfprintf_chk
  94      00
  95              	.LVL7:
  96              	.LBE17:
  97              	.LBE16:
GAS LISTING /tmp/cc15eBE3.s 			page 6


  98              	.LBB18:
  99              	.LBB19:
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 100              		.loc 2 97 0
 101 0080 4889DF   		movq	%rbx, %rdi
 102 0083 BA000000 		movl	$.LC2, %edx
 102      00
 103 0088 BE010000 		movl	$1, %esi
 103      00
 104              	.LBE19:
 105              	.LBE18:
  48:src/log.c     **** 			fprintf(f, "%s%s%s ",
  49:src/log.c     **** 					color_codes[color],
  50:src/log.c     **** 					prefix,
  51:src/log.c     **** 					color_codes[NORMAL]);
  52:src/log.c     **** 		else
  53:src/log.c     **** 			fprintf(f, "%s ", prefix);
  54:src/log.c     **** 	}
  55:src/log.c     **** 	vfprintf(f, msg, ap);
  56:src/log.c     **** 	fprintf(f, "\n");
  57:src/log.c     **** }
 106              		.loc 1 57 0
 107 008d 5B       		popq	%rbx
 108              		.cfi_def_cfa_offset 40
 109              	.LVL8:
 110 008e 5D       		popq	%rbp
 111              		.cfi_def_cfa_offset 32
 112              	.LVL9:
 113 008f 415C     		popq	%r12
 114              		.cfi_def_cfa_offset 24
 115              	.LVL10:
 116 0091 415D     		popq	%r13
 117              		.cfi_def_cfa_offset 16
 118              	.LVL11:
 119 0093 415E     		popq	%r14
 120              		.cfi_def_cfa_offset 8
 121              	.LVL12:
 122              	.LBB21:
 123              	.LBB20:
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 124              		.loc 2 97 0
 125 0095 31C0     		xorl	%eax, %eax
 126 0097 E9000000 		jmp	__fprintf_chk
 126      00
 127              	.LVL13:
 128              	.LBE20:
 129              	.LBE21:
 130              		.cfi_endproc
 131              	.LFE16:
 133              		.section	.rodata.str1.1
 134              	.LC3:
 135 000e 696E666F 		.string	"info:"
 135      3A00
 136              		.text
 137              		.globl	info
 139              	info:
 140              	.LFB17:
GAS LISTING /tmp/cc15eBE3.s 			page 7


  58:src/log.c     **** 
  59:src/log.c     **** void info(const char *msg, ...)
  60:src/log.c     **** {
 141              		.loc 1 60 0
 142              		.cfi_startproc
 143              	.LVL14:
 144 009c 4881ECD8 		subq	$216, %rsp
 144      000000
 145              		.cfi_def_cfa_offset 224
 146 00a3 84C0     		testb	%al, %al
 147 00a5 48897424 		movq	%rsi, 40(%rsp)
 147      28
 148 00aa 48895424 		movq	%rdx, 48(%rsp)
 148      30
 149 00af 48894C24 		movq	%rcx, 56(%rsp)
 149      38
 150 00b4 4C894424 		movq	%r8, 64(%rsp)
 150      40
 151 00b9 4C894C24 		movq	%r9, 72(%rsp)
 151      48
 152 00be 7437     		je	.L10
 153              		.loc 1 60 0
 154 00c0 0F294424 		movaps	%xmm0, 80(%rsp)
 154      50
 155 00c5 0F294C24 		movaps	%xmm1, 96(%rsp)
 155      60
 156 00ca 0F295424 		movaps	%xmm2, 112(%rsp)
 156      70
 157 00cf 0F299C24 		movaps	%xmm3, 128(%rsp)
 157      80000000 
 158 00d7 0F29A424 		movaps	%xmm4, 144(%rsp)
 158      90000000 
 159 00df 0F29AC24 		movaps	%xmm5, 160(%rsp)
 159      A0000000 
 160 00e7 0F29B424 		movaps	%xmm6, 176(%rsp)
 160      B0000000 
 161 00ef 0F29BC24 		movaps	%xmm7, 192(%rsp)
 161      C0000000 
 162              	.L10:
 163 00f7 4889FE   		movq	%rdi, %rsi
  61:src/log.c     **** 	if (LOG_LEVEL < 1)
 164              		.loc 1 61 0
 165 00fa 833D0000 		cmpl	$0, LOG_LEVEL(%rip)
 165      000000
 166 0101 7E42     		jle	.L9
 167              	.LVL15:
  62:src/log.c     **** 		return;
  63:src/log.c     **** 	
  64:src/log.c     **** 	va_list ap;
  65:src/log.c     **** 	va_start(ap, msg);
 168              		.loc 1 65 0
 169 0103 488D8424 		leaq	224(%rsp), %rax
 169      E0000000 
  66:src/log.c     **** 	vmessage(stdout, msg, "info:", BLUE, ap);
 170              		.loc 1 66 0
 171 010b 488B3D00 		movq	stdout(%rip), %rdi
 171      000000
GAS LISTING /tmp/cc15eBE3.s 			page 8


 172 0112 4C8D4424 		leaq	8(%rsp), %r8
 172      08
 173 0117 B9030000 		movl	$3, %ecx
 173      00
 174 011c BA000000 		movl	$.LC3, %edx
 174      00
  65:src/log.c     **** 	vmessage(stdout, msg, "info:", BLUE, ap);
 175              		.loc 1 65 0
 176 0121 C7442408 		movl	$8, 8(%rsp)
 176      08000000 
 177 0129 48894424 		movq	%rax, 16(%rsp)
 177      10
 178 012e 488D4424 		leaq	32(%rsp), %rax
 178      20
 179 0133 C744240C 		movl	$48, 12(%rsp)
 179      30000000 
 180 013b 48894424 		movq	%rax, 24(%rsp)
 180      18
 181              		.loc 1 66 0
 182 0140 E8BBFEFF 		call	vmessage
 182      FF
 183              	.LVL16:
 184              	.L9:
  67:src/log.c     **** 	va_end(ap);
  68:src/log.c     **** }
 185              		.loc 1 68 0
 186 0145 4881C4D8 		addq	$216, %rsp
 186      000000
 187              		.cfi_def_cfa_offset 8
 188 014c C3       		ret
 189              		.cfi_endproc
 190              	.LFE17:
 192              		.section	.rodata.str1.1
 193              	.LC4:
 194 0014 64656275 		.string	"debug:"
 194      673A00
 195              		.text
 196              		.globl	debug
 198              	debug:
 199              	.LFB18:
  69:src/log.c     **** 
  70:src/log.c     **** void debug(const char *msg, ...)
  71:src/log.c     **** {
 200              		.loc 1 71 0
 201              		.cfi_startproc
 202              	.LVL17:
 203 014d 4881ECD8 		subq	$216, %rsp
 203      000000
 204              		.cfi_def_cfa_offset 224
 205 0154 84C0     		testb	%al, %al
 206 0156 48897424 		movq	%rsi, 40(%rsp)
 206      28
 207 015b 48895424 		movq	%rdx, 48(%rsp)
 207      30
 208 0160 48894C24 		movq	%rcx, 56(%rsp)
 208      38
 209 0165 4C894424 		movq	%r8, 64(%rsp)
GAS LISTING /tmp/cc15eBE3.s 			page 9


 209      40
 210 016a 4C894C24 		movq	%r9, 72(%rsp)
 210      48
 211 016f 7437     		je	.L15
 212              		.loc 1 71 0
 213 0171 0F294424 		movaps	%xmm0, 80(%rsp)
 213      50
 214 0176 0F294C24 		movaps	%xmm1, 96(%rsp)
 214      60
 215 017b 0F295424 		movaps	%xmm2, 112(%rsp)
 215      70
 216 0180 0F299C24 		movaps	%xmm3, 128(%rsp)
 216      80000000 
 217 0188 0F29A424 		movaps	%xmm4, 144(%rsp)
 217      90000000 
 218 0190 0F29AC24 		movaps	%xmm5, 160(%rsp)
 218      A0000000 
 219 0198 0F29B424 		movaps	%xmm6, 176(%rsp)
 219      B0000000 
 220 01a0 0F29BC24 		movaps	%xmm7, 192(%rsp)
 220      C0000000 
 221              	.L15:
 222 01a8 4889FE   		movq	%rdi, %rsi
  72:src/log.c     **** 	if (LOG_LEVEL < 2)
 223              		.loc 1 72 0
 224 01ab 833D0000 		cmpl	$1, LOG_LEVEL(%rip)
 224      000001
 225 01b2 7E42     		jle	.L14
 226              	.LVL18:
  73:src/log.c     **** 		return;
  74:src/log.c     **** 	
  75:src/log.c     **** 	va_list ap;
  76:src/log.c     **** 	va_start(ap, msg);
 227              		.loc 1 76 0
 228 01b4 488D8424 		leaq	224(%rsp), %rax
 228      E0000000 
  77:src/log.c     **** 	vmessage(stdout, msg, "debug:", GREEN, ap);
 229              		.loc 1 77 0
 230 01bc 488B3D00 		movq	stdout(%rip), %rdi
 230      000000
 231 01c3 4C8D4424 		leaq	8(%rsp), %r8
 231      08
 232 01c8 B9010000 		movl	$1, %ecx
 232      00
 233 01cd BA000000 		movl	$.LC4, %edx
 233      00
  76:src/log.c     **** 	vmessage(stdout, msg, "debug:", GREEN, ap);
 234              		.loc 1 76 0
 235 01d2 C7442408 		movl	$8, 8(%rsp)
 235      08000000 
 236 01da 48894424 		movq	%rax, 16(%rsp)
 236      10
 237 01df 488D4424 		leaq	32(%rsp), %rax
 237      20
 238 01e4 C744240C 		movl	$48, 12(%rsp)
 238      30000000 
 239 01ec 48894424 		movq	%rax, 24(%rsp)
GAS LISTING /tmp/cc15eBE3.s 			page 10


 239      18
 240              		.loc 1 77 0
 241 01f1 E80AFEFF 		call	vmessage
 241      FF
 242              	.LVL19:
 243              	.L14:
  78:src/log.c     **** 	va_end(ap);
  79:src/log.c     **** }
 244              		.loc 1 79 0
 245 01f6 4881C4D8 		addq	$216, %rsp
 245      000000
 246              		.cfi_def_cfa_offset 8
 247 01fd C3       		ret
 248              		.cfi_endproc
 249              	.LFE18:
 251              		.section	.rodata.str1.1
 252              	.LC5:
 253 001b 7761726E 		.string	"warning:"
 253      696E673A 
 253      00
 254              		.text
 255              		.globl	warning
 257              	warning:
 258              	.LFB19:
  80:src/log.c     **** 
  81:src/log.c     **** void warning(const char *msg, ...)
  82:src/log.c     **** {
 259              		.loc 1 82 0
 260              		.cfi_startproc
 261              	.LVL20:
 262 01fe 4881ECD8 		subq	$216, %rsp
 262      000000
 263              		.cfi_def_cfa_offset 224
 264 0205 84C0     		testb	%al, %al
 265 0207 48897424 		movq	%rsi, 40(%rsp)
 265      28
 266 020c 48895424 		movq	%rdx, 48(%rsp)
 266      30
 267 0211 48894C24 		movq	%rcx, 56(%rsp)
 267      38
 268 0216 4C894424 		movq	%r8, 64(%rsp)
 268      40
 269 021b 4C894C24 		movq	%r9, 72(%rsp)
 269      48
 270 0220 7437     		je	.L20
 271              		.loc 1 82 0
 272 0222 0F294424 		movaps	%xmm0, 80(%rsp)
 272      50
 273 0227 0F294C24 		movaps	%xmm1, 96(%rsp)
 273      60
 274 022c 0F295424 		movaps	%xmm2, 112(%rsp)
 274      70
 275 0231 0F299C24 		movaps	%xmm3, 128(%rsp)
 275      80000000 
 276 0239 0F29A424 		movaps	%xmm4, 144(%rsp)
 276      90000000 
 277 0241 0F29AC24 		movaps	%xmm5, 160(%rsp)
GAS LISTING /tmp/cc15eBE3.s 			page 11


 277      A0000000 
 278 0249 0F29B424 		movaps	%xmm6, 176(%rsp)
 278      B0000000 
 279 0251 0F29BC24 		movaps	%xmm7, 192(%rsp)
 279      C0000000 
 280              	.L20:
  83:src/log.c     **** 	va_list ap;
  84:src/log.c     **** 	va_start(ap, msg);
 281              		.loc 1 84 0
 282 0259 488D8424 		leaq	224(%rsp), %rax
 282      E0000000 
  82:src/log.c     **** 	va_list ap;
 283              		.loc 1 82 0
 284 0261 4889FE   		movq	%rdi, %rsi
  85:src/log.c     **** 	vmessage(stderr, msg, "warning:", YELLOW, ap);
 285              		.loc 1 85 0
 286 0264 4C8D4424 		leaq	8(%rsp), %r8
 286      08
 287 0269 B9020000 		movl	$2, %ecx
 287      00
 288 026e BA000000 		movl	$.LC5, %edx
 288      00
 289 0273 488B3D00 		movq	stderr(%rip), %rdi
 289      000000
 290              	.LVL21:
  84:src/log.c     **** 	vmessage(stderr, msg, "warning:", YELLOW, ap);
 291              		.loc 1 84 0
 292 027a 48894424 		movq	%rax, 16(%rsp)
 292      10
 293 027f 488D4424 		leaq	32(%rsp), %rax
 293      20
 294 0284 C7442408 		movl	$8, 8(%rsp)
 294      08000000 
 295 028c C744240C 		movl	$48, 12(%rsp)
 295      30000000 
 296 0294 48894424 		movq	%rax, 24(%rsp)
 296      18
 297              		.loc 1 85 0
 298 0299 E862FDFF 		call	vmessage
 298      FF
 299              	.LVL22:
  86:src/log.c     **** 	va_end(ap);
  87:src/log.c     **** }
 300              		.loc 1 87 0
 301 029e 4881C4D8 		addq	$216, %rsp
 301      000000
 302              		.cfi_def_cfa_offset 8
 303 02a5 C3       		ret
 304              		.cfi_endproc
 305              	.LFE19:
 307              		.section	.rodata.str1.1
 308              	.LC6:
 309 0024 6572726F 		.string	"error:"
 309      723A00
 310              		.text
 311              		.globl	error
 313              	error:
GAS LISTING /tmp/cc15eBE3.s 			page 12


 314              	.LFB20:
  88:src/log.c     **** 
  89:src/log.c     **** void error(const char *msg, ...)
  90:src/log.c     **** {
 315              		.loc 1 90 0
 316              		.cfi_startproc
 317              	.LVL23:
 318 02a6 4881ECD8 		subq	$216, %rsp
 318      000000
 319              		.cfi_def_cfa_offset 224
 320 02ad 84C0     		testb	%al, %al
 321 02af 48897424 		movq	%rsi, 40(%rsp)
 321      28
 322 02b4 48895424 		movq	%rdx, 48(%rsp)
 322      30
 323 02b9 48894C24 		movq	%rcx, 56(%rsp)
 323      38
 324 02be 4C894424 		movq	%r8, 64(%rsp)
 324      40
 325 02c3 4C894C24 		movq	%r9, 72(%rsp)
 325      48
 326 02c8 7437     		je	.L23
 327              		.loc 1 90 0
 328 02ca 0F294424 		movaps	%xmm0, 80(%rsp)
 328      50
 329 02cf 0F294C24 		movaps	%xmm1, 96(%rsp)
 329      60
 330 02d4 0F295424 		movaps	%xmm2, 112(%rsp)
 330      70
 331 02d9 0F299C24 		movaps	%xmm3, 128(%rsp)
 331      80000000 
 332 02e1 0F29A424 		movaps	%xmm4, 144(%rsp)
 332      90000000 
 333 02e9 0F29AC24 		movaps	%xmm5, 160(%rsp)
 333      A0000000 
 334 02f1 0F29B424 		movaps	%xmm6, 176(%rsp)
 334      B0000000 
 335 02f9 0F29BC24 		movaps	%xmm7, 192(%rsp)
 335      C0000000 
 336              	.L23:
  91:src/log.c     **** 	va_list ap;
  92:src/log.c     **** 	va_start(ap, msg);
 337              		.loc 1 92 0
 338 0301 488D8424 		leaq	224(%rsp), %rax
 338      E0000000 
  90:src/log.c     **** 	va_list ap;
 339              		.loc 1 90 0
 340 0309 4889FE   		movq	%rdi, %rsi
  93:src/log.c     **** 	vmessage(stderr, msg, "error:", RED, ap);
 341              		.loc 1 93 0
 342 030c 4C8D4424 		leaq	8(%rsp), %r8
 342      08
 343 0311 31C9     		xorl	%ecx, %ecx
 344 0313 BA000000 		movl	$.LC6, %edx
 344      00
 345 0318 488B3D00 		movq	stderr(%rip), %rdi
 345      000000
GAS LISTING /tmp/cc15eBE3.s 			page 13


 346              	.LVL24:
  92:src/log.c     **** 	vmessage(stderr, msg, "error:", RED, ap);
 347              		.loc 1 92 0
 348 031f 48894424 		movq	%rax, 16(%rsp)
 348      10
 349 0324 488D4424 		leaq	32(%rsp), %rax
 349      20
 350 0329 C7442408 		movl	$8, 8(%rsp)
 350      08000000 
 351 0331 C744240C 		movl	$48, 12(%rsp)
 351      30000000 
 352 0339 48894424 		movq	%rax, 24(%rsp)
 352      18
 353              		.loc 1 93 0
 354 033e E8BDFCFF 		call	vmessage
 354      FF
 355              	.LVL25:
  94:src/log.c     **** 	va_end(ap);
  95:src/log.c     **** }
 356              		.loc 1 95 0
 357 0343 4881C4D8 		addq	$216, %rsp
 357      000000
 358              		.cfi_def_cfa_offset 8
 359 034a C3       		ret
 360              		.cfi_endproc
 361              	.LFE20:
 363              		.globl	color_codes
 364              		.section	.rodata.str1.1
 365              	.LC7:
 366 002b 1B5B313B 		.string	"\033[1;31m"
 366      33316D00 
 367              	.LC8:
 368 0033 1B5B313B 		.string	"\033[1;32m"
 368      33326D00 
 369              	.LC9:
 370 003b 1B5B313B 		.string	"\033[1;33m"
 370      33336D00 
 371              	.LC10:
 372 0043 1B5B313B 		.string	"\033[1;34m"
 372      33346D00 
 373              	.LC11:
 374 004b 1B5B306D 		.string	"\033[0m"
 374      00
 375              		.data
 376              		.align 16
 379              	color_codes:
 380 0000 00000000 		.quad	.LC7
 380      00000000 
 381 0008 00000000 		.quad	.LC8
 381      00000000 
 382 0010 00000000 		.quad	.LC9
 382      00000000 
 383 0018 00000000 		.quad	.LC10
 383      00000000 
 384 0020 00000000 		.quad	.LC11
 384      00000000 
 385              		.globl	LOG_LEVEL
GAS LISTING /tmp/cc15eBE3.s 			page 14


 386              		.align 4
 389              	LOG_LEVEL:
 390 0028 02000000 		.long	2
 391              		.text
 392              	.Letext0:
 393              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 394              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 395              		.file 5 "/usr/include/stdio.h"
 396              		.file 6 "/usr/include/libio.h"
 397              		.file 7 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h"
 398              		.file 8 "<built-in>"
 399              		.file 9 "/usr/include/unistd.h"
GAS LISTING /tmp/cc15eBE3.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 log.c
     /tmp/cc15eBE3.s:13     .text:0000000000000000 vmessage
     /tmp/cc15eBE3.s:379    .data:0000000000000000 color_codes
     /tmp/cc15eBE3.s:139    .text:000000000000009c info
     /tmp/cc15eBE3.s:389    .data:0000000000000028 LOG_LEVEL
     /tmp/cc15eBE3.s:198    .text:000000000000014d debug
     /tmp/cc15eBE3.s:257    .text:00000000000001fe warning
     /tmp/cc15eBE3.s:313    .text:00000000000002a6 error

UNDEFINED SYMBOLS
fileno
isatty
__fprintf_chk
__vfprintf_chk
stdout
stderr
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"syscall.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	syscall
   6              	syscall:
   7              	.LFB0:
   8              		.file 1 "src/syscall.c"
   1:src/syscall.c **** /***************************************************************************
   2:src/syscall.c ****  *   Copyright (C) 2015 by                                                 *
   3:src/syscall.c ****  *   - Carlos Eduardo Millani (carloseduardomillani@gmail.com)             *
   4:src/syscall.c ****  *   - Edson Borin (edson@ic.unicamp.br)                                   *
   5:src/syscall.c ****  *                                                                         *
   6:src/syscall.c ****  *   This program is free software; you can redistribute it and/or modify  *
   7:src/syscall.c ****  *   it under the terms of the GNU General Public License as published by  *
   8:src/syscall.c ****  *   the Free Software Foundation; either version 2 of the License, or     *
   9:src/syscall.c ****  *   (at your option) any later version.                                   *
  10:src/syscall.c ****  *                                                                         *
  11:src/syscall.c ****  *   This program is distributed in the hope that it will be useful,       *
  12:src/syscall.c ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  13:src/syscall.c ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  14:src/syscall.c ****  *   GNU General Public License for more details.                          *
  15:src/syscall.c ****  *                                                                         *
  16:src/syscall.c ****  *   You should have received a copy of the GNU General Public License     *
  17:src/syscall.c ****  *   along with this program; if not, write to the                         *
  18:src/syscall.c ****  *   Free Software Foundation, Inc.,                                       *
  19:src/syscall.c ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  20:src/syscall.c ****  ***************************************************************************/
  21:src/syscall.c **** 
  22:src/syscall.c **** /*
  23:src/syscall.c ****  * Description: This file implements the available syscalls.
  24:src/syscall.c ****  */
  25:src/syscall.c **** 
  26:src/syscall.c **** #ifdef __cplusplus
  27:src/syscall.c **** extern "C" {
  28:src/syscall.c **** #endif
  29:src/syscall.c **** 
  30:src/syscall.c **** #include "syscall.h"
  31:src/syscall.c **** #include "HAL.h"
  32:src/syscall.c **** 	
  33:src/syscall.c **** #if PRINTING
  34:src/syscall.c **** #include <stdio.h>
  35:src/syscall.c **** #endif
  36:src/syscall.c ****  
  37:src/syscall.c **** uint8_t syscall(uint8_t trap_code)
  38:src/syscall.c **** {
   9              		.loc 1 38 0
  10              		.cfi_startproc
  39:src/syscall.c **** 	switch (trap_code)
  11              		.loc 1 39 0
  12 0000 4080FF0B 		cmpb	$11, %dil
  13 0004 740E     		je	.L3
  14              		.loc 1 39 0
  15 0006 4080FF0C 		cmpb	$12, %dil
  16 000a 741F     		je	.L4
  40:src/syscall.c **** 	{
  41:src/syscall.c **** 		case 10: { //Exit
  42:src/syscall.c **** 			return 1; //The vm cpu should stop
GAS LISTING /tmp/cc15eBE3.s 			page 2


  43:src/syscall.c **** 			break;
  44:src/syscall.c **** 		}
  45:src/syscall.c **** 		case 11: { //Stack alloc
  46:src/syscall.c **** 			RF[29] = VM_MEMORY_SZ; //Aloca pilha para dado microcontrolador -> pilha vazia, apontando para o
  47:src/syscall.c **** 			RF[30] = RF[29]; //FP = SP
  48:src/syscall.c **** #if PRINTING
  49:src/syscall.c **** 			printf("Stack initialized\n");
  50:src/syscall.c **** #endif
  51:src/syscall.c **** 			break;
  52:src/syscall.c **** 		}
  53:src/syscall.c **** 		case 12: { //Hall Call
  54:src/syscall.c **** 			RF[2] = hal_call(RF[3], (char *)&VM_memory[RF[12]]);
  55:src/syscall.c **** 		}
  56:src/syscall.c **** 		
  57:src/syscall.c **** 		// TODO Insert hall 
  58:src/syscall.c **** 		
  59:src/syscall.c **** 		default: {
  60:src/syscall.c **** 			break;
  61:src/syscall.c **** 		}
  62:src/syscall.c **** 	}
  63:src/syscall.c **** 	return 0;
  17              		.loc 1 63 0
  18 000c 4080FF0A 		cmpb	$10, %dil
  19 0010 0F94C0   		sete	%al
  64:src/syscall.c **** }
  20              		.loc 1 64 0
  21 0013 C3       		ret
  22              	.L3:
  46:src/syscall.c **** 			RF[30] = RF[29]; //FP = SP
  23              		.loc 1 46 0
  24 0014 C7050000 		movl	$5120, RF+116(%rip)
  24      00000014 
  24      0000
  47:src/syscall.c **** #if PRINTING
  25              		.loc 1 47 0
  26 001e C7050000 		movl	$5120, RF+120(%rip)
  26      00000014 
  26      0000
  63:src/syscall.c **** }
  27              		.loc 1 63 0
  28 0028 31C0     		xorl	%eax, %eax
  51:src/syscall.c **** 		}
  29              		.loc 1 51 0
  30 002a C3       		ret
  31              	.L4:
  38:src/syscall.c **** 	switch (trap_code)
  32              		.loc 1 38 0
  33 002b 50       		pushq	%rax
  34              		.cfi_def_cfa_offset 16
  54:src/syscall.c **** 		}
  35              		.loc 1 54 0
  36 002c 8B350000 		movl	RF+48(%rip), %esi
  36      0000
  37 0032 8B3D0000 		movl	RF+12(%rip), %edi
  37      0000
  38 0038 4881C600 		addq	$VM_memory, %rsi
  38      000000
GAS LISTING /tmp/cc15eBE3.s 			page 3


  39 003f E8000000 		call	hal_call
  39      00
  40 0044 0FB6C0   		movzbl	%al, %eax
  41 0047 89050000 		movl	%eax, RF+8(%rip)
  41      0000
  63:src/syscall.c **** }
  42              		.loc 1 63 0
  43 004d 31C0     		xorl	%eax, %eax
  44              		.loc 1 64 0
  45 004f 5A       		popq	%rdx
  46              		.cfi_def_cfa_offset 8
  47 0050 C3       		ret
  48              		.cfi_endproc
  49              	.LFE0:
  51              	.Letext0:
  52              		.file 2 "/usr/include/stdint.h"
  53              		.file 3 "src/vm.h"
GAS LISTING /tmp/cc15eBE3.s 			page 4


DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall.c
     /tmp/cc15eBE3.s:6      .text:0000000000000000 syscall

UNDEFINED SYMBOLS
RF
VM_memory
hal_call
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"vm2.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 4572726F 		.string	"Error, unknown instruction.\n"
   6      722C2075 
   6      6E6B6E6F 
   6      776E2069 
   6      6E737472 
   7              		.text
   8              		.globl	vm_cpu_2
  10              	vm_cpu_2:
  11              	.LFB11:
  12              		.file 1 "src/vm2.c"
   1:src/vm2.c     **** #include "vm.h"
   2:src/vm2.c     **** #include "syscall.h"
   3:src/vm2.c     **** #include <inttypes.h>
   4:src/vm2.c     **** #include <stdio.h>
   5:src/vm2.c     **** #include "HAL.h"
   6:src/vm2.c     **** 
   7:src/vm2.c     **** void print_memory(void);
   8:src/vm2.c     **** void print_registers(void);
   9:src/vm2.c     **** 
  10:src/vm2.c     **** /* Register file. */
  11:src/vm2.c     **** extern uint32_t RF[32];
  12:src/vm2.c     **** /*VM memory vector*/
  13:src/vm2.c     **** extern uint8_t VM_memory[VM_MEMORY_SZ];
  14:src/vm2.c     **** 
  15:src/vm2.c     **** extern uint32_t PC;
  16:src/vm2.c     **** extern uint32_t nPC;
  17:src/vm2.c     **** 
  18:src/vm2.c     **** /*void advance_pc(int32_t offset)
  19:src/vm2.c     **** {
  20:src/vm2.c     **** 	PC  =  nPC;
  21:src/vm2.c     **** 	nPC  += offset;
  22:src/vm2.c     **** } */
  23:src/vm2.c     **** 
  24:src/vm2.c     **** void vm_cpu_2(uint32_t newPC,int opt)
  25:src/vm2.c     **** {
  13              		.loc 1 25 0
  14              		.cfi_startproc
  15              	.LVL0:
  16 0000 4155     		pushq	%r13
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 13, -16
  26:src/vm2.c     **** 	PC = newPC;
  27:src/vm2.c     **** 	nPC = 4;
  28:src/vm2.c     **** 	RF[0] = 0; //Register $zero must always be zero
  29:src/vm2.c     **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
  30:src/vm2.c     **** 	uint32_t HI = 0, LO = 0;  
  19              		.loc 1 30 0
  20 0002 4531ED   		xorl	%r13d, %r13d
  25:src/vm2.c     **** 	PC = newPC;
  21              		.loc 1 25 0
  22 0005 4154     		pushq	%r12
  23              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/cc15eBE3.s 			page 2


  24              		.cfi_offset 12, -24
  31:src/vm2.c     **** 	uint32_t offset = 4;
  32:src/vm2.c     **** 	uint8_t halted = 0;
  33:src/vm2.c     **** 	
  34:src/vm2.c     **** 	uint32_t instr;
  35:src/vm2.c     **** 	uint8_t op;
  36:src/vm2.c     **** 	uint8_t rs;
  37:src/vm2.c     **** 	uint8_t rt;
  38:src/vm2.c     **** 	uint8_t rd;
  39:src/vm2.c     **** 	int16_t immediate;
  40:src/vm2.c     **** 	uint32_t address;
  41:src/vm2.c     **** 	
  42:src/vm2.c     **** 	uint8_t shamt;
  43:src/vm2.c     **** 	uint8_t funct;
  44:src/vm2.c     **** 	
  45:src/vm2.c     **** 	uint64_t mult; 
  46:src/vm2.c     **** 
  47:src/vm2.c     **** 	while (!halted) 
  48:src/vm2.c     **** 	{
  49:src/vm2.c     **** 		//instr = fetch(PC);
  50:src/vm2.c     **** 		instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memory
  51:src/vm2.c     **** 		op = (instr >> 26) & 0x3F;
  52:src/vm2.c     **** 		// rs, rt, rd, immediatte -> Moved
  53:src/vm2.c     **** 			
  54:src/vm2.c     **** 		// offset = 4; // default offset for non-branching instructions, not used
  55:src/vm2.c     **** 		//TODO Handle events here!
  56:src/vm2.c     **** 		switch (op) 
  57:src/vm2.c     **** 		{
  58:src/vm2.c     **** 			case 0x0: { // 000000 => Register encoding.
  59:src/vm2.c     **** 				funct = (instr >> 0) & 0x3F;
  60:src/vm2.c     **** 				// shamt moved
  61:src/vm2.c     **** 			  
  62:src/vm2.c     **** 				switch (funct) {
  63:src/vm2.c     **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
  64:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
  65:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
  66:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
  67:src/vm2.c     **** 						if (RF[rt] != 0) RF[rd] = RF[rs];
  68:src/vm2.c     **** 						PC  =  nPC;
  69:src/vm2.c     **** 						nPC  += 4;
  70:src/vm2.c     **** 						break;
  71:src/vm2.c     **** 					}
  72:src/vm2.c     **** 					case 0b001010: { // movz	001010 				if(rt==0) rd = rs
  73:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
  74:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
  75:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
  76:src/vm2.c     **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
  77:src/vm2.c     **** 						PC  =  nPC;
  78:src/vm2.c     **** 						nPC  += 4;
  79:src/vm2.c     **** 						break;
  80:src/vm2.c     **** 					}
  81:src/vm2.c     **** 					case 0b100000: { // add		100000	ArithLog	$d = $s + $t
  82:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
  83:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
  84:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
  85:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
  86:src/vm2.c     **** 						PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 3


  87:src/vm2.c     **** 						nPC  += 4;
  88:src/vm2.c     **** 						break;
  89:src/vm2.c     **** 					}
  90:src/vm2.c     **** 					case 0b100001: { // addu	100001	ArithLog	$d = $s + $t
  91:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
  92:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
  93:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
  94:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
  95:src/vm2.c     **** 						PC  =  nPC;
  96:src/vm2.c     **** 						nPC  += 4;
  97:src/vm2.c     **** 						break;
  98:src/vm2.c     **** 					}
  99:src/vm2.c     **** 					case 0b100100: { // and		100100	ArithLog	$d = $s & $t
 100:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 101:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 102:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 103:src/vm2.c     **** 						RF[rd] = RF[rs] & RF[rt];
 104:src/vm2.c     **** 						PC  =  nPC;
 105:src/vm2.c     **** 						nPC  += 4;
 106:src/vm2.c     **** 						break;
 107:src/vm2.c     **** 					}
 108:src/vm2.c     **** 					case 0b011010: { // div		011010  DivMult		lo = $s / $t; hi = $s % $t
 109:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 110:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 111:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 112:src/vm2.c     **** 						HI = RF[rs] % RF[rt];
 113:src/vm2.c     **** 						PC  =  nPC;
 114:src/vm2.c     **** 						nPC  += 4;
 115:src/vm2.c     **** 						break;
 116:src/vm2.c     **** 					}
 117:src/vm2.c     **** 					case 0b011011: { // divu	011011  DivMult		lo = $s / $t; hi = $s % $t
 118:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 119:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 120:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 121:src/vm2.c     **** 						HI = RF[rs] % RF[rt];  
 122:src/vm2.c     **** 						PC  =  nPC;
 123:src/vm2.c     **** 						nPC  += 4;
 124:src/vm2.c     **** 						break;
 125:src/vm2.c     **** 					}
 126:src/vm2.c     **** 					case 0b011000: { // mult	011000  DivMult		hi:lo = $s * $t
 127:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 128:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 129:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 130:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 131:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;
 132:src/vm2.c     **** 						PC  =  nPC;
 133:src/vm2.c     **** 						nPC  += 4;
 134:src/vm2.c     **** 						break;
 135:src/vm2.c     **** 					}
 136:src/vm2.c     **** 					case 0b011001: { // multu	011001	DivMult		hi:lo = $s * $t
 137:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 138:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 139:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 140:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 141:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;  
 142:src/vm2.c     **** 						PC  =  nPC;
 143:src/vm2.c     **** 						nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 4


 144:src/vm2.c     **** 						break;
 145:src/vm2.c     **** 					}
 146:src/vm2.c     **** 					case 0b100111: { // nor		100111	ArithLog	$d = ~($s | $t)
 147:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 148:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 149:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 150:src/vm2.c     **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 151:src/vm2.c     **** 						PC  =  nPC;
 152:src/vm2.c     **** 						nPC  += 4;
 153:src/vm2.c     **** 						break;
 154:src/vm2.c     **** 					}
 155:src/vm2.c     **** 					case 0b100101: { // or		100101	ArithLog	$d = $s | $t
 156:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 157:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 158:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 159:src/vm2.c     **** 						RF[rd] = RF[rs] | RF[rt];
 160:src/vm2.c     **** 						PC  =  nPC;
 161:src/vm2.c     **** 						nPC  += 4;
 162:src/vm2.c     **** 						break;
 163:src/vm2.c     **** 					}
 164:src/vm2.c     **** 					case 0b000000: { // sll		000000	Shift		$d = $t << a
 165:src/vm2.c     **** 						shamt = (instr >> 6) & 0x1F;
 166:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 167:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 168:src/vm2.c     **** 						RF[rd] = RF[rt] << shamt;
 169:src/vm2.c     **** 						PC  =  nPC;
 170:src/vm2.c     **** 						nPC  += 4;
 171:src/vm2.c     **** 						break;
 172:src/vm2.c     **** 					}
 173:src/vm2.c     **** 					case 0b000100: { // sllv	000100	ShiftV		$d = $t << $s
 174:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 175:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 176:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 177:src/vm2.c     **** 						RF[rd] = RF[rt] << RF[rs];
 178:src/vm2.c     **** 						PC  =  nPC;
 179:src/vm2.c     **** 						nPC  += 4;
 180:src/vm2.c     **** 						break;
 181:src/vm2.c     **** 					}
 182:src/vm2.c     **** 					case 0b000011: { // sra		000011	Shift		$d = $t >> a 
 183:src/vm2.c     **** 						shamt = (instr >> 6) & 0x1F;
 184:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 185:src/vm2.c     **** 						if ((int32_t)RF[rt] < 0 && shamt > 0) {
 186:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 187:src/vm2.c     **** 						  RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
  25              		.loc 1 187 0
  26 0007 4183CCFF 		orl	$-1, %r12d
  25:src/vm2.c     **** 	PC = newPC;
  27              		.loc 1 25 0
  28 000b 55       		pushq	%rbp
  29              		.cfi_def_cfa_offset 32
  30              		.cfi_offset 6, -32
  31 000c 89F5     		movl	%esi, %ebp
  32 000e 53       		pushq	%rbx
  33              		.cfi_def_cfa_offset 40
  34              		.cfi_offset 3, -40
  30:src/vm2.c     **** 	uint32_t offset = 4;
  35              		.loc 1 30 0
GAS LISTING /tmp/cc15eBE3.s 			page 5


  36 000f 31DB     		xorl	%ebx, %ebx
  25:src/vm2.c     **** 	PC = newPC;
  37              		.loc 1 25 0
  38 0011 51       		pushq	%rcx
  39              		.cfi_def_cfa_offset 48
  26:src/vm2.c     **** 	nPC = 4;
  40              		.loc 1 26 0
  41 0012 893D0000 		movl	%edi, PC(%rip)
  41      0000
  27:src/vm2.c     **** 	RF[0] = 0; //Register $zero must always be zero
  42              		.loc 1 27 0
  43 0018 C7050000 		movl	$4, nPC(%rip)
  43      00000400 
  43      0000
  28:src/vm2.c     **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
  44              		.loc 1 28 0
  45 0022 C7050000 		movl	$0, RF(%rip)
  45      00000000 
  45      0000
  29:src/vm2.c     **** 	uint32_t HI = 0, LO = 0;  
  46              		.loc 1 29 0
  47 002c C7050000 		movl	$1, RF+124(%rip)
  47      00000100 
  47      0000
  48              	.LVL1:
  49              	.L2:
  50:src/vm2.c     **** 		op = (instr >> 26) & 0x3F;
  50              		.loc 1 50 0
  51 0036 8B0D0000 		movl	PC(%rip), %ecx
  51      0000
  52 003c 8D4103   		leal	3(%rcx), %eax
  53 003f 0FB6B800 		movzbl	VM_memory(%rax), %edi
  53      000000
  54 0046 89C8     		movl	%ecx, %eax
  55 0048 0FB68000 		movzbl	VM_memory(%rax), %eax
  55      000000
  56 004f C1E018   		sall	$24, %eax
  57 0052 09C7     		orl	%eax, %edi
  58 0054 8D4101   		leal	1(%rcx), %eax
  59 0057 0FB68000 		movzbl	VM_memory(%rax), %eax
  59      000000
  60 005e C1E010   		sall	$16, %eax
  61 0061 09C7     		orl	%eax, %edi
  62 0063 8D4102   		leal	2(%rcx), %eax
  63 0066 0FB68000 		movzbl	VM_memory(%rax), %eax
  63      000000
  64 006d C1E008   		sall	$8, %eax
  65 0070 09C7     		orl	%eax, %edi
  66              	.LVL2:
  51:src/vm2.c     **** 		// rs, rt, rd, immediatte -> Moved
  67              		.loc 1 51 0
  68 0072 89F8     		movl	%edi, %eax
  69 0074 C1E81A   		shrl	$26, %eax
  56:src/vm2.c     **** 		{
  70              		.loc 1 56 0
  71 0077 83F82E   		cmpl	$46, %eax
  72 007a 0F87E007 		ja	.L4
GAS LISTING /tmp/cc15eBE3.s 			page 6


  72      0000
  73 0080 FF24C500 		jmp	*.L6(,%rax,8)
  73      000000
  74              		.section	.rodata
  75              		.align 8
  76              		.align 4
  77              	.L6:
  78 0000 00000000 		.quad	.L5
  78      00000000 
  79 0008 00000000 		.quad	.L7
  79      00000000 
  80 0010 00000000 		.quad	.L93
  80      00000000 
  81 0018 00000000 		.quad	.L9
  81      00000000 
  82 0020 00000000 		.quad	.L10
  82      00000000 
  83 0028 00000000 		.quad	.L11
  83      00000000 
  84 0030 00000000 		.quad	.L12
  84      00000000 
  85 0038 00000000 		.quad	.L13
  85      00000000 
  86 0040 00000000 		.quad	.L15
  86      00000000 
  87 0048 00000000 		.quad	.L15
  87      00000000 
  88 0050 00000000 		.quad	.L17
  88      00000000 
  89 0058 00000000 		.quad	.L17
  89      00000000 
  90 0060 00000000 		.quad	.L18
  90      00000000 
  91 0068 00000000 		.quad	.L19
  91      00000000 
  92 0070 00000000 		.quad	.L20
  92      00000000 
  93 0078 00000000 		.quad	.L21
  93      00000000 
  94 0080 00000000 		.quad	.L4
  94      00000000 
  95 0088 00000000 		.quad	.L4
  95      00000000 
  96 0090 00000000 		.quad	.L4
  96      00000000 
  97 0098 00000000 		.quad	.L4
  97      00000000 
  98 00a0 00000000 		.quad	.L4
  98      00000000 
  99 00a8 00000000 		.quad	.L4
  99      00000000 
 100 00b0 00000000 		.quad	.L4
 100      00000000 
 101 00b8 00000000 		.quad	.L4
 101      00000000 
 102 00c0 00000000 		.quad	.L22
 102      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 7


 103 00c8 00000000 		.quad	.L21
 103      00000000 
 104 00d0 00000000 		.quad	.L23
 104      00000000 
 105 00d8 00000000 		.quad	.L4
 105      00000000 
 106 00e0 00000000 		.quad	.L4
 106      00000000 
 107 00e8 00000000 		.quad	.L4
 107      00000000 
 108 00f0 00000000 		.quad	.L4
 108      00000000 
 109 00f8 00000000 		.quad	.L4
 109      00000000 
 110 0100 00000000 		.quad	.L24
 110      00000000 
 111 0108 00000000 		.quad	.L29
 111      00000000 
 112 0110 00000000 		.quad	.L26
 112      00000000 
 113 0118 00000000 		.quad	.L27
 113      00000000 
 114 0120 00000000 		.quad	.L28
 114      00000000 
 115 0128 00000000 		.quad	.L29
 115      00000000 
 116 0130 00000000 		.quad	.L30
 116      00000000 
 117 0138 00000000 		.quad	.L4
 117      00000000 
 118 0140 00000000 		.quad	.L31
 118      00000000 
 119 0148 00000000 		.quad	.L32
 119      00000000 
 120 0150 00000000 		.quad	.L33
 120      00000000 
 121 0158 00000000 		.quad	.L34
 121      00000000 
 122 0160 00000000 		.quad	.L4
 122      00000000 
 123 0168 00000000 		.quad	.L4
 123      00000000 
 124 0170 00000000 		.quad	.L35
 124      00000000 
 125              		.text
 126              	.L5:
 127              	.LVL3:
  59:src/vm2.c     **** 				// shamt moved
 128              		.loc 1 59 0
 129 0087 4088F8   		movb	%dil, %al
 130 008a 83E03F   		andl	$63, %eax
  62:src/vm2.c     **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 131              		.loc 1 62 0
 132 008d 3C2B     		cmpb	$43, %al
 133 008f 77A5     		ja	.L2
 134 0091 0FB6C0   		movzbl	%al, %eax
 135 0094 FF24C500 		jmp	*.L37(,%rax,8)
GAS LISTING /tmp/cc15eBE3.s 			page 8


 135      000000
 136              		.section	.rodata
 137              		.align 8
 138              		.align 4
 139              	.L37:
 140 0178 00000000 		.quad	.L36
 140      00000000 
 141 0180 00000000 		.quad	.L2
 141      00000000 
 142 0188 00000000 		.quad	.L38
 142      00000000 
 143 0190 00000000 		.quad	.L39
 143      00000000 
 144 0198 00000000 		.quad	.L40
 144      00000000 
 145 01a0 00000000 		.quad	.L2
 145      00000000 
 146 01a8 00000000 		.quad	.L41
 146      00000000 
 147 01b0 00000000 		.quad	.L41
 147      00000000 
 148 01b8 00000000 		.quad	.L43
 148      00000000 
 149 01c0 00000000 		.quad	.L44
 149      00000000 
 150 01c8 00000000 		.quad	.L45
 150      00000000 
 151 01d0 00000000 		.quad	.L46
 151      00000000 
 152 01d8 00000000 		.quad	.L47
 152      00000000 
 153 01e0 00000000 		.quad	.L2
 153      00000000 
 154 01e8 00000000 		.quad	.L2
 154      00000000 
 155 01f0 00000000 		.quad	.L2
 155      00000000 
 156 01f8 00000000 		.quad	.L48
 156      00000000 
 157 0200 00000000 		.quad	.L49
 157      00000000 
 158 0208 00000000 		.quad	.L50
 158      00000000 
 159 0210 00000000 		.quad	.L51
 159      00000000 
 160 0218 00000000 		.quad	.L2
 160      00000000 
 161 0220 00000000 		.quad	.L2
 161      00000000 
 162 0228 00000000 		.quad	.L2
 162      00000000 
 163 0230 00000000 		.quad	.L2
 163      00000000 
 164 0238 00000000 		.quad	.L53
 164      00000000 
 165 0240 00000000 		.quad	.L53
 165      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 9


 166 0248 00000000 		.quad	.L55
 166      00000000 
 167 0250 00000000 		.quad	.L55
 167      00000000 
 168 0258 00000000 		.quad	.L2
 168      00000000 
 169 0260 00000000 		.quad	.L2
 169      00000000 
 170 0268 00000000 		.quad	.L2
 170      00000000 
 171 0270 00000000 		.quad	.L2
 171      00000000 
 172 0278 00000000 		.quad	.L57
 172      00000000 
 173 0280 00000000 		.quad	.L57
 173      00000000 
 174 0288 00000000 		.quad	.L59
 174      00000000 
 175 0290 00000000 		.quad	.L59
 175      00000000 
 176 0298 00000000 		.quad	.L60
 176      00000000 
 177 02a0 00000000 		.quad	.L61
 177      00000000 
 178 02a8 00000000 		.quad	.L62
 178      00000000 
 179 02b0 00000000 		.quad	.L63
 179      00000000 
 180 02b8 00000000 		.quad	.L2
 180      00000000 
 181 02c0 00000000 		.quad	.L2
 181      00000000 
 182 02c8 00000000 		.quad	.L65
 182      00000000 
 183 02d0 00000000 		.quad	.L65
 183      00000000 
 184              		.text
 185              	.L46:
 186              	.LVL4:
  65:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 187              		.loc 1 65 0
 188 009b 89F8     		movl	%edi, %eax
 189 009d C1E810   		shrl	$16, %eax
  67:src/vm2.c     **** 						PC  =  nPC;
 190              		.loc 1 67 0
 191 00a0 83E01F   		andl	$31, %eax
 192 00a3 833C8500 		cmpl	$0, RF(,%rax,4)
 192      00000000 
 193 00ab 0F84C007 		je	.L92
 193      0000
 194 00b1 EB16     		jmp	.L107
 195              	.LVL5:
 196              	.L45:
  74:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 197              		.loc 1 74 0
 198 00b3 89F8     		movl	%edi, %eax
 199 00b5 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 10


  76:src/vm2.c     **** 						PC  =  nPC;
 200              		.loc 1 76 0
 201 00b8 83E01F   		andl	$31, %eax
 202 00bb 833C8500 		cmpl	$0, RF(,%rax,4)
 202      00000000 
 203 00c3 0F85A807 		jne	.L92
 203      0000
 204              	.LVL6:
 205              	.L107:
  73:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 206              		.loc 1 73 0 discriminator 1
 207 00c9 89F8     		movl	%edi, %eax
  75:src/vm2.c     **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
 208              		.loc 1 75 0 discriminator 1
 209 00cb C1EF0B   		shrl	$11, %edi
 210              	.LVL7:
  73:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 211              		.loc 1 73 0 discriminator 1
 212 00ce C1E815   		shrl	$21, %eax
 213              	.LVL8:
  76:src/vm2.c     **** 						PC  =  nPC;
 214              		.loc 1 76 0 discriminator 1
 215 00d1 83E71F   		andl	$31, %edi
 216 00d4 83E01F   		andl	$31, %eax
 217 00d7 8B048500 		movl	RF(,%rax,4), %eax
 217      000000
 218 00de E9740700 		jmp	.L97
 218      00
 219              	.LVL9:
 220              	.L57:
  92:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 221              		.loc 1 92 0
 222 00e3 89F8     		movl	%edi, %eax
  93:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 223              		.loc 1 93 0
 224 00e5 89FA     		movl	%edi, %edx
  91:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 225              		.loc 1 91 0
 226 00e7 C1EF15   		shrl	$21, %edi
 227              	.LVL10:
  92:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 228              		.loc 1 92 0
 229 00ea C1E810   		shrl	$16, %eax
 230              	.LVL11:
  93:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 231              		.loc 1 93 0
 232 00ed C1EA0B   		shrl	$11, %edx
 233              	.LVL12:
  94:src/vm2.c     **** 						PC  =  nPC;
 234              		.loc 1 94 0
 235 00f0 83E71F   		andl	$31, %edi
 236 00f3 83E01F   		andl	$31, %eax
 237 00f6 83E21F   		andl	$31, %edx
 238 00f9 8B048500 		movl	RF(,%rax,4), %eax
 238      000000
 239 0100 0304BD00 		addl	RF(,%rdi,4), %eax
 239      000000
GAS LISTING /tmp/cc15eBE3.s 			page 11


 240 0107 E9E60100 		jmp	.L99
 240      00
 241              	.LVL13:
 242              	.L60:
 101:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 243              		.loc 1 101 0
 244 010c 89F8     		movl	%edi, %eax
 102:src/vm2.c     **** 						RF[rd] = RF[rs] & RF[rt];
 245              		.loc 1 102 0
 246 010e 89FA     		movl	%edi, %edx
 100:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 247              		.loc 1 100 0
 248 0110 C1EF15   		shrl	$21, %edi
 249              	.LVL14:
 101:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 250              		.loc 1 101 0
 251 0113 C1E810   		shrl	$16, %eax
 252              	.LVL15:
 102:src/vm2.c     **** 						RF[rd] = RF[rs] & RF[rt];
 253              		.loc 1 102 0
 254 0116 C1EA0B   		shrl	$11, %edx
 255              	.LVL16:
 103:src/vm2.c     **** 						PC  =  nPC;
 256              		.loc 1 103 0
 257 0119 83E71F   		andl	$31, %edi
 258 011c 83E01F   		andl	$31, %eax
 259 011f 83E21F   		andl	$31, %edx
 260 0122 8B048500 		movl	RF(,%rax,4), %eax
 260      000000
 261 0129 2304BD00 		andl	RF(,%rdi,4), %eax
 261      000000
 262 0130 E9BD0100 		jmp	.L99
 262      00
 263              	.LVL17:
 264              	.L55:
 118:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 265              		.loc 1 118 0
 266 0135 89F8     		movl	%edi, %eax
 119:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 267              		.loc 1 119 0
 268 0137 C1EF10   		shrl	$16, %edi
 269              	.LVL18:
 121:src/vm2.c     **** 						PC  =  nPC;
 270              		.loc 1 121 0
 271 013a 31D2     		xorl	%edx, %edx
 118:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 272              		.loc 1 118 0
 273 013c C1E815   		shrl	$21, %eax
 274              	.LVL19:
 120:src/vm2.c     **** 						HI = RF[rs] % RF[rt];  
 275              		.loc 1 120 0
 276 013f 83E71F   		andl	$31, %edi
 277 0142 83E01F   		andl	$31, %eax
 278 0145 8B048500 		movl	RF(,%rax,4), %eax
 278      000000
 279              	.LVL20:
 121:src/vm2.c     **** 						PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 12


 280              		.loc 1 121 0
 281 014c F734BD00 		divl	RF(,%rdi,4)
 281      000000
 282              	.LVL21:
 283 0153 4189D5   		movl	%edx, %r13d
 284              	.LVL22:
 285 0156 89C3     		movl	%eax, %ebx
 286 0158 E9140700 		jmp	.L92
 286      00
 287              	.LVL23:
 288              	.L53:
 138:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 289              		.loc 1 138 0
 290 015d 89F8     		movl	%edi, %eax
 137:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 291              		.loc 1 137 0
 292 015f C1EF15   		shrl	$21, %edi
 293              	.LVL24:
 138:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 294              		.loc 1 138 0
 295 0162 C1E810   		shrl	$16, %eax
 296              	.LVL25:
 139:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 297              		.loc 1 139 0
 298 0165 83E71F   		andl	$31, %edi
 299 0168 83E01F   		andl	$31, %eax
 300 016b 8B1C8500 		movl	RF(,%rax,4), %ebx
 300      000000
 301              	.LVL26:
 302 0172 8B04BD00 		movl	RF(,%rdi,4), %eax
 302      000000
 303 0179 480FAFD8 		imulq	%rax, %rbx
 304              	.LVL27:
 140:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;  
 305              		.loc 1 140 0
 306 017d 4889D8   		movq	%rbx, %rax
 307 0180 48C1E820 		shrq	$32, %rax
 308 0184 4989C5   		movq	%rax, %r13
 309              	.LVL28:
 310 0187 E9E50600 		jmp	.L92
 310      00
 311              	.LVL29:
 312              	.L63:
 148:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 313              		.loc 1 148 0
 314 018c 89F8     		movl	%edi, %eax
 149:src/vm2.c     **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 315              		.loc 1 149 0
 316 018e 89FA     		movl	%edi, %edx
 147:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 317              		.loc 1 147 0
 318 0190 C1EF15   		shrl	$21, %edi
 319              	.LVL30:
 148:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 320              		.loc 1 148 0
 321 0193 C1E810   		shrl	$16, %eax
 322              	.LVL31:
GAS LISTING /tmp/cc15eBE3.s 			page 13


 150:src/vm2.c     **** 						PC  =  nPC;
 323              		.loc 1 150 0
 324 0196 83E71F   		andl	$31, %edi
 149:src/vm2.c     **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 325              		.loc 1 149 0
 326 0199 C1EA0B   		shrl	$11, %edx
 327              	.LVL32:
 150:src/vm2.c     **** 						PC  =  nPC;
 328              		.loc 1 150 0
 329 019c 83E01F   		andl	$31, %eax
 330 019f 83E21F   		andl	$31, %edx
 331 01a2 8B048500 		movl	RF(,%rax,4), %eax
 331      000000
 332 01a9 0B04BD00 		orl	RF(,%rdi,4), %eax
 332      000000
 333 01b0 F7D0     		notl	%eax
 334 01b2 E93B0100 		jmp	.L99
 334      00
 335              	.LVL33:
 336              	.L61:
 157:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 337              		.loc 1 157 0
 338 01b7 89F8     		movl	%edi, %eax
 158:src/vm2.c     **** 						RF[rd] = RF[rs] | RF[rt];
 339              		.loc 1 158 0
 340 01b9 89FA     		movl	%edi, %edx
 156:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 341              		.loc 1 156 0
 342 01bb C1EF15   		shrl	$21, %edi
 343              	.LVL34:
 157:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 344              		.loc 1 157 0
 345 01be C1E810   		shrl	$16, %eax
 346              	.LVL35:
 158:src/vm2.c     **** 						RF[rd] = RF[rs] | RF[rt];
 347              		.loc 1 158 0
 348 01c1 C1EA0B   		shrl	$11, %edx
 349              	.LVL36:
 159:src/vm2.c     **** 						PC  =  nPC;
 350              		.loc 1 159 0
 351 01c4 83E71F   		andl	$31, %edi
 352 01c7 83E01F   		andl	$31, %eax
 353 01ca 83E21F   		andl	$31, %edx
 354 01cd 8B048500 		movl	RF(,%rax,4), %eax
 354      000000
 355 01d4 0B04BD00 		orl	RF(,%rdi,4), %eax
 355      000000
 356 01db E9120100 		jmp	.L99
 356      00
 357              	.LVL37:
 358              	.L36:
 167:src/vm2.c     **** 						RF[rd] = RF[rt] << shamt;
 359              		.loc 1 167 0
 360 01e0 89FA     		movl	%edi, %edx
 166:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 361              		.loc 1 166 0
 362 01e2 89F8     		movl	%edi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 14


 165:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 363              		.loc 1 165 0
 364 01e4 C1EF06   		shrl	$6, %edi
 365              	.LVL38:
 167:src/vm2.c     **** 						RF[rd] = RF[rt] << shamt;
 366              		.loc 1 167 0
 367 01e7 C1EA0B   		shrl	$11, %edx
 166:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 368              		.loc 1 166 0
 369 01ea C1E810   		shrl	$16, %eax
 370              	.LVL39:
 165:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 371              		.loc 1 165 0
 372 01ed 4088F9   		movb	%dil, %cl
 373              	.LVL40:
 168:src/vm2.c     **** 						PC  =  nPC;
 374              		.loc 1 168 0
 375 01f0 83E21F   		andl	$31, %edx
 376 01f3 83E01F   		andl	$31, %eax
 165:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 377              		.loc 1 165 0
 378 01f6 83E11F   		andl	$31, %ecx
 379 01f9 EB1D     		jmp	.L103
 380              	.LVL41:
 381              	.L40:
 176:src/vm2.c     **** 						RF[rd] = RF[rt] << RF[rs];
 382              		.loc 1 176 0
 383 01fb 89FA     		movl	%edi, %edx
 175:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 384              		.loc 1 175 0
 385 01fd 89F8     		movl	%edi, %eax
 174:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 386              		.loc 1 174 0
 387 01ff C1EF15   		shrl	$21, %edi
 388              	.LVL42:
 177:src/vm2.c     **** 						PC  =  nPC;
 389              		.loc 1 177 0
 390 0202 83E71F   		andl	$31, %edi
 176:src/vm2.c     **** 						RF[rd] = RF[rt] << RF[rs];
 391              		.loc 1 176 0
 392 0205 C1EA0B   		shrl	$11, %edx
 175:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 393              		.loc 1 175 0
 394 0208 C1E810   		shrl	$16, %eax
 395              	.LVL43:
 177:src/vm2.c     **** 						PC  =  nPC;
 396              		.loc 1 177 0
 397 020b 8B0CBD00 		movl	RF(,%rdi,4), %ecx
 397      000000
 398              	.LVL44:
 399 0212 83E21F   		andl	$31, %edx
 400 0215 83E01F   		andl	$31, %eax
 401              	.LVL45:
 402              	.L103:
 403 0218 8B048500 		movl	RF(,%rax,4), %eax
 403      000000
 404 021f D3E0     		sall	%cl, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 15


 405 0221 E9CC0000 		jmp	.L99
 405      00
 406              	.LVL46:
 407              	.L39:
 184:src/vm2.c     **** 						if ((int32_t)RF[rt] < 0 && shamt > 0) {
 408              		.loc 1 184 0
 409 0226 89F8     		movl	%edi, %eax
 183:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 410              		.loc 1 183 0
 411 0228 89F9     		movl	%edi, %ecx
 186:src/vm2.c     **** 						  RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 412              		.loc 1 186 0
 413 022a C1EF0B   		shrl	$11, %edi
 414              	.LVL47:
 184:src/vm2.c     **** 						if ((int32_t)RF[rt] < 0 && shamt > 0) {
 415              		.loc 1 184 0
 416 022d C1E810   		shrl	$16, %eax
 417              	.LVL48:
 183:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 418              		.loc 1 183 0
 419 0230 C1E906   		shrl	$6, %ecx
 420              	.LVL49:
 421              		.loc 1 187 0
 422 0233 83E71F   		andl	$31, %edi
 185:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 423              		.loc 1 185 0
 424 0236 83E01F   		andl	$31, %eax
 183:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 425              		.loc 1 183 0
 426 0239 83E11F   		andl	$31, %ecx
 427              	.LVL50:
 185:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 428              		.loc 1 185 0
 429 023c 8B148500 		movl	RF(,%rax,4), %edx
 429      000000
 430 0243 85D2     		testl	%edx, %edx
 431 0245 7910     		jns	.L69
 185:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 432              		.loc 1 185 0 is_stmt 0 discriminator 1
 433 0247 84C9     		testb	%cl, %cl
 434 0249 740C     		je	.L69
 435              	.LVL51:
 436              		.loc 1 187 0 is_stmt 1
 437 024b 4489E0   		movl	%r12d, %eax
 438 024e D3E8     		shrl	%cl, %eax
 439 0250 F7D0     		notl	%eax
 440 0252 E9FE0500 		jmp	.L96
 440      00
 441              	.LVL52:
 442              	.L69:
 188:src/vm2.c     **** 						}
 189:src/vm2.c     **** 						else {
 190:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 191:src/vm2.c     **** 						  RF[rd] = (int32_t)RF[rt] >> shamt;
 443              		.loc 1 191 0
 444 0257 D3FA     		sarl	%cl, %edx
 445 0259 8914BD00 		movl	%edx, RF(,%rdi,4)
GAS LISTING /tmp/cc15eBE3.s 			page 16


 445      000000
 446 0260 E90C0600 		jmp	.L92
 446      00
 447              	.LVL53:
 448              	.L38:
 192:src/vm2.c     **** 						}
 193:src/vm2.c     **** 						PC  =  nPC;
 194:src/vm2.c     **** 						nPC  += 4;
 195:src/vm2.c     **** 						break;
 196:src/vm2.c     **** 					}
 197:src/vm2.c     **** 					case 0b000111: { // srav	000111	ShiftV		$d = $t >> $s
 198:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 199:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 200:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 201:src/vm2.c     **** 						RF[rd] = RF[rt] >> RF[rs];
 202:src/vm2.c     **** 						PC  =  nPC;
 203:src/vm2.c     **** 						nPC  += 4;
 204:src/vm2.c     **** 						break;
 205:src/vm2.c     **** 					}
 206:src/vm2.c     **** 					case 0b000010: { // srl		000010	Shift		$d = $t >>> a
 207:src/vm2.c     **** 						shamt = (instr >> 6) & 0x1F;
 208:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 209:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 449              		.loc 1 209 0
 450 0265 89FA     		movl	%edi, %edx
 208:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 451              		.loc 1 208 0
 452 0267 89F8     		movl	%edi, %eax
 207:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 453              		.loc 1 207 0
 454 0269 C1EF06   		shrl	$6, %edi
 455              	.LVL54:
 456              		.loc 1 209 0
 457 026c C1EA0B   		shrl	$11, %edx
 208:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 458              		.loc 1 208 0
 459 026f C1E810   		shrl	$16, %eax
 460              	.LVL55:
 207:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 461              		.loc 1 207 0
 462 0272 4088F9   		movb	%dil, %cl
 463              	.LVL56:
 210:src/vm2.c     **** 						RF[rd] = RF[rt] >> shamt;
 464              		.loc 1 210 0
 465 0275 83E21F   		andl	$31, %edx
 466 0278 83E01F   		andl	$31, %eax
 207:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 467              		.loc 1 207 0
 468 027b 83E11F   		andl	$31, %ecx
 469              	.LVL57:
 470              	.L104:
 471              		.loc 1 210 0
 472 027e 8B048500 		movl	RF(,%rax,4), %eax
 472      000000
 473 0285 D3E8     		shrl	%cl, %eax
 474 0287 EB69     		jmp	.L99
 475              	.LVL58:
GAS LISTING /tmp/cc15eBE3.s 			page 17


 476              	.L41:
 211:src/vm2.c     **** 						PC  =  nPC;
 212:src/vm2.c     **** 						nPC  += 4;
 213:src/vm2.c     **** 						break;
 214:src/vm2.c     **** 					}
 215:src/vm2.c     **** 					case 0b000110: { // srlv	000110	ShiftV		$d = $t >>> $s
 216:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 217:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 218:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 477              		.loc 1 218 0
 478 0289 89FA     		movl	%edi, %edx
 217:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 479              		.loc 1 217 0
 480 028b 89F8     		movl	%edi, %eax
 216:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 481              		.loc 1 216 0
 482 028d C1EF15   		shrl	$21, %edi
 483              	.LVL59:
 484              		.loc 1 218 0
 485 0290 C1EA0B   		shrl	$11, %edx
 217:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 486              		.loc 1 217 0
 487 0293 C1E810   		shrl	$16, %eax
 488              	.LVL60:
 219:src/vm2.c     **** 						RF[rd] = RF[rt] >> RF[rs];  
 489              		.loc 1 219 0
 490 0296 83E71F   		andl	$31, %edi
 491 0299 83E21F   		andl	$31, %edx
 492 029c 83E01F   		andl	$31, %eax
 493 029f 8B0CBD00 		movl	RF(,%rdi,4), %ecx
 493      000000
 494              	.LVL61:
 495 02a6 EBD6     		jmp	.L104
 496              	.LVL62:
 497              	.L59:
 220:src/vm2.c     **** 						PC  =  nPC;
 221:src/vm2.c     **** 						nPC  += 4;
 222:src/vm2.c     **** 						break;
 223:src/vm2.c     **** 					}
 224:src/vm2.c     **** 					case 0b100010: { // sub		100010	ArithLog	$d = $s - $t
 225:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 226:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 227:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 228:src/vm2.c     **** 						RF[rd] = RF[rs] - RF[rt];  
 229:src/vm2.c     **** 						PC  =  nPC;
 230:src/vm2.c     **** 						nPC  += 4;
 231:src/vm2.c     **** 						break;
 232:src/vm2.c     **** 					}
 233:src/vm2.c     **** 					case 0b100011: { // subu	100011	ArithLog	$d = $s - $t
 234:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 498              		.loc 1 234 0
 499 02a8 89F8     		movl	%edi, %eax
 235:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 236:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 500              		.loc 1 236 0
 501 02aa 89FA     		movl	%edi, %edx
 235:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 18


 502              		.loc 1 235 0
 503 02ac C1EF10   		shrl	$16, %edi
 504              	.LVL63:
 234:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 505              		.loc 1 234 0
 506 02af C1E815   		shrl	$21, %eax
 507              	.LVL64:
 508              		.loc 1 236 0
 509 02b2 C1EA0B   		shrl	$11, %edx
 510              	.LVL65:
 237:src/vm2.c     **** 						RF[rd] = RF[rs] - RF[rt];    
 511              		.loc 1 237 0
 512 02b5 83E71F   		andl	$31, %edi
 513 02b8 83E01F   		andl	$31, %eax
 514 02bb 83E21F   		andl	$31, %edx
 515 02be 8B048500 		movl	RF(,%rax,4), %eax
 515      000000
 516 02c5 2B04BD00 		subl	RF(,%rdi,4), %eax
 516      000000
 517 02cc EB24     		jmp	.L99
 518              	.LVL66:
 519              	.L62:
 238:src/vm2.c     **** 						PC  =  nPC;
 239:src/vm2.c     **** 						nPC  += 4;
 240:src/vm2.c     **** 						break;
 241:src/vm2.c     **** 					}
 242:src/vm2.c     **** 					case 0b100110: { // xor		100110  ArithLog	$d = $s ^ $t
 243:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 244:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 520              		.loc 1 244 0
 521 02ce 89F8     		movl	%edi, %eax
 245:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 522              		.loc 1 245 0
 523 02d0 89FA     		movl	%edi, %edx
 243:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 524              		.loc 1 243 0
 525 02d2 C1EF15   		shrl	$21, %edi
 526              	.LVL67:
 244:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 527              		.loc 1 244 0
 528 02d5 C1E810   		shrl	$16, %eax
 529              	.LVL68:
 246:src/vm2.c     **** 						RF[rd] = RF[rs] ^ RF[rt];    
 530              		.loc 1 246 0
 531 02d8 83E71F   		andl	$31, %edi
 245:src/vm2.c     **** 						RF[rd] = RF[rs] ^ RF[rt];    
 532              		.loc 1 245 0
 533 02db C1EA0B   		shrl	$11, %edx
 534              	.LVL69:
 535              		.loc 1 246 0
 536 02de 83E01F   		andl	$31, %eax
 537 02e1 83E21F   		andl	$31, %edx
 538 02e4 8B048500 		movl	RF(,%rax,4), %eax
 538      000000
 539 02eb 3304BD00 		xorl	RF(,%rdi,4), %eax
 539      000000
 540              	.LVL70:
GAS LISTING /tmp/cc15eBE3.s 			page 19


 541              	.L99:
 542 02f2 89049500 		movl	%eax, RF(,%rdx,4)
 542      000000
 543 02f9 E9730500 		jmp	.L92
 543      00
 544              	.LVL71:
 545              	.L65:
 247:src/vm2.c     **** 						PC  =  nPC;
 248:src/vm2.c     **** 						nPC  += 4;
 249:src/vm2.c     **** 						break;
 250:src/vm2.c     **** 					}
 251:src/vm2.c     **** 					case 0b101010: { // slt		101010	ArithLog	$d = ($s < $t)
 252:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 253:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 254:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 255:src/vm2.c     **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 256:src/vm2.c     **** 						PC  =  nPC;
 257:src/vm2.c     **** 						nPC  += 4;
 258:src/vm2.c     **** 						break;
 259:src/vm2.c     **** 					}
 260:src/vm2.c     **** 					case 0b101011: { // sltu	101011	ArithLog	$d = ($s < $t)
 261:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 546              		.loc 1 261 0
 547 02fe 89FA     		movl	%edi, %edx
 262:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 263:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 548              		.loc 1 263 0
 549 0300 89F8     		movl	%edi, %eax
 262:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 550              		.loc 1 262 0
 551 0302 C1EF10   		shrl	$16, %edi
 552              	.LVL72:
 261:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 553              		.loc 1 261 0
 554 0305 C1EA15   		shrl	$21, %edx
 555              		.loc 1 263 0
 556 0308 C1E80B   		shrl	$11, %eax
 557              	.LVL73:
 264:src/vm2.c     **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 558              		.loc 1 264 0
 559 030b 83E71F   		andl	$31, %edi
 560 030e 83E21F   		andl	$31, %edx
 561 0311 83E01F   		andl	$31, %eax
 562 0314 8B34BD00 		movl	RF(,%rdi,4), %esi
 562      000000
 563 031b 39349500 		cmpl	%esi, RF(,%rdx,4)
 563      000000
 564 0322 E94D0100 		jmp	.L106
 564      00
 565              	.LVL74:
 566              	.L44:
 265:src/vm2.c     **** 						PC  =  nPC;
 266:src/vm2.c     **** 						nPC  += 4;
 267:src/vm2.c     **** 						break;
 268:src/vm2.c     **** 					}
 269:src/vm2.c     **** 					case 0b001001: { // jalr	001001	JumpR		$31 = pc; pc = $s
 270:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 20


 271:src/vm2.c     **** 						RF[31] = PC+8;
 567              		.loc 1 271 0
 568 0327 83C108   		addl	$8, %ecx
 569 032a 890D0000 		movl	%ecx, RF+124(%rip)
 569      0000
 570              	.LVL75:
 571              	.L43:
 272:src/vm2.c     **** 						PC = nPC;
 273:src/vm2.c     **** 						nPC = RF[rs];
 274:src/vm2.c     **** 						//continue;
 275:src/vm2.c     **** 						break;
 276:src/vm2.c     **** 					}
 277:src/vm2.c     **** 					case 0b001000: { // jr		001000	JumpR		pc = $s 
 278:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 279:src/vm2.c     **** 						PC = nPC;
 572              		.loc 1 279 0
 573 0330 8B050000 		movl	nPC(%rip), %eax
 573      0000
 278:src/vm2.c     **** 						PC = nPC;
 574              		.loc 1 278 0
 575 0336 C1EF15   		shrl	$21, %edi
 576              	.LVL76:
 280:src/vm2.c     **** 						nPC = RF[rs];
 577              		.loc 1 280 0
 578 0339 83E71F   		andl	$31, %edi
 279:src/vm2.c     **** 						nPC = RF[rs];
 579              		.loc 1 279 0
 580 033c 89050000 		movl	%eax, PC(%rip)
 580      0000
 581              	.LVL77:
 582              		.loc 1 280 0
 583 0342 8B04BD00 		movl	RF(,%rdi,4), %eax
 583      000000
 584 0349 E9320500 		jmp	.L95
 584      00
 585              	.LVL78:
 586              	.L48:
 281:src/vm2.c     **** 						//continue;
 282:src/vm2.c     **** 						break;
 283:src/vm2.c     **** 					}
 284:src/vm2.c     **** 					case 0b010000: { // mfhi	010000	MoveFrom	$d = hi
 285:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 587              		.loc 1 285 0
 588 034e C1EF0B   		shrl	$11, %edi
 589              	.LVL79:
 286:src/vm2.c     **** 						RF[rd] = HI;
 590              		.loc 1 286 0
 591 0351 83E71F   		andl	$31, %edi
 592 0354 44892CBD 		movl	%r13d, RF(,%rdi,4)
 592      00000000 
 593 035c E9100500 		jmp	.L92
 593      00
 594              	.LVL80:
 595              	.L50:
 287:src/vm2.c     **** 						PC  =  nPC;
 288:src/vm2.c     **** 						nPC  += 4;
 289:src/vm2.c     **** 						break;
GAS LISTING /tmp/cc15eBE3.s 			page 21


 290:src/vm2.c     **** 					}
 291:src/vm2.c     **** 					case 0b010010: { // mflo	010010	MoveFrom	$d = lo
 292:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 596              		.loc 1 292 0
 597 0361 C1EF0B   		shrl	$11, %edi
 598              	.LVL81:
 293:src/vm2.c     **** 						RF[rd] = LO;
 599              		.loc 1 293 0
 600 0364 83E71F   		andl	$31, %edi
 601 0367 891CBD00 		movl	%ebx, RF(,%rdi,4)
 601      000000
 602 036e E9FE0400 		jmp	.L92
 602      00
 603              	.LVL82:
 604              	.L49:
 294:src/vm2.c     **** 						PC  =  nPC;
 295:src/vm2.c     **** 						nPC  += 4;
 296:src/vm2.c     **** 						break;
 297:src/vm2.c     **** 					}
 298:src/vm2.c     **** 					case 0b010001: { // mthi	010001	MoveTo		hi = $s
 299:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 605              		.loc 1 299 0
 606 0373 C1EF15   		shrl	$21, %edi
 607              	.LVL83:
 300:src/vm2.c     **** 						HI = RF[rs];
 608              		.loc 1 300 0
 609 0376 83E71F   		andl	$31, %edi
 610 0379 448B2CBD 		movl	RF(,%rdi,4), %r13d
 610      00000000 
 611              	.LVL84:
 612 0381 E9EB0400 		jmp	.L92
 612      00
 613              	.LVL85:
 614              	.L51:
 301:src/vm2.c     **** 						PC  =  nPC;
 302:src/vm2.c     **** 						nPC  += 4;
 303:src/vm2.c     **** 						break;
 304:src/vm2.c     **** 					}
 305:src/vm2.c     **** 					case 0b010011: { // mtlo	010011	MoveTo		lo = $s
 306:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 615              		.loc 1 306 0
 616 0386 C1EF15   		shrl	$21, %edi
 617              	.LVL86:
 307:src/vm2.c     **** 						LO = RF[rs];
 618              		.loc 1 307 0
 619 0389 83E71F   		andl	$31, %edi
 620 038c 8B1CBD00 		movl	RF(,%rdi,4), %ebx
 620      000000
 621              	.LVL87:
 622 0393 E9D90400 		jmp	.L92
 622      00
 623              	.LVL88:
 624              	.L47:
 625 0398 0FB63D00 		movzbl	RF+8(%rip), %edi
 625      000000
 626              	.LVL89:
 308:src/vm2.c     **** 						PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 22


 309:src/vm2.c     **** 						nPC  += 4;
 310:src/vm2.c     **** 						break;
 311:src/vm2.c     **** 					}
 312:src/vm2.c     **** 					case 0b001100: { // syscall 	001100	syscall		$2		seen on the .s generated by the ecc compiler
 313:src/vm2.c     **** 						if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respec
 627              		.loc 1 313 0
 628 039f E8000000 		call	syscall
 628      00
 629              	.LVL90:
 314:src/vm2.c     **** 						{
 315:src/vm2.c     **** 							halted = 1; //Syscall returned 1, exit code
 316:src/vm2.c     **** 						}
 317:src/vm2.c     **** 						PC  =  nPC;
 630              		.loc 1 317 0
 631 03a4 8B150000 		movl	nPC(%rip), %edx
 631      0000
 632 03aa 89150000 		movl	%edx, PC(%rip)
 632      0000
 318:src/vm2.c     **** 						nPC  += 4;
 633              		.loc 1 318 0
 634 03b0 83C204   		addl	$4, %edx
  47:src/vm2.c     **** 	{
 635              		.loc 1 47 0
 636 03b3 84C0     		testb	%al, %al
 637              		.loc 1 318 0
 638 03b5 89150000 		movl	%edx, nPC(%rip)
 638      0000
  47:src/vm2.c     **** 	{
 639              		.loc 1 47 0
 640 03bb 0F85CA04 		jne	.L90
 640      0000
 641 03c1 E970FCFF 		jmp	.L2
 641      FF
 642              	.LVL91:
 643              	.L15:
 319:src/vm2.c     **** 						break; 
 320:src/vm2.c     **** 					}	
 321:src/vm2.c     **** 					default:
 322:src/vm2.c     **** 					{
 323:src/vm2.c     **** 		#if PRINTING
 324:src/vm2.c     **** 						if (instr != 0)	printf("\n(ERROR)Invalid instruction %x at PC: %x\n",instr, PC);
 325:src/vm2.c     **** 		#endif
 326:src/vm2.c     **** 					}
 327:src/vm2.c     **** 					break;
 328:src/vm2.c     **** 				}      
 329:src/vm2.c     **** 				break; // case 0x0
 330:src/vm2.c     **** 			}
 331:src/vm2.c     **** 			
 332:src/vm2.c     **** 			//Immediate encoding
 333:src/vm2.c     **** 			case 0b001000: { //addi    001000  ArithLogI       $t = $s + SE(i)
 334:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 335:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 336:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 337:src/vm2.c     **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
 338:src/vm2.c     **** 				PC  =  nPC;
 339:src/vm2.c     **** 				nPC  += 4;
 340:src/vm2.c     **** 				break;
GAS LISTING /tmp/cc15eBE3.s 			page 23


 341:src/vm2.c     **** 			}
 342:src/vm2.c     **** 			case 0b001001: { //addiu   001001  ArithLogI       $t = $s + SE(i)
 343:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 644              		.loc 1 343 0
 645 03c6 89FA     		movl	%edi, %edx
 344:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 646              		.loc 1 344 0
 647 03c8 89F8     		movl	%edi, %eax
 345:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 346:src/vm2.c     **** 				RF[rt] = (RF[rs] + immediate);
 648              		.loc 1 346 0
 649 03ca 0FBFFF   		movswl	%di, %edi
 650              	.LVL92:
 343:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 651              		.loc 1 343 0
 652 03cd C1EA15   		shrl	$21, %edx
 344:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 653              		.loc 1 344 0
 654 03d0 C1E810   		shrl	$16, %eax
 655              	.LVL93:
 656              		.loc 1 346 0
 657 03d3 83E21F   		andl	$31, %edx
 658 03d6 83E01F   		andl	$31, %eax
 659 03d9 033C9500 		addl	RF(,%rdx,4), %edi
 659      000000
 660              	.LVL94:
 661 03e0 EB6C     		jmp	.L101
 662              	.LVL95:
 663              	.L18:
 347:src/vm2.c     **** 				PC  =  nPC;
 348:src/vm2.c     **** 				nPC  += 4;
 349:src/vm2.c     **** 				break;
 350:src/vm2.c     **** 			}
 351:src/vm2.c     **** 			case 0b001100: { //andi    001100  ArithLogI       $t = $s & ZE(i)
 352:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 664              		.loc 1 352 0
 665 03e2 89FA     		movl	%edi, %edx
 353:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 666              		.loc 1 353 0
 667 03e4 89F8     		movl	%edi, %eax
 354:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 355:src/vm2.c     **** 				RF[rt] = RF[rs] & (uint32_t)immediate;
 668              		.loc 1 355 0
 669 03e6 0FBFFF   		movswl	%di, %edi
 670              	.LVL96:
 352:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 671              		.loc 1 352 0
 672 03e9 C1EA15   		shrl	$21, %edx
 353:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 673              		.loc 1 353 0
 674 03ec C1E810   		shrl	$16, %eax
 675              	.LVL97:
 676              		.loc 1 355 0
 677 03ef 83E21F   		andl	$31, %edx
 678 03f2 83E01F   		andl	$31, %eax
 679 03f5 233C9500 		andl	RF(,%rdx,4), %edi
 679      000000
GAS LISTING /tmp/cc15eBE3.s 			page 24


 680              	.LVL98:
 681 03fc EB50     		jmp	.L101
 682              	.LVL99:
 683              	.L19:
 356:src/vm2.c     **** 				PC  =  nPC;
 357:src/vm2.c     **** 				nPC  += 4;
 358:src/vm2.c     **** 				break;
 359:src/vm2.c     **** 			}
 360:src/vm2.c     **** 			case 0b001101: { //ori     001101  ArithLogI       $t = $s | ZE(i)
 361:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 684              		.loc 1 361 0
 685 03fe 89FA     		movl	%edi, %edx
 362:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 686              		.loc 1 362 0
 687 0400 89F8     		movl	%edi, %eax
 363:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 364:src/vm2.c     **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
 688              		.loc 1 364 0
 689 0402 0FBFFF   		movswl	%di, %edi
 690              	.LVL100:
 361:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 691              		.loc 1 361 0
 692 0405 C1EA15   		shrl	$21, %edx
 362:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 693              		.loc 1 362 0
 694 0408 C1E810   		shrl	$16, %eax
 695              	.LVL101:
 696              		.loc 1 364 0
 697 040b 83E21F   		andl	$31, %edx
 698 040e 83E01F   		andl	$31, %eax
 699 0411 0B3C9500 		orl	RF(,%rdx,4), %edi
 699      000000
 700              	.LVL102:
 701 0418 EB34     		jmp	.L101
 702              	.LVL103:
 703              	.L20:
 365:src/vm2.c     **** 				PC  =  nPC;
 366:src/vm2.c     **** 				nPC  += 4;
 367:src/vm2.c     **** 				break;
 368:src/vm2.c     **** 			}
 369:src/vm2.c     **** 			case 0b001110: { //xori    001110  ArithLogI       $d = $s ^ ZE(i)
 370:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 704              		.loc 1 370 0
 705 041a 89FA     		movl	%edi, %edx
 371:src/vm2.c     **** 				rd = (instr >> 11) & 0x1F;
 706              		.loc 1 371 0
 707 041c 89F8     		movl	%edi, %eax
 372:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 373:src/vm2.c     **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
 708              		.loc 1 373 0
 709 041e 0FBFFF   		movswl	%di, %edi
 710              	.LVL104:
 370:src/vm2.c     **** 				rd = (instr >> 11) & 0x1F;
 711              		.loc 1 370 0
 712 0421 C1EA15   		shrl	$21, %edx
 371:src/vm2.c     **** 				rd = (instr >> 11) & 0x1F;
 713              		.loc 1 371 0
GAS LISTING /tmp/cc15eBE3.s 			page 25


 714 0424 C1E80B   		shrl	$11, %eax
 715              	.LVL105:
 716              		.loc 1 373 0
 717 0427 83E21F   		andl	$31, %edx
 718 042a 83E01F   		andl	$31, %eax
 719 042d 333C9500 		xorl	RF(,%rdx,4), %edi
 719      000000
 720              	.LVL106:
 721 0434 EB18     		jmp	.L101
 722              	.LVL107:
 723              	.L21:
 374:src/vm2.c     **** 				PC  =  nPC;
 375:src/vm2.c     **** 				nPC  += 4;
 376:src/vm2.c     **** 				break;
 377:src/vm2.c     **** 			}
 378:src/vm2.c     **** 			case 0b001111: 	 //lui	   001111          Rdest, imm: Load Upper Immediate
 379:src/vm2.c     **** 			case 0b011001: { //lhi     011001  LoadI   HH ($t) = i 
 380:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 724              		.loc 1 380 0
 725 0436 89F8     		movl	%edi, %eax
 381:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 382:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 726              		.loc 1 382 0
 727 0438 C1E710   		sall	$16, %edi
 728              	.LVL108:
 380:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 729              		.loc 1 380 0
 730 043b C1E810   		shrl	$16, %eax
 731              	.LVL109:
 732              		.loc 1 382 0
 733 043e 83E01F   		andl	$31, %eax
 734 0441 EB0B     		jmp	.L101
 735              	.LVL110:
 736              	.L22:
 383:src/vm2.c     **** 				PC  =  nPC;
 384:src/vm2.c     **** 				nPC  += 4;
 385:src/vm2.c     **** 				break;
 386:src/vm2.c     **** 			}
 387:src/vm2.c     **** 			case 0b011000: { //llo     011000  LoadI   LH ($t) = i
 388:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 737              		.loc 1 388 0
 738 0443 89F8     		movl	%edi, %eax
 389:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 390:src/vm2.c     **** 			  	RF[rt] = immediate;
 739              		.loc 1 390 0
 740 0445 0FBFFF   		movswl	%di, %edi
 741              	.LVL111:
 388:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 742              		.loc 1 388 0
 743 0448 C1E810   		shrl	$16, %eax
 744              	.LVL112:
 745              		.loc 1 390 0
 746 044b 83E01F   		andl	$31, %eax
 747              	.LVL113:
 748              	.L101:
 749 044e 893C8500 		movl	%edi, RF(,%rax,4)
 749      000000
GAS LISTING /tmp/cc15eBE3.s 			page 26


 750 0455 E9170400 		jmp	.L92
 750      00
 751              	.LVL114:
 752              	.L17:
 391:src/vm2.c     **** 				PC  =  nPC;
 392:src/vm2.c     **** 				nPC  += 4;
 393:src/vm2.c     **** 				break;
 394:src/vm2.c     **** 			}
 395:src/vm2.c     **** 			case 0b001010: { //slti    001010  ArithLogI       $t = ($s < SE(i))
 396:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 397:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 398:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 399:src/vm2.c     **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
 400:src/vm2.c     **** 				PC  =  nPC;
 401:src/vm2.c     **** 				nPC  += 4;
 402:src/vm2.c     **** 				break;
 403:src/vm2.c     **** 			}
 404:src/vm2.c     **** 			case 0b001011: { //sltiu   001011  ArithLogI       $t = ($s < SE(i)) 
 405:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 753              		.loc 1 405 0
 754 045a 89FA     		movl	%edi, %edx
 406:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 755              		.loc 1 406 0
 756 045c 89F8     		movl	%edi, %eax
 407:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 408:src/vm2.c     **** 				RF[rt] = (RF[rs] < immediate)?1:0;
 757              		.loc 1 408 0
 758 045e 0FBFFF   		movswl	%di, %edi
 759              	.LVL115:
 405:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 760              		.loc 1 405 0
 761 0461 C1EA15   		shrl	$21, %edx
 406:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 762              		.loc 1 406 0
 763 0464 C1E810   		shrl	$16, %eax
 764              	.LVL116:
 765              		.loc 1 408 0
 766 0467 83E21F   		andl	$31, %edx
 767 046a 83E01F   		andl	$31, %eax
 768 046d 393C9500 		cmpl	%edi, RF(,%rdx,4)
 768      000000
 769              	.LVL117:
 770              	.L106:
 771 0474 0F92C2   		setb	%dl
 772 0477 0FB6D2   		movzbl	%dl, %edx
 773 047a E9A30100 		jmp	.L100
 773      00
 774              	.LVL118:
 775              	.L7:
 409:src/vm2.c     **** 				PC  =  nPC;
 410:src/vm2.c     **** 				nPC  += 4;
 411:src/vm2.c     **** 				break;
 412:src/vm2.c     **** 			}
 413:src/vm2.c     **** 			case 0b000001: {
 414:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 776              		.loc 1 414 0
 777 047f 89F8     		movl	%edi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 27


 778 0481 C1E810   		shrl	$16, %eax
 415:src/vm2.c     **** 				if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
 779              		.loc 1 415 0
 780 0484 83E01F   		andl	$31, %eax
 781 0487 8B048500 		movl	RF(,%rax,4), %eax
 781      000000
 782 048e 83F801   		cmpl	$1, %eax
 783 0491 7521     		jne	.L72
 784              	.LVL119:
 416:src/vm2.c     **** 				{
 417:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 785              		.loc 1 417 0
 786 0493 89F8     		movl	%edi, %eax
 787 0495 C1E815   		shrl	$21, %eax
 418:src/vm2.c     **** 					if ((int32_t)RF[rs] >= 0)
 788              		.loc 1 418 0
 789 0498 83E01F   		andl	$31, %eax
 790 049b 833C8500 		cmpl	$0, RF(,%rax,4)
 790      00000000 
 791 04a3 8B050000 		movl	nPC(%rip), %eax
 791      0000
 792 04a9 0F891001 		jns	.L102
 792      0000
 793 04af E9C30300 		jmp	.L94
 793      00
 794              	.LVL120:
 795              	.L72:
 419:src/vm2.c     **** 					{
 420:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;	
 421:src/vm2.c     **** 						PC  =  nPC;
 422:src/vm2.c     **** 						nPC  += (immediate << 2);
 423:src/vm2.c     **** 						//advance_pc(immediate << 2);
 424:src/vm2.c     **** 						//continue;
 425:src/vm2.c     **** 						break;
 426:src/vm2.c     **** 					}
 427:src/vm2.c     **** 					else
 428:src/vm2.c     **** 					{
 429:src/vm2.c     **** 						PC  =  nPC;
 430:src/vm2.c     **** 						nPC  += 4;
 431:src/vm2.c     **** 						break;
 432:src/vm2.c     **** 					}
 433:src/vm2.c     **** 				}
 434:src/vm2.c     **** 				else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
 796              		.loc 1 434 0
 797 04b4 83F811   		cmpl	$17, %eax
 798 04b7 751D     		jne	.L74
 799              	.LVL121:
 435:src/vm2.c     **** 				{
 436:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 800              		.loc 1 436 0
 801 04b9 89F8     		movl	%edi, %eax
 802 04bb C1E815   		shrl	$21, %eax
 437:src/vm2.c     **** 					if ((int32_t)RF[rs] >= 0)
 803              		.loc 1 437 0
 804 04be 83E01F   		andl	$31, %eax
 805 04c1 833C8500 		cmpl	$0, RF(,%rax,4)
 805      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 28


 806 04c9 8B050000 		movl	nPC(%rip), %eax
 806      0000
 807 04cf 794F     		jns	.L105
 808 04d1 E9A10300 		jmp	.L94
 808      00
 809              	.LVL122:
 810              	.L74:
 438:src/vm2.c     **** 					{
 439:src/vm2.c     **** 						RF[31] = PC + 8;
 440:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;
 441:src/vm2.c     **** 						PC  =  nPC;
 442:src/vm2.c     **** 						nPC  += (immediate << 2);
 443:src/vm2.c     **** 						//advance_pc(immediate << 2);
 444:src/vm2.c     **** 						//continue;
 445:src/vm2.c     **** 						break;
 446:src/vm2.c     **** 					}
 447:src/vm2.c     **** 					else
 448:src/vm2.c     **** 					{
 449:src/vm2.c     **** 						PC  =  nPC;
 450:src/vm2.c     **** 						nPC  += 4;
 451:src/vm2.c     **** 						break;
 452:src/vm2.c     **** 					}
 453:src/vm2.c     **** 				}
 454:src/vm2.c     **** 				else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
 811              		.loc 1 454 0
 812 04d6 85C0     		testl	%eax, %eax
 813 04d8 7521     		jne	.L76
 814              	.LVL123:
 455:src/vm2.c     **** 				{
 456:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 815              		.loc 1 456 0
 816 04da 89F8     		movl	%edi, %eax
 817 04dc C1E815   		shrl	$21, %eax
 457:src/vm2.c     **** 					if ((int32_t)RF[rs] < 0)
 818              		.loc 1 457 0
 819 04df 83E01F   		andl	$31, %eax
 820 04e2 833C8500 		cmpl	$0, RF(,%rax,4)
 820      00000000 
 821 04ea 8B050000 		movl	nPC(%rip), %eax
 821      0000
 822 04f0 0F898103 		jns	.L94
 822      0000
 823 04f6 E9C40000 		jmp	.L102
 823      00
 824              	.LVL124:
 825              	.L76:
 458:src/vm2.c     **** 					{
 459:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;
 460:src/vm2.c     **** 						PC  =  nPC;
 461:src/vm2.c     **** 						nPC  += (immediate << 2);
 462:src/vm2.c     **** 						//advance_pc(immediate << 2);
 463:src/vm2.c     **** 						//continue;
 464:src/vm2.c     **** 						break;
 465:src/vm2.c     **** 					}
 466:src/vm2.c     **** 					else
 467:src/vm2.c     **** 					{
 468:src/vm2.c     **** 						PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 29


 469:src/vm2.c     **** 						nPC  += 4;
 470:src/vm2.c     **** 						break;
 471:src/vm2.c     **** 					}
 472:src/vm2.c     **** 				}
 473:src/vm2.c     **** 				else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
 826              		.loc 1 473 0
 827 04fb 83F810   		cmpl	$16, %eax
 828 04fe 0F8532FB 		jne	.L2
 828      FFFF
 829              	.LVL125:
 474:src/vm2.c     **** 				{
 475:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 830              		.loc 1 475 0
 831 0504 89F8     		movl	%edi, %eax
 832 0506 C1E815   		shrl	$21, %eax
 476:src/vm2.c     **** 					if ((int32_t)RF[rs] < 0)
 833              		.loc 1 476 0
 834 0509 83E01F   		andl	$31, %eax
 835 050c 833C8500 		cmpl	$0, RF(,%rax,4)
 835      00000000 
 836 0514 8B050000 		movl	nPC(%rip), %eax
 836      0000
 837 051a 0F895703 		jns	.L94
 837      0000
 838              	.LVL126:
 839              	.L105:
 477:src/vm2.c     **** 					{
 478:src/vm2.c     **** 						RF[31] = PC + 8;
 840              		.loc 1 478 0
 841 0520 83C108   		addl	$8, %ecx
 842 0523 890D0000 		movl	%ecx, RF+124(%rip)
 842      0000
 843              	.LVL127:
 844 0529 E9910000 		jmp	.L102
 844      00
 845              	.LVL128:
 846              	.L10:
 479:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;
 480:src/vm2.c     **** 						PC  =  nPC;
 481:src/vm2.c     **** 						nPC  += (immediate << 2);
 482:src/vm2.c     **** 						//advance_pc(immediate << 2);
 483:src/vm2.c     **** 						//continue;
 484:src/vm2.c     **** 						break;
 485:src/vm2.c     **** 					}
 486:src/vm2.c     **** 					else
 487:src/vm2.c     **** 					{
 488:src/vm2.c     **** 						PC  =  nPC;
 489:src/vm2.c     **** 						nPC  += 4;
 490:src/vm2.c     **** 						break;
 491:src/vm2.c     **** 					}
 492:src/vm2.c     **** 				}
 493:src/vm2.c     **** 				break;
 494:src/vm2.c     **** 			}
 495:src/vm2.c     **** 			case 0b000100: { //beq     000100  Branch  if ($s == $t) pc += i << 2
 496:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 847              		.loc 1 496 0
 848 052e 89FA     		movl	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 30


 497:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 849              		.loc 1 497 0
 850 0530 89F8     		movl	%edi, %eax
 496:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 851              		.loc 1 496 0
 852 0532 C1EA15   		shrl	$21, %edx
 853              		.loc 1 497 0
 854 0535 C1E810   		shrl	$16, %eax
 498:src/vm2.c     **** 				if (RF[rs] == RF[rt])
 855              		.loc 1 498 0
 856 0538 83E01F   		andl	$31, %eax
 857 053b 83E21F   		andl	$31, %edx
 858 053e 8B048500 		movl	RF(,%rax,4), %eax
 858      000000
 859 0545 39049500 		cmpl	%eax, RF(,%rdx,4)
 859      000000
 860 054c 8B050000 		movl	nPC(%rip), %eax
 860      0000
 861 0552 0F851F03 		jne	.L94
 861      0000
 862 0558 EB65     		jmp	.L102
 863              	.LVL129:
 864              	.L13:
 499:src/vm2.c     **** 				{
 500:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
 501:src/vm2.c     **** 					PC  =  nPC;
 502:src/vm2.c     **** 					nPC  += (immediate << 2);
 503:src/vm2.c     **** 					//advance_pc(immediate << 2);
 504:src/vm2.c     **** 					//continue;
 505:src/vm2.c     **** 					break;
 506:src/vm2.c     **** 				}
 507:src/vm2.c     **** 				else
 508:src/vm2.c     **** 				{
 509:src/vm2.c     **** 					PC  =  nPC;
 510:src/vm2.c     **** 					nPC  += 4;
 511:src/vm2.c     **** 					break;
 512:src/vm2.c     **** 				}
 513:src/vm2.c     **** 				break;
 514:src/vm2.c     **** 			}
 515:src/vm2.c     **** 			case 0b000111: { //bgtz    000111  BranchZ if ($s > 0) pc += i << 2
 516:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 865              		.loc 1 516 0
 866 055a 89F8     		movl	%edi, %eax
 867 055c C1E815   		shrl	$21, %eax
 517:src/vm2.c     **** 				if ((int32_t)RF[rs] > 0)
 868              		.loc 1 517 0
 869 055f 83E01F   		andl	$31, %eax
 870 0562 833C8500 		cmpl	$0, RF(,%rax,4)
 870      00000000 
 871 056a 8B050000 		movl	nPC(%rip), %eax
 871      0000
 872 0570 7F4D     		jg	.L102
 873 0572 E9000300 		jmp	.L94
 873      00
 874              	.LVL130:
 875              	.L12:
 518:src/vm2.c     **** 				{
GAS LISTING /tmp/cc15eBE3.s 			page 31


 519:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
 520:src/vm2.c     **** 					PC  =  nPC;
 521:src/vm2.c     **** 					nPC  += (immediate << 2);
 522:src/vm2.c     **** 					//advance_pc(immediate << 2);
 523:src/vm2.c     **** 					//continue;
 524:src/vm2.c     **** 					break;
 525:src/vm2.c     **** 				}
 526:src/vm2.c     **** 				else
 527:src/vm2.c     **** 				{
 528:src/vm2.c     **** 					PC  =  nPC;
 529:src/vm2.c     **** 					nPC  += 4;
 530:src/vm2.c     **** 					break;
 531:src/vm2.c     **** 				}
 532:src/vm2.c     **** 				break;
 533:src/vm2.c     **** 			}
 534:src/vm2.c     **** 			case 0b000110: { //blez    000110  BranchZ if ($s <= 0) pc += i << 2
 535:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 876              		.loc 1 535 0
 877 0577 89F8     		movl	%edi, %eax
 878 0579 C1E815   		shrl	$21, %eax
 536:src/vm2.c     **** 				if ((int32_t)RF[rs] <= 0)
 879              		.loc 1 536 0
 880 057c 83E01F   		andl	$31, %eax
 881 057f 833C8500 		cmpl	$0, RF(,%rax,4)
 881      00000000 
 882 0587 8B050000 		movl	nPC(%rip), %eax
 882      0000
 883 058d 0F8FE402 		jg	.L94
 883      0000
 884 0593 EB2A     		jmp	.L102
 885              	.LVL131:
 886              	.L11:
 537:src/vm2.c     **** 				{
 538:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
 539:src/vm2.c     **** 					PC  =  nPC;
 540:src/vm2.c     **** 					nPC  += (immediate << 2);
 541:src/vm2.c     **** 					//advance_pc(immediate << 2);
 542:src/vm2.c     **** 					//continue;
 543:src/vm2.c     **** 					break;
 544:src/vm2.c     **** 				}
 545:src/vm2.c     **** 				else
 546:src/vm2.c     **** 				{
 547:src/vm2.c     **** 					PC  =  nPC;
 548:src/vm2.c     **** 					nPC  += 4;
 549:src/vm2.c     **** 					break;
 550:src/vm2.c     **** 				}
 551:src/vm2.c     **** 				break;
 552:src/vm2.c     **** 			}
 553:src/vm2.c     **** 			case 0b000101: { //bne     000101  Branch  if ($s != $t) pc += i << 2
 554:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 887              		.loc 1 554 0
 888 0595 89FA     		movl	%edi, %edx
 555:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 889              		.loc 1 555 0
 890 0597 89F8     		movl	%edi, %eax
 554:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 891              		.loc 1 554 0
GAS LISTING /tmp/cc15eBE3.s 			page 32


 892 0599 C1EA15   		shrl	$21, %edx
 893              		.loc 1 555 0
 894 059c C1E810   		shrl	$16, %eax
 556:src/vm2.c     **** 				if (RF[rs] != RF[rt])
 895              		.loc 1 556 0
 896 059f 83E01F   		andl	$31, %eax
 897 05a2 83E21F   		andl	$31, %edx
 898 05a5 8B048500 		movl	RF(,%rax,4), %eax
 898      000000
 899 05ac 39049500 		cmpl	%eax, RF(,%rdx,4)
 899      000000
 900 05b3 8B050000 		movl	nPC(%rip), %eax
 900      0000
 901 05b9 0F84B802 		je	.L94
 901      0000
 902              	.LVL132:
 903              	.L102:
 557:src/vm2.c     **** 				{
 558:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
 559:src/vm2.c     **** 					PC  =  nPC;
 560:src/vm2.c     **** 					nPC  += (immediate << 2);
 904              		.loc 1 560 0
 905 05bf 0FBFFF   		movswl	%di, %edi
 906              	.LVL133:
 559:src/vm2.c     **** 					nPC  += (immediate << 2);
 907              		.loc 1 559 0
 908 05c2 89050000 		movl	%eax, PC(%rip)
 908      0000
 909              	.LVL134:
 910              		.loc 1 560 0
 911 05c8 8D04B8   		leal	(%rax,%rdi,4), %eax
 912 05cb E9B00200 		jmp	.L95
 912      00
 913              	.LVL135:
 914              	.L24:
 561:src/vm2.c     **** 					//advance_pc(immediate << 2);
 562:src/vm2.c     **** 					//continue;
 563:src/vm2.c     **** 					break;
 564:src/vm2.c     **** 				}
 565:src/vm2.c     **** 				else
 566:src/vm2.c     **** 				{
 567:src/vm2.c     **** 					PC  =  nPC;
 568:src/vm2.c     **** 					nPC  += 4;
 569:src/vm2.c     **** 					break;
 570:src/vm2.c     **** 				}
 571:src/vm2.c     **** 				break;
 572:src/vm2.c     **** 			}
 573:src/vm2.c     **** 			case 0b100000: { //lb      100000  LoadStore       $t = SE (MEM [$s + i]:1)
 574:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 915              		.loc 1 574 0
 916 05d0 89FA     		movl	%edi, %edx
 575:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 576:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 577:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
 917              		.loc 1 577 0
 918 05d2 0FBFC7   		movswl	%di, %eax
 575:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 33


 919              		.loc 1 575 0
 920 05d5 C1EF10   		shrl	$16, %edi
 921              	.LVL136:
 574:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 922              		.loc 1 574 0
 923 05d8 C1EA15   		shrl	$21, %edx
 924              	.LVL137:
 925              		.loc 1 577 0
 926 05db 83E71F   		andl	$31, %edi
 927 05de 83E21F   		andl	$31, %edx
 928 05e1 03049500 		addl	RF(,%rdx,4), %eax
 928      000000
 929              	.LVL138:
 930 05e8 8A900000 		movb	VM_memory(%rax), %dl
 930      0000
 931 05ee 88D0     		movb	%dl, %al
 932 05f0 83E27F   		andl	$127, %edx
 933 05f3 83E080   		andl	$-128, %eax
 934 05f6 0FB6C0   		movzbl	%al, %eax
 935 05f9 C1E018   		sall	$24, %eax
 936 05fc E9540200 		jmp	.L96
 936      00
 937              	.LVL139:
 938              	.L28:
 578:src/vm2.c     **** 				PC  =  nPC;
 579:src/vm2.c     **** 				nPC  += 4;
 580:src/vm2.c     **** 				break;
 581:src/vm2.c     **** 			}
 582:src/vm2.c     **** 			case 0b100100: { //lbu     100100  LoadStore       $t = ZE (MEM [$s + i]:1)
 583:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 939              		.loc 1 583 0
 940 0601 89FA     		movl	%edi, %edx
 584:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 941              		.loc 1 584 0
 942 0603 89F8     		movl	%edi, %eax
 585:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 586:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 943              		.loc 1 586 0
 944 0605 0FBFFF   		movswl	%di, %edi
 945              	.LVL140:
 583:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 946              		.loc 1 583 0
 947 0608 C1EA15   		shrl	$21, %edx
 584:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 948              		.loc 1 584 0
 949 060b C1E810   		shrl	$16, %eax
 950              	.LVL141:
 951              		.loc 1 586 0
 952 060e 83E21F   		andl	$31, %edx
 953 0611 83E01F   		andl	$31, %eax
 954 0614 033C9500 		addl	RF(,%rdx,4), %edi
 954      000000
 955              	.LVL142:
 956 061b 0FB69700 		movzbl	VM_memory(%rdi), %edx
 956      000000
 957              	.LVL143:
 958              	.L100:
GAS LISTING /tmp/cc15eBE3.s 			page 34


 959 0622 89148500 		movl	%edx, RF(,%rax,4)
 959      000000
 960 0629 E9430200 		jmp	.L92
 960      00
 961              	.LVL144:
 962              	.L29:
 587:src/vm2.c     **** 				PC  =  nPC;
 588:src/vm2.c     **** 				nPC  += 4;
 589:src/vm2.c     **** 				break;
 590:src/vm2.c     **** 			}
 591:src/vm2.c     **** 			case 0b100001: { //lh      100001  LoadStore       $t = SE (MEM [$s + i]:2)
 592:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 593:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 594:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 595:src/vm2.c     **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
 596:src/vm2.c     **** 				PC  =  nPC;
 597:src/vm2.c     **** 				nPC  += 4;
 598:src/vm2.c     **** 				break;
 599:src/vm2.c     **** 			}
 600:src/vm2.c     **** 			case 0b100101: { //lhu     100101  LoadStore       $t = ZE (MEM [$s + i]:2)
 601:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 963              		.loc 1 601 0
 964 062e 89FA     		movl	%edi, %edx
 602:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 603:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 604:src/vm2.c     **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
 965              		.loc 1 604 0
 966 0630 0FBFC7   		movswl	%di, %eax
 602:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 967              		.loc 1 602 0
 968 0633 C1EF10   		shrl	$16, %edi
 969              	.LVL145:
 601:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 970              		.loc 1 601 0
 971 0636 C1EA15   		shrl	$21, %edx
 972              	.LVL146:
 973              		.loc 1 604 0
 974 0639 83E71F   		andl	$31, %edi
 975 063c 83E21F   		andl	$31, %edx
 976 063f 03049500 		addl	RF(,%rdx,4), %eax
 976      000000
 977              	.LVL147:
 978 0646 FFC0     		incl	%eax
 979 0648 0FB68000 		movzbl	VM_memory(%rax), %eax
 979      000000
 980 064f E9030200 		jmp	.L97
 980      00
 981              	.LVL148:
 982              	.L27:
 605:src/vm2.c     **** 				PC  =  nPC;
 606:src/vm2.c     **** 				nPC  += 4;
 607:src/vm2.c     **** 				break;
 608:src/vm2.c     **** 			}
 609:src/vm2.c     **** 			case 0b100011: { //lw      100011  LoadStore       $t = MEM [$s + i]:4
 610:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 983              		.loc 1 610 0
 984 0654 89FA     		movl	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 35


 611:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 612:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 613:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 985              		.loc 1 613 0
 986 0656 0FBFC7   		movswl	%di, %eax
 611:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 987              		.loc 1 611 0
 988 0659 C1EF10   		shrl	$16, %edi
 989              	.LVL149:
 610:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 990              		.loc 1 610 0
 991 065c C1EA15   		shrl	$21, %edx
 992              	.LVL150:
 993              		.loc 1 613 0
 994 065f 83E71F   		andl	$31, %edi
 995 0662 83E21F   		andl	$31, %edx
 996 0665 03049500 		addl	RF(,%rdx,4), %eax
 996      000000
 997              	.LVL151:
 998 066c 8D5003   		leal	3(%rax), %edx
 999 066f 0FB68A00 		movzbl	VM_memory(%rdx), %ecx
 999      000000
 1000              	.LVL152:
 1001 0676 89C2     		movl	%eax, %edx
 1002 0678 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1002      000000
 1003 067f C1E218   		sall	$24, %edx
 1004 0682 09D1     		orl	%edx, %ecx
 1005 0684 8D5001   		leal	1(%rax), %edx
 1006 0687 83C002   		addl	$2, %eax
 1007 068a 0FB68000 		movzbl	VM_memory(%rax), %eax
 1007      000000
 1008 0691 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1008      000000
 1009 0698 C1E008   		sall	$8, %eax
 1010 069b C1E210   		sall	$16, %edx
 1011 069e 09D1     		orl	%edx, %ecx
 1012 06a0 09C1     		orl	%eax, %ecx
 1013 06a2 890CBD00 		movl	%ecx, RF(,%rdi,4)
 1013      000000
 1014 06a9 E9C30100 		jmp	.L92
 1014      00
 1015              	.LVL153:
 1016              	.L31:
 614:src/vm2.c     **** 				PC  =  nPC;
 615:src/vm2.c     **** 				nPC  += 4;
 616:src/vm2.c     **** 				break;
 617:src/vm2.c     **** 			}
 618:src/vm2.c     **** 			case 0b101000: { //sb      101000  LoadStore       MEM [$s + i]:1 = LB ($t)
 619:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1017              		.loc 1 619 0
 1018 06ae 89FA     		movl	%edi, %edx
 620:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 621:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 622:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 1019              		.loc 1 622 0
 1020 06b0 0FBFC7   		movswl	%di, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 36


 620:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1021              		.loc 1 620 0
 1022 06b3 C1EF10   		shrl	$16, %edi
 1023              	.LVL154:
 619:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1024              		.loc 1 619 0
 1025 06b6 C1EA15   		shrl	$21, %edx
 1026              	.LVL155:
 1027              		.loc 1 622 0
 1028 06b9 83E71F   		andl	$31, %edi
 1029 06bc 83E21F   		andl	$31, %edx
 1030 06bf 03049500 		addl	RF(,%rdx,4), %eax
 1030      000000
 1031              	.LVL156:
 1032 06c6 8B14BD00 		movl	RF(,%rdi,4), %edx
 1032      000000
 1033 06cd E9E90000 		jmp	.L98
 1033      00
 1034              	.LVL157:
 1035              	.L32:
 623:src/vm2.c     **** 				PC  =  nPC;
 624:src/vm2.c     **** 				nPC  += 4;
 625:src/vm2.c     **** 				break;
 626:src/vm2.c     **** 			}
 627:src/vm2.c     **** 			case 0b101001: { //sh      101001  LoadStore       MEM [$s + i]:2 = LH ($t)
 628:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1036              		.loc 1 628 0
 1037 06d2 89FA     		movl	%edi, %edx
 629:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 630:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 631:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 1038              		.loc 1 631 0
 1039 06d4 0FBFC7   		movswl	%di, %eax
 629:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1040              		.loc 1 629 0
 1041 06d7 C1EF10   		shrl	$16, %edi
 1042              	.LVL158:
 628:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1043              		.loc 1 628 0
 1044 06da C1EA15   		shrl	$21, %edx
 1045              	.LVL159:
 1046              		.loc 1 631 0
 1047 06dd 83E71F   		andl	$31, %edi
 1048 06e0 83E21F   		andl	$31, %edx
 1049 06e3 03049500 		addl	RF(,%rdx,4), %eax
 1049      000000
 1050              	.LVL160:
 1051 06ea 8B14BD00 		movl	RF(,%rdi,4), %edx
 1051      000000
 1052 06f1 0FB6F6   		movzbl	%dh, %esi
 1053 06f4 89C1     		movl	%eax, %ecx
 1054              	.LVL161:
 632:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 1055              		.loc 1 632 0
 1056 06f6 FFC0     		incl	%eax
 631:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 1057              		.loc 1 631 0
GAS LISTING /tmp/cc15eBE3.s 			page 37


 1058 06f8 4088B100 		movb	%sil, VM_memory(%rcx)
 1058      000000
 1059              	.LVL162:
 1060 06ff E9B70000 		jmp	.L98
 1060      00
 1061              	.LVL163:
 1062              	.L34:
 633:src/vm2.c     **** 				PC  =  nPC;
 634:src/vm2.c     **** 				nPC  += 4;
 635:src/vm2.c     **** 				break;
 636:src/vm2.c     **** 			}
 637:src/vm2.c     **** 			case 0b101011: { //sw      101011  LoadStore       MEM [$s + i]:4 = $t
 638:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1063              		.loc 1 638 0
 1064 0704 89FA     		movl	%edi, %edx
 639:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 640:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 641:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 1065              		.loc 1 641 0
 1066 0706 0FBFC7   		movswl	%di, %eax
 639:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1067              		.loc 1 639 0
 1068 0709 C1EF10   		shrl	$16, %edi
 1069              	.LVL164:
 638:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1070              		.loc 1 638 0
 1071 070c C1EA15   		shrl	$21, %edx
 1072              	.LVL165:
 1073              		.loc 1 641 0
 1074 070f 83E71F   		andl	$31, %edi
 1075 0712 83E21F   		andl	$31, %edx
 1076 0715 03049500 		addl	RF(,%rdx,4), %eax
 1076      000000
 1077              	.LVL166:
 1078 071c 8B14BD00 		movl	RF(,%rdi,4), %edx
 1078      000000
 1079 0723 89D6     		movl	%edx, %esi
 1080 0725 89C1     		movl	%eax, %ecx
 1081              	.LVL167:
 1082 0727 C1EE18   		shrl	$24, %esi
 1083 072a 4088B100 		movb	%sil, VM_memory(%rcx)
 1083      000000
 1084              	.LVL168:
 642:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1085              		.loc 1 642 0
 1086 0731 8D4801   		leal	1(%rax), %ecx
 1087 0734 89D6     		movl	%edx, %esi
 1088 0736 C1EE10   		shrl	$16, %esi
 1089 0739 4088B100 		movb	%sil, VM_memory(%rcx)
 1089      000000
 643:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 1090              		.loc 1 643 0
 1091 0740 8D4802   		leal	2(%rax), %ecx
 1092 0743 0FB6F6   		movzbl	%dh, %esi
 644:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 1093              		.loc 1 644 0
 1094 0746 83C003   		addl	$3, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 38


 643:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 1095              		.loc 1 643 0
 1096 0749 4088B100 		movb	%sil, VM_memory(%rcx)
 1096      000000
 1097 0750 EB69     		jmp	.L98
 1098              	.LVL169:
 1099              	.L9:
 645:src/vm2.c     **** 				PC  =  nPC;
 646:src/vm2.c     **** 				nPC  += 4;
 647:src/vm2.c     **** 				break;
 648:src/vm2.c     **** 			}
 649:src/vm2.c     **** 	
 650:src/vm2.c     **** 			//Jump encoding
 651:src/vm2.c     **** 			case 0b000010: { //j       000010  Jump    pc = i << 2
 652:src/vm2.c     **** 				PC = nPC;
 653:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
 654:src/vm2.c     **** 				nPC = address << 2;
 655:src/vm2.c     **** 				//continue;
 656:src/vm2.c     **** 				break;
 657:src/vm2.c     **** 			}
 658:src/vm2.c     **** 			case 0b000011: { //jal     000011  Jump    $31 = pc; pc = i << 2
 659:src/vm2.c     **** #if DEBUGING
 660:src/vm2.c     **** 				printf(">>RA:%x\tAddress:%x\n", RF[31], address<<2);
 661:src/vm2.c     **** #endif
 662:src/vm2.c     **** 				RF[31] = PC + 8;
 1100              		.loc 1 662 0
 1101 0752 83C108   		addl	$8, %ecx
 1102 0755 890D0000 		movl	%ecx, RF+124(%rip)
 1102      0000
 1103              	.L93:
 663:src/vm2.c     **** 				PC = nPC;
 1104              		.loc 1 663 0
 1105 075b 8B050000 		movl	nPC(%rip), %eax
 1105      0000
 664:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
 1106              		.loc 1 664 0
 1107 0761 81E7FFFF 		andl	$67108863, %edi
 1107      FF03
 1108              	.LVL170:
 665:src/vm2.c     **** 				nPC = address << 2;
 1109              		.loc 1 665 0
 1110 0767 C1E702   		sall	$2, %edi
 1111 076a 893D0000 		movl	%edi, nPC(%rip)
 1111      0000
 663:src/vm2.c     **** 				PC = nPC;
 1112              		.loc 1 663 0
 1113 0770 89050000 		movl	%eax, PC(%rip)
 1113      0000
 1114              	.LVL171:
 666:src/vm2.c     **** 				//continue;
 667:src/vm2.c     **** 				break;
 1115              		.loc 1 667 0
 1116 0776 E9BBF8FF 		jmp	.L2
 1116      FF
 1117              	.LVL172:
 1118              	.L23:
 1119 077b 400FB6FF 		movzbl	%dil, %edi
GAS LISTING /tmp/cc15eBE3.s 			page 39


 1120              	.LVL173:
 668:src/vm2.c     **** 			}
 669:src/vm2.c     **** 			case 0b011010: { //trap    011010  Trap    Dependent on operating system; different values for i
 670:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
 671:src/vm2.c     **** 				syscall((uint8_t)(address&0xFF));
 1121              		.loc 1 671 0
 1122 077f E8000000 		call	syscall
 1122      00
 1123              	.LVL174:
 1124 0784 E9E80000 		jmp	.L92
 1124      00
 1125              	.LVL175:
 1126              	.L33:
 672:src/vm2.c     **** 				PC  =  nPC;
 673:src/vm2.c     **** 				nPC  += 4;
 674:src/vm2.c     **** 				break;
 675:src/vm2.c     **** 			}	
 676:src/vm2.c     **** 			case 0b101010: { //swl Rsrc1, imm(Rsrc2): Store Word Left
 677:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1127              		.loc 1 677 0
 1128 0789 89FA     		movl	%edi, %edx
 678:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 679:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 680:src/vm2.c     **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 1129              		.loc 1 680 0
 1130 078b 0FBFC7   		movswl	%di, %eax
 678:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1131              		.loc 1 678 0
 1132 078e C1EF10   		shrl	$16, %edi
 1133              	.LVL176:
 677:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1134              		.loc 1 677 0
 1135 0791 C1EA15   		shrl	$21, %edx
 1136              	.LVL177:
 1137              		.loc 1 680 0
 1138 0794 83E71F   		andl	$31, %edi
 1139 0797 83E21F   		andl	$31, %edx
 1140 079a 03049500 		addl	RF(,%rdx,4), %eax
 1140      000000
 1141              	.LVL178:
 1142 07a1 8B14BD00 		movl	RF(,%rdi,4), %edx
 1142      000000
 1143 07a8 89D6     		movl	%edx, %esi
 681:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1144              		.loc 1 681 0
 1145 07aa C1EA10   		shrl	$16, %edx
 680:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1146              		.loc 1 680 0
 1147 07ad 89C1     		movl	%eax, %ecx
 1148              	.LVL179:
 1149 07af C1EE18   		shrl	$24, %esi
 1150              		.loc 1 681 0
 1151 07b2 FFC0     		incl	%eax
 680:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1152              		.loc 1 680 0
 1153 07b4 4088B100 		movb	%sil, VM_memory(%rcx)
 1153      000000
GAS LISTING /tmp/cc15eBE3.s 			page 40


 1154              	.LVL180:
 1155              	.L98:
 1156              		.loc 1 681 0
 1157 07bb 88900000 		movb	%dl, VM_memory(%rax)
 1157      0000
 1158 07c1 E9AB0000 		jmp	.L92
 1158      00
 1159              	.LVL181:
 1160              	.L35:
 682:src/vm2.c     **** 				PC  =  nPC;
 683:src/vm2.c     **** 				nPC  += 4;
 684:src/vm2.c     **** 				break;
 685:src/vm2.c     **** 			}
 686:src/vm2.c     **** 			case 0b101110: { //swr Rsrc1, imm(Rsrc2): Store Word Right
 687:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1161              		.loc 1 687 0
 1162 07c6 89FA     		movl	%edi, %edx
 688:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 689:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 690:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 1163              		.loc 1 690 0
 1164 07c8 0FBFC7   		movswl	%di, %eax
 688:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1165              		.loc 1 688 0
 1166 07cb C1EF10   		shrl	$16, %edi
 1167              	.LVL182:
 687:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1168              		.loc 1 687 0
 1169 07ce C1EA15   		shrl	$21, %edx
 1170              	.LVL183:
 1171              		.loc 1 690 0
 1172 07d1 83E71F   		andl	$31, %edi
 1173 07d4 83E21F   		andl	$31, %edx
 1174 07d7 8B0CBD00 		movl	RF(,%rdi,4), %ecx
 1174      000000
 1175              	.LVL184:
 1176 07de 03049500 		addl	RF(,%rdx,4), %eax
 1176      000000
 1177              	.LVL185:
 1178 07e5 89C2     		movl	%eax, %edx
 691:src/vm2.c     **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 1179              		.loc 1 691 0
 1180 07e7 FFC8     		decl	%eax
 690:src/vm2.c     **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 1181              		.loc 1 690 0
 1182 07e9 888A0000 		movb	%cl, VM_memory(%rdx)
 1182      0000
 1183              	.LVL186:
 1184              		.loc 1 691 0
 1185 07ef C6800000 		movb	$0, VM_memory(%rax)
 1185      000000
 1186 07f6 EB79     		jmp	.L92
 1187              	.LVL187:
 1188              	.L26:
 692:src/vm2.c     **** 				PC  =  nPC;
 693:src/vm2.c     **** 				nPC  += 4;
 694:src/vm2.c     **** 				break;
GAS LISTING /tmp/cc15eBE3.s 			page 41


 695:src/vm2.c     **** 			}
 696:src/vm2.c     **** 			case 0b100010: { //lwl Rdest, imm(Rsrc): Load Word Left
 697:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1189              		.loc 1 697 0
 1190 07f8 89F8     		movl	%edi, %eax
 698:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 699:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 700:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
 1191              		.loc 1 700 0
 1192 07fa 0FBFD7   		movswl	%di, %edx
 698:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1193              		.loc 1 698 0
 1194 07fd C1EF10   		shrl	$16, %edi
 1195              	.LVL188:
 697:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1196              		.loc 1 697 0
 1197 0800 C1E815   		shrl	$21, %eax
 1198              	.LVL189:
 1199              		.loc 1 700 0
 1200 0803 83E71F   		andl	$31, %edi
 1201 0806 83E01F   		andl	$31, %eax
 1202 0809 03148500 		addl	RF(,%rax,4), %edx
 1202      000000
 1203              	.LVL190:
 1204 0810 8D4201   		leal	1(%rdx), %eax
 1205 0813 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1205      000000
 1206 081a 0FB68000 		movzbl	VM_memory(%rax), %eax
 1206      000000
 1207 0821 C1E218   		sall	$24, %edx
 1208 0824 C1E010   		sall	$16, %eax
 1209 0827 EB2C     		jmp	.L96
 1210              	.LVL191:
 1211              	.L30:
 701:src/vm2.c     **** 				PC  =  nPC;
 702:src/vm2.c     **** 				nPC  += 4;
 703:src/vm2.c     **** 				break;
 704:src/vm2.c     **** 			}
 705:src/vm2.c     **** 			case 0b100110: { //lwr Rdest, imm(Rsrc): Load Word Right
 706:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 1212              		.loc 1 706 0
 1213 0829 89F8     		movl	%edi, %eax
 707:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 708:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
 709:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
 1214              		.loc 1 709 0
 1215 082b 0FBFD7   		movswl	%di, %edx
 707:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1216              		.loc 1 707 0
 1217 082e C1EF10   		shrl	$16, %edi
 1218              	.LVL192:
 706:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 1219              		.loc 1 706 0
 1220 0831 C1E815   		shrl	$21, %eax
 1221              	.LVL193:
 1222              		.loc 1 709 0
 1223 0834 83E71F   		andl	$31, %edi
GAS LISTING /tmp/cc15eBE3.s 			page 42


 1224 0837 83E01F   		andl	$31, %eax
 1225 083a 03148500 		addl	RF(,%rax,4), %edx
 1225      000000
 1226              	.LVL194:
 1227 0841 8D42FF   		leal	-1(%rdx), %eax
 1228 0844 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1228      000000
 1229 084b 0FB68000 		movzbl	VM_memory(%rax), %eax
 1229      000000
 1230 0852 C1E008   		sall	$8, %eax
 1231              	.LVL195:
 1232              	.L96:
 1233 0855 09D0     		orl	%edx, %eax
 1234              	.L97:
 1235 0857 8904BD00 		movl	%eax, RF(,%rdi,4)
 1235      000000
 1236 085e EB11     		jmp	.L92
 1237              	.LVL196:
 1238              	.L4:
 1239              	.LBB4:
 1240              	.LBB5:
 1241              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
GAS LISTING /tmp/cc15eBE3.s 			page 43


  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
GAS LISTING /tmp/cc15eBE3.s 			page 44


  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 1242              		.loc 2 104 0
 1243 0860 BE000000 		movl	$.LC0, %esi
 1243      00
 1244 0865 BF010000 		movl	$1, %edi
 1244      00
 1245              	.LVL197:
 1246 086a 31C0     		xorl	%eax, %eax
 1247 086c E8000000 		call	__printf_chk
 1247      00
 1248              	.LVL198:
 1249              	.L92:
 1250              	.LBE5:
 1251              	.LBE4:
 710:src/vm2.c     **** 				PC  =  nPC;
 711:src/vm2.c     **** 				nPC  += 4;
 712:src/vm2.c     **** 				break;
 713:src/vm2.c     **** 			}
 714:src/vm2.c     **** 			//uint8_t op = (instr >> 26) & 0x3F;
 715:src/vm2.c     **** 			break; //op
 716:src/vm2.c     **** 			default:
 717:src/vm2.c     **** 			{
 718:src/vm2.c     **** 				printf("Error, unknown instruction.\n");
 719:src/vm2.c     **** 				PC  =  nPC;
 1252              		.loc 1 719 0
 1253 0871 8B050000 		movl	nPC(%rip), %eax
 1253      0000
 1254              	.L94:
 1255 0877 89050000 		movl	%eax, PC(%rip)
 1255      0000
 720:src/vm2.c     **** 				nPC  += 4;
 1256              		.loc 1 720 0
 1257 087d 83C004   		addl	$4, %eax
 1258              	.L95:
 1259 0880 89050000 		movl	%eax, nPC(%rip)
 1259      0000
 721:src/vm2.c     **** 				break;
 1260              		.loc 1 721 0
 1261 0886 E9ABF7FF 		jmp	.L2
 1261      FF
 1262              	.LVL199:
 1263              	.L90:
 722:src/vm2.c     **** 			}
 723:src/vm2.c     **** 		}
 724:src/vm2.c     **** 		//advance_pc(offset);//Advances the PC
 725:src/vm2.c     **** 	}
GAS LISTING /tmp/cc15eBE3.s 			page 45


 726:src/vm2.c     **** 	if(opt) {
 1264              		.loc 1 726 0
 1265 088b 85ED     		testl	%ebp, %ebp
 1266 088d 7411     		je	.L1
 727:src/vm2.c     **** 	  print_memory();
 1267              		.loc 1 727 0
 1268 088f E8000000 		call	print_memory
 1268      00
 1269              	.LVL200:
 728:src/vm2.c     **** 	  print_registers();
 729:src/vm2.c     **** 	}
 730:src/vm2.c     **** }
 1270              		.loc 1 730 0
 1271 0894 5A       		popq	%rdx
 1272              		.cfi_remember_state
 1273              		.cfi_def_cfa_offset 40
 1274 0895 5B       		popq	%rbx
 1275              		.cfi_def_cfa_offset 32
 1276              	.LVL201:
 1277 0896 5D       		popq	%rbp
 1278              		.cfi_def_cfa_offset 24
 1279              	.LVL202:
 1280 0897 415C     		popq	%r12
 1281              		.cfi_def_cfa_offset 16
 1282 0899 415D     		popq	%r13
 1283              		.cfi_def_cfa_offset 8
 1284              	.LVL203:
 728:src/vm2.c     **** 	  print_registers();
 1285              		.loc 1 728 0
 1286 089b E9000000 		jmp	print_registers
 1286      00
 1287              	.LVL204:
 1288              	.L1:
 1289              		.cfi_restore_state
 1290              		.loc 1 730 0
 1291 08a0 58       		popq	%rax
 1292              		.cfi_def_cfa_offset 40
 1293              	.LVL205:
 1294 08a1 5B       		popq	%rbx
 1295              		.cfi_def_cfa_offset 32
 1296              	.LVL206:
 1297 08a2 5D       		popq	%rbp
 1298              		.cfi_def_cfa_offset 24
 1299              	.LVL207:
 1300 08a3 415C     		popq	%r12
 1301              		.cfi_def_cfa_offset 16
 1302 08a5 415D     		popq	%r13
 1303              		.cfi_def_cfa_offset 8
 1304              	.LVL208:
 1305 08a7 C3       		ret
 1306              		.cfi_endproc
 1307              	.LFE11:
 1309              		.globl	vm_cpu_2_indirect
 1311              	vm_cpu_2_indirect:
 1312              	.LFB12:
 731:src/vm2.c     **** /*uint32_t fetch(uint32_t PC)
 732:src/vm2.c     **** {
GAS LISTING /tmp/cc15eBE3.s 			page 46


 733:src/vm2.c     **** 	uint32_t ret_val = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t
 734:src/vm2.c     **** 	return ret_val;
 735:src/vm2.c     **** } */
 736:src/vm2.c     **** 
 737:src/vm2.c     **** #define FIX_OP 43
 738:src/vm2.c     **** #define INDIRECT_DEBUG 0
 739:src/vm2.c     **** 
 740:src/vm2.c     **** void vm_cpu_2_indirect(uint32_t newPC,int opt)
 741:src/vm2.c     **** {
 1313              		.loc 1 741 0
 1314              		.cfi_startproc
 1315              	.LVL209:
 1316 08a8 4155     		pushq	%r13
 1317              		.cfi_def_cfa_offset 16
 1318              		.cfi_offset 13, -16
 742:src/vm2.c     **** 	PC = newPC;
 743:src/vm2.c     **** 	nPC = 4;
 744:src/vm2.c     **** 	RF[0] = 0; //Register $zero must always be zero
 745:src/vm2.c     **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 746:src/vm2.c     **** 	uint32_t HI = 0, LO = 0;  
 747:src/vm2.c     **** 	uint32_t offset = 4;
 748:src/vm2.c     **** 	uint8_t halted = 0;
 749:src/vm2.c     **** 	
 750:src/vm2.c     **** 	uint32_t instr;
 751:src/vm2.c     **** 	uint8_t op;
 752:src/vm2.c     **** 	uint8_t rs;
 753:src/vm2.c     **** 	uint8_t rt;
 754:src/vm2.c     **** 	uint8_t rd;
 755:src/vm2.c     **** 	int16_t immediate;
 756:src/vm2.c     **** 	uint32_t address;
 757:src/vm2.c     **** 	
 758:src/vm2.c     **** 	uint8_t shamt;
 759:src/vm2.c     **** 	uint8_t funct;
 760:src/vm2.c     **** 	
 761:src/vm2.c     **** 	uint64_t mult;
 762:src/vm2.c     **** 	
 763:src/vm2.c     **** #if INDIRECT_DEBUG
 764:src/vm2.c     **** 	int counter=0;
 765:src/vm2.c     **** #endif
 766:src/vm2.c     **** 	
 767:src/vm2.c     **** 	// 90 Possibilities        0/5       1/6      2/7      3/8      4/9
 768:src/vm2.c     **** 	static void *array[] = {  &&sll,   &&error, &&srl,   &&sra,   &&sllv,
 769:src/vm2.c     **** 				  &&error, &&srlv,  &&srav,  &&jr,    &&jalr,	
 770:src/vm2.c     **** 				  &&movz,  &&movn,  &&sysc,  &&error, &&error, //10 
 771:src/vm2.c     **** 				  &&error, &&mfhi,  &&mthi,  &&mflo,  &&mtlo,	
 772:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&mult,  //20 
 773:src/vm2.c     **** 				  &&multu, &&div,   &&divu,  &&error, &&error,
 774:src/vm2.c     **** 				  &&error, &&error, &&add,   &&addu,  &&sub,   //30  
 775:src/vm2.c     **** 				  &&subu,  &&and,   &&or,    &&xor,   &&nor,
 776:src/vm2.c     **** 				  &&error, &&error, &&slt,   &&sltu,  &&branch,//40  
 777:src/vm2.c     **** 				  &&jump,  &&jal,   &&beq,   &&bne,   &&blez,	
 778:src/vm2.c     **** 				  &&bgtz,  &&addi,  &&addiu, &&slti,  &&sltiu, //50  
 779:src/vm2.c     **** 				  &&andi,  &&ori,   &&xori,  &&lui,   &&error,	
 780:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&error, //60 
 781:src/vm2.c     **** 				  &&error, &&error, &&llo,   &&lhi,   &&trap,	
 782:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&error, //70
 783:src/vm2.c     **** 				  &&lb,    &&lh,    &&lwl,   &&lw,    &&lbu,	
GAS LISTING /tmp/cc15eBE3.s 			page 47


 784:src/vm2.c     **** 				  &&lhu,   &&lwr,   &&error, &&sb,    &&sh,    //80
 785:src/vm2.c     **** 				  &&swl,   &&sw,    &&error, &&error, &&swr, 
 786:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&error, //90 
 787:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&error,  
 788:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&error, //100 
 789:src/vm2.c     **** 				  &&error, &&error, &&error, &&error, &&error,  
 790:src/vm2.c     **** 				  };
 791:src/vm2.c     **** 
 792:src/vm2.c     **** //	while (!halted) 
 793:src/vm2.c     **** //	{
 794:src/vm2.c     **** 		// FETCH
 795:src/vm2.c     **** 		instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memory
 1319              		.loc 1 795 0
 1320 08aa 8D4703   		leal	3(%rdi), %eax
 741:src/vm2.c     **** 	PC = newPC;
 1321              		.loc 1 741 0
 1322 08ad 4154     		pushq	%r12
 1323              		.cfi_def_cfa_offset 24
 1324              		.cfi_offset 12, -24
 1325 08af 55       		pushq	%rbp
 1326              		.cfi_def_cfa_offset 32
 1327              		.cfi_offset 6, -32
 1328 08b0 89F5     		movl	%esi, %ebp
 1329 08b2 53       		pushq	%rbx
 1330              		.cfi_def_cfa_offset 40
 1331              		.cfi_offset 3, -40
 1332 08b3 51       		pushq	%rcx
 1333              		.cfi_def_cfa_offset 48
 1334              		.loc 1 795 0
 1335 08b4 440FB680 		movzbl	VM_memory(%rax), %r8d
 1335      00000000 
 1336 08bc 89F8     		movl	%edi, %eax
 1337 08be 0FB68000 		movzbl	VM_memory(%rax), %eax
 1337      000000
 742:src/vm2.c     **** 	PC = newPC;
 1338              		.loc 1 742 0
 1339 08c5 893D0000 		movl	%edi, PC(%rip)
 1339      0000
 743:src/vm2.c     **** 	RF[0] = 0; //Register $zero must always be zero
 1340              		.loc 1 743 0
 1341 08cb C7050000 		movl	$4, nPC(%rip)
 1341      00000400 
 1341      0000
 744:src/vm2.c     **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 1342              		.loc 1 744 0
 1343 08d5 C7050000 		movl	$0, RF(%rip)
 1343      00000000 
 1343      0000
 745:src/vm2.c     **** 	uint32_t HI = 0, LO = 0;  
 1344              		.loc 1 745 0
 1345 08df C7050000 		movl	$1, RF+124(%rip)
 1345      00000100 
 1345      0000
 1346              	.LVL210:
 1347              		.loc 1 795 0
 1348 08e9 C1E018   		sall	$24, %eax
 1349 08ec 4109C0   		orl	%eax, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 48


 1350 08ef 8D4701   		leal	1(%rdi), %eax
 1351 08f2 0FB68000 		movzbl	VM_memory(%rax), %eax
 1351      000000
 1352 08f9 C1E010   		sall	$16, %eax
 1353 08fc 4109C0   		orl	%eax, %r8d
 1354 08ff 8D4702   		leal	2(%rdi), %eax
 1355 0902 0FB68000 		movzbl	VM_memory(%rax), %eax
 1355      000000
 1356 0909 C1E008   		sall	$8, %eax
 1357 090c 4109C0   		orl	%eax, %r8d
 1358              	.LVL211:
 796:src/vm2.c     **** 		op = (instr >> 26) & 0x3F;
 1359              		.loc 1 796 0
 1360 090f 4489C2   		movl	%r8d, %edx
 797:src/vm2.c     **** 		if (op == 0x0) {
 798:src/vm2.c     **** 		  funct = (instr >> 0) & 0x3F;
 1361              		.loc 1 798 0
 1362 0912 4488C0   		movb	%r8b, %al
 796:src/vm2.c     **** 		op = (instr >> 26) & 0x3F;
 1363              		.loc 1 796 0
 1364 0915 C1EA1A   		shrl	$26, %edx
 1365              	.LVL212:
 1366              		.loc 1 798 0
 1367 0918 83E03F   		andl	$63, %eax
 1368 091b 8D4A2B   		leal	43(%rdx), %ecx
 1369 091e 84D2     		testb	%dl, %dl
 1370 0920 0F45C1   		cmovne	%ecx, %eax
 1371              	.LVL213:
 746:src/vm2.c     **** 	uint32_t offset = 4;
 1372              		.loc 1 746 0
 1373 0923 31DB     		xorl	%ebx, %ebx
 1374 0925 4531ED   		xorl	%r13d, %r13d
 799:src/vm2.c     **** 		  op = op + funct;
 800:src/vm2.c     **** 		}
 801:src/vm2.c     **** 		else {
 802:src/vm2.c     **** 		  op = op + FIX_OP;
 803:src/vm2.c     **** 		}
 804:src/vm2.c     **** 		goto *array[op];
 1375              		.loc 1 804 0
 1376 0928 83E07F   		andl	$127, %eax
 1377              	.LVL214:
 805:src/vm2.c     **** 		
 806:src/vm2.c     **** 		// rs, rt, rd, immediatte -> Moved
 807:src/vm2.c     **** 			
 808:src/vm2.c     **** 		// offset = 4; // default offset for non-branching instructions, not used
 809:src/vm2.c     **** 		//TODO Handle events here!
 810:src/vm2.c     **** 		//switch (op) 
 811:src/vm2.c     **** 		//{
 812:src/vm2.c     **** 		//	case 0x0: { // 000000 => Register encoding.
 813:src/vm2.c     **** 		//		funct = (instr >> 0) & 0x3F;
 814:src/vm2.c     **** 				// shamt moved
 815:src/vm2.c     **** 			  
 816:src/vm2.c     **** 		//		switch (funct) {
 817:src/vm2.c     **** 		// 0+11 = 11		case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 818:src/vm2.c     **** 		movn:
 819:src/vm2.c     **** #if INDIRECT_DEBUG
 820:src/vm2.c     **** printf("%d|movn\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 49


 821:src/vm2.c     **** counter++;
 822:src/vm2.c     **** #endif
 823:src/vm2.c     **** 					    
 824:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 825:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 826:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 827:src/vm2.c     **** 						if (RF[rt] != 0) RF[rd] = RF[rs];
 828:src/vm2.c     **** 						PC  =  nPC;
 829:src/vm2.c     **** 						nPC  += 4;
 830:src/vm2.c     **** 						
 831:src/vm2.c     **** 						// FETCH
 832:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 833:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 834:src/vm2.c     **** 						if (op == 0x0) {
 835:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 836:src/vm2.c     **** 						  op = op + funct;
 837:src/vm2.c     **** 						}
 838:src/vm2.c     **** 						else {
 839:src/vm2.c     **** 						  op = op + FIX_OP;
 840:src/vm2.c     **** 						}
 841:src/vm2.c     **** 						goto *array[op];
 842:src/vm2.c     **** 						
 843:src/vm2.c     **** 		//				break;
 844:src/vm2.c     **** 		//			}
 845:src/vm2.c     **** 		// 0+10=10		case 0b001010: { // movz	001010 				if(rt==0) rd = rs
 846:src/vm2.c     **** 		movz:
 847:src/vm2.c     **** #if INDIRECT_DEBUG
 848:src/vm2.c     **** printf("%d|movz\n",counter);
 849:src/vm2.c     **** counter++;
 850:src/vm2.c     **** #endif
 851:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 852:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 853:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 854:src/vm2.c     **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
 855:src/vm2.c     **** 						PC  =  nPC;
 856:src/vm2.c     **** 						nPC  += 4;
 857:src/vm2.c     **** 						
 858:src/vm2.c     **** 						// FETCH
 859:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 860:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 861:src/vm2.c     **** 						if (op == 0x0) {
 862:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 863:src/vm2.c     **** 						  op = op + funct;
 864:src/vm2.c     **** 						}
 865:src/vm2.c     **** 						else {
 866:src/vm2.c     **** 						  op = op + FIX_OP;
 867:src/vm2.c     **** 						}
 868:src/vm2.c     **** 						goto *array[op];
 869:src/vm2.c     **** 						
 870:src/vm2.c     **** 		//				break;
 871:src/vm2.c     **** 		//			}
 872:src/vm2.c     **** 		// 0+32 = 32		case 0b100000: { // add		100000	ArithLog	$d = $s + $t
 873:src/vm2.c     **** 		add:
 874:src/vm2.c     **** #if INDIRECT_DEBUG
 875:src/vm2.c     **** printf("%d|add\n",counter);
 876:src/vm2.c     **** counter++;
 877:src/vm2.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 50


 878:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 879:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 880:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 881:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 882:src/vm2.c     **** 						PC  =  nPC;
 883:src/vm2.c     **** 						nPC  += 4;
 884:src/vm2.c     **** 						
 885:src/vm2.c     **** 						// FETCH
 886:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 887:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 888:src/vm2.c     **** 						if (op == 0x0) {
 889:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 890:src/vm2.c     **** 						  op = op + funct;
 891:src/vm2.c     **** 						}
 892:src/vm2.c     **** 						else {
 893:src/vm2.c     **** 						  op = op + FIX_OP;
 894:src/vm2.c     **** 						}
 895:src/vm2.c     **** 						goto *array[op];
 896:src/vm2.c     **** 						
 897:src/vm2.c     **** 		//				break;
 898:src/vm2.c     **** 		//			}
 899:src/vm2.c     **** 		// 0+33 = 33		case 0b100001: { // addu	100001	ArithLog	$d = $s + $t
 900:src/vm2.c     **** 		addu:
 901:src/vm2.c     **** #if INDIRECT_DEBUG
 902:src/vm2.c     **** printf("%d|addu\n",counter);
 903:src/vm2.c     **** counter++;
 904:src/vm2.c     **** #endif
 905:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 906:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 907:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 908:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 909:src/vm2.c     **** 						PC  =  nPC;
 910:src/vm2.c     **** 						nPC  += 4;
 911:src/vm2.c     **** 						
 912:src/vm2.c     **** 						// FETCH
 913:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 914:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 915:src/vm2.c     **** 						if (op == 0x0) {
 916:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 917:src/vm2.c     **** 						  op = op + funct;
 918:src/vm2.c     **** 						}
 919:src/vm2.c     **** 						else {
 920:src/vm2.c     **** 						  op = op + FIX_OP;
 921:src/vm2.c     **** 						}
 922:src/vm2.c     **** 						goto *array[op];
 923:src/vm2.c     **** 						
 924:src/vm2.c     **** 		//				break;
 925:src/vm2.c     **** 		//			}
 926:src/vm2.c     **** 		// 0+36=36		case 0b100100: { // and		100100	ArithLog	$d = $s & $t
 927:src/vm2.c     **** 		and:
 928:src/vm2.c     **** #if INDIRECT_DEBUG
 929:src/vm2.c     **** printf("%d|and\n",counter);
 930:src/vm2.c     **** counter++;
 931:src/vm2.c     **** #endif
 932:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 933:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 934:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 51


 935:src/vm2.c     **** 						RF[rd] = RF[rs] & RF[rt];
 936:src/vm2.c     **** 						PC  =  nPC;
 937:src/vm2.c     **** 						nPC  += 4;
 938:src/vm2.c     **** 						
 939:src/vm2.c     **** 						// FETCH
 940:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 941:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 942:src/vm2.c     **** 						if (op == 0x0) {
 943:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 944:src/vm2.c     **** 						  op = op + funct;
 945:src/vm2.c     **** 						}
 946:src/vm2.c     **** 						else {
 947:src/vm2.c     **** 						  op = op + FIX_OP;
 948:src/vm2.c     **** 						}
 949:src/vm2.c     **** 						goto *array[op];
 950:src/vm2.c     **** 						
 951:src/vm2.c     **** 		//				break;
 952:src/vm2.c     **** 		//			}
 953:src/vm2.c     **** 		// 0+26=26		case 0b011010: { // div		011010  DivMult		lo = $s / $t; hi = $s % $t
 954:src/vm2.c     **** 		div:
 955:src/vm2.c     **** #if INDIRECT_DEBUG
 956:src/vm2.c     **** printf("%d|div\n",counter);
 957:src/vm2.c     **** counter++;
 958:src/vm2.c     **** #endif
 959:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 960:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 961:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 962:src/vm2.c     **** 						HI = RF[rs] % RF[rt];
 963:src/vm2.c     **** 						PC  =  nPC;
 964:src/vm2.c     **** 						nPC  += 4;
 965:src/vm2.c     **** 
 966:src/vm2.c     **** fetch:						
 967:src/vm2.c     **** 						// FETCH
 968:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 969:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 970:src/vm2.c     **** 						if (op == 0x0) {
 971:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 972:src/vm2.c     **** 						  op = op + funct;
 973:src/vm2.c     **** 						}
 974:src/vm2.c     **** 						else {
 975:src/vm2.c     **** 						  op = op + FIX_OP;
 976:src/vm2.c     **** 						}
 977:src/vm2.c     **** 						goto *array[op];
 978:src/vm2.c     **** 						
 979:src/vm2.c     **** 		//				break;
 980:src/vm2.c     **** 		//			}
 981:src/vm2.c     **** 		// 0+27=27		case 0b011011: { // divu	011011  DivMult		lo = $s / $t; hi = $s % $t
 982:src/vm2.c     **** 		divu:
 983:src/vm2.c     **** #if INDIRECT_DEBUG
 984:src/vm2.c     **** printf("%d|divu\n",counter);
 985:src/vm2.c     **** counter++;
 986:src/vm2.c     **** #endif
 987:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 988:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 989:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 990:src/vm2.c     **** 						HI = RF[rs] % RF[rt];  
 991:src/vm2.c     **** 						PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 52


 992:src/vm2.c     **** 						nPC  += 4;
 993:src/vm2.c     **** 						
 994:src/vm2.c     **** 						// FETCH
 995:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 996:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 997:src/vm2.c     **** 						if (op == 0x0) {
 998:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 999:src/vm2.c     **** 						  op = op + funct;
1000:src/vm2.c     **** 						}
1001:src/vm2.c     **** 						else {
1002:src/vm2.c     **** 						  op = op + FIX_OP;
1003:src/vm2.c     **** 						}
1004:src/vm2.c     **** 						goto *array[op];
1005:src/vm2.c     **** 						
1006:src/vm2.c     **** 		//				break;
1007:src/vm2.c     **** 		//			}
1008:src/vm2.c     **** 		// 0+24=24		case 0b011000: { // mult	011000  DivMult		hi:lo = $s * $t
1009:src/vm2.c     **** 		mult:
1010:src/vm2.c     **** #if INDIRECT_DEBUG
1011:src/vm2.c     **** printf("%d|mult\n",counter);
1012:src/vm2.c     **** counter++;
1013:src/vm2.c     **** #endif
1014:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1015:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1016:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
1017:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
1018:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;
1019:src/vm2.c     **** 						PC  =  nPC;
1020:src/vm2.c     **** 						nPC  += 4;
1021:src/vm2.c     **** 						
1022:src/vm2.c     **** 						// FETCH
1023:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
1024:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1025:src/vm2.c     **** 						if (op == 0x0) {
1026:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
1027:src/vm2.c     **** 						  op = op + funct;
1028:src/vm2.c     **** 						}
1029:src/vm2.c     **** 						else {
1030:src/vm2.c     **** 						  op = op + FIX_OP;
1031:src/vm2.c     **** 						}
1032:src/vm2.c     **** 						goto *array[op];
1033:src/vm2.c     **** 						
1034:src/vm2.c     **** 		//				break;
1035:src/vm2.c     **** 		//			}
1036:src/vm2.c     **** 		// 0+25=25		case 0b011001: { // multu	011001	DivMult		hi:lo = $s * $t
1037:src/vm2.c     **** 		multu:
1038:src/vm2.c     **** #if INDIRECT_DEBUG
1039:src/vm2.c     **** printf("%d|multu\n",counter);
1040:src/vm2.c     **** counter++;
1041:src/vm2.c     **** #endif
1042:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1043:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1044:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
1045:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
1046:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;  
1047:src/vm2.c     **** 						PC  =  nPC;
1048:src/vm2.c     **** 						nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 53


1049:src/vm2.c     **** 						
1050:src/vm2.c     **** 						// FETCH
1051:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
1052:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1053:src/vm2.c     **** 						if (op == 0x0) {
1054:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
1055:src/vm2.c     **** 						  op = op + funct;
1056:src/vm2.c     **** 						}
1057:src/vm2.c     **** 						else {
1058:src/vm2.c     **** 						  op = op + FIX_OP;
1059:src/vm2.c     **** 						}
1060:src/vm2.c     **** 						goto *array[op];
1061:src/vm2.c     **** 						
1062:src/vm2.c     **** 		//				break;
1063:src/vm2.c     **** 		//			}
1064:src/vm2.c     **** 		// 0+39=39		case 0b100111: { // nor		100111	ArithLog	$d = ~($s | $t)
1065:src/vm2.c     **** 		nor:
1066:src/vm2.c     **** #if INDIRECT_DEBUG
1067:src/vm2.c     **** printf("%d|nor\n",counter);
1068:src/vm2.c     **** counter++;
1069:src/vm2.c     **** #endif
1070:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1071:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1072:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
1073:src/vm2.c     **** 						RF[rd] = ~(RF[rs] | RF[rt]);
1074:src/vm2.c     **** 						PC  =  nPC;
1075:src/vm2.c     **** 						nPC  += 4;
1076:src/vm2.c     **** 						
1077:src/vm2.c     **** 						// FETCH
1078:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
1079:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1080:src/vm2.c     **** 						if (op == 0x0) {
1081:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
1082:src/vm2.c     **** 						  op = op + funct;
1083:src/vm2.c     **** 						}
1084:src/vm2.c     **** 						else {
1085:src/vm2.c     **** 						  op = op + FIX_OP;
1086:src/vm2.c     **** 						}
1087:src/vm2.c     **** 						goto *array[op];
1088:src/vm2.c     **** 						
1089:src/vm2.c     **** 		//				break;
1090:src/vm2.c     **** 		//			}
1091:src/vm2.c     **** 		// 0+37=37		case 0b100101: { // or		100101	ArithLog	$d = $s | $t
1092:src/vm2.c     **** 		or:
1093:src/vm2.c     **** #if INDIRECT_DEBUG
1094:src/vm2.c     **** printf("%d|or\n",counter);
1095:src/vm2.c     **** counter++;
1096:src/vm2.c     **** #endif
1097:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1098:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1099:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
1100:src/vm2.c     **** 						RF[rd] = RF[rs] | RF[rt];
1101:src/vm2.c     **** 						PC  =  nPC;
1102:src/vm2.c     **** 						nPC  += 4;
1103:src/vm2.c     **** 						
1104:src/vm2.c     **** 						// FETCH
1105:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
GAS LISTING /tmp/cc15eBE3.s 			page 54


1106:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1107:src/vm2.c     **** 						if (op == 0x0) {
1108:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
1109:src/vm2.c     **** 						  op = op + funct;
1110:src/vm2.c     **** 						}
1111:src/vm2.c     **** 						else {
1112:src/vm2.c     **** 						  op = op + FIX_OP;
1113:src/vm2.c     **** 						}
1114:src/vm2.c     **** 						goto *array[op];
1115:src/vm2.c     **** 						
1116:src/vm2.c     **** 		//				break;
1117:src/vm2.c     **** 		//			}
1118:src/vm2.c     **** 		// 0+0=0		case 0b000000: { // sll		000000	Shift		$d = $t << a
1119:src/vm2.c     **** 		sll:
1120:src/vm2.c     **** #if INDIRECT_DEBUG
1121:src/vm2.c     **** printf("%d|sll\n",counter);
1122:src/vm2.c     **** counter++;
1123:src/vm2.c     **** #endif
1124:src/vm2.c     **** 						shamt = (instr >> 6) & 0x1F;
1125:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1126:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
1127:src/vm2.c     **** 						RF[rd] = RF[rt] << shamt;
1128:src/vm2.c     **** 						PC  =  nPC;
1129:src/vm2.c     **** 						nPC  += 4;
1130:src/vm2.c     **** 						
1131:src/vm2.c     **** 						// FETCH
1132:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
1133:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1134:src/vm2.c     **** 						if (op == 0x0) {
1135:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
1136:src/vm2.c     **** 						  op = op + funct;
1137:src/vm2.c     **** 						}
1138:src/vm2.c     **** 						else {
1139:src/vm2.c     **** 						  op = op + FIX_OP;
1140:src/vm2.c     **** 						}
1141:src/vm2.c     **** 						goto *array[op];
1142:src/vm2.c     **** 						
1143:src/vm2.c     **** 		//				break;
1144:src/vm2.c     **** 		//			}
1145:src/vm2.c     **** 		// 0+4=4		case 0b000100: { // sllv	000100	ShiftV		$d = $t << $s
1146:src/vm2.c     **** 		sllv:
1147:src/vm2.c     **** #if INDIRECT_DEBUG
1148:src/vm2.c     **** printf("%d|sllv\n",counter);
1149:src/vm2.c     **** counter++;
1150:src/vm2.c     **** #endif
1151:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1152:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1153:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
1154:src/vm2.c     **** 						RF[rd] = RF[rt] << RF[rs];
1155:src/vm2.c     **** 						PC  =  nPC;
1156:src/vm2.c     **** 						nPC  += 4;
1157:src/vm2.c     **** 						
1158:src/vm2.c     **** 						// FETCH
1159:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
1160:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1161:src/vm2.c     **** 						if (op == 0x0) {
1162:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 55


1163:src/vm2.c     **** 						  op = op + funct;
1164:src/vm2.c     **** 						}
1165:src/vm2.c     **** 						else {
1166:src/vm2.c     **** 						  op = op + FIX_OP;
1167:src/vm2.c     **** 						}
1168:src/vm2.c     **** 						goto *array[op];
1169:src/vm2.c     **** 						
1170:src/vm2.c     **** 		//				break;
1171:src/vm2.c     **** 		//			}
1172:src/vm2.c     **** 		// 0+3=3		case 0b000011: { // sra		000011	Shift		$d = $t >> a 
1173:src/vm2.c     **** 		sra:
1174:src/vm2.c     **** #if INDIRECT_DEBUG
1175:src/vm2.c     **** printf("%d|sra\n",counter);
1176:src/vm2.c     **** counter++;
1177:src/vm2.c     **** #endif
1178:src/vm2.c     **** 						shamt = (instr >> 6) & 0x1F;
1179:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1180:src/vm2.c     **** 						if ((int32_t)RF[rt] < 0 && shamt > 0) {
1181:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
1182:src/vm2.c     **** 						  RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 1378              		.loc 1 1182 0
 1379 092b 4183CCFF 		orl	$-1, %r12d
 804:src/vm2.c     **** 		
 1380              		.loc 1 804 0
 1381 092f 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1381      00000000 
 1382              	.LVL215:
 1383              	.L112:
 1384 0937 FFE1     		jmp	*%rcx
 1385              	.L113:
 1386              	.LVL216:
 825:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1387              		.loc 1 825 0
 1388 0939 4489C0   		movl	%r8d, %eax
 1389 093c C1E810   		shrl	$16, %eax
 827:src/vm2.c     **** 						PC  =  nPC;
 1390              		.loc 1 827 0
 1391 093f 83E01F   		andl	$31, %eax
 1392 0942 833C8500 		cmpl	$0, RF(,%rax,4)
 1392      00000000 
 1393 094a 7420     		je	.L114
 824:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1394              		.loc 1 824 0 discriminator 1
 1395 094c 4489C0   		movl	%r8d, %eax
 826:src/vm2.c     **** 						if (RF[rt] != 0) RF[rd] = RF[rs];
 1396              		.loc 1 826 0 discriminator 1
 1397 094f 41C1E80B 		shrl	$11, %r8d
 1398              	.LVL217:
 824:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1399              		.loc 1 824 0 discriminator 1
 1400 0953 C1E815   		shrl	$21, %eax
 1401              	.LVL218:
 827:src/vm2.c     **** 						PC  =  nPC;
 1402              		.loc 1 827 0 discriminator 1
 1403 0956 4183E01F 		andl	$31, %r8d
 1404              	.LVL219:
 1405 095a 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 56


 1406              	.LVL220:
 1407 095d 8B048500 		movl	RF(,%rax,4), %eax
 1407      000000
 1408 0964 42890485 		movl	%eax, RF(,%r8,4)
 1408      00000000 
 1409              	.L114:
 828:src/vm2.c     **** 						nPC  += 4;
 1410              		.loc 1 828 0
 1411 096c 8B050000 		movl	nPC(%rip), %eax
 1411      0000
 829:src/vm2.c     **** 						
 1412              		.loc 1 829 0
 1413 0972 8D5004   		leal	4(%rax), %edx
 828:src/vm2.c     **** 						nPC  += 4;
 1414              		.loc 1 828 0
 1415 0975 89050000 		movl	%eax, PC(%rip)
 1415      0000
 829:src/vm2.c     **** 						
 1416              		.loc 1 829 0
 1417 097b 89150000 		movl	%edx, nPC(%rip)
 1417      0000
 832:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1418              		.loc 1 832 0
 1419 0981 8D5003   		leal	3(%rax), %edx
 1420 0984 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1420      00000000 
 1421 098c 89C2     		movl	%eax, %edx
 1422 098e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1422      000000
 1423 0995 C1E218   		sall	$24, %edx
 1424 0998 4109D0   		orl	%edx, %r8d
 1425 099b 8D5001   		leal	1(%rax), %edx
 1426 099e 83C002   		addl	$2, %eax
 1427 09a1 0FB68000 		movzbl	VM_memory(%rax), %eax
 1427      000000
 1428 09a8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1428      000000
 1429 09af C1E008   		sall	$8, %eax
 1430 09b2 C1E210   		sall	$16, %edx
 1431 09b5 4109D0   		orl	%edx, %r8d
 1432 09b8 4109C0   		orl	%eax, %r8d
 1433              	.LVL221:
 833:src/vm2.c     **** 						if (op == 0x0) {
 1434              		.loc 1 833 0
 1435 09bb 4489C2   		movl	%r8d, %edx
 835:src/vm2.c     **** 						  op = op + funct;
 1436              		.loc 1 835 0
 1437 09be 4488C0   		movb	%r8b, %al
 833:src/vm2.c     **** 						if (op == 0x0) {
 1438              		.loc 1 833 0
 1439 09c1 C1EA1A   		shrl	$26, %edx
 1440              	.LVL222:
 835:src/vm2.c     **** 						  op = op + funct;
 1441              		.loc 1 835 0
 1442 09c4 83E03F   		andl	$63, %eax
 1443 09c7 8D4A2B   		leal	43(%rdx), %ecx
 1444 09ca 84D2     		testb	%dl, %dl
GAS LISTING /tmp/cc15eBE3.s 			page 57


 1445 09cc 0F45C1   		cmovne	%ecx, %eax
 1446              	.LVL223:
 841:src/vm2.c     **** 						
 1447              		.loc 1 841 0
 1448 09cf 83E07F   		andl	$127, %eax
 1449              	.LVL224:
 1450 09d2 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1450      00000000 
 1451 09da E958FFFF 		jmp	.L112
 1451      FF
 1452              	.L118:
 1453              	.LVL225:
 852:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1454              		.loc 1 852 0
 1455 09df 4489C0   		movl	%r8d, %eax
 1456 09e2 C1E810   		shrl	$16, %eax
 854:src/vm2.c     **** 						PC  =  nPC;
 1457              		.loc 1 854 0
 1458 09e5 83E01F   		andl	$31, %eax
 1459 09e8 833C8500 		cmpl	$0, RF(,%rax,4)
 1459      00000000 
 1460 09f0 7520     		jne	.L119
 851:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1461              		.loc 1 851 0 discriminator 1
 1462 09f2 4489C0   		movl	%r8d, %eax
 853:src/vm2.c     **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
 1463              		.loc 1 853 0 discriminator 1
 1464 09f5 41C1E80B 		shrl	$11, %r8d
 1465              	.LVL226:
 851:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1466              		.loc 1 851 0 discriminator 1
 1467 09f9 C1E815   		shrl	$21, %eax
 1468              	.LVL227:
 854:src/vm2.c     **** 						PC  =  nPC;
 1469              		.loc 1 854 0 discriminator 1
 1470 09fc 4183E01F 		andl	$31, %r8d
 1471              	.LVL228:
 1472 0a00 83E01F   		andl	$31, %eax
 1473              	.LVL229:
 1474 0a03 8B048500 		movl	RF(,%rax,4), %eax
 1474      000000
 1475 0a0a 42890485 		movl	%eax, RF(,%r8,4)
 1475      00000000 
 1476              	.L119:
 855:src/vm2.c     **** 						nPC  += 4;
 1477              		.loc 1 855 0
 1478 0a12 8B050000 		movl	nPC(%rip), %eax
 1478      0000
 856:src/vm2.c     **** 						
 1479              		.loc 1 856 0
 1480 0a18 8D5004   		leal	4(%rax), %edx
 855:src/vm2.c     **** 						nPC  += 4;
 1481              		.loc 1 855 0
 1482 0a1b 89050000 		movl	%eax, PC(%rip)
 1482      0000
 856:src/vm2.c     **** 						
 1483              		.loc 1 856 0
GAS LISTING /tmp/cc15eBE3.s 			page 58


 1484 0a21 89150000 		movl	%edx, nPC(%rip)
 1484      0000
 859:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1485              		.loc 1 859 0
 1486 0a27 8D5003   		leal	3(%rax), %edx
 1487 0a2a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1487      00000000 
 1488 0a32 89C2     		movl	%eax, %edx
 1489 0a34 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1489      000000
 1490 0a3b C1E218   		sall	$24, %edx
 1491 0a3e 4109D0   		orl	%edx, %r8d
 1492 0a41 8D5001   		leal	1(%rax), %edx
 1493 0a44 83C002   		addl	$2, %eax
 1494 0a47 0FB68000 		movzbl	VM_memory(%rax), %eax
 1494      000000
 1495 0a4e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1495      000000
 1496 0a55 C1E008   		sall	$8, %eax
 1497 0a58 C1E210   		sall	$16, %edx
 1498 0a5b 4109D0   		orl	%edx, %r8d
 1499 0a5e 4109C0   		orl	%eax, %r8d
 1500              	.LVL230:
 860:src/vm2.c     **** 						if (op == 0x0) {
 1501              		.loc 1 860 0
 1502 0a61 4489C2   		movl	%r8d, %edx
 862:src/vm2.c     **** 						  op = op + funct;
 1503              		.loc 1 862 0
 1504 0a64 4488C0   		movb	%r8b, %al
 860:src/vm2.c     **** 						if (op == 0x0) {
 1505              		.loc 1 860 0
 1506 0a67 C1EA1A   		shrl	$26, %edx
 1507              	.LVL231:
 862:src/vm2.c     **** 						  op = op + funct;
 1508              		.loc 1 862 0
 1509 0a6a 83E03F   		andl	$63, %eax
 1510 0a6d 8D4A2B   		leal	43(%rdx), %ecx
 1511 0a70 84D2     		testb	%dl, %dl
 1512 0a72 0F45C1   		cmovne	%ecx, %eax
 1513              	.LVL232:
 868:src/vm2.c     **** 						
 1514              		.loc 1 868 0
 1515 0a75 83E07F   		andl	$127, %eax
 1516              	.LVL233:
 1517 0a78 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1517      00000000 
 1518 0a80 E9B2FEFF 		jmp	.L112
 1518      FF
 1519              	.L122:
 1520              	.LVL234:
 879:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1521              		.loc 1 879 0
 1522 0a85 4489C0   		movl	%r8d, %eax
 880:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 1523              		.loc 1 880 0
 1524 0a88 4489C2   		movl	%r8d, %edx
 878:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 59


 1525              		.loc 1 878 0
 1526 0a8b 41C1E815 		shrl	$21, %r8d
 1527              	.LVL235:
 879:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1528              		.loc 1 879 0
 1529 0a8f C1E810   		shrl	$16, %eax
 1530              	.LVL236:
 881:src/vm2.c     **** 						PC  =  nPC;
 1531              		.loc 1 881 0
 1532 0a92 4183E01F 		andl	$31, %r8d
 880:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 1533              		.loc 1 880 0
 1534 0a96 C1EA0B   		shrl	$11, %edx
 1535              	.LVL237:
 881:src/vm2.c     **** 						PC  =  nPC;
 1536              		.loc 1 881 0
 1537 0a99 83E01F   		andl	$31, %eax
 1538 0a9c 83E21F   		andl	$31, %edx
 1539 0a9f 8B048500 		movl	RF(,%rax,4), %eax
 1539      000000
 1540 0aa6 42030485 		addl	RF(,%r8,4), %eax
 1540      00000000 
 1541 0aae 89049500 		movl	%eax, RF(,%rdx,4)
 1541      000000
 882:src/vm2.c     **** 						nPC  += 4;
 1542              		.loc 1 882 0
 1543 0ab5 8B050000 		movl	nPC(%rip), %eax
 1543      0000
 883:src/vm2.c     **** 						
 1544              		.loc 1 883 0
 1545 0abb 8D5004   		leal	4(%rax), %edx
 882:src/vm2.c     **** 						nPC  += 4;
 1546              		.loc 1 882 0
 1547 0abe 89050000 		movl	%eax, PC(%rip)
 1547      0000
 883:src/vm2.c     **** 						
 1548              		.loc 1 883 0
 1549 0ac4 89150000 		movl	%edx, nPC(%rip)
 1549      0000
 886:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1550              		.loc 1 886 0
 1551 0aca 8D5003   		leal	3(%rax), %edx
 1552 0acd 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1552      00000000 
 1553 0ad5 89C2     		movl	%eax, %edx
 1554 0ad7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1554      000000
 1555 0ade C1E218   		sall	$24, %edx
 1556 0ae1 4109D0   		orl	%edx, %r8d
 1557 0ae4 8D5001   		leal	1(%rax), %edx
 1558 0ae7 83C002   		addl	$2, %eax
 1559 0aea 0FB68000 		movzbl	VM_memory(%rax), %eax
 1559      000000
 1560 0af1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1560      000000
 1561 0af8 C1E008   		sall	$8, %eax
 1562 0afb C1E210   		sall	$16, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 60


 1563 0afe 4109D0   		orl	%edx, %r8d
 1564 0b01 4109C0   		orl	%eax, %r8d
 1565              	.LVL238:
 887:src/vm2.c     **** 						if (op == 0x0) {
 1566              		.loc 1 887 0
 1567 0b04 4489C2   		movl	%r8d, %edx
 889:src/vm2.c     **** 						  op = op + funct;
 1568              		.loc 1 889 0
 1569 0b07 4488C0   		movb	%r8b, %al
 887:src/vm2.c     **** 						if (op == 0x0) {
 1570              		.loc 1 887 0
 1571 0b0a C1EA1A   		shrl	$26, %edx
 1572              	.LVL239:
 889:src/vm2.c     **** 						  op = op + funct;
 1573              		.loc 1 889 0
 1574 0b0d 83E03F   		andl	$63, %eax
 1575 0b10 8D4A2B   		leal	43(%rdx), %ecx
 1576 0b13 84D2     		testb	%dl, %dl
 1577 0b15 0F45C1   		cmovne	%ecx, %eax
 1578              	.LVL240:
 895:src/vm2.c     **** 						
 1579              		.loc 1 895 0
 1580 0b18 83E07F   		andl	$127, %eax
 1581              	.LVL241:
 1582 0b1b 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1582      00000000 
 1583 0b23 E90FFEFF 		jmp	.L112
 1583      FF
 1584              	.L125:
 1585              	.LVL242:
 906:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1586              		.loc 1 906 0
 1587 0b28 4489C0   		movl	%r8d, %eax
 907:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 1588              		.loc 1 907 0
 1589 0b2b 4489C2   		movl	%r8d, %edx
 905:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1590              		.loc 1 905 0
 1591 0b2e 41C1E815 		shrl	$21, %r8d
 1592              	.LVL243:
 906:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1593              		.loc 1 906 0
 1594 0b32 C1E810   		shrl	$16, %eax
 1595              	.LVL244:
 908:src/vm2.c     **** 						PC  =  nPC;
 1596              		.loc 1 908 0
 1597 0b35 4183E01F 		andl	$31, %r8d
 907:src/vm2.c     **** 						RF[rd] = RF[rs] + RF[rt];
 1598              		.loc 1 907 0
 1599 0b39 C1EA0B   		shrl	$11, %edx
 1600              	.LVL245:
 908:src/vm2.c     **** 						PC  =  nPC;
 1601              		.loc 1 908 0
 1602 0b3c 83E01F   		andl	$31, %eax
 1603 0b3f 83E21F   		andl	$31, %edx
 1604 0b42 8B048500 		movl	RF(,%rax,4), %eax
 1604      000000
GAS LISTING /tmp/cc15eBE3.s 			page 61


 1605 0b49 42030485 		addl	RF(,%r8,4), %eax
 1605      00000000 
 1606 0b51 89049500 		movl	%eax, RF(,%rdx,4)
 1606      000000
 909:src/vm2.c     **** 						nPC  += 4;
 1607              		.loc 1 909 0
 1608 0b58 8B050000 		movl	nPC(%rip), %eax
 1608      0000
 910:src/vm2.c     **** 						
 1609              		.loc 1 910 0
 1610 0b5e 8D5004   		leal	4(%rax), %edx
 909:src/vm2.c     **** 						nPC  += 4;
 1611              		.loc 1 909 0
 1612 0b61 89050000 		movl	%eax, PC(%rip)
 1612      0000
 910:src/vm2.c     **** 						
 1613              		.loc 1 910 0
 1614 0b67 89150000 		movl	%edx, nPC(%rip)
 1614      0000
 913:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1615              		.loc 1 913 0
 1616 0b6d 8D5003   		leal	3(%rax), %edx
 1617 0b70 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1617      00000000 
 1618 0b78 89C2     		movl	%eax, %edx
 1619 0b7a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1619      000000
 1620 0b81 C1E218   		sall	$24, %edx
 1621 0b84 4109D0   		orl	%edx, %r8d
 1622 0b87 8D5001   		leal	1(%rax), %edx
 1623 0b8a 83C002   		addl	$2, %eax
 1624 0b8d 0FB68000 		movzbl	VM_memory(%rax), %eax
 1624      000000
 1625 0b94 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1625      000000
 1626 0b9b C1E008   		sall	$8, %eax
 1627 0b9e C1E210   		sall	$16, %edx
 1628 0ba1 4109D0   		orl	%edx, %r8d
 1629 0ba4 4109C0   		orl	%eax, %r8d
 1630              	.LVL246:
 914:src/vm2.c     **** 						if (op == 0x0) {
 1631              		.loc 1 914 0
 1632 0ba7 4489C2   		movl	%r8d, %edx
 916:src/vm2.c     **** 						  op = op + funct;
 1633              		.loc 1 916 0
 1634 0baa 4488C0   		movb	%r8b, %al
 914:src/vm2.c     **** 						if (op == 0x0) {
 1635              		.loc 1 914 0
 1636 0bad C1EA1A   		shrl	$26, %edx
 1637              	.LVL247:
 916:src/vm2.c     **** 						  op = op + funct;
 1638              		.loc 1 916 0
 1639 0bb0 83E03F   		andl	$63, %eax
 1640 0bb3 8D4A2B   		leal	43(%rdx), %ecx
 1641 0bb6 84D2     		testb	%dl, %dl
 1642 0bb8 0F45C1   		cmovne	%ecx, %eax
 1643              	.LVL248:
GAS LISTING /tmp/cc15eBE3.s 			page 62


 922:src/vm2.c     **** 						
 1644              		.loc 1 922 0
 1645 0bbb 83E07F   		andl	$127, %eax
 1646              	.LVL249:
 1647 0bbe 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1647      00000000 
 1648 0bc6 E96CFDFF 		jmp	.L112
 1648      FF
 1649              	.L128:
 1650              	.LVL250:
 933:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1651              		.loc 1 933 0
 1652 0bcb 4489C0   		movl	%r8d, %eax
 934:src/vm2.c     **** 						RF[rd] = RF[rs] & RF[rt];
 1653              		.loc 1 934 0
 1654 0bce 4489C2   		movl	%r8d, %edx
 932:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1655              		.loc 1 932 0
 1656 0bd1 41C1E815 		shrl	$21, %r8d
 1657              	.LVL251:
 933:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1658              		.loc 1 933 0
 1659 0bd5 C1E810   		shrl	$16, %eax
 1660              	.LVL252:
 935:src/vm2.c     **** 						PC  =  nPC;
 1661              		.loc 1 935 0
 1662 0bd8 4183E01F 		andl	$31, %r8d
 934:src/vm2.c     **** 						RF[rd] = RF[rs] & RF[rt];
 1663              		.loc 1 934 0
 1664 0bdc C1EA0B   		shrl	$11, %edx
 1665              	.LVL253:
 935:src/vm2.c     **** 						PC  =  nPC;
 1666              		.loc 1 935 0
 1667 0bdf 83E01F   		andl	$31, %eax
 1668 0be2 83E21F   		andl	$31, %edx
 1669 0be5 8B048500 		movl	RF(,%rax,4), %eax
 1669      000000
 1670 0bec 42230485 		andl	RF(,%r8,4), %eax
 1670      00000000 
 1671 0bf4 89049500 		movl	%eax, RF(,%rdx,4)
 1671      000000
 936:src/vm2.c     **** 						nPC  += 4;
 1672              		.loc 1 936 0
 1673 0bfb 8B050000 		movl	nPC(%rip), %eax
 1673      0000
 937:src/vm2.c     **** 						
 1674              		.loc 1 937 0
 1675 0c01 8D5004   		leal	4(%rax), %edx
 936:src/vm2.c     **** 						nPC  += 4;
 1676              		.loc 1 936 0
 1677 0c04 89050000 		movl	%eax, PC(%rip)
 1677      0000
 937:src/vm2.c     **** 						
 1678              		.loc 1 937 0
 1679 0c0a 89150000 		movl	%edx, nPC(%rip)
 1679      0000
 940:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 63


 1680              		.loc 1 940 0
 1681 0c10 8D5003   		leal	3(%rax), %edx
 1682 0c13 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1682      00000000 
 1683 0c1b 89C2     		movl	%eax, %edx
 1684 0c1d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1684      000000
 1685 0c24 C1E218   		sall	$24, %edx
 1686 0c27 4109D0   		orl	%edx, %r8d
 1687 0c2a 8D5001   		leal	1(%rax), %edx
 1688 0c2d 83C002   		addl	$2, %eax
 1689 0c30 0FB68000 		movzbl	VM_memory(%rax), %eax
 1689      000000
 1690 0c37 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1690      000000
 1691 0c3e C1E008   		sall	$8, %eax
 1692 0c41 C1E210   		sall	$16, %edx
 1693 0c44 4109D0   		orl	%edx, %r8d
 1694 0c47 4109C0   		orl	%eax, %r8d
 1695              	.LVL254:
 941:src/vm2.c     **** 						if (op == 0x0) {
 1696              		.loc 1 941 0
 1697 0c4a 4489C2   		movl	%r8d, %edx
 943:src/vm2.c     **** 						  op = op + funct;
 1698              		.loc 1 943 0
 1699 0c4d 4488C0   		movb	%r8b, %al
 941:src/vm2.c     **** 						if (op == 0x0) {
 1700              		.loc 1 941 0
 1701 0c50 C1EA1A   		shrl	$26, %edx
 1702              	.LVL255:
 943:src/vm2.c     **** 						  op = op + funct;
 1703              		.loc 1 943 0
 1704 0c53 83E03F   		andl	$63, %eax
 1705 0c56 8D4A2B   		leal	43(%rdx), %ecx
 1706 0c59 84D2     		testb	%dl, %dl
 1707 0c5b 0F45C1   		cmovne	%ecx, %eax
 1708              	.LVL256:
 949:src/vm2.c     **** 						
 1709              		.loc 1 949 0
 1710 0c5e 83E07F   		andl	$127, %eax
 1711              	.LVL257:
 1712 0c61 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1712      00000000 
 1713 0c69 E9C9FCFF 		jmp	.L112
 1713      FF
 1714              	.L131:
 1715              	.LVL258:
 959:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1716              		.loc 1 959 0
 1717 0c6e 4489C0   		movl	%r8d, %eax
 960:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 1718              		.loc 1 960 0
 1719 0c71 41C1E810 		shrl	$16, %r8d
 1720              	.LVL259:
 962:src/vm2.c     **** 						PC  =  nPC;
 1721              		.loc 1 962 0
 1722 0c75 31D2     		xorl	%edx, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 64


 959:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1723              		.loc 1 959 0
 1724 0c77 C1E815   		shrl	$21, %eax
 1725              	.LVL260:
 961:src/vm2.c     **** 						HI = RF[rs] % RF[rt];
 1726              		.loc 1 961 0
 1727 0c7a 4183E01F 		andl	$31, %r8d
 1728 0c7e 83E01F   		andl	$31, %eax
 1729 0c81 8B048500 		movl	RF(,%rax,4), %eax
 1729      000000
 1730              	.LVL261:
 962:src/vm2.c     **** 						PC  =  nPC;
 1731              		.loc 1 962 0
 1732 0c88 42F73485 		divl	RF(,%r8,4)
 1732      00000000 
 1733              	.LVL262:
 1734 0c90 89C3     		movl	%eax, %ebx
 1735              	.LVL263:
 963:src/vm2.c     **** 						nPC  += 4;
 1736              		.loc 1 963 0
 1737 0c92 8B050000 		movl	nPC(%rip), %eax
 1737      0000
 1738              	.LVL264:
 962:src/vm2.c     **** 						PC  =  nPC;
 1739              		.loc 1 962 0
 1740 0c98 4189D5   		movl	%edx, %r13d
 964:src/vm2.c     **** 
 1741              		.loc 1 964 0
 1742 0c9b 8D5004   		leal	4(%rax), %edx
 963:src/vm2.c     **** 						nPC  += 4;
 1743              		.loc 1 963 0
 1744 0c9e 89050000 		movl	%eax, PC(%rip)
 1744      0000
 964:src/vm2.c     **** 
 1745              		.loc 1 964 0
 1746 0ca4 89150000 		movl	%edx, nPC(%rip)
 1746      0000
 1747              	.LDL1:
 968:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1748              		.loc 1 968 0
 1749 0caa 8D5003   		leal	3(%rax), %edx
 1750 0cad 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1750      00000000 
 1751 0cb5 89C2     		movl	%eax, %edx
 1752 0cb7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1752      000000
 1753 0cbe C1E218   		sall	$24, %edx
 1754 0cc1 4109D0   		orl	%edx, %r8d
 1755 0cc4 8D5001   		leal	1(%rax), %edx
 1756 0cc7 83C002   		addl	$2, %eax
 1757 0cca 0FB68000 		movzbl	VM_memory(%rax), %eax
 1757      000000
 1758 0cd1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1758      000000
 1759 0cd8 C1E008   		sall	$8, %eax
 1760 0cdb C1E210   		sall	$16, %edx
 1761 0cde 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 65


 1762 0ce1 4109C0   		orl	%eax, %r8d
 1763              	.LVL265:
 969:src/vm2.c     **** 						if (op == 0x0) {
 1764              		.loc 1 969 0
 1765 0ce4 4489C2   		movl	%r8d, %edx
 971:src/vm2.c     **** 						  op = op + funct;
 1766              		.loc 1 971 0
 1767 0ce7 4488C0   		movb	%r8b, %al
 969:src/vm2.c     **** 						if (op == 0x0) {
 1768              		.loc 1 969 0
 1769 0cea C1EA1A   		shrl	$26, %edx
 1770              	.LVL266:
 971:src/vm2.c     **** 						  op = op + funct;
 1771              		.loc 1 971 0
 1772 0ced 83E03F   		andl	$63, %eax
 1773 0cf0 8D4A2B   		leal	43(%rdx), %ecx
 1774 0cf3 84D2     		testb	%dl, %dl
 1775 0cf5 0F45C1   		cmovne	%ecx, %eax
 1776              	.LVL267:
 977:src/vm2.c     **** 						
 1777              		.loc 1 977 0
 1778 0cf8 83E07F   		andl	$127, %eax
 1779              	.LVL268:
 1780 0cfb 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1780      00000000 
 1781 0d03 E92FFCFF 		jmp	.L112
 1781      FF
 1782              	.LVL269:
 1783              	.L134:
 987:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1784              		.loc 1 987 0
 1785 0d08 4489C0   		movl	%r8d, %eax
 988:src/vm2.c     **** 						LO = RF[rs] / RF[rt];
 1786              		.loc 1 988 0
 1787 0d0b 41C1E810 		shrl	$16, %r8d
 1788              	.LVL270:
 990:src/vm2.c     **** 						PC  =  nPC;
 1789              		.loc 1 990 0
 1790 0d0f 31D2     		xorl	%edx, %edx
 987:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1791              		.loc 1 987 0
 1792 0d11 C1E815   		shrl	$21, %eax
 1793              	.LVL271:
 989:src/vm2.c     **** 						HI = RF[rs] % RF[rt];  
 1794              		.loc 1 989 0
 1795 0d14 4183E01F 		andl	$31, %r8d
 1796 0d18 83E01F   		andl	$31, %eax
 1797 0d1b 8B048500 		movl	RF(,%rax,4), %eax
 1797      000000
 1798              	.LVL272:
 990:src/vm2.c     **** 						PC  =  nPC;
 1799              		.loc 1 990 0
 1800 0d22 42F73485 		divl	RF(,%r8,4)
 1800      00000000 
 1801              	.LVL273:
 1802 0d2a 89C3     		movl	%eax, %ebx
 1803              	.LVL274:
GAS LISTING /tmp/cc15eBE3.s 			page 66


 991:src/vm2.c     **** 						nPC  += 4;
 1804              		.loc 1 991 0
 1805 0d2c 8B050000 		movl	nPC(%rip), %eax
 1805      0000
 1806              	.LVL275:
 990:src/vm2.c     **** 						PC  =  nPC;
 1807              		.loc 1 990 0
 1808 0d32 4189D5   		movl	%edx, %r13d
 992:src/vm2.c     **** 						
 1809              		.loc 1 992 0
 1810 0d35 8D5004   		leal	4(%rax), %edx
 991:src/vm2.c     **** 						nPC  += 4;
 1811              		.loc 1 991 0
 1812 0d38 89050000 		movl	%eax, PC(%rip)
 1812      0000
 992:src/vm2.c     **** 						
 1813              		.loc 1 992 0
 1814 0d3e 89150000 		movl	%edx, nPC(%rip)
 1814      0000
 995:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1815              		.loc 1 995 0
 1816 0d44 8D5003   		leal	3(%rax), %edx
 1817 0d47 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1817      00000000 
 1818 0d4f 89C2     		movl	%eax, %edx
 1819 0d51 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1819      000000
 1820 0d58 C1E218   		sall	$24, %edx
 1821 0d5b 4109D0   		orl	%edx, %r8d
 1822 0d5e 8D5001   		leal	1(%rax), %edx
 1823 0d61 83C002   		addl	$2, %eax
 1824 0d64 0FB68000 		movzbl	VM_memory(%rax), %eax
 1824      000000
 1825 0d6b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1825      000000
 1826 0d72 C1E008   		sall	$8, %eax
 1827 0d75 C1E210   		sall	$16, %edx
 1828 0d78 4109D0   		orl	%edx, %r8d
 1829 0d7b 4109C0   		orl	%eax, %r8d
 1830              	.LVL276:
 996:src/vm2.c     **** 						if (op == 0x0) {
 1831              		.loc 1 996 0
 1832 0d7e 4489C2   		movl	%r8d, %edx
 998:src/vm2.c     **** 						  op = op + funct;
 1833              		.loc 1 998 0
 1834 0d81 4488C0   		movb	%r8b, %al
 996:src/vm2.c     **** 						if (op == 0x0) {
 1835              		.loc 1 996 0
 1836 0d84 C1EA1A   		shrl	$26, %edx
 1837              	.LVL277:
 998:src/vm2.c     **** 						  op = op + funct;
 1838              		.loc 1 998 0
 1839 0d87 83E03F   		andl	$63, %eax
 1840 0d8a 8D4A2B   		leal	43(%rdx), %ecx
 1841 0d8d 84D2     		testb	%dl, %dl
 1842 0d8f 0F45C1   		cmovne	%ecx, %eax
 1843              	.LVL278:
GAS LISTING /tmp/cc15eBE3.s 			page 67


1004:src/vm2.c     **** 						
 1844              		.loc 1 1004 0
 1845 0d92 83E07F   		andl	$127, %eax
 1846              	.LVL279:
 1847 0d95 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1847      00000000 
 1848 0d9d E995FBFF 		jmp	.L112
 1848      FF
 1849              	.LVL280:
 1850              	.L137:
1015:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 1851              		.loc 1 1015 0
 1852 0da2 4489C0   		movl	%r8d, %eax
1014:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1853              		.loc 1 1014 0
 1854 0da5 41C1E815 		shrl	$21, %r8d
 1855              	.LVL281:
1015:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 1856              		.loc 1 1015 0
 1857 0da9 C1E810   		shrl	$16, %eax
 1858              	.LVL282:
1016:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 1859              		.loc 1 1016 0
 1860 0dac 4183E01F 		andl	$31, %r8d
 1861 0db0 83E01F   		andl	$31, %eax
 1862 0db3 8B1C8500 		movl	RF(,%rax,4), %ebx
 1862      000000
 1863              	.LVL283:
 1864 0dba 428B0485 		movl	RF(,%r8,4), %eax
 1864      00000000 
 1865 0dc2 480FAFD8 		imulq	%rax, %rbx
 1866              	.LVL284:
1017:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;
 1867              		.loc 1 1017 0
 1868 0dc6 4889D8   		movq	%rbx, %rax
 1869 0dc9 48C1E820 		shrq	$32, %rax
 1870 0dcd 4989C5   		movq	%rax, %r13
 1871              	.LVL285:
1019:src/vm2.c     **** 						nPC  += 4;
 1872              		.loc 1 1019 0
 1873 0dd0 8B050000 		movl	nPC(%rip), %eax
 1873      0000
 1874              	.LVL286:
1020:src/vm2.c     **** 						
 1875              		.loc 1 1020 0
 1876 0dd6 8D5004   		leal	4(%rax), %edx
1019:src/vm2.c     **** 						nPC  += 4;
 1877              		.loc 1 1019 0
 1878 0dd9 89050000 		movl	%eax, PC(%rip)
 1878      0000
1020:src/vm2.c     **** 						
 1879              		.loc 1 1020 0
 1880 0ddf 89150000 		movl	%edx, nPC(%rip)
 1880      0000
1023:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1881              		.loc 1 1023 0
 1882 0de5 8D5003   		leal	3(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 68


 1883 0de8 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1883      00000000 
 1884 0df0 89C2     		movl	%eax, %edx
 1885 0df2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1885      000000
 1886 0df9 C1E218   		sall	$24, %edx
 1887 0dfc 4109D0   		orl	%edx, %r8d
 1888 0dff 8D5001   		leal	1(%rax), %edx
 1889 0e02 83C002   		addl	$2, %eax
 1890 0e05 0FB68000 		movzbl	VM_memory(%rax), %eax
 1890      000000
 1891 0e0c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1891      000000
 1892 0e13 C1E008   		sall	$8, %eax
 1893 0e16 C1E210   		sall	$16, %edx
 1894 0e19 4109D0   		orl	%edx, %r8d
 1895 0e1c 4109C0   		orl	%eax, %r8d
 1896              	.LVL287:
1024:src/vm2.c     **** 						if (op == 0x0) {
 1897              		.loc 1 1024 0
 1898 0e1f 4489C2   		movl	%r8d, %edx
1026:src/vm2.c     **** 						  op = op + funct;
 1899              		.loc 1 1026 0
 1900 0e22 4488C0   		movb	%r8b, %al
1024:src/vm2.c     **** 						if (op == 0x0) {
 1901              		.loc 1 1024 0
 1902 0e25 C1EA1A   		shrl	$26, %edx
 1903              	.LVL288:
1026:src/vm2.c     **** 						  op = op + funct;
 1904              		.loc 1 1026 0
 1905 0e28 83E03F   		andl	$63, %eax
 1906 0e2b 8D4A2B   		leal	43(%rdx), %ecx
 1907 0e2e 84D2     		testb	%dl, %dl
 1908 0e30 0F45C1   		cmovne	%ecx, %eax
 1909              	.LVL289:
1032:src/vm2.c     **** 						
 1910              		.loc 1 1032 0
 1911 0e33 83E07F   		andl	$127, %eax
 1912              	.LVL290:
 1913 0e36 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1913      00000000 
 1914 0e3e E9F4FAFF 		jmp	.L112
 1914      FF
 1915              	.LVL291:
 1916              	.L140:
1043:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 1917              		.loc 1 1043 0
 1918 0e43 4489C0   		movl	%r8d, %eax
1042:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1919              		.loc 1 1042 0
 1920 0e46 41C1E815 		shrl	$21, %r8d
 1921              	.LVL292:
1043:src/vm2.c     **** 						mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 1922              		.loc 1 1043 0
 1923 0e4a C1E810   		shrl	$16, %eax
 1924              	.LVL293:
1044:src/vm2.c     **** 						HI = (mult >> 32) & 0xFFFFFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 69


 1925              		.loc 1 1044 0
 1926 0e4d 4183E01F 		andl	$31, %r8d
 1927 0e51 83E01F   		andl	$31, %eax
 1928 0e54 8B1C8500 		movl	RF(,%rax,4), %ebx
 1928      000000
 1929              	.LVL294:
 1930 0e5b 428B0485 		movl	RF(,%r8,4), %eax
 1930      00000000 
 1931 0e63 480FAFD8 		imulq	%rax, %rbx
 1932              	.LVL295:
1045:src/vm2.c     **** 						LO = mult & 0xFFFFFFFF;  
 1933              		.loc 1 1045 0
 1934 0e67 4889D8   		movq	%rbx, %rax
 1935 0e6a 48C1E820 		shrq	$32, %rax
 1936 0e6e 4989C5   		movq	%rax, %r13
 1937              	.LVL296:
1047:src/vm2.c     **** 						nPC  += 4;
 1938              		.loc 1 1047 0
 1939 0e71 8B050000 		movl	nPC(%rip), %eax
 1939      0000
 1940              	.LVL297:
1048:src/vm2.c     **** 						
 1941              		.loc 1 1048 0
 1942 0e77 8D5004   		leal	4(%rax), %edx
1047:src/vm2.c     **** 						nPC  += 4;
 1943              		.loc 1 1047 0
 1944 0e7a 89050000 		movl	%eax, PC(%rip)
 1944      0000
1048:src/vm2.c     **** 						
 1945              		.loc 1 1048 0
 1946 0e80 89150000 		movl	%edx, nPC(%rip)
 1946      0000
1051:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 1947              		.loc 1 1051 0
 1948 0e86 8D5003   		leal	3(%rax), %edx
 1949 0e89 440FB682 		movzbl	VM_memory(%rdx), %r8d
 1949      00000000 
 1950 0e91 89C2     		movl	%eax, %edx
 1951 0e93 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1951      000000
 1952 0e9a C1E218   		sall	$24, %edx
 1953 0e9d 4109D0   		orl	%edx, %r8d
 1954 0ea0 8D5001   		leal	1(%rax), %edx
 1955 0ea3 83C002   		addl	$2, %eax
 1956 0ea6 0FB68000 		movzbl	VM_memory(%rax), %eax
 1956      000000
 1957 0ead 0FB69200 		movzbl	VM_memory(%rdx), %edx
 1957      000000
 1958 0eb4 C1E008   		sall	$8, %eax
 1959 0eb7 C1E210   		sall	$16, %edx
 1960 0eba 4109D0   		orl	%edx, %r8d
 1961 0ebd 4109C0   		orl	%eax, %r8d
 1962              	.LVL298:
1052:src/vm2.c     **** 						if (op == 0x0) {
 1963              		.loc 1 1052 0
 1964 0ec0 4489C2   		movl	%r8d, %edx
1054:src/vm2.c     **** 						  op = op + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 70


 1965              		.loc 1 1054 0
 1966 0ec3 4488C0   		movb	%r8b, %al
1052:src/vm2.c     **** 						if (op == 0x0) {
 1967              		.loc 1 1052 0
 1968 0ec6 C1EA1A   		shrl	$26, %edx
 1969              	.LVL299:
1054:src/vm2.c     **** 						  op = op + funct;
 1970              		.loc 1 1054 0
 1971 0ec9 83E03F   		andl	$63, %eax
 1972 0ecc 8D4A2B   		leal	43(%rdx), %ecx
 1973 0ecf 84D2     		testb	%dl, %dl
 1974 0ed1 0F45C1   		cmovne	%ecx, %eax
 1975              	.LVL300:
1060:src/vm2.c     **** 						
 1976              		.loc 1 1060 0
 1977 0ed4 83E07F   		andl	$127, %eax
 1978              	.LVL301:
 1979 0ed7 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 1979      00000000 
 1980 0edf E953FAFF 		jmp	.L112
 1980      FF
 1981              	.LVL302:
 1982              	.L143:
1071:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1983              		.loc 1 1071 0
 1984 0ee4 4489C0   		movl	%r8d, %eax
1072:src/vm2.c     **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 1985              		.loc 1 1072 0
 1986 0ee7 4489C2   		movl	%r8d, %edx
1070:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 1987              		.loc 1 1070 0
 1988 0eea 41C1E815 		shrl	$21, %r8d
 1989              	.LVL303:
1071:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 1990              		.loc 1 1071 0
 1991 0eee C1E810   		shrl	$16, %eax
 1992              	.LVL304:
1073:src/vm2.c     **** 						PC  =  nPC;
 1993              		.loc 1 1073 0
 1994 0ef1 4183E01F 		andl	$31, %r8d
1072:src/vm2.c     **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 1995              		.loc 1 1072 0
 1996 0ef5 C1EA0B   		shrl	$11, %edx
 1997              	.LVL305:
1073:src/vm2.c     **** 						PC  =  nPC;
 1998              		.loc 1 1073 0
 1999 0ef8 83E01F   		andl	$31, %eax
 2000 0efb 83E21F   		andl	$31, %edx
 2001 0efe 8B048500 		movl	RF(,%rax,4), %eax
 2001      000000
 2002 0f05 420B0485 		orl	RF(,%r8,4), %eax
 2002      00000000 
 2003 0f0d F7D0     		notl	%eax
 2004 0f0f 89049500 		movl	%eax, RF(,%rdx,4)
 2004      000000
1074:src/vm2.c     **** 						nPC  += 4;
 2005              		.loc 1 1074 0
GAS LISTING /tmp/cc15eBE3.s 			page 71


 2006 0f16 8B050000 		movl	nPC(%rip), %eax
 2006      0000
1075:src/vm2.c     **** 						
 2007              		.loc 1 1075 0
 2008 0f1c 8D5004   		leal	4(%rax), %edx
1074:src/vm2.c     **** 						nPC  += 4;
 2009              		.loc 1 1074 0
 2010 0f1f 89050000 		movl	%eax, PC(%rip)
 2010      0000
1075:src/vm2.c     **** 						
 2011              		.loc 1 1075 0
 2012 0f25 89150000 		movl	%edx, nPC(%rip)
 2012      0000
1078:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2013              		.loc 1 1078 0
 2014 0f2b 8D5003   		leal	3(%rax), %edx
 2015 0f2e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2015      00000000 
 2016 0f36 89C2     		movl	%eax, %edx
 2017 0f38 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2017      000000
 2018 0f3f C1E218   		sall	$24, %edx
 2019 0f42 4109D0   		orl	%edx, %r8d
 2020 0f45 8D5001   		leal	1(%rax), %edx
 2021 0f48 83C002   		addl	$2, %eax
 2022 0f4b 0FB68000 		movzbl	VM_memory(%rax), %eax
 2022      000000
 2023 0f52 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2023      000000
 2024 0f59 C1E008   		sall	$8, %eax
 2025 0f5c C1E210   		sall	$16, %edx
 2026 0f5f 4109D0   		orl	%edx, %r8d
 2027 0f62 4109C0   		orl	%eax, %r8d
 2028              	.LVL306:
1079:src/vm2.c     **** 						if (op == 0x0) {
 2029              		.loc 1 1079 0
 2030 0f65 4489C2   		movl	%r8d, %edx
1081:src/vm2.c     **** 						  op = op + funct;
 2031              		.loc 1 1081 0
 2032 0f68 4488C0   		movb	%r8b, %al
1079:src/vm2.c     **** 						if (op == 0x0) {
 2033              		.loc 1 1079 0
 2034 0f6b C1EA1A   		shrl	$26, %edx
 2035              	.LVL307:
1081:src/vm2.c     **** 						  op = op + funct;
 2036              		.loc 1 1081 0
 2037 0f6e 83E03F   		andl	$63, %eax
 2038 0f71 8D4A2B   		leal	43(%rdx), %ecx
 2039 0f74 84D2     		testb	%dl, %dl
 2040 0f76 0F45C1   		cmovne	%ecx, %eax
 2041              	.LVL308:
1087:src/vm2.c     **** 						
 2042              		.loc 1 1087 0
 2043 0f79 83E07F   		andl	$127, %eax
 2044              	.LVL309:
 2045 0f7c 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2045      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 72


 2046 0f84 E9AEF9FF 		jmp	.L112
 2046      FF
 2047              	.L146:
 2048              	.LVL310:
1098:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2049              		.loc 1 1098 0
 2050 0f89 4489C0   		movl	%r8d, %eax
1099:src/vm2.c     **** 						RF[rd] = RF[rs] | RF[rt];
 2051              		.loc 1 1099 0
 2052 0f8c 4489C2   		movl	%r8d, %edx
1097:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2053              		.loc 1 1097 0
 2054 0f8f 41C1E815 		shrl	$21, %r8d
 2055              	.LVL311:
1098:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2056              		.loc 1 1098 0
 2057 0f93 C1E810   		shrl	$16, %eax
 2058              	.LVL312:
1100:src/vm2.c     **** 						PC  =  nPC;
 2059              		.loc 1 1100 0
 2060 0f96 4183E01F 		andl	$31, %r8d
1099:src/vm2.c     **** 						RF[rd] = RF[rs] | RF[rt];
 2061              		.loc 1 1099 0
 2062 0f9a C1EA0B   		shrl	$11, %edx
 2063              	.LVL313:
1100:src/vm2.c     **** 						PC  =  nPC;
 2064              		.loc 1 1100 0
 2065 0f9d 83E01F   		andl	$31, %eax
 2066 0fa0 83E21F   		andl	$31, %edx
 2067 0fa3 8B048500 		movl	RF(,%rax,4), %eax
 2067      000000
 2068 0faa 420B0485 		orl	RF(,%r8,4), %eax
 2068      00000000 
 2069 0fb2 89049500 		movl	%eax, RF(,%rdx,4)
 2069      000000
1101:src/vm2.c     **** 						nPC  += 4;
 2070              		.loc 1 1101 0
 2071 0fb9 8B050000 		movl	nPC(%rip), %eax
 2071      0000
1102:src/vm2.c     **** 						
 2072              		.loc 1 1102 0
 2073 0fbf 8D5004   		leal	4(%rax), %edx
1101:src/vm2.c     **** 						nPC  += 4;
 2074              		.loc 1 1101 0
 2075 0fc2 89050000 		movl	%eax, PC(%rip)
 2075      0000
1102:src/vm2.c     **** 						
 2076              		.loc 1 1102 0
 2077 0fc8 89150000 		movl	%edx, nPC(%rip)
 2077      0000
1105:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2078              		.loc 1 1105 0
 2079 0fce 8D5003   		leal	3(%rax), %edx
 2080 0fd1 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2080      00000000 
 2081 0fd9 89C2     		movl	%eax, %edx
 2082 0fdb 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 73


 2082      000000
 2083 0fe2 C1E218   		sall	$24, %edx
 2084 0fe5 4109D0   		orl	%edx, %r8d
 2085 0fe8 8D5001   		leal	1(%rax), %edx
 2086 0feb 83C002   		addl	$2, %eax
 2087 0fee 0FB68000 		movzbl	VM_memory(%rax), %eax
 2087      000000
 2088 0ff5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2088      000000
 2089 0ffc C1E008   		sall	$8, %eax
 2090 0fff C1E210   		sall	$16, %edx
 2091 1002 4109D0   		orl	%edx, %r8d
 2092 1005 4109C0   		orl	%eax, %r8d
 2093              	.LVL314:
1106:src/vm2.c     **** 						if (op == 0x0) {
 2094              		.loc 1 1106 0
 2095 1008 4489C2   		movl	%r8d, %edx
1108:src/vm2.c     **** 						  op = op + funct;
 2096              		.loc 1 1108 0
 2097 100b 4488C0   		movb	%r8b, %al
1106:src/vm2.c     **** 						if (op == 0x0) {
 2098              		.loc 1 1106 0
 2099 100e C1EA1A   		shrl	$26, %edx
 2100              	.LVL315:
1108:src/vm2.c     **** 						  op = op + funct;
 2101              		.loc 1 1108 0
 2102 1011 83E03F   		andl	$63, %eax
 2103 1014 8D4A2B   		leal	43(%rdx), %ecx
 2104 1017 84D2     		testb	%dl, %dl
 2105 1019 0F45C1   		cmovne	%ecx, %eax
 2106              	.LVL316:
1114:src/vm2.c     **** 						
 2107              		.loc 1 1114 0
 2108 101c 83E07F   		andl	$127, %eax
 2109              	.LVL317:
 2110 101f 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2110      00000000 
 2111 1027 E90BF9FF 		jmp	.L112
 2111      FF
 2112              	.L149:
 2113              	.LVL318:
1125:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2114              		.loc 1 1125 0
 2115 102c 4489C0   		movl	%r8d, %eax
1126:src/vm2.c     **** 						RF[rd] = RF[rt] << shamt;
 2116              		.loc 1 1126 0
 2117 102f 4489C2   		movl	%r8d, %edx
1124:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2118              		.loc 1 1124 0
 2119 1032 41C1E806 		shrl	$6, %r8d
 2120              	.LVL319:
1125:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2121              		.loc 1 1125 0
 2122 1036 C1E810   		shrl	$16, %eax
 2123              	.LVL320:
1124:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2124              		.loc 1 1124 0
GAS LISTING /tmp/cc15eBE3.s 			page 74


 2125 1039 4488C1   		movb	%r8b, %cl
1126:src/vm2.c     **** 						RF[rd] = RF[rt] << shamt;
 2126              		.loc 1 1126 0
 2127 103c C1EA0B   		shrl	$11, %edx
 2128              	.LVL321:
1127:src/vm2.c     **** 						PC  =  nPC;
 2129              		.loc 1 1127 0
 2130 103f 83E01F   		andl	$31, %eax
1124:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2131              		.loc 1 1124 0
 2132 1042 83E11F   		andl	$31, %ecx
1127:src/vm2.c     **** 						PC  =  nPC;
 2133              		.loc 1 1127 0
 2134 1045 83E21F   		andl	$31, %edx
 2135 1048 8B048500 		movl	RF(,%rax,4), %eax
 2135      000000
 2136 104f D3E0     		sall	%cl, %eax
 2137 1051 89049500 		movl	%eax, RF(,%rdx,4)
 2137      000000
1128:src/vm2.c     **** 						nPC  += 4;
 2138              		.loc 1 1128 0
 2139 1058 8B050000 		movl	nPC(%rip), %eax
 2139      0000
1129:src/vm2.c     **** 						
 2140              		.loc 1 1129 0
 2141 105e 8D5004   		leal	4(%rax), %edx
1128:src/vm2.c     **** 						nPC  += 4;
 2142              		.loc 1 1128 0
 2143 1061 89050000 		movl	%eax, PC(%rip)
 2143      0000
1129:src/vm2.c     **** 						
 2144              		.loc 1 1129 0
 2145 1067 89150000 		movl	%edx, nPC(%rip)
 2145      0000
1132:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2146              		.loc 1 1132 0
 2147 106d 8D5003   		leal	3(%rax), %edx
 2148 1070 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2148      00000000 
 2149 1078 89C2     		movl	%eax, %edx
 2150 107a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2150      000000
 2151 1081 C1E218   		sall	$24, %edx
 2152 1084 4109D0   		orl	%edx, %r8d
 2153 1087 8D5001   		leal	1(%rax), %edx
 2154 108a 83C002   		addl	$2, %eax
 2155 108d 0FB68000 		movzbl	VM_memory(%rax), %eax
 2155      000000
 2156 1094 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2156      000000
 2157 109b C1E008   		sall	$8, %eax
 2158 109e C1E210   		sall	$16, %edx
 2159 10a1 4109D0   		orl	%edx, %r8d
 2160 10a4 4109C0   		orl	%eax, %r8d
 2161              	.LVL322:
1133:src/vm2.c     **** 						if (op == 0x0) {
 2162              		.loc 1 1133 0
GAS LISTING /tmp/cc15eBE3.s 			page 75


 2163 10a7 4489C2   		movl	%r8d, %edx
1135:src/vm2.c     **** 						  op = op + funct;
 2164              		.loc 1 1135 0
 2165 10aa 4488C0   		movb	%r8b, %al
1133:src/vm2.c     **** 						if (op == 0x0) {
 2166              		.loc 1 1133 0
 2167 10ad C1EA1A   		shrl	$26, %edx
 2168              	.LVL323:
1135:src/vm2.c     **** 						  op = op + funct;
 2169              		.loc 1 1135 0
 2170 10b0 83E03F   		andl	$63, %eax
 2171 10b3 8D4A2B   		leal	43(%rdx), %ecx
 2172 10b6 84D2     		testb	%dl, %dl
 2173 10b8 0F45C1   		cmovne	%ecx, %eax
 2174              	.LVL324:
1141:src/vm2.c     **** 						
 2175              		.loc 1 1141 0
 2176 10bb 83E07F   		andl	$127, %eax
 2177              	.LVL325:
 2178 10be 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2178      00000000 
 2179 10c6 E96CF8FF 		jmp	.L112
 2179      FF
 2180              	.L152:
 2181              	.LVL326:
1152:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2182              		.loc 1 1152 0
 2183 10cb 4489C0   		movl	%r8d, %eax
1153:src/vm2.c     **** 						RF[rd] = RF[rt] << RF[rs];
 2184              		.loc 1 1153 0
 2185 10ce 4489C2   		movl	%r8d, %edx
1151:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2186              		.loc 1 1151 0
 2187 10d1 41C1E815 		shrl	$21, %r8d
 2188              	.LVL327:
1152:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2189              		.loc 1 1152 0
 2190 10d5 C1E810   		shrl	$16, %eax
 2191              	.LVL328:
1154:src/vm2.c     **** 						PC  =  nPC;
 2192              		.loc 1 1154 0
 2193 10d8 4183E01F 		andl	$31, %r8d
1153:src/vm2.c     **** 						RF[rd] = RF[rt] << RF[rs];
 2194              		.loc 1 1153 0
 2195 10dc C1EA0B   		shrl	$11, %edx
 2196              	.LVL329:
1154:src/vm2.c     **** 						PC  =  nPC;
 2197              		.loc 1 1154 0
 2198 10df 83E01F   		andl	$31, %eax
 2199 10e2 428B0C85 		movl	RF(,%r8,4), %ecx
 2199      00000000 
 2200 10ea 83E21F   		andl	$31, %edx
 2201 10ed 8B048500 		movl	RF(,%rax,4), %eax
 2201      000000
 2202 10f4 D3E0     		sall	%cl, %eax
 2203 10f6 89049500 		movl	%eax, RF(,%rdx,4)
 2203      000000
GAS LISTING /tmp/cc15eBE3.s 			page 76


1155:src/vm2.c     **** 						nPC  += 4;
 2204              		.loc 1 1155 0
 2205 10fd 8B050000 		movl	nPC(%rip), %eax
 2205      0000
1156:src/vm2.c     **** 						
 2206              		.loc 1 1156 0
 2207 1103 8D5004   		leal	4(%rax), %edx
1155:src/vm2.c     **** 						nPC  += 4;
 2208              		.loc 1 1155 0
 2209 1106 89050000 		movl	%eax, PC(%rip)
 2209      0000
1156:src/vm2.c     **** 						
 2210              		.loc 1 1156 0
 2211 110c 89150000 		movl	%edx, nPC(%rip)
 2211      0000
1159:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2212              		.loc 1 1159 0
 2213 1112 8D5003   		leal	3(%rax), %edx
 2214 1115 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2214      00000000 
 2215 111d 89C2     		movl	%eax, %edx
 2216 111f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2216      000000
 2217 1126 C1E218   		sall	$24, %edx
 2218 1129 4109D0   		orl	%edx, %r8d
 2219 112c 8D5001   		leal	1(%rax), %edx
 2220 112f 83C002   		addl	$2, %eax
 2221 1132 0FB68000 		movzbl	VM_memory(%rax), %eax
 2221      000000
 2222 1139 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2222      000000
 2223 1140 C1E008   		sall	$8, %eax
 2224 1143 C1E210   		sall	$16, %edx
 2225 1146 4109D0   		orl	%edx, %r8d
 2226 1149 4109C0   		orl	%eax, %r8d
 2227              	.LVL330:
1160:src/vm2.c     **** 						if (op == 0x0) {
 2228              		.loc 1 1160 0
 2229 114c 4489C2   		movl	%r8d, %edx
1162:src/vm2.c     **** 						  op = op + funct;
 2230              		.loc 1 1162 0
 2231 114f 4488C0   		movb	%r8b, %al
1160:src/vm2.c     **** 						if (op == 0x0) {
 2232              		.loc 1 1160 0
 2233 1152 C1EA1A   		shrl	$26, %edx
 2234              	.LVL331:
1162:src/vm2.c     **** 						  op = op + funct;
 2235              		.loc 1 1162 0
 2236 1155 83E03F   		andl	$63, %eax
 2237 1158 8D4A2B   		leal	43(%rdx), %ecx
 2238 115b 84D2     		testb	%dl, %dl
 2239 115d 0F45C1   		cmovne	%ecx, %eax
 2240              	.LVL332:
1168:src/vm2.c     **** 						
 2241              		.loc 1 1168 0
 2242 1160 83E07F   		andl	$127, %eax
 2243              	.LVL333:
GAS LISTING /tmp/cc15eBE3.s 			page 77


 2244 1163 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2244      00000000 
 2245 116b E9C7F7FF 		jmp	.L112
 2245      FF
 2246              	.L155:
1179:src/vm2.c     **** 						if ((int32_t)RF[rt] < 0 && shamt > 0) {
 2247              		.loc 1 1179 0
 2248 1170 4489C0   		movl	%r8d, %eax
1178:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2249              		.loc 1 1178 0
 2250 1173 4489C1   		movl	%r8d, %ecx
1181:src/vm2.c     **** 						  RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 2251              		.loc 1 1181 0
 2252 1176 41C1E80B 		shrl	$11, %r8d
 2253              	.LVL334:
1179:src/vm2.c     **** 						if ((int32_t)RF[rt] < 0 && shamt > 0) {
 2254              		.loc 1 1179 0
 2255 117a C1E810   		shrl	$16, %eax
 2256              	.LVL335:
1178:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2257              		.loc 1 1178 0
 2258 117d C1E906   		shrl	$6, %ecx
 2259              	.LVL336:
 2260              		.loc 1 1182 0
 2261 1180 4183E01F 		andl	$31, %r8d
1180:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 2262              		.loc 1 1180 0
 2263 1184 83E01F   		andl	$31, %eax
1178:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2264              		.loc 1 1178 0
 2265 1187 83E11F   		andl	$31, %ecx
 2266              	.LVL337:
1180:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 2267              		.loc 1 1180 0
 2268 118a 8B148500 		movl	RF(,%rax,4), %edx
 2268      000000
 2269 1191 85D2     		testl	%edx, %edx
 2270 1193 7917     		jns	.L156
1180:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
 2271              		.loc 1 1180 0 is_stmt 0 discriminator 1
 2272 1195 84C9     		testb	%cl, %cl
 2273 1197 7413     		je	.L156
 2274              	.LVL338:
 2275              		.loc 1 1182 0 is_stmt 1
 2276 1199 4489E0   		movl	%r12d, %eax
 2277 119c D3E8     		shrl	%cl, %eax
 2278 119e F7D0     		notl	%eax
 2279 11a0 09D0     		orl	%edx, %eax
 2280 11a2 42890485 		movl	%eax, RF(,%r8,4)
 2280      00000000 
 2281 11aa EB0A     		jmp	.L157
 2282              	.LVL339:
 2283              	.L156:
1183:src/vm2.c     **** 						}
1184:src/vm2.c     **** 						else {
1185:src/vm2.c     **** 						  rd = (instr >> 11) & 0x1F;
1186:src/vm2.c     **** 						  RF[rd] = (int32_t)RF[rt] >> shamt;
GAS LISTING /tmp/cc15eBE3.s 			page 78


 2284              		.loc 1 1186 0
 2285 11ac D3FA     		sarl	%cl, %edx
 2286 11ae 42891485 		movl	%edx, RF(,%r8,4)
 2286      00000000 
 2287              	.LVL340:
 2288              	.L157:
1187:src/vm2.c     **** 						}
1188:src/vm2.c     **** 						PC  =  nPC;
 2289              		.loc 1 1188 0
 2290 11b6 8B050000 		movl	nPC(%rip), %eax
 2290      0000
1189:src/vm2.c     **** 						nPC  += 4;
 2291              		.loc 1 1189 0
 2292 11bc 8D5004   		leal	4(%rax), %edx
1188:src/vm2.c     **** 						nPC  += 4;
 2293              		.loc 1 1188 0
 2294 11bf 89050000 		movl	%eax, PC(%rip)
 2294      0000
 2295              		.loc 1 1189 0
 2296 11c5 89150000 		movl	%edx, nPC(%rip)
 2296      0000
1190:src/vm2.c     **** 						
1191:src/vm2.c     **** 						// FETCH
1192:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2297              		.loc 1 1192 0
 2298 11cb 8D5003   		leal	3(%rax), %edx
 2299 11ce 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2299      00000000 
 2300 11d6 89C2     		movl	%eax, %edx
 2301 11d8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2301      000000
 2302 11df C1E218   		sall	$24, %edx
 2303 11e2 4109D0   		orl	%edx, %r8d
 2304 11e5 8D5001   		leal	1(%rax), %edx
 2305 11e8 83C002   		addl	$2, %eax
 2306 11eb 0FB68000 		movzbl	VM_memory(%rax), %eax
 2306      000000
 2307 11f2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2307      000000
 2308 11f9 C1E008   		sall	$8, %eax
 2309 11fc C1E210   		sall	$16, %edx
 2310 11ff 4109D0   		orl	%edx, %r8d
 2311 1202 4109C0   		orl	%eax, %r8d
 2312              	.LVL341:
1193:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2313              		.loc 1 1193 0
 2314 1205 4489C2   		movl	%r8d, %edx
1194:src/vm2.c     **** 						if (op == 0x0) {
1195:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2315              		.loc 1 1195 0
 2316 1208 4488C0   		movb	%r8b, %al
1193:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2317              		.loc 1 1193 0
 2318 120b C1EA1A   		shrl	$26, %edx
 2319              	.LVL342:
 2320              		.loc 1 1195 0
 2321 120e 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 79


 2322 1211 8D4A2B   		leal	43(%rdx), %ecx
 2323              	.LVL343:
 2324 1214 84D2     		testb	%dl, %dl
 2325 1216 0F45C1   		cmovne	%ecx, %eax
 2326              	.LVL344:
1196:src/vm2.c     **** 						  op = op + funct;
1197:src/vm2.c     **** 						}
1198:src/vm2.c     **** 						else {
1199:src/vm2.c     **** 						  op = op + FIX_OP;
1200:src/vm2.c     **** 						}
1201:src/vm2.c     **** 						goto *array[op];
 2327              		.loc 1 1201 0
 2328 1219 83E07F   		andl	$127, %eax
 2329              	.LVL345:
 2330 121c 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2330      00000000 
 2331 1224 E90EF7FF 		jmp	.L112
 2331      FF
 2332              	.L160:
 2333              	.LVL346:
1202:src/vm2.c     **** 						
1203:src/vm2.c     **** 		//				break;
1204:src/vm2.c     **** 		//			}
1205:src/vm2.c     **** 		// 0+7=7		case 0b000111: { // srav	000111	ShiftV		$d = $t >> $s
1206:src/vm2.c     **** 		srav:
1207:src/vm2.c     **** #if INDIRECT_DEBUG
1208:src/vm2.c     **** printf("%d|srav\n",counter);
1209:src/vm2.c     **** counter++;
1210:src/vm2.c     **** #endif
1211:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1212:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2334              		.loc 1 1212 0
 2335 1229 4489C0   		movl	%r8d, %eax
1213:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2336              		.loc 1 1213 0
 2337 122c 4489C2   		movl	%r8d, %edx
1211:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2338              		.loc 1 1211 0
 2339 122f 41C1E815 		shrl	$21, %r8d
 2340              	.LVL347:
1212:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2341              		.loc 1 1212 0
 2342 1233 C1E810   		shrl	$16, %eax
 2343              	.LVL348:
1214:src/vm2.c     **** 						RF[rd] = RF[rt] >> RF[rs];
 2344              		.loc 1 1214 0
 2345 1236 4183E01F 		andl	$31, %r8d
1213:src/vm2.c     **** 						RF[rd] = RF[rt] >> RF[rs];
 2346              		.loc 1 1213 0
 2347 123a C1EA0B   		shrl	$11, %edx
 2348              	.LVL349:
 2349              		.loc 1 1214 0
 2350 123d 83E01F   		andl	$31, %eax
 2351 1240 428B0C85 		movl	RF(,%r8,4), %ecx
 2351      00000000 
 2352 1248 83E21F   		andl	$31, %edx
 2353 124b 8B048500 		movl	RF(,%rax,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 80


 2353      000000
 2354 1252 D3E8     		shrl	%cl, %eax
 2355 1254 89049500 		movl	%eax, RF(,%rdx,4)
 2355      000000
1215:src/vm2.c     **** 						PC  =  nPC;
 2356              		.loc 1 1215 0
 2357 125b 8B050000 		movl	nPC(%rip), %eax
 2357      0000
1216:src/vm2.c     **** 						nPC  += 4;
 2358              		.loc 1 1216 0
 2359 1261 8D5004   		leal	4(%rax), %edx
1215:src/vm2.c     **** 						PC  =  nPC;
 2360              		.loc 1 1215 0
 2361 1264 89050000 		movl	%eax, PC(%rip)
 2361      0000
 2362              		.loc 1 1216 0
 2363 126a 89150000 		movl	%edx, nPC(%rip)
 2363      0000
1217:src/vm2.c     **** 						
1218:src/vm2.c     **** 						// FETCH
1219:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2364              		.loc 1 1219 0
 2365 1270 8D5003   		leal	3(%rax), %edx
 2366 1273 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2366      00000000 
 2367 127b 89C2     		movl	%eax, %edx
 2368 127d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2368      000000
 2369 1284 C1E218   		sall	$24, %edx
 2370 1287 4109D0   		orl	%edx, %r8d
 2371 128a 8D5001   		leal	1(%rax), %edx
 2372 128d 83C002   		addl	$2, %eax
 2373 1290 0FB68000 		movzbl	VM_memory(%rax), %eax
 2373      000000
 2374 1297 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2374      000000
 2375 129e C1E008   		sall	$8, %eax
 2376 12a1 C1E210   		sall	$16, %edx
 2377 12a4 4109D0   		orl	%edx, %r8d
 2378 12a7 4109C0   		orl	%eax, %r8d
 2379              	.LVL350:
1220:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2380              		.loc 1 1220 0
 2381 12aa 4489C2   		movl	%r8d, %edx
1221:src/vm2.c     **** 						if (op == 0x0) {
1222:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2382              		.loc 1 1222 0
 2383 12ad 4488C0   		movb	%r8b, %al
1220:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2384              		.loc 1 1220 0
 2385 12b0 C1EA1A   		shrl	$26, %edx
 2386              	.LVL351:
 2387              		.loc 1 1222 0
 2388 12b3 83E03F   		andl	$63, %eax
 2389 12b6 8D4A2B   		leal	43(%rdx), %ecx
 2390 12b9 84D2     		testb	%dl, %dl
 2391 12bb 0F45C1   		cmovne	%ecx, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 81


 2392              	.LVL352:
1223:src/vm2.c     **** 						  op = op + funct;
1224:src/vm2.c     **** 						}
1225:src/vm2.c     **** 						else {
1226:src/vm2.c     **** 						  op = op + FIX_OP;
1227:src/vm2.c     **** 						}
1228:src/vm2.c     **** 						goto *array[op];
 2393              		.loc 1 1228 0
 2394 12be 83E07F   		andl	$127, %eax
 2395              	.LVL353:
 2396 12c1 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2396      00000000 
 2397 12c9 E969F6FF 		jmp	.L112
 2397      FF
 2398              	.L163:
 2399              	.LVL354:
1229:src/vm2.c     **** 						
1230:src/vm2.c     **** 		//				break;
1231:src/vm2.c     **** 		//			}
1232:src/vm2.c     **** 		// 0+2=2		case 0b000010: { // srl		000010	Shift		$d = $t >>> a
1233:src/vm2.c     **** 		srl:
1234:src/vm2.c     **** #if INDIRECT_DEBUG
1235:src/vm2.c     **** printf("%d|srl\n",counter);
1236:src/vm2.c     **** counter++;
1237:src/vm2.c     **** #endif
1238:src/vm2.c     **** 						shamt = (instr >> 6) & 0x1F;
1239:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2400              		.loc 1 1239 0
 2401 12ce 4489C0   		movl	%r8d, %eax
1240:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2402              		.loc 1 1240 0
 2403 12d1 4489C2   		movl	%r8d, %edx
1238:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2404              		.loc 1 1238 0
 2405 12d4 41C1E806 		shrl	$6, %r8d
 2406              	.LVL355:
1239:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2407              		.loc 1 1239 0
 2408 12d8 C1E810   		shrl	$16, %eax
 2409              	.LVL356:
1238:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2410              		.loc 1 1238 0
 2411 12db 4488C1   		movb	%r8b, %cl
 2412              		.loc 1 1240 0
 2413 12de C1EA0B   		shrl	$11, %edx
 2414              	.LVL357:
1241:src/vm2.c     **** 						RF[rd] = RF[rt] >> shamt;
 2415              		.loc 1 1241 0
 2416 12e1 83E01F   		andl	$31, %eax
1238:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2417              		.loc 1 1238 0
 2418 12e4 83E11F   		andl	$31, %ecx
 2419              		.loc 1 1241 0
 2420 12e7 83E21F   		andl	$31, %edx
 2421 12ea 8B048500 		movl	RF(,%rax,4), %eax
 2421      000000
 2422 12f1 D3E8     		shrl	%cl, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 82


 2423 12f3 89049500 		movl	%eax, RF(,%rdx,4)
 2423      000000
1242:src/vm2.c     **** 						PC  =  nPC;
 2424              		.loc 1 1242 0
 2425 12fa 8B050000 		movl	nPC(%rip), %eax
 2425      0000
1243:src/vm2.c     **** 						nPC  += 4;
 2426              		.loc 1 1243 0
 2427 1300 8D5004   		leal	4(%rax), %edx
1242:src/vm2.c     **** 						PC  =  nPC;
 2428              		.loc 1 1242 0
 2429 1303 89050000 		movl	%eax, PC(%rip)
 2429      0000
 2430              		.loc 1 1243 0
 2431 1309 89150000 		movl	%edx, nPC(%rip)
 2431      0000
1244:src/vm2.c     **** 						
1245:src/vm2.c     **** 						// FETCH
1246:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2432              		.loc 1 1246 0
 2433 130f 8D5003   		leal	3(%rax), %edx
 2434 1312 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2434      00000000 
 2435 131a 89C2     		movl	%eax, %edx
 2436 131c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2436      000000
 2437 1323 C1E218   		sall	$24, %edx
 2438 1326 4109D0   		orl	%edx, %r8d
 2439 1329 8D5001   		leal	1(%rax), %edx
 2440 132c 83C002   		addl	$2, %eax
 2441 132f 0FB68000 		movzbl	VM_memory(%rax), %eax
 2441      000000
 2442 1336 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2442      000000
 2443 133d C1E008   		sall	$8, %eax
 2444 1340 C1E210   		sall	$16, %edx
 2445 1343 4109D0   		orl	%edx, %r8d
 2446 1346 4109C0   		orl	%eax, %r8d
 2447              	.LVL358:
1247:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2448              		.loc 1 1247 0
 2449 1349 4489C2   		movl	%r8d, %edx
1248:src/vm2.c     **** 						if (op == 0x0) {
1249:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2450              		.loc 1 1249 0
 2451 134c 4488C0   		movb	%r8b, %al
1247:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2452              		.loc 1 1247 0
 2453 134f C1EA1A   		shrl	$26, %edx
 2454              	.LVL359:
 2455              		.loc 1 1249 0
 2456 1352 83E03F   		andl	$63, %eax
 2457 1355 8D4A2B   		leal	43(%rdx), %ecx
 2458 1358 84D2     		testb	%dl, %dl
 2459 135a 0F45C1   		cmovne	%ecx, %eax
 2460              	.LVL360:
1250:src/vm2.c     **** 						  op = op + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 83


1251:src/vm2.c     **** 						}
1252:src/vm2.c     **** 						else {
1253:src/vm2.c     **** 						  op = op + FIX_OP;
1254:src/vm2.c     **** 						}
1255:src/vm2.c     **** 						goto *array[op];
 2461              		.loc 1 1255 0
 2462 135d 83E07F   		andl	$127, %eax
 2463              	.LVL361:
 2464 1360 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2464      00000000 
 2465 1368 E9CAF5FF 		jmp	.L112
 2465      FF
 2466              	.L166:
 2467              	.LVL362:
1256:src/vm2.c     **** 						
1257:src/vm2.c     **** 		//				break;
1258:src/vm2.c     **** 		//			}
1259:src/vm2.c     **** 		// 0+6=6		case 0b000110: { // srlv	000110	ShiftV		$d = $t >>> $s
1260:src/vm2.c     **** 		srlv:
1261:src/vm2.c     **** #if INDIRECT_DEBUG
1262:src/vm2.c     **** printf("%d|srlv\n",counter);
1263:src/vm2.c     **** counter++;
1264:src/vm2.c     **** #endif
1265:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1266:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2468              		.loc 1 1266 0
 2469 136d 4489C0   		movl	%r8d, %eax
1267:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2470              		.loc 1 1267 0
 2471 1370 4489C2   		movl	%r8d, %edx
1265:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2472              		.loc 1 1265 0
 2473 1373 41C1E815 		shrl	$21, %r8d
 2474              	.LVL363:
1266:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2475              		.loc 1 1266 0
 2476 1377 C1E810   		shrl	$16, %eax
 2477              	.LVL364:
1268:src/vm2.c     **** 						RF[rd] = RF[rt] >> RF[rs];  
 2478              		.loc 1 1268 0
 2479 137a 4183E01F 		andl	$31, %r8d
1267:src/vm2.c     **** 						RF[rd] = RF[rt] >> RF[rs];  
 2480              		.loc 1 1267 0
 2481 137e C1EA0B   		shrl	$11, %edx
 2482              	.LVL365:
 2483              		.loc 1 1268 0
 2484 1381 83E01F   		andl	$31, %eax
 2485 1384 428B0C85 		movl	RF(,%r8,4), %ecx
 2485      00000000 
 2486 138c 83E21F   		andl	$31, %edx
 2487 138f 8B048500 		movl	RF(,%rax,4), %eax
 2487      000000
 2488 1396 D3E8     		shrl	%cl, %eax
 2489 1398 89049500 		movl	%eax, RF(,%rdx,4)
 2489      000000
1269:src/vm2.c     **** 						PC  =  nPC;
 2490              		.loc 1 1269 0
GAS LISTING /tmp/cc15eBE3.s 			page 84


 2491 139f 8B050000 		movl	nPC(%rip), %eax
 2491      0000
1270:src/vm2.c     **** 						nPC  += 4;
 2492              		.loc 1 1270 0
 2493 13a5 8D5004   		leal	4(%rax), %edx
1269:src/vm2.c     **** 						PC  =  nPC;
 2494              		.loc 1 1269 0
 2495 13a8 89050000 		movl	%eax, PC(%rip)
 2495      0000
 2496              		.loc 1 1270 0
 2497 13ae 89150000 		movl	%edx, nPC(%rip)
 2497      0000
1271:src/vm2.c     **** 						
1272:src/vm2.c     **** 						// FETCH
1273:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2498              		.loc 1 1273 0
 2499 13b4 8D5003   		leal	3(%rax), %edx
 2500 13b7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2500      00000000 
 2501 13bf 89C2     		movl	%eax, %edx
 2502 13c1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2502      000000
 2503 13c8 C1E218   		sall	$24, %edx
 2504 13cb 4109D0   		orl	%edx, %r8d
 2505 13ce 8D5001   		leal	1(%rax), %edx
 2506 13d1 83C002   		addl	$2, %eax
 2507 13d4 0FB68000 		movzbl	VM_memory(%rax), %eax
 2507      000000
 2508 13db 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2508      000000
 2509 13e2 C1E008   		sall	$8, %eax
 2510 13e5 C1E210   		sall	$16, %edx
 2511 13e8 4109D0   		orl	%edx, %r8d
 2512 13eb 4109C0   		orl	%eax, %r8d
 2513              	.LVL366:
1274:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2514              		.loc 1 1274 0
 2515 13ee 4489C2   		movl	%r8d, %edx
1275:src/vm2.c     **** 						if (op == 0x0) {
1276:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2516              		.loc 1 1276 0
 2517 13f1 4488C0   		movb	%r8b, %al
1274:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2518              		.loc 1 1274 0
 2519 13f4 C1EA1A   		shrl	$26, %edx
 2520              	.LVL367:
 2521              		.loc 1 1276 0
 2522 13f7 83E03F   		andl	$63, %eax
 2523 13fa 8D4A2B   		leal	43(%rdx), %ecx
 2524 13fd 84D2     		testb	%dl, %dl
 2525 13ff 0F45C1   		cmovne	%ecx, %eax
 2526              	.LVL368:
1277:src/vm2.c     **** 						  op = op + funct;
1278:src/vm2.c     **** 						}
1279:src/vm2.c     **** 						else {
1280:src/vm2.c     **** 						  op = op + FIX_OP;
1281:src/vm2.c     **** 						}
GAS LISTING /tmp/cc15eBE3.s 			page 85


1282:src/vm2.c     **** 						goto *array[op];
 2527              		.loc 1 1282 0
 2528 1402 83E07F   		andl	$127, %eax
 2529              	.LVL369:
 2530 1405 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2530      00000000 
 2531 140d E925F5FF 		jmp	.L112
 2531      FF
 2532              	.L169:
 2533              	.LVL370:
1283:src/vm2.c     **** 						
1284:src/vm2.c     **** 		//				break;
1285:src/vm2.c     **** 		//			}
1286:src/vm2.c     **** 		// 0+34=34		case 0b100010: { // sub		100010	ArithLog	$d = $s - $t
1287:src/vm2.c     **** 		sub:
1288:src/vm2.c     **** #if INDIRECT_DEBUG
1289:src/vm2.c     **** printf("%d|sub\n",counter);
1290:src/vm2.c     **** counter++;
1291:src/vm2.c     **** #endif
1292:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 2534              		.loc 1 1292 0
 2535 1412 4489C0   		movl	%r8d, %eax
1293:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1294:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2536              		.loc 1 1294 0
 2537 1415 4489C2   		movl	%r8d, %edx
1293:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2538              		.loc 1 1293 0
 2539 1418 41C1E810 		shrl	$16, %r8d
 2540              	.LVL371:
1292:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2541              		.loc 1 1292 0
 2542 141c C1E815   		shrl	$21, %eax
 2543              	.LVL372:
1295:src/vm2.c     **** 						RF[rd] = RF[rs] - RF[rt];  
 2544              		.loc 1 1295 0
 2545 141f 4183E01F 		andl	$31, %r8d
1294:src/vm2.c     **** 						RF[rd] = RF[rs] - RF[rt];  
 2546              		.loc 1 1294 0
 2547 1423 C1EA0B   		shrl	$11, %edx
 2548              	.LVL373:
 2549              		.loc 1 1295 0
 2550 1426 83E01F   		andl	$31, %eax
 2551 1429 83E21F   		andl	$31, %edx
 2552 142c 8B048500 		movl	RF(,%rax,4), %eax
 2552      000000
 2553 1433 422B0485 		subl	RF(,%r8,4), %eax
 2553      00000000 
 2554 143b 89049500 		movl	%eax, RF(,%rdx,4)
 2554      000000
1296:src/vm2.c     **** 						PC  =  nPC;
 2555              		.loc 1 1296 0
 2556 1442 8B050000 		movl	nPC(%rip), %eax
 2556      0000
1297:src/vm2.c     **** 						nPC  += 4;
 2557              		.loc 1 1297 0
 2558 1448 8D5004   		leal	4(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 86


1296:src/vm2.c     **** 						PC  =  nPC;
 2559              		.loc 1 1296 0
 2560 144b 89050000 		movl	%eax, PC(%rip)
 2560      0000
 2561              		.loc 1 1297 0
 2562 1451 89150000 		movl	%edx, nPC(%rip)
 2562      0000
1298:src/vm2.c     **** 						
1299:src/vm2.c     **** 						// FETCH
1300:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2563              		.loc 1 1300 0
 2564 1457 8D5003   		leal	3(%rax), %edx
 2565 145a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2565      00000000 
 2566 1462 89C2     		movl	%eax, %edx
 2567 1464 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2567      000000
 2568 146b C1E218   		sall	$24, %edx
 2569 146e 4109D0   		orl	%edx, %r8d
 2570 1471 8D5001   		leal	1(%rax), %edx
 2571 1474 83C002   		addl	$2, %eax
 2572 1477 0FB68000 		movzbl	VM_memory(%rax), %eax
 2572      000000
 2573 147e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2573      000000
 2574 1485 C1E008   		sall	$8, %eax
 2575 1488 C1E210   		sall	$16, %edx
 2576 148b 4109D0   		orl	%edx, %r8d
 2577 148e 4109C0   		orl	%eax, %r8d
 2578              	.LVL374:
1301:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2579              		.loc 1 1301 0
 2580 1491 4489C2   		movl	%r8d, %edx
1302:src/vm2.c     **** 						if (op == 0x0) {
1303:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2581              		.loc 1 1303 0
 2582 1494 4488C0   		movb	%r8b, %al
1301:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2583              		.loc 1 1301 0
 2584 1497 C1EA1A   		shrl	$26, %edx
 2585              	.LVL375:
 2586              		.loc 1 1303 0
 2587 149a 83E03F   		andl	$63, %eax
 2588 149d 8D4A2B   		leal	43(%rdx), %ecx
 2589 14a0 84D2     		testb	%dl, %dl
 2590 14a2 0F45C1   		cmovne	%ecx, %eax
 2591              	.LVL376:
1304:src/vm2.c     **** 						  op = op + funct;
1305:src/vm2.c     **** 						}
1306:src/vm2.c     **** 						else {
1307:src/vm2.c     **** 						  op = op + FIX_OP;
1308:src/vm2.c     **** 						}
1309:src/vm2.c     **** 						goto *array[op];
 2592              		.loc 1 1309 0
 2593 14a5 83E07F   		andl	$127, %eax
 2594              	.LVL377:
 2595 14a8 488B0CC5 		movq	array.2280(,%rax,8), %rcx
GAS LISTING /tmp/cc15eBE3.s 			page 87


 2595      00000000 
 2596 14b0 E982F4FF 		jmp	.L112
 2596      FF
 2597              	.L172:
 2598              	.LVL378:
1310:src/vm2.c     **** 						
1311:src/vm2.c     **** 		//				break;
1312:src/vm2.c     **** 		//			}
1313:src/vm2.c     **** 		// 0+35=35		case 0b100011: { // subu	100011	ArithLog	$d = $s - $t
1314:src/vm2.c     **** 		subu:
1315:src/vm2.c     **** #if INDIRECT_DEBUG
1316:src/vm2.c     **** printf("%d|subu\n",counter);
1317:src/vm2.c     **** counter++;
1318:src/vm2.c     **** #endif
1319:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 2599              		.loc 1 1319 0
 2600 14b5 4489C0   		movl	%r8d, %eax
1320:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1321:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2601              		.loc 1 1321 0
 2602 14b8 4489C2   		movl	%r8d, %edx
1320:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2603              		.loc 1 1320 0
 2604 14bb 41C1E810 		shrl	$16, %r8d
 2605              	.LVL379:
1319:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2606              		.loc 1 1319 0
 2607 14bf C1E815   		shrl	$21, %eax
 2608              	.LVL380:
1322:src/vm2.c     **** 						RF[rd] = RF[rs] - RF[rt];    
 2609              		.loc 1 1322 0
 2610 14c2 4183E01F 		andl	$31, %r8d
1321:src/vm2.c     **** 						RF[rd] = RF[rs] - RF[rt];    
 2611              		.loc 1 1321 0
 2612 14c6 C1EA0B   		shrl	$11, %edx
 2613              	.LVL381:
 2614              		.loc 1 1322 0
 2615 14c9 83E01F   		andl	$31, %eax
 2616 14cc 83E21F   		andl	$31, %edx
 2617 14cf 8B048500 		movl	RF(,%rax,4), %eax
 2617      000000
 2618 14d6 422B0485 		subl	RF(,%r8,4), %eax
 2618      00000000 
 2619 14de 89049500 		movl	%eax, RF(,%rdx,4)
 2619      000000
1323:src/vm2.c     **** 						PC  =  nPC;
 2620              		.loc 1 1323 0
 2621 14e5 8B050000 		movl	nPC(%rip), %eax
 2621      0000
1324:src/vm2.c     **** 						nPC  += 4;
 2622              		.loc 1 1324 0
 2623 14eb 8D5004   		leal	4(%rax), %edx
1323:src/vm2.c     **** 						PC  =  nPC;
 2624              		.loc 1 1323 0
 2625 14ee 89050000 		movl	%eax, PC(%rip)
 2625      0000
 2626              		.loc 1 1324 0
GAS LISTING /tmp/cc15eBE3.s 			page 88


 2627 14f4 89150000 		movl	%edx, nPC(%rip)
 2627      0000
1325:src/vm2.c     **** 						
1326:src/vm2.c     **** 						// FETCH
1327:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2628              		.loc 1 1327 0
 2629 14fa 8D5003   		leal	3(%rax), %edx
 2630 14fd 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2630      00000000 
 2631 1505 89C2     		movl	%eax, %edx
 2632 1507 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2632      000000
 2633 150e C1E218   		sall	$24, %edx
 2634 1511 4109D0   		orl	%edx, %r8d
 2635 1514 8D5001   		leal	1(%rax), %edx
 2636 1517 83C002   		addl	$2, %eax
 2637 151a 0FB68000 		movzbl	VM_memory(%rax), %eax
 2637      000000
 2638 1521 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2638      000000
 2639 1528 C1E008   		sall	$8, %eax
 2640 152b C1E210   		sall	$16, %edx
 2641 152e 4109D0   		orl	%edx, %r8d
 2642 1531 4109C0   		orl	%eax, %r8d
 2643              	.LVL382:
1328:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2644              		.loc 1 1328 0
 2645 1534 4489C2   		movl	%r8d, %edx
1329:src/vm2.c     **** 						if (op == 0x0) {
1330:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2646              		.loc 1 1330 0
 2647 1537 4488C0   		movb	%r8b, %al
1328:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2648              		.loc 1 1328 0
 2649 153a C1EA1A   		shrl	$26, %edx
 2650              	.LVL383:
 2651              		.loc 1 1330 0
 2652 153d 83E03F   		andl	$63, %eax
 2653 1540 8D4A2B   		leal	43(%rdx), %ecx
 2654 1543 84D2     		testb	%dl, %dl
 2655 1545 0F45C1   		cmovne	%ecx, %eax
 2656              	.LVL384:
1331:src/vm2.c     **** 						  op = op + funct;
1332:src/vm2.c     **** 						}
1333:src/vm2.c     **** 						else {
1334:src/vm2.c     **** 						  op = op + FIX_OP;
1335:src/vm2.c     **** 						}
1336:src/vm2.c     **** 						goto *array[op];
 2657              		.loc 1 1336 0
 2658 1548 83E07F   		andl	$127, %eax
 2659              	.LVL385:
 2660 154b 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2660      00000000 
 2661 1553 E9DFF3FF 		jmp	.L112
 2661      FF
 2662              	.L175:
 2663              	.LVL386:
GAS LISTING /tmp/cc15eBE3.s 			page 89


1337:src/vm2.c     **** 						
1338:src/vm2.c     **** 		//				break;
1339:src/vm2.c     **** 		//			}
1340:src/vm2.c     **** 		// 0+38=38		case 0b100110: { // xor		100110  ArithLog	$d = $s ^ $t
1341:src/vm2.c     **** 		xor:
1342:src/vm2.c     **** #if INDIRECT_DEBUG
1343:src/vm2.c     **** printf("%d|xor\n",counter);
1344:src/vm2.c     **** counter++;
1345:src/vm2.c     **** #endif
1346:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1347:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2664              		.loc 1 1347 0
 2665 1558 4489C0   		movl	%r8d, %eax
1348:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2666              		.loc 1 1348 0
 2667 155b 4489C2   		movl	%r8d, %edx
1346:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2668              		.loc 1 1346 0
 2669 155e 41C1E815 		shrl	$21, %r8d
 2670              	.LVL387:
1347:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2671              		.loc 1 1347 0
 2672 1562 C1E810   		shrl	$16, %eax
 2673              	.LVL388:
1349:src/vm2.c     **** 						RF[rd] = RF[rs] ^ RF[rt];    
 2674              		.loc 1 1349 0
 2675 1565 4183E01F 		andl	$31, %r8d
1348:src/vm2.c     **** 						RF[rd] = RF[rs] ^ RF[rt];    
 2676              		.loc 1 1348 0
 2677 1569 C1EA0B   		shrl	$11, %edx
 2678              	.LVL389:
 2679              		.loc 1 1349 0
 2680 156c 83E01F   		andl	$31, %eax
 2681 156f 83E21F   		andl	$31, %edx
 2682 1572 8B048500 		movl	RF(,%rax,4), %eax
 2682      000000
 2683 1579 42330485 		xorl	RF(,%r8,4), %eax
 2683      00000000 
 2684 1581 89049500 		movl	%eax, RF(,%rdx,4)
 2684      000000
1350:src/vm2.c     **** 						PC  =  nPC;
 2685              		.loc 1 1350 0
 2686 1588 8B050000 		movl	nPC(%rip), %eax
 2686      0000
1351:src/vm2.c     **** 						nPC  += 4;
 2687              		.loc 1 1351 0
 2688 158e 8D5004   		leal	4(%rax), %edx
1350:src/vm2.c     **** 						PC  =  nPC;
 2689              		.loc 1 1350 0
 2690 1591 89050000 		movl	%eax, PC(%rip)
 2690      0000
 2691              		.loc 1 1351 0
 2692 1597 89150000 		movl	%edx, nPC(%rip)
 2692      0000
1352:src/vm2.c     **** 						
1353:src/vm2.c     **** 						// FETCH
1354:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
GAS LISTING /tmp/cc15eBE3.s 			page 90


 2693              		.loc 1 1354 0
 2694 159d 8D5003   		leal	3(%rax), %edx
 2695 15a0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2695      00000000 
 2696 15a8 89C2     		movl	%eax, %edx
 2697 15aa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2697      000000
 2698 15b1 C1E218   		sall	$24, %edx
 2699 15b4 4109D0   		orl	%edx, %r8d
 2700 15b7 8D5001   		leal	1(%rax), %edx
 2701 15ba 83C002   		addl	$2, %eax
 2702 15bd 0FB68000 		movzbl	VM_memory(%rax), %eax
 2702      000000
 2703 15c4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2703      000000
 2704 15cb C1E008   		sall	$8, %eax
 2705 15ce C1E210   		sall	$16, %edx
 2706 15d1 4109D0   		orl	%edx, %r8d
 2707 15d4 4109C0   		orl	%eax, %r8d
 2708              	.LVL390:
1355:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2709              		.loc 1 1355 0
 2710 15d7 4489C2   		movl	%r8d, %edx
1356:src/vm2.c     **** 						if (op == 0x0) {
1357:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2711              		.loc 1 1357 0
 2712 15da 4488C0   		movb	%r8b, %al
1355:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2713              		.loc 1 1355 0
 2714 15dd C1EA1A   		shrl	$26, %edx
 2715              	.LVL391:
 2716              		.loc 1 1357 0
 2717 15e0 83E03F   		andl	$63, %eax
 2718 15e3 8D4A2B   		leal	43(%rdx), %ecx
 2719 15e6 84D2     		testb	%dl, %dl
 2720 15e8 0F45C1   		cmovne	%ecx, %eax
 2721              	.LVL392:
1358:src/vm2.c     **** 						  op = op + funct;
1359:src/vm2.c     **** 						}
1360:src/vm2.c     **** 						else {
1361:src/vm2.c     **** 						  op = op + FIX_OP;
1362:src/vm2.c     **** 						}
1363:src/vm2.c     **** 						goto *array[op];
 2722              		.loc 1 1363 0
 2723 15eb 83E07F   		andl	$127, %eax
 2724              	.LVL393:
 2725 15ee 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2725      00000000 
 2726 15f6 E93CF3FF 		jmp	.L112
 2726      FF
 2727              	.L178:
 2728              	.LVL394:
1364:src/vm2.c     **** 						
1365:src/vm2.c     **** 		//				break;
1366:src/vm2.c     **** 		//			}
1367:src/vm2.c     **** 		// 0+42=42		case 0b101010: { // slt		101010	ArithLog	$d = ($s < $t)
1368:src/vm2.c     **** 		slt:
GAS LISTING /tmp/cc15eBE3.s 			page 91


1369:src/vm2.c     **** #if INDIRECT_DEBUG
1370:src/vm2.c     **** printf("%d|slt\n",counter);
1371:src/vm2.c     **** counter++;
1372:src/vm2.c     **** #endif
1373:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 2729              		.loc 1 1373 0
 2730 15fb 4489C2   		movl	%r8d, %edx
1374:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1375:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2731              		.loc 1 1375 0
 2732 15fe 4489C0   		movl	%r8d, %eax
1374:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2733              		.loc 1 1374 0
 2734 1601 41C1E810 		shrl	$16, %r8d
 2735              	.LVL395:
1373:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2736              		.loc 1 1373 0
 2737 1605 C1EA15   		shrl	$21, %edx
1376:src/vm2.c     **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 2738              		.loc 1 1376 0
 2739 1608 4183E01F 		andl	$31, %r8d
1375:src/vm2.c     **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 2740              		.loc 1 1375 0
 2741 160c C1E80B   		shrl	$11, %eax
 2742              	.LVL396:
 2743              		.loc 1 1376 0
 2744 160f 83E21F   		andl	$31, %edx
 2745 1612 83E01F   		andl	$31, %eax
 2746 1615 428B3C85 		movl	RF(,%r8,4), %edi
 2746      00000000 
 2747 161d 393C9500 		cmpl	%edi, RF(,%rdx,4)
 2747      000000
 2748 1624 0F92C2   		setb	%dl
 2749 1627 0FB6D2   		movzbl	%dl, %edx
 2750 162a 89148500 		movl	%edx, RF(,%rax,4)
 2750      000000
1377:src/vm2.c     **** 						PC  =  nPC;
 2751              		.loc 1 1377 0
 2752 1631 8B050000 		movl	nPC(%rip), %eax
 2752      0000
1378:src/vm2.c     **** 						nPC  += 4;
 2753              		.loc 1 1378 0
 2754 1637 8D5004   		leal	4(%rax), %edx
1377:src/vm2.c     **** 						PC  =  nPC;
 2755              		.loc 1 1377 0
 2756 163a 89050000 		movl	%eax, PC(%rip)
 2756      0000
 2757              		.loc 1 1378 0
 2758 1640 89150000 		movl	%edx, nPC(%rip)
 2758      0000
1379:src/vm2.c     **** 						
1380:src/vm2.c     **** 						// FETCH
1381:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2759              		.loc 1 1381 0
 2760 1646 8D5003   		leal	3(%rax), %edx
 2761 1649 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2761      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 92


 2762 1651 89C2     		movl	%eax, %edx
 2763 1653 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2763      000000
 2764 165a C1E218   		sall	$24, %edx
 2765 165d 4109D0   		orl	%edx, %r8d
 2766 1660 8D5001   		leal	1(%rax), %edx
 2767 1663 83C002   		addl	$2, %eax
 2768 1666 0FB68000 		movzbl	VM_memory(%rax), %eax
 2768      000000
 2769 166d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2769      000000
 2770 1674 C1E008   		sall	$8, %eax
 2771 1677 C1E210   		sall	$16, %edx
 2772 167a 4109D0   		orl	%edx, %r8d
 2773 167d 4109C0   		orl	%eax, %r8d
 2774              	.LVL397:
1382:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2775              		.loc 1 1382 0
 2776 1680 4489C2   		movl	%r8d, %edx
1383:src/vm2.c     **** 						if (op == 0x0) {
1384:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2777              		.loc 1 1384 0
 2778 1683 4488C0   		movb	%r8b, %al
1382:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2779              		.loc 1 1382 0
 2780 1686 C1EA1A   		shrl	$26, %edx
 2781              	.LVL398:
 2782              		.loc 1 1384 0
 2783 1689 83E03F   		andl	$63, %eax
 2784 168c 8D4A2B   		leal	43(%rdx), %ecx
 2785 168f 84D2     		testb	%dl, %dl
 2786 1691 0F45C1   		cmovne	%ecx, %eax
 2787              	.LVL399:
1385:src/vm2.c     **** 						  op = op + funct;
1386:src/vm2.c     **** 						}
1387:src/vm2.c     **** 						else {
1388:src/vm2.c     **** 						  op = op + FIX_OP;
1389:src/vm2.c     **** 						}
1390:src/vm2.c     **** 						goto *array[op];
 2788              		.loc 1 1390 0
 2789 1694 83E07F   		andl	$127, %eax
 2790              	.LVL400:
 2791 1697 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2791      00000000 
 2792 169f E993F2FF 		jmp	.L112
 2792      FF
 2793              	.L181:
 2794              	.LVL401:
1391:src/vm2.c     **** 						
1392:src/vm2.c     **** 		//				break;
1393:src/vm2.c     **** 		//			}
1394:src/vm2.c     **** 		// 0+43=43		case 0b101011: { // sltu	101011	ArithLog	$d = ($s < $t)
1395:src/vm2.c     **** 		sltu:
1396:src/vm2.c     **** #if INDIRECT_DEBUG
1397:src/vm2.c     **** printf("%d|sltu\n",counter);
1398:src/vm2.c     **** counter++;
1399:src/vm2.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 93


1400:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 2795              		.loc 1 1400 0
 2796 16a4 4489C2   		movl	%r8d, %edx
1401:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
1402:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
 2797              		.loc 1 1402 0
 2798 16a7 4489C0   		movl	%r8d, %eax
1401:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2799              		.loc 1 1401 0
 2800 16aa 41C1E810 		shrl	$16, %r8d
 2801              	.LVL402:
1400:src/vm2.c     **** 						rt = (instr >> 16) & 0x1F;
 2802              		.loc 1 1400 0
 2803 16ae C1EA15   		shrl	$21, %edx
1403:src/vm2.c     **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 2804              		.loc 1 1403 0
 2805 16b1 4183E01F 		andl	$31, %r8d
1402:src/vm2.c     **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 2806              		.loc 1 1402 0
 2807 16b5 C1E80B   		shrl	$11, %eax
 2808              	.LVL403:
 2809              		.loc 1 1403 0
 2810 16b8 83E21F   		andl	$31, %edx
 2811 16bb 83E01F   		andl	$31, %eax
 2812 16be 428B3C85 		movl	RF(,%r8,4), %edi
 2812      00000000 
 2813 16c6 393C9500 		cmpl	%edi, RF(,%rdx,4)
 2813      000000
 2814 16cd 0F92C2   		setb	%dl
 2815 16d0 0FB6D2   		movzbl	%dl, %edx
 2816 16d3 89148500 		movl	%edx, RF(,%rax,4)
 2816      000000
1404:src/vm2.c     **** 						PC  =  nPC;
 2817              		.loc 1 1404 0
 2818 16da 8B050000 		movl	nPC(%rip), %eax
 2818      0000
1405:src/vm2.c     **** 						nPC  += 4;
 2819              		.loc 1 1405 0
 2820 16e0 8D5004   		leal	4(%rax), %edx
1404:src/vm2.c     **** 						PC  =  nPC;
 2821              		.loc 1 1404 0
 2822 16e3 89050000 		movl	%eax, PC(%rip)
 2822      0000
 2823              		.loc 1 1405 0
 2824 16e9 89150000 		movl	%edx, nPC(%rip)
 2824      0000
1406:src/vm2.c     **** 						
1407:src/vm2.c     **** 						// FETCH
1408:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2825              		.loc 1 1408 0
 2826 16ef 8D5003   		leal	3(%rax), %edx
 2827 16f2 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2827      00000000 
 2828 16fa 89C2     		movl	%eax, %edx
 2829 16fc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2829      000000
 2830 1703 C1E218   		sall	$24, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 94


 2831 1706 4109D0   		orl	%edx, %r8d
 2832 1709 8D5001   		leal	1(%rax), %edx
 2833 170c 83C002   		addl	$2, %eax
 2834 170f 0FB68000 		movzbl	VM_memory(%rax), %eax
 2834      000000
 2835 1716 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2835      000000
 2836 171d C1E008   		sall	$8, %eax
 2837 1720 C1E210   		sall	$16, %edx
 2838 1723 4109D0   		orl	%edx, %r8d
 2839 1726 4109C0   		orl	%eax, %r8d
 2840              	.LVL404:
1409:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2841              		.loc 1 1409 0
 2842 1729 4489C2   		movl	%r8d, %edx
1410:src/vm2.c     **** 						if (op == 0x0) {
1411:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2843              		.loc 1 1411 0
 2844 172c 4488C0   		movb	%r8b, %al
1409:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2845              		.loc 1 1409 0
 2846 172f C1EA1A   		shrl	$26, %edx
 2847              	.LVL405:
 2848              		.loc 1 1411 0
 2849 1732 83E03F   		andl	$63, %eax
 2850 1735 8D4A2B   		leal	43(%rdx), %ecx
 2851 1738 84D2     		testb	%dl, %dl
 2852 173a 0F45C1   		cmovne	%ecx, %eax
 2853              	.LVL406:
1412:src/vm2.c     **** 						  op = op + funct;
1413:src/vm2.c     **** 						}
1414:src/vm2.c     **** 						else {
1415:src/vm2.c     **** 						  op = op + FIX_OP;
1416:src/vm2.c     **** 						}
1417:src/vm2.c     **** 						goto *array[op];
 2854              		.loc 1 1417 0
 2855 173d 83E07F   		andl	$127, %eax
 2856              	.LVL407:
 2857 1740 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2857      00000000 
 2858 1748 E9EAF1FF 		jmp	.L112
 2858      FF
 2859              	.L184:
 2860              	.LVL408:
1418:src/vm2.c     **** 						
1419:src/vm2.c     **** 		//				break;
1420:src/vm2.c     **** 		//			}
1421:src/vm2.c     **** 		// 0+9=9		case 0b001001: { // jalr	001001	JumpR		$31 = pc; pc = $s
1422:src/vm2.c     **** 		jalr:
1423:src/vm2.c     **** #if INDIRECT_DEBUG
1424:src/vm2.c     **** printf("%d|jalr\n",counter);
1425:src/vm2.c     **** counter++;
1426:src/vm2.c     **** #endif
1427:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1428:src/vm2.c     **** 						RF[31] = PC+8;
 2861              		.loc 1 1428 0
 2862 174d 8B050000 		movl	PC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 95


 2862      0000
1427:src/vm2.c     **** 						RF[31] = PC+8;
 2863              		.loc 1 1427 0
 2864 1753 41C1E815 		shrl	$21, %r8d
 2865              	.LVL409:
1429:src/vm2.c     **** 						PC = nPC;
1430:src/vm2.c     **** 						nPC = RF[rs];
 2866              		.loc 1 1430 0
 2867 1757 4183E01F 		andl	$31, %r8d
1428:src/vm2.c     **** 						PC = nPC;
 2868              		.loc 1 1428 0
 2869 175b 83C008   		addl	$8, %eax
 2870 175e 89050000 		movl	%eax, RF+124(%rip)
 2870      0000
1429:src/vm2.c     **** 						PC = nPC;
 2871              		.loc 1 1429 0
 2872 1764 8B050000 		movl	nPC(%rip), %eax
 2872      0000
 2873              		.loc 1 1430 0
 2874 176a 428B1485 		movl	RF(,%r8,4), %edx
 2874      00000000 
1429:src/vm2.c     **** 						PC = nPC;
 2875              		.loc 1 1429 0
 2876 1772 89050000 		movl	%eax, PC(%rip)
 2876      0000
 2877              		.loc 1 1430 0
 2878 1778 89150000 		movl	%edx, nPC(%rip)
 2878      0000
1431:src/vm2.c     **** 						//continue;
1432:src/vm2.c     **** 						
1433:src/vm2.c     **** 						// FETCH
1434:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2879              		.loc 1 1434 0
 2880 177e 8D5003   		leal	3(%rax), %edx
 2881 1781 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2881      00000000 
 2882 1789 89C2     		movl	%eax, %edx
 2883 178b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2883      000000
 2884 1792 C1E218   		sall	$24, %edx
 2885 1795 4109D0   		orl	%edx, %r8d
 2886 1798 8D5001   		leal	1(%rax), %edx
 2887 179b 83C002   		addl	$2, %eax
 2888 179e 0FB68000 		movzbl	VM_memory(%rax), %eax
 2888      000000
 2889 17a5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2889      000000
 2890 17ac C1E008   		sall	$8, %eax
 2891 17af C1E210   		sall	$16, %edx
 2892 17b2 4109D0   		orl	%edx, %r8d
 2893 17b5 4109C0   		orl	%eax, %r8d
 2894              	.LVL410:
1435:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2895              		.loc 1 1435 0
 2896 17b8 4489C2   		movl	%r8d, %edx
1436:src/vm2.c     **** 						if (op == 0x0) {
1437:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 96


 2897              		.loc 1 1437 0
 2898 17bb 4488C0   		movb	%r8b, %al
1435:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2899              		.loc 1 1435 0
 2900 17be C1EA1A   		shrl	$26, %edx
 2901              	.LVL411:
 2902              		.loc 1 1437 0
 2903 17c1 83E03F   		andl	$63, %eax
 2904 17c4 8D4A2B   		leal	43(%rdx), %ecx
 2905 17c7 84D2     		testb	%dl, %dl
 2906 17c9 0F45C1   		cmovne	%ecx, %eax
 2907              	.LVL412:
1438:src/vm2.c     **** 						  op = op + funct;
1439:src/vm2.c     **** 						}
1440:src/vm2.c     **** 						else {
1441:src/vm2.c     **** 						  op = op + FIX_OP;
1442:src/vm2.c     **** 						}
1443:src/vm2.c     **** 						goto *array[op];
 2908              		.loc 1 1443 0
 2909 17cc 83E07F   		andl	$127, %eax
 2910              	.LVL413:
 2911 17cf 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2911      00000000 
 2912 17d7 E95BF1FF 		jmp	.L112
 2912      FF
 2913              	.L187:
 2914              	.LVL414:
1444:src/vm2.c     **** 						
1445:src/vm2.c     **** 		//				break;
1446:src/vm2.c     **** 		//			}
1447:src/vm2.c     **** 		// 0+8=8		case 0b001000: { // jr		001000	JumpR		pc = $s 
1448:src/vm2.c     **** 		jr:
1449:src/vm2.c     **** #if INDIRECT_DEBUG
1450:src/vm2.c     **** printf("%d|jr\n",counter);
1451:src/vm2.c     **** counter++;
1452:src/vm2.c     **** #endif
1453:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
 2915              		.loc 1 1453 0
 2916 17dc 41C1E815 		shrl	$21, %r8d
 2917              	.LVL415:
1454:src/vm2.c     **** 						PC = nPC;
 2918              		.loc 1 1454 0
 2919 17e0 8B050000 		movl	nPC(%rip), %eax
 2919      0000
1455:src/vm2.c     **** 						nPC = RF[rs];
 2920              		.loc 1 1455 0
 2921 17e6 4183E01F 		andl	$31, %r8d
 2922 17ea 428B1485 		movl	RF(,%r8,4), %edx
 2922      00000000 
1454:src/vm2.c     **** 						PC = nPC;
 2923              		.loc 1 1454 0
 2924 17f2 89050000 		movl	%eax, PC(%rip)
 2924      0000
 2925              		.loc 1 1455 0
 2926 17f8 89150000 		movl	%edx, nPC(%rip)
 2926      0000
1456:src/vm2.c     **** 						//continue;
GAS LISTING /tmp/cc15eBE3.s 			page 97


1457:src/vm2.c     **** 						
1458:src/vm2.c     **** 						// FETCH
1459:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2927              		.loc 1 1459 0
 2928 17fe 8D5003   		leal	3(%rax), %edx
 2929 1801 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2929      00000000 
 2930 1809 89C2     		movl	%eax, %edx
 2931 180b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2931      000000
 2932 1812 C1E218   		sall	$24, %edx
 2933 1815 4109D0   		orl	%edx, %r8d
 2934 1818 8D5001   		leal	1(%rax), %edx
 2935 181b 83C002   		addl	$2, %eax
 2936 181e 0FB68000 		movzbl	VM_memory(%rax), %eax
 2936      000000
 2937 1825 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2937      000000
 2938 182c C1E008   		sall	$8, %eax
 2939 182f C1E210   		sall	$16, %edx
 2940 1832 4109D0   		orl	%edx, %r8d
 2941 1835 4109C0   		orl	%eax, %r8d
 2942              	.LVL416:
1460:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2943              		.loc 1 1460 0
 2944 1838 4489C2   		movl	%r8d, %edx
1461:src/vm2.c     **** 						if (op == 0x0) {
1462:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2945              		.loc 1 1462 0
 2946 183b 4488C0   		movb	%r8b, %al
1460:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2947              		.loc 1 1460 0
 2948 183e C1EA1A   		shrl	$26, %edx
 2949              	.LVL417:
 2950              		.loc 1 1462 0
 2951 1841 83E03F   		andl	$63, %eax
 2952 1844 8D4A2B   		leal	43(%rdx), %ecx
 2953 1847 84D2     		testb	%dl, %dl
 2954 1849 0F45C1   		cmovne	%ecx, %eax
 2955              	.LVL418:
1463:src/vm2.c     **** 						  op = op + funct;
1464:src/vm2.c     **** 						}
1465:src/vm2.c     **** 						else {
1466:src/vm2.c     **** 						  op = op + FIX_OP;
1467:src/vm2.c     **** 						}
1468:src/vm2.c     **** 						goto *array[op];
 2956              		.loc 1 1468 0
 2957 184c 83E07F   		andl	$127, %eax
 2958              	.LVL419:
 2959 184f 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 2959      00000000 
 2960 1857 E9DBF0FF 		jmp	.L112
 2960      FF
 2961              	.L190:
 2962              	.LVL420:
1469:src/vm2.c     **** 						
1470:src/vm2.c     **** 		//				break;
GAS LISTING /tmp/cc15eBE3.s 			page 98


1471:src/vm2.c     **** 		//			}
1472:src/vm2.c     **** 		// 0+16=16		case 0b010000: { // mfhi	010000	MoveFrom	$d = hi
1473:src/vm2.c     **** 		mfhi:
1474:src/vm2.c     **** #if INDIRECT_DEBUG
1475:src/vm2.c     **** printf("%d|mfhi\n",counter);
1476:src/vm2.c     **** counter++;
1477:src/vm2.c     **** #endif
1478:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
1479:src/vm2.c     **** 						RF[rd] = HI;
1480:src/vm2.c     **** 						PC  =  nPC;
 2963              		.loc 1 1480 0
 2964 185c 8B050000 		movl	nPC(%rip), %eax
 2964      0000
1478:src/vm2.c     **** 						RF[rd] = HI;
 2965              		.loc 1 1478 0
 2966 1862 41C1E80B 		shrl	$11, %r8d
 2967              	.LVL421:
1479:src/vm2.c     **** 						PC  =  nPC;
 2968              		.loc 1 1479 0
 2969 1866 4183E01F 		andl	$31, %r8d
 2970 186a 46892C85 		movl	%r13d, RF(,%r8,4)
 2970      00000000 
1481:src/vm2.c     **** 						nPC  += 4;
 2971              		.loc 1 1481 0
 2972 1872 8D5004   		leal	4(%rax), %edx
1480:src/vm2.c     **** 						nPC  += 4;
 2973              		.loc 1 1480 0
 2974 1875 89050000 		movl	%eax, PC(%rip)
 2974      0000
 2975              		.loc 1 1481 0
 2976 187b 89150000 		movl	%edx, nPC(%rip)
 2976      0000
1482:src/vm2.c     **** 						
1483:src/vm2.c     **** 						// FETCH
1484:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 2977              		.loc 1 1484 0
 2978 1881 8D5003   		leal	3(%rax), %edx
 2979 1884 440FB682 		movzbl	VM_memory(%rdx), %r8d
 2979      00000000 
 2980 188c 89C2     		movl	%eax, %edx
 2981 188e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2981      000000
 2982 1895 C1E218   		sall	$24, %edx
 2983 1898 4109D0   		orl	%edx, %r8d
 2984 189b 8D5001   		leal	1(%rax), %edx
 2985 189e 83C002   		addl	$2, %eax
 2986 18a1 0FB68000 		movzbl	VM_memory(%rax), %eax
 2986      000000
 2987 18a8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 2987      000000
 2988 18af C1E008   		sall	$8, %eax
 2989 18b2 C1E210   		sall	$16, %edx
 2990 18b5 4109D0   		orl	%edx, %r8d
 2991 18b8 4109C0   		orl	%eax, %r8d
 2992              	.LVL422:
1485:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2993              		.loc 1 1485 0
GAS LISTING /tmp/cc15eBE3.s 			page 99


 2994 18bb 4489C2   		movl	%r8d, %edx
1486:src/vm2.c     **** 						if (op == 0x0) {
1487:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 2995              		.loc 1 1487 0
 2996 18be 4488C0   		movb	%r8b, %al
1485:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 2997              		.loc 1 1485 0
 2998 18c1 C1EA1A   		shrl	$26, %edx
 2999              	.LVL423:
 3000              		.loc 1 1487 0
 3001 18c4 83E03F   		andl	$63, %eax
 3002 18c7 8D4A2B   		leal	43(%rdx), %ecx
 3003 18ca 84D2     		testb	%dl, %dl
 3004 18cc 0F45C1   		cmovne	%ecx, %eax
 3005              	.LVL424:
1488:src/vm2.c     **** 						  op = op + funct;
1489:src/vm2.c     **** 						}
1490:src/vm2.c     **** 						else {
1491:src/vm2.c     **** 						  op = op + FIX_OP;
1492:src/vm2.c     **** 						}
1493:src/vm2.c     **** 						goto *array[op];
 3006              		.loc 1 1493 0
 3007 18cf 83E07F   		andl	$127, %eax
 3008              	.LVL425:
 3009 18d2 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3009      00000000 
 3010 18da E958F0FF 		jmp	.L112
 3010      FF
 3011              	.L193:
 3012              	.LVL426:
1494:src/vm2.c     **** 						
1495:src/vm2.c     **** 		//				break;
1496:src/vm2.c     **** 		//			}
1497:src/vm2.c     **** 		// 0+18=18		case 0b010010: { // mflo	010010	MoveFrom	$d = lo
1498:src/vm2.c     **** 		mflo:
1499:src/vm2.c     **** #if INDIRECT_DEBUG
1500:src/vm2.c     **** printf("%d|mflo\n",counter);
1501:src/vm2.c     **** counter++;
1502:src/vm2.c     **** #endif
1503:src/vm2.c     **** 						rd = (instr >> 11) & 0x1F;
1504:src/vm2.c     **** 						RF[rd] = LO;
1505:src/vm2.c     **** 						PC  =  nPC;
 3013              		.loc 1 1505 0
 3014 18df 8B050000 		movl	nPC(%rip), %eax
 3014      0000
1503:src/vm2.c     **** 						RF[rd] = LO;
 3015              		.loc 1 1503 0
 3016 18e5 41C1E80B 		shrl	$11, %r8d
 3017              	.LVL427:
1504:src/vm2.c     **** 						PC  =  nPC;
 3018              		.loc 1 1504 0
 3019 18e9 4183E01F 		andl	$31, %r8d
 3020 18ed 42891C85 		movl	%ebx, RF(,%r8,4)
 3020      00000000 
1506:src/vm2.c     **** 						nPC  += 4;
 3021              		.loc 1 1506 0
 3022 18f5 8D5004   		leal	4(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 100


1505:src/vm2.c     **** 						nPC  += 4;
 3023              		.loc 1 1505 0
 3024 18f8 89050000 		movl	%eax, PC(%rip)
 3024      0000
 3025              		.loc 1 1506 0
 3026 18fe 89150000 		movl	%edx, nPC(%rip)
 3026      0000
1507:src/vm2.c     **** 						
1508:src/vm2.c     **** 						// FETCH
1509:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 3027              		.loc 1 1509 0
 3028 1904 8D5003   		leal	3(%rax), %edx
 3029 1907 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3029      00000000 
 3030 190f 89C2     		movl	%eax, %edx
 3031 1911 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3031      000000
 3032 1918 C1E218   		sall	$24, %edx
 3033 191b 4109D0   		orl	%edx, %r8d
 3034 191e 8D5001   		leal	1(%rax), %edx
 3035 1921 83C002   		addl	$2, %eax
 3036 1924 0FB68000 		movzbl	VM_memory(%rax), %eax
 3036      000000
 3037 192b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3037      000000
 3038 1932 C1E008   		sall	$8, %eax
 3039 1935 C1E210   		sall	$16, %edx
 3040 1938 4109D0   		orl	%edx, %r8d
 3041 193b 4109C0   		orl	%eax, %r8d
 3042              	.LVL428:
1510:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3043              		.loc 1 1510 0
 3044 193e 4489C2   		movl	%r8d, %edx
1511:src/vm2.c     **** 						if (op == 0x0) {
1512:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 3045              		.loc 1 1512 0
 3046 1941 4488C0   		movb	%r8b, %al
1510:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3047              		.loc 1 1510 0
 3048 1944 C1EA1A   		shrl	$26, %edx
 3049              	.LVL429:
 3050              		.loc 1 1512 0
 3051 1947 83E03F   		andl	$63, %eax
 3052 194a 8D4A2B   		leal	43(%rdx), %ecx
 3053 194d 84D2     		testb	%dl, %dl
 3054 194f 0F45C1   		cmovne	%ecx, %eax
 3055              	.LVL430:
1513:src/vm2.c     **** 						  op = op + funct;
1514:src/vm2.c     **** 						}
1515:src/vm2.c     **** 						else {
1516:src/vm2.c     **** 						  op = op + FIX_OP;
1517:src/vm2.c     **** 						}
1518:src/vm2.c     **** 						goto *array[op];
 3056              		.loc 1 1518 0
 3057 1952 83E07F   		andl	$127, %eax
 3058              	.LVL431:
 3059 1955 488B0CC5 		movq	array.2280(,%rax,8), %rcx
GAS LISTING /tmp/cc15eBE3.s 			page 101


 3059      00000000 
 3060 195d E9D5EFFF 		jmp	.L112
 3060      FF
 3061              	.L196:
 3062              	.LVL432:
1519:src/vm2.c     **** 						
1520:src/vm2.c     **** 		//				break;
1521:src/vm2.c     **** 		//			}
1522:src/vm2.c     **** 		// 0+17=17		case 0b010001: { // mthi	010001	MoveTo		hi = $s
1523:src/vm2.c     **** 		mthi:
1524:src/vm2.c     **** #if INDIRECT_DEBUG
1525:src/vm2.c     **** printf("%d|mthi\n",counter);
1526:src/vm2.c     **** counter++;
1527:src/vm2.c     **** #endif
1528:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1529:src/vm2.c     **** 						HI = RF[rs];
1530:src/vm2.c     **** 						PC  =  nPC;
 3063              		.loc 1 1530 0
 3064 1962 8B050000 		movl	nPC(%rip), %eax
 3064      0000
1528:src/vm2.c     **** 						HI = RF[rs];
 3065              		.loc 1 1528 0
 3066 1968 41C1E815 		shrl	$21, %r8d
 3067              	.LVL433:
1529:src/vm2.c     **** 						PC  =  nPC;
 3068              		.loc 1 1529 0
 3069 196c 4183E01F 		andl	$31, %r8d
 3070 1970 468B2C85 		movl	RF(,%r8,4), %r13d
 3070      00000000 
 3071              	.LVL434:
1531:src/vm2.c     **** 						nPC  += 4;
 3072              		.loc 1 1531 0
 3073 1978 8D5004   		leal	4(%rax), %edx
1530:src/vm2.c     **** 						nPC  += 4;
 3074              		.loc 1 1530 0
 3075 197b 89050000 		movl	%eax, PC(%rip)
 3075      0000
 3076              		.loc 1 1531 0
 3077 1981 89150000 		movl	%edx, nPC(%rip)
 3077      0000
1532:src/vm2.c     **** 						
1533:src/vm2.c     **** 						// FETCH
1534:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 3078              		.loc 1 1534 0
 3079 1987 8D5003   		leal	3(%rax), %edx
 3080 198a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3080      00000000 
 3081 1992 89C2     		movl	%eax, %edx
 3082 1994 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3082      000000
 3083 199b C1E218   		sall	$24, %edx
 3084 199e 4109D0   		orl	%edx, %r8d
 3085 19a1 8D5001   		leal	1(%rax), %edx
 3086 19a4 83C002   		addl	$2, %eax
 3087 19a7 0FB68000 		movzbl	VM_memory(%rax), %eax
 3087      000000
 3088 19ae 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 102


 3088      000000
 3089 19b5 C1E008   		sall	$8, %eax
 3090 19b8 C1E210   		sall	$16, %edx
 3091 19bb 4109D0   		orl	%edx, %r8d
 3092 19be 4109C0   		orl	%eax, %r8d
 3093              	.LVL435:
1535:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3094              		.loc 1 1535 0
 3095 19c1 4489C2   		movl	%r8d, %edx
1536:src/vm2.c     **** 						if (op == 0x0) {
1537:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 3096              		.loc 1 1537 0
 3097 19c4 4488C0   		movb	%r8b, %al
1535:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3098              		.loc 1 1535 0
 3099 19c7 C1EA1A   		shrl	$26, %edx
 3100              	.LVL436:
 3101              		.loc 1 1537 0
 3102 19ca 83E03F   		andl	$63, %eax
 3103 19cd 8D4A2B   		leal	43(%rdx), %ecx
 3104 19d0 84D2     		testb	%dl, %dl
 3105 19d2 0F45C1   		cmovne	%ecx, %eax
 3106              	.LVL437:
1538:src/vm2.c     **** 						  op = op + funct;
1539:src/vm2.c     **** 						}
1540:src/vm2.c     **** 						else {
1541:src/vm2.c     **** 						  op = op + FIX_OP;
1542:src/vm2.c     **** 						}
1543:src/vm2.c     **** 						goto *array[op];
 3107              		.loc 1 1543 0
 3108 19d5 83E07F   		andl	$127, %eax
 3109              	.LVL438:
 3110 19d8 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3110      00000000 
 3111 19e0 E952EFFF 		jmp	.L112
 3111      FF
 3112              	.L199:
 3113              	.LVL439:
1544:src/vm2.c     **** 						
1545:src/vm2.c     **** 		//				break;
1546:src/vm2.c     **** 		//			}
1547:src/vm2.c     **** 		// 0+19=19		case 0b010011: { // mtlo	010011	MoveTo		lo = $s
1548:src/vm2.c     **** 		mtlo:
1549:src/vm2.c     **** #if INDIRECT_DEBUG
1550:src/vm2.c     **** printf("%d|mtlo\n",counter);
1551:src/vm2.c     **** counter++;
1552:src/vm2.c     **** #endif
1553:src/vm2.c     **** 						rs = (instr >> 21) & 0x1F;
1554:src/vm2.c     **** 						LO = RF[rs];
1555:src/vm2.c     **** 						PC  =  nPC;
 3114              		.loc 1 1555 0
 3115 19e5 8B050000 		movl	nPC(%rip), %eax
 3115      0000
1553:src/vm2.c     **** 						LO = RF[rs];
 3116              		.loc 1 1553 0
 3117 19eb 41C1E815 		shrl	$21, %r8d
 3118              	.LVL440:
GAS LISTING /tmp/cc15eBE3.s 			page 103


1554:src/vm2.c     **** 						PC  =  nPC;
 3119              		.loc 1 1554 0
 3120 19ef 4183E01F 		andl	$31, %r8d
 3121 19f3 428B1C85 		movl	RF(,%r8,4), %ebx
 3121      00000000 
 3122              	.LVL441:
1556:src/vm2.c     **** 						nPC  += 4;
 3123              		.loc 1 1556 0
 3124 19fb 8D5004   		leal	4(%rax), %edx
1555:src/vm2.c     **** 						nPC  += 4;
 3125              		.loc 1 1555 0
 3126 19fe 89050000 		movl	%eax, PC(%rip)
 3126      0000
 3127              		.loc 1 1556 0
 3128 1a04 89150000 		movl	%edx, nPC(%rip)
 3128      0000
1557:src/vm2.c     **** 						
1558:src/vm2.c     **** 						// FETCH
1559:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 3129              		.loc 1 1559 0
 3130 1a0a 8D5003   		leal	3(%rax), %edx
 3131 1a0d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3131      00000000 
 3132 1a15 89C2     		movl	%eax, %edx
 3133 1a17 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3133      000000
 3134 1a1e C1E218   		sall	$24, %edx
 3135 1a21 4109D0   		orl	%edx, %r8d
 3136 1a24 8D5001   		leal	1(%rax), %edx
 3137 1a27 83C002   		addl	$2, %eax
 3138 1a2a 0FB68000 		movzbl	VM_memory(%rax), %eax
 3138      000000
 3139 1a31 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3139      000000
 3140 1a38 C1E008   		sall	$8, %eax
 3141 1a3b C1E210   		sall	$16, %edx
 3142 1a3e 4109D0   		orl	%edx, %r8d
 3143 1a41 4109C0   		orl	%eax, %r8d
 3144              	.LVL442:
1560:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3145              		.loc 1 1560 0
 3146 1a44 4489C2   		movl	%r8d, %edx
1561:src/vm2.c     **** 						if (op == 0x0) {
1562:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 3147              		.loc 1 1562 0
 3148 1a47 4488C0   		movb	%r8b, %al
1560:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3149              		.loc 1 1560 0
 3150 1a4a C1EA1A   		shrl	$26, %edx
 3151              	.LVL443:
 3152              		.loc 1 1562 0
 3153 1a4d 83E03F   		andl	$63, %eax
 3154 1a50 8D4A2B   		leal	43(%rdx), %ecx
 3155 1a53 84D2     		testb	%dl, %dl
 3156 1a55 0F45C1   		cmovne	%ecx, %eax
 3157              	.LVL444:
1563:src/vm2.c     **** 						  op = op + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 104


1564:src/vm2.c     **** 						}
1565:src/vm2.c     **** 						else {
1566:src/vm2.c     **** 						  op = op + FIX_OP;
1567:src/vm2.c     **** 						}
1568:src/vm2.c     **** 						goto *array[op];
 3158              		.loc 1 1568 0
 3159 1a58 83E07F   		andl	$127, %eax
 3160              	.LVL445:
 3161 1a5b 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3161      00000000 
 3162 1a63 E9CFEEFF 		jmp	.L112
 3162      FF
 3163              	.L202:
 3164 1a68 0FB63D00 		movzbl	RF+8(%rip), %edi
 3164      000000
1569:src/vm2.c     **** 						
1570:src/vm2.c     **** 		//				break;
1571:src/vm2.c     **** 		//			}
1572:src/vm2.c     **** 		// 0+12=12		case 0b001100: { // syscall 	001100	syscall		$2		seen on the .s generated by the ecc 
1573:src/vm2.c     **** 		sysc:
1574:src/vm2.c     **** #if INDIRECT_DEBUG
1575:src/vm2.c     **** printf("%d|sysc\n",counter);
1576:src/vm2.c     **** counter++;
1577:src/vm2.c     **** #endif
1578:src/vm2.c     **** 						if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respec
 3165              		.loc 1 1578 0
 3166 1a6f E8000000 		call	syscall
 3166      00
 3167              	.LVL446:
 3168 1a74 84C0     		testb	%al, %al
 3169 1a76 7419     		je	.L203
 3170              	.LVL447:
 3171              	.LDL2:
1579:src/vm2.c     **** 						{
1580:src/vm2.c     **** 							halted = 1; //Syscall returned 1, exit code
1581:src/vm2.c     **** 							goto end;
1582:src/vm2.c     **** 						}
1583:src/vm2.c     **** 						PC  =  nPC;
1584:src/vm2.c     **** 						nPC  += 4;
1585:src/vm2.c     **** 						
1586:src/vm2.c     **** 						// FETCH
1587:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
1588:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
1589:src/vm2.c     **** 						if (op == 0x0) {
1590:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
1591:src/vm2.c     **** 						  op = op + funct;
1592:src/vm2.c     **** 						}
1593:src/vm2.c     **** 						else {
1594:src/vm2.c     **** 						  op = op + FIX_OP;
1595:src/vm2.c     **** 						}
1596:src/vm2.c     **** 						goto *array[op];
1597:src/vm2.c     **** 						
1598:src/vm2.c     **** 		//				break; 
1599:src/vm2.c     **** 		//			}	
1600:src/vm2.c     **** 		//			default:
1601:src/vm2.c     **** 		//			{
1602:src/vm2.c     **** 		//				if (instr != 0)	printf("\n(ERROR)Invalid instruction %x at PC: %x\n",instr, PC);
GAS LISTING /tmp/cc15eBE3.s 			page 105


1603:src/vm2.c     **** 		//			}
1604:src/vm2.c     **** 		//			break;
1605:src/vm2.c     **** 		//		}      
1606:src/vm2.c     **** 		//		break; // case 0x0
1607:src/vm2.c     **** 		//	}
1608:src/vm2.c     **** 			
1609:src/vm2.c     **** 			//Immediate encoding
1610:src/vm2.c     **** 		// 43+8=51	case 0b001000: { //addi    001000  ArithLogI       $t = $s + SE(i)
1611:src/vm2.c     **** 		addi:
1612:src/vm2.c     **** #if INDIRECT_DEBUG
1613:src/vm2.c     **** printf("%d|addi\n",counter);
1614:src/vm2.c     **** counter++;
1615:src/vm2.c     **** #endif
1616:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1617:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1618:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1619:src/vm2.c     **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
1620:src/vm2.c     **** 				PC  =  nPC;
1621:src/vm2.c     **** 				nPC  += 4;
1622:src/vm2.c     **** 						
1623:src/vm2.c     **** 				// FETCH
1624:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1625:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1626:src/vm2.c     **** 				if (op == 0x0) {
1627:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1628:src/vm2.c     **** 				  op = op + funct;
1629:src/vm2.c     **** 				}
1630:src/vm2.c     **** 				else {
1631:src/vm2.c     **** 				  op = op + FIX_OP;
1632:src/vm2.c     **** 				}
1633:src/vm2.c     **** 				goto *array[op];
1634:src/vm2.c     **** 						
1635:src/vm2.c     **** 		//		break;
1636:src/vm2.c     **** 		//	}
1637:src/vm2.c     **** 		// 43+9=52	case 0b001001: { //addiu   001001  ArithLogI       $t = $s + SE(i)
1638:src/vm2.c     **** 		addiu:
1639:src/vm2.c     **** #if INDIRECT_DEBUG
1640:src/vm2.c     **** printf("%d|addiu\n",counter);
1641:src/vm2.c     **** counter++;
1642:src/vm2.c     **** #endif
1643:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1644:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1645:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1646:src/vm2.c     **** 				RF[rt] = (RF[rs] + immediate);
1647:src/vm2.c     **** 				PC  =  nPC;
1648:src/vm2.c     **** 				nPC  += 4;
1649:src/vm2.c     **** 						
1650:src/vm2.c     **** 				// FETCH
1651:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1652:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1653:src/vm2.c     **** 				if (op == 0x0) {
1654:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1655:src/vm2.c     **** 				  op = op + funct;
1656:src/vm2.c     **** 				}
1657:src/vm2.c     **** 				else {
1658:src/vm2.c     **** 				  op = op + FIX_OP;
1659:src/vm2.c     **** 				}
GAS LISTING /tmp/cc15eBE3.s 			page 106


1660:src/vm2.c     **** 				goto *array[op];
1661:src/vm2.c     **** 						
1662:src/vm2.c     **** 		//		break;
1663:src/vm2.c     **** 		//	}
1664:src/vm2.c     **** 		// 43+12=55	case 0b001100: { //andi    001100  ArithLogI       $t = $s & ZE(i)
1665:src/vm2.c     **** 		andi:
1666:src/vm2.c     **** #if INDIRECT_DEBUG
1667:src/vm2.c     **** printf("%d|andi\n",counter);
1668:src/vm2.c     **** counter++;
1669:src/vm2.c     **** #endif
1670:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1671:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1672:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1673:src/vm2.c     **** 				RF[rt] = RF[rs] & (uint32_t)immediate;
1674:src/vm2.c     **** 				PC  =  nPC;
1675:src/vm2.c     **** 				nPC  += 4;
1676:src/vm2.c     **** 						
1677:src/vm2.c     **** 				// FETCH
1678:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1679:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1680:src/vm2.c     **** 				if (op == 0x0) {
1681:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1682:src/vm2.c     **** 				  op = op + funct;
1683:src/vm2.c     **** 				}
1684:src/vm2.c     **** 				else {
1685:src/vm2.c     **** 				  op = op + FIX_OP;
1686:src/vm2.c     **** 				}
1687:src/vm2.c     **** 				goto *array[op];
1688:src/vm2.c     **** 						
1689:src/vm2.c     **** 		//		break;
1690:src/vm2.c     **** 		//	}
1691:src/vm2.c     **** 		// 43+13=56	case 0b001101: { //ori     001101  ArithLogI       $t = $s | ZE(i)
1692:src/vm2.c     **** 		ori:
1693:src/vm2.c     **** #if INDIRECT_DEBUG
1694:src/vm2.c     **** printf("%d|ori\n",counter);
1695:src/vm2.c     **** counter++;
1696:src/vm2.c     **** #endif
1697:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1698:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1699:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1700:src/vm2.c     **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
1701:src/vm2.c     **** 				PC  =  nPC;
1702:src/vm2.c     **** 				nPC  += 4;
1703:src/vm2.c     **** 						
1704:src/vm2.c     **** 				// FETCH
1705:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1706:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1707:src/vm2.c     **** 				if (op == 0x0) {
1708:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1709:src/vm2.c     **** 				  op = op + funct;
1710:src/vm2.c     **** 				}
1711:src/vm2.c     **** 				else {
1712:src/vm2.c     **** 				  op = op + FIX_OP;
1713:src/vm2.c     **** 				}
1714:src/vm2.c     **** 				goto *array[op];
1715:src/vm2.c     **** 						
1716:src/vm2.c     **** 		//		break;
GAS LISTING /tmp/cc15eBE3.s 			page 107


1717:src/vm2.c     **** 		//	}
1718:src/vm2.c     **** 		// 43+14=57	case 0b001110: { //xori    001110  ArithLogI       $d = $s ^ ZE(i)
1719:src/vm2.c     **** 		xori:
1720:src/vm2.c     **** #if INDIRECT_DEBUG
1721:src/vm2.c     **** printf("%d|xori\n",counter);
1722:src/vm2.c     **** counter++;
1723:src/vm2.c     **** #endif
1724:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1725:src/vm2.c     **** 				rd = (instr >> 11) & 0x1F;
1726:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1727:src/vm2.c     **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
1728:src/vm2.c     **** 				PC  =  nPC;
1729:src/vm2.c     **** 				nPC  += 4;
1730:src/vm2.c     **** 						
1731:src/vm2.c     **** 				// FETCH
1732:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1733:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1734:src/vm2.c     **** 				if (op == 0x0) {
1735:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1736:src/vm2.c     **** 				  op = op + funct;
1737:src/vm2.c     **** 				}
1738:src/vm2.c     **** 				else {
1739:src/vm2.c     **** 				  op = op + FIX_OP;
1740:src/vm2.c     **** 				}
1741:src/vm2.c     **** 				goto *array[op];
1742:src/vm2.c     **** 						
1743:src/vm2.c     **** 		//		break;
1744:src/vm2.c     **** 		//	}
1745:src/vm2.c     **** 		// 43+15=58	case 0b001111: 	 //lui	   001111          Rdest, imm: Load Upper Immediate
1746:src/vm2.c     **** 		lui:
1747:src/vm2.c     **** #if INDIRECT_DEBUG
1748:src/vm2.c     **** printf("%d|lui\n",counter);
1749:src/vm2.c     **** counter++;
1750:src/vm2.c     **** #endif
1751:src/vm2.c     **** 				// NOTHING IMPLEMENTED, COPIED FROM BELOW
1752:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1753:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1754:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
1755:src/vm2.c     **** 				PC  =  nPC;
1756:src/vm2.c     **** 				nPC  += 4;
1757:src/vm2.c     **** 			  
1758:src/vm2.c     **** 				// FETCH
1759:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1760:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1761:src/vm2.c     **** 				if (op == 0x0) {
1762:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1763:src/vm2.c     **** 				  op = op + funct;
1764:src/vm2.c     **** 				}
1765:src/vm2.c     **** 				else {
1766:src/vm2.c     **** 				  op = op + FIX_OP;
1767:src/vm2.c     **** 				}
1768:src/vm2.c     **** 				goto *array[op];
1769:src/vm2.c     **** 						
1770:src/vm2.c     **** 		// 43+25=68	case 0b011001: { //lhi     011001  LoadI   HH ($t) = i 
1771:src/vm2.c     **** 		lhi:
1772:src/vm2.c     **** #if INDIRECT_DEBUG
1773:src/vm2.c     **** printf("%d|lhi\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 108


1774:src/vm2.c     **** counter++;
1775:src/vm2.c     **** #endif
1776:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1777:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1778:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
1779:src/vm2.c     **** 				PC  =  nPC;
1780:src/vm2.c     **** 				nPC  += 4;
1781:src/vm2.c     **** 						
1782:src/vm2.c     **** 				// FETCH
1783:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1784:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1785:src/vm2.c     **** 				if (op == 0x0) {
1786:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1787:src/vm2.c     **** 				  op = op + funct;
1788:src/vm2.c     **** 				}
1789:src/vm2.c     **** 				else {
1790:src/vm2.c     **** 				  op = op + FIX_OP;
1791:src/vm2.c     **** 				}
1792:src/vm2.c     **** 				goto *array[op];
1793:src/vm2.c     **** 						
1794:src/vm2.c     **** 		//		break;
1795:src/vm2.c     **** 		//	}
1796:src/vm2.c     **** 		// 43+24=67	case 0b011000: { //llo     011000  LoadI   LH ($t) = i
1797:src/vm2.c     **** 		llo:
1798:src/vm2.c     **** #if INDIRECT_DEBUG
1799:src/vm2.c     **** printf("%d|llo\n",counter);
1800:src/vm2.c     **** counter++;
1801:src/vm2.c     **** #endif
1802:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1803:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1804:src/vm2.c     **** 			  	RF[rt] = immediate;
1805:src/vm2.c     **** 				PC  =  nPC;
1806:src/vm2.c     **** 				nPC  += 4;
1807:src/vm2.c     **** 						
1808:src/vm2.c     **** 				// FETCH
1809:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1810:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1811:src/vm2.c     **** 				if (op == 0x0) {
1812:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1813:src/vm2.c     **** 				  op = op + funct;
1814:src/vm2.c     **** 				}
1815:src/vm2.c     **** 				else {
1816:src/vm2.c     **** 				  op = op + FIX_OP;
1817:src/vm2.c     **** 				}
1818:src/vm2.c     **** 				goto *array[op];
1819:src/vm2.c     **** 						
1820:src/vm2.c     **** 		//		break;
1821:src/vm2.c     **** 		//	}
1822:src/vm2.c     **** 		// 43+10=53	case 0b001010: { //slti    001010  ArithLogI       $t = ($s < SE(i))
1823:src/vm2.c     **** 		slti:
1824:src/vm2.c     **** #if INDIRECT_DEBUG
1825:src/vm2.c     **** printf("%d|slti\n",counter);
1826:src/vm2.c     **** counter++;
1827:src/vm2.c     **** #endif
1828:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1829:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1830:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 109


1831:src/vm2.c     **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
1832:src/vm2.c     **** 				PC  =  nPC;
1833:src/vm2.c     **** 				nPC  += 4;
1834:src/vm2.c     **** 						
1835:src/vm2.c     **** 				// FETCH
1836:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1837:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1838:src/vm2.c     **** 				if (op == 0x0) {
1839:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1840:src/vm2.c     **** 				  op = op + funct;
1841:src/vm2.c     **** 				}
1842:src/vm2.c     **** 				else {
1843:src/vm2.c     **** 				  op = op + FIX_OP;
1844:src/vm2.c     **** 				}
1845:src/vm2.c     **** 				goto *array[op];
1846:src/vm2.c     **** 						
1847:src/vm2.c     **** 		//		break;
1848:src/vm2.c     **** 		//	}
1849:src/vm2.c     **** 		// 43+11=54	case 0b001011: { //sltiu   001011  ArithLogI       $t = ($s < SE(i)) 
1850:src/vm2.c     **** 		sltiu:
1851:src/vm2.c     **** #if INDIRECT_DEBUG
1852:src/vm2.c     **** printf("%d|sltiu\n",counter);
1853:src/vm2.c     **** counter++;
1854:src/vm2.c     **** #endif
1855:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1856:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1857:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
1858:src/vm2.c     **** 				RF[rt] = (RF[rs] < immediate)?1:0;
1859:src/vm2.c     **** 				PC  =  nPC;
1860:src/vm2.c     **** 				nPC  += 4;
1861:src/vm2.c     **** 						
1862:src/vm2.c     **** 				// FETCH
1863:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1864:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1865:src/vm2.c     **** 				if (op == 0x0) {
1866:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1867:src/vm2.c     **** 				  op = op + funct;
1868:src/vm2.c     **** 				}
1869:src/vm2.c     **** 				else {
1870:src/vm2.c     **** 				  op = op + FIX_OP;
1871:src/vm2.c     **** 				}
1872:src/vm2.c     **** 				goto *array[op];
1873:src/vm2.c     **** 						
1874:src/vm2.c     **** 		//		break;
1875:src/vm2.c     **** 		//	}
1876:src/vm2.c     **** 		// 43+1=44	case 0b000001: {
1877:src/vm2.c     **** 		branch:
1878:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1879:src/vm2.c     **** 				if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
1880:src/vm2.c     **** 				{
1881:src/vm2.c     **** #if INDIRECT_DEBUG
1882:src/vm2.c     **** printf("%d|bgez\n",counter);
1883:src/vm2.c     **** counter++;
1884:src/vm2.c     **** #endif
1885:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
1886:src/vm2.c     **** 					if ((int32_t)RF[rs] >= 0)
1887:src/vm2.c     **** 					{
GAS LISTING /tmp/cc15eBE3.s 			page 110


1888:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;	
1889:src/vm2.c     **** 						PC  =  nPC;
1890:src/vm2.c     **** 						nPC  += (immediate << 2);
1891:src/vm2.c     **** 						//advance_pc(immediate << 2);
1892:src/vm2.c     **** 						//continue;
1893:src/vm2.c     **** 						//break;
1894:src/vm2.c     **** 					}
1895:src/vm2.c     **** 					else
1896:src/vm2.c     **** 					{
1897:src/vm2.c     **** 						PC  =  nPC;
1898:src/vm2.c     **** 						nPC  += 4;
1899:src/vm2.c     **** 						//break;
1900:src/vm2.c     **** 					}
1901:src/vm2.c     **** 				}
1902:src/vm2.c     **** 				else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
1903:src/vm2.c     **** 				{
1904:src/vm2.c     **** #if INDIRECT_DEBUG
1905:src/vm2.c     **** printf("%d|bgezal\n",counter);
1906:src/vm2.c     **** counter++;
1907:src/vm2.c     **** #endif
1908:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
1909:src/vm2.c     **** 					if ((int32_t)RF[rs] >= 0)
1910:src/vm2.c     **** 					{
1911:src/vm2.c     **** 						RF[31] = PC + 8;
1912:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;
1913:src/vm2.c     **** 						PC  =  nPC;
1914:src/vm2.c     **** 						nPC  += (immediate << 2);
1915:src/vm2.c     **** 						//advance_pc(immediate << 2);
1916:src/vm2.c     **** 						//continue;
1917:src/vm2.c     **** 						//break;
1918:src/vm2.c     **** 					}
1919:src/vm2.c     **** 					else
1920:src/vm2.c     **** 					{
1921:src/vm2.c     **** 						PC  =  nPC;
1922:src/vm2.c     **** 						nPC  += 4;
1923:src/vm2.c     **** 						//break;
1924:src/vm2.c     **** 					}
1925:src/vm2.c     **** 				}
1926:src/vm2.c     **** 				else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
1927:src/vm2.c     **** 				{
1928:src/vm2.c     **** #if INDIRECT_DEBUG
1929:src/vm2.c     **** printf("%d|bltz\n",counter);
1930:src/vm2.c     **** counter++;
1931:src/vm2.c     **** #endif
1932:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
1933:src/vm2.c     **** 					if ((int32_t)RF[rs] < 0)
1934:src/vm2.c     **** 					{
1935:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;
1936:src/vm2.c     **** 						PC  =  nPC;
1937:src/vm2.c     **** 						nPC  += (immediate << 2);
1938:src/vm2.c     **** 						//advance_pc(immediate << 2);
1939:src/vm2.c     **** 						//continue;
1940:src/vm2.c     **** 						//break;
1941:src/vm2.c     **** 					}
1942:src/vm2.c     **** 					else
1943:src/vm2.c     **** 					{
1944:src/vm2.c     **** 						PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 111


1945:src/vm2.c     **** 						nPC  += 4;
1946:src/vm2.c     **** 						//break;
1947:src/vm2.c     **** 					}
1948:src/vm2.c     **** 				}
1949:src/vm2.c     **** 				else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
1950:src/vm2.c     **** 				{
1951:src/vm2.c     **** #if INDIRECT_DEBUG
1952:src/vm2.c     **** printf("%d|bltzal\n",counter);
1953:src/vm2.c     **** counter++;
1954:src/vm2.c     **** #endif
1955:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
1956:src/vm2.c     **** 					if ((int32_t)RF[rs] < 0)
1957:src/vm2.c     **** 					{
1958:src/vm2.c     **** 						RF[31] = PC + 8;
1959:src/vm2.c     **** 						immediate = (instr >> 0) & 0xFFFF;
1960:src/vm2.c     **** 						PC  =  nPC;
1961:src/vm2.c     **** 						nPC  += (immediate << 2);
1962:src/vm2.c     **** 						//advance_pc(immediate << 2);
1963:src/vm2.c     **** 						//continue;
1964:src/vm2.c     **** 						//break;
1965:src/vm2.c     **** 					}
1966:src/vm2.c     **** 					else
1967:src/vm2.c     **** 					{
1968:src/vm2.c     **** 						PC  =  nPC;
1969:src/vm2.c     **** 						nPC  += 4;
1970:src/vm2.c     **** 						//break;
1971:src/vm2.c     **** 					}
1972:src/vm2.c     **** 				}
1973:src/vm2.c     **** 						
1974:src/vm2.c     **** 				// FETCH
1975:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
1976:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
1977:src/vm2.c     **** 				if (op == 0x0) {
1978:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
1979:src/vm2.c     **** 				  op = op + funct;
1980:src/vm2.c     **** 				}
1981:src/vm2.c     **** 				else {
1982:src/vm2.c     **** 				  op = op + FIX_OP;
1983:src/vm2.c     **** 				}
1984:src/vm2.c     **** 				goto *array[op];
1985:src/vm2.c     **** 						
1986:src/vm2.c     **** 		//		break;
1987:src/vm2.c     **** 		//	}
1988:src/vm2.c     **** 		// 43+4=47	case 0b000100: { //beq     000100  Branch  if ($s == $t) pc += i << 2
1989:src/vm2.c     **** 		beq:
1990:src/vm2.c     **** #if INDIRECT_DEBUG
1991:src/vm2.c     **** printf("%d|beq\n",counter);
1992:src/vm2.c     **** counter++;
1993:src/vm2.c     **** #endif
1994:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
1995:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
1996:src/vm2.c     **** 				if (RF[rs] == RF[rt])
1997:src/vm2.c     **** 				{
1998:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
1999:src/vm2.c     **** 					PC  =  nPC;
2000:src/vm2.c     **** 					nPC  += (immediate << 2);
2001:src/vm2.c     **** 					//advance_pc(immediate << 2);
GAS LISTING /tmp/cc15eBE3.s 			page 112


2002:src/vm2.c     **** 					//continue;
2003:src/vm2.c     **** 					//break;
2004:src/vm2.c     **** 				}
2005:src/vm2.c     **** 				else
2006:src/vm2.c     **** 				{
2007:src/vm2.c     **** 					PC  =  nPC;
2008:src/vm2.c     **** 					nPC  += 4;
2009:src/vm2.c     **** 					//break;
2010:src/vm2.c     **** 				}
2011:src/vm2.c     **** 						
2012:src/vm2.c     **** 				// FETCH
2013:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2014:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2015:src/vm2.c     **** 				if (op == 0x0) {
2016:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2017:src/vm2.c     **** 				  op = op + funct;
2018:src/vm2.c     **** 				}
2019:src/vm2.c     **** 				else {
2020:src/vm2.c     **** 				  op = op + FIX_OP;
2021:src/vm2.c     **** 				}
2022:src/vm2.c     **** 				goto *array[op];
2023:src/vm2.c     **** 						
2024:src/vm2.c     **** 		//		break;
2025:src/vm2.c     **** 		//	}
2026:src/vm2.c     **** 		// 43+7=50	case 0b000111: { //bgtz    000111  BranchZ if ($s > 0) pc += i << 2
2027:src/vm2.c     **** 		bgtz:
2028:src/vm2.c     **** #if INDIRECT_DEBUG
2029:src/vm2.c     **** printf("%d|bgtz\n",counter);
2030:src/vm2.c     **** counter++;
2031:src/vm2.c     **** #endif
2032:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2033:src/vm2.c     **** 				if ((int32_t)RF[rs] > 0)
2034:src/vm2.c     **** 				{
2035:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
2036:src/vm2.c     **** 					PC  =  nPC;
2037:src/vm2.c     **** 					nPC  += (immediate << 2);
2038:src/vm2.c     **** 					//advance_pc(immediate << 2);
2039:src/vm2.c     **** 					//continue;
2040:src/vm2.c     **** 					//break;
2041:src/vm2.c     **** 				}
2042:src/vm2.c     **** 				else
2043:src/vm2.c     **** 				{
2044:src/vm2.c     **** 					PC  =  nPC;
2045:src/vm2.c     **** 					nPC  += 4;
2046:src/vm2.c     **** 					//break;
2047:src/vm2.c     **** 				}
2048:src/vm2.c     **** 						
2049:src/vm2.c     **** 				// FETCH
2050:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2051:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2052:src/vm2.c     **** 				if (op == 0x0) {
2053:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2054:src/vm2.c     **** 				  op = op + funct;
2055:src/vm2.c     **** 				}
2056:src/vm2.c     **** 				else {
2057:src/vm2.c     **** 				  op = op + FIX_OP;
2058:src/vm2.c     **** 				}
GAS LISTING /tmp/cc15eBE3.s 			page 113


2059:src/vm2.c     **** 				goto *array[op];
2060:src/vm2.c     **** 						
2061:src/vm2.c     **** 		//		break;
2062:src/vm2.c     **** 		//	}
2063:src/vm2.c     **** 		// 43+6=49	case 0b000110: { //blez    000110  BranchZ if ($s <= 0) pc += i << 2
2064:src/vm2.c     **** 		blez:
2065:src/vm2.c     **** #if INDIRECT_DEBUG
2066:src/vm2.c     **** printf("%d|blez\n",counter);
2067:src/vm2.c     **** counter++;
2068:src/vm2.c     **** #endif
2069:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2070:src/vm2.c     **** 				if ((int32_t)RF[rs] <= 0)
2071:src/vm2.c     **** 				{
2072:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
2073:src/vm2.c     **** 					PC  =  nPC;
2074:src/vm2.c     **** 					nPC  += (immediate << 2);
2075:src/vm2.c     **** 					//advance_pc(immediate << 2);
2076:src/vm2.c     **** 					//continue;
2077:src/vm2.c     **** 					//break;
2078:src/vm2.c     **** 				}
2079:src/vm2.c     **** 				else
2080:src/vm2.c     **** 				{
2081:src/vm2.c     **** 					PC  =  nPC;
2082:src/vm2.c     **** 					nPC  += 4;
2083:src/vm2.c     **** 					//break;
2084:src/vm2.c     **** 				}
2085:src/vm2.c     **** 						
2086:src/vm2.c     **** 				// FETCH
2087:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2088:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2089:src/vm2.c     **** 				if (op == 0x0) {
2090:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2091:src/vm2.c     **** 				  op = op + funct;
2092:src/vm2.c     **** 				}
2093:src/vm2.c     **** 				else {
2094:src/vm2.c     **** 				  op = op + FIX_OP;
2095:src/vm2.c     **** 				}
2096:src/vm2.c     **** 				goto *array[op];
2097:src/vm2.c     **** 						
2098:src/vm2.c     **** 		//		break;
2099:src/vm2.c     **** 		//	}
2100:src/vm2.c     **** 		// 43+5=48	case 0b000101: { //bne     000101  Branch  if ($s != $t) pc += i << 2
2101:src/vm2.c     **** 		bne:
2102:src/vm2.c     **** #if INDIRECT_DEBUG
2103:src/vm2.c     **** printf("%d|bne\n",counter);
2104:src/vm2.c     **** counter++;
2105:src/vm2.c     **** #endif
2106:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2107:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2108:src/vm2.c     **** 				if (RF[rs] != RF[rt])
2109:src/vm2.c     **** 				{
2110:src/vm2.c     **** 					immediate = (instr >> 0) & 0xFFFF;
2111:src/vm2.c     **** 					PC  =  nPC;
2112:src/vm2.c     **** 					nPC  += (immediate << 2);
2113:src/vm2.c     **** 					//advance_pc(immediate << 2);
2114:src/vm2.c     **** 					//continue;
2115:src/vm2.c     **** 					//break;
GAS LISTING /tmp/cc15eBE3.s 			page 114


2116:src/vm2.c     **** 				}
2117:src/vm2.c     **** 				else
2118:src/vm2.c     **** 				{
2119:src/vm2.c     **** 					PC  =  nPC;
2120:src/vm2.c     **** 					nPC  += 4;
2121:src/vm2.c     **** 					//break;
2122:src/vm2.c     **** 				}
2123:src/vm2.c     **** 						
2124:src/vm2.c     **** 				// FETCH
2125:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2126:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2127:src/vm2.c     **** 				if (op == 0x0) {
2128:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2129:src/vm2.c     **** 				  op = op + funct;
2130:src/vm2.c     **** 				}
2131:src/vm2.c     **** 				else {
2132:src/vm2.c     **** 				  op = op + FIX_OP;
2133:src/vm2.c     **** 				}
2134:src/vm2.c     **** 				goto *array[op];
2135:src/vm2.c     **** 						
2136:src/vm2.c     **** 		//		break;
2137:src/vm2.c     **** 		//	}
2138:src/vm2.c     **** 		// 43+32=75	case 0b100000: { //lb      100000  LoadStore       $t = SE (MEM [$s + i]:1)
2139:src/vm2.c     **** 		lb:
2140:src/vm2.c     **** #if INDIRECT_DEBUG
2141:src/vm2.c     **** printf("%d|lb\n",counter);
2142:src/vm2.c     **** counter++;
2143:src/vm2.c     **** #endif
2144:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2145:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2146:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2147:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
2148:src/vm2.c     **** 				PC  =  nPC;
2149:src/vm2.c     **** 				nPC  += 4;
2150:src/vm2.c     **** 						
2151:src/vm2.c     **** 				// FETCH
2152:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2153:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2154:src/vm2.c     **** 				if (op == 0x0) {
2155:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2156:src/vm2.c     **** 				  op = op + funct;
2157:src/vm2.c     **** 				}
2158:src/vm2.c     **** 				else {
2159:src/vm2.c     **** 				  op = op + FIX_OP;
2160:src/vm2.c     **** 				}
2161:src/vm2.c     **** 				goto *array[op];
2162:src/vm2.c     **** 						
2163:src/vm2.c     **** 		//		break;
2164:src/vm2.c     **** 		//	}
2165:src/vm2.c     **** 		// 43+36=79	case 0b100100: { //lbu     100100  LoadStore       $t = ZE (MEM [$s + i]:1)
2166:src/vm2.c     **** 		lbu:
2167:src/vm2.c     **** #if INDIRECT_DEBUG
2168:src/vm2.c     **** printf("%d|lbu\n",counter);
2169:src/vm2.c     **** counter++;
2170:src/vm2.c     **** #endif
2171:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2172:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 115


2173:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2174:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
2175:src/vm2.c     **** 				PC  =  nPC;
2176:src/vm2.c     **** 				nPC  += 4;
2177:src/vm2.c     **** 						
2178:src/vm2.c     **** 				// FETCH
2179:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2180:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2181:src/vm2.c     **** 				if (op == 0x0) {
2182:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2183:src/vm2.c     **** 				  op = op + funct;
2184:src/vm2.c     **** 				}
2185:src/vm2.c     **** 				else {
2186:src/vm2.c     **** 				  op = op + FIX_OP;
2187:src/vm2.c     **** 				}
2188:src/vm2.c     **** 				goto *array[op];
2189:src/vm2.c     **** 						
2190:src/vm2.c     **** 		//		break;
2191:src/vm2.c     **** 		//	}
2192:src/vm2.c     **** 		// 43+33=76	case 0b100001: { //lh      100001  LoadStore       $t = SE (MEM [$s + i]:2)
2193:src/vm2.c     **** 		lh:
2194:src/vm2.c     **** #if INDIRECT_DEBUG
2195:src/vm2.c     **** printf("%d|lh\n",counter);
2196:src/vm2.c     **** counter++;
2197:src/vm2.c     **** #endif
2198:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2199:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2200:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2201:src/vm2.c     **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
2202:src/vm2.c     **** 				PC  =  nPC;
2203:src/vm2.c     **** 				nPC  += 4;
2204:src/vm2.c     **** 						
2205:src/vm2.c     **** 				// FETCH
2206:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2207:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2208:src/vm2.c     **** 				if (op == 0x0) {
2209:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2210:src/vm2.c     **** 				  op = op + funct;
2211:src/vm2.c     **** 				}
2212:src/vm2.c     **** 				else {
2213:src/vm2.c     **** 				  op = op + FIX_OP;
2214:src/vm2.c     **** 				}
2215:src/vm2.c     **** 				goto *array[op];
2216:src/vm2.c     **** 						
2217:src/vm2.c     **** 		//		break;
2218:src/vm2.c     **** 		//	}
2219:src/vm2.c     **** 		// 43+37=80	case 0b100101: { //lhu     100101  LoadStore       $t = ZE (MEM [$s + i]:2)
2220:src/vm2.c     **** 		lhu:
2221:src/vm2.c     **** #if INDIRECT_DEBUG
2222:src/vm2.c     **** printf("%d|lhu\n",counter);
2223:src/vm2.c     **** counter++;
2224:src/vm2.c     **** #endif
2225:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2226:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2227:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2228:src/vm2.c     **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
2229:src/vm2.c     **** 				PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 116


2230:src/vm2.c     **** 				nPC  += 4;
2231:src/vm2.c     **** 						
2232:src/vm2.c     **** 				// FETCH
2233:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2234:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2235:src/vm2.c     **** 				if (op == 0x0) {
2236:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2237:src/vm2.c     **** 				  op = op + funct;
2238:src/vm2.c     **** 				}
2239:src/vm2.c     **** 				else {
2240:src/vm2.c     **** 				  op = op + FIX_OP;
2241:src/vm2.c     **** 				}
2242:src/vm2.c     **** 				goto *array[op];
2243:src/vm2.c     **** 						
2244:src/vm2.c     **** 		//		break;
2245:src/vm2.c     **** 		//	}
2246:src/vm2.c     **** 		// 43+35=78	case 0b100011: { //lw      100011  LoadStore       $t = MEM [$s + i]:4
2247:src/vm2.c     **** 		lw:
2248:src/vm2.c     **** #if INDIRECT_DEBUG
2249:src/vm2.c     **** printf("%d|lw\n",counter);
2250:src/vm2.c     **** counter++;
2251:src/vm2.c     **** #endif
2252:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2253:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2254:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2255:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
2256:src/vm2.c     **** 				PC  =  nPC;
2257:src/vm2.c     **** 				nPC  += 4;
2258:src/vm2.c     **** 						
2259:src/vm2.c     **** 				// FETCH
2260:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2261:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2262:src/vm2.c     **** 				if (op == 0x0) {
2263:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2264:src/vm2.c     **** 				  op = op + funct;
2265:src/vm2.c     **** 				}
2266:src/vm2.c     **** 				else {
2267:src/vm2.c     **** 				  op = op + FIX_OP;
2268:src/vm2.c     **** 				}
2269:src/vm2.c     **** 				goto *array[op];
2270:src/vm2.c     **** 						
2271:src/vm2.c     **** 		//		break;
2272:src/vm2.c     **** 		//	}
2273:src/vm2.c     **** 		// 43+40=83	case 0b101000: { //sb      101000  Loadtore       MEM [$s + i]:1 = LB ($t)
2274:src/vm2.c     **** 		sb:
2275:src/vm2.c     **** #if INDIRECT_DEBUG
2276:src/vm2.c     **** printf("%d|sb\n",counter);
2277:src/vm2.c     **** counter++;
2278:src/vm2.c     **** #endif
2279:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2280:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2281:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2282:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
2283:src/vm2.c     **** 				PC  =  nPC;
2284:src/vm2.c     **** 				nPC  += 4;
2285:src/vm2.c     **** 						
2286:src/vm2.c     **** 				// FETCH
GAS LISTING /tmp/cc15eBE3.s 			page 117


2287:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2288:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2289:src/vm2.c     **** 				if (op == 0x0) {
2290:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2291:src/vm2.c     **** 				  op = op + funct;
2292:src/vm2.c     **** 				}
2293:src/vm2.c     **** 				else {
2294:src/vm2.c     **** 				  op = op + FIX_OP;
2295:src/vm2.c     **** 				}
2296:src/vm2.c     **** 				goto *array[op];
2297:src/vm2.c     **** 						
2298:src/vm2.c     **** 		//		break;
2299:src/vm2.c     **** 		//	}
2300:src/vm2.c     **** 		// 43+41=84	case 0b101001: { //sh      101001  LoadStore       MEM [$s + i]:2 = LH ($t)
2301:src/vm2.c     **** 		sh:
2302:src/vm2.c     **** #if INDIRECT_DEBUG
2303:src/vm2.c     **** printf("%d|sh\n",counter);
2304:src/vm2.c     **** counter++;
2305:src/vm2.c     **** #endif
2306:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2307:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2308:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2309:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
2310:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
2311:src/vm2.c     **** 				PC  =  nPC;
2312:src/vm2.c     **** 				nPC  += 4;
2313:src/vm2.c     **** 						
2314:src/vm2.c     **** 				// FETCH
2315:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2316:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2317:src/vm2.c     **** 				if (op == 0x0) {
2318:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2319:src/vm2.c     **** 				  op = op + funct;
2320:src/vm2.c     **** 				}
2321:src/vm2.c     **** 				else {
2322:src/vm2.c     **** 				  op = op + FIX_OP;
2323:src/vm2.c     **** 				}
2324:src/vm2.c     **** 				goto *array[op];
2325:src/vm2.c     **** 						
2326:src/vm2.c     **** 		//		break;
2327:src/vm2.c     **** 		//	}
2328:src/vm2.c     **** 		// 43+43=86	case 0b101011: { //sw      101011  LoadStore       MEM [$s + i]:4 = $t
2329:src/vm2.c     **** 		sw:
2330:src/vm2.c     **** #if INDIRECT_DEBUG
2331:src/vm2.c     **** printf("%d|sw\n",counter);
2332:src/vm2.c     **** counter++;
2333:src/vm2.c     **** #endif
2334:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2335:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2336:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2337:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
2338:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
2339:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
2340:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
2341:src/vm2.c     **** 				PC  =  nPC;
2342:src/vm2.c     **** 				nPC  += 4;
2343:src/vm2.c     **** 						
GAS LISTING /tmp/cc15eBE3.s 			page 118


2344:src/vm2.c     **** 				// FETCH
2345:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2346:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2347:src/vm2.c     **** 				if (op == 0x0) {
2348:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2349:src/vm2.c     **** 				  op = op + funct;
2350:src/vm2.c     **** 				}
2351:src/vm2.c     **** 				else {
2352:src/vm2.c     **** 				  op = op + FIX_OP;
2353:src/vm2.c     **** 				}
2354:src/vm2.c     **** 				goto *array[op];
2355:src/vm2.c     **** 						
2356:src/vm2.c     **** 		//		break;
2357:src/vm2.c     **** 		//	}
2358:src/vm2.c     **** 	
2359:src/vm2.c     **** 			//Jump encoding
2360:src/vm2.c     **** 		// 43+2=45	case 0b000010: { //j       000010  Jump    pc = i << 2
2361:src/vm2.c     **** 		jump:	
2362:src/vm2.c     **** #if INDIRECT_DEBUG
2363:src/vm2.c     **** printf("%d|jump\n",counter);
2364:src/vm2.c     **** counter++;
2365:src/vm2.c     **** #endif
2366:src/vm2.c     **** 				PC = nPC;
2367:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
2368:src/vm2.c     **** 				nPC = address << 2;
2369:src/vm2.c     **** 				//continue;
2370:src/vm2.c     **** 						
2371:src/vm2.c     **** 				// FETCH
2372:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2373:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2374:src/vm2.c     **** 				if (op == 0x0) {
2375:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2376:src/vm2.c     **** 				  op = op + funct;
2377:src/vm2.c     **** 				}
2378:src/vm2.c     **** 				else {
2379:src/vm2.c     **** 				  op = op + FIX_OP;
2380:src/vm2.c     **** 				}
2381:src/vm2.c     **** 				goto *array[op];
2382:src/vm2.c     **** 						
2383:src/vm2.c     **** 		//		break;
2384:src/vm2.c     **** 		//	}
2385:src/vm2.c     **** 		// 43+3=46	case 0b000011: { //jal     000011  Jump    $31 = pc; pc = i << 2
2386:src/vm2.c     **** 		jal:
2387:src/vm2.c     **** #if INDIRECT_DEBUG
2388:src/vm2.c     **** printf("%d|jal\n",counter);
2389:src/vm2.c     **** counter++;
2390:src/vm2.c     **** #endif
2391:src/vm2.c     **** 				RF[31] = PC + 8;
2392:src/vm2.c     **** 				PC = nPC;
2393:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
2394:src/vm2.c     **** 				nPC = address << 2;
2395:src/vm2.c     **** 				//continue;
2396:src/vm2.c     **** 						
2397:src/vm2.c     **** 				// FETCH
2398:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2399:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2400:src/vm2.c     **** 				if (op == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 119


2401:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2402:src/vm2.c     **** 				  op = op + funct;
2403:src/vm2.c     **** 				}
2404:src/vm2.c     **** 				else {
2405:src/vm2.c     **** 				  op = op + FIX_OP;
2406:src/vm2.c     **** 				}
2407:src/vm2.c     **** 				goto *array[op];
2408:src/vm2.c     **** 						
2409:src/vm2.c     **** 		//		break;
2410:src/vm2.c     **** 		//	}
2411:src/vm2.c     **** 		// 43+26=69	case 0b011010: { //trap    011010  Trap    Dependent on operating system; different v
2412:src/vm2.c     **** 		trap:
2413:src/vm2.c     **** #if INDIRECT_DEBUG
2414:src/vm2.c     **** printf("%d|trap\n",counter);
2415:src/vm2.c     **** counter++;
2416:src/vm2.c     **** #endif
2417:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
2418:src/vm2.c     **** 				syscall((uint8_t)(address&0xFF));
2419:src/vm2.c     **** 				PC  =  nPC;
2420:src/vm2.c     **** 				nPC  += 4;
2421:src/vm2.c     **** 						
2422:src/vm2.c     **** 				// FETCH
2423:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2424:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2425:src/vm2.c     **** 				if (op == 0x0) {
2426:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2427:src/vm2.c     **** 				  op = op + funct;
2428:src/vm2.c     **** 				}
2429:src/vm2.c     **** 				else {
2430:src/vm2.c     **** 				  op = op + FIX_OP;
2431:src/vm2.c     **** 				}
2432:src/vm2.c     **** 				goto *array[op];
2433:src/vm2.c     **** 						
2434:src/vm2.c     **** 		//		break;
2435:src/vm2.c     **** 		//	}	
2436:src/vm2.c     **** 		// 43+42=85	case 0b101010: { //swl Rsrc1, imm(Rsrc2): Store Word Left
2437:src/vm2.c     **** 		swl:
2438:src/vm2.c     **** #if INDIRECT_DEBUG
2439:src/vm2.c     **** printf("%d|swl\n",counter);
2440:src/vm2.c     **** counter++;
2441:src/vm2.c     **** #endif
2442:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2443:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2444:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2445:src/vm2.c     **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
2446:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
2447:src/vm2.c     **** 				PC  =  nPC;
2448:src/vm2.c     **** 				nPC  += 4;
2449:src/vm2.c     **** 						
2450:src/vm2.c     **** 				// FETCH
2451:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2452:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2453:src/vm2.c     **** 				if (op == 0x0) {
2454:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2455:src/vm2.c     **** 				  op = op + funct;
2456:src/vm2.c     **** 				}
2457:src/vm2.c     **** 				else {
GAS LISTING /tmp/cc15eBE3.s 			page 120


2458:src/vm2.c     **** 				  op = op + FIX_OP;
2459:src/vm2.c     **** 				}
2460:src/vm2.c     **** 				goto *array[op];
2461:src/vm2.c     **** 						
2462:src/vm2.c     **** 		//		break;
2463:src/vm2.c     **** 		//	}
2464:src/vm2.c     **** 		// 43+46=89	case 0b101110: { //swr Rsrc1, imm(Rsrc2): Store Word Right
2465:src/vm2.c     **** 		swr:
2466:src/vm2.c     **** #if INDIRECT_DEBUG
2467:src/vm2.c     **** printf("%d|swr\n",counter);
2468:src/vm2.c     **** counter++;
2469:src/vm2.c     **** #endif
2470:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2471:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2472:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2473:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
2474:src/vm2.c     **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
2475:src/vm2.c     **** 				PC  =  nPC;
2476:src/vm2.c     **** 				nPC  += 4;
2477:src/vm2.c     **** 						
2478:src/vm2.c     **** 				// FETCH
2479:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2480:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2481:src/vm2.c     **** 				if (op == 0x0) {
2482:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2483:src/vm2.c     **** 				  op = op + funct;
2484:src/vm2.c     **** 				}
2485:src/vm2.c     **** 				else {
2486:src/vm2.c     **** 				  op = op + FIX_OP;
2487:src/vm2.c     **** 				}
2488:src/vm2.c     **** 				goto *array[op];
2489:src/vm2.c     **** 						
2490:src/vm2.c     **** 		//		break;
2491:src/vm2.c     **** 		//	}
2492:src/vm2.c     **** 		// 43+34=77	case 0b100010: { //lwl Rdest, imm(Rsrc): Load Word Left
2493:src/vm2.c     **** 		lwl:
2494:src/vm2.c     **** #if INDIRECT_DEBUG
2495:src/vm2.c     **** printf("%d|lwl\n",counter);
2496:src/vm2.c     **** counter++;
2497:src/vm2.c     **** #endif
2498:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2499:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2500:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2501:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
2502:src/vm2.c     **** 				PC  =  nPC;
2503:src/vm2.c     **** 				nPC  += 4;
2504:src/vm2.c     **** 						
2505:src/vm2.c     **** 				// FETCH
2506:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2507:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2508:src/vm2.c     **** 				if (op == 0x0) {
2509:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2510:src/vm2.c     **** 				  op = op + funct;
2511:src/vm2.c     **** 				}
2512:src/vm2.c     **** 				else {
2513:src/vm2.c     **** 				  op = op + FIX_OP;
2514:src/vm2.c     **** 				}
GAS LISTING /tmp/cc15eBE3.s 			page 121


2515:src/vm2.c     **** 				goto *array[op];
2516:src/vm2.c     **** 						
2517:src/vm2.c     **** 		//		break;
2518:src/vm2.c     **** 		//	}
2519:src/vm2.c     **** 		// 43+38=81	case 0b100110: { //lwr Rdest, imm(Rsrc): Load Word Right
2520:src/vm2.c     **** 		lwr:
2521:src/vm2.c     **** #if INDIRECT_DEBUG
2522:src/vm2.c     **** printf("%d|lwr\n",counter);
2523:src/vm2.c     **** counter++;
2524:src/vm2.c     **** #endif
2525:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
2526:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
2527:src/vm2.c     **** 				immediate = (instr >> 0) & 0xFFFF;
2528:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
2529:src/vm2.c     **** 				PC  =  nPC;
2530:src/vm2.c     **** 				nPC  += 4;
2531:src/vm2.c     **** 						
2532:src/vm2.c     **** 				// FETCH
2533:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2534:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2535:src/vm2.c     **** 				if (op == 0x0) {
2536:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2537:src/vm2.c     **** 				  op = op + funct;
2538:src/vm2.c     **** 				}
2539:src/vm2.c     **** 				else {
2540:src/vm2.c     **** 				  op = op + FIX_OP;
2541:src/vm2.c     **** 				}
2542:src/vm2.c     **** 				goto *array[op];
2543:src/vm2.c     **** 						
2544:src/vm2.c     **** 		//		break;
2545:src/vm2.c     **** 		//	}
2546:src/vm2.c     **** 			//uint8_t op = (instr >> 26) & 0x3F;
2547:src/vm2.c     **** 		//	break; //op
2548:src/vm2.c     **** 		//	default:
2549:src/vm2.c     **** 		//	{
2550:src/vm2.c     **** 		error:
2551:src/vm2.c     **** #if INDIRECT_DEBUG
2552:src/vm2.c     **** 				printf("Error, unknown instruction %d.\n", instr);
2553:src/vm2.c     **** #endif
2554:src/vm2.c     **** 				PC  =  nPC;
2555:src/vm2.c     **** 				nPC  += 4;
2556:src/vm2.c     **** 				// FETCH
2557:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
2558:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
2559:src/vm2.c     **** 				if (op == 0x0) {
2560:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
2561:src/vm2.c     **** 				  op = op + funct;
2562:src/vm2.c     **** 				}
2563:src/vm2.c     **** 				else {
2564:src/vm2.c     **** 				  op = op + FIX_OP;
2565:src/vm2.c     **** 				}
2566:src/vm2.c     **** 				goto *array[op];
2567:src/vm2.c     **** 		//		break;
2568:src/vm2.c     **** 		//	}
2569:src/vm2.c     **** 		//}
2570:src/vm2.c     **** 		//advance_pc(offset);//Advances the PC
2571:src/vm2.c     **** 	//}
GAS LISTING /tmp/cc15eBE3.s 			page 122


2572:src/vm2.c     **** 	
2573:src/vm2.c     **** end:
2574:src/vm2.c     **** 	if(opt) {
 3172              		.loc 1 2574 0
 3173 1a78 85ED     		testl	%ebp, %ebp
 3174 1a7a 0F84F113 		je	.L317
 3174      0000
2575:src/vm2.c     **** 	  print_memory();
 3175              		.loc 1 2575 0
 3176 1a80 E8000000 		call	print_memory
 3176      00
 3177              	.LVL448:
2576:src/vm2.c     **** 	  print_registers();
2577:src/vm2.c     **** 	}
2578:src/vm2.c     **** }...
 3178              		.loc 1 2578 0
 3179 1a85 5A       		popq	%rdx
 3180              		.cfi_remember_state
 3181              		.cfi_def_cfa_offset 40
 3182 1a86 5B       		popq	%rbx
 3183              		.cfi_def_cfa_offset 32
 3184              	.LVL449:
 3185 1a87 5D       		popq	%rbp
 3186              		.cfi_def_cfa_offset 24
 3187              	.LVL450:
 3188 1a88 415C     		popq	%r12
 3189              		.cfi_def_cfa_offset 16
 3190 1a8a 415D     		popq	%r13
 3191              		.cfi_def_cfa_offset 8
 3192              	.LVL451:
2576:src/vm2.c     **** 	  print_registers();
 3193              		.loc 1 2576 0
 3194 1a8c E9000000 		jmp	print_registers
 3194      00
 3195              	.LVL452:
 3196              	.L203:
 3197              		.cfi_restore_state
1583:src/vm2.c     **** 						PC  =  nPC;
 3198              		.loc 1 1583 0
 3199 1a91 8B050000 		movl	nPC(%rip), %eax
 3199      0000
1584:src/vm2.c     **** 						nPC  += 4;
 3200              		.loc 1 1584 0
 3201 1a97 8D5004   		leal	4(%rax), %edx
1583:src/vm2.c     **** 						PC  =  nPC;
 3202              		.loc 1 1583 0
 3203 1a9a 89050000 		movl	%eax, PC(%rip)
 3203      0000
1584:src/vm2.c     **** 						nPC  += 4;
 3204              		.loc 1 1584 0
 3205 1aa0 89150000 		movl	%edx, nPC(%rip)
 3205      0000
1587:src/vm2.c     **** 						instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_me
 3206              		.loc 1 1587 0
 3207 1aa6 8D5003   		leal	3(%rax), %edx
 3208 1aa9 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3208      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 123


 3209 1ab1 89C2     		movl	%eax, %edx
 3210 1ab3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3210      000000
 3211 1aba C1E218   		sall	$24, %edx
 3212 1abd 4109D0   		orl	%edx, %r8d
 3213 1ac0 8D5001   		leal	1(%rax), %edx
 3214 1ac3 83C002   		addl	$2, %eax
 3215 1ac6 0FB68000 		movzbl	VM_memory(%rax), %eax
 3215      000000
 3216 1acd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3216      000000
 3217 1ad4 C1E008   		sall	$8, %eax
 3218 1ad7 C1E210   		sall	$16, %edx
 3219 1ada 4109D0   		orl	%edx, %r8d
 3220 1add 4109C0   		orl	%eax, %r8d
 3221              	.LVL453:
1588:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3222              		.loc 1 1588 0
 3223 1ae0 4489C2   		movl	%r8d, %edx
1590:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 3224              		.loc 1 1590 0
 3225 1ae3 4488C0   		movb	%r8b, %al
1588:src/vm2.c     **** 						op = (instr >> 26) & 0x3F;
 3226              		.loc 1 1588 0
 3227 1ae6 C1EA1A   		shrl	$26, %edx
 3228              	.LVL454:
1590:src/vm2.c     **** 						  funct = (instr >> 0) & 0x3F;
 3229              		.loc 1 1590 0
 3230 1ae9 83E03F   		andl	$63, %eax
 3231 1aec 8D4A2B   		leal	43(%rdx), %ecx
 3232 1aef 84D2     		testb	%dl, %dl
 3233 1af1 0F45C1   		cmovne	%ecx, %eax
 3234              	.LVL455:
1596:src/vm2.c     **** 						goto *array[op];
 3235              		.loc 1 1596 0
 3236 1af4 83E07F   		andl	$127, %eax
 3237              	.LVL456:
 3238 1af7 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3238      00000000 
 3239 1aff E933EEFF 		jmp	.L112
 3239      FF
 3240              	.L208:
 3241              	.LVL457:
1616:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3242              		.loc 1 1616 0
 3243 1b04 4489C2   		movl	%r8d, %edx
1617:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3244              		.loc 1 1617 0
 3245 1b07 4489C0   		movl	%r8d, %eax
1619:src/vm2.c     **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
 3246              		.loc 1 1619 0
 3247 1b0a 450FBFC0 		movswl	%r8w, %r8d
 3248              	.LVL458:
1616:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3249              		.loc 1 1616 0
 3250 1b0e C1EA15   		shrl	$21, %edx
1617:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 124


 3251              		.loc 1 1617 0
 3252 1b11 C1E810   		shrl	$16, %eax
 3253              	.LVL459:
1619:src/vm2.c     **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
 3254              		.loc 1 1619 0
 3255 1b14 83E21F   		andl	$31, %edx
 3256 1b17 83E01F   		andl	$31, %eax
 3257 1b1a 44030495 		addl	RF(,%rdx,4), %r8d
 3257      00000000 
 3258              	.LVL460:
 3259 1b22 44890485 		movl	%r8d, RF(,%rax,4)
 3259      00000000 
1620:src/vm2.c     **** 				PC  =  nPC;
 3260              		.loc 1 1620 0
 3261 1b2a 8B050000 		movl	nPC(%rip), %eax
 3261      0000
1621:src/vm2.c     **** 				nPC  += 4;
 3262              		.loc 1 1621 0
 3263 1b30 8D5004   		leal	4(%rax), %edx
1620:src/vm2.c     **** 				PC  =  nPC;
 3264              		.loc 1 1620 0
 3265 1b33 89050000 		movl	%eax, PC(%rip)
 3265      0000
1621:src/vm2.c     **** 				nPC  += 4;
 3266              		.loc 1 1621 0
 3267 1b39 89150000 		movl	%edx, nPC(%rip)
 3267      0000
1624:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3268              		.loc 1 1624 0
 3269 1b3f 8D5003   		leal	3(%rax), %edx
 3270 1b42 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3270      00000000 
 3271 1b4a 89C2     		movl	%eax, %edx
 3272 1b4c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3272      000000
 3273 1b53 C1E218   		sall	$24, %edx
 3274 1b56 4109D0   		orl	%edx, %r8d
 3275 1b59 8D5001   		leal	1(%rax), %edx
 3276 1b5c 83C002   		addl	$2, %eax
 3277 1b5f 0FB68000 		movzbl	VM_memory(%rax), %eax
 3277      000000
 3278 1b66 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3278      000000
 3279 1b6d C1E008   		sall	$8, %eax
 3280 1b70 C1E210   		sall	$16, %edx
 3281 1b73 4109D0   		orl	%edx, %r8d
 3282 1b76 4109C0   		orl	%eax, %r8d
 3283              	.LVL461:
1625:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3284              		.loc 1 1625 0
 3285 1b79 4489C2   		movl	%r8d, %edx
1627:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3286              		.loc 1 1627 0
 3287 1b7c 4488C0   		movb	%r8b, %al
1625:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3288              		.loc 1 1625 0
 3289 1b7f C1EA1A   		shrl	$26, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 125


 3290              	.LVL462:
1627:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3291              		.loc 1 1627 0
 3292 1b82 83E03F   		andl	$63, %eax
 3293 1b85 8D4A2B   		leal	43(%rdx), %ecx
 3294 1b88 84D2     		testb	%dl, %dl
 3295 1b8a 0F45C1   		cmovne	%ecx, %eax
 3296              	.LVL463:
1633:src/vm2.c     **** 				goto *array[op];
 3297              		.loc 1 1633 0
 3298 1b8d 83E07F   		andl	$127, %eax
 3299              	.LVL464:
 3300 1b90 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3300      00000000 
 3301 1b98 E99AEDFF 		jmp	.L112
 3301      FF
 3302              	.L211:
 3303              	.LVL465:
1643:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3304              		.loc 1 1643 0
 3305 1b9d 4489C2   		movl	%r8d, %edx
1644:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3306              		.loc 1 1644 0
 3307 1ba0 4489C0   		movl	%r8d, %eax
1646:src/vm2.c     **** 				RF[rt] = (RF[rs] + immediate);
 3308              		.loc 1 1646 0
 3309 1ba3 450FBFC0 		movswl	%r8w, %r8d
 3310              	.LVL466:
1643:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3311              		.loc 1 1643 0
 3312 1ba7 C1EA15   		shrl	$21, %edx
1644:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3313              		.loc 1 1644 0
 3314 1baa C1E810   		shrl	$16, %eax
 3315              	.LVL467:
1646:src/vm2.c     **** 				RF[rt] = (RF[rs] + immediate);
 3316              		.loc 1 1646 0
 3317 1bad 83E21F   		andl	$31, %edx
 3318 1bb0 83E01F   		andl	$31, %eax
 3319 1bb3 44030495 		addl	RF(,%rdx,4), %r8d
 3319      00000000 
 3320              	.LVL468:
 3321 1bbb 44890485 		movl	%r8d, RF(,%rax,4)
 3321      00000000 
1647:src/vm2.c     **** 				PC  =  nPC;
 3322              		.loc 1 1647 0
 3323 1bc3 8B050000 		movl	nPC(%rip), %eax
 3323      0000
1648:src/vm2.c     **** 				nPC  += 4;
 3324              		.loc 1 1648 0
 3325 1bc9 8D5004   		leal	4(%rax), %edx
1647:src/vm2.c     **** 				PC  =  nPC;
 3326              		.loc 1 1647 0
 3327 1bcc 89050000 		movl	%eax, PC(%rip)
 3327      0000
1648:src/vm2.c     **** 				nPC  += 4;
 3328              		.loc 1 1648 0
GAS LISTING /tmp/cc15eBE3.s 			page 126


 3329 1bd2 89150000 		movl	%edx, nPC(%rip)
 3329      0000
1651:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3330              		.loc 1 1651 0
 3331 1bd8 8D5003   		leal	3(%rax), %edx
 3332 1bdb 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3332      00000000 
 3333 1be3 89C2     		movl	%eax, %edx
 3334 1be5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3334      000000
 3335 1bec C1E218   		sall	$24, %edx
 3336 1bef 4109D0   		orl	%edx, %r8d
 3337 1bf2 8D5001   		leal	1(%rax), %edx
 3338 1bf5 83C002   		addl	$2, %eax
 3339 1bf8 0FB68000 		movzbl	VM_memory(%rax), %eax
 3339      000000
 3340 1bff 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3340      000000
 3341 1c06 C1E008   		sall	$8, %eax
 3342 1c09 C1E210   		sall	$16, %edx
 3343 1c0c 4109D0   		orl	%edx, %r8d
 3344 1c0f 4109C0   		orl	%eax, %r8d
 3345              	.LVL469:
1652:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3346              		.loc 1 1652 0
 3347 1c12 4489C2   		movl	%r8d, %edx
1654:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3348              		.loc 1 1654 0
 3349 1c15 4488C0   		movb	%r8b, %al
1652:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3350              		.loc 1 1652 0
 3351 1c18 C1EA1A   		shrl	$26, %edx
 3352              	.LVL470:
1654:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3353              		.loc 1 1654 0
 3354 1c1b 83E03F   		andl	$63, %eax
 3355 1c1e 8D4A2B   		leal	43(%rdx), %ecx
 3356 1c21 84D2     		testb	%dl, %dl
 3357 1c23 0F45C1   		cmovne	%ecx, %eax
 3358              	.LVL471:
1660:src/vm2.c     **** 				goto *array[op];
 3359              		.loc 1 1660 0
 3360 1c26 83E07F   		andl	$127, %eax
 3361              	.LVL472:
 3362 1c29 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3362      00000000 
 3363 1c31 E901EDFF 		jmp	.L112
 3363      FF
 3364              	.L214:
 3365              	.LVL473:
1670:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3366              		.loc 1 1670 0
 3367 1c36 4489C2   		movl	%r8d, %edx
1671:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3368              		.loc 1 1671 0
 3369 1c39 4489C0   		movl	%r8d, %eax
1673:src/vm2.c     **** 				RF[rt] = RF[rs] & (uint32_t)immediate;
GAS LISTING /tmp/cc15eBE3.s 			page 127


 3370              		.loc 1 1673 0
 3371 1c3c 450FBFC0 		movswl	%r8w, %r8d
 3372              	.LVL474:
1670:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3373              		.loc 1 1670 0
 3374 1c40 C1EA15   		shrl	$21, %edx
1671:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3375              		.loc 1 1671 0
 3376 1c43 C1E810   		shrl	$16, %eax
 3377              	.LVL475:
1673:src/vm2.c     **** 				RF[rt] = RF[rs] & (uint32_t)immediate;
 3378              		.loc 1 1673 0
 3379 1c46 83E21F   		andl	$31, %edx
 3380 1c49 83E01F   		andl	$31, %eax
 3381 1c4c 44230495 		andl	RF(,%rdx,4), %r8d
 3381      00000000 
 3382              	.LVL476:
 3383 1c54 44890485 		movl	%r8d, RF(,%rax,4)
 3383      00000000 
1674:src/vm2.c     **** 				PC  =  nPC;
 3384              		.loc 1 1674 0
 3385 1c5c 8B050000 		movl	nPC(%rip), %eax
 3385      0000
1675:src/vm2.c     **** 				nPC  += 4;
 3386              		.loc 1 1675 0
 3387 1c62 8D5004   		leal	4(%rax), %edx
1674:src/vm2.c     **** 				PC  =  nPC;
 3388              		.loc 1 1674 0
 3389 1c65 89050000 		movl	%eax, PC(%rip)
 3389      0000
1675:src/vm2.c     **** 				nPC  += 4;
 3390              		.loc 1 1675 0
 3391 1c6b 89150000 		movl	%edx, nPC(%rip)
 3391      0000
1678:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3392              		.loc 1 1678 0
 3393 1c71 8D5003   		leal	3(%rax), %edx
 3394 1c74 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3394      00000000 
 3395 1c7c 89C2     		movl	%eax, %edx
 3396 1c7e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3396      000000
 3397 1c85 C1E218   		sall	$24, %edx
 3398 1c88 4109D0   		orl	%edx, %r8d
 3399 1c8b 8D5001   		leal	1(%rax), %edx
 3400 1c8e 83C002   		addl	$2, %eax
 3401 1c91 0FB68000 		movzbl	VM_memory(%rax), %eax
 3401      000000
 3402 1c98 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3402      000000
 3403 1c9f C1E008   		sall	$8, %eax
 3404 1ca2 C1E210   		sall	$16, %edx
 3405 1ca5 4109D0   		orl	%edx, %r8d
 3406 1ca8 4109C0   		orl	%eax, %r8d
 3407              	.LVL477:
1679:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3408              		.loc 1 1679 0
GAS LISTING /tmp/cc15eBE3.s 			page 128


 3409 1cab 4489C2   		movl	%r8d, %edx
1681:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3410              		.loc 1 1681 0
 3411 1cae 4488C0   		movb	%r8b, %al
1679:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3412              		.loc 1 1679 0
 3413 1cb1 C1EA1A   		shrl	$26, %edx
 3414              	.LVL478:
1681:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3415              		.loc 1 1681 0
 3416 1cb4 83E03F   		andl	$63, %eax
 3417 1cb7 8D4A2B   		leal	43(%rdx), %ecx
 3418 1cba 84D2     		testb	%dl, %dl
 3419 1cbc 0F45C1   		cmovne	%ecx, %eax
 3420              	.LVL479:
1687:src/vm2.c     **** 				goto *array[op];
 3421              		.loc 1 1687 0
 3422 1cbf 83E07F   		andl	$127, %eax
 3423              	.LVL480:
 3424 1cc2 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3424      00000000 
 3425 1cca E968ECFF 		jmp	.L112
 3425      FF
 3426              	.L217:
 3427              	.LVL481:
1697:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3428              		.loc 1 1697 0
 3429 1ccf 4489C2   		movl	%r8d, %edx
1698:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3430              		.loc 1 1698 0
 3431 1cd2 4489C0   		movl	%r8d, %eax
1700:src/vm2.c     **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
 3432              		.loc 1 1700 0
 3433 1cd5 450FBFC0 		movswl	%r8w, %r8d
 3434              	.LVL482:
1697:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3435              		.loc 1 1697 0
 3436 1cd9 C1EA15   		shrl	$21, %edx
1698:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3437              		.loc 1 1698 0
 3438 1cdc C1E810   		shrl	$16, %eax
 3439              	.LVL483:
1700:src/vm2.c     **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
 3440              		.loc 1 1700 0
 3441 1cdf 83E21F   		andl	$31, %edx
 3442 1ce2 83E01F   		andl	$31, %eax
 3443 1ce5 440B0495 		orl	RF(,%rdx,4), %r8d
 3443      00000000 
 3444              	.LVL484:
 3445 1ced 44890485 		movl	%r8d, RF(,%rax,4)
 3445      00000000 
1701:src/vm2.c     **** 				PC  =  nPC;
 3446              		.loc 1 1701 0
 3447 1cf5 8B050000 		movl	nPC(%rip), %eax
 3447      0000
1702:src/vm2.c     **** 				nPC  += 4;
 3448              		.loc 1 1702 0
GAS LISTING /tmp/cc15eBE3.s 			page 129


 3449 1cfb 8D5004   		leal	4(%rax), %edx
1701:src/vm2.c     **** 				PC  =  nPC;
 3450              		.loc 1 1701 0
 3451 1cfe 89050000 		movl	%eax, PC(%rip)
 3451      0000
1702:src/vm2.c     **** 				nPC  += 4;
 3452              		.loc 1 1702 0
 3453 1d04 89150000 		movl	%edx, nPC(%rip)
 3453      0000
1705:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3454              		.loc 1 1705 0
 3455 1d0a 8D5003   		leal	3(%rax), %edx
 3456 1d0d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3456      00000000 
 3457 1d15 89C2     		movl	%eax, %edx
 3458 1d17 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3458      000000
 3459 1d1e C1E218   		sall	$24, %edx
 3460 1d21 4109D0   		orl	%edx, %r8d
 3461 1d24 8D5001   		leal	1(%rax), %edx
 3462 1d27 83C002   		addl	$2, %eax
 3463 1d2a 0FB68000 		movzbl	VM_memory(%rax), %eax
 3463      000000
 3464 1d31 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3464      000000
 3465 1d38 C1E008   		sall	$8, %eax
 3466 1d3b C1E210   		sall	$16, %edx
 3467 1d3e 4109D0   		orl	%edx, %r8d
 3468 1d41 4109C0   		orl	%eax, %r8d
 3469              	.LVL485:
1706:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3470              		.loc 1 1706 0
 3471 1d44 4489C2   		movl	%r8d, %edx
1708:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3472              		.loc 1 1708 0
 3473 1d47 4488C0   		movb	%r8b, %al
1706:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3474              		.loc 1 1706 0
 3475 1d4a C1EA1A   		shrl	$26, %edx
 3476              	.LVL486:
1708:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3477              		.loc 1 1708 0
 3478 1d4d 83E03F   		andl	$63, %eax
 3479 1d50 8D4A2B   		leal	43(%rdx), %ecx
 3480 1d53 84D2     		testb	%dl, %dl
 3481 1d55 0F45C1   		cmovne	%ecx, %eax
 3482              	.LVL487:
1714:src/vm2.c     **** 				goto *array[op];
 3483              		.loc 1 1714 0
 3484 1d58 83E07F   		andl	$127, %eax
 3485              	.LVL488:
 3486 1d5b 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3486      00000000 
 3487 1d63 E9CFEBFF 		jmp	.L112
 3487      FF
 3488              	.L220:
 3489              	.LVL489:
GAS LISTING /tmp/cc15eBE3.s 			page 130


1724:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3490              		.loc 1 1724 0
 3491 1d68 4489C2   		movl	%r8d, %edx
1725:src/vm2.c     **** 				rd = (instr >> 11) & 0x1F;
 3492              		.loc 1 1725 0
 3493 1d6b 4489C0   		movl	%r8d, %eax
1727:src/vm2.c     **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
 3494              		.loc 1 1727 0
 3495 1d6e 450FBFC0 		movswl	%r8w, %r8d
 3496              	.LVL490:
1724:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3497              		.loc 1 1724 0
 3498 1d72 C1EA15   		shrl	$21, %edx
1725:src/vm2.c     **** 				rd = (instr >> 11) & 0x1F;
 3499              		.loc 1 1725 0
 3500 1d75 C1E80B   		shrl	$11, %eax
 3501              	.LVL491:
1727:src/vm2.c     **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
 3502              		.loc 1 1727 0
 3503 1d78 83E21F   		andl	$31, %edx
 3504 1d7b 83E01F   		andl	$31, %eax
 3505 1d7e 44330495 		xorl	RF(,%rdx,4), %r8d
 3505      00000000 
 3506              	.LVL492:
 3507 1d86 44890485 		movl	%r8d, RF(,%rax,4)
 3507      00000000 
1728:src/vm2.c     **** 				PC  =  nPC;
 3508              		.loc 1 1728 0
 3509 1d8e 8B050000 		movl	nPC(%rip), %eax
 3509      0000
1729:src/vm2.c     **** 				nPC  += 4;
 3510              		.loc 1 1729 0
 3511 1d94 8D5004   		leal	4(%rax), %edx
1728:src/vm2.c     **** 				PC  =  nPC;
 3512              		.loc 1 1728 0
 3513 1d97 89050000 		movl	%eax, PC(%rip)
 3513      0000
1729:src/vm2.c     **** 				nPC  += 4;
 3514              		.loc 1 1729 0
 3515 1d9d 89150000 		movl	%edx, nPC(%rip)
 3515      0000
1732:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3516              		.loc 1 1732 0
 3517 1da3 8D5003   		leal	3(%rax), %edx
 3518 1da6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3518      00000000 
 3519 1dae 89C2     		movl	%eax, %edx
 3520 1db0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3520      000000
 3521 1db7 C1E218   		sall	$24, %edx
 3522 1dba 4109D0   		orl	%edx, %r8d
 3523 1dbd 8D5001   		leal	1(%rax), %edx
 3524 1dc0 83C002   		addl	$2, %eax
 3525 1dc3 0FB68000 		movzbl	VM_memory(%rax), %eax
 3525      000000
 3526 1dca 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3526      000000
GAS LISTING /tmp/cc15eBE3.s 			page 131


 3527 1dd1 C1E008   		sall	$8, %eax
 3528 1dd4 C1E210   		sall	$16, %edx
 3529 1dd7 4109D0   		orl	%edx, %r8d
 3530 1dda 4109C0   		orl	%eax, %r8d
 3531              	.LVL493:
1733:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3532              		.loc 1 1733 0
 3533 1ddd 4489C2   		movl	%r8d, %edx
1735:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3534              		.loc 1 1735 0
 3535 1de0 4488C0   		movb	%r8b, %al
1733:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3536              		.loc 1 1733 0
 3537 1de3 C1EA1A   		shrl	$26, %edx
 3538              	.LVL494:
1735:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3539              		.loc 1 1735 0
 3540 1de6 83E03F   		andl	$63, %eax
 3541 1de9 8D4A2B   		leal	43(%rdx), %ecx
 3542 1dec 84D2     		testb	%dl, %dl
 3543 1dee 0F45C1   		cmovne	%ecx, %eax
 3544              	.LVL495:
1741:src/vm2.c     **** 				goto *array[op];
 3545              		.loc 1 1741 0
 3546 1df1 83E07F   		andl	$127, %eax
 3547              	.LVL496:
 3548 1df4 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3548      00000000 
 3549 1dfc E936EBFF 		jmp	.L112
 3549      FF
 3550              	.L223:
 3551              	.LVL497:
1752:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3552              		.loc 1 1752 0
 3553 1e01 4489C0   		movl	%r8d, %eax
1754:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 3554              		.loc 1 1754 0
 3555 1e04 41C1E010 		sall	$16, %r8d
 3556              	.LVL498:
1752:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3557              		.loc 1 1752 0
 3558 1e08 C1E810   		shrl	$16, %eax
 3559              	.LVL499:
1754:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 3560              		.loc 1 1754 0
 3561 1e0b 83E01F   		andl	$31, %eax
 3562 1e0e 44890485 		movl	%r8d, RF(,%rax,4)
 3562      00000000 
1755:src/vm2.c     **** 				PC  =  nPC;
 3563              		.loc 1 1755 0
 3564 1e16 8B050000 		movl	nPC(%rip), %eax
 3564      0000
1756:src/vm2.c     **** 				nPC  += 4;
 3565              		.loc 1 1756 0
 3566 1e1c 8D5004   		leal	4(%rax), %edx
1755:src/vm2.c     **** 				PC  =  nPC;
 3567              		.loc 1 1755 0
GAS LISTING /tmp/cc15eBE3.s 			page 132


 3568 1e1f 89050000 		movl	%eax, PC(%rip)
 3568      0000
1756:src/vm2.c     **** 				nPC  += 4;
 3569              		.loc 1 1756 0
 3570 1e25 89150000 		movl	%edx, nPC(%rip)
 3570      0000
1759:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3571              		.loc 1 1759 0
 3572 1e2b 8D5003   		leal	3(%rax), %edx
 3573 1e2e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3573      00000000 
 3574 1e36 89C2     		movl	%eax, %edx
 3575 1e38 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3575      000000
 3576 1e3f C1E218   		sall	$24, %edx
 3577 1e42 4109D0   		orl	%edx, %r8d
 3578 1e45 8D5001   		leal	1(%rax), %edx
 3579 1e48 83C002   		addl	$2, %eax
 3580 1e4b 0FB68000 		movzbl	VM_memory(%rax), %eax
 3580      000000
 3581 1e52 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3581      000000
 3582 1e59 C1E008   		sall	$8, %eax
 3583 1e5c C1E210   		sall	$16, %edx
 3584 1e5f 4109D0   		orl	%edx, %r8d
 3585 1e62 4109C0   		orl	%eax, %r8d
 3586              	.LVL500:
1760:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3587              		.loc 1 1760 0
 3588 1e65 4489C2   		movl	%r8d, %edx
1762:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3589              		.loc 1 1762 0
 3590 1e68 4488C0   		movb	%r8b, %al
1760:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3591              		.loc 1 1760 0
 3592 1e6b C1EA1A   		shrl	$26, %edx
 3593              	.LVL501:
1762:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3594              		.loc 1 1762 0
 3595 1e6e 83E03F   		andl	$63, %eax
 3596 1e71 8D4A2B   		leal	43(%rdx), %ecx
 3597 1e74 84D2     		testb	%dl, %dl
 3598 1e76 0F45C1   		cmovne	%ecx, %eax
 3599              	.LVL502:
1768:src/vm2.c     **** 				goto *array[op];
 3600              		.loc 1 1768 0
 3601 1e79 83E07F   		andl	$127, %eax
 3602              	.LVL503:
 3603 1e7c 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3603      00000000 
 3604 1e84 E9AEEAFF 		jmp	.L112
 3604      FF
 3605              	.L226:
 3606              	.LVL504:
1776:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3607              		.loc 1 1776 0
 3608 1e89 4489C0   		movl	%r8d, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 133


1778:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 3609              		.loc 1 1778 0
 3610 1e8c 41C1E010 		sall	$16, %r8d
 3611              	.LVL505:
1776:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3612              		.loc 1 1776 0
 3613 1e90 C1E810   		shrl	$16, %eax
 3614              	.LVL506:
1778:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 3615              		.loc 1 1778 0
 3616 1e93 83E01F   		andl	$31, %eax
 3617 1e96 44890485 		movl	%r8d, RF(,%rax,4)
 3617      00000000 
1779:src/vm2.c     **** 				PC  =  nPC;
 3618              		.loc 1 1779 0
 3619 1e9e 8B050000 		movl	nPC(%rip), %eax
 3619      0000
1780:src/vm2.c     **** 				nPC  += 4;
 3620              		.loc 1 1780 0
 3621 1ea4 8D5004   		leal	4(%rax), %edx
1779:src/vm2.c     **** 				PC  =  nPC;
 3622              		.loc 1 1779 0
 3623 1ea7 89050000 		movl	%eax, PC(%rip)
 3623      0000
1780:src/vm2.c     **** 				nPC  += 4;
 3624              		.loc 1 1780 0
 3625 1ead 89150000 		movl	%edx, nPC(%rip)
 3625      0000
1783:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3626              		.loc 1 1783 0
 3627 1eb3 8D5003   		leal	3(%rax), %edx
 3628 1eb6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3628      00000000 
 3629 1ebe 89C2     		movl	%eax, %edx
 3630 1ec0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3630      000000
 3631 1ec7 C1E218   		sall	$24, %edx
 3632 1eca 4109D0   		orl	%edx, %r8d
 3633 1ecd 8D5001   		leal	1(%rax), %edx
 3634 1ed0 83C002   		addl	$2, %eax
 3635 1ed3 0FB68000 		movzbl	VM_memory(%rax), %eax
 3635      000000
 3636 1eda 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3636      000000
 3637 1ee1 C1E008   		sall	$8, %eax
 3638 1ee4 C1E210   		sall	$16, %edx
 3639 1ee7 4109D0   		orl	%edx, %r8d
 3640 1eea 4109C0   		orl	%eax, %r8d
 3641              	.LVL507:
1784:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3642              		.loc 1 1784 0
 3643 1eed 4489C2   		movl	%r8d, %edx
1786:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3644              		.loc 1 1786 0
 3645 1ef0 4488C0   		movb	%r8b, %al
1784:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3646              		.loc 1 1784 0
GAS LISTING /tmp/cc15eBE3.s 			page 134


 3647 1ef3 C1EA1A   		shrl	$26, %edx
 3648              	.LVL508:
1786:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3649              		.loc 1 1786 0
 3650 1ef6 83E03F   		andl	$63, %eax
 3651 1ef9 8D4A2B   		leal	43(%rdx), %ecx
 3652 1efc 84D2     		testb	%dl, %dl
 3653 1efe 0F45C1   		cmovne	%ecx, %eax
 3654              	.LVL509:
1792:src/vm2.c     **** 				goto *array[op];
 3655              		.loc 1 1792 0
 3656 1f01 83E07F   		andl	$127, %eax
 3657              	.LVL510:
 3658 1f04 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3658      00000000 
 3659 1f0c E926EAFF 		jmp	.L112
 3659      FF
 3660              	.L229:
 3661              	.LVL511:
1802:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3662              		.loc 1 1802 0
 3663 1f11 4489C0   		movl	%r8d, %eax
1804:src/vm2.c     **** 			  	RF[rt] = immediate;
 3664              		.loc 1 1804 0
 3665 1f14 450FBFC0 		movswl	%r8w, %r8d
 3666              	.LVL512:
1802:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3667              		.loc 1 1802 0
 3668 1f18 C1E810   		shrl	$16, %eax
 3669              	.LVL513:
1804:src/vm2.c     **** 			  	RF[rt] = immediate;
 3670              		.loc 1 1804 0
 3671 1f1b 83E01F   		andl	$31, %eax
 3672 1f1e 44890485 		movl	%r8d, RF(,%rax,4)
 3672      00000000 
1805:src/vm2.c     **** 				PC  =  nPC;
 3673              		.loc 1 1805 0
 3674 1f26 8B050000 		movl	nPC(%rip), %eax
 3674      0000
1806:src/vm2.c     **** 				nPC  += 4;
 3675              		.loc 1 1806 0
 3676 1f2c 8D5004   		leal	4(%rax), %edx
1805:src/vm2.c     **** 				PC  =  nPC;
 3677              		.loc 1 1805 0
 3678 1f2f 89050000 		movl	%eax, PC(%rip)
 3678      0000
1806:src/vm2.c     **** 				nPC  += 4;
 3679              		.loc 1 1806 0
 3680 1f35 89150000 		movl	%edx, nPC(%rip)
 3680      0000
1809:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3681              		.loc 1 1809 0
 3682 1f3b 8D5003   		leal	3(%rax), %edx
 3683 1f3e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3683      00000000 
 3684              	.LVL514:
 3685 1f46 89C2     		movl	%eax, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 135


 3686 1f48 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3686      000000
 3687 1f4f C1E218   		sall	$24, %edx
 3688 1f52 4109D0   		orl	%edx, %r8d
 3689 1f55 8D5001   		leal	1(%rax), %edx
 3690 1f58 83C002   		addl	$2, %eax
 3691 1f5b 0FB68000 		movzbl	VM_memory(%rax), %eax
 3691      000000
 3692 1f62 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3692      000000
 3693 1f69 C1E008   		sall	$8, %eax
 3694 1f6c C1E210   		sall	$16, %edx
 3695 1f6f 4109D0   		orl	%edx, %r8d
 3696 1f72 4109C0   		orl	%eax, %r8d
 3697              	.LVL515:
1810:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3698              		.loc 1 1810 0
 3699 1f75 4489C2   		movl	%r8d, %edx
1812:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3700              		.loc 1 1812 0
 3701 1f78 4488C0   		movb	%r8b, %al
1810:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3702              		.loc 1 1810 0
 3703 1f7b C1EA1A   		shrl	$26, %edx
 3704              	.LVL516:
1812:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3705              		.loc 1 1812 0
 3706 1f7e 83E03F   		andl	$63, %eax
 3707 1f81 8D4A2B   		leal	43(%rdx), %ecx
 3708 1f84 84D2     		testb	%dl, %dl
 3709 1f86 0F45C1   		cmovne	%ecx, %eax
 3710              	.LVL517:
1818:src/vm2.c     **** 				goto *array[op];
 3711              		.loc 1 1818 0
 3712 1f89 83E07F   		andl	$127, %eax
 3713              	.LVL518:
 3714 1f8c 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3714      00000000 
 3715 1f94 E99EE9FF 		jmp	.L112
 3715      FF
 3716              	.L232:
 3717              	.LVL519:
1828:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3718              		.loc 1 1828 0
 3719 1f99 4489C2   		movl	%r8d, %edx
1829:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3720              		.loc 1 1829 0
 3721 1f9c 4489C0   		movl	%r8d, %eax
1831:src/vm2.c     **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
 3722              		.loc 1 1831 0
 3723 1f9f 450FBFC0 		movswl	%r8w, %r8d
 3724              	.LVL520:
1828:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3725              		.loc 1 1828 0
 3726 1fa3 C1EA15   		shrl	$21, %edx
1829:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3727              		.loc 1 1829 0
GAS LISTING /tmp/cc15eBE3.s 			page 136


 3728 1fa6 C1E810   		shrl	$16, %eax
 3729              	.LVL521:
1831:src/vm2.c     **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
 3730              		.loc 1 1831 0
 3731 1fa9 83E21F   		andl	$31, %edx
 3732 1fac 83E01F   		andl	$31, %eax
 3733 1faf 44390495 		cmpl	%r8d, RF(,%rdx,4)
 3733      00000000 
 3734 1fb7 0F92C2   		setb	%dl
 3735 1fba 0FB6D2   		movzbl	%dl, %edx
 3736 1fbd 89148500 		movl	%edx, RF(,%rax,4)
 3736      000000
1832:src/vm2.c     **** 				PC  =  nPC;
 3737              		.loc 1 1832 0
 3738 1fc4 8B050000 		movl	nPC(%rip), %eax
 3738      0000
1833:src/vm2.c     **** 				nPC  += 4;
 3739              		.loc 1 1833 0
 3740 1fca 8D5004   		leal	4(%rax), %edx
1832:src/vm2.c     **** 				PC  =  nPC;
 3741              		.loc 1 1832 0
 3742 1fcd 89050000 		movl	%eax, PC(%rip)
 3742      0000
1833:src/vm2.c     **** 				nPC  += 4;
 3743              		.loc 1 1833 0
 3744 1fd3 89150000 		movl	%edx, nPC(%rip)
 3744      0000
1836:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3745              		.loc 1 1836 0
 3746 1fd9 8D5003   		leal	3(%rax), %edx
 3747 1fdc 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3747      00000000 
 3748              	.LVL522:
 3749 1fe4 89C2     		movl	%eax, %edx
 3750 1fe6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3750      000000
 3751 1fed C1E218   		sall	$24, %edx
 3752 1ff0 4109D0   		orl	%edx, %r8d
 3753 1ff3 8D5001   		leal	1(%rax), %edx
 3754 1ff6 83C002   		addl	$2, %eax
 3755 1ff9 0FB68000 		movzbl	VM_memory(%rax), %eax
 3755      000000
 3756 2000 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3756      000000
 3757 2007 C1E008   		sall	$8, %eax
 3758 200a C1E210   		sall	$16, %edx
 3759 200d 4109D0   		orl	%edx, %r8d
 3760 2010 4109C0   		orl	%eax, %r8d
 3761              	.LVL523:
1837:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3762              		.loc 1 1837 0
 3763 2013 4489C2   		movl	%r8d, %edx
1839:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3764              		.loc 1 1839 0
 3765 2016 4488C0   		movb	%r8b, %al
1837:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3766              		.loc 1 1837 0
GAS LISTING /tmp/cc15eBE3.s 			page 137


 3767 2019 C1EA1A   		shrl	$26, %edx
 3768              	.LVL524:
1839:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3769              		.loc 1 1839 0
 3770 201c 83E03F   		andl	$63, %eax
 3771 201f 8D4A2B   		leal	43(%rdx), %ecx
 3772 2022 84D2     		testb	%dl, %dl
 3773 2024 0F45C1   		cmovne	%ecx, %eax
 3774              	.LVL525:
1845:src/vm2.c     **** 				goto *array[op];
 3775              		.loc 1 1845 0
 3776 2027 83E07F   		andl	$127, %eax
 3777              	.LVL526:
 3778 202a 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3778      00000000 
 3779 2032 E900E9FF 		jmp	.L112
 3779      FF
 3780              	.L235:
 3781              	.LVL527:
1855:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3782              		.loc 1 1855 0
 3783 2037 4489C2   		movl	%r8d, %edx
1856:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3784              		.loc 1 1856 0
 3785 203a 4489C0   		movl	%r8d, %eax
1858:src/vm2.c     **** 				RF[rt] = (RF[rs] < immediate)?1:0;
 3786              		.loc 1 1858 0
 3787 203d 450FBFC0 		movswl	%r8w, %r8d
 3788              	.LVL528:
1855:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3789              		.loc 1 1855 0
 3790 2041 C1EA15   		shrl	$21, %edx
1856:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3791              		.loc 1 1856 0
 3792 2044 C1E810   		shrl	$16, %eax
 3793              	.LVL529:
1858:src/vm2.c     **** 				RF[rt] = (RF[rs] < immediate)?1:0;
 3794              		.loc 1 1858 0
 3795 2047 83E21F   		andl	$31, %edx
 3796 204a 83E01F   		andl	$31, %eax
 3797 204d 44390495 		cmpl	%r8d, RF(,%rdx,4)
 3797      00000000 
 3798 2055 0F92C2   		setb	%dl
 3799 2058 0FB6D2   		movzbl	%dl, %edx
 3800 205b 89148500 		movl	%edx, RF(,%rax,4)
 3800      000000
1859:src/vm2.c     **** 				PC  =  nPC;
 3801              		.loc 1 1859 0
 3802 2062 8B050000 		movl	nPC(%rip), %eax
 3802      0000
1860:src/vm2.c     **** 				nPC  += 4;
 3803              		.loc 1 1860 0
 3804 2068 8D5004   		leal	4(%rax), %edx
1859:src/vm2.c     **** 				PC  =  nPC;
 3805              		.loc 1 1859 0
 3806 206b 89050000 		movl	%eax, PC(%rip)
 3806      0000
GAS LISTING /tmp/cc15eBE3.s 			page 138


1860:src/vm2.c     **** 				nPC  += 4;
 3807              		.loc 1 1860 0
 3808 2071 89150000 		movl	%edx, nPC(%rip)
 3808      0000
1863:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3809              		.loc 1 1863 0
 3810 2077 8D5003   		leal	3(%rax), %edx
 3811 207a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3811      00000000 
 3812              	.LVL530:
 3813 2082 89C2     		movl	%eax, %edx
 3814 2084 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3814      000000
 3815 208b C1E218   		sall	$24, %edx
 3816 208e 4109D0   		orl	%edx, %r8d
 3817 2091 8D5001   		leal	1(%rax), %edx
 3818 2094 83C002   		addl	$2, %eax
 3819 2097 0FB68000 		movzbl	VM_memory(%rax), %eax
 3819      000000
 3820 209e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3820      000000
 3821 20a5 C1E008   		sall	$8, %eax
 3822 20a8 C1E210   		sall	$16, %edx
 3823 20ab 4109D0   		orl	%edx, %r8d
 3824 20ae 4109C0   		orl	%eax, %r8d
 3825              	.LVL531:
1864:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3826              		.loc 1 1864 0
 3827 20b1 4489C2   		movl	%r8d, %edx
1866:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3828              		.loc 1 1866 0
 3829 20b4 4488C0   		movb	%r8b, %al
1864:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3830              		.loc 1 1864 0
 3831 20b7 C1EA1A   		shrl	$26, %edx
 3832              	.LVL532:
1866:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3833              		.loc 1 1866 0
 3834 20ba 83E03F   		andl	$63, %eax
 3835 20bd 8D4A2B   		leal	43(%rdx), %ecx
 3836 20c0 84D2     		testb	%dl, %dl
 3837 20c2 0F45C1   		cmovne	%ecx, %eax
 3838              	.LVL533:
1872:src/vm2.c     **** 				goto *array[op];
 3839              		.loc 1 1872 0
 3840 20c5 83E07F   		andl	$127, %eax
 3841              	.LVL534:
 3842 20c8 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3842      00000000 
 3843 20d0 E962E8FF 		jmp	.L112
 3843      FF
 3844              	.L238:
 3845              	.LVL535:
1878:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3846              		.loc 1 1878 0
 3847 20d5 4489C0   		movl	%r8d, %eax
 3848 20d8 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 139


1879:src/vm2.c     **** 				if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
 3849              		.loc 1 1879 0
 3850 20db 83E01F   		andl	$31, %eax
 3851 20de 8B048500 		movl	RF(,%rax,4), %eax
 3851      000000
 3852 20e5 83F801   		cmpl	$1, %eax
 3853 20e8 7515     		jne	.L239
 3854              	.LVL536:
1885:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 3855              		.loc 1 1885 0
 3856 20ea 4489C0   		movl	%r8d, %eax
 3857 20ed C1E815   		shrl	$21, %eax
1886:src/vm2.c     **** 					if ((int32_t)RF[rs] >= 0)
 3858              		.loc 1 1886 0
 3859 20f0 83E01F   		andl	$31, %eax
 3860 20f3 833C8500 		cmpl	$0, RF(,%rax,4)
 3860      00000000 
 3861 20fb 796B     		jns	.L319
 3862 20fd EB18     		jmp	.L240
 3863              	.LVL537:
 3864              	.L239:
1902:src/vm2.c     **** 				else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
 3865              		.loc 1 1902 0
 3866 20ff 83F811   		cmpl	$17, %eax
 3867 2102 7524     		jne	.L242
 3868              	.LVL538:
1908:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 3869              		.loc 1 1908 0
 3870 2104 4489C0   		movl	%r8d, %eax
 3871 2107 C1E815   		shrl	$21, %eax
1909:src/vm2.c     **** 					if ((int32_t)RF[rs] >= 0)
 3872              		.loc 1 1909 0
 3873 210a 83E01F   		andl	$31, %eax
 3874 210d 833C8500 		cmpl	$0, RF(,%rax,4)
 3874      00000000 
 3875 2115 7942     		jns	.L320
 3876              	.LVL539:
 3877              	.L240:
1897:src/vm2.c     **** 						PC  =  nPC;
 3878              		.loc 1 1897 0
 3879 2117 8B050000 		movl	nPC(%rip), %eax
 3879      0000
 3880 211d 89050000 		movl	%eax, PC(%rip)
 3880      0000
1898:src/vm2.c     **** 						nPC  += 4;
 3881              		.loc 1 1898 0
 3882 2123 83C004   		addl	$4, %eax
 3883 2126 EB54     		jmp	.L321
 3884              	.L242:
1926:src/vm2.c     **** 				else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
 3885              		.loc 1 1926 0
 3886 2128 85C0     		testl	%eax, %eax
 3887 212a 7515     		jne	.L243
 3888              	.LVL540:
1932:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 3889              		.loc 1 1932 0
 3890 212c 4489C0   		movl	%r8d, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 140


 3891 212f C1E815   		shrl	$21, %eax
1933:src/vm2.c     **** 					if ((int32_t)RF[rs] < 0)
 3892              		.loc 1 1933 0
 3893 2132 83E01F   		andl	$31, %eax
 3894 2135 833C8500 		cmpl	$0, RF(,%rax,4)
 3894      00000000 
 3895 213d 79D8     		jns	.L240
 3896 213f EB27     		jmp	.L319
 3897              	.LVL541:
 3898              	.L243:
1949:src/vm2.c     **** 				else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
 3899              		.loc 1 1949 0
 3900 2141 83F810   		cmpl	$16, %eax
 3901 2144 753C     		jne	.L241
 3902              	.LVL542:
1955:src/vm2.c     **** 					rs = (instr >> 21) & 0x1F;
 3903              		.loc 1 1955 0
 3904 2146 4489C0   		movl	%r8d, %eax
 3905 2149 C1E815   		shrl	$21, %eax
1956:src/vm2.c     **** 					if ((int32_t)RF[rs] < 0)
 3906              		.loc 1 1956 0
 3907 214c 83E01F   		andl	$31, %eax
 3908 214f 833C8500 		cmpl	$0, RF(,%rax,4)
 3908      00000000 
 3909 2157 79BE     		jns	.L240
 3910              	.LVL543:
 3911              	.L320:
1958:src/vm2.c     **** 						RF[31] = PC + 8;
 3912              		.loc 1 1958 0
 3913 2159 8B050000 		movl	PC(%rip), %eax
 3913      0000
 3914 215f 83C008   		addl	$8, %eax
 3915 2162 89050000 		movl	%eax, RF+124(%rip)
 3915      0000
 3916              	.L319:
 3917              	.LVL544:
1960:src/vm2.c     **** 						PC  =  nPC;
 3918              		.loc 1 1960 0
 3919 2168 8B050000 		movl	nPC(%rip), %eax
 3919      0000
1961:src/vm2.c     **** 						nPC  += (immediate << 2);
 3920              		.loc 1 1961 0
 3921 216e 450FBFC0 		movswl	%r8w, %r8d
 3922              	.LVL545:
1960:src/vm2.c     **** 						PC  =  nPC;
 3923              		.loc 1 1960 0
 3924 2172 89050000 		movl	%eax, PC(%rip)
 3924      0000
1961:src/vm2.c     **** 						nPC  += (immediate << 2);
 3925              		.loc 1 1961 0
 3926 2178 428D0480 		leal	(%rax,%r8,4), %eax
 3927              	.LVL546:
 3928              	.L321:
 3929 217c 89050000 		movl	%eax, nPC(%rip)
 3929      0000
 3930              	.L241:
1975:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
GAS LISTING /tmp/cc15eBE3.s 			page 141


 3931              		.loc 1 1975 0
 3932 2182 8B050000 		movl	PC(%rip), %eax
 3932      0000
 3933 2188 8D5003   		leal	3(%rax), %edx
 3934 218b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 3934      00000000 
 3935 2193 89C2     		movl	%eax, %edx
 3936 2195 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3936      000000
 3937 219c C1E218   		sall	$24, %edx
 3938 219f 4109D0   		orl	%edx, %r8d
 3939 21a2 8D5001   		leal	1(%rax), %edx
 3940 21a5 83C002   		addl	$2, %eax
 3941 21a8 0FB68000 		movzbl	VM_memory(%rax), %eax
 3941      000000
 3942 21af 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3942      000000
 3943 21b6 C1E008   		sall	$8, %eax
 3944 21b9 C1E210   		sall	$16, %edx
 3945 21bc 4109D0   		orl	%edx, %r8d
 3946 21bf 4109C0   		orl	%eax, %r8d
 3947              	.LVL547:
1976:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3948              		.loc 1 1976 0
 3949 21c2 4489C2   		movl	%r8d, %edx
1978:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3950              		.loc 1 1978 0
 3951 21c5 4488C0   		movb	%r8b, %al
1976:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 3952              		.loc 1 1976 0
 3953 21c8 C1EA1A   		shrl	$26, %edx
 3954              	.LVL548:
1978:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 3955              		.loc 1 1978 0
 3956 21cb 83E03F   		andl	$63, %eax
 3957 21ce 8D4A2B   		leal	43(%rdx), %ecx
 3958 21d1 84D2     		testb	%dl, %dl
 3959 21d3 0F45C1   		cmovne	%ecx, %eax
 3960              	.LVL549:
1984:src/vm2.c     **** 				goto *array[op];
 3961              		.loc 1 1984 0
 3962 21d6 83E07F   		andl	$127, %eax
 3963              	.LVL550:
 3964 21d9 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 3964      00000000 
 3965 21e1 E951E7FF 		jmp	.L112
 3965      FF
 3966              	.L246:
 3967              	.LVL551:
1994:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3968              		.loc 1 1994 0
 3969 21e6 4489C2   		movl	%r8d, %edx
1995:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3970              		.loc 1 1995 0
 3971 21e9 4489C0   		movl	%r8d, %eax
1994:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 3972              		.loc 1 1994 0
GAS LISTING /tmp/cc15eBE3.s 			page 142


 3973 21ec C1EA15   		shrl	$21, %edx
1995:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 3974              		.loc 1 1995 0
 3975 21ef C1E810   		shrl	$16, %eax
1996:src/vm2.c     **** 				if (RF[rs] == RF[rt])
 3976              		.loc 1 1996 0
 3977 21f2 83E01F   		andl	$31, %eax
 3978 21f5 83E21F   		andl	$31, %edx
 3979 21f8 8B048500 		movl	RF(,%rax,4), %eax
 3979      000000
 3980 21ff 39049500 		cmpl	%eax, RF(,%rdx,4)
 3980      000000
 3981 2206 8B050000 		movl	nPC(%rip), %eax
 3981      0000
1999:src/vm2.c     **** 					PC  =  nPC;
 3982              		.loc 1 1999 0
 3983 220c 89050000 		movl	%eax, PC(%rip)
 3983      0000
1996:src/vm2.c     **** 				if (RF[rs] == RF[rt])
 3984              		.loc 1 1996 0
 3985 2212 750A     		jne	.L247
 3986              	.LVL552:
2000:src/vm2.c     **** 					nPC  += (immediate << 2);
 3987              		.loc 1 2000 0
 3988 2214 450FBFC0 		movswl	%r8w, %r8d
 3989              	.LVL553:
 3990 2218 428D0480 		leal	(%rax,%r8,4), %eax
 3991 221c EB03     		jmp	.L322
 3992              	.LVL554:
 3993              	.L247:
2008:src/vm2.c     **** 					nPC  += 4;
 3994              		.loc 1 2008 0
 3995 221e 83C004   		addl	$4, %eax
 3996              	.LVL555:
 3997              	.L322:
 3998 2221 89050000 		movl	%eax, nPC(%rip)
 3998      0000
2013:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 3999              		.loc 1 2013 0
 4000 2227 8B050000 		movl	PC(%rip), %eax
 4000      0000
 4001 222d 8D5003   		leal	3(%rax), %edx
 4002 2230 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4002      00000000 
 4003 2238 89C2     		movl	%eax, %edx
 4004 223a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4004      000000
 4005 2241 C1E218   		sall	$24, %edx
 4006 2244 4109D0   		orl	%edx, %r8d
 4007 2247 8D5001   		leal	1(%rax), %edx
 4008 224a 83C002   		addl	$2, %eax
 4009 224d 0FB68000 		movzbl	VM_memory(%rax), %eax
 4009      000000
 4010 2254 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4010      000000
 4011 225b C1E008   		sall	$8, %eax
 4012 225e C1E210   		sall	$16, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 143


 4013 2261 4109D0   		orl	%edx, %r8d
 4014 2264 4109C0   		orl	%eax, %r8d
 4015              	.LVL556:
2014:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4016              		.loc 1 2014 0
 4017 2267 4489C2   		movl	%r8d, %edx
2016:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4018              		.loc 1 2016 0
 4019 226a 4488C0   		movb	%r8b, %al
2014:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4020              		.loc 1 2014 0
 4021 226d C1EA1A   		shrl	$26, %edx
 4022              	.LVL557:
2016:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4023              		.loc 1 2016 0
 4024 2270 83E03F   		andl	$63, %eax
 4025 2273 8D4A2B   		leal	43(%rdx), %ecx
 4026 2276 84D2     		testb	%dl, %dl
 4027 2278 0F45C1   		cmovne	%ecx, %eax
 4028              	.LVL558:
2022:src/vm2.c     **** 				goto *array[op];
 4029              		.loc 1 2022 0
 4030 227b 83E07F   		andl	$127, %eax
 4031              	.LVL559:
 4032 227e 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4032      00000000 
 4033 2286 E9ACE6FF 		jmp	.L112
 4033      FF
 4034              	.L251:
 4035              	.LVL560:
2032:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4036              		.loc 1 2032 0
 4037 228b 4489C0   		movl	%r8d, %eax
 4038 228e C1E815   		shrl	$21, %eax
2033:src/vm2.c     **** 				if ((int32_t)RF[rs] > 0)
 4039              		.loc 1 2033 0
 4040 2291 83E01F   		andl	$31, %eax
 4041 2294 833C8500 		cmpl	$0, RF(,%rax,4)
 4041      00000000 
 4042 229c 8B050000 		movl	nPC(%rip), %eax
 4042      0000
2036:src/vm2.c     **** 					PC  =  nPC;
 4043              		.loc 1 2036 0
 4044 22a2 89050000 		movl	%eax, PC(%rip)
 4044      0000
2033:src/vm2.c     **** 				if ((int32_t)RF[rs] > 0)
 4045              		.loc 1 2033 0
 4046 22a8 7E0A     		jle	.L252
 4047              	.LVL561:
2037:src/vm2.c     **** 					nPC  += (immediate << 2);
 4048              		.loc 1 2037 0
 4049 22aa 450FBFC0 		movswl	%r8w, %r8d
 4050              	.LVL562:
 4051 22ae 428D0480 		leal	(%rax,%r8,4), %eax
 4052 22b2 EB03     		jmp	.L323
 4053              	.LVL563:
 4054              	.L252:
GAS LISTING /tmp/cc15eBE3.s 			page 144


2045:src/vm2.c     **** 					nPC  += 4;
 4055              		.loc 1 2045 0
 4056 22b4 83C004   		addl	$4, %eax
 4057              	.LVL564:
 4058              	.L323:
 4059 22b7 89050000 		movl	%eax, nPC(%rip)
 4059      0000
2050:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4060              		.loc 1 2050 0
 4061 22bd 8B050000 		movl	PC(%rip), %eax
 4061      0000
 4062 22c3 8D5003   		leal	3(%rax), %edx
 4063 22c6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4063      00000000 
 4064 22ce 89C2     		movl	%eax, %edx
 4065 22d0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4065      000000
 4066 22d7 C1E218   		sall	$24, %edx
 4067 22da 4109D0   		orl	%edx, %r8d
 4068 22dd 8D5001   		leal	1(%rax), %edx
 4069 22e0 83C002   		addl	$2, %eax
 4070 22e3 0FB68000 		movzbl	VM_memory(%rax), %eax
 4070      000000
 4071 22ea 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4071      000000
 4072 22f1 C1E008   		sall	$8, %eax
 4073 22f4 C1E210   		sall	$16, %edx
 4074 22f7 4109D0   		orl	%edx, %r8d
 4075 22fa 4109C0   		orl	%eax, %r8d
 4076              	.LVL565:
2051:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4077              		.loc 1 2051 0
 4078 22fd 4489C2   		movl	%r8d, %edx
2053:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4079              		.loc 1 2053 0
 4080 2300 4488C0   		movb	%r8b, %al
2051:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4081              		.loc 1 2051 0
 4082 2303 C1EA1A   		shrl	$26, %edx
 4083              	.LVL566:
2053:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4084              		.loc 1 2053 0
 4085 2306 83E03F   		andl	$63, %eax
 4086 2309 8D4A2B   		leal	43(%rdx), %ecx
 4087 230c 84D2     		testb	%dl, %dl
 4088 230e 0F45C1   		cmovne	%ecx, %eax
 4089              	.LVL567:
2059:src/vm2.c     **** 				goto *array[op];
 4090              		.loc 1 2059 0
 4091 2311 83E07F   		andl	$127, %eax
 4092              	.LVL568:
 4093 2314 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4093      00000000 
 4094 231c E916E6FF 		jmp	.L112
 4094      FF
 4095              	.L256:
 4096              	.LVL569:
GAS LISTING /tmp/cc15eBE3.s 			page 145


2069:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4097              		.loc 1 2069 0
 4098 2321 4489C0   		movl	%r8d, %eax
 4099 2324 C1E815   		shrl	$21, %eax
2070:src/vm2.c     **** 				if ((int32_t)RF[rs] <= 0)
 4100              		.loc 1 2070 0
 4101 2327 83E01F   		andl	$31, %eax
 4102 232a 833C8500 		cmpl	$0, RF(,%rax,4)
 4102      00000000 
 4103 2332 8B050000 		movl	nPC(%rip), %eax
 4103      0000
2073:src/vm2.c     **** 					PC  =  nPC;
 4104              		.loc 1 2073 0
 4105 2338 89050000 		movl	%eax, PC(%rip)
 4105      0000
2070:src/vm2.c     **** 				if ((int32_t)RF[rs] <= 0)
 4106              		.loc 1 2070 0
 4107 233e 7F0A     		jg	.L257
 4108              	.LVL570:
2074:src/vm2.c     **** 					nPC  += (immediate << 2);
 4109              		.loc 1 2074 0
 4110 2340 450FBFC0 		movswl	%r8w, %r8d
 4111              	.LVL571:
 4112 2344 428D0480 		leal	(%rax,%r8,4), %eax
 4113 2348 EB03     		jmp	.L324
 4114              	.LVL572:
 4115              	.L257:
2082:src/vm2.c     **** 					nPC  += 4;
 4116              		.loc 1 2082 0
 4117 234a 83C004   		addl	$4, %eax
 4118              	.LVL573:
 4119              	.L324:
 4120 234d 89050000 		movl	%eax, nPC(%rip)
 4120      0000
2087:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4121              		.loc 1 2087 0
 4122 2353 8B050000 		movl	PC(%rip), %eax
 4122      0000
 4123 2359 8D5003   		leal	3(%rax), %edx
 4124 235c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4124      00000000 
 4125 2364 89C2     		movl	%eax, %edx
 4126 2366 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4126      000000
 4127 236d C1E218   		sall	$24, %edx
 4128 2370 4109D0   		orl	%edx, %r8d
 4129 2373 8D5001   		leal	1(%rax), %edx
 4130 2376 83C002   		addl	$2, %eax
 4131 2379 0FB68000 		movzbl	VM_memory(%rax), %eax
 4131      000000
 4132 2380 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4132      000000
 4133 2387 C1E008   		sall	$8, %eax
 4134 238a C1E210   		sall	$16, %edx
 4135 238d 4109D0   		orl	%edx, %r8d
 4136 2390 4109C0   		orl	%eax, %r8d
 4137              	.LVL574:
GAS LISTING /tmp/cc15eBE3.s 			page 146


2088:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4138              		.loc 1 2088 0
 4139 2393 4489C2   		movl	%r8d, %edx
2090:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4140              		.loc 1 2090 0
 4141 2396 4488C0   		movb	%r8b, %al
2088:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4142              		.loc 1 2088 0
 4143 2399 C1EA1A   		shrl	$26, %edx
 4144              	.LVL575:
2090:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4145              		.loc 1 2090 0
 4146 239c 83E03F   		andl	$63, %eax
 4147 239f 8D4A2B   		leal	43(%rdx), %ecx
 4148 23a2 84D2     		testb	%dl, %dl
 4149 23a4 0F45C1   		cmovne	%ecx, %eax
 4150              	.LVL576:
2096:src/vm2.c     **** 				goto *array[op];
 4151              		.loc 1 2096 0
 4152 23a7 83E07F   		andl	$127, %eax
 4153              	.LVL577:
 4154 23aa 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4154      00000000 
 4155 23b2 E980E5FF 		jmp	.L112
 4155      FF
 4156              	.L261:
 4157              	.LVL578:
2106:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4158              		.loc 1 2106 0
 4159 23b7 4489C2   		movl	%r8d, %edx
2107:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4160              		.loc 1 2107 0
 4161 23ba 4489C0   		movl	%r8d, %eax
2106:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4162              		.loc 1 2106 0
 4163 23bd C1EA15   		shrl	$21, %edx
2107:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4164              		.loc 1 2107 0
 4165 23c0 C1E810   		shrl	$16, %eax
2108:src/vm2.c     **** 				if (RF[rs] != RF[rt])
 4166              		.loc 1 2108 0
 4167 23c3 83E01F   		andl	$31, %eax
 4168 23c6 83E21F   		andl	$31, %edx
 4169 23c9 8B048500 		movl	RF(,%rax,4), %eax
 4169      000000
 4170 23d0 39049500 		cmpl	%eax, RF(,%rdx,4)
 4170      000000
 4171 23d7 8B050000 		movl	nPC(%rip), %eax
 4171      0000
2111:src/vm2.c     **** 					PC  =  nPC;
 4172              		.loc 1 2111 0
 4173 23dd 89050000 		movl	%eax, PC(%rip)
 4173      0000
2108:src/vm2.c     **** 				if (RF[rs] != RF[rt])
 4174              		.loc 1 2108 0
 4175 23e3 740A     		je	.L262
 4176              	.LVL579:
GAS LISTING /tmp/cc15eBE3.s 			page 147


2112:src/vm2.c     **** 					nPC  += (immediate << 2);
 4177              		.loc 1 2112 0
 4178 23e5 450FBFC0 		movswl	%r8w, %r8d
 4179              	.LVL580:
 4180 23e9 428D0480 		leal	(%rax,%r8,4), %eax
 4181 23ed EB03     		jmp	.L325
 4182              	.LVL581:
 4183              	.L262:
2120:src/vm2.c     **** 					nPC  += 4;
 4184              		.loc 1 2120 0
 4185 23ef 83C004   		addl	$4, %eax
 4186              	.LVL582:
 4187              	.L325:
 4188 23f2 89050000 		movl	%eax, nPC(%rip)
 4188      0000
2125:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4189              		.loc 1 2125 0
 4190 23f8 8B050000 		movl	PC(%rip), %eax
 4190      0000
 4191 23fe 8D5003   		leal	3(%rax), %edx
 4192 2401 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4192      00000000 
 4193 2409 89C2     		movl	%eax, %edx
 4194 240b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4194      000000
 4195 2412 C1E218   		sall	$24, %edx
 4196 2415 4109D0   		orl	%edx, %r8d
 4197 2418 8D5001   		leal	1(%rax), %edx
 4198 241b 83C002   		addl	$2, %eax
 4199 241e 0FB68000 		movzbl	VM_memory(%rax), %eax
 4199      000000
 4200 2425 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4200      000000
 4201 242c C1E008   		sall	$8, %eax
 4202 242f C1E210   		sall	$16, %edx
 4203 2432 4109D0   		orl	%edx, %r8d
 4204 2435 4109C0   		orl	%eax, %r8d
 4205              	.LVL583:
2126:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4206              		.loc 1 2126 0
 4207 2438 4489C2   		movl	%r8d, %edx
2128:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4208              		.loc 1 2128 0
 4209 243b 4488C0   		movb	%r8b, %al
2126:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4210              		.loc 1 2126 0
 4211 243e C1EA1A   		shrl	$26, %edx
 4212              	.LVL584:
2128:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4213              		.loc 1 2128 0
 4214 2441 83E03F   		andl	$63, %eax
 4215 2444 8D4A2B   		leal	43(%rdx), %ecx
 4216 2447 84D2     		testb	%dl, %dl
 4217 2449 0F45C1   		cmovne	%ecx, %eax
 4218              	.LVL585:
2134:src/vm2.c     **** 				goto *array[op];
 4219              		.loc 1 2134 0
GAS LISTING /tmp/cc15eBE3.s 			page 148


 4220 244c 83E07F   		andl	$127, %eax
 4221              	.LVL586:
 4222 244f 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4222      00000000 
 4223 2457 E9DBE4FF 		jmp	.L112
 4223      FF
 4224              	.L266:
 4225              	.LVL587:
2144:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4226              		.loc 1 2144 0
 4227 245c 4489C2   		movl	%r8d, %edx
2147:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
 4228              		.loc 1 2147 0
 4229 245f 410FBFC0 		movswl	%r8w, %eax
2145:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4230              		.loc 1 2145 0
 4231 2463 41C1E810 		shrl	$16, %r8d
 4232              	.LVL588:
2144:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4233              		.loc 1 2144 0
 4234 2467 C1EA15   		shrl	$21, %edx
 4235              	.LVL589:
2147:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
 4236              		.loc 1 2147 0
 4237 246a 4183E01F 		andl	$31, %r8d
 4238 246e 83E21F   		andl	$31, %edx
 4239 2471 03049500 		addl	RF(,%rdx,4), %eax
 4239      000000
 4240              	.LVL590:
 4241 2478 8A900000 		movb	VM_memory(%rax), %dl
 4241      0000
 4242 247e 88D0     		movb	%dl, %al
 4243 2480 83E27F   		andl	$127, %edx
 4244 2483 83E080   		andl	$-128, %eax
 4245 2486 0FB6C0   		movzbl	%al, %eax
 4246 2489 C1E018   		sall	$24, %eax
 4247 248c 09D0     		orl	%edx, %eax
 4248 248e 42890485 		movl	%eax, RF(,%r8,4)
 4248      00000000 
2148:src/vm2.c     **** 				PC  =  nPC;
 4249              		.loc 1 2148 0
 4250 2496 8B050000 		movl	nPC(%rip), %eax
 4250      0000
2149:src/vm2.c     **** 				nPC  += 4;
 4251              		.loc 1 2149 0
 4252 249c 8D5004   		leal	4(%rax), %edx
2148:src/vm2.c     **** 				PC  =  nPC;
 4253              		.loc 1 2148 0
 4254 249f 89050000 		movl	%eax, PC(%rip)
 4254      0000
2149:src/vm2.c     **** 				nPC  += 4;
 4255              		.loc 1 2149 0
 4256 24a5 89150000 		movl	%edx, nPC(%rip)
 4256      0000
2152:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4257              		.loc 1 2152 0
 4258 24ab 8D5003   		leal	3(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 149


 4259 24ae 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4259      00000000 
 4260 24b6 89C2     		movl	%eax, %edx
 4261 24b8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4261      000000
 4262 24bf C1E218   		sall	$24, %edx
 4263 24c2 4109D0   		orl	%edx, %r8d
 4264 24c5 8D5001   		leal	1(%rax), %edx
 4265 24c8 83C002   		addl	$2, %eax
 4266 24cb 0FB68000 		movzbl	VM_memory(%rax), %eax
 4266      000000
 4267 24d2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4267      000000
 4268 24d9 C1E008   		sall	$8, %eax
 4269 24dc C1E210   		sall	$16, %edx
 4270 24df 4109D0   		orl	%edx, %r8d
 4271 24e2 4109C0   		orl	%eax, %r8d
 4272              	.LVL591:
2153:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4273              		.loc 1 2153 0
 4274 24e5 4489C2   		movl	%r8d, %edx
2155:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4275              		.loc 1 2155 0
 4276 24e8 4488C0   		movb	%r8b, %al
2153:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4277              		.loc 1 2153 0
 4278 24eb C1EA1A   		shrl	$26, %edx
 4279              	.LVL592:
2155:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4280              		.loc 1 2155 0
 4281 24ee 83E03F   		andl	$63, %eax
 4282 24f1 8D4A2B   		leal	43(%rdx), %ecx
 4283 24f4 84D2     		testb	%dl, %dl
 4284 24f6 0F45C1   		cmovne	%ecx, %eax
 4285              	.LVL593:
2161:src/vm2.c     **** 				goto *array[op];
 4286              		.loc 1 2161 0
 4287 24f9 83E07F   		andl	$127, %eax
 4288              	.LVL594:
 4289 24fc 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4289      00000000 
 4290 2504 E92EE4FF 		jmp	.L112
 4290      FF
 4291              	.L269:
 4292              	.LVL595:
2171:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4293              		.loc 1 2171 0
 4294 2509 4489C2   		movl	%r8d, %edx
2172:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4295              		.loc 1 2172 0
 4296 250c 4489C0   		movl	%r8d, %eax
2174:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 4297              		.loc 1 2174 0
 4298 250f 450FBFC0 		movswl	%r8w, %r8d
 4299              	.LVL596:
2171:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4300              		.loc 1 2171 0
GAS LISTING /tmp/cc15eBE3.s 			page 150


 4301 2513 C1EA15   		shrl	$21, %edx
2172:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4302              		.loc 1 2172 0
 4303 2516 C1E810   		shrl	$16, %eax
 4304              	.LVL597:
2174:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 4305              		.loc 1 2174 0
 4306 2519 83E21F   		andl	$31, %edx
 4307 251c 83E01F   		andl	$31, %eax
 4308 251f 44030495 		addl	RF(,%rdx,4), %r8d
 4308      00000000 
 4309              	.LVL598:
 4310 2527 410FB690 		movzbl	VM_memory(%r8), %edx
 4310      00000000 
 4311 252f 89148500 		movl	%edx, RF(,%rax,4)
 4311      000000
2175:src/vm2.c     **** 				PC  =  nPC;
 4312              		.loc 1 2175 0
 4313 2536 8B050000 		movl	nPC(%rip), %eax
 4313      0000
2176:src/vm2.c     **** 				nPC  += 4;
 4314              		.loc 1 2176 0
 4315 253c 8D5004   		leal	4(%rax), %edx
2175:src/vm2.c     **** 				PC  =  nPC;
 4316              		.loc 1 2175 0
 4317 253f 89050000 		movl	%eax, PC(%rip)
 4317      0000
2176:src/vm2.c     **** 				nPC  += 4;
 4318              		.loc 1 2176 0
 4319 2545 89150000 		movl	%edx, nPC(%rip)
 4319      0000
2179:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4320              		.loc 1 2179 0
 4321 254b 8D5003   		leal	3(%rax), %edx
 4322 254e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4322      00000000 
 4323 2556 89C2     		movl	%eax, %edx
 4324 2558 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4324      000000
 4325 255f C1E218   		sall	$24, %edx
 4326 2562 4109D0   		orl	%edx, %r8d
 4327 2565 8D5001   		leal	1(%rax), %edx
 4328 2568 83C002   		addl	$2, %eax
 4329 256b 0FB68000 		movzbl	VM_memory(%rax), %eax
 4329      000000
 4330 2572 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4330      000000
 4331 2579 C1E008   		sall	$8, %eax
 4332 257c C1E210   		sall	$16, %edx
 4333 257f 4109D0   		orl	%edx, %r8d
 4334 2582 4109C0   		orl	%eax, %r8d
 4335              	.LVL599:
2180:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4336              		.loc 1 2180 0
 4337 2585 4489C2   		movl	%r8d, %edx
2182:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4338              		.loc 1 2182 0
GAS LISTING /tmp/cc15eBE3.s 			page 151


 4339 2588 4488C0   		movb	%r8b, %al
2180:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4340              		.loc 1 2180 0
 4341 258b C1EA1A   		shrl	$26, %edx
 4342              	.LVL600:
2182:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4343              		.loc 1 2182 0
 4344 258e 83E03F   		andl	$63, %eax
 4345 2591 8D4A2B   		leal	43(%rdx), %ecx
 4346 2594 84D2     		testb	%dl, %dl
 4347 2596 0F45C1   		cmovne	%ecx, %eax
 4348              	.LVL601:
2188:src/vm2.c     **** 				goto *array[op];
 4349              		.loc 1 2188 0
 4350 2599 83E07F   		andl	$127, %eax
 4351              	.LVL602:
 4352 259c 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4352      00000000 
 4353 25a4 E98EE3FF 		jmp	.L112
 4353      FF
 4354              	.L272:
 4355              	.LVL603:
2198:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4356              		.loc 1 2198 0
 4357 25a9 4489C2   		movl	%r8d, %edx
2201:src/vm2.c     **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
 4358              		.loc 1 2201 0
 4359 25ac 410FBFC0 		movswl	%r8w, %eax
2199:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4360              		.loc 1 2199 0
 4361 25b0 41C1E810 		shrl	$16, %r8d
 4362              	.LVL604:
2198:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4363              		.loc 1 2198 0
 4364 25b4 C1EA15   		shrl	$21, %edx
 4365              	.LVL605:
2201:src/vm2.c     **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
 4366              		.loc 1 2201 0
 4367 25b7 4183E01F 		andl	$31, %r8d
 4368 25bb 83E21F   		andl	$31, %edx
 4369 25be 03049500 		addl	RF(,%rdx,4), %eax
 4369      000000
 4370              	.LVL606:
 4371 25c5 FFC0     		incl	%eax
 4372 25c7 0FB68000 		movzbl	VM_memory(%rax), %eax
 4372      000000
 4373 25ce 42890485 		movl	%eax, RF(,%r8,4)
 4373      00000000 
2202:src/vm2.c     **** 				PC  =  nPC;
 4374              		.loc 1 2202 0
 4375 25d6 8B050000 		movl	nPC(%rip), %eax
 4375      0000
2203:src/vm2.c     **** 				nPC  += 4;
 4376              		.loc 1 2203 0
 4377 25dc 8D5004   		leal	4(%rax), %edx
2202:src/vm2.c     **** 				PC  =  nPC;
 4378              		.loc 1 2202 0
GAS LISTING /tmp/cc15eBE3.s 			page 152


 4379 25df 89050000 		movl	%eax, PC(%rip)
 4379      0000
2203:src/vm2.c     **** 				nPC  += 4;
 4380              		.loc 1 2203 0
 4381 25e5 89150000 		movl	%edx, nPC(%rip)
 4381      0000
2206:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4382              		.loc 1 2206 0
 4383 25eb 8D5003   		leal	3(%rax), %edx
 4384 25ee 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4384      00000000 
 4385 25f6 89C2     		movl	%eax, %edx
 4386 25f8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4386      000000
 4387 25ff C1E218   		sall	$24, %edx
 4388 2602 4109D0   		orl	%edx, %r8d
 4389 2605 8D5001   		leal	1(%rax), %edx
 4390 2608 83C002   		addl	$2, %eax
 4391 260b 0FB68000 		movzbl	VM_memory(%rax), %eax
 4391      000000
 4392 2612 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4392      000000
 4393 2619 C1E008   		sall	$8, %eax
 4394 261c C1E210   		sall	$16, %edx
 4395 261f 4109D0   		orl	%edx, %r8d
 4396 2622 4109C0   		orl	%eax, %r8d
 4397              	.LVL607:
2207:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4398              		.loc 1 2207 0
 4399 2625 4489C2   		movl	%r8d, %edx
2209:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4400              		.loc 1 2209 0
 4401 2628 4488C0   		movb	%r8b, %al
2207:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4402              		.loc 1 2207 0
 4403 262b C1EA1A   		shrl	$26, %edx
 4404              	.LVL608:
2209:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4405              		.loc 1 2209 0
 4406 262e 83E03F   		andl	$63, %eax
 4407 2631 8D4A2B   		leal	43(%rdx), %ecx
 4408 2634 84D2     		testb	%dl, %dl
 4409 2636 0F45C1   		cmovne	%ecx, %eax
 4410              	.LVL609:
2215:src/vm2.c     **** 				goto *array[op];
 4411              		.loc 1 2215 0
 4412 2639 83E07F   		andl	$127, %eax
 4413              	.LVL610:
 4414 263c 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4414      00000000 
 4415 2644 E9EEE2FF 		jmp	.L112
 4415      FF
 4416              	.L275:
 4417              	.LVL611:
2225:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4418              		.loc 1 2225 0
 4419 2649 4489C2   		movl	%r8d, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 153


2228:src/vm2.c     **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
 4420              		.loc 1 2228 0
 4421 264c 410FBFC0 		movswl	%r8w, %eax
2226:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4422              		.loc 1 2226 0
 4423 2650 41C1E810 		shrl	$16, %r8d
 4424              	.LVL612:
2225:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4425              		.loc 1 2225 0
 4426 2654 C1EA15   		shrl	$21, %edx
 4427              	.LVL613:
2228:src/vm2.c     **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
 4428              		.loc 1 2228 0
 4429 2657 4183E01F 		andl	$31, %r8d
 4430 265b 83E21F   		andl	$31, %edx
 4431 265e 03049500 		addl	RF(,%rdx,4), %eax
 4431      000000
 4432              	.LVL614:
 4433 2665 FFC0     		incl	%eax
 4434 2667 0FB68000 		movzbl	VM_memory(%rax), %eax
 4434      000000
 4435 266e 42890485 		movl	%eax, RF(,%r8,4)
 4435      00000000 
2229:src/vm2.c     **** 				PC  =  nPC;
 4436              		.loc 1 2229 0
 4437 2676 8B050000 		movl	nPC(%rip), %eax
 4437      0000
2230:src/vm2.c     **** 				nPC  += 4;
 4438              		.loc 1 2230 0
 4439 267c 8D5004   		leal	4(%rax), %edx
2229:src/vm2.c     **** 				PC  =  nPC;
 4440              		.loc 1 2229 0
 4441 267f 89050000 		movl	%eax, PC(%rip)
 4441      0000
2230:src/vm2.c     **** 				nPC  += 4;
 4442              		.loc 1 2230 0
 4443 2685 89150000 		movl	%edx, nPC(%rip)
 4443      0000
2233:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4444              		.loc 1 2233 0
 4445 268b 8D5003   		leal	3(%rax), %edx
 4446 268e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4446      00000000 
 4447 2696 89C2     		movl	%eax, %edx
 4448 2698 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4448      000000
 4449 269f C1E218   		sall	$24, %edx
 4450 26a2 4109D0   		orl	%edx, %r8d
 4451 26a5 8D5001   		leal	1(%rax), %edx
 4452 26a8 83C002   		addl	$2, %eax
 4453 26ab 0FB68000 		movzbl	VM_memory(%rax), %eax
 4453      000000
 4454 26b2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4454      000000
 4455 26b9 C1E008   		sall	$8, %eax
 4456 26bc C1E210   		sall	$16, %edx
 4457 26bf 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 154


 4458 26c2 4109C0   		orl	%eax, %r8d
 4459              	.LVL615:
2234:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4460              		.loc 1 2234 0
 4461 26c5 4489C2   		movl	%r8d, %edx
2236:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4462              		.loc 1 2236 0
 4463 26c8 4488C0   		movb	%r8b, %al
2234:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4464              		.loc 1 2234 0
 4465 26cb C1EA1A   		shrl	$26, %edx
 4466              	.LVL616:
2236:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4467              		.loc 1 2236 0
 4468 26ce 83E03F   		andl	$63, %eax
 4469 26d1 8D4A2B   		leal	43(%rdx), %ecx
 4470 26d4 84D2     		testb	%dl, %dl
 4471 26d6 0F45C1   		cmovne	%ecx, %eax
 4472              	.LVL617:
2242:src/vm2.c     **** 				goto *array[op];
 4473              		.loc 1 2242 0
 4474 26d9 83E07F   		andl	$127, %eax
 4475              	.LVL618:
 4476 26dc 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4476      00000000 
 4477 26e4 E94EE2FF 		jmp	.L112
 4477      FF
 4478              	.L278:
 4479              	.LVL619:
2252:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4480              		.loc 1 2252 0
 4481 26e9 4489C2   		movl	%r8d, %edx
2255:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 4482              		.loc 1 2255 0
 4483 26ec 410FBFC0 		movswl	%r8w, %eax
2253:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4484              		.loc 1 2253 0
 4485 26f0 41C1E810 		shrl	$16, %r8d
 4486              	.LVL620:
2252:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4487              		.loc 1 2252 0
 4488 26f4 C1EA15   		shrl	$21, %edx
 4489              	.LVL621:
2255:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 4490              		.loc 1 2255 0
 4491 26f7 4183E01F 		andl	$31, %r8d
 4492 26fb 83E21F   		andl	$31, %edx
 4493 26fe 03049500 		addl	RF(,%rdx,4), %eax
 4493      000000
 4494              	.LVL622:
 4495 2705 8D5003   		leal	3(%rax), %edx
 4496 2708 0FB68A00 		movzbl	VM_memory(%rdx), %ecx
 4496      000000
 4497 270f 89C2     		movl	%eax, %edx
 4498 2711 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4498      000000
 4499 2718 C1E218   		sall	$24, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 155


 4500 271b 09D1     		orl	%edx, %ecx
 4501 271d 8D5001   		leal	1(%rax), %edx
 4502 2720 83C002   		addl	$2, %eax
 4503 2723 0FB68000 		movzbl	VM_memory(%rax), %eax
 4503      000000
 4504 272a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4504      000000
 4505 2731 C1E008   		sall	$8, %eax
 4506 2734 C1E210   		sall	$16, %edx
 4507 2737 09D1     		orl	%edx, %ecx
 4508 2739 09C1     		orl	%eax, %ecx
2256:src/vm2.c     **** 				PC  =  nPC;
 4509              		.loc 1 2256 0
 4510 273b 8B050000 		movl	nPC(%rip), %eax
 4510      0000
2255:src/vm2.c     **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 4511              		.loc 1 2255 0
 4512 2741 42890C85 		movl	%ecx, RF(,%r8,4)
 4512      00000000 
2257:src/vm2.c     **** 				nPC  += 4;
 4513              		.loc 1 2257 0
 4514 2749 8D5004   		leal	4(%rax), %edx
2256:src/vm2.c     **** 				PC  =  nPC;
 4515              		.loc 1 2256 0
 4516 274c 89050000 		movl	%eax, PC(%rip)
 4516      0000
2257:src/vm2.c     **** 				nPC  += 4;
 4517              		.loc 1 2257 0
 4518 2752 89150000 		movl	%edx, nPC(%rip)
 4518      0000
2260:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4519              		.loc 1 2260 0
 4520 2758 8D5003   		leal	3(%rax), %edx
 4521 275b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4521      00000000 
 4522 2763 89C2     		movl	%eax, %edx
 4523 2765 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4523      000000
 4524 276c C1E218   		sall	$24, %edx
 4525 276f 4109D0   		orl	%edx, %r8d
 4526 2772 8D5001   		leal	1(%rax), %edx
 4527 2775 83C002   		addl	$2, %eax
 4528 2778 0FB68000 		movzbl	VM_memory(%rax), %eax
 4528      000000
 4529 277f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4529      000000
 4530 2786 C1E008   		sall	$8, %eax
 4531 2789 C1E210   		sall	$16, %edx
 4532 278c 4109D0   		orl	%edx, %r8d
 4533 278f 4109C0   		orl	%eax, %r8d
 4534              	.LVL623:
2261:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4535              		.loc 1 2261 0
 4536 2792 4489C2   		movl	%r8d, %edx
2263:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4537              		.loc 1 2263 0
 4538 2795 4488C0   		movb	%r8b, %al
GAS LISTING /tmp/cc15eBE3.s 			page 156


2261:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4539              		.loc 1 2261 0
 4540 2798 C1EA1A   		shrl	$26, %edx
 4541              	.LVL624:
2263:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4542              		.loc 1 2263 0
 4543 279b 83E03F   		andl	$63, %eax
 4544 279e 8D4A2B   		leal	43(%rdx), %ecx
 4545 27a1 84D2     		testb	%dl, %dl
 4546 27a3 0F45C1   		cmovne	%ecx, %eax
 4547              	.LVL625:
2269:src/vm2.c     **** 				goto *array[op];
 4548              		.loc 1 2269 0
 4549 27a6 83E07F   		andl	$127, %eax
 4550              	.LVL626:
 4551 27a9 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4551      00000000 
 4552 27b1 E981E1FF 		jmp	.L112
 4552      FF
 4553              	.L281:
 4554              	.LVL627:
2279:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4555              		.loc 1 2279 0
 4556 27b6 4489C2   		movl	%r8d, %edx
2282:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 4557              		.loc 1 2282 0
 4558 27b9 410FBFC0 		movswl	%r8w, %eax
2280:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4559              		.loc 1 2280 0
 4560 27bd 41C1E810 		shrl	$16, %r8d
 4561              	.LVL628:
2279:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4562              		.loc 1 2279 0
 4563 27c1 C1EA15   		shrl	$21, %edx
 4564              	.LVL629:
2282:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 4565              		.loc 1 2282 0
 4566 27c4 4183E01F 		andl	$31, %r8d
 4567 27c8 83E21F   		andl	$31, %edx
 4568 27cb 03049500 		addl	RF(,%rdx,4), %eax
 4568      000000
 4569              	.LVL630:
 4570 27d2 428B1485 		movl	RF(,%r8,4), %edx
 4570      00000000 
 4571 27da 88900000 		movb	%dl, VM_memory(%rax)
 4571      0000
2283:src/vm2.c     **** 				PC  =  nPC;
 4572              		.loc 1 2283 0
 4573 27e0 8B050000 		movl	nPC(%rip), %eax
 4573      0000
2284:src/vm2.c     **** 				nPC  += 4;
 4574              		.loc 1 2284 0
 4575 27e6 8D5004   		leal	4(%rax), %edx
2283:src/vm2.c     **** 				PC  =  nPC;
 4576              		.loc 1 2283 0
 4577 27e9 89050000 		movl	%eax, PC(%rip)
 4577      0000
GAS LISTING /tmp/cc15eBE3.s 			page 157


2284:src/vm2.c     **** 				nPC  += 4;
 4578              		.loc 1 2284 0
 4579 27ef 89150000 		movl	%edx, nPC(%rip)
 4579      0000
2287:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4580              		.loc 1 2287 0
 4581 27f5 8D5003   		leal	3(%rax), %edx
 4582 27f8 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4582      00000000 
 4583 2800 89C2     		movl	%eax, %edx
 4584 2802 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4584      000000
 4585 2809 C1E218   		sall	$24, %edx
 4586 280c 4109D0   		orl	%edx, %r8d
 4587 280f 8D5001   		leal	1(%rax), %edx
 4588 2812 83C002   		addl	$2, %eax
 4589 2815 0FB68000 		movzbl	VM_memory(%rax), %eax
 4589      000000
 4590 281c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4590      000000
 4591 2823 C1E008   		sall	$8, %eax
 4592 2826 C1E210   		sall	$16, %edx
 4593 2829 4109D0   		orl	%edx, %r8d
 4594 282c 4109C0   		orl	%eax, %r8d
 4595              	.LVL631:
2288:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4596              		.loc 1 2288 0
 4597 282f 4489C2   		movl	%r8d, %edx
2290:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4598              		.loc 1 2290 0
 4599 2832 4488C0   		movb	%r8b, %al
2288:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4600              		.loc 1 2288 0
 4601 2835 C1EA1A   		shrl	$26, %edx
 4602              	.LVL632:
2290:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4603              		.loc 1 2290 0
 4604 2838 83E03F   		andl	$63, %eax
 4605 283b 8D4A2B   		leal	43(%rdx), %ecx
 4606 283e 84D2     		testb	%dl, %dl
 4607 2840 0F45C1   		cmovne	%ecx, %eax
 4608              	.LVL633:
2296:src/vm2.c     **** 				goto *array[op];
 4609              		.loc 1 2296 0
 4610 2843 83E07F   		andl	$127, %eax
 4611              	.LVL634:
 4612 2846 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4612      00000000 
 4613 284e E9E4E0FF 		jmp	.L112
 4613      FF
 4614              	.L284:
 4615              	.LVL635:
2306:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4616              		.loc 1 2306 0
 4617 2853 4489C2   		movl	%r8d, %edx
2309:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 4618              		.loc 1 2309 0
GAS LISTING /tmp/cc15eBE3.s 			page 158


 4619 2856 410FBFC0 		movswl	%r8w, %eax
2307:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4620              		.loc 1 2307 0
 4621 285a 41C1E810 		shrl	$16, %r8d
 4622              	.LVL636:
2306:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4623              		.loc 1 2306 0
 4624 285e C1EA15   		shrl	$21, %edx
 4625              	.LVL637:
2309:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 4626              		.loc 1 2309 0
 4627 2861 4183E01F 		andl	$31, %r8d
 4628 2865 83E21F   		andl	$31, %edx
 4629 2868 03049500 		addl	RF(,%rdx,4), %eax
 4629      000000
 4630              	.LVL638:
 4631 286f 428B1485 		movl	RF(,%r8,4), %edx
 4631      00000000 
 4632 2877 0FB6F6   		movzbl	%dh, %esi
 4633 287a 89C1     		movl	%eax, %ecx
2310:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 4634              		.loc 1 2310 0
 4635 287c FFC0     		incl	%eax
2309:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 4636              		.loc 1 2309 0
 4637 287e 4088B100 		movb	%sil, VM_memory(%rcx)
 4637      000000
2310:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 4638              		.loc 1 2310 0
 4639 2885 88900000 		movb	%dl, VM_memory(%rax)
 4639      0000
2311:src/vm2.c     **** 				PC  =  nPC;
 4640              		.loc 1 2311 0
 4641 288b 8B050000 		movl	nPC(%rip), %eax
 4641      0000
2312:src/vm2.c     **** 				nPC  += 4;
 4642              		.loc 1 2312 0
 4643 2891 8D5004   		leal	4(%rax), %edx
2311:src/vm2.c     **** 				PC  =  nPC;
 4644              		.loc 1 2311 0
 4645 2894 89050000 		movl	%eax, PC(%rip)
 4645      0000
2312:src/vm2.c     **** 				nPC  += 4;
 4646              		.loc 1 2312 0
 4647 289a 89150000 		movl	%edx, nPC(%rip)
 4647      0000
2315:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4648              		.loc 1 2315 0
 4649 28a0 8D5003   		leal	3(%rax), %edx
 4650 28a3 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4650      00000000 
 4651 28ab 89C2     		movl	%eax, %edx
 4652 28ad 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4652      000000
 4653 28b4 C1E218   		sall	$24, %edx
 4654 28b7 4109D0   		orl	%edx, %r8d
 4655 28ba 8D5001   		leal	1(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 159


 4656 28bd 83C002   		addl	$2, %eax
 4657 28c0 0FB68000 		movzbl	VM_memory(%rax), %eax
 4657      000000
 4658 28c7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4658      000000
 4659 28ce C1E008   		sall	$8, %eax
 4660 28d1 C1E210   		sall	$16, %edx
 4661 28d4 4109D0   		orl	%edx, %r8d
 4662 28d7 4109C0   		orl	%eax, %r8d
 4663              	.LVL639:
2316:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4664              		.loc 1 2316 0
 4665 28da 4489C2   		movl	%r8d, %edx
2318:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4666              		.loc 1 2318 0
 4667 28dd 4488C0   		movb	%r8b, %al
2316:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4668              		.loc 1 2316 0
 4669 28e0 C1EA1A   		shrl	$26, %edx
 4670              	.LVL640:
2318:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4671              		.loc 1 2318 0
 4672 28e3 83E03F   		andl	$63, %eax
 4673 28e6 8D4A2B   		leal	43(%rdx), %ecx
 4674 28e9 84D2     		testb	%dl, %dl
 4675 28eb 0F45C1   		cmovne	%ecx, %eax
 4676              	.LVL641:
2324:src/vm2.c     **** 				goto *array[op];
 4677              		.loc 1 2324 0
 4678 28ee 83E07F   		andl	$127, %eax
 4679              	.LVL642:
 4680 28f1 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4680      00000000 
 4681 28f9 E939E0FF 		jmp	.L112
 4681      FF
 4682              	.L287:
 4683              	.LVL643:
2334:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4684              		.loc 1 2334 0
 4685 28fe 4489C2   		movl	%r8d, %edx
2337:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 4686              		.loc 1 2337 0
 4687 2901 410FBFC0 		movswl	%r8w, %eax
2335:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4688              		.loc 1 2335 0
 4689 2905 41C1E810 		shrl	$16, %r8d
 4690              	.LVL644:
2334:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4691              		.loc 1 2334 0
 4692 2909 C1EA15   		shrl	$21, %edx
 4693              	.LVL645:
2337:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 4694              		.loc 1 2337 0
 4695 290c 4183E01F 		andl	$31, %r8d
 4696 2910 83E21F   		andl	$31, %edx
 4697 2913 03049500 		addl	RF(,%rdx,4), %eax
 4697      000000
GAS LISTING /tmp/cc15eBE3.s 			page 160


 4698              	.LVL646:
 4699 291a 428B1485 		movl	RF(,%r8,4), %edx
 4699      00000000 
 4700 2922 89D6     		movl	%edx, %esi
 4701 2924 89C1     		movl	%eax, %ecx
 4702 2926 C1EE18   		shrl	$24, %esi
 4703 2929 4088B100 		movb	%sil, VM_memory(%rcx)
 4703      000000
2338:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 4704              		.loc 1 2338 0
 4705 2930 8D4801   		leal	1(%rax), %ecx
 4706 2933 89D6     		movl	%edx, %esi
 4707 2935 C1EE10   		shrl	$16, %esi
 4708 2938 4088B100 		movb	%sil, VM_memory(%rcx)
 4708      000000
2339:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 4709              		.loc 1 2339 0
 4710 293f 8D4802   		leal	2(%rax), %ecx
 4711 2942 0FB6F6   		movzbl	%dh, %esi
2340:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 4712              		.loc 1 2340 0
 4713 2945 83C003   		addl	$3, %eax
2339:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 4714              		.loc 1 2339 0
 4715 2948 4088B100 		movb	%sil, VM_memory(%rcx)
 4715      000000
2340:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 4716              		.loc 1 2340 0
 4717 294f 88900000 		movb	%dl, VM_memory(%rax)
 4717      0000
2341:src/vm2.c     **** 				PC  =  nPC;
 4718              		.loc 1 2341 0
 4719 2955 8B050000 		movl	nPC(%rip), %eax
 4719      0000
2342:src/vm2.c     **** 				nPC  += 4;
 4720              		.loc 1 2342 0
 4721 295b 8D5004   		leal	4(%rax), %edx
2341:src/vm2.c     **** 				PC  =  nPC;
 4722              		.loc 1 2341 0
 4723 295e 89050000 		movl	%eax, PC(%rip)
 4723      0000
2342:src/vm2.c     **** 				nPC  += 4;
 4724              		.loc 1 2342 0
 4725 2964 89150000 		movl	%edx, nPC(%rip)
 4725      0000
2345:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4726              		.loc 1 2345 0
 4727 296a 8D5003   		leal	3(%rax), %edx
 4728 296d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4728      00000000 
 4729 2975 89C2     		movl	%eax, %edx
 4730 2977 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4730      000000
 4731 297e C1E218   		sall	$24, %edx
 4732 2981 4109D0   		orl	%edx, %r8d
 4733 2984 8D5001   		leal	1(%rax), %edx
 4734 2987 83C002   		addl	$2, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 161


 4735 298a 0FB68000 		movzbl	VM_memory(%rax), %eax
 4735      000000
 4736 2991 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4736      000000
 4737 2998 C1E008   		sall	$8, %eax
 4738 299b C1E210   		sall	$16, %edx
 4739 299e 4109D0   		orl	%edx, %r8d
 4740 29a1 4109C0   		orl	%eax, %r8d
 4741              	.LVL647:
2346:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4742              		.loc 1 2346 0
 4743 29a4 4489C2   		movl	%r8d, %edx
2348:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4744              		.loc 1 2348 0
 4745 29a7 4488C0   		movb	%r8b, %al
2346:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4746              		.loc 1 2346 0
 4747 29aa C1EA1A   		shrl	$26, %edx
 4748              	.LVL648:
2348:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4749              		.loc 1 2348 0
 4750 29ad 83E03F   		andl	$63, %eax
 4751 29b0 8D4A2B   		leal	43(%rdx), %ecx
 4752 29b3 84D2     		testb	%dl, %dl
 4753 29b5 0F45C1   		cmovne	%ecx, %eax
 4754              	.LVL649:
2354:src/vm2.c     **** 				goto *array[op];
 4755              		.loc 1 2354 0
 4756 29b8 83E07F   		andl	$127, %eax
 4757              	.LVL650:
 4758 29bb 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4758      00000000 
 4759 29c3 E96FDFFF 		jmp	.L112
 4759      FF
 4760              	.L290:
2366:src/vm2.c     **** 				PC = nPC;
 4761              		.loc 1 2366 0
 4762 29c8 8B050000 		movl	nPC(%rip), %eax
 4762      0000
2367:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
 4763              		.loc 1 2367 0
 4764 29ce 4181E0FF 		andl	$67108863, %r8d
 4764      FFFF03
 4765              	.LVL651:
2368:src/vm2.c     **** 				nPC = address << 2;
 4766              		.loc 1 2368 0
 4767 29d5 41C1E002 		sall	$2, %r8d
 4768 29d9 44890500 		movl	%r8d, nPC(%rip)
 4768      000000
2372:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4769              		.loc 1 2372 0
 4770 29e0 8D5003   		leal	3(%rax), %edx
2366:src/vm2.c     **** 				PC = nPC;
 4771              		.loc 1 2366 0
 4772 29e3 89050000 		movl	%eax, PC(%rip)
 4772      0000
2372:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
GAS LISTING /tmp/cc15eBE3.s 			page 162


 4773              		.loc 1 2372 0
 4774 29e9 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4774      00000000 
 4775 29f1 89C2     		movl	%eax, %edx
 4776 29f3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4776      000000
 4777 29fa C1E218   		sall	$24, %edx
 4778 29fd 4109D0   		orl	%edx, %r8d
 4779 2a00 8D5001   		leal	1(%rax), %edx
 4780 2a03 83C002   		addl	$2, %eax
 4781 2a06 0FB68000 		movzbl	VM_memory(%rax), %eax
 4781      000000
 4782 2a0d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4782      000000
 4783 2a14 C1E008   		sall	$8, %eax
 4784 2a17 C1E210   		sall	$16, %edx
 4785 2a1a 4109D0   		orl	%edx, %r8d
 4786 2a1d 4109C0   		orl	%eax, %r8d
 4787              	.LVL652:
2373:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4788              		.loc 1 2373 0
 4789 2a20 4489C2   		movl	%r8d, %edx
2375:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4790              		.loc 1 2375 0
 4791 2a23 4488C0   		movb	%r8b, %al
2373:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4792              		.loc 1 2373 0
 4793 2a26 C1EA1A   		shrl	$26, %edx
 4794              	.LVL653:
2375:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4795              		.loc 1 2375 0
 4796 2a29 83E03F   		andl	$63, %eax
 4797 2a2c 8D4A2B   		leal	43(%rdx), %ecx
 4798 2a2f 84D2     		testb	%dl, %dl
 4799 2a31 0F45C1   		cmovne	%ecx, %eax
 4800              	.LVL654:
2381:src/vm2.c     **** 				goto *array[op];
 4801              		.loc 1 2381 0
 4802 2a34 83E07F   		andl	$127, %eax
 4803              	.LVL655:
 4804 2a37 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4804      00000000 
 4805 2a3f E9F3DEFF 		jmp	.L112
 4805      FF
 4806              	.L293:
2391:src/vm2.c     **** 				RF[31] = PC + 8;
 4807              		.loc 1 2391 0
 4808 2a44 8B050000 		movl	PC(%rip), %eax
 4808      0000
2393:src/vm2.c     **** 				address = (instr >> 0) & 0x3FFFFFF;
 4809              		.loc 1 2393 0
 4810 2a4a 4181E0FF 		andl	$67108863, %r8d
 4810      FFFF03
 4811              	.LVL656:
2394:src/vm2.c     **** 				nPC = address << 2;
 4812              		.loc 1 2394 0
 4813 2a51 41C1E002 		sall	$2, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 163


2391:src/vm2.c     **** 				RF[31] = PC + 8;
 4814              		.loc 1 2391 0
 4815 2a55 83C008   		addl	$8, %eax
 4816 2a58 89050000 		movl	%eax, RF+124(%rip)
 4816      0000
2392:src/vm2.c     **** 				PC = nPC;
 4817              		.loc 1 2392 0
 4818 2a5e 8B050000 		movl	nPC(%rip), %eax
 4818      0000
2394:src/vm2.c     **** 				nPC = address << 2;
 4819              		.loc 1 2394 0
 4820 2a64 44890500 		movl	%r8d, nPC(%rip)
 4820      000000
2398:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4821              		.loc 1 2398 0
 4822 2a6b 8D5003   		leal	3(%rax), %edx
2392:src/vm2.c     **** 				PC = nPC;
 4823              		.loc 1 2392 0
 4824 2a6e 89050000 		movl	%eax, PC(%rip)
 4824      0000
2398:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4825              		.loc 1 2398 0
 4826 2a74 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4826      00000000 
 4827 2a7c 89C2     		movl	%eax, %edx
 4828 2a7e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4828      000000
 4829 2a85 C1E218   		sall	$24, %edx
 4830 2a88 4109D0   		orl	%edx, %r8d
 4831 2a8b 8D5001   		leal	1(%rax), %edx
 4832 2a8e 83C002   		addl	$2, %eax
 4833 2a91 0FB68000 		movzbl	VM_memory(%rax), %eax
 4833      000000
 4834 2a98 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4834      000000
 4835 2a9f C1E008   		sall	$8, %eax
 4836 2aa2 C1E210   		sall	$16, %edx
 4837 2aa5 4109D0   		orl	%edx, %r8d
 4838 2aa8 4109C0   		orl	%eax, %r8d
 4839              	.LVL657:
2399:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4840              		.loc 1 2399 0
 4841 2aab 4489C2   		movl	%r8d, %edx
2401:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4842              		.loc 1 2401 0
 4843 2aae 4488C0   		movb	%r8b, %al
2399:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4844              		.loc 1 2399 0
 4845 2ab1 C1EA1A   		shrl	$26, %edx
 4846              	.LVL658:
2401:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4847              		.loc 1 2401 0
 4848 2ab4 83E03F   		andl	$63, %eax
 4849 2ab7 8D4A2B   		leal	43(%rdx), %ecx
 4850 2aba 84D2     		testb	%dl, %dl
 4851 2abc 0F45C1   		cmovne	%ecx, %eax
 4852              	.LVL659:
GAS LISTING /tmp/cc15eBE3.s 			page 164


2407:src/vm2.c     **** 				goto *array[op];
 4853              		.loc 1 2407 0
 4854 2abf 83E07F   		andl	$127, %eax
 4855              	.LVL660:
 4856 2ac2 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4856      00000000 
 4857 2aca E968DEFF 		jmp	.L112
 4857      FF
 4858              	.L296:
 4859              	.LVL661:
 4860 2acf 410FB6F8 		movzbl	%r8b, %edi
2418:src/vm2.c     **** 				syscall((uint8_t)(address&0xFF));
 4861              		.loc 1 2418 0
 4862 2ad3 E8000000 		call	syscall
 4862      00
 4863              	.LVL662:
2419:src/vm2.c     **** 				PC  =  nPC;
 4864              		.loc 1 2419 0
 4865 2ad8 8B050000 		movl	nPC(%rip), %eax
 4865      0000
2420:src/vm2.c     **** 				nPC  += 4;
 4866              		.loc 1 2420 0
 4867 2ade 8D5004   		leal	4(%rax), %edx
2419:src/vm2.c     **** 				PC  =  nPC;
 4868              		.loc 1 2419 0
 4869 2ae1 89050000 		movl	%eax, PC(%rip)
 4869      0000
2420:src/vm2.c     **** 				nPC  += 4;
 4870              		.loc 1 2420 0
 4871 2ae7 89150000 		movl	%edx, nPC(%rip)
 4871      0000
2423:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4872              		.loc 1 2423 0
 4873 2aed 8D5003   		leal	3(%rax), %edx
 4874 2af0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4874      00000000 
 4875 2af8 89C2     		movl	%eax, %edx
 4876 2afa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4876      000000
 4877 2b01 C1E218   		sall	$24, %edx
 4878 2b04 4109D0   		orl	%edx, %r8d
 4879 2b07 8D5001   		leal	1(%rax), %edx
 4880 2b0a 83C002   		addl	$2, %eax
 4881 2b0d 0FB68000 		movzbl	VM_memory(%rax), %eax
 4881      000000
 4882 2b14 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4882      000000
 4883 2b1b C1E008   		sall	$8, %eax
 4884 2b1e C1E210   		sall	$16, %edx
 4885 2b21 4109D0   		orl	%edx, %r8d
 4886 2b24 4109C0   		orl	%eax, %r8d
 4887              	.LVL663:
2424:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4888              		.loc 1 2424 0
 4889 2b27 4489C2   		movl	%r8d, %edx
2426:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4890              		.loc 1 2426 0
GAS LISTING /tmp/cc15eBE3.s 			page 165


 4891 2b2a 4488C0   		movb	%r8b, %al
2424:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4892              		.loc 1 2424 0
 4893 2b2d C1EA1A   		shrl	$26, %edx
 4894              	.LVL664:
2426:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4895              		.loc 1 2426 0
 4896 2b30 83E03F   		andl	$63, %eax
 4897 2b33 8D4A2B   		leal	43(%rdx), %ecx
 4898 2b36 84D2     		testb	%dl, %dl
 4899 2b38 0F45C1   		cmovne	%ecx, %eax
 4900              	.LVL665:
2432:src/vm2.c     **** 				goto *array[op];
 4901              		.loc 1 2432 0
 4902 2b3b 83E07F   		andl	$127, %eax
 4903              	.LVL666:
 4904 2b3e 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4904      00000000 
 4905 2b46 E9ECDDFF 		jmp	.L112
 4905      FF
 4906              	.L299:
 4907              	.LVL667:
2442:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4908              		.loc 1 2442 0
 4909 2b4b 4489C2   		movl	%r8d, %edx
2445:src/vm2.c     **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 4910              		.loc 1 2445 0
 4911 2b4e 410FBFC0 		movswl	%r8w, %eax
2443:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4912              		.loc 1 2443 0
 4913 2b52 41C1E810 		shrl	$16, %r8d
 4914              	.LVL668:
2442:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4915              		.loc 1 2442 0
 4916 2b56 C1EA15   		shrl	$21, %edx
 4917              	.LVL669:
2445:src/vm2.c     **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 4918              		.loc 1 2445 0
 4919 2b59 4183E01F 		andl	$31, %r8d
 4920 2b5d 83E21F   		andl	$31, %edx
 4921 2b60 03049500 		addl	RF(,%rdx,4), %eax
 4921      000000
 4922              	.LVL670:
 4923 2b67 428B1485 		movl	RF(,%r8,4), %edx
 4923      00000000 
 4924 2b6f 89D6     		movl	%edx, %esi
2446:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 4925              		.loc 1 2446 0
 4926 2b71 C1EA10   		shrl	$16, %edx
2445:src/vm2.c     **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 4927              		.loc 1 2445 0
 4928 2b74 89C1     		movl	%eax, %ecx
 4929 2b76 C1EE18   		shrl	$24, %esi
2446:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 4930              		.loc 1 2446 0
 4931 2b79 FFC0     		incl	%eax
2445:src/vm2.c     **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
GAS LISTING /tmp/cc15eBE3.s 			page 166


 4932              		.loc 1 2445 0
 4933 2b7b 4088B100 		movb	%sil, VM_memory(%rcx)
 4933      000000
2446:src/vm2.c     **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 4934              		.loc 1 2446 0
 4935 2b82 88900000 		movb	%dl, VM_memory(%rax)
 4935      0000
2447:src/vm2.c     **** 				PC  =  nPC;
 4936              		.loc 1 2447 0
 4937 2b88 8B050000 		movl	nPC(%rip), %eax
 4937      0000
2448:src/vm2.c     **** 				nPC  += 4;
 4938              		.loc 1 2448 0
 4939 2b8e 8D5004   		leal	4(%rax), %edx
2447:src/vm2.c     **** 				PC  =  nPC;
 4940              		.loc 1 2447 0
 4941 2b91 89050000 		movl	%eax, PC(%rip)
 4941      0000
2448:src/vm2.c     **** 				nPC  += 4;
 4942              		.loc 1 2448 0
 4943 2b97 89150000 		movl	%edx, nPC(%rip)
 4943      0000
2451:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 4944              		.loc 1 2451 0
 4945 2b9d 8D5003   		leal	3(%rax), %edx
 4946 2ba0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 4946      00000000 
 4947 2ba8 89C2     		movl	%eax, %edx
 4948 2baa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4948      000000
 4949 2bb1 C1E218   		sall	$24, %edx
 4950 2bb4 4109D0   		orl	%edx, %r8d
 4951 2bb7 8D5001   		leal	1(%rax), %edx
 4952 2bba 83C002   		addl	$2, %eax
 4953 2bbd 0FB68000 		movzbl	VM_memory(%rax), %eax
 4953      000000
 4954 2bc4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 4954      000000
 4955 2bcb C1E008   		sall	$8, %eax
 4956 2bce C1E210   		sall	$16, %edx
 4957 2bd1 4109D0   		orl	%edx, %r8d
 4958 2bd4 4109C0   		orl	%eax, %r8d
 4959              	.LVL671:
2452:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4960              		.loc 1 2452 0
 4961 2bd7 4489C2   		movl	%r8d, %edx
2454:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4962              		.loc 1 2454 0
 4963 2bda 4488C0   		movb	%r8b, %al
2452:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 4964              		.loc 1 2452 0
 4965 2bdd C1EA1A   		shrl	$26, %edx
 4966              	.LVL672:
2454:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 4967              		.loc 1 2454 0
 4968 2be0 83E03F   		andl	$63, %eax
 4969 2be3 8D4A2B   		leal	43(%rdx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 167


 4970 2be6 84D2     		testb	%dl, %dl
 4971 2be8 0F45C1   		cmovne	%ecx, %eax
 4972              	.LVL673:
2460:src/vm2.c     **** 				goto *array[op];
 4973              		.loc 1 2460 0
 4974 2beb 83E07F   		andl	$127, %eax
 4975              	.LVL674:
 4976 2bee 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 4976      00000000 
 4977 2bf6 E93CDDFF 		jmp	.L112
 4977      FF
 4978              	.L302:
 4979              	.LVL675:
2470:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4980              		.loc 1 2470 0
 4981 2bfb 4489C2   		movl	%r8d, %edx
2473:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 4982              		.loc 1 2473 0
 4983 2bfe 410FBFC0 		movswl	%r8w, %eax
2471:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 4984              		.loc 1 2471 0
 4985 2c02 41C1E810 		shrl	$16, %r8d
 4986              	.LVL676:
2470:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 4987              		.loc 1 2470 0
 4988 2c06 C1EA15   		shrl	$21, %edx
 4989              	.LVL677:
2473:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 4990              		.loc 1 2473 0
 4991 2c09 4183E01F 		andl	$31, %r8d
 4992 2c0d 83E21F   		andl	$31, %edx
 4993 2c10 428B0C85 		movl	RF(,%r8,4), %ecx
 4993      00000000 
 4994 2c18 03049500 		addl	RF(,%rdx,4), %eax
 4994      000000
 4995              	.LVL678:
 4996 2c1f 89C2     		movl	%eax, %edx
2474:src/vm2.c     **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 4997              		.loc 1 2474 0
 4998 2c21 FFC8     		decl	%eax
2473:src/vm2.c     **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 4999              		.loc 1 2473 0
 5000 2c23 888A0000 		movb	%cl, VM_memory(%rdx)
 5000      0000
2474:src/vm2.c     **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 5001              		.loc 1 2474 0
 5002 2c29 C6800000 		movb	$0, VM_memory(%rax)
 5002      000000
2475:src/vm2.c     **** 				PC  =  nPC;
 5003              		.loc 1 2475 0
 5004 2c30 8B050000 		movl	nPC(%rip), %eax
 5004      0000
2476:src/vm2.c     **** 				nPC  += 4;
 5005              		.loc 1 2476 0
 5006 2c36 8D5004   		leal	4(%rax), %edx
2475:src/vm2.c     **** 				PC  =  nPC;
 5007              		.loc 1 2475 0
GAS LISTING /tmp/cc15eBE3.s 			page 168


 5008 2c39 89050000 		movl	%eax, PC(%rip)
 5008      0000
2476:src/vm2.c     **** 				nPC  += 4;
 5009              		.loc 1 2476 0
 5010 2c3f 89150000 		movl	%edx, nPC(%rip)
 5010      0000
2479:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 5011              		.loc 1 2479 0
 5012 2c45 8D5003   		leal	3(%rax), %edx
 5013 2c48 440FB682 		movzbl	VM_memory(%rdx), %r8d
 5013      00000000 
 5014 2c50 89C2     		movl	%eax, %edx
 5015 2c52 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5015      000000
 5016 2c59 C1E218   		sall	$24, %edx
 5017 2c5c 4109D0   		orl	%edx, %r8d
 5018 2c5f 8D5001   		leal	1(%rax), %edx
 5019 2c62 83C002   		addl	$2, %eax
 5020 2c65 0FB68000 		movzbl	VM_memory(%rax), %eax
 5020      000000
 5021 2c6c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5021      000000
 5022 2c73 C1E008   		sall	$8, %eax
 5023 2c76 C1E210   		sall	$16, %edx
 5024 2c79 4109D0   		orl	%edx, %r8d
 5025 2c7c 4109C0   		orl	%eax, %r8d
 5026              	.LVL679:
2480:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5027              		.loc 1 2480 0
 5028 2c7f 4489C2   		movl	%r8d, %edx
2482:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5029              		.loc 1 2482 0
 5030 2c82 4488C0   		movb	%r8b, %al
2480:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5031              		.loc 1 2480 0
 5032 2c85 C1EA1A   		shrl	$26, %edx
 5033              	.LVL680:
2482:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5034              		.loc 1 2482 0
 5035 2c88 83E03F   		andl	$63, %eax
 5036 2c8b 8D4A2B   		leal	43(%rdx), %ecx
 5037 2c8e 84D2     		testb	%dl, %dl
 5038 2c90 0F45C1   		cmovne	%ecx, %eax
 5039              	.LVL681:
2488:src/vm2.c     **** 				goto *array[op];
 5040              		.loc 1 2488 0
 5041 2c93 83E07F   		andl	$127, %eax
 5042              	.LVL682:
 5043 2c96 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 5043      00000000 
 5044 2c9e E994DCFF 		jmp	.L112
 5044      FF
 5045              	.L305:
 5046              	.LVL683:
2498:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 5047              		.loc 1 2498 0
 5048 2ca3 4489C0   		movl	%r8d, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 169


2501:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
 5049              		.loc 1 2501 0
 5050 2ca6 410FBFD0 		movswl	%r8w, %edx
2499:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 5051              		.loc 1 2499 0
 5052 2caa 41C1E810 		shrl	$16, %r8d
 5053              	.LVL684:
2498:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 5054              		.loc 1 2498 0
 5055 2cae C1E815   		shrl	$21, %eax
 5056              	.LVL685:
2501:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
 5057              		.loc 1 2501 0
 5058 2cb1 4183E01F 		andl	$31, %r8d
 5059 2cb5 83E01F   		andl	$31, %eax
 5060 2cb8 03148500 		addl	RF(,%rax,4), %edx
 5060      000000
 5061              	.LVL686:
 5062 2cbf 8D4201   		leal	1(%rdx), %eax
 5063 2cc2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5063      000000
 5064 2cc9 0FB68000 		movzbl	VM_memory(%rax), %eax
 5064      000000
 5065 2cd0 C1E218   		sall	$24, %edx
 5066 2cd3 C1E010   		sall	$16, %eax
 5067 2cd6 09D0     		orl	%edx, %eax
 5068 2cd8 42890485 		movl	%eax, RF(,%r8,4)
 5068      00000000 
2502:src/vm2.c     **** 				PC  =  nPC;
 5069              		.loc 1 2502 0
 5070 2ce0 8B050000 		movl	nPC(%rip), %eax
 5070      0000
2503:src/vm2.c     **** 				nPC  += 4;
 5071              		.loc 1 2503 0
 5072 2ce6 8D5004   		leal	4(%rax), %edx
2502:src/vm2.c     **** 				PC  =  nPC;
 5073              		.loc 1 2502 0
 5074 2ce9 89050000 		movl	%eax, PC(%rip)
 5074      0000
2503:src/vm2.c     **** 				nPC  += 4;
 5075              		.loc 1 2503 0
 5076 2cef 89150000 		movl	%edx, nPC(%rip)
 5076      0000
2506:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 5077              		.loc 1 2506 0
 5078 2cf5 8D5003   		leal	3(%rax), %edx
 5079 2cf8 440FB682 		movzbl	VM_memory(%rdx), %r8d
 5079      00000000 
 5080 2d00 89C2     		movl	%eax, %edx
 5081 2d02 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5081      000000
 5082 2d09 C1E218   		sall	$24, %edx
 5083 2d0c 4109D0   		orl	%edx, %r8d
 5084 2d0f 8D5001   		leal	1(%rax), %edx
 5085 2d12 83C002   		addl	$2, %eax
 5086 2d15 0FB68000 		movzbl	VM_memory(%rax), %eax
 5086      000000
GAS LISTING /tmp/cc15eBE3.s 			page 170


 5087 2d1c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5087      000000
 5088 2d23 C1E008   		sall	$8, %eax
 5089 2d26 C1E210   		sall	$16, %edx
 5090 2d29 4109D0   		orl	%edx, %r8d
 5091 2d2c 4109C0   		orl	%eax, %r8d
 5092              	.LVL687:
2507:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5093              		.loc 1 2507 0
 5094 2d2f 4489C2   		movl	%r8d, %edx
2509:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5095              		.loc 1 2509 0
 5096 2d32 4488C0   		movb	%r8b, %al
2507:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5097              		.loc 1 2507 0
 5098 2d35 C1EA1A   		shrl	$26, %edx
 5099              	.LVL688:
2509:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5100              		.loc 1 2509 0
 5101 2d38 83E03F   		andl	$63, %eax
 5102 2d3b 8D4A2B   		leal	43(%rdx), %ecx
 5103 2d3e 84D2     		testb	%dl, %dl
 5104 2d40 0F45C1   		cmovne	%ecx, %eax
 5105              	.LVL689:
2515:src/vm2.c     **** 				goto *array[op];
 5106              		.loc 1 2515 0
 5107 2d43 83E07F   		andl	$127, %eax
 5108              	.LVL690:
 5109 2d46 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 5109      00000000 
 5110 2d4e E9E4DBFF 		jmp	.L112
 5110      FF
 5111              	.L308:
 5112              	.LVL691:
2525:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 5113              		.loc 1 2525 0
 5114 2d53 4489C0   		movl	%r8d, %eax
2528:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
 5115              		.loc 1 2528 0
 5116 2d56 410FBFD0 		movswl	%r8w, %edx
2526:src/vm2.c     **** 				rt = (instr >> 16) & 0x1F;
 5117              		.loc 1 2526 0
 5118 2d5a 41C1E810 		shrl	$16, %r8d
 5119              	.LVL692:
2525:src/vm2.c     **** 				rs = (instr >> 21) & 0x1F;
 5120              		.loc 1 2525 0
 5121 2d5e C1E815   		shrl	$21, %eax
 5122              	.LVL693:
2528:src/vm2.c     **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
 5123              		.loc 1 2528 0
 5124 2d61 4183E01F 		andl	$31, %r8d
 5125 2d65 83E01F   		andl	$31, %eax
 5126 2d68 03148500 		addl	RF(,%rax,4), %edx
 5126      000000
 5127              	.LVL694:
 5128 2d6f 8D42FF   		leal	-1(%rdx), %eax
 5129 2d72 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 171


 5129      000000
 5130 2d79 0FB68000 		movzbl	VM_memory(%rax), %eax
 5130      000000
 5131 2d80 C1E008   		sall	$8, %eax
 5132 2d83 09D0     		orl	%edx, %eax
 5133 2d85 42890485 		movl	%eax, RF(,%r8,4)
 5133      00000000 
2529:src/vm2.c     **** 				PC  =  nPC;
 5134              		.loc 1 2529 0
 5135 2d8d 8B050000 		movl	nPC(%rip), %eax
 5135      0000
2530:src/vm2.c     **** 				nPC  += 4;
 5136              		.loc 1 2530 0
 5137 2d93 8D5004   		leal	4(%rax), %edx
2529:src/vm2.c     **** 				PC  =  nPC;
 5138              		.loc 1 2529 0
 5139 2d96 89050000 		movl	%eax, PC(%rip)
 5139      0000
2530:src/vm2.c     **** 				nPC  += 4;
 5140              		.loc 1 2530 0
 5141 2d9c 89150000 		movl	%edx, nPC(%rip)
 5141      0000
2533:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 5142              		.loc 1 2533 0
 5143 2da2 8D5003   		leal	3(%rax), %edx
 5144 2da5 440FB682 		movzbl	VM_memory(%rdx), %r8d
 5144      00000000 
 5145 2dad 89C2     		movl	%eax, %edx
 5146 2daf 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5146      000000
 5147 2db6 C1E218   		sall	$24, %edx
 5148 2db9 4109D0   		orl	%edx, %r8d
 5149 2dbc 8D5001   		leal	1(%rax), %edx
 5150 2dbf 83C002   		addl	$2, %eax
 5151 2dc2 0FB68000 		movzbl	VM_memory(%rax), %eax
 5151      000000
 5152 2dc9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5152      000000
 5153 2dd0 C1E008   		sall	$8, %eax
 5154 2dd3 C1E210   		sall	$16, %edx
 5155 2dd6 4109D0   		orl	%edx, %r8d
 5156 2dd9 4109C0   		orl	%eax, %r8d
 5157              	.LVL695:
2534:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5158              		.loc 1 2534 0
 5159 2ddc 4489C2   		movl	%r8d, %edx
2536:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5160              		.loc 1 2536 0
 5161 2ddf 4488C0   		movb	%r8b, %al
2534:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5162              		.loc 1 2534 0
 5163 2de2 C1EA1A   		shrl	$26, %edx
 5164              	.LVL696:
2536:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5165              		.loc 1 2536 0
 5166 2de5 83E03F   		andl	$63, %eax
 5167 2de8 8D4A2B   		leal	43(%rdx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 172


 5168 2deb 84D2     		testb	%dl, %dl
 5169 2ded 0F45C1   		cmovne	%ecx, %eax
 5170              	.LVL697:
2542:src/vm2.c     **** 				goto *array[op];
 5171              		.loc 1 2542 0
 5172 2df0 83E07F   		andl	$127, %eax
 5173              	.LVL698:
 5174 2df3 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 5174      00000000 
 5175 2dfb E937DBFF 		jmp	.L112
 5175      FF
 5176              	.L311:
2554:src/vm2.c     **** 				PC  =  nPC;
 5177              		.loc 1 2554 0
 5178 2e00 8B050000 		movl	nPC(%rip), %eax
 5178      0000
2555:src/vm2.c     **** 				nPC  += 4;
 5179              		.loc 1 2555 0
 5180 2e06 83050000 		addl	$4, nPC(%rip)
 5180      000004
2557:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 5181              		.loc 1 2557 0
 5182 2e0d 8D5003   		leal	3(%rax), %edx
2554:src/vm2.c     **** 				PC  =  nPC;
 5183              		.loc 1 2554 0
 5184 2e10 89050000 		movl	%eax, PC(%rip)
 5184      0000
2557:src/vm2.c     **** 				instr = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memo
 5185              		.loc 1 2557 0
 5186 2e16 440FB682 		movzbl	VM_memory(%rdx), %r8d
 5186      00000000 
 5187              	.LVL699:
 5188 2e1e 89C2     		movl	%eax, %edx
 5189 2e20 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5189      000000
 5190 2e27 C1E218   		sall	$24, %edx
 5191 2e2a 4109D0   		orl	%edx, %r8d
 5192 2e2d 8D5001   		leal	1(%rax), %edx
 5193 2e30 83C002   		addl	$2, %eax
 5194 2e33 0FB68000 		movzbl	VM_memory(%rax), %eax
 5194      000000
 5195 2e3a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 5195      000000
 5196 2e41 C1E008   		sall	$8, %eax
 5197 2e44 C1E210   		sall	$16, %edx
 5198 2e47 4109D0   		orl	%edx, %r8d
 5199 2e4a 4109C0   		orl	%eax, %r8d
 5200              	.LVL700:
2558:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5201              		.loc 1 2558 0
 5202 2e4d 4489C2   		movl	%r8d, %edx
2560:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5203              		.loc 1 2560 0
 5204 2e50 4488C0   		movb	%r8b, %al
2558:src/vm2.c     **** 				op = (instr >> 26) & 0x3F;
 5205              		.loc 1 2558 0
 5206 2e53 C1EA1A   		shrl	$26, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 173


 5207              	.LVL701:
2560:src/vm2.c     **** 				  funct = (instr >> 0) & 0x3F;
 5208              		.loc 1 2560 0
 5209 2e56 83E03F   		andl	$63, %eax
 5210 2e59 8D4A2B   		leal	43(%rdx), %ecx
 5211 2e5c 84D2     		testb	%dl, %dl
 5212 2e5e 0F45C1   		cmovne	%ecx, %eax
 5213              	.LVL702:
2566:src/vm2.c     **** 				goto *array[op];
 5214              		.loc 1 2566 0
 5215 2e61 83E07F   		andl	$127, %eax
 5216              	.LVL703:
 5217 2e64 488B0CC5 		movq	array.2280(,%rax,8), %rcx
 5217      00000000 
 5218 2e6c E9C6DAFF 		jmp	.L112
 5218      FF
 5219              	.LVL704:
 5220              	.L317:
 5221              		.loc 1 2578 0
 5222 2e71 58       		popq	%rax
 5223              		.cfi_def_cfa_offset 40
 5224 2e72 5B       		popq	%rbx
 5225              		.cfi_def_cfa_offset 32
 5226              	.LVL705:
 5227 2e73 5D       		popq	%rbp
 5228              		.cfi_def_cfa_offset 24
 5229              	.LVL706:
 5230 2e74 415C     		popq	%r12
 5231              		.cfi_def_cfa_offset 16
 5232 2e76 415D     		popq	%r13
 5233              		.cfi_def_cfa_offset 8
 5234              	.LVL707:
 5235 2e78 C3       		ret
 5236              		.cfi_endproc
 5237              	.LFE12:
 5239              		.section	.rodata
 5240 02d8 00000000 		.align 16
 5240      00000000 
 5243              	array.2280:
 5244 02e0 00000000 		.quad	.L149
 5244      00000000 
 5245 02e8 00000000 		.quad	.L311
 5245      00000000 
 5246 02f0 00000000 		.quad	.L163
 5246      00000000 
 5247 02f8 00000000 		.quad	.L155
 5247      00000000 
 5248 0300 00000000 		.quad	.L152
 5248      00000000 
 5249 0308 00000000 		.quad	.L311
 5249      00000000 
 5250 0310 00000000 		.quad	.L166
 5250      00000000 
 5251 0318 00000000 		.quad	.L160
 5251      00000000 
 5252 0320 00000000 		.quad	.L187
 5252      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 174


 5253 0328 00000000 		.quad	.L184
 5253      00000000 
 5254 0330 00000000 		.quad	.L118
 5254      00000000 
 5255 0338 00000000 		.quad	.L113
 5255      00000000 
 5256 0340 00000000 		.quad	.L202
 5256      00000000 
 5257 0348 00000000 		.quad	.L311
 5257      00000000 
 5258 0350 00000000 		.quad	.L311
 5258      00000000 
 5259 0358 00000000 		.quad	.L311
 5259      00000000 
 5260 0360 00000000 		.quad	.L190
 5260      00000000 
 5261 0368 00000000 		.quad	.L196
 5261      00000000 
 5262 0370 00000000 		.quad	.L193
 5262      00000000 
 5263 0378 00000000 		.quad	.L199
 5263      00000000 
 5264 0380 00000000 		.quad	.L311
 5264      00000000 
 5265 0388 00000000 		.quad	.L311
 5265      00000000 
 5266 0390 00000000 		.quad	.L311
 5266      00000000 
 5267 0398 00000000 		.quad	.L311
 5267      00000000 
 5268 03a0 00000000 		.quad	.L137
 5268      00000000 
 5269 03a8 00000000 		.quad	.L140
 5269      00000000 
 5270 03b0 00000000 		.quad	.L131
 5270      00000000 
 5271 03b8 00000000 		.quad	.L134
 5271      00000000 
 5272 03c0 00000000 		.quad	.L311
 5272      00000000 
 5273 03c8 00000000 		.quad	.L311
 5273      00000000 
 5274 03d0 00000000 		.quad	.L311
 5274      00000000 
 5275 03d8 00000000 		.quad	.L311
 5275      00000000 
 5276 03e0 00000000 		.quad	.L122
 5276      00000000 
 5277 03e8 00000000 		.quad	.L125
 5277      00000000 
 5278 03f0 00000000 		.quad	.L169
 5278      00000000 
 5279 03f8 00000000 		.quad	.L172
 5279      00000000 
 5280 0400 00000000 		.quad	.L128
 5280      00000000 
 5281 0408 00000000 		.quad	.L146
GAS LISTING /tmp/cc15eBE3.s 			page 175


 5281      00000000 
 5282 0410 00000000 		.quad	.L175
 5282      00000000 
 5283 0418 00000000 		.quad	.L143
 5283      00000000 
 5284 0420 00000000 		.quad	.L311
 5284      00000000 
 5285 0428 00000000 		.quad	.L311
 5285      00000000 
 5286 0430 00000000 		.quad	.L178
 5286      00000000 
 5287 0438 00000000 		.quad	.L181
 5287      00000000 
 5288 0440 00000000 		.quad	.L238
 5288      00000000 
 5289 0448 00000000 		.quad	.L290
 5289      00000000 
 5290 0450 00000000 		.quad	.L293
 5290      00000000 
 5291 0458 00000000 		.quad	.L246
 5291      00000000 
 5292 0460 00000000 		.quad	.L261
 5292      00000000 
 5293 0468 00000000 		.quad	.L256
 5293      00000000 
 5294 0470 00000000 		.quad	.L251
 5294      00000000 
 5295 0478 00000000 		.quad	.L208
 5295      00000000 
 5296 0480 00000000 		.quad	.L211
 5296      00000000 
 5297 0488 00000000 		.quad	.L232
 5297      00000000 
 5298 0490 00000000 		.quad	.L235
 5298      00000000 
 5299 0498 00000000 		.quad	.L214
 5299      00000000 
 5300 04a0 00000000 		.quad	.L217
 5300      00000000 
 5301 04a8 00000000 		.quad	.L220
 5301      00000000 
 5302 04b0 00000000 		.quad	.L223
 5302      00000000 
 5303 04b8 00000000 		.quad	.L311
 5303      00000000 
 5304 04c0 00000000 		.quad	.L311
 5304      00000000 
 5305 04c8 00000000 		.quad	.L311
 5305      00000000 
 5306 04d0 00000000 		.quad	.L311
 5306      00000000 
 5307 04d8 00000000 		.quad	.L311
 5307      00000000 
 5308 04e0 00000000 		.quad	.L311
 5308      00000000 
 5309 04e8 00000000 		.quad	.L311
 5309      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 176


 5310 04f0 00000000 		.quad	.L311
 5310      00000000 
 5311 04f8 00000000 		.quad	.L229
 5311      00000000 
 5312 0500 00000000 		.quad	.L226
 5312      00000000 
 5313 0508 00000000 		.quad	.L296
 5313      00000000 
 5314 0510 00000000 		.quad	.L311
 5314      00000000 
 5315 0518 00000000 		.quad	.L311
 5315      00000000 
 5316 0520 00000000 		.quad	.L311
 5316      00000000 
 5317 0528 00000000 		.quad	.L311
 5317      00000000 
 5318 0530 00000000 		.quad	.L311
 5318      00000000 
 5319 0538 00000000 		.quad	.L266
 5319      00000000 
 5320 0540 00000000 		.quad	.L272
 5320      00000000 
 5321 0548 00000000 		.quad	.L305
 5321      00000000 
 5322 0550 00000000 		.quad	.L278
 5322      00000000 
 5323 0558 00000000 		.quad	.L269
 5323      00000000 
 5324 0560 00000000 		.quad	.L275
 5324      00000000 
 5325 0568 00000000 		.quad	.L308
 5325      00000000 
 5326 0570 00000000 		.quad	.L311
 5326      00000000 
 5327 0578 00000000 		.quad	.L281
 5327      00000000 
 5328 0580 00000000 		.quad	.L284
 5328      00000000 
 5329 0588 00000000 		.quad	.L299
 5329      00000000 
 5330 0590 00000000 		.quad	.L287
 5330      00000000 
 5331 0598 00000000 		.quad	.L311
 5331      00000000 
 5332 05a0 00000000 		.quad	.L311
 5332      00000000 
 5333 05a8 00000000 		.quad	.L302
 5333      00000000 
 5334 05b0 00000000 		.quad	.L311
 5334      00000000 
 5335 05b8 00000000 		.quad	.L311
 5335      00000000 
 5336 05c0 00000000 		.quad	.L311
 5336      00000000 
 5337 05c8 00000000 		.quad	.L311
 5337      00000000 
 5338 05d0 00000000 		.quad	.L311
GAS LISTING /tmp/cc15eBE3.s 			page 177


 5338      00000000 
 5339 05d8 00000000 		.quad	.L311
 5339      00000000 
 5340 05e0 00000000 		.quad	.L311
 5340      00000000 
 5341 05e8 00000000 		.quad	.L311
 5341      00000000 
 5342 05f0 00000000 		.quad	.L311
 5342      00000000 
 5343 05f8 00000000 		.quad	.L311
 5343      00000000 
 5344 0600 00000000 		.quad	.L311
 5344      00000000 
 5345 0608 00000000 		.quad	.L311
 5345      00000000 
 5346 0610 00000000 		.quad	.L311
 5346      00000000 
 5347 0618 00000000 		.quad	.L311
 5347      00000000 
 5348 0620 00000000 		.quad	.L311
 5348      00000000 
 5349 0628 00000000 		.quad	.L311
 5349      00000000 
 5350 0630 00000000 		.quad	.L311
 5350      00000000 
 5351 0638 00000000 		.quad	.L311
 5351      00000000 
 5352 0640 00000000 		.quad	.L311
 5352      00000000 
 5353 0648 00000000 		.quad	.L311
 5353      00000000 
 5354              		.text
 5355              	.Letext0:
 5356              		.file 3 "/usr/include/stdint.h"
 5357              		.file 4 "src/syscall.h"
GAS LISTING /tmp/cc15eBE3.s 			page 178


DEFINED SYMBOLS
                            *ABS*:0000000000000000 vm2.c
     /tmp/cc15eBE3.s:10     .text:0000000000000000 vm_cpu_2
     /tmp/cc15eBE3.s:1311   .text:00000000000008a8 vm_cpu_2_indirect
     /tmp/cc15eBE3.s:5243   .rodata:00000000000002e0 array.2280

UNDEFINED SYMBOLS
PC
nPC
RF
VM_memory
syscall
__printf_chk
print_memory
print_registers
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"vm3.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata
   5              		.align 16
   6              	.LC0:
   7 0000 00000000 		.quad	.L1
   7      00000000 
   8 0008 00000000 		.quad	0
   8      00000000 
   9 0010 00000000 		.quad	.L1
   9      00000000 
  10 0018 00000000 		.quad	0
  10      00000000 
  11 0020 00000000 		.quad	.L2
  11      00000000 
  12 0028 00000000 		.quad	0
  12      00000000 
  13 0030 00000000 		.quad	.L1
  13      00000000 
  14 0038 00000000 		.quad	0
  14      00000000 
  15 0040 00000000 		.quad	.L1
  15      00000000 
  16 0048 00000000 		.quad	0
  16      00000000 
  17 0050 00000000 		.quad	.L1
  17      00000000 
  18 0058 00000000 		.quad	0
  18      00000000 
  19 0060 00000000 		.quad	.L1
  19      00000000 
  20 0068 00000000 		.quad	0
  20      00000000 
  21 0070 00000000 		.quad	.L1
  21      00000000 
  22 0078 00000000 		.quad	0
  22      00000000 
  23 0080 00000000 		.quad	.L1
  23      00000000 
  24 0088 00000000 		.quad	0
  24      00000000 
  25 0090 00000000 		.quad	.L1
  25      00000000 
  26 0098 00000000 		.quad	0
  26      00000000 
  27 00a0 00000000 		.quad	.L1
  27      00000000 
  28 00a8 00000000 		.quad	0
  28      00000000 
  29 00b0 00000000 		.quad	.L1
  29      00000000 
  30 00b8 00000000 		.quad	0
  30      00000000 
  31 00c0 00000000 		.quad	.L1
  31      00000000 
  32 00c8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 2


  32      00000000 
  33 00d0 00000000 		.quad	.L1
  33      00000000 
  34 00d8 00000000 		.quad	0
  34      00000000 
  35 00e0 00000000 		.quad	.L1
  35      00000000 
  36 00e8 00000000 		.quad	0
  36      00000000 
  37 00f0 00000000 		.quad	.L1
  37      00000000 
  38 00f8 00000000 		.quad	0
  38      00000000 
  39 0100 00000000 		.quad	.L1
  39      00000000 
  40 0108 00000000 		.quad	0
  40      00000000 
  41 0110 00000000 		.quad	.L1
  41      00000000 
  42 0118 00000000 		.quad	0
  42      00000000 
  43 0120 00000000 		.quad	.L1
  43      00000000 
  44 0128 00000000 		.quad	0
  44      00000000 
  45 0130 00000000 		.quad	.L1
  45      00000000 
  46 0138 00000000 		.quad	0
  46      00000000 
  47 0140 00000000 		.quad	.L1
  47      00000000 
  48 0148 00000000 		.quad	0
  48      00000000 
  49 0150 00000000 		.quad	.L1
  49      00000000 
  50 0158 00000000 		.quad	0
  50      00000000 
  51 0160 00000000 		.quad	.L1
  51      00000000 
  52 0168 00000000 		.quad	0
  52      00000000 
  53 0170 00000000 		.quad	.L1
  53      00000000 
  54 0178 00000000 		.quad	0
  54      00000000 
  55 0180 00000000 		.quad	.L1
  55      00000000 
  56 0188 00000000 		.quad	0
  56      00000000 
  57 0190 00000000 		.quad	.L1
  57      00000000 
  58 0198 00000000 		.quad	0
  58      00000000 
  59 01a0 00000000 		.quad	.L1
  59      00000000 
  60 01a8 00000000 		.quad	0
  60      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 3


  61 01b0 00000000 		.quad	.L1
  61      00000000 
  62 01b8 00000000 		.quad	0
  62      00000000 
  63 01c0 00000000 		.quad	.L1
  63      00000000 
  64 01c8 00000000 		.quad	0
  64      00000000 
  65 01d0 00000000 		.quad	.L1
  65      00000000 
  66 01d8 00000000 		.quad	0
  66      00000000 
  67 01e0 00000000 		.quad	.L1
  67      00000000 
  68 01e8 00000000 		.quad	0
  68      00000000 
  69 01f0 00000000 		.quad	.L1
  69      00000000 
  70 01f8 00000000 		.quad	0
  70      00000000 
  71 0200 00000000 		.quad	.L1
  71      00000000 
  72 0208 00000000 		.quad	0
  72      00000000 
  73 0210 00000000 		.quad	.L1
  73      00000000 
  74 0218 00000000 		.quad	0
  74      00000000 
  75 0220 00000000 		.quad	.L1
  75      00000000 
  76 0228 00000000 		.quad	0
  76      00000000 
  77 0230 00000000 		.quad	.L1
  77      00000000 
  78 0238 00000000 		.quad	0
  78      00000000 
  79 0240 00000000 		.quad	.L1
  79      00000000 
  80 0248 00000000 		.quad	0
  80      00000000 
  81 0250 00000000 		.quad	.L1
  81      00000000 
  82 0258 00000000 		.quad	0
  82      00000000 
  83 0260 00000000 		.quad	.L1
  83      00000000 
  84 0268 00000000 		.quad	0
  84      00000000 
  85 0270 00000000 		.quad	.L1
  85      00000000 
  86 0278 00000000 		.quad	0
  86      00000000 
  87 0280 00000000 		.quad	.L1
  87      00000000 
  88 0288 00000000 		.quad	0
  88      00000000 
  89 0290 00000000 		.quad	.L1
GAS LISTING /tmp/cc15eBE3.s 			page 4


  89      00000000 
  90 0298 00000000 		.quad	0
  90      00000000 
  91 02a0 00000000 		.quad	.L1
  91      00000000 
  92 02a8 00000000 		.quad	0
  92      00000000 
  93 02b0 00000000 		.quad	.L1
  93      00000000 
  94 02b8 00000000 		.quad	0
  94      00000000 
  95 02c0 00000000 		.quad	.L1
  95      00000000 
  96 02c8 00000000 		.quad	0
  96      00000000 
  97 02d0 00000000 		.quad	.L1
  97      00000000 
  98 02d8 00000000 		.quad	0
  98      00000000 
  99 02e0 00000000 		.quad	.L3
  99      00000000 
 100 02e8 00000000 		.quad	0
 100      00000000 
 101 02f0 00000000 		.quad	.L1
 101      00000000 
 102 02f8 00000000 		.quad	0
 102      00000000 
 103 0300 00000000 		.quad	.L1
 103      00000000 
 104 0308 00000000 		.quad	0
 104      00000000 
 105 0310 00000000 		.quad	.L1
 105      00000000 
 106 0318 00000000 		.quad	0
 106      00000000 
 107 0320 00000000 		.quad	.L1
 107      00000000 
 108 0328 00000000 		.quad	0
 108      00000000 
 109 0330 00000000 		.quad	.L1
 109      00000000 
 110 0338 00000000 		.quad	0
 110      00000000 
 111 0340 00000000 		.quad	.L4
 111      00000000 
 112 0348 00000000 		.quad	0
 112      00000000 
 113 0350 00000000 		.quad	.L1
 113      00000000 
 114 0358 00000000 		.quad	0
 114      00000000 
 115 0360 00000000 		.quad	.L1
 115      00000000 
 116 0368 00000000 		.quad	0
 116      00000000 
 117 0370 00000000 		.quad	.L1
 117      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 5


 118 0378 00000000 		.quad	0
 118      00000000 
 119 0380 00000000 		.quad	.L5
 119      00000000 
 120 0388 00000000 		.quad	0
 120      00000000 
 121 0390 00000000 		.quad	.L1
 121      00000000 
 122 0398 00000000 		.quad	0
 122      00000000 
 123 03a0 00000000 		.quad	.L6
 123      00000000 
 124 03a8 00000000 		.quad	0
 124      00000000 
 125 03b0 00000000 		.quad	.L1
 125      00000000 
 126 03b8 00000000 		.quad	0
 126      00000000 
 127 03c0 00000000 		.quad	.L1
 127      00000000 
 128 03c8 00000000 		.quad	0
 128      00000000 
 129 03d0 00000000 		.quad	.L1
 129      00000000 
 130 03d8 00000000 		.quad	0
 130      00000000 
 131 03e0 00000000 		.quad	.L1
 131      00000000 
 132 03e8 00000000 		.quad	0
 132      00000000 
 133 03f0 00000000 		.quad	.L1
 133      00000000 
 134 03f8 00000000 		.quad	0
 134      00000000 
 135 0400 00000000 		.quad	.L1
 135      00000000 
 136 0408 00000000 		.quad	0
 136      00000000 
 137 0410 00000000 		.quad	.L1
 137      00000000 
 138 0418 00000000 		.quad	0
 138      00000000 
 139 0420 00000000 		.quad	.L1
 139      00000000 
 140 0428 00000000 		.quad	0
 140      00000000 
 141 0430 00000000 		.quad	.L1
 141      00000000 
 142 0438 00000000 		.quad	0
 142      00000000 
 143 0440 00000000 		.quad	.L1
 143      00000000 
 144 0448 00000000 		.quad	0
 144      00000000 
 145 0450 00000000 		.quad	.L1
 145      00000000 
 146 0458 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 6


 146      00000000 
 147 0460 00000000 		.quad	.L1
 147      00000000 
 148 0468 00000000 		.quad	0
 148      00000000 
 149 0470 00000000 		.quad	.L1
 149      00000000 
 150 0478 00000000 		.quad	0
 150      00000000 
 151 0480 00000000 		.quad	.L1
 151      00000000 
 152 0488 00000000 		.quad	0
 152      00000000 
 153 0490 00000000 		.quad	.L1
 153      00000000 
 154 0498 00000000 		.quad	0
 154      00000000 
 155 04a0 00000000 		.quad	.L1
 155      00000000 
 156 04a8 00000000 		.quad	0
 156      00000000 
 157 04b0 00000000 		.quad	.L1
 157      00000000 
 158 04b8 00000000 		.quad	0
 158      00000000 
 159 04c0 00000000 		.quad	.L1
 159      00000000 
 160 04c8 00000000 		.quad	0
 160      00000000 
 161 04d0 00000000 		.quad	.L1
 161      00000000 
 162 04d8 00000000 		.quad	0
 162      00000000 
 163 04e0 00000000 		.quad	.L7
 163      00000000 
 164 04e8 00000000 		.quad	0
 164      00000000 
 165 04f0 00000000 		.quad	.L1
 165      00000000 
 166 04f8 00000000 		.quad	0
 166      00000000 
 167 0500 00000000 		.quad	.L1
 167      00000000 
 168 0508 00000000 		.quad	0
 168      00000000 
 169 0510 00000000 		.quad	.L1
 169      00000000 
 170 0518 00000000 		.quad	0
 170      00000000 
 171 0520 00000000 		.quad	.L1
 171      00000000 
 172 0528 00000000 		.quad	0
 172      00000000 
 173 0530 00000000 		.quad	.L1
 173      00000000 
 174 0538 00000000 		.quad	0
 174      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 7


 175 0540 00000000 		.quad	.L1
 175      00000000 
 176 0548 00000000 		.quad	0
 176      00000000 
 177 0550 00000000 		.quad	.L1
 177      00000000 
 178 0558 00000000 		.quad	0
 178      00000000 
 179 0560 00000000 		.quad	.L8
 179      00000000 
 180 0568 00000000 		.quad	0
 180      00000000 
 181 0570 00000000 		.quad	.L1
 181      00000000 
 182 0578 00000000 		.quad	0
 182      00000000 
 183 0580 00000000 		.quad	.L1
 183      00000000 
 184 0588 00000000 		.quad	0
 184      00000000 
 185 0590 00000000 		.quad	.L1
 185      00000000 
 186 0598 00000000 		.quad	0
 186      00000000 
 187 05a0 00000000 		.quad	.L1
 187      00000000 
 188 05a8 00000000 		.quad	0
 188      00000000 
 189 05b0 00000000 		.quad	.L1
 189      00000000 
 190 05b8 00000000 		.quad	0
 190      00000000 
 191 05c0 00000000 		.quad	.L1
 191      00000000 
 192 05c8 00000000 		.quad	0
 192      00000000 
 193 05d0 00000000 		.quad	.L1
 193      00000000 
 194 05d8 00000000 		.quad	0
 194      00000000 
 195 05e0 00000000 		.quad	.L1
 195      00000000 
 196 05e8 00000000 		.quad	0
 196      00000000 
 197 05f0 00000000 		.quad	.L1
 197      00000000 
 198 05f8 00000000 		.quad	0
 198      00000000 
 199 0600 00000000 		.quad	.L1
 199      00000000 
 200 0608 00000000 		.quad	0
 200      00000000 
 201 0610 00000000 		.quad	.L1
 201      00000000 
 202 0618 00000000 		.quad	0
 202      00000000 
 203 0620 00000000 		.quad	.L1
GAS LISTING /tmp/cc15eBE3.s 			page 8


 203      00000000 
 204 0628 00000000 		.quad	0
 204      00000000 
 205 0630 00000000 		.quad	.L1
 205      00000000 
 206 0638 00000000 		.quad	0
 206      00000000 
 207 0640 00000000 		.quad	.L1
 207      00000000 
 208 0648 00000000 		.quad	0
 208      00000000 
 209 0650 00000000 		.quad	.L1
 209      00000000 
 210 0658 00000000 		.quad	0
 210      00000000 
 211 0660 00000000 		.quad	.L1
 211      00000000 
 212 0668 00000000 		.quad	0
 212      00000000 
 213 0670 00000000 		.quad	.L1
 213      00000000 
 214 0678 00000000 		.quad	0
 214      00000000 
 215 0680 00000000 		.quad	.L1
 215      00000000 
 216 0688 00000000 		.quad	0
 216      00000000 
 217 0690 00000000 		.quad	.L1
 217      00000000 
 218 0698 00000000 		.quad	0
 218      00000000 
 219 06a0 00000000 		.quad	.L1
 219      00000000 
 220 06a8 00000000 		.quad	0
 220      00000000 
 221 06b0 00000000 		.quad	.L1
 221      00000000 
 222 06b8 00000000 		.quad	0
 222      00000000 
 223 06c0 00000000 		.quad	.L1
 223      00000000 
 224 06c8 00000000 		.quad	0
 224      00000000 
 225 06d0 00000000 		.quad	.L1
 225      00000000 
 226 06d8 00000000 		.quad	0
 226      00000000 
 227              		.align 16
 228              	.LC1:
 229 06e0 00000000 		.quad	.L9
 229      00000000 
 230 06e8 00000000 		.quad	0
 230      00000000 
 231 06f0 00000000 		.quad	.L10
 231      00000000 
 232 06f8 00000000 		.quad	0
 232      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 9


 233 0700 00000000 		.quad	.L10
 233      00000000 
 234 0708 00000000 		.quad	0
 234      00000000 
 235 0710 00000000 		.quad	.L10
 235      00000000 
 236 0718 00000000 		.quad	0
 236      00000000 
 237 0720 00000000 		.quad	.L10
 237      00000000 
 238 0728 00000000 		.quad	0
 238      00000000 
 239 0730 00000000 		.quad	.L10
 239      00000000 
 240 0738 00000000 		.quad	0
 240      00000000 
 241 0740 00000000 		.quad	.L10
 241      00000000 
 242 0748 00000000 		.quad	0
 242      00000000 
 243 0750 00000000 		.quad	.L10
 243      00000000 
 244 0758 00000000 		.quad	0
 244      00000000 
 245 0760 00000000 		.quad	.L10
 245      00000000 
 246 0768 00000000 		.quad	0
 246      00000000 
 247 0770 00000000 		.quad	.L10
 247      00000000 
 248 0778 00000000 		.quad	0
 248      00000000 
 249 0780 00000000 		.quad	.L10
 249      00000000 
 250 0788 00000000 		.quad	0
 250      00000000 
 251 0790 00000000 		.quad	.L10
 251      00000000 
 252 0798 00000000 		.quad	0
 252      00000000 
 253 07a0 00000000 		.quad	.L10
 253      00000000 
 254 07a8 00000000 		.quad	0
 254      00000000 
 255 07b0 00000000 		.quad	.L10
 255      00000000 
 256 07b8 00000000 		.quad	0
 256      00000000 
 257 07c0 00000000 		.quad	.L10
 257      00000000 
 258 07c8 00000000 		.quad	0
 258      00000000 
 259 07d0 00000000 		.quad	.L10
 259      00000000 
 260 07d8 00000000 		.quad	0
 260      00000000 
 261 07e0 00000000 		.quad	.L10
GAS LISTING /tmp/cc15eBE3.s 			page 10


 261      00000000 
 262 07e8 00000000 		.quad	0
 262      00000000 
 263 07f0 00000000 		.quad	.L10
 263      00000000 
 264 07f8 00000000 		.quad	0
 264      00000000 
 265 0800 00000000 		.quad	.L10
 265      00000000 
 266 0808 00000000 		.quad	0
 266      00000000 
 267 0810 00000000 		.quad	.L10
 267      00000000 
 268 0818 00000000 		.quad	0
 268      00000000 
 269 0820 00000000 		.quad	.L10
 269      00000000 
 270 0828 00000000 		.quad	0
 270      00000000 
 271 0830 00000000 		.quad	.L10
 271      00000000 
 272 0838 00000000 		.quad	0
 272      00000000 
 273 0840 00000000 		.quad	.L10
 273      00000000 
 274 0848 00000000 		.quad	0
 274      00000000 
 275 0850 00000000 		.quad	.L10
 275      00000000 
 276 0858 00000000 		.quad	0
 276      00000000 
 277 0860 00000000 		.quad	.L10
 277      00000000 
 278 0868 00000000 		.quad	0
 278      00000000 
 279 0870 00000000 		.quad	.L10
 279      00000000 
 280 0878 00000000 		.quad	0
 280      00000000 
 281 0880 00000000 		.quad	.L10
 281      00000000 
 282 0888 00000000 		.quad	0
 282      00000000 
 283 0890 00000000 		.quad	.L10
 283      00000000 
 284 0898 00000000 		.quad	0
 284      00000000 
 285 08a0 00000000 		.quad	.L10
 285      00000000 
 286 08a8 00000000 		.quad	0
 286      00000000 
 287 08b0 00000000 		.quad	.L10
 287      00000000 
 288 08b8 00000000 		.quad	0
 288      00000000 
 289 08c0 00000000 		.quad	.L10
 289      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 11


 290 08c8 00000000 		.quad	0
 290      00000000 
 291 08d0 00000000 		.quad	.L10
 291      00000000 
 292 08d8 00000000 		.quad	0
 292      00000000 
 293 08e0 00000000 		.quad	.L10
 293      00000000 
 294 08e8 00000000 		.quad	0
 294      00000000 
 295 08f0 00000000 		.quad	.L10
 295      00000000 
 296 08f8 00000000 		.quad	0
 296      00000000 
 297 0900 00000000 		.quad	.L10
 297      00000000 
 298 0908 00000000 		.quad	0
 298      00000000 
 299 0910 00000000 		.quad	.L10
 299      00000000 
 300 0918 00000000 		.quad	0
 300      00000000 
 301 0920 00000000 		.quad	.L10
 301      00000000 
 302 0928 00000000 		.quad	0
 302      00000000 
 303 0930 00000000 		.quad	.L10
 303      00000000 
 304 0938 00000000 		.quad	0
 304      00000000 
 305 0940 00000000 		.quad	.L10
 305      00000000 
 306 0948 00000000 		.quad	0
 306      00000000 
 307 0950 00000000 		.quad	.L10
 307      00000000 
 308 0958 00000000 		.quad	0
 308      00000000 
 309 0960 00000000 		.quad	.L10
 309      00000000 
 310 0968 00000000 		.quad	0
 310      00000000 
 311 0970 00000000 		.quad	.L10
 311      00000000 
 312 0978 00000000 		.quad	0
 312      00000000 
 313 0980 00000000 		.quad	.L10
 313      00000000 
 314 0988 00000000 		.quad	0
 314      00000000 
 315 0990 00000000 		.quad	.L10
 315      00000000 
 316 0998 00000000 		.quad	0
 316      00000000 
 317 09a0 00000000 		.quad	.L10
 317      00000000 
 318 09a8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 12


 318      00000000 
 319 09b0 00000000 		.quad	.L11
 319      00000000 
 320 09b8 00000000 		.quad	0
 320      00000000 
 321 09c0 00000000 		.quad	.L10
 321      00000000 
 322 09c8 00000000 		.quad	0
 322      00000000 
 323 09d0 00000000 		.quad	.L10
 323      00000000 
 324 09d8 00000000 		.quad	0
 324      00000000 
 325 09e0 00000000 		.quad	.L12
 325      00000000 
 326 09e8 00000000 		.quad	0
 326      00000000 
 327 09f0 00000000 		.quad	.L10
 327      00000000 
 328 09f8 00000000 		.quad	0
 328      00000000 
 329 0a00 00000000 		.quad	.L10
 329      00000000 
 330 0a08 00000000 		.quad	0
 330      00000000 
 331 0a10 00000000 		.quad	.L10
 331      00000000 
 332 0a18 00000000 		.quad	0
 332      00000000 
 333 0a20 00000000 		.quad	.L13
 333      00000000 
 334 0a28 00000000 		.quad	0
 334      00000000 
 335 0a30 00000000 		.quad	.L10
 335      00000000 
 336 0a38 00000000 		.quad	0
 336      00000000 
 337 0a40 00000000 		.quad	.L10
 337      00000000 
 338 0a48 00000000 		.quad	0
 338      00000000 
 339 0a50 00000000 		.quad	.L14
 339      00000000 
 340 0a58 00000000 		.quad	0
 340      00000000 
 341 0a60 00000000 		.quad	.L10
 341      00000000 
 342 0a68 00000000 		.quad	0
 342      00000000 
 343 0a70 00000000 		.quad	.L10
 343      00000000 
 344 0a78 00000000 		.quad	0
 344      00000000 
 345 0a80 00000000 		.quad	.L10
 345      00000000 
 346 0a88 00000000 		.quad	0
 346      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 13


 347 0a90 00000000 		.quad	.L10
 347      00000000 
 348 0a98 00000000 		.quad	0
 348      00000000 
 349 0aa0 00000000 		.quad	.L10
 349      00000000 
 350 0aa8 00000000 		.quad	0
 350      00000000 
 351 0ab0 00000000 		.quad	.L10
 351      00000000 
 352 0ab8 00000000 		.quad	0
 352      00000000 
 353 0ac0 00000000 		.quad	.L10
 353      00000000 
 354 0ac8 00000000 		.quad	0
 354      00000000 
 355 0ad0 00000000 		.quad	.L10
 355      00000000 
 356 0ad8 00000000 		.quad	0
 356      00000000 
 357 0ae0 00000000 		.quad	.L10
 357      00000000 
 358 0ae8 00000000 		.quad	0
 358      00000000 
 359 0af0 00000000 		.quad	.L10
 359      00000000 
 360 0af8 00000000 		.quad	0
 360      00000000 
 361 0b00 00000000 		.quad	.L10
 361      00000000 
 362 0b08 00000000 		.quad	0
 362      00000000 
 363 0b10 00000000 		.quad	.L10
 363      00000000 
 364 0b18 00000000 		.quad	0
 364      00000000 
 365 0b20 00000000 		.quad	.L10
 365      00000000 
 366 0b28 00000000 		.quad	0
 366      00000000 
 367 0b30 00000000 		.quad	.L10
 367      00000000 
 368 0b38 00000000 		.quad	0
 368      00000000 
 369 0b40 00000000 		.quad	.L10
 369      00000000 
 370 0b48 00000000 		.quad	0
 370      00000000 
 371 0b50 00000000 		.quad	.L10
 371      00000000 
 372 0b58 00000000 		.quad	0
 372      00000000 
 373 0b60 00000000 		.quad	.L10
 373      00000000 
 374 0b68 00000000 		.quad	0
 374      00000000 
 375 0b70 00000000 		.quad	.L10
GAS LISTING /tmp/cc15eBE3.s 			page 14


 375      00000000 
 376 0b78 00000000 		.quad	0
 376      00000000 
 377 0b80 00000000 		.quad	.L10
 377      00000000 
 378 0b88 00000000 		.quad	0
 378      00000000 
 379 0b90 00000000 		.quad	.L10
 379      00000000 
 380 0b98 00000000 		.quad	0
 380      00000000 
 381 0ba0 00000000 		.quad	.L10
 381      00000000 
 382 0ba8 00000000 		.quad	0
 382      00000000 
 383 0bb0 00000000 		.quad	.L10
 383      00000000 
 384 0bb8 00000000 		.quad	0
 384      00000000 
 385 0bc0 00000000 		.quad	.L10
 385      00000000 
 386 0bc8 00000000 		.quad	0
 386      00000000 
 387 0bd0 00000000 		.quad	.L10
 387      00000000 
 388 0bd8 00000000 		.quad	0
 388      00000000 
 389 0be0 00000000 		.quad	.L10
 389      00000000 
 390 0be8 00000000 		.quad	0
 390      00000000 
 391 0bf0 00000000 		.quad	.L10
 391      00000000 
 392 0bf8 00000000 		.quad	0
 392      00000000 
 393 0c00 00000000 		.quad	.L10
 393      00000000 
 394 0c08 00000000 		.quad	0
 394      00000000 
 395 0c10 00000000 		.quad	.L10
 395      00000000 
 396 0c18 00000000 		.quad	0
 396      00000000 
 397 0c20 00000000 		.quad	.L10
 397      00000000 
 398 0c28 00000000 		.quad	0
 398      00000000 
 399 0c30 00000000 		.quad	.L10
 399      00000000 
 400 0c38 00000000 		.quad	0
 400      00000000 
 401 0c40 00000000 		.quad	.L10
 401      00000000 
 402 0c48 00000000 		.quad	0
 402      00000000 
 403 0c50 00000000 		.quad	.L10
 403      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 15


 404 0c58 00000000 		.quad	0
 404      00000000 
 405 0c60 00000000 		.quad	.L10
 405      00000000 
 406 0c68 00000000 		.quad	0
 406      00000000 
 407 0c70 00000000 		.quad	.L10
 407      00000000 
 408 0c78 00000000 		.quad	0
 408      00000000 
 409 0c80 00000000 		.quad	.L10
 409      00000000 
 410 0c88 00000000 		.quad	0
 410      00000000 
 411 0c90 00000000 		.quad	.L10
 411      00000000 
 412 0c98 00000000 		.quad	0
 412      00000000 
 413 0ca0 00000000 		.quad	.L10
 413      00000000 
 414 0ca8 00000000 		.quad	0
 414      00000000 
 415 0cb0 00000000 		.quad	.L10
 415      00000000 
 416 0cb8 00000000 		.quad	0
 416      00000000 
 417 0cc0 00000000 		.quad	.L10
 417      00000000 
 418 0cc8 00000000 		.quad	0
 418      00000000 
 419 0cd0 00000000 		.quad	.L10
 419      00000000 
 420 0cd8 00000000 		.quad	0
 420      00000000 
 421 0ce0 00000000 		.quad	.L10
 421      00000000 
 422 0ce8 00000000 		.quad	0
 422      00000000 
 423 0cf0 00000000 		.quad	.L10
 423      00000000 
 424 0cf8 00000000 		.quad	0
 424      00000000 
 425 0d00 00000000 		.quad	.L10
 425      00000000 
 426 0d08 00000000 		.quad	0
 426      00000000 
 427 0d10 00000000 		.quad	.L10
 427      00000000 
 428 0d18 00000000 		.quad	0
 428      00000000 
 429 0d20 00000000 		.quad	.L10
 429      00000000 
 430 0d28 00000000 		.quad	0
 430      00000000 
 431 0d30 00000000 		.quad	.L10
 431      00000000 
 432 0d38 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 16


 432      00000000 
 433 0d40 00000000 		.quad	.L10
 433      00000000 
 434 0d48 00000000 		.quad	0
 434      00000000 
 435 0d50 00000000 		.quad	.L10
 435      00000000 
 436 0d58 00000000 		.quad	0
 436      00000000 
 437 0d60 00000000 		.quad	.L10
 437      00000000 
 438 0d68 00000000 		.quad	0
 438      00000000 
 439 0d70 00000000 		.quad	.L10
 439      00000000 
 440 0d78 00000000 		.quad	0
 440      00000000 
 441 0d80 00000000 		.quad	.L10
 441      00000000 
 442 0d88 00000000 		.quad	0
 442      00000000 
 443 0d90 00000000 		.quad	.L10
 443      00000000 
 444 0d98 00000000 		.quad	0
 444      00000000 
 445 0da0 00000000 		.quad	.L10
 445      00000000 
 446 0da8 00000000 		.quad	0
 446      00000000 
 447 0db0 00000000 		.quad	.L10
 447      00000000 
 448 0db8 00000000 		.quad	0
 448      00000000 
 449              		.align 16
 450              	.LC2:
 451 0dc0 00000000 		.quad	.L15
 451      00000000 
 452 0dc8 00000000 		.quad	0
 452      00000000 
 453 0dd0 00000000 		.quad	.L16
 453      00000000 
 454 0dd8 00000000 		.quad	0
 454      00000000 
 455 0de0 00000000 		.quad	.L17
 455      00000000 
 456 0de8 00000000 		.quad	0
 456      00000000 
 457 0df0 00000000 		.quad	.L16
 457      00000000 
 458 0df8 00000000 		.quad	0
 458      00000000 
 459 0e00 00000000 		.quad	.L16
 459      00000000 
 460 0e08 00000000 		.quad	0
 460      00000000 
 461 0e10 00000000 		.quad	.L16
 461      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 17


 462 0e18 00000000 		.quad	0
 462      00000000 
 463 0e20 00000000 		.quad	.L16
 463      00000000 
 464 0e28 00000000 		.quad	0
 464      00000000 
 465 0e30 00000000 		.quad	.L16
 465      00000000 
 466 0e38 00000000 		.quad	0
 466      00000000 
 467 0e40 00000000 		.quad	.L16
 467      00000000 
 468 0e48 00000000 		.quad	0
 468      00000000 
 469 0e50 00000000 		.quad	.L16
 469      00000000 
 470 0e58 00000000 		.quad	0
 470      00000000 
 471 0e60 00000000 		.quad	.L16
 471      00000000 
 472 0e68 00000000 		.quad	0
 472      00000000 
 473 0e70 00000000 		.quad	.L16
 473      00000000 
 474 0e78 00000000 		.quad	0
 474      00000000 
 475 0e80 00000000 		.quad	.L16
 475      00000000 
 476 0e88 00000000 		.quad	0
 476      00000000 
 477 0e90 00000000 		.quad	.L16
 477      00000000 
 478 0e98 00000000 		.quad	0
 478      00000000 
 479 0ea0 00000000 		.quad	.L16
 479      00000000 
 480 0ea8 00000000 		.quad	0
 480      00000000 
 481 0eb0 00000000 		.quad	.L16
 481      00000000 
 482 0eb8 00000000 		.quad	0
 482      00000000 
 483 0ec0 00000000 		.quad	.L16
 483      00000000 
 484 0ec8 00000000 		.quad	0
 484      00000000 
 485 0ed0 00000000 		.quad	.L16
 485      00000000 
 486 0ed8 00000000 		.quad	0
 486      00000000 
 487 0ee0 00000000 		.quad	.L16
 487      00000000 
 488 0ee8 00000000 		.quad	0
 488      00000000 
 489 0ef0 00000000 		.quad	.L16
 489      00000000 
 490 0ef8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 18


 490      00000000 
 491 0f00 00000000 		.quad	.L16
 491      00000000 
 492 0f08 00000000 		.quad	0
 492      00000000 
 493 0f10 00000000 		.quad	.L16
 493      00000000 
 494 0f18 00000000 		.quad	0
 494      00000000 
 495 0f20 00000000 		.quad	.L16
 495      00000000 
 496 0f28 00000000 		.quad	0
 496      00000000 
 497 0f30 00000000 		.quad	.L16
 497      00000000 
 498 0f38 00000000 		.quad	0
 498      00000000 
 499 0f40 00000000 		.quad	.L18
 499      00000000 
 500 0f48 00000000 		.quad	0
 500      00000000 
 501 0f50 00000000 		.quad	.L16
 501      00000000 
 502 0f58 00000000 		.quad	0
 502      00000000 
 503 0f60 00000000 		.quad	.L16
 503      00000000 
 504 0f68 00000000 		.quad	0
 504      00000000 
 505 0f70 00000000 		.quad	.L16
 505      00000000 
 506 0f78 00000000 		.quad	0
 506      00000000 
 507 0f80 00000000 		.quad	.L16
 507      00000000 
 508 0f88 00000000 		.quad	0
 508      00000000 
 509 0f90 00000000 		.quad	.L16
 509      00000000 
 510 0f98 00000000 		.quad	0
 510      00000000 
 511 0fa0 00000000 		.quad	.L16
 511      00000000 
 512 0fa8 00000000 		.quad	0
 512      00000000 
 513 0fb0 00000000 		.quad	.L16
 513      00000000 
 514 0fb8 00000000 		.quad	0
 514      00000000 
 515 0fc0 00000000 		.quad	.L16
 515      00000000 
 516 0fc8 00000000 		.quad	0
 516      00000000 
 517 0fd0 00000000 		.quad	.L19
 517      00000000 
 518 0fd8 00000000 		.quad	0
 518      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 19


 519 0fe0 00000000 		.quad	.L16
 519      00000000 
 520 0fe8 00000000 		.quad	0
 520      00000000 
 521 0ff0 00000000 		.quad	.L16
 521      00000000 
 522 0ff8 00000000 		.quad	0
 522      00000000 
 523 1000 00000000 		.quad	.L20
 523      00000000 
 524 1008 00000000 		.quad	0
 524      00000000 
 525 1010 00000000 		.quad	.L21
 525      00000000 
 526 1018 00000000 		.quad	0
 526      00000000 
 527 1020 00000000 		.quad	.L22
 527      00000000 
 528 1028 00000000 		.quad	0
 528      00000000 
 529 1030 00000000 		.quad	.L16
 529      00000000 
 530 1038 00000000 		.quad	0
 530      00000000 
 531 1040 00000000 		.quad	.L16
 531      00000000 
 532 1048 00000000 		.quad	0
 532      00000000 
 533 1050 00000000 		.quad	.L16
 533      00000000 
 534 1058 00000000 		.quad	0
 534      00000000 
 535 1060 00000000 		.quad	.L23
 535      00000000 
 536 1068 00000000 		.quad	0
 536      00000000 
 537 1070 00000000 		.quad	.L16
 537      00000000 
 538 1078 00000000 		.quad	0
 538      00000000 
 539 1080 00000000 		.quad	.L16
 539      00000000 
 540 1088 00000000 		.quad	0
 540      00000000 
 541 1090 00000000 		.quad	.L24
 541      00000000 
 542 1098 00000000 		.quad	0
 542      00000000 
 543 10a0 00000000 		.quad	.L25
 543      00000000 
 544 10a8 00000000 		.quad	0
 544      00000000 
 545 10b0 00000000 		.quad	.L16
 545      00000000 
 546 10b8 00000000 		.quad	0
 546      00000000 
 547 10c0 00000000 		.quad	.L26
GAS LISTING /tmp/cc15eBE3.s 			page 20


 547      00000000 
 548 10c8 00000000 		.quad	0
 548      00000000 
 549 10d0 00000000 		.quad	.L27
 549      00000000 
 550 10d8 00000000 		.quad	0
 550      00000000 
 551 10e0 00000000 		.quad	.L16
 551      00000000 
 552 10e8 00000000 		.quad	0
 552      00000000 
 553 10f0 00000000 		.quad	.L16
 553      00000000 
 554 10f8 00000000 		.quad	0
 554      00000000 
 555 1100 00000000 		.quad	.L28
 555      00000000 
 556 1108 00000000 		.quad	0
 556      00000000 
 557 1110 00000000 		.quad	.L29
 557      00000000 
 558 1118 00000000 		.quad	0
 558      00000000 
 559 1120 00000000 		.quad	.L16
 559      00000000 
 560 1128 00000000 		.quad	0
 560      00000000 
 561 1130 00000000 		.quad	.L30
 561      00000000 
 562 1138 00000000 		.quad	0
 562      00000000 
 563 1140 00000000 		.quad	.L31
 563      00000000 
 564 1148 00000000 		.quad	0
 564      00000000 
 565 1150 00000000 		.quad	.L16
 565      00000000 
 566 1158 00000000 		.quad	0
 566      00000000 
 567 1160 00000000 		.quad	.L32
 567      00000000 
 568 1168 00000000 		.quad	0
 568      00000000 
 569 1170 00000000 		.quad	.L16
 569      00000000 
 570 1178 00000000 		.quad	0
 570      00000000 
 571 1180 00000000 		.quad	.L16
 571      00000000 
 572 1188 00000000 		.quad	0
 572      00000000 
 573 1190 00000000 		.quad	.L16
 573      00000000 
 574 1198 00000000 		.quad	0
 574      00000000 
 575 11a0 00000000 		.quad	.L16
 575      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 21


 576 11a8 00000000 		.quad	0
 576      00000000 
 577 11b0 00000000 		.quad	.L16
 577      00000000 
 578 11b8 00000000 		.quad	0
 578      00000000 
 579 11c0 00000000 		.quad	.L16
 579      00000000 
 580 11c8 00000000 		.quad	0
 580      00000000 
 581 11d0 00000000 		.quad	.L16
 581      00000000 
 582 11d8 00000000 		.quad	0
 582      00000000 
 583 11e0 00000000 		.quad	.L16
 583      00000000 
 584 11e8 00000000 		.quad	0
 584      00000000 
 585 11f0 00000000 		.quad	.L16
 585      00000000 
 586 11f8 00000000 		.quad	0
 586      00000000 
 587 1200 00000000 		.quad	.L16
 587      00000000 
 588 1208 00000000 		.quad	0
 588      00000000 
 589 1210 00000000 		.quad	.L16
 589      00000000 
 590 1218 00000000 		.quad	0
 590      00000000 
 591 1220 00000000 		.quad	.L16
 591      00000000 
 592 1228 00000000 		.quad	0
 592      00000000 
 593 1230 00000000 		.quad	.L16
 593      00000000 
 594 1238 00000000 		.quad	0
 594      00000000 
 595 1240 00000000 		.quad	.L16
 595      00000000 
 596 1248 00000000 		.quad	0
 596      00000000 
 597 1250 00000000 		.quad	.L16
 597      00000000 
 598 1258 00000000 		.quad	0
 598      00000000 
 599 1260 00000000 		.quad	.L16
 599      00000000 
 600 1268 00000000 		.quad	0
 600      00000000 
 601 1270 00000000 		.quad	.L16
 601      00000000 
 602 1278 00000000 		.quad	0
 602      00000000 
 603 1280 00000000 		.quad	.L16
 603      00000000 
 604 1288 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 22


 604      00000000 
 605 1290 00000000 		.quad	.L16
 605      00000000 
 606 1298 00000000 		.quad	0
 606      00000000 
 607 12a0 00000000 		.quad	.L33
 607      00000000 
 608 12a8 00000000 		.quad	0
 608      00000000 
 609 12b0 00000000 		.quad	.L34
 609      00000000 
 610 12b8 00000000 		.quad	0
 610      00000000 
 611 12c0 00000000 		.quad	.L16
 611      00000000 
 612 12c8 00000000 		.quad	0
 612      00000000 
 613 12d0 00000000 		.quad	.L16
 613      00000000 
 614 12d8 00000000 		.quad	0
 614      00000000 
 615 12e0 00000000 		.quad	.L16
 615      00000000 
 616 12e8 00000000 		.quad	0
 616      00000000 
 617 12f0 00000000 		.quad	.L35
 617      00000000 
 618 12f8 00000000 		.quad	0
 618      00000000 
 619 1300 00000000 		.quad	.L16
 619      00000000 
 620 1308 00000000 		.quad	0
 620      00000000 
 621 1310 00000000 		.quad	.L16
 621      00000000 
 622 1318 00000000 		.quad	0
 622      00000000 
 623 1320 00000000 		.quad	.L36
 623      00000000 
 624 1328 00000000 		.quad	0
 624      00000000 
 625 1330 00000000 		.quad	.L16
 625      00000000 
 626 1338 00000000 		.quad	0
 626      00000000 
 627 1340 00000000 		.quad	.L16
 627      00000000 
 628 1348 00000000 		.quad	0
 628      00000000 
 629 1350 00000000 		.quad	.L16
 629      00000000 
 630 1358 00000000 		.quad	0
 630      00000000 
 631 1360 00000000 		.quad	.L16
 631      00000000 
 632 1368 00000000 		.quad	0
 632      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 23


 633 1370 00000000 		.quad	.L16
 633      00000000 
 634 1378 00000000 		.quad	0
 634      00000000 
 635 1380 00000000 		.quad	.L16
 635      00000000 
 636 1388 00000000 		.quad	0
 636      00000000 
 637 1390 00000000 		.quad	.L16
 637      00000000 
 638 1398 00000000 		.quad	0
 638      00000000 
 639 13a0 00000000 		.quad	.L16
 639      00000000 
 640 13a8 00000000 		.quad	0
 640      00000000 
 641 13b0 00000000 		.quad	.L16
 641      00000000 
 642 13b8 00000000 		.quad	0
 642      00000000 
 643 13c0 00000000 		.quad	.L16
 643      00000000 
 644 13c8 00000000 		.quad	0
 644      00000000 
 645 13d0 00000000 		.quad	.L16
 645      00000000 
 646 13d8 00000000 		.quad	0
 646      00000000 
 647 13e0 00000000 		.quad	.L16
 647      00000000 
 648 13e8 00000000 		.quad	0
 648      00000000 
 649 13f0 00000000 		.quad	.L16
 649      00000000 
 650 13f8 00000000 		.quad	0
 650      00000000 
 651 1400 00000000 		.quad	.L16
 651      00000000 
 652 1408 00000000 		.quad	0
 652      00000000 
 653 1410 00000000 		.quad	.L16
 653      00000000 
 654 1418 00000000 		.quad	0
 654      00000000 
 655 1420 00000000 		.quad	.L16
 655      00000000 
 656 1428 00000000 		.quad	0
 656      00000000 
 657 1430 00000000 		.quad	.L16
 657      00000000 
 658 1438 00000000 		.quad	0
 658      00000000 
 659 1440 00000000 		.quad	.L16
 659      00000000 
 660 1448 00000000 		.quad	0
 660      00000000 
 661 1450 00000000 		.quad	.L16
GAS LISTING /tmp/cc15eBE3.s 			page 24


 661      00000000 
 662 1458 00000000 		.quad	0
 662      00000000 
 663 1460 00000000 		.quad	.L16
 663      00000000 
 664 1468 00000000 		.quad	0
 664      00000000 
 665 1470 00000000 		.quad	.L16
 665      00000000 
 666 1478 00000000 		.quad	0
 666      00000000 
 667 1480 00000000 		.quad	.L16
 667      00000000 
 668 1488 00000000 		.quad	0
 668      00000000 
 669 1490 00000000 		.quad	.L16
 669      00000000 
 670 1498 00000000 		.quad	0
 670      00000000 
 671              		.align 16
 672              	.LC3:
 673 14a0 00000000 		.quad	.L37
 673      00000000 
 674 14a8 00000000 		.quad	0
 674      00000000 
 675 14b0 00000000 		.quad	.L38
 675      00000000 
 676 14b8 00000000 		.quad	0
 676      00000000 
 677 14c0 00000000 		.quad	.L39
 677      00000000 
 678 14c8 00000000 		.quad	0
 678      00000000 
 679 14d0 00000000 		.quad	.L38
 679      00000000 
 680 14d8 00000000 		.quad	0
 680      00000000 
 681 14e0 00000000 		.quad	.L38
 681      00000000 
 682 14e8 00000000 		.quad	0
 682      00000000 
 683 14f0 00000000 		.quad	.L38
 683      00000000 
 684 14f8 00000000 		.quad	0
 684      00000000 
 685 1500 00000000 		.quad	.L38
 685      00000000 
 686 1508 00000000 		.quad	0
 686      00000000 
 687 1510 00000000 		.quad	.L38
 687      00000000 
 688 1518 00000000 		.quad	0
 688      00000000 
 689 1520 00000000 		.quad	.L38
 689      00000000 
 690 1528 00000000 		.quad	0
 690      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 25


 691 1530 00000000 		.quad	.L38
 691      00000000 
 692 1538 00000000 		.quad	0
 692      00000000 
 693 1540 00000000 		.quad	.L38
 693      00000000 
 694 1548 00000000 		.quad	0
 694      00000000 
 695 1550 00000000 		.quad	.L38
 695      00000000 
 696 1558 00000000 		.quad	0
 696      00000000 
 697 1560 00000000 		.quad	.L38
 697      00000000 
 698 1568 00000000 		.quad	0
 698      00000000 
 699 1570 00000000 		.quad	.L38
 699      00000000 
 700 1578 00000000 		.quad	0
 700      00000000 
 701 1580 00000000 		.quad	.L38
 701      00000000 
 702 1588 00000000 		.quad	0
 702      00000000 
 703 1590 00000000 		.quad	.L38
 703      00000000 
 704 1598 00000000 		.quad	0
 704      00000000 
 705 15a0 00000000 		.quad	.L38
 705      00000000 
 706 15a8 00000000 		.quad	0
 706      00000000 
 707 15b0 00000000 		.quad	.L38
 707      00000000 
 708 15b8 00000000 		.quad	0
 708      00000000 
 709 15c0 00000000 		.quad	.L38
 709      00000000 
 710 15c8 00000000 		.quad	0
 710      00000000 
 711 15d0 00000000 		.quad	.L38
 711      00000000 
 712 15d8 00000000 		.quad	0
 712      00000000 
 713 15e0 00000000 		.quad	.L38
 713      00000000 
 714 15e8 00000000 		.quad	0
 714      00000000 
 715 15f0 00000000 		.quad	.L38
 715      00000000 
 716 15f8 00000000 		.quad	0
 716      00000000 
 717 1600 00000000 		.quad	.L38
 717      00000000 
 718 1608 00000000 		.quad	0
 718      00000000 
 719 1610 00000000 		.quad	.L38
GAS LISTING /tmp/cc15eBE3.s 			page 26


 719      00000000 
 720 1618 00000000 		.quad	0
 720      00000000 
 721 1620 00000000 		.quad	.L40
 721      00000000 
 722 1628 00000000 		.quad	0
 722      00000000 
 723 1630 00000000 		.quad	.L38
 723      00000000 
 724 1638 00000000 		.quad	0
 724      00000000 
 725 1640 00000000 		.quad	.L38
 725      00000000 
 726 1648 00000000 		.quad	0
 726      00000000 
 727 1650 00000000 		.quad	.L38
 727      00000000 
 728 1658 00000000 		.quad	0
 728      00000000 
 729 1660 00000000 		.quad	.L38
 729      00000000 
 730 1668 00000000 		.quad	0
 730      00000000 
 731 1670 00000000 		.quad	.L38
 731      00000000 
 732 1678 00000000 		.quad	0
 732      00000000 
 733 1680 00000000 		.quad	.L38
 733      00000000 
 734 1688 00000000 		.quad	0
 734      00000000 
 735 1690 00000000 		.quad	.L38
 735      00000000 
 736 1698 00000000 		.quad	0
 736      00000000 
 737 16a0 00000000 		.quad	.L38
 737      00000000 
 738 16a8 00000000 		.quad	0
 738      00000000 
 739 16b0 00000000 		.quad	.L38
 739      00000000 
 740 16b8 00000000 		.quad	0
 740      00000000 
 741 16c0 00000000 		.quad	.L38
 741      00000000 
 742 16c8 00000000 		.quad	0
 742      00000000 
 743 16d0 00000000 		.quad	.L38
 743      00000000 
 744 16d8 00000000 		.quad	0
 744      00000000 
 745 16e0 00000000 		.quad	.L38
 745      00000000 
 746 16e8 00000000 		.quad	0
 746      00000000 
 747 16f0 00000000 		.quad	.L38
 747      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 27


 748 16f8 00000000 		.quad	0
 748      00000000 
 749 1700 00000000 		.quad	.L38
 749      00000000 
 750 1708 00000000 		.quad	0
 750      00000000 
 751 1710 00000000 		.quad	.L38
 751      00000000 
 752 1718 00000000 		.quad	0
 752      00000000 
 753 1720 00000000 		.quad	.L38
 753      00000000 
 754 1728 00000000 		.quad	0
 754      00000000 
 755 1730 00000000 		.quad	.L38
 755      00000000 
 756 1738 00000000 		.quad	0
 756      00000000 
 757 1740 00000000 		.quad	.L38
 757      00000000 
 758 1748 00000000 		.quad	0
 758      00000000 
 759 1750 00000000 		.quad	.L38
 759      00000000 
 760 1758 00000000 		.quad	0
 760      00000000 
 761 1760 00000000 		.quad	.L38
 761      00000000 
 762 1768 00000000 		.quad	0
 762      00000000 
 763 1770 00000000 		.quad	.L38
 763      00000000 
 764 1778 00000000 		.quad	0
 764      00000000 
 765 1780 00000000 		.quad	.L38
 765      00000000 
 766 1788 00000000 		.quad	0
 766      00000000 
 767 1790 00000000 		.quad	.L38
 767      00000000 
 768 1798 00000000 		.quad	0
 768      00000000 
 769 17a0 00000000 		.quad	.L38
 769      00000000 
 770 17a8 00000000 		.quad	0
 770      00000000 
 771 17b0 00000000 		.quad	.L38
 771      00000000 
 772 17b8 00000000 		.quad	0
 772      00000000 
 773 17c0 00000000 		.quad	.L38
 773      00000000 
 774 17c8 00000000 		.quad	0
 774      00000000 
 775 17d0 00000000 		.quad	.L38
 775      00000000 
 776 17d8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 28


 776      00000000 
 777 17e0 00000000 		.quad	.L41
 777      00000000 
 778 17e8 00000000 		.quad	0
 778      00000000 
 779 17f0 00000000 		.quad	.L38
 779      00000000 
 780 17f8 00000000 		.quad	0
 780      00000000 
 781 1800 00000000 		.quad	.L38
 781      00000000 
 782 1808 00000000 		.quad	0
 782      00000000 
 783 1810 00000000 		.quad	.L38
 783      00000000 
 784 1818 00000000 		.quad	0
 784      00000000 
 785 1820 00000000 		.quad	.L38
 785      00000000 
 786 1828 00000000 		.quad	0
 786      00000000 
 787 1830 00000000 		.quad	.L38
 787      00000000 
 788 1838 00000000 		.quad	0
 788      00000000 
 789 1840 00000000 		.quad	.L38
 789      00000000 
 790 1848 00000000 		.quad	0
 790      00000000 
 791 1850 00000000 		.quad	.L38
 791      00000000 
 792 1858 00000000 		.quad	0
 792      00000000 
 793 1860 00000000 		.quad	.L38
 793      00000000 
 794 1868 00000000 		.quad	0
 794      00000000 
 795 1870 00000000 		.quad	.L38
 795      00000000 
 796 1878 00000000 		.quad	0
 796      00000000 
 797 1880 00000000 		.quad	.L38
 797      00000000 
 798 1888 00000000 		.quad	0
 798      00000000 
 799 1890 00000000 		.quad	.L38
 799      00000000 
 800 1898 00000000 		.quad	0
 800      00000000 
 801 18a0 00000000 		.quad	.L38
 801      00000000 
 802 18a8 00000000 		.quad	0
 802      00000000 
 803 18b0 00000000 		.quad	.L38
 803      00000000 
 804 18b8 00000000 		.quad	0
 804      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 29


 805 18c0 00000000 		.quad	.L38
 805      00000000 
 806 18c8 00000000 		.quad	0
 806      00000000 
 807 18d0 00000000 		.quad	.L38
 807      00000000 
 808 18d8 00000000 		.quad	0
 808      00000000 
 809 18e0 00000000 		.quad	.L38
 809      00000000 
 810 18e8 00000000 		.quad	0
 810      00000000 
 811 18f0 00000000 		.quad	.L38
 811      00000000 
 812 18f8 00000000 		.quad	0
 812      00000000 
 813 1900 00000000 		.quad	.L38
 813      00000000 
 814 1908 00000000 		.quad	0
 814      00000000 
 815 1910 00000000 		.quad	.L38
 815      00000000 
 816 1918 00000000 		.quad	0
 816      00000000 
 817 1920 00000000 		.quad	.L38
 817      00000000 
 818 1928 00000000 		.quad	0
 818      00000000 
 819 1930 00000000 		.quad	.L38
 819      00000000 
 820 1938 00000000 		.quad	0
 820      00000000 
 821 1940 00000000 		.quad	.L38
 821      00000000 
 822 1948 00000000 		.quad	0
 822      00000000 
 823 1950 00000000 		.quad	.L38
 823      00000000 
 824 1958 00000000 		.quad	0
 824      00000000 
 825 1960 00000000 		.quad	.L38
 825      00000000 
 826 1968 00000000 		.quad	0
 826      00000000 
 827 1970 00000000 		.quad	.L38
 827      00000000 
 828 1978 00000000 		.quad	0
 828      00000000 
 829 1980 00000000 		.quad	.L38
 829      00000000 
 830 1988 00000000 		.quad	0
 830      00000000 
 831 1990 00000000 		.quad	.L38
 831      00000000 
 832 1998 00000000 		.quad	0
 832      00000000 
 833 19a0 00000000 		.quad	.L38
GAS LISTING /tmp/cc15eBE3.s 			page 30


 833      00000000 
 834 19a8 00000000 		.quad	0
 834      00000000 
 835 19b0 00000000 		.quad	.L38
 835      00000000 
 836 19b8 00000000 		.quad	0
 836      00000000 
 837 19c0 00000000 		.quad	.L38
 837      00000000 
 838 19c8 00000000 		.quad	0
 838      00000000 
 839 19d0 00000000 		.quad	.L38
 839      00000000 
 840 19d8 00000000 		.quad	0
 840      00000000 
 841 19e0 00000000 		.quad	.L38
 841      00000000 
 842 19e8 00000000 		.quad	0
 842      00000000 
 843 19f0 00000000 		.quad	.L38
 843      00000000 
 844 19f8 00000000 		.quad	0
 844      00000000 
 845 1a00 00000000 		.quad	.L38
 845      00000000 
 846 1a08 00000000 		.quad	0
 846      00000000 
 847 1a10 00000000 		.quad	.L38
 847      00000000 
 848 1a18 00000000 		.quad	0
 848      00000000 
 849 1a20 00000000 		.quad	.L38
 849      00000000 
 850 1a28 00000000 		.quad	0
 850      00000000 
 851 1a30 00000000 		.quad	.L38
 851      00000000 
 852 1a38 00000000 		.quad	0
 852      00000000 
 853 1a40 00000000 		.quad	.L38
 853      00000000 
 854 1a48 00000000 		.quad	0
 854      00000000 
 855 1a50 00000000 		.quad	.L38
 855      00000000 
 856 1a58 00000000 		.quad	0
 856      00000000 
 857 1a60 00000000 		.quad	.L38
 857      00000000 
 858 1a68 00000000 		.quad	0
 858      00000000 
 859 1a70 00000000 		.quad	.L38
 859      00000000 
 860 1a78 00000000 		.quad	0
 860      00000000 
 861 1a80 00000000 		.quad	.L38
 861      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 31


 862 1a88 00000000 		.quad	0
 862      00000000 
 863 1a90 00000000 		.quad	.L38
 863      00000000 
 864 1a98 00000000 		.quad	0
 864      00000000 
 865 1aa0 00000000 		.quad	.L38
 865      00000000 
 866 1aa8 00000000 		.quad	0
 866      00000000 
 867 1ab0 00000000 		.quad	.L38
 867      00000000 
 868 1ab8 00000000 		.quad	0
 868      00000000 
 869 1ac0 00000000 		.quad	.L38
 869      00000000 
 870 1ac8 00000000 		.quad	0
 870      00000000 
 871 1ad0 00000000 		.quad	.L38
 871      00000000 
 872 1ad8 00000000 		.quad	0
 872      00000000 
 873 1ae0 00000000 		.quad	.L38
 873      00000000 
 874 1ae8 00000000 		.quad	0
 874      00000000 
 875 1af0 00000000 		.quad	.L38
 875      00000000 
 876 1af8 00000000 		.quad	0
 876      00000000 
 877 1b00 00000000 		.quad	.L38
 877      00000000 
 878 1b08 00000000 		.quad	0
 878      00000000 
 879 1b10 00000000 		.quad	.L38
 879      00000000 
 880 1b18 00000000 		.quad	0
 880      00000000 
 881 1b20 00000000 		.quad	.L38
 881      00000000 
 882 1b28 00000000 		.quad	0
 882      00000000 
 883 1b30 00000000 		.quad	.L38
 883      00000000 
 884 1b38 00000000 		.quad	0
 884      00000000 
 885 1b40 00000000 		.quad	.L38
 885      00000000 
 886 1b48 00000000 		.quad	0
 886      00000000 
 887 1b50 00000000 		.quad	.L38
 887      00000000 
 888 1b58 00000000 		.quad	0
 888      00000000 
 889 1b60 00000000 		.quad	.L38
 889      00000000 
 890 1b68 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 32


 890      00000000 
 891 1b70 00000000 		.quad	.L38
 891      00000000 
 892 1b78 00000000 		.quad	0
 892      00000000 
 893              		.align 16
 894              	.LC4:
 895 1b80 00000000 		.quad	.L42
 895      00000000 
 896 1b88 00000000 		.quad	0
 896      00000000 
 897 1b90 00000000 		.quad	.L43
 897      00000000 
 898 1b98 00000000 		.quad	0
 898      00000000 
 899 1ba0 00000000 		.quad	.L44
 899      00000000 
 900 1ba8 00000000 		.quad	0
 900      00000000 
 901 1bb0 00000000 		.quad	.L43
 901      00000000 
 902 1bb8 00000000 		.quad	0
 902      00000000 
 903 1bc0 00000000 		.quad	.L43
 903      00000000 
 904 1bc8 00000000 		.quad	0
 904      00000000 
 905 1bd0 00000000 		.quad	.L43
 905      00000000 
 906 1bd8 00000000 		.quad	0
 906      00000000 
 907 1be0 00000000 		.quad	.L43
 907      00000000 
 908 1be8 00000000 		.quad	0
 908      00000000 
 909 1bf0 00000000 		.quad	.L43
 909      00000000 
 910 1bf8 00000000 		.quad	0
 910      00000000 
 911 1c00 00000000 		.quad	.L43
 911      00000000 
 912 1c08 00000000 		.quad	0
 912      00000000 
 913 1c10 00000000 		.quad	.L43
 913      00000000 
 914 1c18 00000000 		.quad	0
 914      00000000 
 915 1c20 00000000 		.quad	.L43
 915      00000000 
 916 1c28 00000000 		.quad	0
 916      00000000 
 917 1c30 00000000 		.quad	.L43
 917      00000000 
 918 1c38 00000000 		.quad	0
 918      00000000 
 919 1c40 00000000 		.quad	.L43
 919      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 33


 920 1c48 00000000 		.quad	0
 920      00000000 
 921 1c50 00000000 		.quad	.L43
 921      00000000 
 922 1c58 00000000 		.quad	0
 922      00000000 
 923 1c60 00000000 		.quad	.L43
 923      00000000 
 924 1c68 00000000 		.quad	0
 924      00000000 
 925 1c70 00000000 		.quad	.L43
 925      00000000 
 926 1c78 00000000 		.quad	0
 926      00000000 
 927 1c80 00000000 		.quad	.L43
 927      00000000 
 928 1c88 00000000 		.quad	0
 928      00000000 
 929 1c90 00000000 		.quad	.L43
 929      00000000 
 930 1c98 00000000 		.quad	0
 930      00000000 
 931 1ca0 00000000 		.quad	.L43
 931      00000000 
 932 1ca8 00000000 		.quad	0
 932      00000000 
 933 1cb0 00000000 		.quad	.L43
 933      00000000 
 934 1cb8 00000000 		.quad	0
 934      00000000 
 935 1cc0 00000000 		.quad	.L43
 935      00000000 
 936 1cc8 00000000 		.quad	0
 936      00000000 
 937 1cd0 00000000 		.quad	.L43
 937      00000000 
 938 1cd8 00000000 		.quad	0
 938      00000000 
 939 1ce0 00000000 		.quad	.L43
 939      00000000 
 940 1ce8 00000000 		.quad	0
 940      00000000 
 941 1cf0 00000000 		.quad	.L43
 941      00000000 
 942 1cf8 00000000 		.quad	0
 942      00000000 
 943 1d00 00000000 		.quad	.L43
 943      00000000 
 944 1d08 00000000 		.quad	0
 944      00000000 
 945 1d10 00000000 		.quad	.L43
 945      00000000 
 946 1d18 00000000 		.quad	0
 946      00000000 
 947 1d20 00000000 		.quad	.L43
 947      00000000 
 948 1d28 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 34


 948      00000000 
 949 1d30 00000000 		.quad	.L43
 949      00000000 
 950 1d38 00000000 		.quad	0
 950      00000000 
 951 1d40 00000000 		.quad	.L43
 951      00000000 
 952 1d48 00000000 		.quad	0
 952      00000000 
 953 1d50 00000000 		.quad	.L43
 953      00000000 
 954 1d58 00000000 		.quad	0
 954      00000000 
 955 1d60 00000000 		.quad	.L43
 955      00000000 
 956 1d68 00000000 		.quad	0
 956      00000000 
 957 1d70 00000000 		.quad	.L43
 957      00000000 
 958 1d78 00000000 		.quad	0
 958      00000000 
 959 1d80 00000000 		.quad	.L43
 959      00000000 
 960 1d88 00000000 		.quad	0
 960      00000000 
 961 1d90 00000000 		.quad	.L45
 961      00000000 
 962 1d98 00000000 		.quad	0
 962      00000000 
 963 1da0 00000000 		.quad	.L43
 963      00000000 
 964 1da8 00000000 		.quad	0
 964      00000000 
 965 1db0 00000000 		.quad	.L43
 965      00000000 
 966 1db8 00000000 		.quad	0
 966      00000000 
 967 1dc0 00000000 		.quad	.L43
 967      00000000 
 968 1dc8 00000000 		.quad	0
 968      00000000 
 969 1dd0 00000000 		.quad	.L46
 969      00000000 
 970 1dd8 00000000 		.quad	0
 970      00000000 
 971 1de0 00000000 		.quad	.L43
 971      00000000 
 972 1de8 00000000 		.quad	0
 972      00000000 
 973 1df0 00000000 		.quad	.L43
 973      00000000 
 974 1df8 00000000 		.quad	0
 974      00000000 
 975 1e00 00000000 		.quad	.L43
 975      00000000 
 976 1e08 00000000 		.quad	0
 976      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 35


 977 1e10 00000000 		.quad	.L43
 977      00000000 
 978 1e18 00000000 		.quad	0
 978      00000000 
 979 1e20 00000000 		.quad	.L43
 979      00000000 
 980 1e28 00000000 		.quad	0
 980      00000000 
 981 1e30 00000000 		.quad	.L47
 981      00000000 
 982 1e38 00000000 		.quad	0
 982      00000000 
 983 1e40 00000000 		.quad	.L43
 983      00000000 
 984 1e48 00000000 		.quad	0
 984      00000000 
 985 1e50 00000000 		.quad	.L43
 985      00000000 
 986 1e58 00000000 		.quad	0
 986      00000000 
 987 1e60 00000000 		.quad	.L43
 987      00000000 
 988 1e68 00000000 		.quad	0
 988      00000000 
 989 1e70 00000000 		.quad	.L43
 989      00000000 
 990 1e78 00000000 		.quad	0
 990      00000000 
 991 1e80 00000000 		.quad	.L43
 991      00000000 
 992 1e88 00000000 		.quad	0
 992      00000000 
 993 1e90 00000000 		.quad	.L43
 993      00000000 
 994 1e98 00000000 		.quad	0
 994      00000000 
 995 1ea0 00000000 		.quad	.L43
 995      00000000 
 996 1ea8 00000000 		.quad	0
 996      00000000 
 997 1eb0 00000000 		.quad	.L43
 997      00000000 
 998 1eb8 00000000 		.quad	0
 998      00000000 
 999 1ec0 00000000 		.quad	.L43
 999      00000000 
 1000 1ec8 00000000 		.quad	0
 1000      00000000 
 1001 1ed0 00000000 		.quad	.L43
 1001      00000000 
 1002 1ed8 00000000 		.quad	0
 1002      00000000 
 1003 1ee0 00000000 		.quad	.L43
 1003      00000000 
 1004 1ee8 00000000 		.quad	0
 1004      00000000 
 1005 1ef0 00000000 		.quad	.L43
GAS LISTING /tmp/cc15eBE3.s 			page 36


 1005      00000000 
 1006 1ef8 00000000 		.quad	0
 1006      00000000 
 1007 1f00 00000000 		.quad	.L43
 1007      00000000 
 1008 1f08 00000000 		.quad	0
 1008      00000000 
 1009 1f10 00000000 		.quad	.L43
 1009      00000000 
 1010 1f18 00000000 		.quad	0
 1010      00000000 
 1011 1f20 00000000 		.quad	.L48
 1011      00000000 
 1012 1f28 00000000 		.quad	0
 1012      00000000 
 1013 1f30 00000000 		.quad	.L43
 1013      00000000 
 1014 1f38 00000000 		.quad	0
 1014      00000000 
 1015 1f40 00000000 		.quad	.L43
 1015      00000000 
 1016 1f48 00000000 		.quad	0
 1016      00000000 
 1017 1f50 00000000 		.quad	.L43
 1017      00000000 
 1018 1f58 00000000 		.quad	0
 1018      00000000 
 1019 1f60 00000000 		.quad	.L43
 1019      00000000 
 1020 1f68 00000000 		.quad	0
 1020      00000000 
 1021 1f70 00000000 		.quad	.L43
 1021      00000000 
 1022 1f78 00000000 		.quad	0
 1022      00000000 
 1023 1f80 00000000 		.quad	.L43
 1023      00000000 
 1024 1f88 00000000 		.quad	0
 1024      00000000 
 1025 1f90 00000000 		.quad	.L43
 1025      00000000 
 1026 1f98 00000000 		.quad	0
 1026      00000000 
 1027 1fa0 00000000 		.quad	.L43
 1027      00000000 
 1028 1fa8 00000000 		.quad	0
 1028      00000000 
 1029 1fb0 00000000 		.quad	.L43
 1029      00000000 
 1030 1fb8 00000000 		.quad	0
 1030      00000000 
 1031 1fc0 00000000 		.quad	.L43
 1031      00000000 
 1032 1fc8 00000000 		.quad	0
 1032      00000000 
 1033 1fd0 00000000 		.quad	.L43
 1033      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 37


 1034 1fd8 00000000 		.quad	0
 1034      00000000 
 1035 1fe0 00000000 		.quad	.L43
 1035      00000000 
 1036 1fe8 00000000 		.quad	0
 1036      00000000 
 1037 1ff0 00000000 		.quad	.L43
 1037      00000000 
 1038 1ff8 00000000 		.quad	0
 1038      00000000 
 1039 2000 00000000 		.quad	.L43
 1039      00000000 
 1040 2008 00000000 		.quad	0
 1040      00000000 
 1041 2010 00000000 		.quad	.L43
 1041      00000000 
 1042 2018 00000000 		.quad	0
 1042      00000000 
 1043 2020 00000000 		.quad	.L43
 1043      00000000 
 1044 2028 00000000 		.quad	0
 1044      00000000 
 1045 2030 00000000 		.quad	.L43
 1045      00000000 
 1046 2038 00000000 		.quad	0
 1046      00000000 
 1047 2040 00000000 		.quad	.L43
 1047      00000000 
 1048 2048 00000000 		.quad	0
 1048      00000000 
 1049 2050 00000000 		.quad	.L43
 1049      00000000 
 1050 2058 00000000 		.quad	0
 1050      00000000 
 1051 2060 00000000 		.quad	.L43
 1051      00000000 
 1052 2068 00000000 		.quad	0
 1052      00000000 
 1053 2070 00000000 		.quad	.L43
 1053      00000000 
 1054 2078 00000000 		.quad	0
 1054      00000000 
 1055 2080 00000000 		.quad	.L43
 1055      00000000 
 1056 2088 00000000 		.quad	0
 1056      00000000 
 1057 2090 00000000 		.quad	.L43
 1057      00000000 
 1058 2098 00000000 		.quad	0
 1058      00000000 
 1059 20a0 00000000 		.quad	.L43
 1059      00000000 
 1060 20a8 00000000 		.quad	0
 1060      00000000 
 1061 20b0 00000000 		.quad	.L43
 1061      00000000 
 1062 20b8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 38


 1062      00000000 
 1063 20c0 00000000 		.quad	.L43
 1063      00000000 
 1064 20c8 00000000 		.quad	0
 1064      00000000 
 1065 20d0 00000000 		.quad	.L43
 1065      00000000 
 1066 20d8 00000000 		.quad	0
 1066      00000000 
 1067 20e0 00000000 		.quad	.L49
 1067      00000000 
 1068 20e8 00000000 		.quad	0
 1068      00000000 
 1069 20f0 00000000 		.quad	.L43
 1069      00000000 
 1070 20f8 00000000 		.quad	0
 1070      00000000 
 1071 2100 00000000 		.quad	.L43
 1071      00000000 
 1072 2108 00000000 		.quad	0
 1072      00000000 
 1073 2110 00000000 		.quad	.L43
 1073      00000000 
 1074 2118 00000000 		.quad	0
 1074      00000000 
 1075 2120 00000000 		.quad	.L43
 1075      00000000 
 1076 2128 00000000 		.quad	0
 1076      00000000 
 1077 2130 00000000 		.quad	.L43
 1077      00000000 
 1078 2138 00000000 		.quad	0
 1078      00000000 
 1079 2140 00000000 		.quad	.L43
 1079      00000000 
 1080 2148 00000000 		.quad	0
 1080      00000000 
 1081 2150 00000000 		.quad	.L43
 1081      00000000 
 1082 2158 00000000 		.quad	0
 1082      00000000 
 1083 2160 00000000 		.quad	.L43
 1083      00000000 
 1084 2168 00000000 		.quad	0
 1084      00000000 
 1085 2170 00000000 		.quad	.L43
 1085      00000000 
 1086 2178 00000000 		.quad	0
 1086      00000000 
 1087 2180 00000000 		.quad	.L43
 1087      00000000 
 1088 2188 00000000 		.quad	0
 1088      00000000 
 1089 2190 00000000 		.quad	.L43
 1089      00000000 
 1090 2198 00000000 		.quad	0
 1090      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 39


 1091 21a0 00000000 		.quad	.L43
 1091      00000000 
 1092 21a8 00000000 		.quad	0
 1092      00000000 
 1093 21b0 00000000 		.quad	.L43
 1093      00000000 
 1094 21b8 00000000 		.quad	0
 1094      00000000 
 1095 21c0 00000000 		.quad	.L43
 1095      00000000 
 1096 21c8 00000000 		.quad	0
 1096      00000000 
 1097 21d0 00000000 		.quad	.L43
 1097      00000000 
 1098 21d8 00000000 		.quad	0
 1098      00000000 
 1099 21e0 00000000 		.quad	.L43
 1099      00000000 
 1100 21e8 00000000 		.quad	0
 1100      00000000 
 1101 21f0 00000000 		.quad	.L43
 1101      00000000 
 1102 21f8 00000000 		.quad	0
 1102      00000000 
 1103 2200 00000000 		.quad	.L43
 1103      00000000 
 1104 2208 00000000 		.quad	0
 1104      00000000 
 1105 2210 00000000 		.quad	.L43
 1105      00000000 
 1106 2218 00000000 		.quad	0
 1106      00000000 
 1107 2220 00000000 		.quad	.L43
 1107      00000000 
 1108 2228 00000000 		.quad	0
 1108      00000000 
 1109 2230 00000000 		.quad	.L43
 1109      00000000 
 1110 2238 00000000 		.quad	0
 1110      00000000 
 1111 2240 00000000 		.quad	.L43
 1111      00000000 
 1112 2248 00000000 		.quad	0
 1112      00000000 
 1113 2250 00000000 		.quad	.L43
 1113      00000000 
 1114 2258 00000000 		.quad	0
 1114      00000000 
 1115              		.align 16
 1116              	.LC5:
 1117 2260 00000000 		.quad	.L50
 1117      00000000 
 1118 2268 00000000 		.quad	0
 1118      00000000 
 1119 2270 00000000 		.quad	.L51
 1119      00000000 
 1120 2278 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 40


 1120      00000000 
 1121 2280 00000000 		.quad	.L52
 1121      00000000 
 1122 2288 00000000 		.quad	0
 1122      00000000 
 1123 2290 00000000 		.quad	.L53
 1123      00000000 
 1124 2298 00000000 		.quad	0
 1124      00000000 
 1125 22a0 00000000 		.quad	.L53
 1125      00000000 
 1126 22a8 00000000 		.quad	0
 1126      00000000 
 1127 22b0 00000000 		.quad	.L51
 1127      00000000 
 1128 22b8 00000000 		.quad	0
 1128      00000000 
 1129 22c0 00000000 		.quad	.L53
 1129      00000000 
 1130 22c8 00000000 		.quad	0
 1130      00000000 
 1131 22d0 00000000 		.quad	.L53
 1131      00000000 
 1132 22d8 00000000 		.quad	0
 1132      00000000 
 1133 22e0 00000000 		.quad	.L53
 1133      00000000 
 1134 22e8 00000000 		.quad	0
 1134      00000000 
 1135 22f0 00000000 		.quad	.L53
 1135      00000000 
 1136 22f8 00000000 		.quad	0
 1136      00000000 
 1137 2300 00000000 		.quad	.L53
 1137      00000000 
 1138 2308 00000000 		.quad	0
 1138      00000000 
 1139 2310 00000000 		.quad	.L53
 1139      00000000 
 1140 2318 00000000 		.quad	0
 1140      00000000 
 1141 2320 00000000 		.quad	.L53
 1141      00000000 
 1142 2328 00000000 		.quad	0
 1142      00000000 
 1143 2330 00000000 		.quad	.L51
 1143      00000000 
 1144 2338 00000000 		.quad	0
 1144      00000000 
 1145 2340 00000000 		.quad	.L51
 1145      00000000 
 1146 2348 00000000 		.quad	0
 1146      00000000 
 1147 2350 00000000 		.quad	.L51
 1147      00000000 
 1148 2358 00000000 		.quad	0
 1148      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 41


 1149 2360 00000000 		.quad	.L53
 1149      00000000 
 1150 2368 00000000 		.quad	0
 1150      00000000 
 1151 2370 00000000 		.quad	.L53
 1151      00000000 
 1152 2378 00000000 		.quad	0
 1152      00000000 
 1153 2380 00000000 		.quad	.L53
 1153      00000000 
 1154 2388 00000000 		.quad	0
 1154      00000000 
 1155 2390 00000000 		.quad	.L53
 1155      00000000 
 1156 2398 00000000 		.quad	0
 1156      00000000 
 1157 23a0 00000000 		.quad	.L51
 1157      00000000 
 1158 23a8 00000000 		.quad	0
 1158      00000000 
 1159 23b0 00000000 		.quad	.L51
 1159      00000000 
 1160 23b8 00000000 		.quad	0
 1160      00000000 
 1161 23c0 00000000 		.quad	.L51
 1161      00000000 
 1162 23c8 00000000 		.quad	0
 1162      00000000 
 1163 23d0 00000000 		.quad	.L51
 1163      00000000 
 1164 23d8 00000000 		.quad	0
 1164      00000000 
 1165 23e0 00000000 		.quad	.L54
 1165      00000000 
 1166 23e8 00000000 		.quad	0
 1166      00000000 
 1167 23f0 00000000 		.quad	.L53
 1167      00000000 
 1168 23f8 00000000 		.quad	0
 1168      00000000 
 1169 2400 00000000 		.quad	.L53
 1169      00000000 
 1170 2408 00000000 		.quad	0
 1170      00000000 
 1171 2410 00000000 		.quad	.L53
 1171      00000000 
 1172 2418 00000000 		.quad	0
 1172      00000000 
 1173 2420 00000000 		.quad	.L51
 1173      00000000 
 1174 2428 00000000 		.quad	0
 1174      00000000 
 1175 2430 00000000 		.quad	.L51
 1175      00000000 
 1176 2438 00000000 		.quad	0
 1176      00000000 
 1177 2440 00000000 		.quad	.L51
GAS LISTING /tmp/cc15eBE3.s 			page 42


 1177      00000000 
 1178 2448 00000000 		.quad	0
 1178      00000000 
 1179 2450 00000000 		.quad	.L51
 1179      00000000 
 1180 2458 00000000 		.quad	0
 1180      00000000 
 1181 2460 00000000 		.quad	.L53
 1181      00000000 
 1182 2468 00000000 		.quad	0
 1182      00000000 
 1183 2470 00000000 		.quad	.L55
 1183      00000000 
 1184 2478 00000000 		.quad	0
 1184      00000000 
 1185 2480 00000000 		.quad	.L53
 1185      00000000 
 1186 2488 00000000 		.quad	0
 1186      00000000 
 1187 2490 00000000 		.quad	.L56
 1187      00000000 
 1188 2498 00000000 		.quad	0
 1188      00000000 
 1189 24a0 00000000 		.quad	.L53
 1189      00000000 
 1190 24a8 00000000 		.quad	0
 1190      00000000 
 1191 24b0 00000000 		.quad	.L53
 1191      00000000 
 1192 24b8 00000000 		.quad	0
 1192      00000000 
 1193 24c0 00000000 		.quad	.L53
 1193      00000000 
 1194 24c8 00000000 		.quad	0
 1194      00000000 
 1195 24d0 00000000 		.quad	.L57
 1195      00000000 
 1196 24d8 00000000 		.quad	0
 1196      00000000 
 1197 24e0 00000000 		.quad	.L51
 1197      00000000 
 1198 24e8 00000000 		.quad	0
 1198      00000000 
 1199 24f0 00000000 		.quad	.L51
 1199      00000000 
 1200 24f8 00000000 		.quad	0
 1200      00000000 
 1201 2500 00000000 		.quad	.L58
 1201      00000000 
 1202 2508 00000000 		.quad	0
 1202      00000000 
 1203 2510 00000000 		.quad	.L53
 1203      00000000 
 1204 2518 00000000 		.quad	0
 1204      00000000 
 1205 2520 00000000 		.quad	.L53
 1205      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 43


 1206 2528 00000000 		.quad	0
 1206      00000000 
 1207 2530 00000000 		.quad	.L59
 1207      00000000 
 1208 2538 00000000 		.quad	0
 1208      00000000 
 1209 2540 00000000 		.quad	.L60
 1209      00000000 
 1210 2548 00000000 		.quad	0
 1210      00000000 
 1211 2550 00000000 		.quad	.L53
 1211      00000000 
 1212 2558 00000000 		.quad	0
 1212      00000000 
 1213 2560 00000000 		.quad	.L61
 1213      00000000 
 1214 2568 00000000 		.quad	0
 1214      00000000 
 1215 2570 00000000 		.quad	.L53
 1215      00000000 
 1216 2578 00000000 		.quad	0
 1216      00000000 
 1217 2580 00000000 		.quad	.L53
 1217      00000000 
 1218 2588 00000000 		.quad	0
 1218      00000000 
 1219 2590 00000000 		.quad	.L53
 1219      00000000 
 1220 2598 00000000 		.quad	0
 1220      00000000 
 1221 25a0 00000000 		.quad	.L62
 1221      00000000 
 1222 25a8 00000000 		.quad	0
 1222      00000000 
 1223 25b0 00000000 		.quad	.L63
 1223      00000000 
 1224 25b8 00000000 		.quad	0
 1224      00000000 
 1225 25c0 00000000 		.quad	.L53
 1225      00000000 
 1226 25c8 00000000 		.quad	0
 1226      00000000 
 1227 25d0 00000000 		.quad	.L64
 1227      00000000 
 1228 25d8 00000000 		.quad	0
 1228      00000000 
 1229 25e0 00000000 		.quad	.L53
 1229      00000000 
 1230 25e8 00000000 		.quad	0
 1230      00000000 
 1231 25f0 00000000 		.quad	.L53
 1231      00000000 
 1232 25f8 00000000 		.quad	0
 1232      00000000 
 1233 2600 00000000 		.quad	.L65
 1233      00000000 
 1234 2608 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 44


 1234      00000000 
 1235 2610 00000000 		.quad	.L51
 1235      00000000 
 1236 2618 00000000 		.quad	0
 1236      00000000 
 1237 2620 00000000 		.quad	.L51
 1237      00000000 
 1238 2628 00000000 		.quad	0
 1238      00000000 
 1239 2630 00000000 		.quad	.L51
 1239      00000000 
 1240 2638 00000000 		.quad	0
 1240      00000000 
 1241 2640 00000000 		.quad	.L51
 1241      00000000 
 1242 2648 00000000 		.quad	0
 1242      00000000 
 1243 2650 00000000 		.quad	.L51
 1243      00000000 
 1244 2658 00000000 		.quad	0
 1244      00000000 
 1245 2660 00000000 		.quad	.L51
 1245      00000000 
 1246 2668 00000000 		.quad	0
 1246      00000000 
 1247 2670 00000000 		.quad	.L51
 1247      00000000 
 1248 2678 00000000 		.quad	0
 1248      00000000 
 1249 2680 00000000 		.quad	.L51
 1249      00000000 
 1250 2688 00000000 		.quad	0
 1250      00000000 
 1251 2690 00000000 		.quad	.L53
 1251      00000000 
 1252 2698 00000000 		.quad	0
 1252      00000000 
 1253 26a0 00000000 		.quad	.L53
 1253      00000000 
 1254 26a8 00000000 		.quad	0
 1254      00000000 
 1255 26b0 00000000 		.quad	.L53
 1255      00000000 
 1256 26b8 00000000 		.quad	0
 1256      00000000 
 1257 26c0 00000000 		.quad	.L51
 1257      00000000 
 1258 26c8 00000000 		.quad	0
 1258      00000000 
 1259 26d0 00000000 		.quad	.L51
 1259      00000000 
 1260 26d8 00000000 		.quad	0
 1260      00000000 
 1261 26e0 00000000 		.quad	.L51
 1261      00000000 
 1262 26e8 00000000 		.quad	0
 1262      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 45


 1263 26f0 00000000 		.quad	.L51
 1263      00000000 
 1264 26f8 00000000 		.quad	0
 1264      00000000 
 1265 2700 00000000 		.quad	.L51
 1265      00000000 
 1266 2708 00000000 		.quad	0
 1266      00000000 
 1267 2710 00000000 		.quad	.L53
 1267      00000000 
 1268 2718 00000000 		.quad	0
 1268      00000000 
 1269 2720 00000000 		.quad	.L53
 1269      00000000 
 1270 2728 00000000 		.quad	0
 1270      00000000 
 1271 2730 00000000 		.quad	.L53
 1271      00000000 
 1272 2738 00000000 		.quad	0
 1272      00000000 
 1273 2740 00000000 		.quad	.L66
 1273      00000000 
 1274 2748 00000000 		.quad	0
 1274      00000000 
 1275 2750 00000000 		.quad	.L67
 1275      00000000 
 1276 2758 00000000 		.quad	0
 1276      00000000 
 1277 2760 00000000 		.quad	.L53
 1277      00000000 
 1278 2768 00000000 		.quad	0
 1278      00000000 
 1279 2770 00000000 		.quad	.L53
 1279      00000000 
 1280 2778 00000000 		.quad	0
 1280      00000000 
 1281 2780 00000000 		.quad	.L51
 1281      00000000 
 1282 2788 00000000 		.quad	0
 1282      00000000 
 1283 2790 00000000 		.quad	.L53
 1283      00000000 
 1284 2798 00000000 		.quad	0
 1284      00000000 
 1285 27a0 00000000 		.quad	.L53
 1285      00000000 
 1286 27a8 00000000 		.quad	0
 1286      00000000 
 1287 27b0 00000000 		.quad	.L53
 1287      00000000 
 1288 27b8 00000000 		.quad	0
 1288      00000000 
 1289 27c0 00000000 		.quad	.L68
 1289      00000000 
 1290 27c8 00000000 		.quad	0
 1290      00000000 
 1291 27d0 00000000 		.quad	.L51
GAS LISTING /tmp/cc15eBE3.s 			page 46


 1291      00000000 
 1292 27d8 00000000 		.quad	0
 1292      00000000 
 1293 27e0 00000000 		.quad	.L51
 1293      00000000 
 1294 27e8 00000000 		.quad	0
 1294      00000000 
 1295 27f0 00000000 		.quad	.L53
 1295      00000000 
 1296 27f8 00000000 		.quad	0
 1296      00000000 
 1297 2800 00000000 		.quad	.L51
 1297      00000000 
 1298 2808 00000000 		.quad	0
 1298      00000000 
 1299 2810 00000000 		.quad	.L51
 1299      00000000 
 1300 2818 00000000 		.quad	0
 1300      00000000 
 1301 2820 00000000 		.quad	.L51
 1301      00000000 
 1302 2828 00000000 		.quad	0
 1302      00000000 
 1303 2830 00000000 		.quad	.L51
 1303      00000000 
 1304 2838 00000000 		.quad	0
 1304      00000000 
 1305 2840 00000000 		.quad	.L51
 1305      00000000 
 1306 2848 00000000 		.quad	0
 1306      00000000 
 1307 2850 00000000 		.quad	.L51
 1307      00000000 
 1308 2858 00000000 		.quad	0
 1308      00000000 
 1309 2860 00000000 		.quad	.L51
 1309      00000000 
 1310 2868 00000000 		.quad	0
 1310      00000000 
 1311 2870 00000000 		.quad	.L51
 1311      00000000 
 1312 2878 00000000 		.quad	0
 1312      00000000 
 1313 2880 00000000 		.quad	.L51
 1313      00000000 
 1314 2888 00000000 		.quad	0
 1314      00000000 
 1315 2890 00000000 		.quad	.L51
 1315      00000000 
 1316 2898 00000000 		.quad	0
 1316      00000000 
 1317 28a0 00000000 		.quad	.L51
 1317      00000000 
 1318 28a8 00000000 		.quad	0
 1318      00000000 
 1319 28b0 00000000 		.quad	.L51
 1319      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 47


 1320 28b8 00000000 		.quad	0
 1320      00000000 
 1321 28c0 00000000 		.quad	.L51
 1321      00000000 
 1322 28c8 00000000 		.quad	0
 1322      00000000 
 1323 28d0 00000000 		.quad	.L51
 1323      00000000 
 1324 28d8 00000000 		.quad	0
 1324      00000000 
 1325 28e0 00000000 		.quad	.L51
 1325      00000000 
 1326 28e8 00000000 		.quad	0
 1326      00000000 
 1327 28f0 00000000 		.quad	.L51
 1327      00000000 
 1328 28f8 00000000 		.quad	0
 1328      00000000 
 1329 2900 00000000 		.quad	.L51
 1329      00000000 
 1330 2908 00000000 		.quad	0
 1330      00000000 
 1331 2910 00000000 		.quad	.L51
 1331      00000000 
 1332 2918 00000000 		.quad	0
 1332      00000000 
 1333 2920 00000000 		.quad	.L51
 1333      00000000 
 1334 2928 00000000 		.quad	0
 1334      00000000 
 1335 2930 00000000 		.quad	.L51
 1335      00000000 
 1336 2938 00000000 		.quad	0
 1336      00000000 
 1337              		.align 16
 1338              	.LC6:
 1339 2940 00000000 		.quad	.L69
 1339      00000000 
 1340 2948 00000000 		.quad	0
 1340      00000000 
 1341 2950 00000000 		.quad	.L69
 1341      00000000 
 1342 2958 00000000 		.quad	0
 1342      00000000 
 1343 2960 00000000 		.quad	.L69
 1343      00000000 
 1344 2968 00000000 		.quad	0
 1344      00000000 
 1345 2970 00000000 		.quad	.L69
 1345      00000000 
 1346 2978 00000000 		.quad	0
 1346      00000000 
 1347 2980 00000000 		.quad	.L69
 1347      00000000 
 1348 2988 00000000 		.quad	0
 1348      00000000 
 1349 2990 00000000 		.quad	.L69
GAS LISTING /tmp/cc15eBE3.s 			page 48


 1349      00000000 
 1350 2998 00000000 		.quad	0
 1350      00000000 
 1351 29a0 00000000 		.quad	.L69
 1351      00000000 
 1352 29a8 00000000 		.quad	0
 1352      00000000 
 1353 29b0 00000000 		.quad	.L69
 1353      00000000 
 1354 29b8 00000000 		.quad	0
 1354      00000000 
 1355 29c0 00000000 		.quad	.L69
 1355      00000000 
 1356 29c8 00000000 		.quad	0
 1356      00000000 
 1357 29d0 00000000 		.quad	.L69
 1357      00000000 
 1358 29d8 00000000 		.quad	0
 1358      00000000 
 1359 29e0 00000000 		.quad	.L69
 1359      00000000 
 1360 29e8 00000000 		.quad	0
 1360      00000000 
 1361 29f0 00000000 		.quad	.L70
 1361      00000000 
 1362 29f8 00000000 		.quad	0
 1362      00000000 
 1363 2a00 00000000 		.quad	.L69
 1363      00000000 
 1364 2a08 00000000 		.quad	0
 1364      00000000 
 1365 2a10 00000000 		.quad	.L69
 1365      00000000 
 1366 2a18 00000000 		.quad	0
 1366      00000000 
 1367 2a20 00000000 		.quad	.L69
 1367      00000000 
 1368 2a28 00000000 		.quad	0
 1368      00000000 
 1369 2a30 00000000 		.quad	.L69
 1369      00000000 
 1370 2a38 00000000 		.quad	0
 1370      00000000 
 1371 2a40 00000000 		.quad	.L69
 1371      00000000 
 1372 2a48 00000000 		.quad	0
 1372      00000000 
 1373 2a50 00000000 		.quad	.L69
 1373      00000000 
 1374 2a58 00000000 		.quad	0
 1374      00000000 
 1375 2a60 00000000 		.quad	.L69
 1375      00000000 
 1376 2a68 00000000 		.quad	0
 1376      00000000 
 1377 2a70 00000000 		.quad	.L69
 1377      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 49


 1378 2a78 00000000 		.quad	0
 1378      00000000 
 1379 2a80 00000000 		.quad	.L69
 1379      00000000 
 1380 2a88 00000000 		.quad	0
 1380      00000000 
 1381 2a90 00000000 		.quad	.L69
 1381      00000000 
 1382 2a98 00000000 		.quad	0
 1382      00000000 
 1383 2aa0 00000000 		.quad	.L69
 1383      00000000 
 1384 2aa8 00000000 		.quad	0
 1384      00000000 
 1385 2ab0 00000000 		.quad	.L69
 1385      00000000 
 1386 2ab8 00000000 		.quad	0
 1386      00000000 
 1387 2ac0 00000000 		.quad	.L69
 1387      00000000 
 1388 2ac8 00000000 		.quad	0
 1388      00000000 
 1389 2ad0 00000000 		.quad	.L69
 1389      00000000 
 1390 2ad8 00000000 		.quad	0
 1390      00000000 
 1391 2ae0 00000000 		.quad	.L69
 1391      00000000 
 1392 2ae8 00000000 		.quad	0
 1392      00000000 
 1393 2af0 00000000 		.quad	.L69
 1393      00000000 
 1394 2af8 00000000 		.quad	0
 1394      00000000 
 1395 2b00 00000000 		.quad	.L69
 1395      00000000 
 1396 2b08 00000000 		.quad	0
 1396      00000000 
 1397 2b10 00000000 		.quad	.L69
 1397      00000000 
 1398 2b18 00000000 		.quad	0
 1398      00000000 
 1399 2b20 00000000 		.quad	.L69
 1399      00000000 
 1400 2b28 00000000 		.quad	0
 1400      00000000 
 1401 2b30 00000000 		.quad	.L69
 1401      00000000 
 1402 2b38 00000000 		.quad	0
 1402      00000000 
 1403 2b40 00000000 		.quad	.L69
 1403      00000000 
 1404 2b48 00000000 		.quad	0
 1404      00000000 
 1405 2b50 00000000 		.quad	.L69
 1405      00000000 
 1406 2b58 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 50


 1406      00000000 
 1407 2b60 00000000 		.quad	.L69
 1407      00000000 
 1408 2b68 00000000 		.quad	0
 1408      00000000 
 1409 2b70 00000000 		.quad	.L69
 1409      00000000 
 1410 2b78 00000000 		.quad	0
 1410      00000000 
 1411 2b80 00000000 		.quad	.L69
 1411      00000000 
 1412 2b88 00000000 		.quad	0
 1412      00000000 
 1413 2b90 00000000 		.quad	.L69
 1413      00000000 
 1414 2b98 00000000 		.quad	0
 1414      00000000 
 1415 2ba0 00000000 		.quad	.L69
 1415      00000000 
 1416 2ba8 00000000 		.quad	0
 1416      00000000 
 1417 2bb0 00000000 		.quad	.L69
 1417      00000000 
 1418 2bb8 00000000 		.quad	0
 1418      00000000 
 1419 2bc0 00000000 		.quad	.L69
 1419      00000000 
 1420 2bc8 00000000 		.quad	0
 1420      00000000 
 1421 2bd0 00000000 		.quad	.L69
 1421      00000000 
 1422 2bd8 00000000 		.quad	0
 1422      00000000 
 1423 2be0 00000000 		.quad	.L69
 1423      00000000 
 1424 2be8 00000000 		.quad	0
 1424      00000000 
 1425 2bf0 00000000 		.quad	.L69
 1425      00000000 
 1426 2bf8 00000000 		.quad	0
 1426      00000000 
 1427 2c00 00000000 		.quad	.L69
 1427      00000000 
 1428 2c08 00000000 		.quad	0
 1428      00000000 
 1429 2c10 00000000 		.quad	.L69
 1429      00000000 
 1430 2c18 00000000 		.quad	0
 1430      00000000 
 1431 2c20 00000000 		.quad	.L69
 1431      00000000 
 1432 2c28 00000000 		.quad	0
 1432      00000000 
 1433 2c30 00000000 		.quad	.L71
 1433      00000000 
 1434 2c38 00000000 		.quad	0
 1434      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 51


 1435 2c40 00000000 		.quad	.L69
 1435      00000000 
 1436 2c48 00000000 		.quad	0
 1436      00000000 
 1437 2c50 00000000 		.quad	.L69
 1437      00000000 
 1438 2c58 00000000 		.quad	0
 1438      00000000 
 1439 2c60 00000000 		.quad	.L69
 1439      00000000 
 1440 2c68 00000000 		.quad	0
 1440      00000000 
 1441 2c70 00000000 		.quad	.L69
 1441      00000000 
 1442 2c78 00000000 		.quad	0
 1442      00000000 
 1443 2c80 00000000 		.quad	.L72
 1443      00000000 
 1444 2c88 00000000 		.quad	0
 1444      00000000 
 1445 2c90 00000000 		.quad	.L69
 1445      00000000 
 1446 2c98 00000000 		.quad	0
 1446      00000000 
 1447 2ca0 00000000 		.quad	.L69
 1447      00000000 
 1448 2ca8 00000000 		.quad	0
 1448      00000000 
 1449 2cb0 00000000 		.quad	.L69
 1449      00000000 
 1450 2cb8 00000000 		.quad	0
 1450      00000000 
 1451 2cc0 00000000 		.quad	.L69
 1451      00000000 
 1452 2cc8 00000000 		.quad	0
 1452      00000000 
 1453 2cd0 00000000 		.quad	.L69
 1453      00000000 
 1454 2cd8 00000000 		.quad	0
 1454      00000000 
 1455 2ce0 00000000 		.quad	.L69
 1455      00000000 
 1456 2ce8 00000000 		.quad	0
 1456      00000000 
 1457 2cf0 00000000 		.quad	.L69
 1457      00000000 
 1458 2cf8 00000000 		.quad	0
 1458      00000000 
 1459 2d00 00000000 		.quad	.L69
 1459      00000000 
 1460 2d08 00000000 		.quad	0
 1460      00000000 
 1461 2d10 00000000 		.quad	.L69
 1461      00000000 
 1462 2d18 00000000 		.quad	0
 1462      00000000 
 1463 2d20 00000000 		.quad	.L69
GAS LISTING /tmp/cc15eBE3.s 			page 52


 1463      00000000 
 1464 2d28 00000000 		.quad	0
 1464      00000000 
 1465 2d30 00000000 		.quad	.L69
 1465      00000000 
 1466 2d38 00000000 		.quad	0
 1466      00000000 
 1467 2d40 00000000 		.quad	.L69
 1467      00000000 
 1468 2d48 00000000 		.quad	0
 1468      00000000 
 1469 2d50 00000000 		.quad	.L69
 1469      00000000 
 1470 2d58 00000000 		.quad	0
 1470      00000000 
 1471 2d60 00000000 		.quad	.L69
 1471      00000000 
 1472 2d68 00000000 		.quad	0
 1472      00000000 
 1473 2d70 00000000 		.quad	.L69
 1473      00000000 
 1474 2d78 00000000 		.quad	0
 1474      00000000 
 1475 2d80 00000000 		.quad	.L69
 1475      00000000 
 1476 2d88 00000000 		.quad	0
 1476      00000000 
 1477 2d90 00000000 		.quad	.L69
 1477      00000000 
 1478 2d98 00000000 		.quad	0
 1478      00000000 
 1479 2da0 00000000 		.quad	.L69
 1479      00000000 
 1480 2da8 00000000 		.quad	0
 1480      00000000 
 1481 2db0 00000000 		.quad	.L69
 1481      00000000 
 1482 2db8 00000000 		.quad	0
 1482      00000000 
 1483 2dc0 00000000 		.quad	.L69
 1483      00000000 
 1484 2dc8 00000000 		.quad	0
 1484      00000000 
 1485 2dd0 00000000 		.quad	.L69
 1485      00000000 
 1486 2dd8 00000000 		.quad	0
 1486      00000000 
 1487 2de0 00000000 		.quad	.L69
 1487      00000000 
 1488 2de8 00000000 		.quad	0
 1488      00000000 
 1489 2df0 00000000 		.quad	.L69
 1489      00000000 
 1490 2df8 00000000 		.quad	0
 1490      00000000 
 1491 2e00 00000000 		.quad	.L69
 1491      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 53


 1492 2e08 00000000 		.quad	0
 1492      00000000 
 1493 2e10 00000000 		.quad	.L69
 1493      00000000 
 1494 2e18 00000000 		.quad	0
 1494      00000000 
 1495 2e20 00000000 		.quad	.L73
 1495      00000000 
 1496 2e28 00000000 		.quad	0
 1496      00000000 
 1497 2e30 00000000 		.quad	.L69
 1497      00000000 
 1498 2e38 00000000 		.quad	0
 1498      00000000 
 1499 2e40 00000000 		.quad	.L69
 1499      00000000 
 1500 2e48 00000000 		.quad	0
 1500      00000000 
 1501 2e50 00000000 		.quad	.L69
 1501      00000000 
 1502 2e58 00000000 		.quad	0
 1502      00000000 
 1503 2e60 00000000 		.quad	.L69
 1503      00000000 
 1504 2e68 00000000 		.quad	0
 1504      00000000 
 1505 2e70 00000000 		.quad	.L69
 1505      00000000 
 1506 2e78 00000000 		.quad	0
 1506      00000000 
 1507 2e80 00000000 		.quad	.L69
 1507      00000000 
 1508 2e88 00000000 		.quad	0
 1508      00000000 
 1509 2e90 00000000 		.quad	.L69
 1509      00000000 
 1510 2e98 00000000 		.quad	0
 1510      00000000 
 1511 2ea0 00000000 		.quad	.L69
 1511      00000000 
 1512 2ea8 00000000 		.quad	0
 1512      00000000 
 1513 2eb0 00000000 		.quad	.L69
 1513      00000000 
 1514 2eb8 00000000 		.quad	0
 1514      00000000 
 1515 2ec0 00000000 		.quad	.L69
 1515      00000000 
 1516 2ec8 00000000 		.quad	0
 1516      00000000 
 1517 2ed0 00000000 		.quad	.L69
 1517      00000000 
 1518 2ed8 00000000 		.quad	0
 1518      00000000 
 1519 2ee0 00000000 		.quad	.L69
 1519      00000000 
 1520 2ee8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 54


 1520      00000000 
 1521 2ef0 00000000 		.quad	.L69
 1521      00000000 
 1522 2ef8 00000000 		.quad	0
 1522      00000000 
 1523 2f00 00000000 		.quad	.L69
 1523      00000000 
 1524 2f08 00000000 		.quad	0
 1524      00000000 
 1525 2f10 00000000 		.quad	.L69
 1525      00000000 
 1526 2f18 00000000 		.quad	0
 1526      00000000 
 1527 2f20 00000000 		.quad	.L69
 1527      00000000 
 1528 2f28 00000000 		.quad	0
 1528      00000000 
 1529 2f30 00000000 		.quad	.L69
 1529      00000000 
 1530 2f38 00000000 		.quad	0
 1530      00000000 
 1531 2f40 00000000 		.quad	.L69
 1531      00000000 
 1532 2f48 00000000 		.quad	0
 1532      00000000 
 1533 2f50 00000000 		.quad	.L69
 1533      00000000 
 1534 2f58 00000000 		.quad	0
 1534      00000000 
 1535 2f60 00000000 		.quad	.L69
 1535      00000000 
 1536 2f68 00000000 		.quad	0
 1536      00000000 
 1537 2f70 00000000 		.quad	.L69
 1537      00000000 
 1538 2f78 00000000 		.quad	0
 1538      00000000 
 1539 2f80 00000000 		.quad	.L69
 1539      00000000 
 1540 2f88 00000000 		.quad	0
 1540      00000000 
 1541 2f90 00000000 		.quad	.L69
 1541      00000000 
 1542 2f98 00000000 		.quad	0
 1542      00000000 
 1543 2fa0 00000000 		.quad	.L69
 1543      00000000 
 1544 2fa8 00000000 		.quad	0
 1544      00000000 
 1545 2fb0 00000000 		.quad	.L69
 1545      00000000 
 1546 2fb8 00000000 		.quad	0
 1546      00000000 
 1547 2fc0 00000000 		.quad	.L69
 1547      00000000 
 1548 2fc8 00000000 		.quad	0
 1548      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 55


 1549 2fd0 00000000 		.quad	.L69
 1549      00000000 
 1550 2fd8 00000000 		.quad	0
 1550      00000000 
 1551 2fe0 00000000 		.quad	.L69
 1551      00000000 
 1552 2fe8 00000000 		.quad	0
 1552      00000000 
 1553 2ff0 00000000 		.quad	.L69
 1553      00000000 
 1554 2ff8 00000000 		.quad	0
 1554      00000000 
 1555 3000 00000000 		.quad	.L69
 1555      00000000 
 1556 3008 00000000 		.quad	0
 1556      00000000 
 1557 3010 00000000 		.quad	.L69
 1557      00000000 
 1558 3018 00000000 		.quad	0
 1558      00000000 
 1559              		.align 16
 1560              	.LC7:
 1561 3020 00000000 		.quad	.L74
 1561      00000000 
 1562 3028 00000000 		.quad	0
 1562      00000000 
 1563 3030 00000000 		.quad	.L74
 1563      00000000 
 1564 3038 00000000 		.quad	0
 1564      00000000 
 1565 3040 00000000 		.quad	.L74
 1565      00000000 
 1566 3048 00000000 		.quad	0
 1566      00000000 
 1567 3050 00000000 		.quad	.L74
 1567      00000000 
 1568 3058 00000000 		.quad	0
 1568      00000000 
 1569 3060 00000000 		.quad	.L74
 1569      00000000 
 1570 3068 00000000 		.quad	0
 1570      00000000 
 1571 3070 00000000 		.quad	.L74
 1571      00000000 
 1572 3078 00000000 		.quad	0
 1572      00000000 
 1573 3080 00000000 		.quad	.L74
 1573      00000000 
 1574 3088 00000000 		.quad	0
 1574      00000000 
 1575 3090 00000000 		.quad	.L74
 1575      00000000 
 1576 3098 00000000 		.quad	0
 1576      00000000 
 1577 30a0 00000000 		.quad	.L74
 1577      00000000 
 1578 30a8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 56


 1578      00000000 
 1579 30b0 00000000 		.quad	.L74
 1579      00000000 
 1580 30b8 00000000 		.quad	0
 1580      00000000 
 1581 30c0 00000000 		.quad	.L74
 1581      00000000 
 1582 30c8 00000000 		.quad	0
 1582      00000000 
 1583 30d0 00000000 		.quad	.L74
 1583      00000000 
 1584 30d8 00000000 		.quad	0
 1584      00000000 
 1585 30e0 00000000 		.quad	.L74
 1585      00000000 
 1586 30e8 00000000 		.quad	0
 1586      00000000 
 1587 30f0 00000000 		.quad	.L74
 1587      00000000 
 1588 30f8 00000000 		.quad	0
 1588      00000000 
 1589 3100 00000000 		.quad	.L74
 1589      00000000 
 1590 3108 00000000 		.quad	0
 1590      00000000 
 1591 3110 00000000 		.quad	.L74
 1591      00000000 
 1592 3118 00000000 		.quad	0
 1592      00000000 
 1593 3120 00000000 		.quad	.L74
 1593      00000000 
 1594 3128 00000000 		.quad	0
 1594      00000000 
 1595 3130 00000000 		.quad	.L74
 1595      00000000 
 1596 3138 00000000 		.quad	0
 1596      00000000 
 1597 3140 00000000 		.quad	.L74
 1597      00000000 
 1598 3148 00000000 		.quad	0
 1598      00000000 
 1599 3150 00000000 		.quad	.L74
 1599      00000000 
 1600 3158 00000000 		.quad	0
 1600      00000000 
 1601 3160 00000000 		.quad	.L74
 1601      00000000 
 1602 3168 00000000 		.quad	0
 1602      00000000 
 1603 3170 00000000 		.quad	.L74
 1603      00000000 
 1604 3178 00000000 		.quad	0
 1604      00000000 
 1605 3180 00000000 		.quad	.L74
 1605      00000000 
 1606 3188 00000000 		.quad	0
 1606      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 57


 1607 3190 00000000 		.quad	.L74
 1607      00000000 
 1608 3198 00000000 		.quad	0
 1608      00000000 
 1609 31a0 00000000 		.quad	.L74
 1609      00000000 
 1610 31a8 00000000 		.quad	0
 1610      00000000 
 1611 31b0 00000000 		.quad	.L74
 1611      00000000 
 1612 31b8 00000000 		.quad	0
 1612      00000000 
 1613 31c0 00000000 		.quad	.L74
 1613      00000000 
 1614 31c8 00000000 		.quad	0
 1614      00000000 
 1615 31d0 00000000 		.quad	.L74
 1615      00000000 
 1616 31d8 00000000 		.quad	0
 1616      00000000 
 1617 31e0 00000000 		.quad	.L74
 1617      00000000 
 1618 31e8 00000000 		.quad	0
 1618      00000000 
 1619 31f0 00000000 		.quad	.L74
 1619      00000000 
 1620 31f8 00000000 		.quad	0
 1620      00000000 
 1621 3200 00000000 		.quad	.L74
 1621      00000000 
 1622 3208 00000000 		.quad	0
 1622      00000000 
 1623 3210 00000000 		.quad	.L74
 1623      00000000 
 1624 3218 00000000 		.quad	0
 1624      00000000 
 1625 3220 00000000 		.quad	.L74
 1625      00000000 
 1626 3228 00000000 		.quad	0
 1626      00000000 
 1627 3230 00000000 		.quad	.L74
 1627      00000000 
 1628 3238 00000000 		.quad	0
 1628      00000000 
 1629 3240 00000000 		.quad	.L74
 1629      00000000 
 1630 3248 00000000 		.quad	0
 1630      00000000 
 1631 3250 00000000 		.quad	.L74
 1631      00000000 
 1632 3258 00000000 		.quad	0
 1632      00000000 
 1633 3260 00000000 		.quad	.L74
 1633      00000000 
 1634 3268 00000000 		.quad	0
 1634      00000000 
 1635 3270 00000000 		.quad	.L74
GAS LISTING /tmp/cc15eBE3.s 			page 58


 1635      00000000 
 1636 3278 00000000 		.quad	0
 1636      00000000 
 1637 3280 00000000 		.quad	.L74
 1637      00000000 
 1638 3288 00000000 		.quad	0
 1638      00000000 
 1639 3290 00000000 		.quad	.L74
 1639      00000000 
 1640 3298 00000000 		.quad	0
 1640      00000000 
 1641 32a0 00000000 		.quad	.L74
 1641      00000000 
 1642 32a8 00000000 		.quad	0
 1642      00000000 
 1643 32b0 00000000 		.quad	.L74
 1643      00000000 
 1644 32b8 00000000 		.quad	0
 1644      00000000 
 1645 32c0 00000000 		.quad	.L74
 1645      00000000 
 1646 32c8 00000000 		.quad	0
 1646      00000000 
 1647 32d0 00000000 		.quad	.L74
 1647      00000000 
 1648 32d8 00000000 		.quad	0
 1648      00000000 
 1649 32e0 00000000 		.quad	.L74
 1649      00000000 
 1650 32e8 00000000 		.quad	0
 1650      00000000 
 1651 32f0 00000000 		.quad	.L74
 1651      00000000 
 1652 32f8 00000000 		.quad	0
 1652      00000000 
 1653 3300 00000000 		.quad	.L75
 1653      00000000 
 1654 3308 00000000 		.quad	0
 1654      00000000 
 1655 3310 00000000 		.quad	.L74
 1655      00000000 
 1656 3318 00000000 		.quad	0
 1656      00000000 
 1657 3320 00000000 		.quad	.L74
 1657      00000000 
 1658 3328 00000000 		.quad	0
 1658      00000000 
 1659 3330 00000000 		.quad	.L74
 1659      00000000 
 1660 3338 00000000 		.quad	0
 1660      00000000 
 1661 3340 00000000 		.quad	.L74
 1661      00000000 
 1662 3348 00000000 		.quad	0
 1662      00000000 
 1663 3350 00000000 		.quad	.L74
 1663      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 59


 1664 3358 00000000 		.quad	0
 1664      00000000 
 1665 3360 00000000 		.quad	.L74
 1665      00000000 
 1666 3368 00000000 		.quad	0
 1666      00000000 
 1667 3370 00000000 		.quad	.L74
 1667      00000000 
 1668 3378 00000000 		.quad	0
 1668      00000000 
 1669 3380 00000000 		.quad	.L74
 1669      00000000 
 1670 3388 00000000 		.quad	0
 1670      00000000 
 1671 3390 00000000 		.quad	.L74
 1671      00000000 
 1672 3398 00000000 		.quad	0
 1672      00000000 
 1673 33a0 00000000 		.quad	.L74
 1673      00000000 
 1674 33a8 00000000 		.quad	0
 1674      00000000 
 1675 33b0 00000000 		.quad	.L74
 1675      00000000 
 1676 33b8 00000000 		.quad	0
 1676      00000000 
 1677 33c0 00000000 		.quad	.L74
 1677      00000000 
 1678 33c8 00000000 		.quad	0
 1678      00000000 
 1679 33d0 00000000 		.quad	.L74
 1679      00000000 
 1680 33d8 00000000 		.quad	0
 1680      00000000 
 1681 33e0 00000000 		.quad	.L74
 1681      00000000 
 1682 33e8 00000000 		.quad	0
 1682      00000000 
 1683 33f0 00000000 		.quad	.L74
 1683      00000000 
 1684 33f8 00000000 		.quad	0
 1684      00000000 
 1685 3400 00000000 		.quad	.L74
 1685      00000000 
 1686 3408 00000000 		.quad	0
 1686      00000000 
 1687 3410 00000000 		.quad	.L74
 1687      00000000 
 1688 3418 00000000 		.quad	0
 1688      00000000 
 1689 3420 00000000 		.quad	.L74
 1689      00000000 
 1690 3428 00000000 		.quad	0
 1690      00000000 
 1691 3430 00000000 		.quad	.L74
 1691      00000000 
 1692 3438 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 60


 1692      00000000 
 1693 3440 00000000 		.quad	.L74
 1693      00000000 
 1694 3448 00000000 		.quad	0
 1694      00000000 
 1695 3450 00000000 		.quad	.L74
 1695      00000000 
 1696 3458 00000000 		.quad	0
 1696      00000000 
 1697 3460 00000000 		.quad	.L74
 1697      00000000 
 1698 3468 00000000 		.quad	0
 1698      00000000 
 1699 3470 00000000 		.quad	.L74
 1699      00000000 
 1700 3478 00000000 		.quad	0
 1700      00000000 
 1701 3480 00000000 		.quad	.L74
 1701      00000000 
 1702 3488 00000000 		.quad	0
 1702      00000000 
 1703 3490 00000000 		.quad	.L74
 1703      00000000 
 1704 3498 00000000 		.quad	0
 1704      00000000 
 1705 34a0 00000000 		.quad	.L74
 1705      00000000 
 1706 34a8 00000000 		.quad	0
 1706      00000000 
 1707 34b0 00000000 		.quad	.L74
 1707      00000000 
 1708 34b8 00000000 		.quad	0
 1708      00000000 
 1709 34c0 00000000 		.quad	.L74
 1709      00000000 
 1710 34c8 00000000 		.quad	0
 1710      00000000 
 1711 34d0 00000000 		.quad	.L74
 1711      00000000 
 1712 34d8 00000000 		.quad	0
 1712      00000000 
 1713 34e0 00000000 		.quad	.L74
 1713      00000000 
 1714 34e8 00000000 		.quad	0
 1714      00000000 
 1715 34f0 00000000 		.quad	.L74
 1715      00000000 
 1716 34f8 00000000 		.quad	0
 1716      00000000 
 1717 3500 00000000 		.quad	.L74
 1717      00000000 
 1718 3508 00000000 		.quad	0
 1718      00000000 
 1719 3510 00000000 		.quad	.L74
 1719      00000000 
 1720 3518 00000000 		.quad	0
 1720      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 61


 1721 3520 00000000 		.quad	.L74
 1721      00000000 
 1722 3528 00000000 		.quad	0
 1722      00000000 
 1723 3530 00000000 		.quad	.L74
 1723      00000000 
 1724 3538 00000000 		.quad	0
 1724      00000000 
 1725 3540 00000000 		.quad	.L74
 1725      00000000 
 1726 3548 00000000 		.quad	0
 1726      00000000 
 1727 3550 00000000 		.quad	.L74
 1727      00000000 
 1728 3558 00000000 		.quad	0
 1728      00000000 
 1729 3560 00000000 		.quad	.L76
 1729      00000000 
 1730 3568 00000000 		.quad	0
 1730      00000000 
 1731 3570 00000000 		.quad	.L74
 1731      00000000 
 1732 3578 00000000 		.quad	0
 1732      00000000 
 1733 3580 00000000 		.quad	.L74
 1733      00000000 
 1734 3588 00000000 		.quad	0
 1734      00000000 
 1735 3590 00000000 		.quad	.L74
 1735      00000000 
 1736 3598 00000000 		.quad	0
 1736      00000000 
 1737 35a0 00000000 		.quad	.L74
 1737      00000000 
 1738 35a8 00000000 		.quad	0
 1738      00000000 
 1739 35b0 00000000 		.quad	.L74
 1739      00000000 
 1740 35b8 00000000 		.quad	0
 1740      00000000 
 1741 35c0 00000000 		.quad	.L74
 1741      00000000 
 1742 35c8 00000000 		.quad	0
 1742      00000000 
 1743 35d0 00000000 		.quad	.L74
 1743      00000000 
 1744 35d8 00000000 		.quad	0
 1744      00000000 
 1745 35e0 00000000 		.quad	.L74
 1745      00000000 
 1746 35e8 00000000 		.quad	0
 1746      00000000 
 1747 35f0 00000000 		.quad	.L74
 1747      00000000 
 1748 35f8 00000000 		.quad	0
 1748      00000000 
 1749 3600 00000000 		.quad	.L74
GAS LISTING /tmp/cc15eBE3.s 			page 62


 1749      00000000 
 1750 3608 00000000 		.quad	0
 1750      00000000 
 1751 3610 00000000 		.quad	.L74
 1751      00000000 
 1752 3618 00000000 		.quad	0
 1752      00000000 
 1753 3620 00000000 		.quad	.L74
 1753      00000000 
 1754 3628 00000000 		.quad	0
 1754      00000000 
 1755 3630 00000000 		.quad	.L74
 1755      00000000 
 1756 3638 00000000 		.quad	0
 1756      00000000 
 1757 3640 00000000 		.quad	.L74
 1757      00000000 
 1758 3648 00000000 		.quad	0
 1758      00000000 
 1759 3650 00000000 		.quad	.L74
 1759      00000000 
 1760 3658 00000000 		.quad	0
 1760      00000000 
 1761 3660 00000000 		.quad	.L74
 1761      00000000 
 1762 3668 00000000 		.quad	0
 1762      00000000 
 1763 3670 00000000 		.quad	.L74
 1763      00000000 
 1764 3678 00000000 		.quad	0
 1764      00000000 
 1765 3680 00000000 		.quad	.L74
 1765      00000000 
 1766 3688 00000000 		.quad	0
 1766      00000000 
 1767 3690 00000000 		.quad	.L74
 1767      00000000 
 1768 3698 00000000 		.quad	0
 1768      00000000 
 1769 36a0 00000000 		.quad	.L74
 1769      00000000 
 1770 36a8 00000000 		.quad	0
 1770      00000000 
 1771 36b0 00000000 		.quad	.L74
 1771      00000000 
 1772 36b8 00000000 		.quad	0
 1772      00000000 
 1773 36c0 00000000 		.quad	.L74
 1773      00000000 
 1774 36c8 00000000 		.quad	0
 1774      00000000 
 1775 36d0 00000000 		.quad	.L74
 1775      00000000 
 1776 36d8 00000000 		.quad	0
 1776      00000000 
 1777 36e0 00000000 		.quad	.L74
 1777      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 63


 1778 36e8 00000000 		.quad	0
 1778      00000000 
 1779 36f0 00000000 		.quad	.L74
 1779      00000000 
 1780 36f8 00000000 		.quad	0
 1780      00000000 
 1781              		.align 16
 1782              	.LC8:
 1783 3700 00000000 		.quad	.L77
 1783      00000000 
 1784 3708 00000000 		.quad	0
 1784      00000000 
 1785 3710 00000000 		.quad	.L78
 1785      00000000 
 1786 3718 00000000 		.quad	0
 1786      00000000 
 1787 3720 00000000 		.quad	.L79
 1787      00000000 
 1788 3728 00000000 		.quad	0
 1788      00000000 
 1789 3730 00000000 		.quad	.L80
 1789      00000000 
 1790 3738 00000000 		.quad	0
 1790      00000000 
 1791 3740 00000000 		.quad	.L80
 1791      00000000 
 1792 3748 00000000 		.quad	0
 1792      00000000 
 1793 3750 00000000 		.quad	.L78
 1793      00000000 
 1794 3758 00000000 		.quad	0
 1794      00000000 
 1795 3760 00000000 		.quad	.L80
 1795      00000000 
 1796 3768 00000000 		.quad	0
 1796      00000000 
 1797 3770 00000000 		.quad	.L80
 1797      00000000 
 1798 3778 00000000 		.quad	0
 1798      00000000 
 1799 3780 00000000 		.quad	.L80
 1799      00000000 
 1800 3788 00000000 		.quad	0
 1800      00000000 
 1801 3790 00000000 		.quad	.L80
 1801      00000000 
 1802 3798 00000000 		.quad	0
 1802      00000000 
 1803 37a0 00000000 		.quad	.L80
 1803      00000000 
 1804 37a8 00000000 		.quad	0
 1804      00000000 
 1805 37b0 00000000 		.quad	.L80
 1805      00000000 
 1806 37b8 00000000 		.quad	0
 1806      00000000 
 1807 37c0 00000000 		.quad	.L80
GAS LISTING /tmp/cc15eBE3.s 			page 64


 1807      00000000 
 1808 37c8 00000000 		.quad	0
 1808      00000000 
 1809 37d0 00000000 		.quad	.L78
 1809      00000000 
 1810 37d8 00000000 		.quad	0
 1810      00000000 
 1811 37e0 00000000 		.quad	.L78
 1811      00000000 
 1812 37e8 00000000 		.quad	0
 1812      00000000 
 1813 37f0 00000000 		.quad	.L78
 1813      00000000 
 1814 37f8 00000000 		.quad	0
 1814      00000000 
 1815 3800 00000000 		.quad	.L80
 1815      00000000 
 1816 3808 00000000 		.quad	0
 1816      00000000 
 1817 3810 00000000 		.quad	.L80
 1817      00000000 
 1818 3818 00000000 		.quad	0
 1818      00000000 
 1819 3820 00000000 		.quad	.L80
 1819      00000000 
 1820 3828 00000000 		.quad	0
 1820      00000000 
 1821 3830 00000000 		.quad	.L80
 1821      00000000 
 1822 3838 00000000 		.quad	0
 1822      00000000 
 1823 3840 00000000 		.quad	.L78
 1823      00000000 
 1824 3848 00000000 		.quad	0
 1824      00000000 
 1825 3850 00000000 		.quad	.L78
 1825      00000000 
 1826 3858 00000000 		.quad	0
 1826      00000000 
 1827 3860 00000000 		.quad	.L78
 1827      00000000 
 1828 3868 00000000 		.quad	0
 1828      00000000 
 1829 3870 00000000 		.quad	.L78
 1829      00000000 
 1830 3878 00000000 		.quad	0
 1830      00000000 
 1831 3880 00000000 		.quad	.L80
 1831      00000000 
 1832 3888 00000000 		.quad	0
 1832      00000000 
 1833 3890 00000000 		.quad	.L80
 1833      00000000 
 1834 3898 00000000 		.quad	0
 1834      00000000 
 1835 38a0 00000000 		.quad	.L80
 1835      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 65


 1836 38a8 00000000 		.quad	0
 1836      00000000 
 1837 38b0 00000000 		.quad	.L80
 1837      00000000 
 1838 38b8 00000000 		.quad	0
 1838      00000000 
 1839 38c0 00000000 		.quad	.L78
 1839      00000000 
 1840 38c8 00000000 		.quad	0
 1840      00000000 
 1841 38d0 00000000 		.quad	.L78
 1841      00000000 
 1842 38d8 00000000 		.quad	0
 1842      00000000 
 1843 38e0 00000000 		.quad	.L78
 1843      00000000 
 1844 38e8 00000000 		.quad	0
 1844      00000000 
 1845 38f0 00000000 		.quad	.L78
 1845      00000000 
 1846 38f8 00000000 		.quad	0
 1846      00000000 
 1847 3900 00000000 		.quad	.L80
 1847      00000000 
 1848 3908 00000000 		.quad	0
 1848      00000000 
 1849 3910 00000000 		.quad	.L80
 1849      00000000 
 1850 3918 00000000 		.quad	0
 1850      00000000 
 1851 3920 00000000 		.quad	.L80
 1851      00000000 
 1852 3928 00000000 		.quad	0
 1852      00000000 
 1853 3930 00000000 		.quad	.L80
 1853      00000000 
 1854 3938 00000000 		.quad	0
 1854      00000000 
 1855 3940 00000000 		.quad	.L80
 1855      00000000 
 1856 3948 00000000 		.quad	0
 1856      00000000 
 1857 3950 00000000 		.quad	.L80
 1857      00000000 
 1858 3958 00000000 		.quad	0
 1858      00000000 
 1859 3960 00000000 		.quad	.L81
 1859      00000000 
 1860 3968 00000000 		.quad	0
 1860      00000000 
 1861 3970 00000000 		.quad	.L82
 1861      00000000 
 1862 3978 00000000 		.quad	0
 1862      00000000 
 1863 3980 00000000 		.quad	.L78
 1863      00000000 
 1864 3988 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 66


 1864      00000000 
 1865 3990 00000000 		.quad	.L78
 1865      00000000 
 1866 3998 00000000 		.quad	0
 1866      00000000 
 1867 39a0 00000000 		.quad	.L80
 1867      00000000 
 1868 39a8 00000000 		.quad	0
 1868      00000000 
 1869 39b0 00000000 		.quad	.L80
 1869      00000000 
 1870 39b8 00000000 		.quad	0
 1870      00000000 
 1871 39c0 00000000 		.quad	.L80
 1871      00000000 
 1872 39c8 00000000 		.quad	0
 1872      00000000 
 1873 39d0 00000000 		.quad	.L80
 1873      00000000 
 1874 39d8 00000000 		.quad	0
 1874      00000000 
 1875 39e0 00000000 		.quad	.L80
 1875      00000000 
 1876 39e8 00000000 		.quad	0
 1876      00000000 
 1877 39f0 00000000 		.quad	.L80
 1877      00000000 
 1878 39f8 00000000 		.quad	0
 1878      00000000 
 1879 3a00 00000000 		.quad	.L83
 1879      00000000 
 1880 3a08 00000000 		.quad	0
 1880      00000000 
 1881 3a10 00000000 		.quad	.L80
 1881      00000000 
 1882 3a18 00000000 		.quad	0
 1882      00000000 
 1883 3a20 00000000 		.quad	.L80
 1883      00000000 
 1884 3a28 00000000 		.quad	0
 1884      00000000 
 1885 3a30 00000000 		.quad	.L80
 1885      00000000 
 1886 3a38 00000000 		.quad	0
 1886      00000000 
 1887 3a40 00000000 		.quad	.L80
 1887      00000000 
 1888 3a48 00000000 		.quad	0
 1888      00000000 
 1889 3a50 00000000 		.quad	.L84
 1889      00000000 
 1890 3a58 00000000 		.quad	0
 1890      00000000 
 1891 3a60 00000000 		.quad	.L80
 1891      00000000 
 1892 3a68 00000000 		.quad	0
 1892      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 67


 1893 3a70 00000000 		.quad	.L85
 1893      00000000 
 1894 3a78 00000000 		.quad	0
 1894      00000000 
 1895 3a80 00000000 		.quad	.L80
 1895      00000000 
 1896 3a88 00000000 		.quad	0
 1896      00000000 
 1897 3a90 00000000 		.quad	.L80
 1897      00000000 
 1898 3a98 00000000 		.quad	0
 1898      00000000 
 1899 3aa0 00000000 		.quad	.L80
 1899      00000000 
 1900 3aa8 00000000 		.quad	0
 1900      00000000 
 1901 3ab0 00000000 		.quad	.L78
 1901      00000000 
 1902 3ab8 00000000 		.quad	0
 1902      00000000 
 1903 3ac0 00000000 		.quad	.L78
 1903      00000000 
 1904 3ac8 00000000 		.quad	0
 1904      00000000 
 1905 3ad0 00000000 		.quad	.L78
 1905      00000000 
 1906 3ad8 00000000 		.quad	0
 1906      00000000 
 1907 3ae0 00000000 		.quad	.L78
 1907      00000000 
 1908 3ae8 00000000 		.quad	0
 1908      00000000 
 1909 3af0 00000000 		.quad	.L78
 1909      00000000 
 1910 3af8 00000000 		.quad	0
 1910      00000000 
 1911 3b00 00000000 		.quad	.L78
 1911      00000000 
 1912 3b08 00000000 		.quad	0
 1912      00000000 
 1913 3b10 00000000 		.quad	.L78
 1913      00000000 
 1914 3b18 00000000 		.quad	0
 1914      00000000 
 1915 3b20 00000000 		.quad	.L78
 1915      00000000 
 1916 3b28 00000000 		.quad	0
 1916      00000000 
 1917 3b30 00000000 		.quad	.L80
 1917      00000000 
 1918 3b38 00000000 		.quad	0
 1918      00000000 
 1919 3b40 00000000 		.quad	.L80
 1919      00000000 
 1920 3b48 00000000 		.quad	0
 1920      00000000 
 1921 3b50 00000000 		.quad	.L80
GAS LISTING /tmp/cc15eBE3.s 			page 68


 1921      00000000 
 1922 3b58 00000000 		.quad	0
 1922      00000000 
 1923 3b60 00000000 		.quad	.L78
 1923      00000000 
 1924 3b68 00000000 		.quad	0
 1924      00000000 
 1925 3b70 00000000 		.quad	.L78
 1925      00000000 
 1926 3b78 00000000 		.quad	0
 1926      00000000 
 1927 3b80 00000000 		.quad	.L78
 1927      00000000 
 1928 3b88 00000000 		.quad	0
 1928      00000000 
 1929 3b90 00000000 		.quad	.L78
 1929      00000000 
 1930 3b98 00000000 		.quad	0
 1930      00000000 
 1931 3ba0 00000000 		.quad	.L78
 1931      00000000 
 1932 3ba8 00000000 		.quad	0
 1932      00000000 
 1933 3bb0 00000000 		.quad	.L80
 1933      00000000 
 1934 3bb8 00000000 		.quad	0
 1934      00000000 
 1935 3bc0 00000000 		.quad	.L80
 1935      00000000 
 1936 3bc8 00000000 		.quad	0
 1936      00000000 
 1937 3bd0 00000000 		.quad	.L80
 1937      00000000 
 1938 3bd8 00000000 		.quad	0
 1938      00000000 
 1939 3be0 00000000 		.quad	.L80
 1939      00000000 
 1940 3be8 00000000 		.quad	0
 1940      00000000 
 1941 3bf0 00000000 		.quad	.L80
 1941      00000000 
 1942 3bf8 00000000 		.quad	0
 1942      00000000 
 1943 3c00 00000000 		.quad	.L80
 1943      00000000 
 1944 3c08 00000000 		.quad	0
 1944      00000000 
 1945 3c10 00000000 		.quad	.L80
 1945      00000000 
 1946 3c18 00000000 		.quad	0
 1946      00000000 
 1947 3c20 00000000 		.quad	.L78
 1947      00000000 
 1948 3c28 00000000 		.quad	0
 1948      00000000 
 1949 3c30 00000000 		.quad	.L80
 1949      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 69


 1950 3c38 00000000 		.quad	0
 1950      00000000 
 1951 3c40 00000000 		.quad	.L80
 1951      00000000 
 1952 3c48 00000000 		.quad	0
 1952      00000000 
 1953 3c50 00000000 		.quad	.L80
 1953      00000000 
 1954 3c58 00000000 		.quad	0
 1954      00000000 
 1955 3c60 00000000 		.quad	.L86
 1955      00000000 
 1956 3c68 00000000 		.quad	0
 1956      00000000 
 1957 3c70 00000000 		.quad	.L78
 1957      00000000 
 1958 3c78 00000000 		.quad	0
 1958      00000000 
 1959 3c80 00000000 		.quad	.L78
 1959      00000000 
 1960 3c88 00000000 		.quad	0
 1960      00000000 
 1961 3c90 00000000 		.quad	.L80
 1961      00000000 
 1962 3c98 00000000 		.quad	0
 1962      00000000 
 1963 3ca0 00000000 		.quad	.L78
 1963      00000000 
 1964 3ca8 00000000 		.quad	0
 1964      00000000 
 1965 3cb0 00000000 		.quad	.L78
 1965      00000000 
 1966 3cb8 00000000 		.quad	0
 1966      00000000 
 1967 3cc0 00000000 		.quad	.L78
 1967      00000000 
 1968 3cc8 00000000 		.quad	0
 1968      00000000 
 1969 3cd0 00000000 		.quad	.L78
 1969      00000000 
 1970 3cd8 00000000 		.quad	0
 1970      00000000 
 1971 3ce0 00000000 		.quad	.L78
 1971      00000000 
 1972 3ce8 00000000 		.quad	0
 1972      00000000 
 1973 3cf0 00000000 		.quad	.L78
 1973      00000000 
 1974 3cf8 00000000 		.quad	0
 1974      00000000 
 1975 3d00 00000000 		.quad	.L78
 1975      00000000 
 1976 3d08 00000000 		.quad	0
 1976      00000000 
 1977 3d10 00000000 		.quad	.L78
 1977      00000000 
 1978 3d18 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 70


 1978      00000000 
 1979 3d20 00000000 		.quad	.L78
 1979      00000000 
 1980 3d28 00000000 		.quad	0
 1980      00000000 
 1981 3d30 00000000 		.quad	.L78
 1981      00000000 
 1982 3d38 00000000 		.quad	0
 1982      00000000 
 1983 3d40 00000000 		.quad	.L78
 1983      00000000 
 1984 3d48 00000000 		.quad	0
 1984      00000000 
 1985 3d50 00000000 		.quad	.L78
 1985      00000000 
 1986 3d58 00000000 		.quad	0
 1986      00000000 
 1987 3d60 00000000 		.quad	.L78
 1987      00000000 
 1988 3d68 00000000 		.quad	0
 1988      00000000 
 1989 3d70 00000000 		.quad	.L78
 1989      00000000 
 1990 3d78 00000000 		.quad	0
 1990      00000000 
 1991 3d80 00000000 		.quad	.L78
 1991      00000000 
 1992 3d88 00000000 		.quad	0
 1992      00000000 
 1993 3d90 00000000 		.quad	.L78
 1993      00000000 
 1994 3d98 00000000 		.quad	0
 1994      00000000 
 1995 3da0 00000000 		.quad	.L78
 1995      00000000 
 1996 3da8 00000000 		.quad	0
 1996      00000000 
 1997 3db0 00000000 		.quad	.L78
 1997      00000000 
 1998 3db8 00000000 		.quad	0
 1998      00000000 
 1999 3dc0 00000000 		.quad	.L78
 1999      00000000 
 2000 3dc8 00000000 		.quad	0
 2000      00000000 
 2001 3dd0 00000000 		.quad	.L78
 2001      00000000 
 2002 3dd8 00000000 		.quad	0
 2002      00000000 
 2003              		.align 16
 2004              	.LC9:
 2005 3de0 00000000 		.quad	.L87
 2005      00000000 
 2006 3de8 00000000 		.quad	0
 2006      00000000 
 2007 3df0 00000000 		.quad	.L88
 2007      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 71


 2008 3df8 00000000 		.quad	0
 2008      00000000 
 2009 3e00 00000000 		.quad	.L89
 2009      00000000 
 2010 3e08 00000000 		.quad	0
 2010      00000000 
 2011 3e10 00000000 		.quad	.L89
 2011      00000000 
 2012 3e18 00000000 		.quad	0
 2012      00000000 
 2013 3e20 00000000 		.quad	.L89
 2013      00000000 
 2014 3e28 00000000 		.quad	0
 2014      00000000 
 2015 3e30 00000000 		.quad	.L88
 2015      00000000 
 2016 3e38 00000000 		.quad	0
 2016      00000000 
 2017 3e40 00000000 		.quad	.L89
 2017      00000000 
 2018 3e48 00000000 		.quad	0
 2018      00000000 
 2019 3e50 00000000 		.quad	.L89
 2019      00000000 
 2020 3e58 00000000 		.quad	0
 2020      00000000 
 2021 3e60 00000000 		.quad	.L90
 2021      00000000 
 2022 3e68 00000000 		.quad	0
 2022      00000000 
 2023 3e70 00000000 		.quad	.L89
 2023      00000000 
 2024 3e78 00000000 		.quad	0
 2024      00000000 
 2025 3e80 00000000 		.quad	.L89
 2025      00000000 
 2026 3e88 00000000 		.quad	0
 2026      00000000 
 2027 3e90 00000000 		.quad	.L89
 2027      00000000 
 2028 3e98 00000000 		.quad	0
 2028      00000000 
 2029 3ea0 00000000 		.quad	.L89
 2029      00000000 
 2030 3ea8 00000000 		.quad	0
 2030      00000000 
 2031 3eb0 00000000 		.quad	.L88
 2031      00000000 
 2032 3eb8 00000000 		.quad	0
 2032      00000000 
 2033 3ec0 00000000 		.quad	.L88
 2033      00000000 
 2034 3ec8 00000000 		.quad	0
 2034      00000000 
 2035 3ed0 00000000 		.quad	.L88
 2035      00000000 
 2036 3ed8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 72


 2036      00000000 
 2037 3ee0 00000000 		.quad	.L89
 2037      00000000 
 2038 3ee8 00000000 		.quad	0
 2038      00000000 
 2039 3ef0 00000000 		.quad	.L89
 2039      00000000 
 2040 3ef8 00000000 		.quad	0
 2040      00000000 
 2041 3f00 00000000 		.quad	.L89
 2041      00000000 
 2042 3f08 00000000 		.quad	0
 2042      00000000 
 2043 3f10 00000000 		.quad	.L89
 2043      00000000 
 2044 3f18 00000000 		.quad	0
 2044      00000000 
 2045 3f20 00000000 		.quad	.L88
 2045      00000000 
 2046 3f28 00000000 		.quad	0
 2046      00000000 
 2047 3f30 00000000 		.quad	.L88
 2047      00000000 
 2048 3f38 00000000 		.quad	0
 2048      00000000 
 2049 3f40 00000000 		.quad	.L88
 2049      00000000 
 2050 3f48 00000000 		.quad	0
 2050      00000000 
 2051 3f50 00000000 		.quad	.L88
 2051      00000000 
 2052 3f58 00000000 		.quad	0
 2052      00000000 
 2053 3f60 00000000 		.quad	.L89
 2053      00000000 
 2054 3f68 00000000 		.quad	0
 2054      00000000 
 2055 3f70 00000000 		.quad	.L89
 2055      00000000 
 2056 3f78 00000000 		.quad	0
 2056      00000000 
 2057 3f80 00000000 		.quad	.L89
 2057      00000000 
 2058 3f88 00000000 		.quad	0
 2058      00000000 
 2059 3f90 00000000 		.quad	.L89
 2059      00000000 
 2060 3f98 00000000 		.quad	0
 2060      00000000 
 2061 3fa0 00000000 		.quad	.L88
 2061      00000000 
 2062 3fa8 00000000 		.quad	0
 2062      00000000 
 2063 3fb0 00000000 		.quad	.L88
 2063      00000000 
 2064 3fb8 00000000 		.quad	0
 2064      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 73


 2065 3fc0 00000000 		.quad	.L88
 2065      00000000 
 2066 3fc8 00000000 		.quad	0
 2066      00000000 
 2067 3fd0 00000000 		.quad	.L88
 2067      00000000 
 2068 3fd8 00000000 		.quad	0
 2068      00000000 
 2069 3fe0 00000000 		.quad	.L89
 2069      00000000 
 2070 3fe8 00000000 		.quad	0
 2070      00000000 
 2071 3ff0 00000000 		.quad	.L91
 2071      00000000 
 2072 3ff8 00000000 		.quad	0
 2072      00000000 
 2073 4000 00000000 		.quad	.L89
 2073      00000000 
 2074 4008 00000000 		.quad	0
 2074      00000000 
 2075 4010 00000000 		.quad	.L89
 2075      00000000 
 2076 4018 00000000 		.quad	0
 2076      00000000 
 2077 4020 00000000 		.quad	.L89
 2077      00000000 
 2078 4028 00000000 		.quad	0
 2078      00000000 
 2079 4030 00000000 		.quad	.L89
 2079      00000000 
 2080 4038 00000000 		.quad	0
 2080      00000000 
 2081 4040 00000000 		.quad	.L89
 2081      00000000 
 2082 4048 00000000 		.quad	0
 2082      00000000 
 2083 4050 00000000 		.quad	.L89
 2083      00000000 
 2084 4058 00000000 		.quad	0
 2084      00000000 
 2085 4060 00000000 		.quad	.L88
 2085      00000000 
 2086 4068 00000000 		.quad	0
 2086      00000000 
 2087 4070 00000000 		.quad	.L88
 2087      00000000 
 2088 4078 00000000 		.quad	0
 2088      00000000 
 2089 4080 00000000 		.quad	.L92
 2089      00000000 
 2090 4088 00000000 		.quad	0
 2090      00000000 
 2091 4090 00000000 		.quad	.L93
 2091      00000000 
 2092 4098 00000000 		.quad	0
 2092      00000000 
 2093 40a0 00000000 		.quad	.L89
GAS LISTING /tmp/cc15eBE3.s 			page 74


 2093      00000000 
 2094 40a8 00000000 		.quad	0
 2094      00000000 
 2095 40b0 00000000 		.quad	.L94
 2095      00000000 
 2096 40b8 00000000 		.quad	0
 2096      00000000 
 2097 40c0 00000000 		.quad	.L95
 2097      00000000 
 2098 40c8 00000000 		.quad	0
 2098      00000000 
 2099 40d0 00000000 		.quad	.L96
 2099      00000000 
 2100 40d8 00000000 		.quad	0
 2100      00000000 
 2101 40e0 00000000 		.quad	.L97
 2101      00000000 
 2102 40e8 00000000 		.quad	0
 2102      00000000 
 2103 40f0 00000000 		.quad	.L98
 2103      00000000 
 2104 40f8 00000000 		.quad	0
 2104      00000000 
 2105 4100 00000000 		.quad	.L99
 2105      00000000 
 2106 4108 00000000 		.quad	0
 2106      00000000 
 2107 4110 00000000 		.quad	.L89
 2107      00000000 
 2108 4118 00000000 		.quad	0
 2108      00000000 
 2109 4120 00000000 		.quad	.L100
 2109      00000000 
 2110 4128 00000000 		.quad	0
 2110      00000000 
 2111 4130 00000000 		.quad	.L89
 2111      00000000 
 2112 4138 00000000 		.quad	0
 2112      00000000 
 2113 4140 00000000 		.quad	.L89
 2113      00000000 
 2114 4148 00000000 		.quad	0
 2114      00000000 
 2115 4150 00000000 		.quad	.L89
 2115      00000000 
 2116 4158 00000000 		.quad	0
 2116      00000000 
 2117 4160 00000000 		.quad	.L101
 2117      00000000 
 2118 4168 00000000 		.quad	0
 2118      00000000 
 2119 4170 00000000 		.quad	.L89
 2119      00000000 
 2120 4178 00000000 		.quad	0
 2120      00000000 
 2121 4180 00000000 		.quad	.L89
 2121      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 75


 2122 4188 00000000 		.quad	0
 2122      00000000 
 2123 4190 00000000 		.quad	.L88
 2123      00000000 
 2124 4198 00000000 		.quad	0
 2124      00000000 
 2125 41a0 00000000 		.quad	.L88
 2125      00000000 
 2126 41a8 00000000 		.quad	0
 2126      00000000 
 2127 41b0 00000000 		.quad	.L88
 2127      00000000 
 2128 41b8 00000000 		.quad	0
 2128      00000000 
 2129 41c0 00000000 		.quad	.L88
 2129      00000000 
 2130 41c8 00000000 		.quad	0
 2130      00000000 
 2131 41d0 00000000 		.quad	.L88
 2131      00000000 
 2132 41d8 00000000 		.quad	0
 2132      00000000 
 2133 41e0 00000000 		.quad	.L88
 2133      00000000 
 2134 41e8 00000000 		.quad	0
 2134      00000000 
 2135 41f0 00000000 		.quad	.L88
 2135      00000000 
 2136 41f8 00000000 		.quad	0
 2136      00000000 
 2137 4200 00000000 		.quad	.L88
 2137      00000000 
 2138 4208 00000000 		.quad	0
 2138      00000000 
 2139 4210 00000000 		.quad	.L89
 2139      00000000 
 2140 4218 00000000 		.quad	0
 2140      00000000 
 2141 4220 00000000 		.quad	.L89
 2141      00000000 
 2142 4228 00000000 		.quad	0
 2142      00000000 
 2143 4230 00000000 		.quad	.L89
 2143      00000000 
 2144 4238 00000000 		.quad	0
 2144      00000000 
 2145 4240 00000000 		.quad	.L88
 2145      00000000 
 2146 4248 00000000 		.quad	0
 2146      00000000 
 2147 4250 00000000 		.quad	.L88
 2147      00000000 
 2148 4258 00000000 		.quad	0
 2148      00000000 
 2149 4260 00000000 		.quad	.L88
 2149      00000000 
 2150 4268 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 76


 2150      00000000 
 2151 4270 00000000 		.quad	.L88
 2151      00000000 
 2152 4278 00000000 		.quad	0
 2152      00000000 
 2153 4280 00000000 		.quad	.L88
 2153      00000000 
 2154 4288 00000000 		.quad	0
 2154      00000000 
 2155 4290 00000000 		.quad	.L89
 2155      00000000 
 2156 4298 00000000 		.quad	0
 2156      00000000 
 2157 42a0 00000000 		.quad	.L89
 2157      00000000 
 2158 42a8 00000000 		.quad	0
 2158      00000000 
 2159 42b0 00000000 		.quad	.L89
 2159      00000000 
 2160 42b8 00000000 		.quad	0
 2160      00000000 
 2161 42c0 00000000 		.quad	.L102
 2161      00000000 
 2162 42c8 00000000 		.quad	0
 2162      00000000 
 2163 42d0 00000000 		.quad	.L103
 2163      00000000 
 2164 42d8 00000000 		.quad	0
 2164      00000000 
 2165 42e0 00000000 		.quad	.L89
 2165      00000000 
 2166 42e8 00000000 		.quad	0
 2166      00000000 
 2167 42f0 00000000 		.quad	.L89
 2167      00000000 
 2168 42f8 00000000 		.quad	0
 2168      00000000 
 2169 4300 00000000 		.quad	.L88
 2169      00000000 
 2170 4308 00000000 		.quad	0
 2170      00000000 
 2171 4310 00000000 		.quad	.L89
 2171      00000000 
 2172 4318 00000000 		.quad	0
 2172      00000000 
 2173 4320 00000000 		.quad	.L89
 2173      00000000 
 2174 4328 00000000 		.quad	0
 2174      00000000 
 2175 4330 00000000 		.quad	.L89
 2175      00000000 
 2176 4338 00000000 		.quad	0
 2176      00000000 
 2177 4340 00000000 		.quad	.L104
 2177      00000000 
 2178 4348 00000000 		.quad	0
 2178      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 77


 2179 4350 00000000 		.quad	.L88
 2179      00000000 
 2180 4358 00000000 		.quad	0
 2180      00000000 
 2181 4360 00000000 		.quad	.L88
 2181      00000000 
 2182 4368 00000000 		.quad	0
 2182      00000000 
 2183 4370 00000000 		.quad	.L89
 2183      00000000 
 2184 4378 00000000 		.quad	0
 2184      00000000 
 2185 4380 00000000 		.quad	.L88
 2185      00000000 
 2186 4388 00000000 		.quad	0
 2186      00000000 
 2187 4390 00000000 		.quad	.L88
 2187      00000000 
 2188 4398 00000000 		.quad	0
 2188      00000000 
 2189 43a0 00000000 		.quad	.L88
 2189      00000000 
 2190 43a8 00000000 		.quad	0
 2190      00000000 
 2191 43b0 00000000 		.quad	.L88
 2191      00000000 
 2192 43b8 00000000 		.quad	0
 2192      00000000 
 2193 43c0 00000000 		.quad	.L88
 2193      00000000 
 2194 43c8 00000000 		.quad	0
 2194      00000000 
 2195 43d0 00000000 		.quad	.L88
 2195      00000000 
 2196 43d8 00000000 		.quad	0
 2196      00000000 
 2197 43e0 00000000 		.quad	.L88
 2197      00000000 
 2198 43e8 00000000 		.quad	0
 2198      00000000 
 2199 43f0 00000000 		.quad	.L88
 2199      00000000 
 2200 43f8 00000000 		.quad	0
 2200      00000000 
 2201 4400 00000000 		.quad	.L88
 2201      00000000 
 2202 4408 00000000 		.quad	0
 2202      00000000 
 2203 4410 00000000 		.quad	.L88
 2203      00000000 
 2204 4418 00000000 		.quad	0
 2204      00000000 
 2205 4420 00000000 		.quad	.L88
 2205      00000000 
 2206 4428 00000000 		.quad	0
 2206      00000000 
 2207 4430 00000000 		.quad	.L88
GAS LISTING /tmp/cc15eBE3.s 			page 78


 2207      00000000 
 2208 4438 00000000 		.quad	0
 2208      00000000 
 2209 4440 00000000 		.quad	.L88
 2209      00000000 
 2210 4448 00000000 		.quad	0
 2210      00000000 
 2211 4450 00000000 		.quad	.L88
 2211      00000000 
 2212 4458 00000000 		.quad	0
 2212      00000000 
 2213 4460 00000000 		.quad	.L88
 2213      00000000 
 2214 4468 00000000 		.quad	0
 2214      00000000 
 2215 4470 00000000 		.quad	.L88
 2215      00000000 
 2216 4478 00000000 		.quad	0
 2216      00000000 
 2217 4480 00000000 		.quad	.L88
 2217      00000000 
 2218 4488 00000000 		.quad	0
 2218      00000000 
 2219 4490 00000000 		.quad	.L88
 2219      00000000 
 2220 4498 00000000 		.quad	0
 2220      00000000 
 2221 44a0 00000000 		.quad	.L88
 2221      00000000 
 2222 44a8 00000000 		.quad	0
 2222      00000000 
 2223 44b0 00000000 		.quad	.L88
 2223      00000000 
 2224 44b8 00000000 		.quad	0
 2224      00000000 
 2225              		.align 16
 2226              	.LC10:
 2227 44c0 00000000 		.quad	.L105
 2227      00000000 
 2228 44c8 00000000 		.quad	0
 2228      00000000 
 2229 44d0 00000000 		.quad	.L106
 2229      00000000 
 2230 44d8 00000000 		.quad	0
 2230      00000000 
 2231 44e0 00000000 		.quad	.L106
 2231      00000000 
 2232 44e8 00000000 		.quad	0
 2232      00000000 
 2233 44f0 00000000 		.quad	.L106
 2233      00000000 
 2234 44f8 00000000 		.quad	0
 2234      00000000 
 2235 4500 00000000 		.quad	.L106
 2235      00000000 
 2236 4508 00000000 		.quad	0
 2236      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 79


 2237 4510 00000000 		.quad	.L106
 2237      00000000 
 2238 4518 00000000 		.quad	0
 2238      00000000 
 2239 4520 00000000 		.quad	.L106
 2239      00000000 
 2240 4528 00000000 		.quad	0
 2240      00000000 
 2241 4530 00000000 		.quad	.L106
 2241      00000000 
 2242 4538 00000000 		.quad	0
 2242      00000000 
 2243 4540 00000000 		.quad	.L107
 2243      00000000 
 2244 4548 00000000 		.quad	0
 2244      00000000 
 2245 4550 00000000 		.quad	.L106
 2245      00000000 
 2246 4558 00000000 		.quad	0
 2246      00000000 
 2247 4560 00000000 		.quad	.L106
 2247      00000000 
 2248 4568 00000000 		.quad	0
 2248      00000000 
 2249 4570 00000000 		.quad	.L106
 2249      00000000 
 2250 4578 00000000 		.quad	0
 2250      00000000 
 2251 4580 00000000 		.quad	.L106
 2251      00000000 
 2252 4588 00000000 		.quad	0
 2252      00000000 
 2253 4590 00000000 		.quad	.L106
 2253      00000000 
 2254 4598 00000000 		.quad	0
 2254      00000000 
 2255 45a0 00000000 		.quad	.L106
 2255      00000000 
 2256 45a8 00000000 		.quad	0
 2256      00000000 
 2257 45b0 00000000 		.quad	.L106
 2257      00000000 
 2258 45b8 00000000 		.quad	0
 2258      00000000 
 2259 45c0 00000000 		.quad	.L106
 2259      00000000 
 2260 45c8 00000000 		.quad	0
 2260      00000000 
 2261 45d0 00000000 		.quad	.L106
 2261      00000000 
 2262 45d8 00000000 		.quad	0
 2262      00000000 
 2263 45e0 00000000 		.quad	.L106
 2263      00000000 
 2264 45e8 00000000 		.quad	0
 2264      00000000 
 2265 45f0 00000000 		.quad	.L106
GAS LISTING /tmp/cc15eBE3.s 			page 80


 2265      00000000 
 2266 45f8 00000000 		.quad	0
 2266      00000000 
 2267 4600 00000000 		.quad	.L106
 2267      00000000 
 2268 4608 00000000 		.quad	0
 2268      00000000 
 2269 4610 00000000 		.quad	.L106
 2269      00000000 
 2270 4618 00000000 		.quad	0
 2270      00000000 
 2271 4620 00000000 		.quad	.L106
 2271      00000000 
 2272 4628 00000000 		.quad	0
 2272      00000000 
 2273 4630 00000000 		.quad	.L106
 2273      00000000 
 2274 4638 00000000 		.quad	0
 2274      00000000 
 2275 4640 00000000 		.quad	.L106
 2275      00000000 
 2276 4648 00000000 		.quad	0
 2276      00000000 
 2277 4650 00000000 		.quad	.L106
 2277      00000000 
 2278 4658 00000000 		.quad	0
 2278      00000000 
 2279 4660 00000000 		.quad	.L106
 2279      00000000 
 2280 4668 00000000 		.quad	0
 2280      00000000 
 2281 4670 00000000 		.quad	.L106
 2281      00000000 
 2282 4678 00000000 		.quad	0
 2282      00000000 
 2283 4680 00000000 		.quad	.L106
 2283      00000000 
 2284 4688 00000000 		.quad	0
 2284      00000000 
 2285 4690 00000000 		.quad	.L106
 2285      00000000 
 2286 4698 00000000 		.quad	0
 2286      00000000 
 2287 46a0 00000000 		.quad	.L106
 2287      00000000 
 2288 46a8 00000000 		.quad	0
 2288      00000000 
 2289 46b0 00000000 		.quad	.L106
 2289      00000000 
 2290 46b8 00000000 		.quad	0
 2290      00000000 
 2291 46c0 00000000 		.quad	.L106
 2291      00000000 
 2292 46c8 00000000 		.quad	0
 2292      00000000 
 2293 46d0 00000000 		.quad	.L106
 2293      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 81


 2294 46d8 00000000 		.quad	0
 2294      00000000 
 2295 46e0 00000000 		.quad	.L106
 2295      00000000 
 2296 46e8 00000000 		.quad	0
 2296      00000000 
 2297 46f0 00000000 		.quad	.L108
 2297      00000000 
 2298 46f8 00000000 		.quad	0
 2298      00000000 
 2299 4700 00000000 		.quad	.L106
 2299      00000000 
 2300 4708 00000000 		.quad	0
 2300      00000000 
 2301 4710 00000000 		.quad	.L109
 2301      00000000 
 2302 4718 00000000 		.quad	0
 2302      00000000 
 2303 4720 00000000 		.quad	.L110
 2303      00000000 
 2304 4728 00000000 		.quad	0
 2304      00000000 
 2305 4730 00000000 		.quad	.L106
 2305      00000000 
 2306 4738 00000000 		.quad	0
 2306      00000000 
 2307 4740 00000000 		.quad	.L106
 2307      00000000 
 2308 4748 00000000 		.quad	0
 2308      00000000 
 2309 4750 00000000 		.quad	.L106
 2309      00000000 
 2310 4758 00000000 		.quad	0
 2310      00000000 
 2311 4760 00000000 		.quad	.L106
 2311      00000000 
 2312 4768 00000000 		.quad	0
 2312      00000000 
 2313 4770 00000000 		.quad	.L106
 2313      00000000 
 2314 4778 00000000 		.quad	0
 2314      00000000 
 2315 4780 00000000 		.quad	.L106
 2315      00000000 
 2316 4788 00000000 		.quad	0
 2316      00000000 
 2317 4790 00000000 		.quad	.L106
 2317      00000000 
 2318 4798 00000000 		.quad	0
 2318      00000000 
 2319 47a0 00000000 		.quad	.L106
 2319      00000000 
 2320 47a8 00000000 		.quad	0
 2320      00000000 
 2321 47b0 00000000 		.quad	.L106
 2321      00000000 
 2322 47b8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 82


 2322      00000000 
 2323 47c0 00000000 		.quad	.L106
 2323      00000000 
 2324 47c8 00000000 		.quad	0
 2324      00000000 
 2325 47d0 00000000 		.quad	.L106
 2325      00000000 
 2326 47d8 00000000 		.quad	0
 2326      00000000 
 2327 47e0 00000000 		.quad	.L106
 2327      00000000 
 2328 47e8 00000000 		.quad	0
 2328      00000000 
 2329 47f0 00000000 		.quad	.L106
 2329      00000000 
 2330 47f8 00000000 		.quad	0
 2330      00000000 
 2331 4800 00000000 		.quad	.L106
 2331      00000000 
 2332 4808 00000000 		.quad	0
 2332      00000000 
 2333 4810 00000000 		.quad	.L106
 2333      00000000 
 2334 4818 00000000 		.quad	0
 2334      00000000 
 2335 4820 00000000 		.quad	.L106
 2335      00000000 
 2336 4828 00000000 		.quad	0
 2336      00000000 
 2337 4830 00000000 		.quad	.L106
 2337      00000000 
 2338 4838 00000000 		.quad	0
 2338      00000000 
 2339 4840 00000000 		.quad	.L106
 2339      00000000 
 2340 4848 00000000 		.quad	0
 2340      00000000 
 2341 4850 00000000 		.quad	.L106
 2341      00000000 
 2342 4858 00000000 		.quad	0
 2342      00000000 
 2343 4860 00000000 		.quad	.L106
 2343      00000000 
 2344 4868 00000000 		.quad	0
 2344      00000000 
 2345 4870 00000000 		.quad	.L106
 2345      00000000 
 2346 4878 00000000 		.quad	0
 2346      00000000 
 2347 4880 00000000 		.quad	.L106
 2347      00000000 
 2348 4888 00000000 		.quad	0
 2348      00000000 
 2349 4890 00000000 		.quad	.L106
 2349      00000000 
 2350 4898 00000000 		.quad	0
 2350      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 83


 2351 48a0 00000000 		.quad	.L106
 2351      00000000 
 2352 48a8 00000000 		.quad	0
 2352      00000000 
 2353 48b0 00000000 		.quad	.L106
 2353      00000000 
 2354 48b8 00000000 		.quad	0
 2354      00000000 
 2355 48c0 00000000 		.quad	.L106
 2355      00000000 
 2356 48c8 00000000 		.quad	0
 2356      00000000 
 2357 48d0 00000000 		.quad	.L106
 2357      00000000 
 2358 48d8 00000000 		.quad	0
 2358      00000000 
 2359 48e0 00000000 		.quad	.L106
 2359      00000000 
 2360 48e8 00000000 		.quad	0
 2360      00000000 
 2361 48f0 00000000 		.quad	.L106
 2361      00000000 
 2362 48f8 00000000 		.quad	0
 2362      00000000 
 2363 4900 00000000 		.quad	.L106
 2363      00000000 
 2364 4908 00000000 		.quad	0
 2364      00000000 
 2365 4910 00000000 		.quad	.L106
 2365      00000000 
 2366 4918 00000000 		.quad	0
 2366      00000000 
 2367 4920 00000000 		.quad	.L106
 2367      00000000 
 2368 4928 00000000 		.quad	0
 2368      00000000 
 2369 4930 00000000 		.quad	.L106
 2369      00000000 
 2370 4938 00000000 		.quad	0
 2370      00000000 
 2371 4940 00000000 		.quad	.L106
 2371      00000000 
 2372 4948 00000000 		.quad	0
 2372      00000000 
 2373 4950 00000000 		.quad	.L106
 2373      00000000 
 2374 4958 00000000 		.quad	0
 2374      00000000 
 2375 4960 00000000 		.quad	.L106
 2375      00000000 
 2376 4968 00000000 		.quad	0
 2376      00000000 
 2377 4970 00000000 		.quad	.L106
 2377      00000000 
 2378 4978 00000000 		.quad	0
 2378      00000000 
 2379 4980 00000000 		.quad	.L106
GAS LISTING /tmp/cc15eBE3.s 			page 84


 2379      00000000 
 2380 4988 00000000 		.quad	0
 2380      00000000 
 2381 4990 00000000 		.quad	.L106
 2381      00000000 
 2382 4998 00000000 		.quad	0
 2382      00000000 
 2383 49a0 00000000 		.quad	.L106
 2383      00000000 
 2384 49a8 00000000 		.quad	0
 2384      00000000 
 2385 49b0 00000000 		.quad	.L106
 2385      00000000 
 2386 49b8 00000000 		.quad	0
 2386      00000000 
 2387 49c0 00000000 		.quad	.L106
 2387      00000000 
 2388 49c8 00000000 		.quad	0
 2388      00000000 
 2389 49d0 00000000 		.quad	.L106
 2389      00000000 
 2390 49d8 00000000 		.quad	0
 2390      00000000 
 2391 49e0 00000000 		.quad	.L106
 2391      00000000 
 2392 49e8 00000000 		.quad	0
 2392      00000000 
 2393 49f0 00000000 		.quad	.L106
 2393      00000000 
 2394 49f8 00000000 		.quad	0
 2394      00000000 
 2395 4a00 00000000 		.quad	.L106
 2395      00000000 
 2396 4a08 00000000 		.quad	0
 2396      00000000 
 2397 4a10 00000000 		.quad	.L106
 2397      00000000 
 2398 4a18 00000000 		.quad	0
 2398      00000000 
 2399 4a20 00000000 		.quad	.L106
 2399      00000000 
 2400 4a28 00000000 		.quad	0
 2400      00000000 
 2401 4a30 00000000 		.quad	.L106
 2401      00000000 
 2402 4a38 00000000 		.quad	0
 2402      00000000 
 2403 4a40 00000000 		.quad	.L106
 2403      00000000 
 2404 4a48 00000000 		.quad	0
 2404      00000000 
 2405 4a50 00000000 		.quad	.L106
 2405      00000000 
 2406 4a58 00000000 		.quad	0
 2406      00000000 
 2407 4a60 00000000 		.quad	.L106
 2407      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 85


 2408 4a68 00000000 		.quad	0
 2408      00000000 
 2409 4a70 00000000 		.quad	.L106
 2409      00000000 
 2410 4a78 00000000 		.quad	0
 2410      00000000 
 2411 4a80 00000000 		.quad	.L106
 2411      00000000 
 2412 4a88 00000000 		.quad	0
 2412      00000000 
 2413 4a90 00000000 		.quad	.L106
 2413      00000000 
 2414 4a98 00000000 		.quad	0
 2414      00000000 
 2415 4aa0 00000000 		.quad	.L106
 2415      00000000 
 2416 4aa8 00000000 		.quad	0
 2416      00000000 
 2417 4ab0 00000000 		.quad	.L106
 2417      00000000 
 2418 4ab8 00000000 		.quad	0
 2418      00000000 
 2419 4ac0 00000000 		.quad	.L106
 2419      00000000 
 2420 4ac8 00000000 		.quad	0
 2420      00000000 
 2421 4ad0 00000000 		.quad	.L106
 2421      00000000 
 2422 4ad8 00000000 		.quad	0
 2422      00000000 
 2423 4ae0 00000000 		.quad	.L106
 2423      00000000 
 2424 4ae8 00000000 		.quad	0
 2424      00000000 
 2425 4af0 00000000 		.quad	.L106
 2425      00000000 
 2426 4af8 00000000 		.quad	0
 2426      00000000 
 2427 4b00 00000000 		.quad	.L106
 2427      00000000 
 2428 4b08 00000000 		.quad	0
 2428      00000000 
 2429 4b10 00000000 		.quad	.L106
 2429      00000000 
 2430 4b18 00000000 		.quad	0
 2430      00000000 
 2431 4b20 00000000 		.quad	.L106
 2431      00000000 
 2432 4b28 00000000 		.quad	0
 2432      00000000 
 2433 4b30 00000000 		.quad	.L106
 2433      00000000 
 2434 4b38 00000000 		.quad	0
 2434      00000000 
 2435 4b40 00000000 		.quad	.L106
 2435      00000000 
 2436 4b48 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 86


 2436      00000000 
 2437 4b50 00000000 		.quad	.L106
 2437      00000000 
 2438 4b58 00000000 		.quad	0
 2438      00000000 
 2439 4b60 00000000 		.quad	.L106
 2439      00000000 
 2440 4b68 00000000 		.quad	0
 2440      00000000 
 2441 4b70 00000000 		.quad	.L106
 2441      00000000 
 2442 4b78 00000000 		.quad	0
 2442      00000000 
 2443 4b80 00000000 		.quad	.L106
 2443      00000000 
 2444 4b88 00000000 		.quad	0
 2444      00000000 
 2445 4b90 00000000 		.quad	.L106
 2445      00000000 
 2446 4b98 00000000 		.quad	0
 2446      00000000 
 2447              		.align 16
 2448              	.LC11:
 2449 4ba0 00000000 		.quad	.L111
 2449      00000000 
 2450 4ba8 00000000 		.quad	0
 2450      00000000 
 2451 4bb0 00000000 		.quad	.L111
 2451      00000000 
 2452 4bb8 00000000 		.quad	0
 2452      00000000 
 2453 4bc0 00000000 		.quad	.L111
 2453      00000000 
 2454 4bc8 00000000 		.quad	0
 2454      00000000 
 2455 4bd0 00000000 		.quad	.L111
 2455      00000000 
 2456 4bd8 00000000 		.quad	0
 2456      00000000 
 2457 4be0 00000000 		.quad	.L111
 2457      00000000 
 2458 4be8 00000000 		.quad	0
 2458      00000000 
 2459 4bf0 00000000 		.quad	.L111
 2459      00000000 
 2460 4bf8 00000000 		.quad	0
 2460      00000000 
 2461 4c00 00000000 		.quad	.L111
 2461      00000000 
 2462 4c08 00000000 		.quad	0
 2462      00000000 
 2463 4c10 00000000 		.quad	.L111
 2463      00000000 
 2464 4c18 00000000 		.quad	0
 2464      00000000 
 2465 4c20 00000000 		.quad	.L111
 2465      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 87


 2466 4c28 00000000 		.quad	0
 2466      00000000 
 2467 4c30 00000000 		.quad	.L111
 2467      00000000 
 2468 4c38 00000000 		.quad	0
 2468      00000000 
 2469 4c40 00000000 		.quad	.L111
 2469      00000000 
 2470 4c48 00000000 		.quad	0
 2470      00000000 
 2471 4c50 00000000 		.quad	.L111
 2471      00000000 
 2472 4c58 00000000 		.quad	0
 2472      00000000 
 2473 4c60 00000000 		.quad	.L111
 2473      00000000 
 2474 4c68 00000000 		.quad	0
 2474      00000000 
 2475 4c70 00000000 		.quad	.L111
 2475      00000000 
 2476 4c78 00000000 		.quad	0
 2476      00000000 
 2477 4c80 00000000 		.quad	.L111
 2477      00000000 
 2478 4c88 00000000 		.quad	0
 2478      00000000 
 2479 4c90 00000000 		.quad	.L111
 2479      00000000 
 2480 4c98 00000000 		.quad	0
 2480      00000000 
 2481 4ca0 00000000 		.quad	.L111
 2481      00000000 
 2482 4ca8 00000000 		.quad	0
 2482      00000000 
 2483 4cb0 00000000 		.quad	.L111
 2483      00000000 
 2484 4cb8 00000000 		.quad	0
 2484      00000000 
 2485 4cc0 00000000 		.quad	.L111
 2485      00000000 
 2486 4cc8 00000000 		.quad	0
 2486      00000000 
 2487 4cd0 00000000 		.quad	.L111
 2487      00000000 
 2488 4cd8 00000000 		.quad	0
 2488      00000000 
 2489 4ce0 00000000 		.quad	.L111
 2489      00000000 
 2490 4ce8 00000000 		.quad	0
 2490      00000000 
 2491 4cf0 00000000 		.quad	.L111
 2491      00000000 
 2492 4cf8 00000000 		.quad	0
 2492      00000000 
 2493 4d00 00000000 		.quad	.L111
 2493      00000000 
 2494 4d08 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 88


 2494      00000000 
 2495 4d10 00000000 		.quad	.L111
 2495      00000000 
 2496 4d18 00000000 		.quad	0
 2496      00000000 
 2497 4d20 00000000 		.quad	.L111
 2497      00000000 
 2498 4d28 00000000 		.quad	0
 2498      00000000 
 2499 4d30 00000000 		.quad	.L111
 2499      00000000 
 2500 4d38 00000000 		.quad	0
 2500      00000000 
 2501 4d40 00000000 		.quad	.L111
 2501      00000000 
 2502 4d48 00000000 		.quad	0
 2502      00000000 
 2503 4d50 00000000 		.quad	.L111
 2503      00000000 
 2504 4d58 00000000 		.quad	0
 2504      00000000 
 2505 4d60 00000000 		.quad	.L111
 2505      00000000 
 2506 4d68 00000000 		.quad	0
 2506      00000000 
 2507 4d70 00000000 		.quad	.L111
 2507      00000000 
 2508 4d78 00000000 		.quad	0
 2508      00000000 
 2509 4d80 00000000 		.quad	.L111
 2509      00000000 
 2510 4d88 00000000 		.quad	0
 2510      00000000 
 2511 4d90 00000000 		.quad	.L111
 2511      00000000 
 2512 4d98 00000000 		.quad	0
 2512      00000000 
 2513 4da0 00000000 		.quad	.L111
 2513      00000000 
 2514 4da8 00000000 		.quad	0
 2514      00000000 
 2515 4db0 00000000 		.quad	.L112
 2515      00000000 
 2516 4db8 00000000 		.quad	0
 2516      00000000 
 2517 4dc0 00000000 		.quad	.L111
 2517      00000000 
 2518 4dc8 00000000 		.quad	0
 2518      00000000 
 2519 4dd0 00000000 		.quad	.L111
 2519      00000000 
 2520 4dd8 00000000 		.quad	0
 2520      00000000 
 2521 4de0 00000000 		.quad	.L111
 2521      00000000 
 2522 4de8 00000000 		.quad	0
 2522      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 89


 2523 4df0 00000000 		.quad	.L111
 2523      00000000 
 2524 4df8 00000000 		.quad	0
 2524      00000000 
 2525 4e00 00000000 		.quad	.L111
 2525      00000000 
 2526 4e08 00000000 		.quad	0
 2526      00000000 
 2527 4e10 00000000 		.quad	.L111
 2527      00000000 
 2528 4e18 00000000 		.quad	0
 2528      00000000 
 2529 4e20 00000000 		.quad	.L111
 2529      00000000 
 2530 4e28 00000000 		.quad	0
 2530      00000000 
 2531 4e30 00000000 		.quad	.L111
 2531      00000000 
 2532 4e38 00000000 		.quad	0
 2532      00000000 
 2533 4e40 00000000 		.quad	.L111
 2533      00000000 
 2534 4e48 00000000 		.quad	0
 2534      00000000 
 2535 4e50 00000000 		.quad	.L111
 2535      00000000 
 2536 4e58 00000000 		.quad	0
 2536      00000000 
 2537 4e60 00000000 		.quad	.L111
 2537      00000000 
 2538 4e68 00000000 		.quad	0
 2538      00000000 
 2539 4e70 00000000 		.quad	.L111
 2539      00000000 
 2540 4e78 00000000 		.quad	0
 2540      00000000 
 2541 4e80 00000000 		.quad	.L111
 2541      00000000 
 2542 4e88 00000000 		.quad	0
 2542      00000000 
 2543 4e90 00000000 		.quad	.L113
 2543      00000000 
 2544 4e98 00000000 		.quad	0
 2544      00000000 
 2545 4ea0 00000000 		.quad	.L114
 2545      00000000 
 2546 4ea8 00000000 		.quad	0
 2546      00000000 
 2547 4eb0 00000000 		.quad	.L111
 2547      00000000 
 2548 4eb8 00000000 		.quad	0
 2548      00000000 
 2549 4ec0 00000000 		.quad	.L111
 2549      00000000 
 2550 4ec8 00000000 		.quad	0
 2550      00000000 
 2551 4ed0 00000000 		.quad	.L111
GAS LISTING /tmp/cc15eBE3.s 			page 90


 2551      00000000 
 2552 4ed8 00000000 		.quad	0
 2552      00000000 
 2553 4ee0 00000000 		.quad	.L111
 2553      00000000 
 2554 4ee8 00000000 		.quad	0
 2554      00000000 
 2555 4ef0 00000000 		.quad	.L111
 2555      00000000 
 2556 4ef8 00000000 		.quad	0
 2556      00000000 
 2557 4f00 00000000 		.quad	.L111
 2557      00000000 
 2558 4f08 00000000 		.quad	0
 2558      00000000 
 2559 4f10 00000000 		.quad	.L111
 2559      00000000 
 2560 4f18 00000000 		.quad	0
 2560      00000000 
 2561 4f20 00000000 		.quad	.L111
 2561      00000000 
 2562 4f28 00000000 		.quad	0
 2562      00000000 
 2563 4f30 00000000 		.quad	.L111
 2563      00000000 
 2564 4f38 00000000 		.quad	0
 2564      00000000 
 2565 4f40 00000000 		.quad	.L111
 2565      00000000 
 2566 4f48 00000000 		.quad	0
 2566      00000000 
 2567 4f50 00000000 		.quad	.L111
 2567      00000000 
 2568 4f58 00000000 		.quad	0
 2568      00000000 
 2569 4f60 00000000 		.quad	.L111
 2569      00000000 
 2570 4f68 00000000 		.quad	0
 2570      00000000 
 2571 4f70 00000000 		.quad	.L111
 2571      00000000 
 2572 4f78 00000000 		.quad	0
 2572      00000000 
 2573 4f80 00000000 		.quad	.L111
 2573      00000000 
 2574 4f88 00000000 		.quad	0
 2574      00000000 
 2575 4f90 00000000 		.quad	.L111
 2575      00000000 
 2576 4f98 00000000 		.quad	0
 2576      00000000 
 2577 4fa0 00000000 		.quad	.L111
 2577      00000000 
 2578 4fa8 00000000 		.quad	0
 2578      00000000 
 2579 4fb0 00000000 		.quad	.L111
 2579      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 91


 2580 4fb8 00000000 		.quad	0
 2580      00000000 
 2581 4fc0 00000000 		.quad	.L111
 2581      00000000 
 2582 4fc8 00000000 		.quad	0
 2582      00000000 
 2583 4fd0 00000000 		.quad	.L111
 2583      00000000 
 2584 4fd8 00000000 		.quad	0
 2584      00000000 
 2585 4fe0 00000000 		.quad	.L111
 2585      00000000 
 2586 4fe8 00000000 		.quad	0
 2586      00000000 
 2587 4ff0 00000000 		.quad	.L111
 2587      00000000 
 2588 4ff8 00000000 		.quad	0
 2588      00000000 
 2589 5000 00000000 		.quad	.L111
 2589      00000000 
 2590 5008 00000000 		.quad	0
 2590      00000000 
 2591 5010 00000000 		.quad	.L111
 2591      00000000 
 2592 5018 00000000 		.quad	0
 2592      00000000 
 2593 5020 00000000 		.quad	.L111
 2593      00000000 
 2594 5028 00000000 		.quad	0
 2594      00000000 
 2595 5030 00000000 		.quad	.L111
 2595      00000000 
 2596 5038 00000000 		.quad	0
 2596      00000000 
 2597 5040 00000000 		.quad	.L111
 2597      00000000 
 2598 5048 00000000 		.quad	0
 2598      00000000 
 2599 5050 00000000 		.quad	.L111
 2599      00000000 
 2600 5058 00000000 		.quad	0
 2600      00000000 
 2601 5060 00000000 		.quad	.L111
 2601      00000000 
 2602 5068 00000000 		.quad	0
 2602      00000000 
 2603 5070 00000000 		.quad	.L111
 2603      00000000 
 2604 5078 00000000 		.quad	0
 2604      00000000 
 2605 5080 00000000 		.quad	.L115
 2605      00000000 
 2606 5088 00000000 		.quad	0
 2606      00000000 
 2607 5090 00000000 		.quad	.L111
 2607      00000000 
 2608 5098 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 92


 2608      00000000 
 2609 50a0 00000000 		.quad	.L111
 2609      00000000 
 2610 50a8 00000000 		.quad	0
 2610      00000000 
 2611 50b0 00000000 		.quad	.L111
 2611      00000000 
 2612 50b8 00000000 		.quad	0
 2612      00000000 
 2613 50c0 00000000 		.quad	.L111
 2613      00000000 
 2614 50c8 00000000 		.quad	0
 2614      00000000 
 2615 50d0 00000000 		.quad	.L111
 2615      00000000 
 2616 50d8 00000000 		.quad	0
 2616      00000000 
 2617 50e0 00000000 		.quad	.L111
 2617      00000000 
 2618 50e8 00000000 		.quad	0
 2618      00000000 
 2619 50f0 00000000 		.quad	.L111
 2619      00000000 
 2620 50f8 00000000 		.quad	0
 2620      00000000 
 2621 5100 00000000 		.quad	.L111
 2621      00000000 
 2622 5108 00000000 		.quad	0
 2622      00000000 
 2623 5110 00000000 		.quad	.L111
 2623      00000000 
 2624 5118 00000000 		.quad	0
 2624      00000000 
 2625 5120 00000000 		.quad	.L111
 2625      00000000 
 2626 5128 00000000 		.quad	0
 2626      00000000 
 2627 5130 00000000 		.quad	.L111
 2627      00000000 
 2628 5138 00000000 		.quad	0
 2628      00000000 
 2629 5140 00000000 		.quad	.L111
 2629      00000000 
 2630 5148 00000000 		.quad	0
 2630      00000000 
 2631 5150 00000000 		.quad	.L111
 2631      00000000 
 2632 5158 00000000 		.quad	0
 2632      00000000 
 2633 5160 00000000 		.quad	.L111
 2633      00000000 
 2634 5168 00000000 		.quad	0
 2634      00000000 
 2635 5170 00000000 		.quad	.L111
 2635      00000000 
 2636 5178 00000000 		.quad	0
 2636      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 93


 2637 5180 00000000 		.quad	.L111
 2637      00000000 
 2638 5188 00000000 		.quad	0
 2638      00000000 
 2639 5190 00000000 		.quad	.L111
 2639      00000000 
 2640 5198 00000000 		.quad	0
 2640      00000000 
 2641 51a0 00000000 		.quad	.L111
 2641      00000000 
 2642 51a8 00000000 		.quad	0
 2642      00000000 
 2643 51b0 00000000 		.quad	.L111
 2643      00000000 
 2644 51b8 00000000 		.quad	0
 2644      00000000 
 2645 51c0 00000000 		.quad	.L111
 2645      00000000 
 2646 51c8 00000000 		.quad	0
 2646      00000000 
 2647 51d0 00000000 		.quad	.L111
 2647      00000000 
 2648 51d8 00000000 		.quad	0
 2648      00000000 
 2649 51e0 00000000 		.quad	.L111
 2649      00000000 
 2650 51e8 00000000 		.quad	0
 2650      00000000 
 2651 51f0 00000000 		.quad	.L111
 2651      00000000 
 2652 51f8 00000000 		.quad	0
 2652      00000000 
 2653 5200 00000000 		.quad	.L111
 2653      00000000 
 2654 5208 00000000 		.quad	0
 2654      00000000 
 2655 5210 00000000 		.quad	.L111
 2655      00000000 
 2656 5218 00000000 		.quad	0
 2656      00000000 
 2657 5220 00000000 		.quad	.L111
 2657      00000000 
 2658 5228 00000000 		.quad	0
 2658      00000000 
 2659 5230 00000000 		.quad	.L111
 2659      00000000 
 2660 5238 00000000 		.quad	0
 2660      00000000 
 2661 5240 00000000 		.quad	.L111
 2661      00000000 
 2662 5248 00000000 		.quad	0
 2662      00000000 
 2663 5250 00000000 		.quad	.L111
 2663      00000000 
 2664 5258 00000000 		.quad	0
 2664      00000000 
 2665 5260 00000000 		.quad	.L111
GAS LISTING /tmp/cc15eBE3.s 			page 94


 2665      00000000 
 2666 5268 00000000 		.quad	0
 2666      00000000 
 2667 5270 00000000 		.quad	.L111
 2667      00000000 
 2668 5278 00000000 		.quad	0
 2668      00000000 
 2669              		.align 16
 2670              	.LC12:
 2671 5280 00000000 		.quad	.L116
 2671      00000000 
 2672 5288 00000000 		.quad	0
 2672      00000000 
 2673 5290 00000000 		.quad	.L117
 2673      00000000 
 2674 5298 00000000 		.quad	0
 2674      00000000 
 2675 52a0 00000000 		.quad	.L117
 2675      00000000 
 2676 52a8 00000000 		.quad	0
 2676      00000000 
 2677 52b0 00000000 		.quad	.L117
 2677      00000000 
 2678 52b8 00000000 		.quad	0
 2678      00000000 
 2679 52c0 00000000 		.quad	.L117
 2679      00000000 
 2680 52c8 00000000 		.quad	0
 2680      00000000 
 2681 52d0 00000000 		.quad	.L117
 2681      00000000 
 2682 52d8 00000000 		.quad	0
 2682      00000000 
 2683 52e0 00000000 		.quad	.L117
 2683      00000000 
 2684 52e8 00000000 		.quad	0
 2684      00000000 
 2685 52f0 00000000 		.quad	.L117
 2685      00000000 
 2686 52f8 00000000 		.quad	0
 2686      00000000 
 2687 5300 00000000 		.quad	.L117
 2687      00000000 
 2688 5308 00000000 		.quad	0
 2688      00000000 
 2689 5310 00000000 		.quad	.L117
 2689      00000000 
 2690 5318 00000000 		.quad	0
 2690      00000000 
 2691 5320 00000000 		.quad	.L117
 2691      00000000 
 2692 5328 00000000 		.quad	0
 2692      00000000 
 2693 5330 00000000 		.quad	.L117
 2693      00000000 
 2694 5338 00000000 		.quad	0
 2694      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 95


 2695 5340 00000000 		.quad	.L117
 2695      00000000 
 2696 5348 00000000 		.quad	0
 2696      00000000 
 2697 5350 00000000 		.quad	.L117
 2697      00000000 
 2698 5358 00000000 		.quad	0
 2698      00000000 
 2699 5360 00000000 		.quad	.L117
 2699      00000000 
 2700 5368 00000000 		.quad	0
 2700      00000000 
 2701 5370 00000000 		.quad	.L117
 2701      00000000 
 2702 5378 00000000 		.quad	0
 2702      00000000 
 2703 5380 00000000 		.quad	.L117
 2703      00000000 
 2704 5388 00000000 		.quad	0
 2704      00000000 
 2705 5390 00000000 		.quad	.L117
 2705      00000000 
 2706 5398 00000000 		.quad	0
 2706      00000000 
 2707 53a0 00000000 		.quad	.L117
 2707      00000000 
 2708 53a8 00000000 		.quad	0
 2708      00000000 
 2709 53b0 00000000 		.quad	.L117
 2709      00000000 
 2710 53b8 00000000 		.quad	0
 2710      00000000 
 2711 53c0 00000000 		.quad	.L117
 2711      00000000 
 2712 53c8 00000000 		.quad	0
 2712      00000000 
 2713 53d0 00000000 		.quad	.L117
 2713      00000000 
 2714 53d8 00000000 		.quad	0
 2714      00000000 
 2715 53e0 00000000 		.quad	.L117
 2715      00000000 
 2716 53e8 00000000 		.quad	0
 2716      00000000 
 2717 53f0 00000000 		.quad	.L117
 2717      00000000 
 2718 53f8 00000000 		.quad	0
 2718      00000000 
 2719 5400 00000000 		.quad	.L117
 2719      00000000 
 2720 5408 00000000 		.quad	0
 2720      00000000 
 2721 5410 00000000 		.quad	.L117
 2721      00000000 
 2722 5418 00000000 		.quad	0
 2722      00000000 
 2723 5420 00000000 		.quad	.L117
GAS LISTING /tmp/cc15eBE3.s 			page 96


 2723      00000000 
 2724 5428 00000000 		.quad	0
 2724      00000000 
 2725 5430 00000000 		.quad	.L117
 2725      00000000 
 2726 5438 00000000 		.quad	0
 2726      00000000 
 2727 5440 00000000 		.quad	.L117
 2727      00000000 
 2728 5448 00000000 		.quad	0
 2728      00000000 
 2729 5450 00000000 		.quad	.L117
 2729      00000000 
 2730 5458 00000000 		.quad	0
 2730      00000000 
 2731 5460 00000000 		.quad	.L117
 2731      00000000 
 2732 5468 00000000 		.quad	0
 2732      00000000 
 2733 5470 00000000 		.quad	.L117
 2733      00000000 
 2734 5478 00000000 		.quad	0
 2734      00000000 
 2735 5480 00000000 		.quad	.L117
 2735      00000000 
 2736 5488 00000000 		.quad	0
 2736      00000000 
 2737 5490 00000000 		.quad	.L117
 2737      00000000 
 2738 5498 00000000 		.quad	0
 2738      00000000 
 2739 54a0 00000000 		.quad	.L117
 2739      00000000 
 2740 54a8 00000000 		.quad	0
 2740      00000000 
 2741 54b0 00000000 		.quad	.L117
 2741      00000000 
 2742 54b8 00000000 		.quad	0
 2742      00000000 
 2743 54c0 00000000 		.quad	.L117
 2743      00000000 
 2744 54c8 00000000 		.quad	0
 2744      00000000 
 2745 54d0 00000000 		.quad	.L117
 2745      00000000 
 2746 54d8 00000000 		.quad	0
 2746      00000000 
 2747 54e0 00000000 		.quad	.L117
 2747      00000000 
 2748 54e8 00000000 		.quad	0
 2748      00000000 
 2749 54f0 00000000 		.quad	.L117
 2749      00000000 
 2750 54f8 00000000 		.quad	0
 2750      00000000 
 2751 5500 00000000 		.quad	.L117
 2751      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 97


 2752 5508 00000000 		.quad	0
 2752      00000000 
 2753 5510 00000000 		.quad	.L117
 2753      00000000 
 2754 5518 00000000 		.quad	0
 2754      00000000 
 2755 5520 00000000 		.quad	.L117
 2755      00000000 
 2756 5528 00000000 		.quad	0
 2756      00000000 
 2757 5530 00000000 		.quad	.L117
 2757      00000000 
 2758 5538 00000000 		.quad	0
 2758      00000000 
 2759 5540 00000000 		.quad	.L117
 2759      00000000 
 2760 5548 00000000 		.quad	0
 2760      00000000 
 2761 5550 00000000 		.quad	.L117
 2761      00000000 
 2762 5558 00000000 		.quad	0
 2762      00000000 
 2763 5560 00000000 		.quad	.L117
 2763      00000000 
 2764 5568 00000000 		.quad	0
 2764      00000000 
 2765 5570 00000000 		.quad	.L117
 2765      00000000 
 2766 5578 00000000 		.quad	0
 2766      00000000 
 2767 5580 00000000 		.quad	.L117
 2767      00000000 
 2768 5588 00000000 		.quad	0
 2768      00000000 
 2769 5590 00000000 		.quad	.L117
 2769      00000000 
 2770 5598 00000000 		.quad	0
 2770      00000000 
 2771 55a0 00000000 		.quad	.L117
 2771      00000000 
 2772 55a8 00000000 		.quad	0
 2772      00000000 
 2773 55b0 00000000 		.quad	.L117
 2773      00000000 
 2774 55b8 00000000 		.quad	0
 2774      00000000 
 2775 55c0 00000000 		.quad	.L118
 2775      00000000 
 2776 55c8 00000000 		.quad	0
 2776      00000000 
 2777 55d0 00000000 		.quad	.L117
 2777      00000000 
 2778 55d8 00000000 		.quad	0
 2778      00000000 
 2779 55e0 00000000 		.quad	.L117
 2779      00000000 
 2780 55e8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 98


 2780      00000000 
 2781 55f0 00000000 		.quad	.L117
 2781      00000000 
 2782 55f8 00000000 		.quad	0
 2782      00000000 
 2783 5600 00000000 		.quad	.L117
 2783      00000000 
 2784 5608 00000000 		.quad	0
 2784      00000000 
 2785 5610 00000000 		.quad	.L117
 2785      00000000 
 2786 5618 00000000 		.quad	0
 2786      00000000 
 2787 5620 00000000 		.quad	.L117
 2787      00000000 
 2788 5628 00000000 		.quad	0
 2788      00000000 
 2789 5630 00000000 		.quad	.L117
 2789      00000000 
 2790 5638 00000000 		.quad	0
 2790      00000000 
 2791 5640 00000000 		.quad	.L117
 2791      00000000 
 2792 5648 00000000 		.quad	0
 2792      00000000 
 2793 5650 00000000 		.quad	.L117
 2793      00000000 
 2794 5658 00000000 		.quad	0
 2794      00000000 
 2795 5660 00000000 		.quad	.L117
 2795      00000000 
 2796 5668 00000000 		.quad	0
 2796      00000000 
 2797 5670 00000000 		.quad	.L117
 2797      00000000 
 2798 5678 00000000 		.quad	0
 2798      00000000 
 2799 5680 00000000 		.quad	.L117
 2799      00000000 
 2800 5688 00000000 		.quad	0
 2800      00000000 
 2801 5690 00000000 		.quad	.L117
 2801      00000000 
 2802 5698 00000000 		.quad	0
 2802      00000000 
 2803 56a0 00000000 		.quad	.L117
 2803      00000000 
 2804 56a8 00000000 		.quad	0
 2804      00000000 
 2805 56b0 00000000 		.quad	.L117
 2805      00000000 
 2806 56b8 00000000 		.quad	0
 2806      00000000 
 2807 56c0 00000000 		.quad	.L117
 2807      00000000 
 2808 56c8 00000000 		.quad	0
 2808      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 99


 2809 56d0 00000000 		.quad	.L117
 2809      00000000 
 2810 56d8 00000000 		.quad	0
 2810      00000000 
 2811 56e0 00000000 		.quad	.L117
 2811      00000000 
 2812 56e8 00000000 		.quad	0
 2812      00000000 
 2813 56f0 00000000 		.quad	.L117
 2813      00000000 
 2814 56f8 00000000 		.quad	0
 2814      00000000 
 2815 5700 00000000 		.quad	.L117
 2815      00000000 
 2816 5708 00000000 		.quad	0
 2816      00000000 
 2817 5710 00000000 		.quad	.L117
 2817      00000000 
 2818 5718 00000000 		.quad	0
 2818      00000000 
 2819 5720 00000000 		.quad	.L117
 2819      00000000 
 2820 5728 00000000 		.quad	0
 2820      00000000 
 2821 5730 00000000 		.quad	.L117
 2821      00000000 
 2822 5738 00000000 		.quad	0
 2822      00000000 
 2823 5740 00000000 		.quad	.L117
 2823      00000000 
 2824 5748 00000000 		.quad	0
 2824      00000000 
 2825 5750 00000000 		.quad	.L117
 2825      00000000 
 2826 5758 00000000 		.quad	0
 2826      00000000 
 2827 5760 00000000 		.quad	.L117
 2827      00000000 
 2828 5768 00000000 		.quad	0
 2828      00000000 
 2829 5770 00000000 		.quad	.L117
 2829      00000000 
 2830 5778 00000000 		.quad	0
 2830      00000000 
 2831 5780 00000000 		.quad	.L117
 2831      00000000 
 2832 5788 00000000 		.quad	0
 2832      00000000 
 2833 5790 00000000 		.quad	.L117
 2833      00000000 
 2834 5798 00000000 		.quad	0
 2834      00000000 
 2835 57a0 00000000 		.quad	.L117
 2835      00000000 
 2836 57a8 00000000 		.quad	0
 2836      00000000 
 2837 57b0 00000000 		.quad	.L117
GAS LISTING /tmp/cc15eBE3.s 			page 100


 2837      00000000 
 2838 57b8 00000000 		.quad	0
 2838      00000000 
 2839 57c0 00000000 		.quad	.L117
 2839      00000000 
 2840 57c8 00000000 		.quad	0
 2840      00000000 
 2841 57d0 00000000 		.quad	.L117
 2841      00000000 
 2842 57d8 00000000 		.quad	0
 2842      00000000 
 2843 57e0 00000000 		.quad	.L117
 2843      00000000 
 2844 57e8 00000000 		.quad	0
 2844      00000000 
 2845 57f0 00000000 		.quad	.L117
 2845      00000000 
 2846 57f8 00000000 		.quad	0
 2846      00000000 
 2847 5800 00000000 		.quad	.L117
 2847      00000000 
 2848 5808 00000000 		.quad	0
 2848      00000000 
 2849 5810 00000000 		.quad	.L117
 2849      00000000 
 2850 5818 00000000 		.quad	0
 2850      00000000 
 2851 5820 00000000 		.quad	.L117
 2851      00000000 
 2852 5828 00000000 		.quad	0
 2852      00000000 
 2853 5830 00000000 		.quad	.L117
 2853      00000000 
 2854 5838 00000000 		.quad	0
 2854      00000000 
 2855 5840 00000000 		.quad	.L117
 2855      00000000 
 2856 5848 00000000 		.quad	0
 2856      00000000 
 2857 5850 00000000 		.quad	.L117
 2857      00000000 
 2858 5858 00000000 		.quad	0
 2858      00000000 
 2859 5860 00000000 		.quad	.L117
 2859      00000000 
 2860 5868 00000000 		.quad	0
 2860      00000000 
 2861 5870 00000000 		.quad	.L117
 2861      00000000 
 2862 5878 00000000 		.quad	0
 2862      00000000 
 2863 5880 00000000 		.quad	.L117
 2863      00000000 
 2864 5888 00000000 		.quad	0
 2864      00000000 
 2865 5890 00000000 		.quad	.L117
 2865      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 101


 2866 5898 00000000 		.quad	0
 2866      00000000 
 2867 58a0 00000000 		.quad	.L117
 2867      00000000 
 2868 58a8 00000000 		.quad	0
 2868      00000000 
 2869 58b0 00000000 		.quad	.L117
 2869      00000000 
 2870 58b8 00000000 		.quad	0
 2870      00000000 
 2871 58c0 00000000 		.quad	.L117
 2871      00000000 
 2872 58c8 00000000 		.quad	0
 2872      00000000 
 2873 58d0 00000000 		.quad	.L117
 2873      00000000 
 2874 58d8 00000000 		.quad	0
 2874      00000000 
 2875 58e0 00000000 		.quad	.L117
 2875      00000000 
 2876 58e8 00000000 		.quad	0
 2876      00000000 
 2877 58f0 00000000 		.quad	.L117
 2877      00000000 
 2878 58f8 00000000 		.quad	0
 2878      00000000 
 2879 5900 00000000 		.quad	.L117
 2879      00000000 
 2880 5908 00000000 		.quad	0
 2880      00000000 
 2881 5910 00000000 		.quad	.L117
 2881      00000000 
 2882 5918 00000000 		.quad	0
 2882      00000000 
 2883 5920 00000000 		.quad	.L117
 2883      00000000 
 2884 5928 00000000 		.quad	0
 2884      00000000 
 2885 5930 00000000 		.quad	.L117
 2885      00000000 
 2886 5938 00000000 		.quad	0
 2886      00000000 
 2887 5940 00000000 		.quad	.L117
 2887      00000000 
 2888 5948 00000000 		.quad	0
 2888      00000000 
 2889 5950 00000000 		.quad	.L117
 2889      00000000 
 2890 5958 00000000 		.quad	0
 2890      00000000 
 2891              		.align 16
 2892              	.LC13:
 2893 5960 00000000 		.quad	.L119
 2893      00000000 
 2894 5968 00000000 		.quad	0
 2894      00000000 
 2895 5970 00000000 		.quad	.L120
GAS LISTING /tmp/cc15eBE3.s 			page 102


 2895      00000000 
 2896 5978 00000000 		.quad	0
 2896      00000000 
 2897 5980 00000000 		.quad	.L120
 2897      00000000 
 2898 5988 00000000 		.quad	0
 2898      00000000 
 2899 5990 00000000 		.quad	.L120
 2899      00000000 
 2900 5998 00000000 		.quad	0
 2900      00000000 
 2901 59a0 00000000 		.quad	.L120
 2901      00000000 
 2902 59a8 00000000 		.quad	0
 2902      00000000 
 2903 59b0 00000000 		.quad	.L120
 2903      00000000 
 2904 59b8 00000000 		.quad	0
 2904      00000000 
 2905 59c0 00000000 		.quad	.L120
 2905      00000000 
 2906 59c8 00000000 		.quad	0
 2906      00000000 
 2907 59d0 00000000 		.quad	.L120
 2907      00000000 
 2908 59d8 00000000 		.quad	0
 2908      00000000 
 2909 59e0 00000000 		.quad	.L120
 2909      00000000 
 2910 59e8 00000000 		.quad	0
 2910      00000000 
 2911 59f0 00000000 		.quad	.L120
 2911      00000000 
 2912 59f8 00000000 		.quad	0
 2912      00000000 
 2913 5a00 00000000 		.quad	.L120
 2913      00000000 
 2914 5a08 00000000 		.quad	0
 2914      00000000 
 2915 5a10 00000000 		.quad	.L120
 2915      00000000 
 2916 5a18 00000000 		.quad	0
 2916      00000000 
 2917 5a20 00000000 		.quad	.L120
 2917      00000000 
 2918 5a28 00000000 		.quad	0
 2918      00000000 
 2919 5a30 00000000 		.quad	.L120
 2919      00000000 
 2920 5a38 00000000 		.quad	0
 2920      00000000 
 2921 5a40 00000000 		.quad	.L120
 2921      00000000 
 2922 5a48 00000000 		.quad	0
 2922      00000000 
 2923 5a50 00000000 		.quad	.L120
 2923      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 103


 2924 5a58 00000000 		.quad	0
 2924      00000000 
 2925 5a60 00000000 		.quad	.L120
 2925      00000000 
 2926 5a68 00000000 		.quad	0
 2926      00000000 
 2927 5a70 00000000 		.quad	.L120
 2927      00000000 
 2928 5a78 00000000 		.quad	0
 2928      00000000 
 2929 5a80 00000000 		.quad	.L120
 2929      00000000 
 2930 5a88 00000000 		.quad	0
 2930      00000000 
 2931 5a90 00000000 		.quad	.L120
 2931      00000000 
 2932 5a98 00000000 		.quad	0
 2932      00000000 
 2933 5aa0 00000000 		.quad	.L120
 2933      00000000 
 2934 5aa8 00000000 		.quad	0
 2934      00000000 
 2935 5ab0 00000000 		.quad	.L120
 2935      00000000 
 2936 5ab8 00000000 		.quad	0
 2936      00000000 
 2937 5ac0 00000000 		.quad	.L120
 2937      00000000 
 2938 5ac8 00000000 		.quad	0
 2938      00000000 
 2939 5ad0 00000000 		.quad	.L120
 2939      00000000 
 2940 5ad8 00000000 		.quad	0
 2940      00000000 
 2941 5ae0 00000000 		.quad	.L120
 2941      00000000 
 2942 5ae8 00000000 		.quad	0
 2942      00000000 
 2943 5af0 00000000 		.quad	.L120
 2943      00000000 
 2944 5af8 00000000 		.quad	0
 2944      00000000 
 2945 5b00 00000000 		.quad	.L120
 2945      00000000 
 2946 5b08 00000000 		.quad	0
 2946      00000000 
 2947 5b10 00000000 		.quad	.L120
 2947      00000000 
 2948 5b18 00000000 		.quad	0
 2948      00000000 
 2949 5b20 00000000 		.quad	.L120
 2949      00000000 
 2950 5b28 00000000 		.quad	0
 2950      00000000 
 2951 5b30 00000000 		.quad	.L120
 2951      00000000 
 2952 5b38 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 104


 2952      00000000 
 2953 5b40 00000000 		.quad	.L120
 2953      00000000 
 2954 5b48 00000000 		.quad	0
 2954      00000000 
 2955 5b50 00000000 		.quad	.L120
 2955      00000000 
 2956 5b58 00000000 		.quad	0
 2956      00000000 
 2957 5b60 00000000 		.quad	.L120
 2957      00000000 
 2958 5b68 00000000 		.quad	0
 2958      00000000 
 2959 5b70 00000000 		.quad	.L121
 2959      00000000 
 2960 5b78 00000000 		.quad	0
 2960      00000000 
 2961 5b80 00000000 		.quad	.L120
 2961      00000000 
 2962 5b88 00000000 		.quad	0
 2962      00000000 
 2963 5b90 00000000 		.quad	.L120
 2963      00000000 
 2964 5b98 00000000 		.quad	0
 2964      00000000 
 2965 5ba0 00000000 		.quad	.L120
 2965      00000000 
 2966 5ba8 00000000 		.quad	0
 2966      00000000 
 2967 5bb0 00000000 		.quad	.L120
 2967      00000000 
 2968 5bb8 00000000 		.quad	0
 2968      00000000 
 2969 5bc0 00000000 		.quad	.L120
 2969      00000000 
 2970 5bc8 00000000 		.quad	0
 2970      00000000 
 2971 5bd0 00000000 		.quad	.L120
 2971      00000000 
 2972 5bd8 00000000 		.quad	0
 2972      00000000 
 2973 5be0 00000000 		.quad	.L120
 2973      00000000 
 2974 5be8 00000000 		.quad	0
 2974      00000000 
 2975 5bf0 00000000 		.quad	.L120
 2975      00000000 
 2976 5bf8 00000000 		.quad	0
 2976      00000000 
 2977 5c00 00000000 		.quad	.L120
 2977      00000000 
 2978 5c08 00000000 		.quad	0
 2978      00000000 
 2979 5c10 00000000 		.quad	.L120
 2979      00000000 
 2980 5c18 00000000 		.quad	0
 2980      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 105


 2981 5c20 00000000 		.quad	.L120
 2981      00000000 
 2982 5c28 00000000 		.quad	0
 2982      00000000 
 2983 5c30 00000000 		.quad	.L120
 2983      00000000 
 2984 5c38 00000000 		.quad	0
 2984      00000000 
 2985 5c40 00000000 		.quad	.L120
 2985      00000000 
 2986 5c48 00000000 		.quad	0
 2986      00000000 
 2987 5c50 00000000 		.quad	.L120
 2987      00000000 
 2988 5c58 00000000 		.quad	0
 2988      00000000 
 2989 5c60 00000000 		.quad	.L120
 2989      00000000 
 2990 5c68 00000000 		.quad	0
 2990      00000000 
 2991 5c70 00000000 		.quad	.L120
 2991      00000000 
 2992 5c78 00000000 		.quad	0
 2992      00000000 
 2993 5c80 00000000 		.quad	.L120
 2993      00000000 
 2994 5c88 00000000 		.quad	0
 2994      00000000 
 2995 5c90 00000000 		.quad	.L120
 2995      00000000 
 2996 5c98 00000000 		.quad	0
 2996      00000000 
 2997 5ca0 00000000 		.quad	.L122
 2997      00000000 
 2998 5ca8 00000000 		.quad	0
 2998      00000000 
 2999 5cb0 00000000 		.quad	.L120
 2999      00000000 
 3000 5cb8 00000000 		.quad	0
 3000      00000000 
 3001 5cc0 00000000 		.quad	.L120
 3001      00000000 
 3002 5cc8 00000000 		.quad	0
 3002      00000000 
 3003 5cd0 00000000 		.quad	.L120
 3003      00000000 
 3004 5cd8 00000000 		.quad	0
 3004      00000000 
 3005 5ce0 00000000 		.quad	.L120
 3005      00000000 
 3006 5ce8 00000000 		.quad	0
 3006      00000000 
 3007 5cf0 00000000 		.quad	.L120
 3007      00000000 
 3008 5cf8 00000000 		.quad	0
 3008      00000000 
 3009 5d00 00000000 		.quad	.L120
GAS LISTING /tmp/cc15eBE3.s 			page 106


 3009      00000000 
 3010 5d08 00000000 		.quad	0
 3010      00000000 
 3011 5d10 00000000 		.quad	.L120
 3011      00000000 
 3012 5d18 00000000 		.quad	0
 3012      00000000 
 3013 5d20 00000000 		.quad	.L120
 3013      00000000 
 3014 5d28 00000000 		.quad	0
 3014      00000000 
 3015 5d30 00000000 		.quad	.L120
 3015      00000000 
 3016 5d38 00000000 		.quad	0
 3016      00000000 
 3017 5d40 00000000 		.quad	.L120
 3017      00000000 
 3018 5d48 00000000 		.quad	0
 3018      00000000 
 3019 5d50 00000000 		.quad	.L120
 3019      00000000 
 3020 5d58 00000000 		.quad	0
 3020      00000000 
 3021 5d60 00000000 		.quad	.L120
 3021      00000000 
 3022 5d68 00000000 		.quad	0
 3022      00000000 
 3023 5d70 00000000 		.quad	.L120
 3023      00000000 
 3024 5d78 00000000 		.quad	0
 3024      00000000 
 3025 5d80 00000000 		.quad	.L120
 3025      00000000 
 3026 5d88 00000000 		.quad	0
 3026      00000000 
 3027 5d90 00000000 		.quad	.L120
 3027      00000000 
 3028 5d98 00000000 		.quad	0
 3028      00000000 
 3029 5da0 00000000 		.quad	.L120
 3029      00000000 
 3030 5da8 00000000 		.quad	0
 3030      00000000 
 3031 5db0 00000000 		.quad	.L120
 3031      00000000 
 3032 5db8 00000000 		.quad	0
 3032      00000000 
 3033 5dc0 00000000 		.quad	.L120
 3033      00000000 
 3034 5dc8 00000000 		.quad	0
 3034      00000000 
 3035 5dd0 00000000 		.quad	.L120
 3035      00000000 
 3036 5dd8 00000000 		.quad	0
 3036      00000000 
 3037 5de0 00000000 		.quad	.L120
 3037      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 107


 3038 5de8 00000000 		.quad	0
 3038      00000000 
 3039 5df0 00000000 		.quad	.L120
 3039      00000000 
 3040 5df8 00000000 		.quad	0
 3040      00000000 
 3041 5e00 00000000 		.quad	.L120
 3041      00000000 
 3042 5e08 00000000 		.quad	0
 3042      00000000 
 3043 5e10 00000000 		.quad	.L120
 3043      00000000 
 3044 5e18 00000000 		.quad	0
 3044      00000000 
 3045 5e20 00000000 		.quad	.L120
 3045      00000000 
 3046 5e28 00000000 		.quad	0
 3046      00000000 
 3047 5e30 00000000 		.quad	.L120
 3047      00000000 
 3048 5e38 00000000 		.quad	0
 3048      00000000 
 3049 5e40 00000000 		.quad	.L120
 3049      00000000 
 3050 5e48 00000000 		.quad	0
 3050      00000000 
 3051 5e50 00000000 		.quad	.L120
 3051      00000000 
 3052 5e58 00000000 		.quad	0
 3052      00000000 
 3053 5e60 00000000 		.quad	.L120
 3053      00000000 
 3054 5e68 00000000 		.quad	0
 3054      00000000 
 3055 5e70 00000000 		.quad	.L120
 3055      00000000 
 3056 5e78 00000000 		.quad	0
 3056      00000000 
 3057 5e80 00000000 		.quad	.L120
 3057      00000000 
 3058 5e88 00000000 		.quad	0
 3058      00000000 
 3059 5e90 00000000 		.quad	.L120
 3059      00000000 
 3060 5e98 00000000 		.quad	0
 3060      00000000 
 3061 5ea0 00000000 		.quad	.L120
 3061      00000000 
 3062 5ea8 00000000 		.quad	0
 3062      00000000 
 3063 5eb0 00000000 		.quad	.L120
 3063      00000000 
 3064 5eb8 00000000 		.quad	0
 3064      00000000 
 3065 5ec0 00000000 		.quad	.L123
 3065      00000000 
 3066 5ec8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 108


 3066      00000000 
 3067 5ed0 00000000 		.quad	.L120
 3067      00000000 
 3068 5ed8 00000000 		.quad	0
 3068      00000000 
 3069 5ee0 00000000 		.quad	.L120
 3069      00000000 
 3070 5ee8 00000000 		.quad	0
 3070      00000000 
 3071 5ef0 00000000 		.quad	.L120
 3071      00000000 
 3072 5ef8 00000000 		.quad	0
 3072      00000000 
 3073 5f00 00000000 		.quad	.L120
 3073      00000000 
 3074 5f08 00000000 		.quad	0
 3074      00000000 
 3075 5f10 00000000 		.quad	.L120
 3075      00000000 
 3076 5f18 00000000 		.quad	0
 3076      00000000 
 3077 5f20 00000000 		.quad	.L120
 3077      00000000 
 3078 5f28 00000000 		.quad	0
 3078      00000000 
 3079 5f30 00000000 		.quad	.L120
 3079      00000000 
 3080 5f38 00000000 		.quad	0
 3080      00000000 
 3081 5f40 00000000 		.quad	.L120
 3081      00000000 
 3082 5f48 00000000 		.quad	0
 3082      00000000 
 3083 5f50 00000000 		.quad	.L120
 3083      00000000 
 3084 5f58 00000000 		.quad	0
 3084      00000000 
 3085 5f60 00000000 		.quad	.L120
 3085      00000000 
 3086 5f68 00000000 		.quad	0
 3086      00000000 
 3087 5f70 00000000 		.quad	.L120
 3087      00000000 
 3088 5f78 00000000 		.quad	0
 3088      00000000 
 3089 5f80 00000000 		.quad	.L120
 3089      00000000 
 3090 5f88 00000000 		.quad	0
 3090      00000000 
 3091 5f90 00000000 		.quad	.L120
 3091      00000000 
 3092 5f98 00000000 		.quad	0
 3092      00000000 
 3093 5fa0 00000000 		.quad	.L120
 3093      00000000 
 3094 5fa8 00000000 		.quad	0
 3094      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 109


 3095 5fb0 00000000 		.quad	.L120
 3095      00000000 
 3096 5fb8 00000000 		.quad	0
 3096      00000000 
 3097 5fc0 00000000 		.quad	.L120
 3097      00000000 
 3098 5fc8 00000000 		.quad	0
 3098      00000000 
 3099 5fd0 00000000 		.quad	.L120
 3099      00000000 
 3100 5fd8 00000000 		.quad	0
 3100      00000000 
 3101 5fe0 00000000 		.quad	.L120
 3101      00000000 
 3102 5fe8 00000000 		.quad	0
 3102      00000000 
 3103 5ff0 00000000 		.quad	.L120
 3103      00000000 
 3104 5ff8 00000000 		.quad	0
 3104      00000000 
 3105 6000 00000000 		.quad	.L120
 3105      00000000 
 3106 6008 00000000 		.quad	0
 3106      00000000 
 3107 6010 00000000 		.quad	.L120
 3107      00000000 
 3108 6018 00000000 		.quad	0
 3108      00000000 
 3109 6020 00000000 		.quad	.L120
 3109      00000000 
 3110 6028 00000000 		.quad	0
 3110      00000000 
 3111 6030 00000000 		.quad	.L120
 3111      00000000 
 3112 6038 00000000 		.quad	0
 3112      00000000 
 3113              		.align 16
 3114              	.LC14:
 3115 6040 00000000 		.quad	.L124
 3115      00000000 
 3116 6048 00000000 		.quad	0
 3116      00000000 
 3117 6050 00000000 		.quad	.L125
 3117      00000000 
 3118 6058 00000000 		.quad	0
 3118      00000000 
 3119 6060 00000000 		.quad	.L126
 3119      00000000 
 3120 6068 00000000 		.quad	0
 3120      00000000 
 3121 6070 00000000 		.quad	.L125
 3121      00000000 
 3122 6078 00000000 		.quad	0
 3122      00000000 
 3123 6080 00000000 		.quad	.L125
 3123      00000000 
 3124 6088 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 110


 3124      00000000 
 3125 6090 00000000 		.quad	.L125
 3125      00000000 
 3126 6098 00000000 		.quad	0
 3126      00000000 
 3127 60a0 00000000 		.quad	.L125
 3127      00000000 
 3128 60a8 00000000 		.quad	0
 3128      00000000 
 3129 60b0 00000000 		.quad	.L125
 3129      00000000 
 3130 60b8 00000000 		.quad	0
 3130      00000000 
 3131 60c0 00000000 		.quad	.L125
 3131      00000000 
 3132 60c8 00000000 		.quad	0
 3132      00000000 
 3133 60d0 00000000 		.quad	.L125
 3133      00000000 
 3134 60d8 00000000 		.quad	0
 3134      00000000 
 3135 60e0 00000000 		.quad	.L125
 3135      00000000 
 3136 60e8 00000000 		.quad	0
 3136      00000000 
 3137 60f0 00000000 		.quad	.L125
 3137      00000000 
 3138 60f8 00000000 		.quad	0
 3138      00000000 
 3139 6100 00000000 		.quad	.L125
 3139      00000000 
 3140 6108 00000000 		.quad	0
 3140      00000000 
 3141 6110 00000000 		.quad	.L125
 3141      00000000 
 3142 6118 00000000 		.quad	0
 3142      00000000 
 3143 6120 00000000 		.quad	.L125
 3143      00000000 
 3144 6128 00000000 		.quad	0
 3144      00000000 
 3145 6130 00000000 		.quad	.L125
 3145      00000000 
 3146 6138 00000000 		.quad	0
 3146      00000000 
 3147 6140 00000000 		.quad	.L125
 3147      00000000 
 3148 6148 00000000 		.quad	0
 3148      00000000 
 3149 6150 00000000 		.quad	.L125
 3149      00000000 
 3150 6158 00000000 		.quad	0
 3150      00000000 
 3151 6160 00000000 		.quad	.L125
 3151      00000000 
 3152 6168 00000000 		.quad	0
 3152      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 111


 3153 6170 00000000 		.quad	.L125
 3153      00000000 
 3154 6178 00000000 		.quad	0
 3154      00000000 
 3155 6180 00000000 		.quad	.L125
 3155      00000000 
 3156 6188 00000000 		.quad	0
 3156      00000000 
 3157 6190 00000000 		.quad	.L125
 3157      00000000 
 3158 6198 00000000 		.quad	0
 3158      00000000 
 3159 61a0 00000000 		.quad	.L125
 3159      00000000 
 3160 61a8 00000000 		.quad	0
 3160      00000000 
 3161 61b0 00000000 		.quad	.L125
 3161      00000000 
 3162 61b8 00000000 		.quad	0
 3162      00000000 
 3163 61c0 00000000 		.quad	.L125
 3163      00000000 
 3164 61c8 00000000 		.quad	0
 3164      00000000 
 3165 61d0 00000000 		.quad	.L125
 3165      00000000 
 3166 61d8 00000000 		.quad	0
 3166      00000000 
 3167 61e0 00000000 		.quad	.L125
 3167      00000000 
 3168 61e8 00000000 		.quad	0
 3168      00000000 
 3169 61f0 00000000 		.quad	.L125
 3169      00000000 
 3170 61f8 00000000 		.quad	0
 3170      00000000 
 3171 6200 00000000 		.quad	.L125
 3171      00000000 
 3172 6208 00000000 		.quad	0
 3172      00000000 
 3173 6210 00000000 		.quad	.L125
 3173      00000000 
 3174 6218 00000000 		.quad	0
 3174      00000000 
 3175 6220 00000000 		.quad	.L125
 3175      00000000 
 3176 6228 00000000 		.quad	0
 3176      00000000 
 3177 6230 00000000 		.quad	.L125
 3177      00000000 
 3178 6238 00000000 		.quad	0
 3178      00000000 
 3179 6240 00000000 		.quad	.L125
 3179      00000000 
 3180 6248 00000000 		.quad	0
 3180      00000000 
 3181 6250 00000000 		.quad	.L125
GAS LISTING /tmp/cc15eBE3.s 			page 112


 3181      00000000 
 3182 6258 00000000 		.quad	0
 3182      00000000 
 3183 6260 00000000 		.quad	.L125
 3183      00000000 
 3184 6268 00000000 		.quad	0
 3184      00000000 
 3185 6270 00000000 		.quad	.L125
 3185      00000000 
 3186 6278 00000000 		.quad	0
 3186      00000000 
 3187 6280 00000000 		.quad	.L125
 3187      00000000 
 3188 6288 00000000 		.quad	0
 3188      00000000 
 3189 6290 00000000 		.quad	.L127
 3189      00000000 
 3190 6298 00000000 		.quad	0
 3190      00000000 
 3191 62a0 00000000 		.quad	.L128
 3191      00000000 
 3192 62a8 00000000 		.quad	0
 3192      00000000 
 3193 62b0 00000000 		.quad	.L125
 3193      00000000 
 3194 62b8 00000000 		.quad	0
 3194      00000000 
 3195 62c0 00000000 		.quad	.L125
 3195      00000000 
 3196 62c8 00000000 		.quad	0
 3196      00000000 
 3197 62d0 00000000 		.quad	.L125
 3197      00000000 
 3198 62d8 00000000 		.quad	0
 3198      00000000 
 3199 62e0 00000000 		.quad	.L125
 3199      00000000 
 3200 62e8 00000000 		.quad	0
 3200      00000000 
 3201 62f0 00000000 		.quad	.L125
 3201      00000000 
 3202 62f8 00000000 		.quad	0
 3202      00000000 
 3203 6300 00000000 		.quad	.L125
 3203      00000000 
 3204 6308 00000000 		.quad	0
 3204      00000000 
 3205 6310 00000000 		.quad	.L125
 3205      00000000 
 3206 6318 00000000 		.quad	0
 3206      00000000 
 3207 6320 00000000 		.quad	.L125
 3207      00000000 
 3208 6328 00000000 		.quad	0
 3208      00000000 
 3209 6330 00000000 		.quad	.L125
 3209      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 113


 3210 6338 00000000 		.quad	0
 3210      00000000 
 3211 6340 00000000 		.quad	.L125
 3211      00000000 
 3212 6348 00000000 		.quad	0
 3212      00000000 
 3213 6350 00000000 		.quad	.L125
 3213      00000000 
 3214 6358 00000000 		.quad	0
 3214      00000000 
 3215 6360 00000000 		.quad	.L125
 3215      00000000 
 3216 6368 00000000 		.quad	0
 3216      00000000 
 3217 6370 00000000 		.quad	.L125
 3217      00000000 
 3218 6378 00000000 		.quad	0
 3218      00000000 
 3219 6380 00000000 		.quad	.L125
 3219      00000000 
 3220 6388 00000000 		.quad	0
 3220      00000000 
 3221 6390 00000000 		.quad	.L125
 3221      00000000 
 3222 6398 00000000 		.quad	0
 3222      00000000 
 3223 63a0 00000000 		.quad	.L125
 3223      00000000 
 3224 63a8 00000000 		.quad	0
 3224      00000000 
 3225 63b0 00000000 		.quad	.L129
 3225      00000000 
 3226 63b8 00000000 		.quad	0
 3226      00000000 
 3227 63c0 00000000 		.quad	.L125
 3227      00000000 
 3228 63c8 00000000 		.quad	0
 3228      00000000 
 3229 63d0 00000000 		.quad	.L125
 3229      00000000 
 3230 63d8 00000000 		.quad	0
 3230      00000000 
 3231 63e0 00000000 		.quad	.L125
 3231      00000000 
 3232 63e8 00000000 		.quad	0
 3232      00000000 
 3233 63f0 00000000 		.quad	.L125
 3233      00000000 
 3234 63f8 00000000 		.quad	0
 3234      00000000 
 3235 6400 00000000 		.quad	.L125
 3235      00000000 
 3236 6408 00000000 		.quad	0
 3236      00000000 
 3237 6410 00000000 		.quad	.L125
 3237      00000000 
 3238 6418 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 114


 3238      00000000 
 3239 6420 00000000 		.quad	.L125
 3239      00000000 
 3240 6428 00000000 		.quad	0
 3240      00000000 
 3241 6430 00000000 		.quad	.L125
 3241      00000000 
 3242 6438 00000000 		.quad	0
 3242      00000000 
 3243 6440 00000000 		.quad	.L125
 3243      00000000 
 3244 6448 00000000 		.quad	0
 3244      00000000 
 3245 6450 00000000 		.quad	.L125
 3245      00000000 
 3246 6458 00000000 		.quad	0
 3246      00000000 
 3247 6460 00000000 		.quad	.L125
 3247      00000000 
 3248 6468 00000000 		.quad	0
 3248      00000000 
 3249 6470 00000000 		.quad	.L125
 3249      00000000 
 3250 6478 00000000 		.quad	0
 3250      00000000 
 3251 6480 00000000 		.quad	.L125
 3251      00000000 
 3252 6488 00000000 		.quad	0
 3252      00000000 
 3253 6490 00000000 		.quad	.L125
 3253      00000000 
 3254 6498 00000000 		.quad	0
 3254      00000000 
 3255 64a0 00000000 		.quad	.L125
 3255      00000000 
 3256 64a8 00000000 		.quad	0
 3256      00000000 
 3257 64b0 00000000 		.quad	.L125
 3257      00000000 
 3258 64b8 00000000 		.quad	0
 3258      00000000 
 3259 64c0 00000000 		.quad	.L125
 3259      00000000 
 3260 64c8 00000000 		.quad	0
 3260      00000000 
 3261 64d0 00000000 		.quad	.L125
 3261      00000000 
 3262 64d8 00000000 		.quad	0
 3262      00000000 
 3263 64e0 00000000 		.quad	.L125
 3263      00000000 
 3264 64e8 00000000 		.quad	0
 3264      00000000 
 3265 64f0 00000000 		.quad	.L125
 3265      00000000 
 3266 64f8 00000000 		.quad	0
 3266      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 115


 3267 6500 00000000 		.quad	.L125
 3267      00000000 
 3268 6508 00000000 		.quad	0
 3268      00000000 
 3269 6510 00000000 		.quad	.L125
 3269      00000000 
 3270 6518 00000000 		.quad	0
 3270      00000000 
 3271 6520 00000000 		.quad	.L125
 3271      00000000 
 3272 6528 00000000 		.quad	0
 3272      00000000 
 3273 6530 00000000 		.quad	.L125
 3273      00000000 
 3274 6538 00000000 		.quad	0
 3274      00000000 
 3275 6540 00000000 		.quad	.L125
 3275      00000000 
 3276 6548 00000000 		.quad	0
 3276      00000000 
 3277 6550 00000000 		.quad	.L125
 3277      00000000 
 3278 6558 00000000 		.quad	0
 3278      00000000 
 3279 6560 00000000 		.quad	.L125
 3279      00000000 
 3280 6568 00000000 		.quad	0
 3280      00000000 
 3281 6570 00000000 		.quad	.L125
 3281      00000000 
 3282 6578 00000000 		.quad	0
 3282      00000000 
 3283 6580 00000000 		.quad	.L125
 3283      00000000 
 3284 6588 00000000 		.quad	0
 3284      00000000 
 3285 6590 00000000 		.quad	.L125
 3285      00000000 
 3286 6598 00000000 		.quad	0
 3286      00000000 
 3287 65a0 00000000 		.quad	.L125
 3287      00000000 
 3288 65a8 00000000 		.quad	0
 3288      00000000 
 3289 65b0 00000000 		.quad	.L125
 3289      00000000 
 3290 65b8 00000000 		.quad	0
 3290      00000000 
 3291 65c0 00000000 		.quad	.L125
 3291      00000000 
 3292 65c8 00000000 		.quad	0
 3292      00000000 
 3293 65d0 00000000 		.quad	.L125
 3293      00000000 
 3294 65d8 00000000 		.quad	0
 3294      00000000 
 3295 65e0 00000000 		.quad	.L125
GAS LISTING /tmp/cc15eBE3.s 			page 116


 3295      00000000 
 3296 65e8 00000000 		.quad	0
 3296      00000000 
 3297 65f0 00000000 		.quad	.L125
 3297      00000000 
 3298 65f8 00000000 		.quad	0
 3298      00000000 
 3299 6600 00000000 		.quad	.L125
 3299      00000000 
 3300 6608 00000000 		.quad	0
 3300      00000000 
 3301 6610 00000000 		.quad	.L125
 3301      00000000 
 3302 6618 00000000 		.quad	0
 3302      00000000 
 3303 6620 00000000 		.quad	.L125
 3303      00000000 
 3304 6628 00000000 		.quad	0
 3304      00000000 
 3305 6630 00000000 		.quad	.L125
 3305      00000000 
 3306 6638 00000000 		.quad	0
 3306      00000000 
 3307 6640 00000000 		.quad	.L125
 3307      00000000 
 3308 6648 00000000 		.quad	0
 3308      00000000 
 3309 6650 00000000 		.quad	.L125
 3309      00000000 
 3310 6658 00000000 		.quad	0
 3310      00000000 
 3311 6660 00000000 		.quad	.L125
 3311      00000000 
 3312 6668 00000000 		.quad	0
 3312      00000000 
 3313 6670 00000000 		.quad	.L125
 3313      00000000 
 3314 6678 00000000 		.quad	0
 3314      00000000 
 3315 6680 00000000 		.quad	.L125
 3315      00000000 
 3316 6688 00000000 		.quad	0
 3316      00000000 
 3317 6690 00000000 		.quad	.L125
 3317      00000000 
 3318 6698 00000000 		.quad	0
 3318      00000000 
 3319 66a0 00000000 		.quad	.L125
 3319      00000000 
 3320 66a8 00000000 		.quad	0
 3320      00000000 
 3321 66b0 00000000 		.quad	.L125
 3321      00000000 
 3322 66b8 00000000 		.quad	0
 3322      00000000 
 3323 66c0 00000000 		.quad	.L125
 3323      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 117


 3324 66c8 00000000 		.quad	0
 3324      00000000 
 3325 66d0 00000000 		.quad	.L125
 3325      00000000 
 3326 66d8 00000000 		.quad	0
 3326      00000000 
 3327 66e0 00000000 		.quad	.L125
 3327      00000000 
 3328 66e8 00000000 		.quad	0
 3328      00000000 
 3329 66f0 00000000 		.quad	.L125
 3329      00000000 
 3330 66f8 00000000 		.quad	0
 3330      00000000 
 3331 6700 00000000 		.quad	.L125
 3331      00000000 
 3332 6708 00000000 		.quad	0
 3332      00000000 
 3333 6710 00000000 		.quad	.L125
 3333      00000000 
 3334 6718 00000000 		.quad	0
 3334      00000000 
 3335              		.align 16
 3336              	.LC15:
 3337 6720 00000000 		.quad	.L130
 3337      00000000 
 3338 6728 00000000 		.quad	0
 3338      00000000 
 3339 6730 00000000 		.quad	.L131
 3339      00000000 
 3340 6738 00000000 		.quad	0
 3340      00000000 
 3341 6740 00000000 		.quad	.L132
 3341      00000000 
 3342 6748 00000000 		.quad	0
 3342      00000000 
 3343 6750 00000000 		.quad	.L133
 3343      00000000 
 3344 6758 00000000 		.quad	0
 3344      00000000 
 3345 6760 00000000 		.quad	.L133
 3345      00000000 
 3346 6768 00000000 		.quad	0
 3346      00000000 
 3347 6770 00000000 		.quad	.L131
 3347      00000000 
 3348 6778 00000000 		.quad	0
 3348      00000000 
 3349 6780 00000000 		.quad	.L133
 3349      00000000 
 3350 6788 00000000 		.quad	0
 3350      00000000 
 3351 6790 00000000 		.quad	.L133
 3351      00000000 
 3352 6798 00000000 		.quad	0
 3352      00000000 
 3353 67a0 00000000 		.quad	.L134
GAS LISTING /tmp/cc15eBE3.s 			page 118


 3353      00000000 
 3354 67a8 00000000 		.quad	0
 3354      00000000 
 3355 67b0 00000000 		.quad	.L133
 3355      00000000 
 3356 67b8 00000000 		.quad	0
 3356      00000000 
 3357 67c0 00000000 		.quad	.L133
 3357      00000000 
 3358 67c8 00000000 		.quad	0
 3358      00000000 
 3359 67d0 00000000 		.quad	.L133
 3359      00000000 
 3360 67d8 00000000 		.quad	0
 3360      00000000 
 3361 67e0 00000000 		.quad	.L135
 3361      00000000 
 3362 67e8 00000000 		.quad	0
 3362      00000000 
 3363 67f0 00000000 		.quad	.L131
 3363      00000000 
 3364 67f8 00000000 		.quad	0
 3364      00000000 
 3365 6800 00000000 		.quad	.L131
 3365      00000000 
 3366 6808 00000000 		.quad	0
 3366      00000000 
 3367 6810 00000000 		.quad	.L131
 3367      00000000 
 3368 6818 00000000 		.quad	0
 3368      00000000 
 3369 6820 00000000 		.quad	.L133
 3369      00000000 
 3370 6828 00000000 		.quad	0
 3370      00000000 
 3371 6830 00000000 		.quad	.L133
 3371      00000000 
 3372 6838 00000000 		.quad	0
 3372      00000000 
 3373 6840 00000000 		.quad	.L133
 3373      00000000 
 3374 6848 00000000 		.quad	0
 3374      00000000 
 3375 6850 00000000 		.quad	.L133
 3375      00000000 
 3376 6858 00000000 		.quad	0
 3376      00000000 
 3377 6860 00000000 		.quad	.L131
 3377      00000000 
 3378 6868 00000000 		.quad	0
 3378      00000000 
 3379 6870 00000000 		.quad	.L131
 3379      00000000 
 3380 6878 00000000 		.quad	0
 3380      00000000 
 3381 6880 00000000 		.quad	.L131
 3381      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 119


 3382 6888 00000000 		.quad	0
 3382      00000000 
 3383 6890 00000000 		.quad	.L131
 3383      00000000 
 3384 6898 00000000 		.quad	0
 3384      00000000 
 3385 68a0 00000000 		.quad	.L136
 3385      00000000 
 3386 68a8 00000000 		.quad	0
 3386      00000000 
 3387 68b0 00000000 		.quad	.L133
 3387      00000000 
 3388 68b8 00000000 		.quad	0
 3388      00000000 
 3389 68c0 00000000 		.quad	.L133
 3389      00000000 
 3390 68c8 00000000 		.quad	0
 3390      00000000 
 3391 68d0 00000000 		.quad	.L133
 3391      00000000 
 3392 68d8 00000000 		.quad	0
 3392      00000000 
 3393 68e0 00000000 		.quad	.L131
 3393      00000000 
 3394 68e8 00000000 		.quad	0
 3394      00000000 
 3395 68f0 00000000 		.quad	.L131
 3395      00000000 
 3396 68f8 00000000 		.quad	0
 3396      00000000 
 3397 6900 00000000 		.quad	.L131
 3397      00000000 
 3398 6908 00000000 		.quad	0
 3398      00000000 
 3399 6910 00000000 		.quad	.L131
 3399      00000000 
 3400 6918 00000000 		.quad	0
 3400      00000000 
 3401 6920 00000000 		.quad	.L133
 3401      00000000 
 3402 6928 00000000 		.quad	0
 3402      00000000 
 3403 6930 00000000 		.quad	.L137
 3403      00000000 
 3404 6938 00000000 		.quad	0
 3404      00000000 
 3405 6940 00000000 		.quad	.L133
 3405      00000000 
 3406 6948 00000000 		.quad	0
 3406      00000000 
 3407 6950 00000000 		.quad	.L138
 3407      00000000 
 3408 6958 00000000 		.quad	0
 3408      00000000 
 3409 6960 00000000 		.quad	.L133
 3409      00000000 
 3410 6968 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 120


 3410      00000000 
 3411 6970 00000000 		.quad	.L133
 3411      00000000 
 3412 6978 00000000 		.quad	0
 3412      00000000 
 3413 6980 00000000 		.quad	.L139
 3413      00000000 
 3414 6988 00000000 		.quad	0
 3414      00000000 
 3415 6990 00000000 		.quad	.L133
 3415      00000000 
 3416 6998 00000000 		.quad	0
 3416      00000000 
 3417 69a0 00000000 		.quad	.L131
 3417      00000000 
 3418 69a8 00000000 		.quad	0
 3418      00000000 
 3419 69b0 00000000 		.quad	.L131
 3419      00000000 
 3420 69b8 00000000 		.quad	0
 3420      00000000 
 3421 69c0 00000000 		.quad	.L140
 3421      00000000 
 3422 69c8 00000000 		.quad	0
 3422      00000000 
 3423 69d0 00000000 		.quad	.L141
 3423      00000000 
 3424 69d8 00000000 		.quad	0
 3424      00000000 
 3425 69e0 00000000 		.quad	.L133
 3425      00000000 
 3426 69e8 00000000 		.quad	0
 3426      00000000 
 3427 69f0 00000000 		.quad	.L142
 3427      00000000 
 3428 69f8 00000000 		.quad	0
 3428      00000000 
 3429 6a00 00000000 		.quad	.L143
 3429      00000000 
 3430 6a08 00000000 		.quad	0
 3430      00000000 
 3431 6a10 00000000 		.quad	.L144
 3431      00000000 
 3432 6a18 00000000 		.quad	0
 3432      00000000 
 3433 6a20 00000000 		.quad	.L145
 3433      00000000 
 3434 6a28 00000000 		.quad	0
 3434      00000000 
 3435 6a30 00000000 		.quad	.L146
 3435      00000000 
 3436 6a38 00000000 		.quad	0
 3436      00000000 
 3437 6a40 00000000 		.quad	.L133
 3437      00000000 
 3438 6a48 00000000 		.quad	0
 3438      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 121


 3439 6a50 00000000 		.quad	.L133
 3439      00000000 
 3440 6a58 00000000 		.quad	0
 3440      00000000 
 3441 6a60 00000000 		.quad	.L147
 3441      00000000 
 3442 6a68 00000000 		.quad	0
 3442      00000000 
 3443 6a70 00000000 		.quad	.L148
 3443      00000000 
 3444 6a78 00000000 		.quad	0
 3444      00000000 
 3445 6a80 00000000 		.quad	.L133
 3445      00000000 
 3446 6a88 00000000 		.quad	0
 3446      00000000 
 3447 6a90 00000000 		.quad	.L149
 3447      00000000 
 3448 6a98 00000000 		.quad	0
 3448      00000000 
 3449 6aa0 00000000 		.quad	.L133
 3449      00000000 
 3450 6aa8 00000000 		.quad	0
 3450      00000000 
 3451 6ab0 00000000 		.quad	.L133
 3451      00000000 
 3452 6ab8 00000000 		.quad	0
 3452      00000000 
 3453 6ac0 00000000 		.quad	.L150
 3453      00000000 
 3454 6ac8 00000000 		.quad	0
 3454      00000000 
 3455 6ad0 00000000 		.quad	.L131
 3455      00000000 
 3456 6ad8 00000000 		.quad	0
 3456      00000000 
 3457 6ae0 00000000 		.quad	.L131
 3457      00000000 
 3458 6ae8 00000000 		.quad	0
 3458      00000000 
 3459 6af0 00000000 		.quad	.L131
 3459      00000000 
 3460 6af8 00000000 		.quad	0
 3460      00000000 
 3461 6b00 00000000 		.quad	.L131
 3461      00000000 
 3462 6b08 00000000 		.quad	0
 3462      00000000 
 3463 6b10 00000000 		.quad	.L131
 3463      00000000 
 3464 6b18 00000000 		.quad	0
 3464      00000000 
 3465 6b20 00000000 		.quad	.L131
 3465      00000000 
 3466 6b28 00000000 		.quad	0
 3466      00000000 
 3467 6b30 00000000 		.quad	.L131
GAS LISTING /tmp/cc15eBE3.s 			page 122


 3467      00000000 
 3468 6b38 00000000 		.quad	0
 3468      00000000 
 3469 6b40 00000000 		.quad	.L131
 3469      00000000 
 3470 6b48 00000000 		.quad	0
 3470      00000000 
 3471 6b50 00000000 		.quad	.L133
 3471      00000000 
 3472 6b58 00000000 		.quad	0
 3472      00000000 
 3473 6b60 00000000 		.quad	.L133
 3473      00000000 
 3474 6b68 00000000 		.quad	0
 3474      00000000 
 3475 6b70 00000000 		.quad	.L133
 3475      00000000 
 3476 6b78 00000000 		.quad	0
 3476      00000000 
 3477 6b80 00000000 		.quad	.L131
 3477      00000000 
 3478 6b88 00000000 		.quad	0
 3478      00000000 
 3479 6b90 00000000 		.quad	.L131
 3479      00000000 
 3480 6b98 00000000 		.quad	0
 3480      00000000 
 3481 6ba0 00000000 		.quad	.L131
 3481      00000000 
 3482 6ba8 00000000 		.quad	0
 3482      00000000 
 3483 6bb0 00000000 		.quad	.L131
 3483      00000000 
 3484 6bb8 00000000 		.quad	0
 3484      00000000 
 3485 6bc0 00000000 		.quad	.L131
 3485      00000000 
 3486 6bc8 00000000 		.quad	0
 3486      00000000 
 3487 6bd0 00000000 		.quad	.L133
 3487      00000000 
 3488 6bd8 00000000 		.quad	0
 3488      00000000 
 3489 6be0 00000000 		.quad	.L133
 3489      00000000 
 3490 6be8 00000000 		.quad	0
 3490      00000000 
 3491 6bf0 00000000 		.quad	.L133
 3491      00000000 
 3492 6bf8 00000000 		.quad	0
 3492      00000000 
 3493 6c00 00000000 		.quad	.L151
 3493      00000000 
 3494 6c08 00000000 		.quad	0
 3494      00000000 
 3495 6c10 00000000 		.quad	.L152
 3495      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 123


 3496 6c18 00000000 		.quad	0
 3496      00000000 
 3497 6c20 00000000 		.quad	.L133
 3497      00000000 
 3498 6c28 00000000 		.quad	0
 3498      00000000 
 3499 6c30 00000000 		.quad	.L133
 3499      00000000 
 3500 6c38 00000000 		.quad	0
 3500      00000000 
 3501 6c40 00000000 		.quad	.L131
 3501      00000000 
 3502 6c48 00000000 		.quad	0
 3502      00000000 
 3503 6c50 00000000 		.quad	.L133
 3503      00000000 
 3504 6c58 00000000 		.quad	0
 3504      00000000 
 3505 6c60 00000000 		.quad	.L133
 3505      00000000 
 3506 6c68 00000000 		.quad	0
 3506      00000000 
 3507 6c70 00000000 		.quad	.L133
 3507      00000000 
 3508 6c78 00000000 		.quad	0
 3508      00000000 
 3509 6c80 00000000 		.quad	.L153
 3509      00000000 
 3510 6c88 00000000 		.quad	0
 3510      00000000 
 3511 6c90 00000000 		.quad	.L131
 3511      00000000 
 3512 6c98 00000000 		.quad	0
 3512      00000000 
 3513 6ca0 00000000 		.quad	.L131
 3513      00000000 
 3514 6ca8 00000000 		.quad	0
 3514      00000000 
 3515 6cb0 00000000 		.quad	.L133
 3515      00000000 
 3516 6cb8 00000000 		.quad	0
 3516      00000000 
 3517 6cc0 00000000 		.quad	.L131
 3517      00000000 
 3518 6cc8 00000000 		.quad	0
 3518      00000000 
 3519 6cd0 00000000 		.quad	.L131
 3519      00000000 
 3520 6cd8 00000000 		.quad	0
 3520      00000000 
 3521 6ce0 00000000 		.quad	.L131
 3521      00000000 
 3522 6ce8 00000000 		.quad	0
 3522      00000000 
 3523 6cf0 00000000 		.quad	.L131
 3523      00000000 
 3524 6cf8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 124


 3524      00000000 
 3525 6d00 00000000 		.quad	.L131
 3525      00000000 
 3526 6d08 00000000 		.quad	0
 3526      00000000 
 3527 6d10 00000000 		.quad	.L131
 3527      00000000 
 3528 6d18 00000000 		.quad	0
 3528      00000000 
 3529 6d20 00000000 		.quad	.L131
 3529      00000000 
 3530 6d28 00000000 		.quad	0
 3530      00000000 
 3531 6d30 00000000 		.quad	.L131
 3531      00000000 
 3532 6d38 00000000 		.quad	0
 3532      00000000 
 3533 6d40 00000000 		.quad	.L131
 3533      00000000 
 3534 6d48 00000000 		.quad	0
 3534      00000000 
 3535 6d50 00000000 		.quad	.L131
 3535      00000000 
 3536 6d58 00000000 		.quad	0
 3536      00000000 
 3537 6d60 00000000 		.quad	.L131
 3537      00000000 
 3538 6d68 00000000 		.quad	0
 3538      00000000 
 3539 6d70 00000000 		.quad	.L131
 3539      00000000 
 3540 6d78 00000000 		.quad	0
 3540      00000000 
 3541 6d80 00000000 		.quad	.L131
 3541      00000000 
 3542 6d88 00000000 		.quad	0
 3542      00000000 
 3543 6d90 00000000 		.quad	.L131
 3543      00000000 
 3544 6d98 00000000 		.quad	0
 3544      00000000 
 3545 6da0 00000000 		.quad	.L131
 3545      00000000 
 3546 6da8 00000000 		.quad	0
 3546      00000000 
 3547 6db0 00000000 		.quad	.L131
 3547      00000000 
 3548 6db8 00000000 		.quad	0
 3548      00000000 
 3549 6dc0 00000000 		.quad	.L131
 3549      00000000 
 3550 6dc8 00000000 		.quad	0
 3550      00000000 
 3551 6dd0 00000000 		.quad	.L131
 3551      00000000 
 3552 6dd8 00000000 		.quad	0
 3552      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 125


 3553 6de0 00000000 		.quad	.L131
 3553      00000000 
 3554 6de8 00000000 		.quad	0
 3554      00000000 
 3555 6df0 00000000 		.quad	.L131
 3555      00000000 
 3556 6df8 00000000 		.quad	0
 3556      00000000 
 3557              		.align 16
 3558              	.LC16:
 3559 6e00 00000000 		.quad	.L154
 3559      00000000 
 3560 6e08 00000000 		.quad	0
 3560      00000000 
 3561 6e10 00000000 		.quad	.L154
 3561      00000000 
 3562 6e18 00000000 		.quad	0
 3562      00000000 
 3563 6e20 00000000 		.quad	.L154
 3563      00000000 
 3564 6e28 00000000 		.quad	0
 3564      00000000 
 3565 6e30 00000000 		.quad	.L154
 3565      00000000 
 3566 6e38 00000000 		.quad	0
 3566      00000000 
 3567 6e40 00000000 		.quad	.L154
 3567      00000000 
 3568 6e48 00000000 		.quad	0
 3568      00000000 
 3569 6e50 00000000 		.quad	.L154
 3569      00000000 
 3570 6e58 00000000 		.quad	0
 3570      00000000 
 3571 6e60 00000000 		.quad	.L154
 3571      00000000 
 3572 6e68 00000000 		.quad	0
 3572      00000000 
 3573 6e70 00000000 		.quad	.L154
 3573      00000000 
 3574 6e78 00000000 		.quad	0
 3574      00000000 
 3575 6e80 00000000 		.quad	.L154
 3575      00000000 
 3576 6e88 00000000 		.quad	0
 3576      00000000 
 3577 6e90 00000000 		.quad	.L154
 3577      00000000 
 3578 6e98 00000000 		.quad	0
 3578      00000000 
 3579 6ea0 00000000 		.quad	.L154
 3579      00000000 
 3580 6ea8 00000000 		.quad	0
 3580      00000000 
 3581 6eb0 00000000 		.quad	.L154
 3581      00000000 
 3582 6eb8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 126


 3582      00000000 
 3583 6ec0 00000000 		.quad	.L154
 3583      00000000 
 3584 6ec8 00000000 		.quad	0
 3584      00000000 
 3585 6ed0 00000000 		.quad	.L154
 3585      00000000 
 3586 6ed8 00000000 		.quad	0
 3586      00000000 
 3587 6ee0 00000000 		.quad	.L154
 3587      00000000 
 3588 6ee8 00000000 		.quad	0
 3588      00000000 
 3589 6ef0 00000000 		.quad	.L154
 3589      00000000 
 3590 6ef8 00000000 		.quad	0
 3590      00000000 
 3591 6f00 00000000 		.quad	.L155
 3591      00000000 
 3592 6f08 00000000 		.quad	0
 3592      00000000 
 3593 6f10 00000000 		.quad	.L154
 3593      00000000 
 3594 6f18 00000000 		.quad	0
 3594      00000000 
 3595 6f20 00000000 		.quad	.L154
 3595      00000000 
 3596 6f28 00000000 		.quad	0
 3596      00000000 
 3597 6f30 00000000 		.quad	.L154
 3597      00000000 
 3598 6f38 00000000 		.quad	0
 3598      00000000 
 3599 6f40 00000000 		.quad	.L154
 3599      00000000 
 3600 6f48 00000000 		.quad	0
 3600      00000000 
 3601 6f50 00000000 		.quad	.L154
 3601      00000000 
 3602 6f58 00000000 		.quad	0
 3602      00000000 
 3603 6f60 00000000 		.quad	.L154
 3603      00000000 
 3604 6f68 00000000 		.quad	0
 3604      00000000 
 3605 6f70 00000000 		.quad	.L154
 3605      00000000 
 3606 6f78 00000000 		.quad	0
 3606      00000000 
 3607 6f80 00000000 		.quad	.L154
 3607      00000000 
 3608 6f88 00000000 		.quad	0
 3608      00000000 
 3609 6f90 00000000 		.quad	.L154
 3609      00000000 
 3610 6f98 00000000 		.quad	0
 3610      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 127


 3611 6fa0 00000000 		.quad	.L154
 3611      00000000 
 3612 6fa8 00000000 		.quad	0
 3612      00000000 
 3613 6fb0 00000000 		.quad	.L154
 3613      00000000 
 3614 6fb8 00000000 		.quad	0
 3614      00000000 
 3615 6fc0 00000000 		.quad	.L154
 3615      00000000 
 3616 6fc8 00000000 		.quad	0
 3616      00000000 
 3617 6fd0 00000000 		.quad	.L154
 3617      00000000 
 3618 6fd8 00000000 		.quad	0
 3618      00000000 
 3619 6fe0 00000000 		.quad	.L154
 3619      00000000 
 3620 6fe8 00000000 		.quad	0
 3620      00000000 
 3621 6ff0 00000000 		.quad	.L154
 3621      00000000 
 3622 6ff8 00000000 		.quad	0
 3622      00000000 
 3623 7000 00000000 		.quad	.L154
 3623      00000000 
 3624 7008 00000000 		.quad	0
 3624      00000000 
 3625 7010 00000000 		.quad	.L154
 3625      00000000 
 3626 7018 00000000 		.quad	0
 3626      00000000 
 3627 7020 00000000 		.quad	.L154
 3627      00000000 
 3628 7028 00000000 		.quad	0
 3628      00000000 
 3629 7030 00000000 		.quad	.L154
 3629      00000000 
 3630 7038 00000000 		.quad	0
 3630      00000000 
 3631 7040 00000000 		.quad	.L154
 3631      00000000 
 3632 7048 00000000 		.quad	0
 3632      00000000 
 3633 7050 00000000 		.quad	.L154
 3633      00000000 
 3634 7058 00000000 		.quad	0
 3634      00000000 
 3635 7060 00000000 		.quad	.L154
 3635      00000000 
 3636 7068 00000000 		.quad	0
 3636      00000000 
 3637 7070 00000000 		.quad	.L154
 3637      00000000 
 3638 7078 00000000 		.quad	0
 3638      00000000 
 3639 7080 00000000 		.quad	.L154
GAS LISTING /tmp/cc15eBE3.s 			page 128


 3639      00000000 
 3640 7088 00000000 		.quad	0
 3640      00000000 
 3641 7090 00000000 		.quad	.L154
 3641      00000000 
 3642 7098 00000000 		.quad	0
 3642      00000000 
 3643 70a0 00000000 		.quad	.L154
 3643      00000000 
 3644 70a8 00000000 		.quad	0
 3644      00000000 
 3645 70b0 00000000 		.quad	.L154
 3645      00000000 
 3646 70b8 00000000 		.quad	0
 3646      00000000 
 3647 70c0 00000000 		.quad	.L154
 3647      00000000 
 3648 70c8 00000000 		.quad	0
 3648      00000000 
 3649 70d0 00000000 		.quad	.L154
 3649      00000000 
 3650 70d8 00000000 		.quad	0
 3650      00000000 
 3651 70e0 00000000 		.quad	.L154
 3651      00000000 
 3652 70e8 00000000 		.quad	0
 3652      00000000 
 3653 70f0 00000000 		.quad	.L154
 3653      00000000 
 3654 70f8 00000000 		.quad	0
 3654      00000000 
 3655 7100 00000000 		.quad	.L154
 3655      00000000 
 3656 7108 00000000 		.quad	0
 3656      00000000 
 3657 7110 00000000 		.quad	.L154
 3657      00000000 
 3658 7118 00000000 		.quad	0
 3658      00000000 
 3659 7120 00000000 		.quad	.L154
 3659      00000000 
 3660 7128 00000000 		.quad	0
 3660      00000000 
 3661 7130 00000000 		.quad	.L154
 3661      00000000 
 3662 7138 00000000 		.quad	0
 3662      00000000 
 3663 7140 00000000 		.quad	.L154
 3663      00000000 
 3664 7148 00000000 		.quad	0
 3664      00000000 
 3665 7150 00000000 		.quad	.L154
 3665      00000000 
 3666 7158 00000000 		.quad	0
 3666      00000000 
 3667 7160 00000000 		.quad	.L154
 3667      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 129


 3668 7168 00000000 		.quad	0
 3668      00000000 
 3669 7170 00000000 		.quad	.L154
 3669      00000000 
 3670 7178 00000000 		.quad	0
 3670      00000000 
 3671 7180 00000000 		.quad	.L154
 3671      00000000 
 3672 7188 00000000 		.quad	0
 3672      00000000 
 3673 7190 00000000 		.quad	.L154
 3673      00000000 
 3674 7198 00000000 		.quad	0
 3674      00000000 
 3675 71a0 00000000 		.quad	.L154
 3675      00000000 
 3676 71a8 00000000 		.quad	0
 3676      00000000 
 3677 71b0 00000000 		.quad	.L154
 3677      00000000 
 3678 71b8 00000000 		.quad	0
 3678      00000000 
 3679 71c0 00000000 		.quad	.L154
 3679      00000000 
 3680 71c8 00000000 		.quad	0
 3680      00000000 
 3681 71d0 00000000 		.quad	.L154
 3681      00000000 
 3682 71d8 00000000 		.quad	0
 3682      00000000 
 3683 71e0 00000000 		.quad	.L154
 3683      00000000 
 3684 71e8 00000000 		.quad	0
 3684      00000000 
 3685 71f0 00000000 		.quad	.L154
 3685      00000000 
 3686 71f8 00000000 		.quad	0
 3686      00000000 
 3687 7200 00000000 		.quad	.L154
 3687      00000000 
 3688 7208 00000000 		.quad	0
 3688      00000000 
 3689 7210 00000000 		.quad	.L154
 3689      00000000 
 3690 7218 00000000 		.quad	0
 3690      00000000 
 3691 7220 00000000 		.quad	.L154
 3691      00000000 
 3692 7228 00000000 		.quad	0
 3692      00000000 
 3693 7230 00000000 		.quad	.L154
 3693      00000000 
 3694 7238 00000000 		.quad	0
 3694      00000000 
 3695 7240 00000000 		.quad	.L154
 3695      00000000 
 3696 7248 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 130


 3696      00000000 
 3697 7250 00000000 		.quad	.L154
 3697      00000000 
 3698 7258 00000000 		.quad	0
 3698      00000000 
 3699 7260 00000000 		.quad	.L154
 3699      00000000 
 3700 7268 00000000 		.quad	0
 3700      00000000 
 3701 7270 00000000 		.quad	.L154
 3701      00000000 
 3702 7278 00000000 		.quad	0
 3702      00000000 
 3703 7280 00000000 		.quad	.L154
 3703      00000000 
 3704 7288 00000000 		.quad	0
 3704      00000000 
 3705 7290 00000000 		.quad	.L154
 3705      00000000 
 3706 7298 00000000 		.quad	0
 3706      00000000 
 3707 72a0 00000000 		.quad	.L154
 3707      00000000 
 3708 72a8 00000000 		.quad	0
 3708      00000000 
 3709 72b0 00000000 		.quad	.L154
 3709      00000000 
 3710 72b8 00000000 		.quad	0
 3710      00000000 
 3711 72c0 00000000 		.quad	.L154
 3711      00000000 
 3712 72c8 00000000 		.quad	0
 3712      00000000 
 3713 72d0 00000000 		.quad	.L154
 3713      00000000 
 3714 72d8 00000000 		.quad	0
 3714      00000000 
 3715 72e0 00000000 		.quad	.L154
 3715      00000000 
 3716 72e8 00000000 		.quad	0
 3716      00000000 
 3717 72f0 00000000 		.quad	.L154
 3717      00000000 
 3718 72f8 00000000 		.quad	0
 3718      00000000 
 3719 7300 00000000 		.quad	.L154
 3719      00000000 
 3720 7308 00000000 		.quad	0
 3720      00000000 
 3721 7310 00000000 		.quad	.L154
 3721      00000000 
 3722 7318 00000000 		.quad	0
 3722      00000000 
 3723 7320 00000000 		.quad	.L154
 3723      00000000 
 3724 7328 00000000 		.quad	0
 3724      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 131


 3725 7330 00000000 		.quad	.L154
 3725      00000000 
 3726 7338 00000000 		.quad	0
 3726      00000000 
 3727 7340 00000000 		.quad	.L154
 3727      00000000 
 3728 7348 00000000 		.quad	0
 3728      00000000 
 3729 7350 00000000 		.quad	.L154
 3729      00000000 
 3730 7358 00000000 		.quad	0
 3730      00000000 
 3731 7360 00000000 		.quad	.L154
 3731      00000000 
 3732 7368 00000000 		.quad	0
 3732      00000000 
 3733 7370 00000000 		.quad	.L154
 3733      00000000 
 3734 7378 00000000 		.quad	0
 3734      00000000 
 3735 7380 00000000 		.quad	.L154
 3735      00000000 
 3736 7388 00000000 		.quad	0
 3736      00000000 
 3737 7390 00000000 		.quad	.L154
 3737      00000000 
 3738 7398 00000000 		.quad	0
 3738      00000000 
 3739 73a0 00000000 		.quad	.L154
 3739      00000000 
 3740 73a8 00000000 		.quad	0
 3740      00000000 
 3741 73b0 00000000 		.quad	.L154
 3741      00000000 
 3742 73b8 00000000 		.quad	0
 3742      00000000 
 3743 73c0 00000000 		.quad	.L154
 3743      00000000 
 3744 73c8 00000000 		.quad	0
 3744      00000000 
 3745 73d0 00000000 		.quad	.L154
 3745      00000000 
 3746 73d8 00000000 		.quad	0
 3746      00000000 
 3747 73e0 00000000 		.quad	.L154
 3747      00000000 
 3748 73e8 00000000 		.quad	0
 3748      00000000 
 3749 73f0 00000000 		.quad	.L154
 3749      00000000 
 3750 73f8 00000000 		.quad	0
 3750      00000000 
 3751 7400 00000000 		.quad	.L154
 3751      00000000 
 3752 7408 00000000 		.quad	0
 3752      00000000 
 3753 7410 00000000 		.quad	.L154
GAS LISTING /tmp/cc15eBE3.s 			page 132


 3753      00000000 
 3754 7418 00000000 		.quad	0
 3754      00000000 
 3755 7420 00000000 		.quad	.L154
 3755      00000000 
 3756 7428 00000000 		.quad	0
 3756      00000000 
 3757 7430 00000000 		.quad	.L154
 3757      00000000 
 3758 7438 00000000 		.quad	0
 3758      00000000 
 3759 7440 00000000 		.quad	.L154
 3759      00000000 
 3760 7448 00000000 		.quad	0
 3760      00000000 
 3761 7450 00000000 		.quad	.L154
 3761      00000000 
 3762 7458 00000000 		.quad	0
 3762      00000000 
 3763 7460 00000000 		.quad	.L154
 3763      00000000 
 3764 7468 00000000 		.quad	0
 3764      00000000 
 3765 7470 00000000 		.quad	.L154
 3765      00000000 
 3766 7478 00000000 		.quad	0
 3766      00000000 
 3767 7480 00000000 		.quad	.L154
 3767      00000000 
 3768 7488 00000000 		.quad	0
 3768      00000000 
 3769 7490 00000000 		.quad	.L154
 3769      00000000 
 3770 7498 00000000 		.quad	0
 3770      00000000 
 3771 74a0 00000000 		.quad	.L154
 3771      00000000 
 3772 74a8 00000000 		.quad	0
 3772      00000000 
 3773 74b0 00000000 		.quad	.L154
 3773      00000000 
 3774 74b8 00000000 		.quad	0
 3774      00000000 
 3775 74c0 00000000 		.quad	.L154
 3775      00000000 
 3776 74c8 00000000 		.quad	0
 3776      00000000 
 3777 74d0 00000000 		.quad	.L154
 3777      00000000 
 3778 74d8 00000000 		.quad	0
 3778      00000000 
 3779              		.align 16
 3780              	.LC17:
 3781 74e0 00000000 		.quad	.L156
 3781      00000000 
 3782 74e8 00000000 		.quad	0
 3782      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 133


 3783 74f0 00000000 		.quad	.L156
 3783      00000000 
 3784 74f8 00000000 		.quad	0
 3784      00000000 
 3785 7500 00000000 		.quad	.L156
 3785      00000000 
 3786 7508 00000000 		.quad	0
 3786      00000000 
 3787 7510 00000000 		.quad	.L156
 3787      00000000 
 3788 7518 00000000 		.quad	0
 3788      00000000 
 3789 7520 00000000 		.quad	.L156
 3789      00000000 
 3790 7528 00000000 		.quad	0
 3790      00000000 
 3791 7530 00000000 		.quad	.L156
 3791      00000000 
 3792 7538 00000000 		.quad	0
 3792      00000000 
 3793 7540 00000000 		.quad	.L156
 3793      00000000 
 3794 7548 00000000 		.quad	0
 3794      00000000 
 3795 7550 00000000 		.quad	.L156
 3795      00000000 
 3796 7558 00000000 		.quad	0
 3796      00000000 
 3797 7560 00000000 		.quad	.L157
 3797      00000000 
 3798 7568 00000000 		.quad	0
 3798      00000000 
 3799 7570 00000000 		.quad	.L156
 3799      00000000 
 3800 7578 00000000 		.quad	0
 3800      00000000 
 3801 7580 00000000 		.quad	.L156
 3801      00000000 
 3802 7588 00000000 		.quad	0
 3802      00000000 
 3803 7590 00000000 		.quad	.L156
 3803      00000000 
 3804 7598 00000000 		.quad	0
 3804      00000000 
 3805 75a0 00000000 		.quad	.L156
 3805      00000000 
 3806 75a8 00000000 		.quad	0
 3806      00000000 
 3807 75b0 00000000 		.quad	.L156
 3807      00000000 
 3808 75b8 00000000 		.quad	0
 3808      00000000 
 3809 75c0 00000000 		.quad	.L156
 3809      00000000 
 3810 75c8 00000000 		.quad	0
 3810      00000000 
 3811 75d0 00000000 		.quad	.L156
GAS LISTING /tmp/cc15eBE3.s 			page 134


 3811      00000000 
 3812 75d8 00000000 		.quad	0
 3812      00000000 
 3813 75e0 00000000 		.quad	.L156
 3813      00000000 
 3814 75e8 00000000 		.quad	0
 3814      00000000 
 3815 75f0 00000000 		.quad	.L156
 3815      00000000 
 3816 75f8 00000000 		.quad	0
 3816      00000000 
 3817 7600 00000000 		.quad	.L156
 3817      00000000 
 3818 7608 00000000 		.quad	0
 3818      00000000 
 3819 7610 00000000 		.quad	.L156
 3819      00000000 
 3820 7618 00000000 		.quad	0
 3820      00000000 
 3821 7620 00000000 		.quad	.L156
 3821      00000000 
 3822 7628 00000000 		.quad	0
 3822      00000000 
 3823 7630 00000000 		.quad	.L156
 3823      00000000 
 3824 7638 00000000 		.quad	0
 3824      00000000 
 3825 7640 00000000 		.quad	.L156
 3825      00000000 
 3826 7648 00000000 		.quad	0
 3826      00000000 
 3827 7650 00000000 		.quad	.L156
 3827      00000000 
 3828 7658 00000000 		.quad	0
 3828      00000000 
 3829 7660 00000000 		.quad	.L156
 3829      00000000 
 3830 7668 00000000 		.quad	0
 3830      00000000 
 3831 7670 00000000 		.quad	.L156
 3831      00000000 
 3832 7678 00000000 		.quad	0
 3832      00000000 
 3833 7680 00000000 		.quad	.L156
 3833      00000000 
 3834 7688 00000000 		.quad	0
 3834      00000000 
 3835 7690 00000000 		.quad	.L156
 3835      00000000 
 3836 7698 00000000 		.quad	0
 3836      00000000 
 3837 76a0 00000000 		.quad	.L156
 3837      00000000 
 3838 76a8 00000000 		.quad	0
 3838      00000000 
 3839 76b0 00000000 		.quad	.L156
 3839      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 135


 3840 76b8 00000000 		.quad	0
 3840      00000000 
 3841 76c0 00000000 		.quad	.L156
 3841      00000000 
 3842 76c8 00000000 		.quad	0
 3842      00000000 
 3843 76d0 00000000 		.quad	.L156
 3843      00000000 
 3844 76d8 00000000 		.quad	0
 3844      00000000 
 3845 76e0 00000000 		.quad	.L156
 3845      00000000 
 3846 76e8 00000000 		.quad	0
 3846      00000000 
 3847 76f0 00000000 		.quad	.L156
 3847      00000000 
 3848 76f8 00000000 		.quad	0
 3848      00000000 
 3849 7700 00000000 		.quad	.L156
 3849      00000000 
 3850 7708 00000000 		.quad	0
 3850      00000000 
 3851 7710 00000000 		.quad	.L156
 3851      00000000 
 3852 7718 00000000 		.quad	0
 3852      00000000 
 3853 7720 00000000 		.quad	.L156
 3853      00000000 
 3854 7728 00000000 		.quad	0
 3854      00000000 
 3855 7730 00000000 		.quad	.L156
 3855      00000000 
 3856 7738 00000000 		.quad	0
 3856      00000000 
 3857 7740 00000000 		.quad	.L156
 3857      00000000 
 3858 7748 00000000 		.quad	0
 3858      00000000 
 3859 7750 00000000 		.quad	.L156
 3859      00000000 
 3860 7758 00000000 		.quad	0
 3860      00000000 
 3861 7760 00000000 		.quad	.L156
 3861      00000000 
 3862 7768 00000000 		.quad	0
 3862      00000000 
 3863 7770 00000000 		.quad	.L156
 3863      00000000 
 3864 7778 00000000 		.quad	0
 3864      00000000 
 3865 7780 00000000 		.quad	.L156
 3865      00000000 
 3866 7788 00000000 		.quad	0
 3866      00000000 
 3867 7790 00000000 		.quad	.L156
 3867      00000000 
 3868 7798 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 136


 3868      00000000 
 3869 77a0 00000000 		.quad	.L156
 3869      00000000 
 3870 77a8 00000000 		.quad	0
 3870      00000000 
 3871 77b0 00000000 		.quad	.L156
 3871      00000000 
 3872 77b8 00000000 		.quad	0
 3872      00000000 
 3873 77c0 00000000 		.quad	.L158
 3873      00000000 
 3874 77c8 00000000 		.quad	0
 3874      00000000 
 3875 77d0 00000000 		.quad	.L156
 3875      00000000 
 3876 77d8 00000000 		.quad	0
 3876      00000000 
 3877 77e0 00000000 		.quad	.L156
 3877      00000000 
 3878 77e8 00000000 		.quad	0
 3878      00000000 
 3879 77f0 00000000 		.quad	.L156
 3879      00000000 
 3880 77f8 00000000 		.quad	0
 3880      00000000 
 3881 7800 00000000 		.quad	.L156
 3881      00000000 
 3882 7808 00000000 		.quad	0
 3882      00000000 
 3883 7810 00000000 		.quad	.L156
 3883      00000000 
 3884 7818 00000000 		.quad	0
 3884      00000000 
 3885 7820 00000000 		.quad	.L156
 3885      00000000 
 3886 7828 00000000 		.quad	0
 3886      00000000 
 3887 7830 00000000 		.quad	.L156
 3887      00000000 
 3888 7838 00000000 		.quad	0
 3888      00000000 
 3889 7840 00000000 		.quad	.L156
 3889      00000000 
 3890 7848 00000000 		.quad	0
 3890      00000000 
 3891 7850 00000000 		.quad	.L156
 3891      00000000 
 3892 7858 00000000 		.quad	0
 3892      00000000 
 3893 7860 00000000 		.quad	.L156
 3893      00000000 
 3894 7868 00000000 		.quad	0
 3894      00000000 
 3895 7870 00000000 		.quad	.L156
 3895      00000000 
 3896 7878 00000000 		.quad	0
 3896      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 137


 3897 7880 00000000 		.quad	.L156
 3897      00000000 
 3898 7888 00000000 		.quad	0
 3898      00000000 
 3899 7890 00000000 		.quad	.L156
 3899      00000000 
 3900 7898 00000000 		.quad	0
 3900      00000000 
 3901 78a0 00000000 		.quad	.L156
 3901      00000000 
 3902 78a8 00000000 		.quad	0
 3902      00000000 
 3903 78b0 00000000 		.quad	.L156
 3903      00000000 
 3904 78b8 00000000 		.quad	0
 3904      00000000 
 3905 78c0 00000000 		.quad	.L156
 3905      00000000 
 3906 78c8 00000000 		.quad	0
 3906      00000000 
 3907 78d0 00000000 		.quad	.L156
 3907      00000000 
 3908 78d8 00000000 		.quad	0
 3908      00000000 
 3909 78e0 00000000 		.quad	.L156
 3909      00000000 
 3910 78e8 00000000 		.quad	0
 3910      00000000 
 3911 78f0 00000000 		.quad	.L156
 3911      00000000 
 3912 78f8 00000000 		.quad	0
 3912      00000000 
 3913 7900 00000000 		.quad	.L156
 3913      00000000 
 3914 7908 00000000 		.quad	0
 3914      00000000 
 3915 7910 00000000 		.quad	.L156
 3915      00000000 
 3916 7918 00000000 		.quad	0
 3916      00000000 
 3917 7920 00000000 		.quad	.L156
 3917      00000000 
 3918 7928 00000000 		.quad	0
 3918      00000000 
 3919 7930 00000000 		.quad	.L156
 3919      00000000 
 3920 7938 00000000 		.quad	0
 3920      00000000 
 3921 7940 00000000 		.quad	.L156
 3921      00000000 
 3922 7948 00000000 		.quad	0
 3922      00000000 
 3923 7950 00000000 		.quad	.L156
 3923      00000000 
 3924 7958 00000000 		.quad	0
 3924      00000000 
 3925 7960 00000000 		.quad	.L156
GAS LISTING /tmp/cc15eBE3.s 			page 138


 3925      00000000 
 3926 7968 00000000 		.quad	0
 3926      00000000 
 3927 7970 00000000 		.quad	.L156
 3927      00000000 
 3928 7978 00000000 		.quad	0
 3928      00000000 
 3929 7980 00000000 		.quad	.L156
 3929      00000000 
 3930 7988 00000000 		.quad	0
 3930      00000000 
 3931 7990 00000000 		.quad	.L156
 3931      00000000 
 3932 7998 00000000 		.quad	0
 3932      00000000 
 3933 79a0 00000000 		.quad	.L156
 3933      00000000 
 3934 79a8 00000000 		.quad	0
 3934      00000000 
 3935 79b0 00000000 		.quad	.L156
 3935      00000000 
 3936 79b8 00000000 		.quad	0
 3936      00000000 
 3937 79c0 00000000 		.quad	.L156
 3937      00000000 
 3938 79c8 00000000 		.quad	0
 3938      00000000 
 3939 79d0 00000000 		.quad	.L156
 3939      00000000 
 3940 79d8 00000000 		.quad	0
 3940      00000000 
 3941 79e0 00000000 		.quad	.L156
 3941      00000000 
 3942 79e8 00000000 		.quad	0
 3942      00000000 
 3943 79f0 00000000 		.quad	.L156
 3943      00000000 
 3944 79f8 00000000 		.quad	0
 3944      00000000 
 3945 7a00 00000000 		.quad	.L156
 3945      00000000 
 3946 7a08 00000000 		.quad	0
 3946      00000000 
 3947 7a10 00000000 		.quad	.L156
 3947      00000000 
 3948 7a18 00000000 		.quad	0
 3948      00000000 
 3949 7a20 00000000 		.quad	.L156
 3949      00000000 
 3950 7a28 00000000 		.quad	0
 3950      00000000 
 3951 7a30 00000000 		.quad	.L156
 3951      00000000 
 3952 7a38 00000000 		.quad	0
 3952      00000000 
 3953 7a40 00000000 		.quad	.L156
 3953      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 139


 3954 7a48 00000000 		.quad	0
 3954      00000000 
 3955 7a50 00000000 		.quad	.L156
 3955      00000000 
 3956 7a58 00000000 		.quad	0
 3956      00000000 
 3957 7a60 00000000 		.quad	.L156
 3957      00000000 
 3958 7a68 00000000 		.quad	0
 3958      00000000 
 3959 7a70 00000000 		.quad	.L156
 3959      00000000 
 3960 7a78 00000000 		.quad	0
 3960      00000000 
 3961 7a80 00000000 		.quad	.L156
 3961      00000000 
 3962 7a88 00000000 		.quad	0
 3962      00000000 
 3963 7a90 00000000 		.quad	.L156
 3963      00000000 
 3964 7a98 00000000 		.quad	0
 3964      00000000 
 3965 7aa0 00000000 		.quad	.L156
 3965      00000000 
 3966 7aa8 00000000 		.quad	0
 3966      00000000 
 3967 7ab0 00000000 		.quad	.L156
 3967      00000000 
 3968 7ab8 00000000 		.quad	0
 3968      00000000 
 3969 7ac0 00000000 		.quad	.L156
 3969      00000000 
 3970 7ac8 00000000 		.quad	0
 3970      00000000 
 3971 7ad0 00000000 		.quad	.L156
 3971      00000000 
 3972 7ad8 00000000 		.quad	0
 3972      00000000 
 3973 7ae0 00000000 		.quad	.L156
 3973      00000000 
 3974 7ae8 00000000 		.quad	0
 3974      00000000 
 3975 7af0 00000000 		.quad	.L156
 3975      00000000 
 3976 7af8 00000000 		.quad	0
 3976      00000000 
 3977 7b00 00000000 		.quad	.L156
 3977      00000000 
 3978 7b08 00000000 		.quad	0
 3978      00000000 
 3979 7b10 00000000 		.quad	.L156
 3979      00000000 
 3980 7b18 00000000 		.quad	0
 3980      00000000 
 3981 7b20 00000000 		.quad	.L156
 3981      00000000 
 3982 7b28 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 140


 3982      00000000 
 3983 7b30 00000000 		.quad	.L156
 3983      00000000 
 3984 7b38 00000000 		.quad	0
 3984      00000000 
 3985 7b40 00000000 		.quad	.L156
 3985      00000000 
 3986 7b48 00000000 		.quad	0
 3986      00000000 
 3987 7b50 00000000 		.quad	.L156
 3987      00000000 
 3988 7b58 00000000 		.quad	0
 3988      00000000 
 3989 7b60 00000000 		.quad	.L156
 3989      00000000 
 3990 7b68 00000000 		.quad	0
 3990      00000000 
 3991 7b70 00000000 		.quad	.L156
 3991      00000000 
 3992 7b78 00000000 		.quad	0
 3992      00000000 
 3993 7b80 00000000 		.quad	.L156
 3993      00000000 
 3994 7b88 00000000 		.quad	0
 3994      00000000 
 3995 7b90 00000000 		.quad	.L156
 3995      00000000 
 3996 7b98 00000000 		.quad	0
 3996      00000000 
 3997 7ba0 00000000 		.quad	.L156
 3997      00000000 
 3998 7ba8 00000000 		.quad	0
 3998      00000000 
 3999 7bb0 00000000 		.quad	.L156
 3999      00000000 
 4000 7bb8 00000000 		.quad	0
 4000      00000000 
 4001              		.align 16
 4002              	.LC18:
 4003 7bc0 00000000 		.quad	.L159
 4003      00000000 
 4004 7bc8 00000000 		.quad	0
 4004      00000000 
 4005 7bd0 00000000 		.quad	.L160
 4005      00000000 
 4006 7bd8 00000000 		.quad	0
 4006      00000000 
 4007 7be0 00000000 		.quad	.L159
 4007      00000000 
 4008 7be8 00000000 		.quad	0
 4008      00000000 
 4009 7bf0 00000000 		.quad	.L159
 4009      00000000 
 4010 7bf8 00000000 		.quad	0
 4010      00000000 
 4011 7c00 00000000 		.quad	.L159
 4011      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 141


 4012 7c08 00000000 		.quad	0
 4012      00000000 
 4013 7c10 00000000 		.quad	.L160
 4013      00000000 
 4014 7c18 00000000 		.quad	0
 4014      00000000 
 4015 7c20 00000000 		.quad	.L159
 4015      00000000 
 4016 7c28 00000000 		.quad	0
 4016      00000000 
 4017 7c30 00000000 		.quad	.L159
 4017      00000000 
 4018 7c38 00000000 		.quad	0
 4018      00000000 
 4019 7c40 00000000 		.quad	.L159
 4019      00000000 
 4020 7c48 00000000 		.quad	0
 4020      00000000 
 4021 7c50 00000000 		.quad	.L159
 4021      00000000 
 4022 7c58 00000000 		.quad	0
 4022      00000000 
 4023 7c60 00000000 		.quad	.L159
 4023      00000000 
 4024 7c68 00000000 		.quad	0
 4024      00000000 
 4025 7c70 00000000 		.quad	.L159
 4025      00000000 
 4026 7c78 00000000 		.quad	0
 4026      00000000 
 4027 7c80 00000000 		.quad	.L159
 4027      00000000 
 4028 7c88 00000000 		.quad	0
 4028      00000000 
 4029 7c90 00000000 		.quad	.L160
 4029      00000000 
 4030 7c98 00000000 		.quad	0
 4030      00000000 
 4031 7ca0 00000000 		.quad	.L160
 4031      00000000 
 4032 7ca8 00000000 		.quad	0
 4032      00000000 
 4033 7cb0 00000000 		.quad	.L160
 4033      00000000 
 4034 7cb8 00000000 		.quad	0
 4034      00000000 
 4035 7cc0 00000000 		.quad	.L159
 4035      00000000 
 4036 7cc8 00000000 		.quad	0
 4036      00000000 
 4037 7cd0 00000000 		.quad	.L159
 4037      00000000 
 4038 7cd8 00000000 		.quad	0
 4038      00000000 
 4039 7ce0 00000000 		.quad	.L159
 4039      00000000 
 4040 7ce8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 142


 4040      00000000 
 4041 7cf0 00000000 		.quad	.L159
 4041      00000000 
 4042 7cf8 00000000 		.quad	0
 4042      00000000 
 4043 7d00 00000000 		.quad	.L160
 4043      00000000 
 4044 7d08 00000000 		.quad	0
 4044      00000000 
 4045 7d10 00000000 		.quad	.L160
 4045      00000000 
 4046 7d18 00000000 		.quad	0
 4046      00000000 
 4047 7d20 00000000 		.quad	.L160
 4047      00000000 
 4048 7d28 00000000 		.quad	0
 4048      00000000 
 4049 7d30 00000000 		.quad	.L160
 4049      00000000 
 4050 7d38 00000000 		.quad	0
 4050      00000000 
 4051 7d40 00000000 		.quad	.L159
 4051      00000000 
 4052 7d48 00000000 		.quad	0
 4052      00000000 
 4053 7d50 00000000 		.quad	.L159
 4053      00000000 
 4054 7d58 00000000 		.quad	0
 4054      00000000 
 4055 7d60 00000000 		.quad	.L159
 4055      00000000 
 4056 7d68 00000000 		.quad	0
 4056      00000000 
 4057 7d70 00000000 		.quad	.L159
 4057      00000000 
 4058 7d78 00000000 		.quad	0
 4058      00000000 
 4059 7d80 00000000 		.quad	.L160
 4059      00000000 
 4060 7d88 00000000 		.quad	0
 4060      00000000 
 4061 7d90 00000000 		.quad	.L160
 4061      00000000 
 4062 7d98 00000000 		.quad	0
 4062      00000000 
 4063 7da0 00000000 		.quad	.L160
 4063      00000000 
 4064 7da8 00000000 		.quad	0
 4064      00000000 
 4065 7db0 00000000 		.quad	.L160
 4065      00000000 
 4066 7db8 00000000 		.quad	0
 4066      00000000 
 4067 7dc0 00000000 		.quad	.L159
 4067      00000000 
 4068 7dc8 00000000 		.quad	0
 4068      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 143


 4069 7dd0 00000000 		.quad	.L161
 4069      00000000 
 4070 7dd8 00000000 		.quad	0
 4070      00000000 
 4071 7de0 00000000 		.quad	.L159
 4071      00000000 
 4072 7de8 00000000 		.quad	0
 4072      00000000 
 4073 7df0 00000000 		.quad	.L162
 4073      00000000 
 4074 7df8 00000000 		.quad	0
 4074      00000000 
 4075 7e00 00000000 		.quad	.L159
 4075      00000000 
 4076 7e08 00000000 		.quad	0
 4076      00000000 
 4077 7e10 00000000 		.quad	.L159
 4077      00000000 
 4078 7e18 00000000 		.quad	0
 4078      00000000 
 4079 7e20 00000000 		.quad	.L159
 4079      00000000 
 4080 7e28 00000000 		.quad	0
 4080      00000000 
 4081 7e30 00000000 		.quad	.L159
 4081      00000000 
 4082 7e38 00000000 		.quad	0
 4082      00000000 
 4083 7e40 00000000 		.quad	.L160
 4083      00000000 
 4084 7e48 00000000 		.quad	0
 4084      00000000 
 4085 7e50 00000000 		.quad	.L160
 4085      00000000 
 4086 7e58 00000000 		.quad	0
 4086      00000000 
 4087 7e60 00000000 		.quad	.L159
 4087      00000000 
 4088 7e68 00000000 		.quad	0
 4088      00000000 
 4089 7e70 00000000 		.quad	.L159
 4089      00000000 
 4090 7e78 00000000 		.quad	0
 4090      00000000 
 4091 7e80 00000000 		.quad	.L159
 4091      00000000 
 4092 7e88 00000000 		.quad	0
 4092      00000000 
 4093 7e90 00000000 		.quad	.L159
 4093      00000000 
 4094 7e98 00000000 		.quad	0
 4094      00000000 
 4095 7ea0 00000000 		.quad	.L159
 4095      00000000 
 4096 7ea8 00000000 		.quad	0
 4096      00000000 
 4097 7eb0 00000000 		.quad	.L159
GAS LISTING /tmp/cc15eBE3.s 			page 144


 4097      00000000 
 4098 7eb8 00000000 		.quad	0
 4098      00000000 
 4099 7ec0 00000000 		.quad	.L159
 4099      00000000 
 4100 7ec8 00000000 		.quad	0
 4100      00000000 
 4101 7ed0 00000000 		.quad	.L159
 4101      00000000 
 4102 7ed8 00000000 		.quad	0
 4102      00000000 
 4103 7ee0 00000000 		.quad	.L159
 4103      00000000 
 4104 7ee8 00000000 		.quad	0
 4104      00000000 
 4105 7ef0 00000000 		.quad	.L159
 4105      00000000 
 4106 7ef8 00000000 		.quad	0
 4106      00000000 
 4107 7f00 00000000 		.quad	.L163
 4107      00000000 
 4108 7f08 00000000 		.quad	0
 4108      00000000 
 4109 7f10 00000000 		.quad	.L159
 4109      00000000 
 4110 7f18 00000000 		.quad	0
 4110      00000000 
 4111 7f20 00000000 		.quad	.L159
 4111      00000000 
 4112 7f28 00000000 		.quad	0
 4112      00000000 
 4113 7f30 00000000 		.quad	.L159
 4113      00000000 
 4114 7f38 00000000 		.quad	0
 4114      00000000 
 4115 7f40 00000000 		.quad	.L159
 4115      00000000 
 4116 7f48 00000000 		.quad	0
 4116      00000000 
 4117 7f50 00000000 		.quad	.L159
 4117      00000000 
 4118 7f58 00000000 		.quad	0
 4118      00000000 
 4119 7f60 00000000 		.quad	.L159
 4119      00000000 
 4120 7f68 00000000 		.quad	0
 4120      00000000 
 4121 7f70 00000000 		.quad	.L160
 4121      00000000 
 4122 7f78 00000000 		.quad	0
 4122      00000000 
 4123 7f80 00000000 		.quad	.L160
 4123      00000000 
 4124 7f88 00000000 		.quad	0
 4124      00000000 
 4125 7f90 00000000 		.quad	.L160
 4125      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 145


 4126 7f98 00000000 		.quad	0
 4126      00000000 
 4127 7fa0 00000000 		.quad	.L160
 4127      00000000 
 4128 7fa8 00000000 		.quad	0
 4128      00000000 
 4129 7fb0 00000000 		.quad	.L160
 4129      00000000 
 4130 7fb8 00000000 		.quad	0
 4130      00000000 
 4131 7fc0 00000000 		.quad	.L160
 4131      00000000 
 4132 7fc8 00000000 		.quad	0
 4132      00000000 
 4133 7fd0 00000000 		.quad	.L160
 4133      00000000 
 4134 7fd8 00000000 		.quad	0
 4134      00000000 
 4135 7fe0 00000000 		.quad	.L160
 4135      00000000 
 4136 7fe8 00000000 		.quad	0
 4136      00000000 
 4137 7ff0 00000000 		.quad	.L159
 4137      00000000 
 4138 7ff8 00000000 		.quad	0
 4138      00000000 
 4139 8000 00000000 		.quad	.L159
 4139      00000000 
 4140 8008 00000000 		.quad	0
 4140      00000000 
 4141 8010 00000000 		.quad	.L159
 4141      00000000 
 4142 8018 00000000 		.quad	0
 4142      00000000 
 4143 8020 00000000 		.quad	.L160
 4143      00000000 
 4144 8028 00000000 		.quad	0
 4144      00000000 
 4145 8030 00000000 		.quad	.L160
 4145      00000000 
 4146 8038 00000000 		.quad	0
 4146      00000000 
 4147 8040 00000000 		.quad	.L160
 4147      00000000 
 4148 8048 00000000 		.quad	0
 4148      00000000 
 4149 8050 00000000 		.quad	.L160
 4149      00000000 
 4150 8058 00000000 		.quad	0
 4150      00000000 
 4151 8060 00000000 		.quad	.L160
 4151      00000000 
 4152 8068 00000000 		.quad	0
 4152      00000000 
 4153 8070 00000000 		.quad	.L159
 4153      00000000 
 4154 8078 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 146


 4154      00000000 
 4155 8080 00000000 		.quad	.L159
 4155      00000000 
 4156 8088 00000000 		.quad	0
 4156      00000000 
 4157 8090 00000000 		.quad	.L159
 4157      00000000 
 4158 8098 00000000 		.quad	0
 4158      00000000 
 4159 80a0 00000000 		.quad	.L164
 4159      00000000 
 4160 80a8 00000000 		.quad	0
 4160      00000000 
 4161 80b0 00000000 		.quad	.L159
 4161      00000000 
 4162 80b8 00000000 		.quad	0
 4162      00000000 
 4163 80c0 00000000 		.quad	.L159
 4163      00000000 
 4164 80c8 00000000 		.quad	0
 4164      00000000 
 4165 80d0 00000000 		.quad	.L159
 4165      00000000 
 4166 80d8 00000000 		.quad	0
 4166      00000000 
 4167 80e0 00000000 		.quad	.L160
 4167      00000000 
 4168 80e8 00000000 		.quad	0
 4168      00000000 
 4169 80f0 00000000 		.quad	.L159
 4169      00000000 
 4170 80f8 00000000 		.quad	0
 4170      00000000 
 4171 8100 00000000 		.quad	.L159
 4171      00000000 
 4172 8108 00000000 		.quad	0
 4172      00000000 
 4173 8110 00000000 		.quad	.L159
 4173      00000000 
 4174 8118 00000000 		.quad	0
 4174      00000000 
 4175 8120 00000000 		.quad	.L159
 4175      00000000 
 4176 8128 00000000 		.quad	0
 4176      00000000 
 4177 8130 00000000 		.quad	.L160
 4177      00000000 
 4178 8138 00000000 		.quad	0
 4178      00000000 
 4179 8140 00000000 		.quad	.L160
 4179      00000000 
 4180 8148 00000000 		.quad	0
 4180      00000000 
 4181 8150 00000000 		.quad	.L159
 4181      00000000 
 4182 8158 00000000 		.quad	0
 4182      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 147


 4183 8160 00000000 		.quad	.L160
 4183      00000000 
 4184 8168 00000000 		.quad	0
 4184      00000000 
 4185 8170 00000000 		.quad	.L160
 4185      00000000 
 4186 8178 00000000 		.quad	0
 4186      00000000 
 4187 8180 00000000 		.quad	.L160
 4187      00000000 
 4188 8188 00000000 		.quad	0
 4188      00000000 
 4189 8190 00000000 		.quad	.L160
 4189      00000000 
 4190 8198 00000000 		.quad	0
 4190      00000000 
 4191 81a0 00000000 		.quad	.L160
 4191      00000000 
 4192 81a8 00000000 		.quad	0
 4192      00000000 
 4193 81b0 00000000 		.quad	.L160
 4193      00000000 
 4194 81b8 00000000 		.quad	0
 4194      00000000 
 4195 81c0 00000000 		.quad	.L160
 4195      00000000 
 4196 81c8 00000000 		.quad	0
 4196      00000000 
 4197 81d0 00000000 		.quad	.L160
 4197      00000000 
 4198 81d8 00000000 		.quad	0
 4198      00000000 
 4199 81e0 00000000 		.quad	.L160
 4199      00000000 
 4200 81e8 00000000 		.quad	0
 4200      00000000 
 4201 81f0 00000000 		.quad	.L160
 4201      00000000 
 4202 81f8 00000000 		.quad	0
 4202      00000000 
 4203 8200 00000000 		.quad	.L160
 4203      00000000 
 4204 8208 00000000 		.quad	0
 4204      00000000 
 4205 8210 00000000 		.quad	.L160
 4205      00000000 
 4206 8218 00000000 		.quad	0
 4206      00000000 
 4207 8220 00000000 		.quad	.L160
 4207      00000000 
 4208 8228 00000000 		.quad	0
 4208      00000000 
 4209 8230 00000000 		.quad	.L160
 4209      00000000 
 4210 8238 00000000 		.quad	0
 4210      00000000 
 4211 8240 00000000 		.quad	.L160
GAS LISTING /tmp/cc15eBE3.s 			page 148


 4211      00000000 
 4212 8248 00000000 		.quad	0
 4212      00000000 
 4213 8250 00000000 		.quad	.L160
 4213      00000000 
 4214 8258 00000000 		.quad	0
 4214      00000000 
 4215 8260 00000000 		.quad	.L160
 4215      00000000 
 4216 8268 00000000 		.quad	0
 4216      00000000 
 4217 8270 00000000 		.quad	.L160
 4217      00000000 
 4218 8278 00000000 		.quad	0
 4218      00000000 
 4219 8280 00000000 		.quad	.L160
 4219      00000000 
 4220 8288 00000000 		.quad	0
 4220      00000000 
 4221 8290 00000000 		.quad	.L160
 4221      00000000 
 4222 8298 00000000 		.quad	0
 4222      00000000 
 4223              		.align 16
 4224              	.LC19:
 4225 82a0 00000000 		.quad	.L165
 4225      00000000 
 4226 82a8 00000000 		.quad	0
 4226      00000000 
 4227 82b0 00000000 		.quad	.L165
 4227      00000000 
 4228 82b8 00000000 		.quad	0
 4228      00000000 
 4229 82c0 00000000 		.quad	.L166
 4229      00000000 
 4230 82c8 00000000 		.quad	0
 4230      00000000 
 4231 82d0 00000000 		.quad	.L165
 4231      00000000 
 4232 82d8 00000000 		.quad	0
 4232      00000000 
 4233 82e0 00000000 		.quad	.L165
 4233      00000000 
 4234 82e8 00000000 		.quad	0
 4234      00000000 
 4235 82f0 00000000 		.quad	.L165
 4235      00000000 
 4236 82f8 00000000 		.quad	0
 4236      00000000 
 4237 8300 00000000 		.quad	.L165
 4237      00000000 
 4238 8308 00000000 		.quad	0
 4238      00000000 
 4239 8310 00000000 		.quad	.L165
 4239      00000000 
 4240 8318 00000000 		.quad	0
 4240      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 149


 4241 8320 00000000 		.quad	.L167
 4241      00000000 
 4242 8328 00000000 		.quad	0
 4242      00000000 
 4243 8330 00000000 		.quad	.L165
 4243      00000000 
 4244 8338 00000000 		.quad	0
 4244      00000000 
 4245 8340 00000000 		.quad	.L165
 4245      00000000 
 4246 8348 00000000 		.quad	0
 4246      00000000 
 4247 8350 00000000 		.quad	.L165
 4247      00000000 
 4248 8358 00000000 		.quad	0
 4248      00000000 
 4249 8360 00000000 		.quad	.L165
 4249      00000000 
 4250 8368 00000000 		.quad	0
 4250      00000000 
 4251 8370 00000000 		.quad	.L165
 4251      00000000 
 4252 8378 00000000 		.quad	0
 4252      00000000 
 4253 8380 00000000 		.quad	.L165
 4253      00000000 
 4254 8388 00000000 		.quad	0
 4254      00000000 
 4255 8390 00000000 		.quad	.L165
 4255      00000000 
 4256 8398 00000000 		.quad	0
 4256      00000000 
 4257 83a0 00000000 		.quad	.L165
 4257      00000000 
 4258 83a8 00000000 		.quad	0
 4258      00000000 
 4259 83b0 00000000 		.quad	.L165
 4259      00000000 
 4260 83b8 00000000 		.quad	0
 4260      00000000 
 4261 83c0 00000000 		.quad	.L165
 4261      00000000 
 4262 83c8 00000000 		.quad	0
 4262      00000000 
 4263 83d0 00000000 		.quad	.L165
 4263      00000000 
 4264 83d8 00000000 		.quad	0
 4264      00000000 
 4265 83e0 00000000 		.quad	.L165
 4265      00000000 
 4266 83e8 00000000 		.quad	0
 4266      00000000 
 4267 83f0 00000000 		.quad	.L165
 4267      00000000 
 4268 83f8 00000000 		.quad	0
 4268      00000000 
 4269 8400 00000000 		.quad	.L165
GAS LISTING /tmp/cc15eBE3.s 			page 150


 4269      00000000 
 4270 8408 00000000 		.quad	0
 4270      00000000 
 4271 8410 00000000 		.quad	.L165
 4271      00000000 
 4272 8418 00000000 		.quad	0
 4272      00000000 
 4273 8420 00000000 		.quad	.L165
 4273      00000000 
 4274 8428 00000000 		.quad	0
 4274      00000000 
 4275 8430 00000000 		.quad	.L165
 4275      00000000 
 4276 8438 00000000 		.quad	0
 4276      00000000 
 4277 8440 00000000 		.quad	.L165
 4277      00000000 
 4278 8448 00000000 		.quad	0
 4278      00000000 
 4279 8450 00000000 		.quad	.L165
 4279      00000000 
 4280 8458 00000000 		.quad	0
 4280      00000000 
 4281 8460 00000000 		.quad	.L165
 4281      00000000 
 4282 8468 00000000 		.quad	0
 4282      00000000 
 4283 8470 00000000 		.quad	.L165
 4283      00000000 
 4284 8478 00000000 		.quad	0
 4284      00000000 
 4285 8480 00000000 		.quad	.L165
 4285      00000000 
 4286 8488 00000000 		.quad	0
 4286      00000000 
 4287 8490 00000000 		.quad	.L165
 4287      00000000 
 4288 8498 00000000 		.quad	0
 4288      00000000 
 4289 84a0 00000000 		.quad	.L165
 4289      00000000 
 4290 84a8 00000000 		.quad	0
 4290      00000000 
 4291 84b0 00000000 		.quad	.L165
 4291      00000000 
 4292 84b8 00000000 		.quad	0
 4292      00000000 
 4293 84c0 00000000 		.quad	.L165
 4293      00000000 
 4294 84c8 00000000 		.quad	0
 4294      00000000 
 4295 84d0 00000000 		.quad	.L165
 4295      00000000 
 4296 84d8 00000000 		.quad	0
 4296      00000000 
 4297 84e0 00000000 		.quad	.L165
 4297      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 151


 4298 84e8 00000000 		.quad	0
 4298      00000000 
 4299 84f0 00000000 		.quad	.L165
 4299      00000000 
 4300 84f8 00000000 		.quad	0
 4300      00000000 
 4301 8500 00000000 		.quad	.L165
 4301      00000000 
 4302 8508 00000000 		.quad	0
 4302      00000000 
 4303 8510 00000000 		.quad	.L165
 4303      00000000 
 4304 8518 00000000 		.quad	0
 4304      00000000 
 4305 8520 00000000 		.quad	.L165
 4305      00000000 
 4306 8528 00000000 		.quad	0
 4306      00000000 
 4307 8530 00000000 		.quad	.L165
 4307      00000000 
 4308 8538 00000000 		.quad	0
 4308      00000000 
 4309 8540 00000000 		.quad	.L165
 4309      00000000 
 4310 8548 00000000 		.quad	0
 4310      00000000 
 4311 8550 00000000 		.quad	.L165
 4311      00000000 
 4312 8558 00000000 		.quad	0
 4312      00000000 
 4313 8560 00000000 		.quad	.L165
 4313      00000000 
 4314 8568 00000000 		.quad	0
 4314      00000000 
 4315 8570 00000000 		.quad	.L165
 4315      00000000 
 4316 8578 00000000 		.quad	0
 4316      00000000 
 4317 8580 00000000 		.quad	.L165
 4317      00000000 
 4318 8588 00000000 		.quad	0
 4318      00000000 
 4319 8590 00000000 		.quad	.L165
 4319      00000000 
 4320 8598 00000000 		.quad	0
 4320      00000000 
 4321 85a0 00000000 		.quad	.L165
 4321      00000000 
 4322 85a8 00000000 		.quad	0
 4322      00000000 
 4323 85b0 00000000 		.quad	.L165
 4323      00000000 
 4324 85b8 00000000 		.quad	0
 4324      00000000 
 4325 85c0 00000000 		.quad	.L165
 4325      00000000 
 4326 85c8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 152


 4326      00000000 
 4327 85d0 00000000 		.quad	.L165
 4327      00000000 
 4328 85d8 00000000 		.quad	0
 4328      00000000 
 4329 85e0 00000000 		.quad	.L165
 4329      00000000 
 4330 85e8 00000000 		.quad	0
 4330      00000000 
 4331 85f0 00000000 		.quad	.L165
 4331      00000000 
 4332 85f8 00000000 		.quad	0
 4332      00000000 
 4333 8600 00000000 		.quad	.L165
 4333      00000000 
 4334 8608 00000000 		.quad	0
 4334      00000000 
 4335 8610 00000000 		.quad	.L165
 4335      00000000 
 4336 8618 00000000 		.quad	0
 4336      00000000 
 4337 8620 00000000 		.quad	.L165
 4337      00000000 
 4338 8628 00000000 		.quad	0
 4338      00000000 
 4339 8630 00000000 		.quad	.L165
 4339      00000000 
 4340 8638 00000000 		.quad	0
 4340      00000000 
 4341 8640 00000000 		.quad	.L165
 4341      00000000 
 4342 8648 00000000 		.quad	0
 4342      00000000 
 4343 8650 00000000 		.quad	.L165
 4343      00000000 
 4344 8658 00000000 		.quad	0
 4344      00000000 
 4345 8660 00000000 		.quad	.L165
 4345      00000000 
 4346 8668 00000000 		.quad	0
 4346      00000000 
 4347 8670 00000000 		.quad	.L165
 4347      00000000 
 4348 8678 00000000 		.quad	0
 4348      00000000 
 4349 8680 00000000 		.quad	.L165
 4349      00000000 
 4350 8688 00000000 		.quad	0
 4350      00000000 
 4351 8690 00000000 		.quad	.L165
 4351      00000000 
 4352 8698 00000000 		.quad	0
 4352      00000000 
 4353 86a0 00000000 		.quad	.L165
 4353      00000000 
 4354 86a8 00000000 		.quad	0
 4354      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 153


 4355 86b0 00000000 		.quad	.L165
 4355      00000000 
 4356 86b8 00000000 		.quad	0
 4356      00000000 
 4357 86c0 00000000 		.quad	.L165
 4357      00000000 
 4358 86c8 00000000 		.quad	0
 4358      00000000 
 4359 86d0 00000000 		.quad	.L165
 4359      00000000 
 4360 86d8 00000000 		.quad	0
 4360      00000000 
 4361 86e0 00000000 		.quad	.L165
 4361      00000000 
 4362 86e8 00000000 		.quad	0
 4362      00000000 
 4363 86f0 00000000 		.quad	.L165
 4363      00000000 
 4364 86f8 00000000 		.quad	0
 4364      00000000 
 4365 8700 00000000 		.quad	.L165
 4365      00000000 
 4366 8708 00000000 		.quad	0
 4366      00000000 
 4367 8710 00000000 		.quad	.L165
 4367      00000000 
 4368 8718 00000000 		.quad	0
 4368      00000000 
 4369 8720 00000000 		.quad	.L165
 4369      00000000 
 4370 8728 00000000 		.quad	0
 4370      00000000 
 4371 8730 00000000 		.quad	.L165
 4371      00000000 
 4372 8738 00000000 		.quad	0
 4372      00000000 
 4373 8740 00000000 		.quad	.L165
 4373      00000000 
 4374 8748 00000000 		.quad	0
 4374      00000000 
 4375 8750 00000000 		.quad	.L165
 4375      00000000 
 4376 8758 00000000 		.quad	0
 4376      00000000 
 4377 8760 00000000 		.quad	.L165
 4377      00000000 
 4378 8768 00000000 		.quad	0
 4378      00000000 
 4379 8770 00000000 		.quad	.L165
 4379      00000000 
 4380 8778 00000000 		.quad	0
 4380      00000000 
 4381 8780 00000000 		.quad	.L165
 4381      00000000 
 4382 8788 00000000 		.quad	0
 4382      00000000 
 4383 8790 00000000 		.quad	.L165
GAS LISTING /tmp/cc15eBE3.s 			page 154


 4383      00000000 
 4384 8798 00000000 		.quad	0
 4384      00000000 
 4385 87a0 00000000 		.quad	.L165
 4385      00000000 
 4386 87a8 00000000 		.quad	0
 4386      00000000 
 4387 87b0 00000000 		.quad	.L165
 4387      00000000 
 4388 87b8 00000000 		.quad	0
 4388      00000000 
 4389 87c0 00000000 		.quad	.L165
 4389      00000000 
 4390 87c8 00000000 		.quad	0
 4390      00000000 
 4391 87d0 00000000 		.quad	.L165
 4391      00000000 
 4392 87d8 00000000 		.quad	0
 4392      00000000 
 4393 87e0 00000000 		.quad	.L165
 4393      00000000 
 4394 87e8 00000000 		.quad	0
 4394      00000000 
 4395 87f0 00000000 		.quad	.L165
 4395      00000000 
 4396 87f8 00000000 		.quad	0
 4396      00000000 
 4397 8800 00000000 		.quad	.L165
 4397      00000000 
 4398 8808 00000000 		.quad	0
 4398      00000000 
 4399 8810 00000000 		.quad	.L165
 4399      00000000 
 4400 8818 00000000 		.quad	0
 4400      00000000 
 4401 8820 00000000 		.quad	.L165
 4401      00000000 
 4402 8828 00000000 		.quad	0
 4402      00000000 
 4403 8830 00000000 		.quad	.L165
 4403      00000000 
 4404 8838 00000000 		.quad	0
 4404      00000000 
 4405 8840 00000000 		.quad	.L165
 4405      00000000 
 4406 8848 00000000 		.quad	0
 4406      00000000 
 4407 8850 00000000 		.quad	.L165
 4407      00000000 
 4408 8858 00000000 		.quad	0
 4408      00000000 
 4409 8860 00000000 		.quad	.L165
 4409      00000000 
 4410 8868 00000000 		.quad	0
 4410      00000000 
 4411 8870 00000000 		.quad	.L165
 4411      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 155


 4412 8878 00000000 		.quad	0
 4412      00000000 
 4413 8880 00000000 		.quad	.L165
 4413      00000000 
 4414 8888 00000000 		.quad	0
 4414      00000000 
 4415 8890 00000000 		.quad	.L165
 4415      00000000 
 4416 8898 00000000 		.quad	0
 4416      00000000 
 4417 88a0 00000000 		.quad	.L165
 4417      00000000 
 4418 88a8 00000000 		.quad	0
 4418      00000000 
 4419 88b0 00000000 		.quad	.L165
 4419      00000000 
 4420 88b8 00000000 		.quad	0
 4420      00000000 
 4421 88c0 00000000 		.quad	.L165
 4421      00000000 
 4422 88c8 00000000 		.quad	0
 4422      00000000 
 4423 88d0 00000000 		.quad	.L165
 4423      00000000 
 4424 88d8 00000000 		.quad	0
 4424      00000000 
 4425 88e0 00000000 		.quad	.L165
 4425      00000000 
 4426 88e8 00000000 		.quad	0
 4426      00000000 
 4427 88f0 00000000 		.quad	.L165
 4427      00000000 
 4428 88f8 00000000 		.quad	0
 4428      00000000 
 4429 8900 00000000 		.quad	.L165
 4429      00000000 
 4430 8908 00000000 		.quad	0
 4430      00000000 
 4431 8910 00000000 		.quad	.L165
 4431      00000000 
 4432 8918 00000000 		.quad	0
 4432      00000000 
 4433 8920 00000000 		.quad	.L165
 4433      00000000 
 4434 8928 00000000 		.quad	0
 4434      00000000 
 4435 8930 00000000 		.quad	.L165
 4435      00000000 
 4436 8938 00000000 		.quad	0
 4436      00000000 
 4437 8940 00000000 		.quad	.L165
 4437      00000000 
 4438 8948 00000000 		.quad	0
 4438      00000000 
 4439 8950 00000000 		.quad	.L165
 4439      00000000 
 4440 8958 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 156


 4440      00000000 
 4441 8960 00000000 		.quad	.L165
 4441      00000000 
 4442 8968 00000000 		.quad	0
 4442      00000000 
 4443 8970 00000000 		.quad	.L165
 4443      00000000 
 4444 8978 00000000 		.quad	0
 4444      00000000 
 4445              		.align 16
 4446              	.LC20:
 4447 8980 00000000 		.quad	.L168
 4447      00000000 
 4448 8988 00000000 		.quad	0
 4448      00000000 
 4449 8990 00000000 		.quad	.L168
 4449      00000000 
 4450 8998 00000000 		.quad	0
 4450      00000000 
 4451 89a0 00000000 		.quad	.L168
 4451      00000000 
 4452 89a8 00000000 		.quad	0
 4452      00000000 
 4453 89b0 00000000 		.quad	.L168
 4453      00000000 
 4454 89b8 00000000 		.quad	0
 4454      00000000 
 4455 89c0 00000000 		.quad	.L168
 4455      00000000 
 4456 89c8 00000000 		.quad	0
 4456      00000000 
 4457 89d0 00000000 		.quad	.L168
 4457      00000000 
 4458 89d8 00000000 		.quad	0
 4458      00000000 
 4459 89e0 00000000 		.quad	.L168
 4459      00000000 
 4460 89e8 00000000 		.quad	0
 4460      00000000 
 4461 89f0 00000000 		.quad	.L168
 4461      00000000 
 4462 89f8 00000000 		.quad	0
 4462      00000000 
 4463 8a00 00000000 		.quad	.L168
 4463      00000000 
 4464 8a08 00000000 		.quad	0
 4464      00000000 
 4465 8a10 00000000 		.quad	.L168
 4465      00000000 
 4466 8a18 00000000 		.quad	0
 4466      00000000 
 4467 8a20 00000000 		.quad	.L168
 4467      00000000 
 4468 8a28 00000000 		.quad	0
 4468      00000000 
 4469 8a30 00000000 		.quad	.L169
 4469      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 157


 4470 8a38 00000000 		.quad	0
 4470      00000000 
 4471 8a40 00000000 		.quad	.L168
 4471      00000000 
 4472 8a48 00000000 		.quad	0
 4472      00000000 
 4473 8a50 00000000 		.quad	.L168
 4473      00000000 
 4474 8a58 00000000 		.quad	0
 4474      00000000 
 4475 8a60 00000000 		.quad	.L168
 4475      00000000 
 4476 8a68 00000000 		.quad	0
 4476      00000000 
 4477 8a70 00000000 		.quad	.L168
 4477      00000000 
 4478 8a78 00000000 		.quad	0
 4478      00000000 
 4479 8a80 00000000 		.quad	.L168
 4479      00000000 
 4480 8a88 00000000 		.quad	0
 4480      00000000 
 4481 8a90 00000000 		.quad	.L168
 4481      00000000 
 4482 8a98 00000000 		.quad	0
 4482      00000000 
 4483 8aa0 00000000 		.quad	.L168
 4483      00000000 
 4484 8aa8 00000000 		.quad	0
 4484      00000000 
 4485 8ab0 00000000 		.quad	.L168
 4485      00000000 
 4486 8ab8 00000000 		.quad	0
 4486      00000000 
 4487 8ac0 00000000 		.quad	.L168
 4487      00000000 
 4488 8ac8 00000000 		.quad	0
 4488      00000000 
 4489 8ad0 00000000 		.quad	.L168
 4489      00000000 
 4490 8ad8 00000000 		.quad	0
 4490      00000000 
 4491 8ae0 00000000 		.quad	.L168
 4491      00000000 
 4492 8ae8 00000000 		.quad	0
 4492      00000000 
 4493 8af0 00000000 		.quad	.L168
 4493      00000000 
 4494 8af8 00000000 		.quad	0
 4494      00000000 
 4495 8b00 00000000 		.quad	.L168
 4495      00000000 
 4496 8b08 00000000 		.quad	0
 4496      00000000 
 4497 8b10 00000000 		.quad	.L168
 4497      00000000 
 4498 8b18 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 158


 4498      00000000 
 4499 8b20 00000000 		.quad	.L168
 4499      00000000 
 4500 8b28 00000000 		.quad	0
 4500      00000000 
 4501 8b30 00000000 		.quad	.L168
 4501      00000000 
 4502 8b38 00000000 		.quad	0
 4502      00000000 
 4503 8b40 00000000 		.quad	.L168
 4503      00000000 
 4504 8b48 00000000 		.quad	0
 4504      00000000 
 4505 8b50 00000000 		.quad	.L168
 4505      00000000 
 4506 8b58 00000000 		.quad	0
 4506      00000000 
 4507 8b60 00000000 		.quad	.L168
 4507      00000000 
 4508 8b68 00000000 		.quad	0
 4508      00000000 
 4509 8b70 00000000 		.quad	.L168
 4509      00000000 
 4510 8b78 00000000 		.quad	0
 4510      00000000 
 4511 8b80 00000000 		.quad	.L168
 4511      00000000 
 4512 8b88 00000000 		.quad	0
 4512      00000000 
 4513 8b90 00000000 		.quad	.L168
 4513      00000000 
 4514 8b98 00000000 		.quad	0
 4514      00000000 
 4515 8ba0 00000000 		.quad	.L168
 4515      00000000 
 4516 8ba8 00000000 		.quad	0
 4516      00000000 
 4517 8bb0 00000000 		.quad	.L168
 4517      00000000 
 4518 8bb8 00000000 		.quad	0
 4518      00000000 
 4519 8bc0 00000000 		.quad	.L168
 4519      00000000 
 4520 8bc8 00000000 		.quad	0
 4520      00000000 
 4521 8bd0 00000000 		.quad	.L168
 4521      00000000 
 4522 8bd8 00000000 		.quad	0
 4522      00000000 
 4523 8be0 00000000 		.quad	.L168
 4523      00000000 
 4524 8be8 00000000 		.quad	0
 4524      00000000 
 4525 8bf0 00000000 		.quad	.L168
 4525      00000000 
 4526 8bf8 00000000 		.quad	0
 4526      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 159


 4527 8c00 00000000 		.quad	.L168
 4527      00000000 
 4528 8c08 00000000 		.quad	0
 4528      00000000 
 4529 8c10 00000000 		.quad	.L168
 4529      00000000 
 4530 8c18 00000000 		.quad	0
 4530      00000000 
 4531 8c20 00000000 		.quad	.L168
 4531      00000000 
 4532 8c28 00000000 		.quad	0
 4532      00000000 
 4533 8c30 00000000 		.quad	.L168
 4533      00000000 
 4534 8c38 00000000 		.quad	0
 4534      00000000 
 4535 8c40 00000000 		.quad	.L168
 4535      00000000 
 4536 8c48 00000000 		.quad	0
 4536      00000000 
 4537 8c50 00000000 		.quad	.L168
 4537      00000000 
 4538 8c58 00000000 		.quad	0
 4538      00000000 
 4539 8c60 00000000 		.quad	.L168
 4539      00000000 
 4540 8c68 00000000 		.quad	0
 4540      00000000 
 4541 8c70 00000000 		.quad	.L170
 4541      00000000 
 4542 8c78 00000000 		.quad	0
 4542      00000000 
 4543 8c80 00000000 		.quad	.L171
 4543      00000000 
 4544 8c88 00000000 		.quad	0
 4544      00000000 
 4545 8c90 00000000 		.quad	.L168
 4545      00000000 
 4546 8c98 00000000 		.quad	0
 4546      00000000 
 4547 8ca0 00000000 		.quad	.L168
 4547      00000000 
 4548 8ca8 00000000 		.quad	0
 4548      00000000 
 4549 8cb0 00000000 		.quad	.L168
 4549      00000000 
 4550 8cb8 00000000 		.quad	0
 4550      00000000 
 4551 8cc0 00000000 		.quad	.L168
 4551      00000000 
 4552 8cc8 00000000 		.quad	0
 4552      00000000 
 4553 8cd0 00000000 		.quad	.L168
 4553      00000000 
 4554 8cd8 00000000 		.quad	0
 4554      00000000 
 4555 8ce0 00000000 		.quad	.L168
GAS LISTING /tmp/cc15eBE3.s 			page 160


 4555      00000000 
 4556 8ce8 00000000 		.quad	0
 4556      00000000 
 4557 8cf0 00000000 		.quad	.L168
 4557      00000000 
 4558 8cf8 00000000 		.quad	0
 4558      00000000 
 4559 8d00 00000000 		.quad	.L168
 4559      00000000 
 4560 8d08 00000000 		.quad	0
 4560      00000000 
 4561 8d10 00000000 		.quad	.L168
 4561      00000000 
 4562 8d18 00000000 		.quad	0
 4562      00000000 
 4563 8d20 00000000 		.quad	.L168
 4563      00000000 
 4564 8d28 00000000 		.quad	0
 4564      00000000 
 4565 8d30 00000000 		.quad	.L168
 4565      00000000 
 4566 8d38 00000000 		.quad	0
 4566      00000000 
 4567 8d40 00000000 		.quad	.L168
 4567      00000000 
 4568 8d48 00000000 		.quad	0
 4568      00000000 
 4569 8d50 00000000 		.quad	.L168
 4569      00000000 
 4570 8d58 00000000 		.quad	0
 4570      00000000 
 4571 8d60 00000000 		.quad	.L168
 4571      00000000 
 4572 8d68 00000000 		.quad	0
 4572      00000000 
 4573 8d70 00000000 		.quad	.L168
 4573      00000000 
 4574 8d78 00000000 		.quad	0
 4574      00000000 
 4575 8d80 00000000 		.quad	.L168
 4575      00000000 
 4576 8d88 00000000 		.quad	0
 4576      00000000 
 4577 8d90 00000000 		.quad	.L168
 4577      00000000 
 4578 8d98 00000000 		.quad	0
 4578      00000000 
 4579 8da0 00000000 		.quad	.L168
 4579      00000000 
 4580 8da8 00000000 		.quad	0
 4580      00000000 
 4581 8db0 00000000 		.quad	.L168
 4581      00000000 
 4582 8db8 00000000 		.quad	0
 4582      00000000 
 4583 8dc0 00000000 		.quad	.L168
 4583      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 161


 4584 8dc8 00000000 		.quad	0
 4584      00000000 
 4585 8dd0 00000000 		.quad	.L168
 4585      00000000 
 4586 8dd8 00000000 		.quad	0
 4586      00000000 
 4587 8de0 00000000 		.quad	.L168
 4587      00000000 
 4588 8de8 00000000 		.quad	0
 4588      00000000 
 4589 8df0 00000000 		.quad	.L168
 4589      00000000 
 4590 8df8 00000000 		.quad	0
 4590      00000000 
 4591 8e00 00000000 		.quad	.L168
 4591      00000000 
 4592 8e08 00000000 		.quad	0
 4592      00000000 
 4593 8e10 00000000 		.quad	.L168
 4593      00000000 
 4594 8e18 00000000 		.quad	0
 4594      00000000 
 4595 8e20 00000000 		.quad	.L168
 4595      00000000 
 4596 8e28 00000000 		.quad	0
 4596      00000000 
 4597 8e30 00000000 		.quad	.L168
 4597      00000000 
 4598 8e38 00000000 		.quad	0
 4598      00000000 
 4599 8e40 00000000 		.quad	.L168
 4599      00000000 
 4600 8e48 00000000 		.quad	0
 4600      00000000 
 4601 8e50 00000000 		.quad	.L168
 4601      00000000 
 4602 8e58 00000000 		.quad	0
 4602      00000000 
 4603 8e60 00000000 		.quad	.L168
 4603      00000000 
 4604 8e68 00000000 		.quad	0
 4604      00000000 
 4605 8e70 00000000 		.quad	.L168
 4605      00000000 
 4606 8e78 00000000 		.quad	0
 4606      00000000 
 4607 8e80 00000000 		.quad	.L168
 4607      00000000 
 4608 8e88 00000000 		.quad	0
 4608      00000000 
 4609 8e90 00000000 		.quad	.L168
 4609      00000000 
 4610 8e98 00000000 		.quad	0
 4610      00000000 
 4611 8ea0 00000000 		.quad	.L168
 4611      00000000 
 4612 8ea8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 162


 4612      00000000 
 4613 8eb0 00000000 		.quad	.L168
 4613      00000000 
 4614 8eb8 00000000 		.quad	0
 4614      00000000 
 4615 8ec0 00000000 		.quad	.L168
 4615      00000000 
 4616 8ec8 00000000 		.quad	0
 4616      00000000 
 4617 8ed0 00000000 		.quad	.L168
 4617      00000000 
 4618 8ed8 00000000 		.quad	0
 4618      00000000 
 4619 8ee0 00000000 		.quad	.L172
 4619      00000000 
 4620 8ee8 00000000 		.quad	0
 4620      00000000 
 4621 8ef0 00000000 		.quad	.L168
 4621      00000000 
 4622 8ef8 00000000 		.quad	0
 4622      00000000 
 4623 8f00 00000000 		.quad	.L168
 4623      00000000 
 4624 8f08 00000000 		.quad	0
 4624      00000000 
 4625 8f10 00000000 		.quad	.L168
 4625      00000000 
 4626 8f18 00000000 		.quad	0
 4626      00000000 
 4627 8f20 00000000 		.quad	.L168
 4627      00000000 
 4628 8f28 00000000 		.quad	0
 4628      00000000 
 4629 8f30 00000000 		.quad	.L168
 4629      00000000 
 4630 8f38 00000000 		.quad	0
 4630      00000000 
 4631 8f40 00000000 		.quad	.L168
 4631      00000000 
 4632 8f48 00000000 		.quad	0
 4632      00000000 
 4633 8f50 00000000 		.quad	.L168
 4633      00000000 
 4634 8f58 00000000 		.quad	0
 4634      00000000 
 4635 8f60 00000000 		.quad	.L168
 4635      00000000 
 4636 8f68 00000000 		.quad	0
 4636      00000000 
 4637 8f70 00000000 		.quad	.L168
 4637      00000000 
 4638 8f78 00000000 		.quad	0
 4638      00000000 
 4639 8f80 00000000 		.quad	.L168
 4639      00000000 
 4640 8f88 00000000 		.quad	0
 4640      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 163


 4641 8f90 00000000 		.quad	.L168
 4641      00000000 
 4642 8f98 00000000 		.quad	0
 4642      00000000 
 4643 8fa0 00000000 		.quad	.L168
 4643      00000000 
 4644 8fa8 00000000 		.quad	0
 4644      00000000 
 4645 8fb0 00000000 		.quad	.L168
 4645      00000000 
 4646 8fb8 00000000 		.quad	0
 4646      00000000 
 4647 8fc0 00000000 		.quad	.L168
 4647      00000000 
 4648 8fc8 00000000 		.quad	0
 4648      00000000 
 4649 8fd0 00000000 		.quad	.L168
 4649      00000000 
 4650 8fd8 00000000 		.quad	0
 4650      00000000 
 4651 8fe0 00000000 		.quad	.L168
 4651      00000000 
 4652 8fe8 00000000 		.quad	0
 4652      00000000 
 4653 8ff0 00000000 		.quad	.L168
 4653      00000000 
 4654 8ff8 00000000 		.quad	0
 4654      00000000 
 4655 9000 00000000 		.quad	.L168
 4655      00000000 
 4656 9008 00000000 		.quad	0
 4656      00000000 
 4657 9010 00000000 		.quad	.L168
 4657      00000000 
 4658 9018 00000000 		.quad	0
 4658      00000000 
 4659 9020 00000000 		.quad	.L168
 4659      00000000 
 4660 9028 00000000 		.quad	0
 4660      00000000 
 4661 9030 00000000 		.quad	.L168
 4661      00000000 
 4662 9038 00000000 		.quad	0
 4662      00000000 
 4663 9040 00000000 		.quad	.L168
 4663      00000000 
 4664 9048 00000000 		.quad	0
 4664      00000000 
 4665 9050 00000000 		.quad	.L168
 4665      00000000 
 4666 9058 00000000 		.quad	0
 4666      00000000 
 4667              		.align 16
 4668              	.LC21:
 4669 9060 00000000 		.quad	.L173
 4669      00000000 
 4670 9068 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 164


 4670      00000000 
 4671 9070 00000000 		.quad	.L173
 4671      00000000 
 4672 9078 00000000 		.quad	0
 4672      00000000 
 4673 9080 00000000 		.quad	.L173
 4673      00000000 
 4674 9088 00000000 		.quad	0
 4674      00000000 
 4675 9090 00000000 		.quad	.L173
 4675      00000000 
 4676 9098 00000000 		.quad	0
 4676      00000000 
 4677 90a0 00000000 		.quad	.L173
 4677      00000000 
 4678 90a8 00000000 		.quad	0
 4678      00000000 
 4679 90b0 00000000 		.quad	.L173
 4679      00000000 
 4680 90b8 00000000 		.quad	0
 4680      00000000 
 4681 90c0 00000000 		.quad	.L173
 4681      00000000 
 4682 90c8 00000000 		.quad	0
 4682      00000000 
 4683 90d0 00000000 		.quad	.L173
 4683      00000000 
 4684 90d8 00000000 		.quad	0
 4684      00000000 
 4685 90e0 00000000 		.quad	.L173
 4685      00000000 
 4686 90e8 00000000 		.quad	0
 4686      00000000 
 4687 90f0 00000000 		.quad	.L173
 4687      00000000 
 4688 90f8 00000000 		.quad	0
 4688      00000000 
 4689 9100 00000000 		.quad	.L173
 4689      00000000 
 4690 9108 00000000 		.quad	0
 4690      00000000 
 4691 9110 00000000 		.quad	.L173
 4691      00000000 
 4692 9118 00000000 		.quad	0
 4692      00000000 
 4693 9120 00000000 		.quad	.L173
 4693      00000000 
 4694 9128 00000000 		.quad	0
 4694      00000000 
 4695 9130 00000000 		.quad	.L173
 4695      00000000 
 4696 9138 00000000 		.quad	0
 4696      00000000 
 4697 9140 00000000 		.quad	.L173
 4697      00000000 
 4698 9148 00000000 		.quad	0
 4698      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 165


 4699 9150 00000000 		.quad	.L173
 4699      00000000 
 4700 9158 00000000 		.quad	0
 4700      00000000 
 4701 9160 00000000 		.quad	.L173
 4701      00000000 
 4702 9168 00000000 		.quad	0
 4702      00000000 
 4703 9170 00000000 		.quad	.L173
 4703      00000000 
 4704 9178 00000000 		.quad	0
 4704      00000000 
 4705 9180 00000000 		.quad	.L173
 4705      00000000 
 4706 9188 00000000 		.quad	0
 4706      00000000 
 4707 9190 00000000 		.quad	.L173
 4707      00000000 
 4708 9198 00000000 		.quad	0
 4708      00000000 
 4709 91a0 00000000 		.quad	.L173
 4709      00000000 
 4710 91a8 00000000 		.quad	0
 4710      00000000 
 4711 91b0 00000000 		.quad	.L173
 4711      00000000 
 4712 91b8 00000000 		.quad	0
 4712      00000000 
 4713 91c0 00000000 		.quad	.L173
 4713      00000000 
 4714 91c8 00000000 		.quad	0
 4714      00000000 
 4715 91d0 00000000 		.quad	.L173
 4715      00000000 
 4716 91d8 00000000 		.quad	0
 4716      00000000 
 4717 91e0 00000000 		.quad	.L173
 4717      00000000 
 4718 91e8 00000000 		.quad	0
 4718      00000000 
 4719 91f0 00000000 		.quad	.L173
 4719      00000000 
 4720 91f8 00000000 		.quad	0
 4720      00000000 
 4721 9200 00000000 		.quad	.L173
 4721      00000000 
 4722 9208 00000000 		.quad	0
 4722      00000000 
 4723 9210 00000000 		.quad	.L173
 4723      00000000 
 4724 9218 00000000 		.quad	0
 4724      00000000 
 4725 9220 00000000 		.quad	.L173
 4725      00000000 
 4726 9228 00000000 		.quad	0
 4726      00000000 
 4727 9230 00000000 		.quad	.L173
GAS LISTING /tmp/cc15eBE3.s 			page 166


 4727      00000000 
 4728 9238 00000000 		.quad	0
 4728      00000000 
 4729 9240 00000000 		.quad	.L173
 4729      00000000 
 4730 9248 00000000 		.quad	0
 4730      00000000 
 4731 9250 00000000 		.quad	.L173
 4731      00000000 
 4732 9258 00000000 		.quad	0
 4732      00000000 
 4733 9260 00000000 		.quad	.L173
 4733      00000000 
 4734 9268 00000000 		.quad	0
 4734      00000000 
 4735 9270 00000000 		.quad	.L173
 4735      00000000 
 4736 9278 00000000 		.quad	0
 4736      00000000 
 4737 9280 00000000 		.quad	.L173
 4737      00000000 
 4738 9288 00000000 		.quad	0
 4738      00000000 
 4739 9290 00000000 		.quad	.L174
 4739      00000000 
 4740 9298 00000000 		.quad	0
 4740      00000000 
 4741 92a0 00000000 		.quad	.L173
 4741      00000000 
 4742 92a8 00000000 		.quad	0
 4742      00000000 
 4743 92b0 00000000 		.quad	.L173
 4743      00000000 
 4744 92b8 00000000 		.quad	0
 4744      00000000 
 4745 92c0 00000000 		.quad	.L175
 4745      00000000 
 4746 92c8 00000000 		.quad	0
 4746      00000000 
 4747 92d0 00000000 		.quad	.L173
 4747      00000000 
 4748 92d8 00000000 		.quad	0
 4748      00000000 
 4749 92e0 00000000 		.quad	.L173
 4749      00000000 
 4750 92e8 00000000 		.quad	0
 4750      00000000 
 4751 92f0 00000000 		.quad	.L173
 4751      00000000 
 4752 92f8 00000000 		.quad	0
 4752      00000000 
 4753 9300 00000000 		.quad	.L173
 4753      00000000 
 4754 9308 00000000 		.quad	0
 4754      00000000 
 4755 9310 00000000 		.quad	.L173
 4755      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 167


 4756 9318 00000000 		.quad	0
 4756      00000000 
 4757 9320 00000000 		.quad	.L173
 4757      00000000 
 4758 9328 00000000 		.quad	0
 4758      00000000 
 4759 9330 00000000 		.quad	.L173
 4759      00000000 
 4760 9338 00000000 		.quad	0
 4760      00000000 
 4761 9340 00000000 		.quad	.L173
 4761      00000000 
 4762 9348 00000000 		.quad	0
 4762      00000000 
 4763 9350 00000000 		.quad	.L176
 4763      00000000 
 4764 9358 00000000 		.quad	0
 4764      00000000 
 4765 9360 00000000 		.quad	.L173
 4765      00000000 
 4766 9368 00000000 		.quad	0
 4766      00000000 
 4767 9370 00000000 		.quad	.L173
 4767      00000000 
 4768 9378 00000000 		.quad	0
 4768      00000000 
 4769 9380 00000000 		.quad	.L173
 4769      00000000 
 4770 9388 00000000 		.quad	0
 4770      00000000 
 4771 9390 00000000 		.quad	.L173
 4771      00000000 
 4772 9398 00000000 		.quad	0
 4772      00000000 
 4773 93a0 00000000 		.quad	.L177
 4773      00000000 
 4774 93a8 00000000 		.quad	0
 4774      00000000 
 4775 93b0 00000000 		.quad	.L173
 4775      00000000 
 4776 93b8 00000000 		.quad	0
 4776      00000000 
 4777 93c0 00000000 		.quad	.L173
 4777      00000000 
 4778 93c8 00000000 		.quad	0
 4778      00000000 
 4779 93d0 00000000 		.quad	.L173
 4779      00000000 
 4780 93d8 00000000 		.quad	0
 4780      00000000 
 4781 93e0 00000000 		.quad	.L173
 4781      00000000 
 4782 93e8 00000000 		.quad	0
 4782      00000000 
 4783 93f0 00000000 		.quad	.L173
 4783      00000000 
 4784 93f8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 168


 4784      00000000 
 4785 9400 00000000 		.quad	.L173
 4785      00000000 
 4786 9408 00000000 		.quad	0
 4786      00000000 
 4787 9410 00000000 		.quad	.L173
 4787      00000000 
 4788 9418 00000000 		.quad	0
 4788      00000000 
 4789 9420 00000000 		.quad	.L173
 4789      00000000 
 4790 9428 00000000 		.quad	0
 4790      00000000 
 4791 9430 00000000 		.quad	.L173
 4791      00000000 
 4792 9438 00000000 		.quad	0
 4792      00000000 
 4793 9440 00000000 		.quad	.L173
 4793      00000000 
 4794 9448 00000000 		.quad	0
 4794      00000000 
 4795 9450 00000000 		.quad	.L173
 4795      00000000 
 4796 9458 00000000 		.quad	0
 4796      00000000 
 4797 9460 00000000 		.quad	.L173
 4797      00000000 
 4798 9468 00000000 		.quad	0
 4798      00000000 
 4799 9470 00000000 		.quad	.L173
 4799      00000000 
 4800 9478 00000000 		.quad	0
 4800      00000000 
 4801 9480 00000000 		.quad	.L173
 4801      00000000 
 4802 9488 00000000 		.quad	0
 4802      00000000 
 4803 9490 00000000 		.quad	.L173
 4803      00000000 
 4804 9498 00000000 		.quad	0
 4804      00000000 
 4805 94a0 00000000 		.quad	.L173
 4805      00000000 
 4806 94a8 00000000 		.quad	0
 4806      00000000 
 4807 94b0 00000000 		.quad	.L173
 4807      00000000 
 4808 94b8 00000000 		.quad	0
 4808      00000000 
 4809 94c0 00000000 		.quad	.L173
 4809      00000000 
 4810 94c8 00000000 		.quad	0
 4810      00000000 
 4811 94d0 00000000 		.quad	.L173
 4811      00000000 
 4812 94d8 00000000 		.quad	0
 4812      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 169


 4813 94e0 00000000 		.quad	.L173
 4813      00000000 
 4814 94e8 00000000 		.quad	0
 4814      00000000 
 4815 94f0 00000000 		.quad	.L173
 4815      00000000 
 4816 94f8 00000000 		.quad	0
 4816      00000000 
 4817 9500 00000000 		.quad	.L173
 4817      00000000 
 4818 9508 00000000 		.quad	0
 4818      00000000 
 4819 9510 00000000 		.quad	.L173
 4819      00000000 
 4820 9518 00000000 		.quad	0
 4820      00000000 
 4821 9520 00000000 		.quad	.L173
 4821      00000000 
 4822 9528 00000000 		.quad	0
 4822      00000000 
 4823 9530 00000000 		.quad	.L173
 4823      00000000 
 4824 9538 00000000 		.quad	0
 4824      00000000 
 4825 9540 00000000 		.quad	.L173
 4825      00000000 
 4826 9548 00000000 		.quad	0
 4826      00000000 
 4827 9550 00000000 		.quad	.L173
 4827      00000000 
 4828 9558 00000000 		.quad	0
 4828      00000000 
 4829 9560 00000000 		.quad	.L173
 4829      00000000 
 4830 9568 00000000 		.quad	0
 4830      00000000 
 4831 9570 00000000 		.quad	.L173
 4831      00000000 
 4832 9578 00000000 		.quad	0
 4832      00000000 
 4833 9580 00000000 		.quad	.L173
 4833      00000000 
 4834 9588 00000000 		.quad	0
 4834      00000000 
 4835 9590 00000000 		.quad	.L173
 4835      00000000 
 4836 9598 00000000 		.quad	0
 4836      00000000 
 4837 95a0 00000000 		.quad	.L173
 4837      00000000 
 4838 95a8 00000000 		.quad	0
 4838      00000000 
 4839 95b0 00000000 		.quad	.L173
 4839      00000000 
 4840 95b8 00000000 		.quad	0
 4840      00000000 
 4841 95c0 00000000 		.quad	.L173
GAS LISTING /tmp/cc15eBE3.s 			page 170


 4841      00000000 
 4842 95c8 00000000 		.quad	0
 4842      00000000 
 4843 95d0 00000000 		.quad	.L173
 4843      00000000 
 4844 95d8 00000000 		.quad	0
 4844      00000000 
 4845 95e0 00000000 		.quad	.L173
 4845      00000000 
 4846 95e8 00000000 		.quad	0
 4846      00000000 
 4847 95f0 00000000 		.quad	.L173
 4847      00000000 
 4848 95f8 00000000 		.quad	0
 4848      00000000 
 4849 9600 00000000 		.quad	.L173
 4849      00000000 
 4850 9608 00000000 		.quad	0
 4850      00000000 
 4851 9610 00000000 		.quad	.L173
 4851      00000000 
 4852 9618 00000000 		.quad	0
 4852      00000000 
 4853 9620 00000000 		.quad	.L173
 4853      00000000 
 4854 9628 00000000 		.quad	0
 4854      00000000 
 4855 9630 00000000 		.quad	.L173
 4855      00000000 
 4856 9638 00000000 		.quad	0
 4856      00000000 
 4857 9640 00000000 		.quad	.L173
 4857      00000000 
 4858 9648 00000000 		.quad	0
 4858      00000000 
 4859 9650 00000000 		.quad	.L173
 4859      00000000 
 4860 9658 00000000 		.quad	0
 4860      00000000 
 4861 9660 00000000 		.quad	.L173
 4861      00000000 
 4862 9668 00000000 		.quad	0
 4862      00000000 
 4863 9670 00000000 		.quad	.L173
 4863      00000000 
 4864 9678 00000000 		.quad	0
 4864      00000000 
 4865 9680 00000000 		.quad	.L173
 4865      00000000 
 4866 9688 00000000 		.quad	0
 4866      00000000 
 4867 9690 00000000 		.quad	.L173
 4867      00000000 
 4868 9698 00000000 		.quad	0
 4868      00000000 
 4869 96a0 00000000 		.quad	.L173
 4869      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 171


 4870 96a8 00000000 		.quad	0
 4870      00000000 
 4871 96b0 00000000 		.quad	.L173
 4871      00000000 
 4872 96b8 00000000 		.quad	0
 4872      00000000 
 4873 96c0 00000000 		.quad	.L173
 4873      00000000 
 4874 96c8 00000000 		.quad	0
 4874      00000000 
 4875 96d0 00000000 		.quad	.L173
 4875      00000000 
 4876 96d8 00000000 		.quad	0
 4876      00000000 
 4877 96e0 00000000 		.quad	.L173
 4877      00000000 
 4878 96e8 00000000 		.quad	0
 4878      00000000 
 4879 96f0 00000000 		.quad	.L173
 4879      00000000 
 4880 96f8 00000000 		.quad	0
 4880      00000000 
 4881 9700 00000000 		.quad	.L173
 4881      00000000 
 4882 9708 00000000 		.quad	0
 4882      00000000 
 4883 9710 00000000 		.quad	.L173
 4883      00000000 
 4884 9718 00000000 		.quad	0
 4884      00000000 
 4885 9720 00000000 		.quad	.L173
 4885      00000000 
 4886 9728 00000000 		.quad	0
 4886      00000000 
 4887 9730 00000000 		.quad	.L173
 4887      00000000 
 4888 9738 00000000 		.quad	0
 4888      00000000 
 4889              		.align 16
 4890              	.LC22:
 4891 9740 00000000 		.quad	.L178
 4891      00000000 
 4892 9748 00000000 		.quad	0
 4892      00000000 
 4893 9750 00000000 		.quad	.L179
 4893      00000000 
 4894 9758 00000000 		.quad	0
 4894      00000000 
 4895 9760 00000000 		.quad	.L179
 4895      00000000 
 4896 9768 00000000 		.quad	0
 4896      00000000 
 4897 9770 00000000 		.quad	.L179
 4897      00000000 
 4898 9778 00000000 		.quad	0
 4898      00000000 
 4899 9780 00000000 		.quad	.L179
GAS LISTING /tmp/cc15eBE3.s 			page 172


 4899      00000000 
 4900 9788 00000000 		.quad	0
 4900      00000000 
 4901 9790 00000000 		.quad	.L179
 4901      00000000 
 4902 9798 00000000 		.quad	0
 4902      00000000 
 4903 97a0 00000000 		.quad	.L179
 4903      00000000 
 4904 97a8 00000000 		.quad	0
 4904      00000000 
 4905 97b0 00000000 		.quad	.L179
 4905      00000000 
 4906 97b8 00000000 		.quad	0
 4906      00000000 
 4907 97c0 00000000 		.quad	.L179
 4907      00000000 
 4908 97c8 00000000 		.quad	0
 4908      00000000 
 4909 97d0 00000000 		.quad	.L179
 4909      00000000 
 4910 97d8 00000000 		.quad	0
 4910      00000000 
 4911 97e0 00000000 		.quad	.L179
 4911      00000000 
 4912 97e8 00000000 		.quad	0
 4912      00000000 
 4913 97f0 00000000 		.quad	.L179
 4913      00000000 
 4914 97f8 00000000 		.quad	0
 4914      00000000 
 4915 9800 00000000 		.quad	.L179
 4915      00000000 
 4916 9808 00000000 		.quad	0
 4916      00000000 
 4917 9810 00000000 		.quad	.L179
 4917      00000000 
 4918 9818 00000000 		.quad	0
 4918      00000000 
 4919 9820 00000000 		.quad	.L179
 4919      00000000 
 4920 9828 00000000 		.quad	0
 4920      00000000 
 4921 9830 00000000 		.quad	.L179
 4921      00000000 
 4922 9838 00000000 		.quad	0
 4922      00000000 
 4923 9840 00000000 		.quad	.L179
 4923      00000000 
 4924 9848 00000000 		.quad	0
 4924      00000000 
 4925 9850 00000000 		.quad	.L179
 4925      00000000 
 4926 9858 00000000 		.quad	0
 4926      00000000 
 4927 9860 00000000 		.quad	.L179
 4927      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 173


 4928 9868 00000000 		.quad	0
 4928      00000000 
 4929 9870 00000000 		.quad	.L179
 4929      00000000 
 4930 9878 00000000 		.quad	0
 4930      00000000 
 4931 9880 00000000 		.quad	.L179
 4931      00000000 
 4932 9888 00000000 		.quad	0
 4932      00000000 
 4933 9890 00000000 		.quad	.L179
 4933      00000000 
 4934 9898 00000000 		.quad	0
 4934      00000000 
 4935 98a0 00000000 		.quad	.L179
 4935      00000000 
 4936 98a8 00000000 		.quad	0
 4936      00000000 
 4937 98b0 00000000 		.quad	.L179
 4937      00000000 
 4938 98b8 00000000 		.quad	0
 4938      00000000 
 4939 98c0 00000000 		.quad	.L179
 4939      00000000 
 4940 98c8 00000000 		.quad	0
 4940      00000000 
 4941 98d0 00000000 		.quad	.L179
 4941      00000000 
 4942 98d8 00000000 		.quad	0
 4942      00000000 
 4943 98e0 00000000 		.quad	.L179
 4943      00000000 
 4944 98e8 00000000 		.quad	0
 4944      00000000 
 4945 98f0 00000000 		.quad	.L179
 4945      00000000 
 4946 98f8 00000000 		.quad	0
 4946      00000000 
 4947 9900 00000000 		.quad	.L179
 4947      00000000 
 4948 9908 00000000 		.quad	0
 4948      00000000 
 4949 9910 00000000 		.quad	.L179
 4949      00000000 
 4950 9918 00000000 		.quad	0
 4950      00000000 
 4951 9920 00000000 		.quad	.L179
 4951      00000000 
 4952 9928 00000000 		.quad	0
 4952      00000000 
 4953 9930 00000000 		.quad	.L179
 4953      00000000 
 4954 9938 00000000 		.quad	0
 4954      00000000 
 4955 9940 00000000 		.quad	.L179
 4955      00000000 
 4956 9948 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 174


 4956      00000000 
 4957 9950 00000000 		.quad	.L180
 4957      00000000 
 4958 9958 00000000 		.quad	0
 4958      00000000 
 4959 9960 00000000 		.quad	.L179
 4959      00000000 
 4960 9968 00000000 		.quad	0
 4960      00000000 
 4961 9970 00000000 		.quad	.L179
 4961      00000000 
 4962 9978 00000000 		.quad	0
 4962      00000000 
 4963 9980 00000000 		.quad	.L179
 4963      00000000 
 4964 9988 00000000 		.quad	0
 4964      00000000 
 4965 9990 00000000 		.quad	.L179
 4965      00000000 
 4966 9998 00000000 		.quad	0
 4966      00000000 
 4967 99a0 00000000 		.quad	.L179
 4967      00000000 
 4968 99a8 00000000 		.quad	0
 4968      00000000 
 4969 99b0 00000000 		.quad	.L179
 4969      00000000 
 4970 99b8 00000000 		.quad	0
 4970      00000000 
 4971 99c0 00000000 		.quad	.L179
 4971      00000000 
 4972 99c8 00000000 		.quad	0
 4972      00000000 
 4973 99d0 00000000 		.quad	.L179
 4973      00000000 
 4974 99d8 00000000 		.quad	0
 4974      00000000 
 4975 99e0 00000000 		.quad	.L179
 4975      00000000 
 4976 99e8 00000000 		.quad	0
 4976      00000000 
 4977 99f0 00000000 		.quad	.L179
 4977      00000000 
 4978 99f8 00000000 		.quad	0
 4978      00000000 
 4979 9a00 00000000 		.quad	.L179
 4979      00000000 
 4980 9a08 00000000 		.quad	0
 4980      00000000 
 4981 9a10 00000000 		.quad	.L179
 4981      00000000 
 4982 9a18 00000000 		.quad	0
 4982      00000000 
 4983 9a20 00000000 		.quad	.L181
 4983      00000000 
 4984 9a28 00000000 		.quad	0
 4984      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 175


 4985 9a30 00000000 		.quad	.L179
 4985      00000000 
 4986 9a38 00000000 		.quad	0
 4986      00000000 
 4987 9a40 00000000 		.quad	.L182
 4987      00000000 
 4988 9a48 00000000 		.quad	0
 4988      00000000 
 4989 9a50 00000000 		.quad	.L179
 4989      00000000 
 4990 9a58 00000000 		.quad	0
 4990      00000000 
 4991 9a60 00000000 		.quad	.L179
 4991      00000000 
 4992 9a68 00000000 		.quad	0
 4992      00000000 
 4993 9a70 00000000 		.quad	.L179
 4993      00000000 
 4994 9a78 00000000 		.quad	0
 4994      00000000 
 4995 9a80 00000000 		.quad	.L183
 4995      00000000 
 4996 9a88 00000000 		.quad	0
 4996      00000000 
 4997 9a90 00000000 		.quad	.L184
 4997      00000000 
 4998 9a98 00000000 		.quad	0
 4998      00000000 
 4999 9aa0 00000000 		.quad	.L179
 4999      00000000 
 5000 9aa8 00000000 		.quad	0
 5000      00000000 
 5001 9ab0 00000000 		.quad	.L179
 5001      00000000 
 5002 9ab8 00000000 		.quad	0
 5002      00000000 
 5003 9ac0 00000000 		.quad	.L179
 5003      00000000 
 5004 9ac8 00000000 		.quad	0
 5004      00000000 
 5005 9ad0 00000000 		.quad	.L179
 5005      00000000 
 5006 9ad8 00000000 		.quad	0
 5006      00000000 
 5007 9ae0 00000000 		.quad	.L185
 5007      00000000 
 5008 9ae8 00000000 		.quad	0
 5008      00000000 
 5009 9af0 00000000 		.quad	.L179
 5009      00000000 
 5010 9af8 00000000 		.quad	0
 5010      00000000 
 5011 9b00 00000000 		.quad	.L179
 5011      00000000 
 5012 9b08 00000000 		.quad	0
 5012      00000000 
 5013 9b10 00000000 		.quad	.L179
GAS LISTING /tmp/cc15eBE3.s 			page 176


 5013      00000000 
 5014 9b18 00000000 		.quad	0
 5014      00000000 
 5015 9b20 00000000 		.quad	.L179
 5015      00000000 
 5016 9b28 00000000 		.quad	0
 5016      00000000 
 5017 9b30 00000000 		.quad	.L179
 5017      00000000 
 5018 9b38 00000000 		.quad	0
 5018      00000000 
 5019 9b40 00000000 		.quad	.L179
 5019      00000000 
 5020 9b48 00000000 		.quad	0
 5020      00000000 
 5021 9b50 00000000 		.quad	.L179
 5021      00000000 
 5022 9b58 00000000 		.quad	0
 5022      00000000 
 5023 9b60 00000000 		.quad	.L179
 5023      00000000 
 5024 9b68 00000000 		.quad	0
 5024      00000000 
 5025 9b70 00000000 		.quad	.L179
 5025      00000000 
 5026 9b78 00000000 		.quad	0
 5026      00000000 
 5027 9b80 00000000 		.quad	.L179
 5027      00000000 
 5028 9b88 00000000 		.quad	0
 5028      00000000 
 5029 9b90 00000000 		.quad	.L179
 5029      00000000 
 5030 9b98 00000000 		.quad	0
 5030      00000000 
 5031 9ba0 00000000 		.quad	.L179
 5031      00000000 
 5032 9ba8 00000000 		.quad	0
 5032      00000000 
 5033 9bb0 00000000 		.quad	.L179
 5033      00000000 
 5034 9bb8 00000000 		.quad	0
 5034      00000000 
 5035 9bc0 00000000 		.quad	.L179
 5035      00000000 
 5036 9bc8 00000000 		.quad	0
 5036      00000000 
 5037 9bd0 00000000 		.quad	.L179
 5037      00000000 
 5038 9bd8 00000000 		.quad	0
 5038      00000000 
 5039 9be0 00000000 		.quad	.L179
 5039      00000000 
 5040 9be8 00000000 		.quad	0
 5040      00000000 
 5041 9bf0 00000000 		.quad	.L179
 5041      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 177


 5042 9bf8 00000000 		.quad	0
 5042      00000000 
 5043 9c00 00000000 		.quad	.L179
 5043      00000000 
 5044 9c08 00000000 		.quad	0
 5044      00000000 
 5045 9c10 00000000 		.quad	.L179
 5045      00000000 
 5046 9c18 00000000 		.quad	0
 5046      00000000 
 5047 9c20 00000000 		.quad	.L186
 5047      00000000 
 5048 9c28 00000000 		.quad	0
 5048      00000000 
 5049 9c30 00000000 		.quad	.L179
 5049      00000000 
 5050 9c38 00000000 		.quad	0
 5050      00000000 
 5051 9c40 00000000 		.quad	.L179
 5051      00000000 
 5052 9c48 00000000 		.quad	0
 5052      00000000 
 5053 9c50 00000000 		.quad	.L179
 5053      00000000 
 5054 9c58 00000000 		.quad	0
 5054      00000000 
 5055 9c60 00000000 		.quad	.L179
 5055      00000000 
 5056 9c68 00000000 		.quad	0
 5056      00000000 
 5057 9c70 00000000 		.quad	.L187
 5057      00000000 
 5058 9c78 00000000 		.quad	0
 5058      00000000 
 5059 9c80 00000000 		.quad	.L179
 5059      00000000 
 5060 9c88 00000000 		.quad	0
 5060      00000000 
 5061 9c90 00000000 		.quad	.L179
 5061      00000000 
 5062 9c98 00000000 		.quad	0
 5062      00000000 
 5063 9ca0 00000000 		.quad	.L188
 5063      00000000 
 5064 9ca8 00000000 		.quad	0
 5064      00000000 
 5065 9cb0 00000000 		.quad	.L179
 5065      00000000 
 5066 9cb8 00000000 		.quad	0
 5066      00000000 
 5067 9cc0 00000000 		.quad	.L179
 5067      00000000 
 5068 9cc8 00000000 		.quad	0
 5068      00000000 
 5069 9cd0 00000000 		.quad	.L179
 5069      00000000 
 5070 9cd8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 178


 5070      00000000 
 5071 9ce0 00000000 		.quad	.L179
 5071      00000000 
 5072 9ce8 00000000 		.quad	0
 5072      00000000 
 5073 9cf0 00000000 		.quad	.L179
 5073      00000000 
 5074 9cf8 00000000 		.quad	0
 5074      00000000 
 5075 9d00 00000000 		.quad	.L179
 5075      00000000 
 5076 9d08 00000000 		.quad	0
 5076      00000000 
 5077 9d10 00000000 		.quad	.L179
 5077      00000000 
 5078 9d18 00000000 		.quad	0
 5078      00000000 
 5079 9d20 00000000 		.quad	.L179
 5079      00000000 
 5080 9d28 00000000 		.quad	0
 5080      00000000 
 5081 9d30 00000000 		.quad	.L179
 5081      00000000 
 5082 9d38 00000000 		.quad	0
 5082      00000000 
 5083 9d40 00000000 		.quad	.L179
 5083      00000000 
 5084 9d48 00000000 		.quad	0
 5084      00000000 
 5085 9d50 00000000 		.quad	.L179
 5085      00000000 
 5086 9d58 00000000 		.quad	0
 5086      00000000 
 5087 9d60 00000000 		.quad	.L179
 5087      00000000 
 5088 9d68 00000000 		.quad	0
 5088      00000000 
 5089 9d70 00000000 		.quad	.L179
 5089      00000000 
 5090 9d78 00000000 		.quad	0
 5090      00000000 
 5091 9d80 00000000 		.quad	.L179
 5091      00000000 
 5092 9d88 00000000 		.quad	0
 5092      00000000 
 5093 9d90 00000000 		.quad	.L179
 5093      00000000 
 5094 9d98 00000000 		.quad	0
 5094      00000000 
 5095 9da0 00000000 		.quad	.L179
 5095      00000000 
 5096 9da8 00000000 		.quad	0
 5096      00000000 
 5097 9db0 00000000 		.quad	.L179
 5097      00000000 
 5098 9db8 00000000 		.quad	0
 5098      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 179


 5099 9dc0 00000000 		.quad	.L179
 5099      00000000 
 5100 9dc8 00000000 		.quad	0
 5100      00000000 
 5101 9dd0 00000000 		.quad	.L179
 5101      00000000 
 5102 9dd8 00000000 		.quad	0
 5102      00000000 
 5103 9de0 00000000 		.quad	.L179
 5103      00000000 
 5104 9de8 00000000 		.quad	0
 5104      00000000 
 5105 9df0 00000000 		.quad	.L179
 5105      00000000 
 5106 9df8 00000000 		.quad	0
 5106      00000000 
 5107 9e00 00000000 		.quad	.L179
 5107      00000000 
 5108 9e08 00000000 		.quad	0
 5108      00000000 
 5109 9e10 00000000 		.quad	.L179
 5109      00000000 
 5110 9e18 00000000 		.quad	0
 5110      00000000 
 5111              		.align 16
 5112              	.LC23:
 5113 9e20 00000000 		.quad	.L189
 5113      00000000 
 5114 9e28 00000000 		.quad	0
 5114      00000000 
 5115 9e30 00000000 		.quad	.L190
 5115      00000000 
 5116 9e38 00000000 		.quad	0
 5116      00000000 
 5117 9e40 00000000 		.quad	.L190
 5117      00000000 
 5118 9e48 00000000 		.quad	0
 5118      00000000 
 5119 9e50 00000000 		.quad	.L190
 5119      00000000 
 5120 9e58 00000000 		.quad	0
 5120      00000000 
 5121 9e60 00000000 		.quad	.L190
 5121      00000000 
 5122 9e68 00000000 		.quad	0
 5122      00000000 
 5123 9e70 00000000 		.quad	.L190
 5123      00000000 
 5124 9e78 00000000 		.quad	0
 5124      00000000 
 5125 9e80 00000000 		.quad	.L190
 5125      00000000 
 5126 9e88 00000000 		.quad	0
 5126      00000000 
 5127 9e90 00000000 		.quad	.L190
 5127      00000000 
 5128 9e98 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 180


 5128      00000000 
 5129 9ea0 00000000 		.quad	.L190
 5129      00000000 
 5130 9ea8 00000000 		.quad	0
 5130      00000000 
 5131 9eb0 00000000 		.quad	.L190
 5131      00000000 
 5132 9eb8 00000000 		.quad	0
 5132      00000000 
 5133 9ec0 00000000 		.quad	.L190
 5133      00000000 
 5134 9ec8 00000000 		.quad	0
 5134      00000000 
 5135 9ed0 00000000 		.quad	.L190
 5135      00000000 
 5136 9ed8 00000000 		.quad	0
 5136      00000000 
 5137 9ee0 00000000 		.quad	.L190
 5137      00000000 
 5138 9ee8 00000000 		.quad	0
 5138      00000000 
 5139 9ef0 00000000 		.quad	.L190
 5139      00000000 
 5140 9ef8 00000000 		.quad	0
 5140      00000000 
 5141 9f00 00000000 		.quad	.L190
 5141      00000000 
 5142 9f08 00000000 		.quad	0
 5142      00000000 
 5143 9f10 00000000 		.quad	.L190
 5143      00000000 
 5144 9f18 00000000 		.quad	0
 5144      00000000 
 5145 9f20 00000000 		.quad	.L190
 5145      00000000 
 5146 9f28 00000000 		.quad	0
 5146      00000000 
 5147 9f30 00000000 		.quad	.L190
 5147      00000000 
 5148 9f38 00000000 		.quad	0
 5148      00000000 
 5149 9f40 00000000 		.quad	.L190
 5149      00000000 
 5150 9f48 00000000 		.quad	0
 5150      00000000 
 5151 9f50 00000000 		.quad	.L190
 5151      00000000 
 5152 9f58 00000000 		.quad	0
 5152      00000000 
 5153 9f60 00000000 		.quad	.L190
 5153      00000000 
 5154 9f68 00000000 		.quad	0
 5154      00000000 
 5155 9f70 00000000 		.quad	.L190
 5155      00000000 
 5156 9f78 00000000 		.quad	0
 5156      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 181


 5157 9f80 00000000 		.quad	.L190
 5157      00000000 
 5158 9f88 00000000 		.quad	0
 5158      00000000 
 5159 9f90 00000000 		.quad	.L190
 5159      00000000 
 5160 9f98 00000000 		.quad	0
 5160      00000000 
 5161 9fa0 00000000 		.quad	.L190
 5161      00000000 
 5162 9fa8 00000000 		.quad	0
 5162      00000000 
 5163 9fb0 00000000 		.quad	.L190
 5163      00000000 
 5164 9fb8 00000000 		.quad	0
 5164      00000000 
 5165 9fc0 00000000 		.quad	.L190
 5165      00000000 
 5166 9fc8 00000000 		.quad	0
 5166      00000000 
 5167 9fd0 00000000 		.quad	.L190
 5167      00000000 
 5168 9fd8 00000000 		.quad	0
 5168      00000000 
 5169 9fe0 00000000 		.quad	.L190
 5169      00000000 
 5170 9fe8 00000000 		.quad	0
 5170      00000000 
 5171 9ff0 00000000 		.quad	.L190
 5171      00000000 
 5172 9ff8 00000000 		.quad	0
 5172      00000000 
 5173 a000 00000000 		.quad	.L190
 5173      00000000 
 5174 a008 00000000 		.quad	0
 5174      00000000 
 5175 a010 00000000 		.quad	.L190
 5175      00000000 
 5176 a018 00000000 		.quad	0
 5176      00000000 
 5177 a020 00000000 		.quad	.L190
 5177      00000000 
 5178 a028 00000000 		.quad	0
 5178      00000000 
 5179 a030 00000000 		.quad	.L191
 5179      00000000 
 5180 a038 00000000 		.quad	0
 5180      00000000 
 5181 a040 00000000 		.quad	.L190
 5181      00000000 
 5182 a048 00000000 		.quad	0
 5182      00000000 
 5183 a050 00000000 		.quad	.L190
 5183      00000000 
 5184 a058 00000000 		.quad	0
 5184      00000000 
 5185 a060 00000000 		.quad	.L190
GAS LISTING /tmp/cc15eBE3.s 			page 182


 5185      00000000 
 5186 a068 00000000 		.quad	0
 5186      00000000 
 5187 a070 00000000 		.quad	.L190
 5187      00000000 
 5188 a078 00000000 		.quad	0
 5188      00000000 
 5189 a080 00000000 		.quad	.L192
 5189      00000000 
 5190 a088 00000000 		.quad	0
 5190      00000000 
 5191 a090 00000000 		.quad	.L190
 5191      00000000 
 5192 a098 00000000 		.quad	0
 5192      00000000 
 5193 a0a0 00000000 		.quad	.L190
 5193      00000000 
 5194 a0a8 00000000 		.quad	0
 5194      00000000 
 5195 a0b0 00000000 		.quad	.L190
 5195      00000000 
 5196 a0b8 00000000 		.quad	0
 5196      00000000 
 5197 a0c0 00000000 		.quad	.L190
 5197      00000000 
 5198 a0c8 00000000 		.quad	0
 5198      00000000 
 5199 a0d0 00000000 		.quad	.L190
 5199      00000000 
 5200 a0d8 00000000 		.quad	0
 5200      00000000 
 5201 a0e0 00000000 		.quad	.L190
 5201      00000000 
 5202 a0e8 00000000 		.quad	0
 5202      00000000 
 5203 a0f0 00000000 		.quad	.L190
 5203      00000000 
 5204 a0f8 00000000 		.quad	0
 5204      00000000 
 5205 a100 00000000 		.quad	.L190
 5205      00000000 
 5206 a108 00000000 		.quad	0
 5206      00000000 
 5207 a110 00000000 		.quad	.L190
 5207      00000000 
 5208 a118 00000000 		.quad	0
 5208      00000000 
 5209 a120 00000000 		.quad	.L190
 5209      00000000 
 5210 a128 00000000 		.quad	0
 5210      00000000 
 5211 a130 00000000 		.quad	.L190
 5211      00000000 
 5212 a138 00000000 		.quad	0
 5212      00000000 
 5213 a140 00000000 		.quad	.L190
 5213      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 183


 5214 a148 00000000 		.quad	0
 5214      00000000 
 5215 a150 00000000 		.quad	.L190
 5215      00000000 
 5216 a158 00000000 		.quad	0
 5216      00000000 
 5217 a160 00000000 		.quad	.L193
 5217      00000000 
 5218 a168 00000000 		.quad	0
 5218      00000000 
 5219 a170 00000000 		.quad	.L190
 5219      00000000 
 5220 a178 00000000 		.quad	0
 5220      00000000 
 5221 a180 00000000 		.quad	.L190
 5221      00000000 
 5222 a188 00000000 		.quad	0
 5222      00000000 
 5223 a190 00000000 		.quad	.L190
 5223      00000000 
 5224 a198 00000000 		.quad	0
 5224      00000000 
 5225 a1a0 00000000 		.quad	.L190
 5225      00000000 
 5226 a1a8 00000000 		.quad	0
 5226      00000000 
 5227 a1b0 00000000 		.quad	.L190
 5227      00000000 
 5228 a1b8 00000000 		.quad	0
 5228      00000000 
 5229 a1c0 00000000 		.quad	.L190
 5229      00000000 
 5230 a1c8 00000000 		.quad	0
 5230      00000000 
 5231 a1d0 00000000 		.quad	.L190
 5231      00000000 
 5232 a1d8 00000000 		.quad	0
 5232      00000000 
 5233 a1e0 00000000 		.quad	.L190
 5233      00000000 
 5234 a1e8 00000000 		.quad	0
 5234      00000000 
 5235 a1f0 00000000 		.quad	.L190
 5235      00000000 
 5236 a1f8 00000000 		.quad	0
 5236      00000000 
 5237 a200 00000000 		.quad	.L190
 5237      00000000 
 5238 a208 00000000 		.quad	0
 5238      00000000 
 5239 a210 00000000 		.quad	.L190
 5239      00000000 
 5240 a218 00000000 		.quad	0
 5240      00000000 
 5241 a220 00000000 		.quad	.L190
 5241      00000000 
 5242 a228 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 184


 5242      00000000 
 5243 a230 00000000 		.quad	.L190
 5243      00000000 
 5244 a238 00000000 		.quad	0
 5244      00000000 
 5245 a240 00000000 		.quad	.L190
 5245      00000000 
 5246 a248 00000000 		.quad	0
 5246      00000000 
 5247 a250 00000000 		.quad	.L190
 5247      00000000 
 5248 a258 00000000 		.quad	0
 5248      00000000 
 5249 a260 00000000 		.quad	.L190
 5249      00000000 
 5250 a268 00000000 		.quad	0
 5250      00000000 
 5251 a270 00000000 		.quad	.L190
 5251      00000000 
 5252 a278 00000000 		.quad	0
 5252      00000000 
 5253 a280 00000000 		.quad	.L190
 5253      00000000 
 5254 a288 00000000 		.quad	0
 5254      00000000 
 5255 a290 00000000 		.quad	.L190
 5255      00000000 
 5256 a298 00000000 		.quad	0
 5256      00000000 
 5257 a2a0 00000000 		.quad	.L190
 5257      00000000 
 5258 a2a8 00000000 		.quad	0
 5258      00000000 
 5259 a2b0 00000000 		.quad	.L190
 5259      00000000 
 5260 a2b8 00000000 		.quad	0
 5260      00000000 
 5261 a2c0 00000000 		.quad	.L190
 5261      00000000 
 5262 a2c8 00000000 		.quad	0
 5262      00000000 
 5263 a2d0 00000000 		.quad	.L190
 5263      00000000 
 5264 a2d8 00000000 		.quad	0
 5264      00000000 
 5265 a2e0 00000000 		.quad	.L190
 5265      00000000 
 5266 a2e8 00000000 		.quad	0
 5266      00000000 
 5267 a2f0 00000000 		.quad	.L190
 5267      00000000 
 5268 a2f8 00000000 		.quad	0
 5268      00000000 
 5269 a300 00000000 		.quad	.L190
 5269      00000000 
 5270 a308 00000000 		.quad	0
 5270      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 185


 5271 a310 00000000 		.quad	.L190
 5271      00000000 
 5272 a318 00000000 		.quad	0
 5272      00000000 
 5273 a320 00000000 		.quad	.L190
 5273      00000000 
 5274 a328 00000000 		.quad	0
 5274      00000000 
 5275 a330 00000000 		.quad	.L190
 5275      00000000 
 5276 a338 00000000 		.quad	0
 5276      00000000 
 5277 a340 00000000 		.quad	.L190
 5277      00000000 
 5278 a348 00000000 		.quad	0
 5278      00000000 
 5279 a350 00000000 		.quad	.L190
 5279      00000000 
 5280 a358 00000000 		.quad	0
 5280      00000000 
 5281 a360 00000000 		.quad	.L190
 5281      00000000 
 5282 a368 00000000 		.quad	0
 5282      00000000 
 5283 a370 00000000 		.quad	.L190
 5283      00000000 
 5284 a378 00000000 		.quad	0
 5284      00000000 
 5285 a380 00000000 		.quad	.L194
 5285      00000000 
 5286 a388 00000000 		.quad	0
 5286      00000000 
 5287 a390 00000000 		.quad	.L190
 5287      00000000 
 5288 a398 00000000 		.quad	0
 5288      00000000 
 5289 a3a0 00000000 		.quad	.L190
 5289      00000000 
 5290 a3a8 00000000 		.quad	0
 5290      00000000 
 5291 a3b0 00000000 		.quad	.L190
 5291      00000000 
 5292 a3b8 00000000 		.quad	0
 5292      00000000 
 5293 a3c0 00000000 		.quad	.L190
 5293      00000000 
 5294 a3c8 00000000 		.quad	0
 5294      00000000 
 5295 a3d0 00000000 		.quad	.L190
 5295      00000000 
 5296 a3d8 00000000 		.quad	0
 5296      00000000 
 5297 a3e0 00000000 		.quad	.L190
 5297      00000000 
 5298 a3e8 00000000 		.quad	0
 5298      00000000 
 5299 a3f0 00000000 		.quad	.L190
GAS LISTING /tmp/cc15eBE3.s 			page 186


 5299      00000000 
 5300 a3f8 00000000 		.quad	0
 5300      00000000 
 5301 a400 00000000 		.quad	.L190
 5301      00000000 
 5302 a408 00000000 		.quad	0
 5302      00000000 
 5303 a410 00000000 		.quad	.L190
 5303      00000000 
 5304 a418 00000000 		.quad	0
 5304      00000000 
 5305 a420 00000000 		.quad	.L190
 5305      00000000 
 5306 a428 00000000 		.quad	0
 5306      00000000 
 5307 a430 00000000 		.quad	.L190
 5307      00000000 
 5308 a438 00000000 		.quad	0
 5308      00000000 
 5309 a440 00000000 		.quad	.L190
 5309      00000000 
 5310 a448 00000000 		.quad	0
 5310      00000000 
 5311 a450 00000000 		.quad	.L190
 5311      00000000 
 5312 a458 00000000 		.quad	0
 5312      00000000 
 5313 a460 00000000 		.quad	.L190
 5313      00000000 
 5314 a468 00000000 		.quad	0
 5314      00000000 
 5315 a470 00000000 		.quad	.L190
 5315      00000000 
 5316 a478 00000000 		.quad	0
 5316      00000000 
 5317 a480 00000000 		.quad	.L190
 5317      00000000 
 5318 a488 00000000 		.quad	0
 5318      00000000 
 5319 a490 00000000 		.quad	.L190
 5319      00000000 
 5320 a498 00000000 		.quad	0
 5320      00000000 
 5321 a4a0 00000000 		.quad	.L190
 5321      00000000 
 5322 a4a8 00000000 		.quad	0
 5322      00000000 
 5323 a4b0 00000000 		.quad	.L190
 5323      00000000 
 5324 a4b8 00000000 		.quad	0
 5324      00000000 
 5325 a4c0 00000000 		.quad	.L190
 5325      00000000 
 5326 a4c8 00000000 		.quad	0
 5326      00000000 
 5327 a4d0 00000000 		.quad	.L190
 5327      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 187


 5328 a4d8 00000000 		.quad	0
 5328      00000000 
 5329 a4e0 00000000 		.quad	.L190
 5329      00000000 
 5330 a4e8 00000000 		.quad	0
 5330      00000000 
 5331 a4f0 00000000 		.quad	.L190
 5331      00000000 
 5332 a4f8 00000000 		.quad	0
 5332      00000000 
 5333              		.align 16
 5334              	.LC24:
 5335 a500 00000000 		.quad	.L195
 5335      00000000 
 5336 a508 00000000 		.quad	0
 5336      00000000 
 5337 a510 00000000 		.quad	.L196
 5337      00000000 
 5338 a518 00000000 		.quad	0
 5338      00000000 
 5339 a520 00000000 		.quad	.L196
 5339      00000000 
 5340 a528 00000000 		.quad	0
 5340      00000000 
 5341 a530 00000000 		.quad	.L196
 5341      00000000 
 5342 a538 00000000 		.quad	0
 5342      00000000 
 5343 a540 00000000 		.quad	.L196
 5343      00000000 
 5344 a548 00000000 		.quad	0
 5344      00000000 
 5345 a550 00000000 		.quad	.L196
 5345      00000000 
 5346 a558 00000000 		.quad	0
 5346      00000000 
 5347 a560 00000000 		.quad	.L196
 5347      00000000 
 5348 a568 00000000 		.quad	0
 5348      00000000 
 5349 a570 00000000 		.quad	.L196
 5349      00000000 
 5350 a578 00000000 		.quad	0
 5350      00000000 
 5351 a580 00000000 		.quad	.L196
 5351      00000000 
 5352 a588 00000000 		.quad	0
 5352      00000000 
 5353 a590 00000000 		.quad	.L196
 5353      00000000 
 5354 a598 00000000 		.quad	0
 5354      00000000 
 5355 a5a0 00000000 		.quad	.L196
 5355      00000000 
 5356 a5a8 00000000 		.quad	0
 5356      00000000 
 5357 a5b0 00000000 		.quad	.L196
GAS LISTING /tmp/cc15eBE3.s 			page 188


 5357      00000000 
 5358 a5b8 00000000 		.quad	0
 5358      00000000 
 5359 a5c0 00000000 		.quad	.L196
 5359      00000000 
 5360 a5c8 00000000 		.quad	0
 5360      00000000 
 5361 a5d0 00000000 		.quad	.L196
 5361      00000000 
 5362 a5d8 00000000 		.quad	0
 5362      00000000 
 5363 a5e0 00000000 		.quad	.L196
 5363      00000000 
 5364 a5e8 00000000 		.quad	0
 5364      00000000 
 5365 a5f0 00000000 		.quad	.L196
 5365      00000000 
 5366 a5f8 00000000 		.quad	0
 5366      00000000 
 5367 a600 00000000 		.quad	.L196
 5367      00000000 
 5368 a608 00000000 		.quad	0
 5368      00000000 
 5369 a610 00000000 		.quad	.L196
 5369      00000000 
 5370 a618 00000000 		.quad	0
 5370      00000000 
 5371 a620 00000000 		.quad	.L196
 5371      00000000 
 5372 a628 00000000 		.quad	0
 5372      00000000 
 5373 a630 00000000 		.quad	.L196
 5373      00000000 
 5374 a638 00000000 		.quad	0
 5374      00000000 
 5375 a640 00000000 		.quad	.L196
 5375      00000000 
 5376 a648 00000000 		.quad	0
 5376      00000000 
 5377 a650 00000000 		.quad	.L196
 5377      00000000 
 5378 a658 00000000 		.quad	0
 5378      00000000 
 5379 a660 00000000 		.quad	.L196
 5379      00000000 
 5380 a668 00000000 		.quad	0
 5380      00000000 
 5381 a670 00000000 		.quad	.L196
 5381      00000000 
 5382 a678 00000000 		.quad	0
 5382      00000000 
 5383 a680 00000000 		.quad	.L196
 5383      00000000 
 5384 a688 00000000 		.quad	0
 5384      00000000 
 5385 a690 00000000 		.quad	.L196
 5385      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 189


 5386 a698 00000000 		.quad	0
 5386      00000000 
 5387 a6a0 00000000 		.quad	.L196
 5387      00000000 
 5388 a6a8 00000000 		.quad	0
 5388      00000000 
 5389 a6b0 00000000 		.quad	.L196
 5389      00000000 
 5390 a6b8 00000000 		.quad	0
 5390      00000000 
 5391 a6c0 00000000 		.quad	.L196
 5391      00000000 
 5392 a6c8 00000000 		.quad	0
 5392      00000000 
 5393 a6d0 00000000 		.quad	.L196
 5393      00000000 
 5394 a6d8 00000000 		.quad	0
 5394      00000000 
 5395 a6e0 00000000 		.quad	.L196
 5395      00000000 
 5396 a6e8 00000000 		.quad	0
 5396      00000000 
 5397 a6f0 00000000 		.quad	.L196
 5397      00000000 
 5398 a6f8 00000000 		.quad	0
 5398      00000000 
 5399 a700 00000000 		.quad	.L196
 5399      00000000 
 5400 a708 00000000 		.quad	0
 5400      00000000 
 5401 a710 00000000 		.quad	.L197
 5401      00000000 
 5402 a718 00000000 		.quad	0
 5402      00000000 
 5403 a720 00000000 		.quad	.L196
 5403      00000000 
 5404 a728 00000000 		.quad	0
 5404      00000000 
 5405 a730 00000000 		.quad	.L196
 5405      00000000 
 5406 a738 00000000 		.quad	0
 5406      00000000 
 5407 a740 00000000 		.quad	.L196
 5407      00000000 
 5408 a748 00000000 		.quad	0
 5408      00000000 
 5409 a750 00000000 		.quad	.L196
 5409      00000000 
 5410 a758 00000000 		.quad	0
 5410      00000000 
 5411 a760 00000000 		.quad	.L196
 5411      00000000 
 5412 a768 00000000 		.quad	0
 5412      00000000 
 5413 a770 00000000 		.quad	.L196
 5413      00000000 
 5414 a778 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 190


 5414      00000000 
 5415 a780 00000000 		.quad	.L196
 5415      00000000 
 5416 a788 00000000 		.quad	0
 5416      00000000 
 5417 a790 00000000 		.quad	.L196
 5417      00000000 
 5418 a798 00000000 		.quad	0
 5418      00000000 
 5419 a7a0 00000000 		.quad	.L196
 5419      00000000 
 5420 a7a8 00000000 		.quad	0
 5420      00000000 
 5421 a7b0 00000000 		.quad	.L196
 5421      00000000 
 5422 a7b8 00000000 		.quad	0
 5422      00000000 
 5423 a7c0 00000000 		.quad	.L196
 5423      00000000 
 5424 a7c8 00000000 		.quad	0
 5424      00000000 
 5425 a7d0 00000000 		.quad	.L196
 5425      00000000 
 5426 a7d8 00000000 		.quad	0
 5426      00000000 
 5427 a7e0 00000000 		.quad	.L196
 5427      00000000 
 5428 a7e8 00000000 		.quad	0
 5428      00000000 
 5429 a7f0 00000000 		.quad	.L196
 5429      00000000 
 5430 a7f8 00000000 		.quad	0
 5430      00000000 
 5431 a800 00000000 		.quad	.L196
 5431      00000000 
 5432 a808 00000000 		.quad	0
 5432      00000000 
 5433 a810 00000000 		.quad	.L196
 5433      00000000 
 5434 a818 00000000 		.quad	0
 5434      00000000 
 5435 a820 00000000 		.quad	.L196
 5435      00000000 
 5436 a828 00000000 		.quad	0
 5436      00000000 
 5437 a830 00000000 		.quad	.L196
 5437      00000000 
 5438 a838 00000000 		.quad	0
 5438      00000000 
 5439 a840 00000000 		.quad	.L198
 5439      00000000 
 5440 a848 00000000 		.quad	0
 5440      00000000 
 5441 a850 00000000 		.quad	.L196
 5441      00000000 
 5442 a858 00000000 		.quad	0
 5442      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 191


 5443 a860 00000000 		.quad	.L196
 5443      00000000 
 5444 a868 00000000 		.quad	0
 5444      00000000 
 5445 a870 00000000 		.quad	.L196
 5445      00000000 
 5446 a878 00000000 		.quad	0
 5446      00000000 
 5447 a880 00000000 		.quad	.L196
 5447      00000000 
 5448 a888 00000000 		.quad	0
 5448      00000000 
 5449 a890 00000000 		.quad	.L196
 5449      00000000 
 5450 a898 00000000 		.quad	0
 5450      00000000 
 5451 a8a0 00000000 		.quad	.L196
 5451      00000000 
 5452 a8a8 00000000 		.quad	0
 5452      00000000 
 5453 a8b0 00000000 		.quad	.L196
 5453      00000000 
 5454 a8b8 00000000 		.quad	0
 5454      00000000 
 5455 a8c0 00000000 		.quad	.L196
 5455      00000000 
 5456 a8c8 00000000 		.quad	0
 5456      00000000 
 5457 a8d0 00000000 		.quad	.L196
 5457      00000000 
 5458 a8d8 00000000 		.quad	0
 5458      00000000 
 5459 a8e0 00000000 		.quad	.L196
 5459      00000000 
 5460 a8e8 00000000 		.quad	0
 5460      00000000 
 5461 a8f0 00000000 		.quad	.L196
 5461      00000000 
 5462 a8f8 00000000 		.quad	0
 5462      00000000 
 5463 a900 00000000 		.quad	.L196
 5463      00000000 
 5464 a908 00000000 		.quad	0
 5464      00000000 
 5465 a910 00000000 		.quad	.L196
 5465      00000000 
 5466 a918 00000000 		.quad	0
 5466      00000000 
 5467 a920 00000000 		.quad	.L196
 5467      00000000 
 5468 a928 00000000 		.quad	0
 5468      00000000 
 5469 a930 00000000 		.quad	.L196
 5469      00000000 
 5470 a938 00000000 		.quad	0
 5470      00000000 
 5471 a940 00000000 		.quad	.L196
GAS LISTING /tmp/cc15eBE3.s 			page 192


 5471      00000000 
 5472 a948 00000000 		.quad	0
 5472      00000000 
 5473 a950 00000000 		.quad	.L196
 5473      00000000 
 5474 a958 00000000 		.quad	0
 5474      00000000 
 5475 a960 00000000 		.quad	.L196
 5475      00000000 
 5476 a968 00000000 		.quad	0
 5476      00000000 
 5477 a970 00000000 		.quad	.L196
 5477      00000000 
 5478 a978 00000000 		.quad	0
 5478      00000000 
 5479 a980 00000000 		.quad	.L196
 5479      00000000 
 5480 a988 00000000 		.quad	0
 5480      00000000 
 5481 a990 00000000 		.quad	.L196
 5481      00000000 
 5482 a998 00000000 		.quad	0
 5482      00000000 
 5483 a9a0 00000000 		.quad	.L196
 5483      00000000 
 5484 a9a8 00000000 		.quad	0
 5484      00000000 
 5485 a9b0 00000000 		.quad	.L196
 5485      00000000 
 5486 a9b8 00000000 		.quad	0
 5486      00000000 
 5487 a9c0 00000000 		.quad	.L196
 5487      00000000 
 5488 a9c8 00000000 		.quad	0
 5488      00000000 
 5489 a9d0 00000000 		.quad	.L196
 5489      00000000 
 5490 a9d8 00000000 		.quad	0
 5490      00000000 
 5491 a9e0 00000000 		.quad	.L196
 5491      00000000 
 5492 a9e8 00000000 		.quad	0
 5492      00000000 
 5493 a9f0 00000000 		.quad	.L196
 5493      00000000 
 5494 a9f8 00000000 		.quad	0
 5494      00000000 
 5495 aa00 00000000 		.quad	.L196
 5495      00000000 
 5496 aa08 00000000 		.quad	0
 5496      00000000 
 5497 aa10 00000000 		.quad	.L196
 5497      00000000 
 5498 aa18 00000000 		.quad	0
 5498      00000000 
 5499 aa20 00000000 		.quad	.L196
 5499      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 193


 5500 aa28 00000000 		.quad	0
 5500      00000000 
 5501 aa30 00000000 		.quad	.L196
 5501      00000000 
 5502 aa38 00000000 		.quad	0
 5502      00000000 
 5503 aa40 00000000 		.quad	.L196
 5503      00000000 
 5504 aa48 00000000 		.quad	0
 5504      00000000 
 5505 aa50 00000000 		.quad	.L196
 5505      00000000 
 5506 aa58 00000000 		.quad	0
 5506      00000000 
 5507 aa60 00000000 		.quad	.L199
 5507      00000000 
 5508 aa68 00000000 		.quad	0
 5508      00000000 
 5509 aa70 00000000 		.quad	.L196
 5509      00000000 
 5510 aa78 00000000 		.quad	0
 5510      00000000 
 5511 aa80 00000000 		.quad	.L196
 5511      00000000 
 5512 aa88 00000000 		.quad	0
 5512      00000000 
 5513 aa90 00000000 		.quad	.L196
 5513      00000000 
 5514 aa98 00000000 		.quad	0
 5514      00000000 
 5515 aaa0 00000000 		.quad	.L196
 5515      00000000 
 5516 aaa8 00000000 		.quad	0
 5516      00000000 
 5517 aab0 00000000 		.quad	.L196
 5517      00000000 
 5518 aab8 00000000 		.quad	0
 5518      00000000 
 5519 aac0 00000000 		.quad	.L196
 5519      00000000 
 5520 aac8 00000000 		.quad	0
 5520      00000000 
 5521 aad0 00000000 		.quad	.L196
 5521      00000000 
 5522 aad8 00000000 		.quad	0
 5522      00000000 
 5523 aae0 00000000 		.quad	.L196
 5523      00000000 
 5524 aae8 00000000 		.quad	0
 5524      00000000 
 5525 aaf0 00000000 		.quad	.L196
 5525      00000000 
 5526 aaf8 00000000 		.quad	0
 5526      00000000 
 5527 ab00 00000000 		.quad	.L196
 5527      00000000 
 5528 ab08 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 194


 5528      00000000 
 5529 ab10 00000000 		.quad	.L196
 5529      00000000 
 5530 ab18 00000000 		.quad	0
 5530      00000000 
 5531 ab20 00000000 		.quad	.L196
 5531      00000000 
 5532 ab28 00000000 		.quad	0
 5532      00000000 
 5533 ab30 00000000 		.quad	.L196
 5533      00000000 
 5534 ab38 00000000 		.quad	0
 5534      00000000 
 5535 ab40 00000000 		.quad	.L196
 5535      00000000 
 5536 ab48 00000000 		.quad	0
 5536      00000000 
 5537 ab50 00000000 		.quad	.L196
 5537      00000000 
 5538 ab58 00000000 		.quad	0
 5538      00000000 
 5539 ab60 00000000 		.quad	.L196
 5539      00000000 
 5540 ab68 00000000 		.quad	0
 5540      00000000 
 5541 ab70 00000000 		.quad	.L196
 5541      00000000 
 5542 ab78 00000000 		.quad	0
 5542      00000000 
 5543 ab80 00000000 		.quad	.L196
 5543      00000000 
 5544 ab88 00000000 		.quad	0
 5544      00000000 
 5545 ab90 00000000 		.quad	.L196
 5545      00000000 
 5546 ab98 00000000 		.quad	0
 5546      00000000 
 5547 aba0 00000000 		.quad	.L196
 5547      00000000 
 5548 aba8 00000000 		.quad	0
 5548      00000000 
 5549 abb0 00000000 		.quad	.L196
 5549      00000000 
 5550 abb8 00000000 		.quad	0
 5550      00000000 
 5551 abc0 00000000 		.quad	.L196
 5551      00000000 
 5552 abc8 00000000 		.quad	0
 5552      00000000 
 5553 abd0 00000000 		.quad	.L196
 5553      00000000 
 5554 abd8 00000000 		.quad	0
 5554      00000000 
 5555              		.align 16
 5556              	.LC25:
 5557 abe0 00000000 		.quad	.L200
 5557      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 195


 5558 abe8 00000000 		.quad	0
 5558      00000000 
 5559 abf0 00000000 		.quad	.L201
 5559      00000000 
 5560 abf8 00000000 		.quad	0
 5560      00000000 
 5561 ac00 00000000 		.quad	.L201
 5561      00000000 
 5562 ac08 00000000 		.quad	0
 5562      00000000 
 5563 ac10 00000000 		.quad	.L201
 5563      00000000 
 5564 ac18 00000000 		.quad	0
 5564      00000000 
 5565 ac20 00000000 		.quad	.L201
 5565      00000000 
 5566 ac28 00000000 		.quad	0
 5566      00000000 
 5567 ac30 00000000 		.quad	.L201
 5567      00000000 
 5568 ac38 00000000 		.quad	0
 5568      00000000 
 5569 ac40 00000000 		.quad	.L201
 5569      00000000 
 5570 ac48 00000000 		.quad	0
 5570      00000000 
 5571 ac50 00000000 		.quad	.L201
 5571      00000000 
 5572 ac58 00000000 		.quad	0
 5572      00000000 
 5573 ac60 00000000 		.quad	.L201
 5573      00000000 
 5574 ac68 00000000 		.quad	0
 5574      00000000 
 5575 ac70 00000000 		.quad	.L201
 5575      00000000 
 5576 ac78 00000000 		.quad	0
 5576      00000000 
 5577 ac80 00000000 		.quad	.L201
 5577      00000000 
 5578 ac88 00000000 		.quad	0
 5578      00000000 
 5579 ac90 00000000 		.quad	.L201
 5579      00000000 
 5580 ac98 00000000 		.quad	0
 5580      00000000 
 5581 aca0 00000000 		.quad	.L201
 5581      00000000 
 5582 aca8 00000000 		.quad	0
 5582      00000000 
 5583 acb0 00000000 		.quad	.L201
 5583      00000000 
 5584 acb8 00000000 		.quad	0
 5584      00000000 
 5585 acc0 00000000 		.quad	.L201
 5585      00000000 
 5586 acc8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 196


 5586      00000000 
 5587 acd0 00000000 		.quad	.L201
 5587      00000000 
 5588 acd8 00000000 		.quad	0
 5588      00000000 
 5589 ace0 00000000 		.quad	.L201
 5589      00000000 
 5590 ace8 00000000 		.quad	0
 5590      00000000 
 5591 acf0 00000000 		.quad	.L201
 5591      00000000 
 5592 acf8 00000000 		.quad	0
 5592      00000000 
 5593 ad00 00000000 		.quad	.L201
 5593      00000000 
 5594 ad08 00000000 		.quad	0
 5594      00000000 
 5595 ad10 00000000 		.quad	.L201
 5595      00000000 
 5596 ad18 00000000 		.quad	0
 5596      00000000 
 5597 ad20 00000000 		.quad	.L201
 5597      00000000 
 5598 ad28 00000000 		.quad	0
 5598      00000000 
 5599 ad30 00000000 		.quad	.L201
 5599      00000000 
 5600 ad38 00000000 		.quad	0
 5600      00000000 
 5601 ad40 00000000 		.quad	.L201
 5601      00000000 
 5602 ad48 00000000 		.quad	0
 5602      00000000 
 5603 ad50 00000000 		.quad	.L201
 5603      00000000 
 5604 ad58 00000000 		.quad	0
 5604      00000000 
 5605 ad60 00000000 		.quad	.L201
 5605      00000000 
 5606 ad68 00000000 		.quad	0
 5606      00000000 
 5607 ad70 00000000 		.quad	.L201
 5607      00000000 
 5608 ad78 00000000 		.quad	0
 5608      00000000 
 5609 ad80 00000000 		.quad	.L201
 5609      00000000 
 5610 ad88 00000000 		.quad	0
 5610      00000000 
 5611 ad90 00000000 		.quad	.L201
 5611      00000000 
 5612 ad98 00000000 		.quad	0
 5612      00000000 
 5613 ada0 00000000 		.quad	.L201
 5613      00000000 
 5614 ada8 00000000 		.quad	0
 5614      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 197


 5615 adb0 00000000 		.quad	.L201
 5615      00000000 
 5616 adb8 00000000 		.quad	0
 5616      00000000 
 5617 adc0 00000000 		.quad	.L201
 5617      00000000 
 5618 adc8 00000000 		.quad	0
 5618      00000000 
 5619 add0 00000000 		.quad	.L201
 5619      00000000 
 5620 add8 00000000 		.quad	0
 5620      00000000 
 5621 ade0 00000000 		.quad	.L201
 5621      00000000 
 5622 ade8 00000000 		.quad	0
 5622      00000000 
 5623 adf0 00000000 		.quad	.L202
 5623      00000000 
 5624 adf8 00000000 		.quad	0
 5624      00000000 
 5625 ae00 00000000 		.quad	.L201
 5625      00000000 
 5626 ae08 00000000 		.quad	0
 5626      00000000 
 5627 ae10 00000000 		.quad	.L201
 5627      00000000 
 5628 ae18 00000000 		.quad	0
 5628      00000000 
 5629 ae20 00000000 		.quad	.L201
 5629      00000000 
 5630 ae28 00000000 		.quad	0
 5630      00000000 
 5631 ae30 00000000 		.quad	.L201
 5631      00000000 
 5632 ae38 00000000 		.quad	0
 5632      00000000 
 5633 ae40 00000000 		.quad	.L201
 5633      00000000 
 5634 ae48 00000000 		.quad	0
 5634      00000000 
 5635 ae50 00000000 		.quad	.L201
 5635      00000000 
 5636 ae58 00000000 		.quad	0
 5636      00000000 
 5637 ae60 00000000 		.quad	.L201
 5637      00000000 
 5638 ae68 00000000 		.quad	0
 5638      00000000 
 5639 ae70 00000000 		.quad	.L201
 5639      00000000 
 5640 ae78 00000000 		.quad	0
 5640      00000000 
 5641 ae80 00000000 		.quad	.L201
 5641      00000000 
 5642 ae88 00000000 		.quad	0
 5642      00000000 
 5643 ae90 00000000 		.quad	.L201
GAS LISTING /tmp/cc15eBE3.s 			page 198


 5643      00000000 
 5644 ae98 00000000 		.quad	0
 5644      00000000 
 5645 aea0 00000000 		.quad	.L201
 5645      00000000 
 5646 aea8 00000000 		.quad	0
 5646      00000000 
 5647 aeb0 00000000 		.quad	.L201
 5647      00000000 
 5648 aeb8 00000000 		.quad	0
 5648      00000000 
 5649 aec0 00000000 		.quad	.L201
 5649      00000000 
 5650 aec8 00000000 		.quad	0
 5650      00000000 
 5651 aed0 00000000 		.quad	.L201
 5651      00000000 
 5652 aed8 00000000 		.quad	0
 5652      00000000 
 5653 aee0 00000000 		.quad	.L201
 5653      00000000 
 5654 aee8 00000000 		.quad	0
 5654      00000000 
 5655 aef0 00000000 		.quad	.L201
 5655      00000000 
 5656 aef8 00000000 		.quad	0
 5656      00000000 
 5657 af00 00000000 		.quad	.L201
 5657      00000000 
 5658 af08 00000000 		.quad	0
 5658      00000000 
 5659 af10 00000000 		.quad	.L201
 5659      00000000 
 5660 af18 00000000 		.quad	0
 5660      00000000 
 5661 af20 00000000 		.quad	.L203
 5661      00000000 
 5662 af28 00000000 		.quad	0
 5662      00000000 
 5663 af30 00000000 		.quad	.L201
 5663      00000000 
 5664 af38 00000000 		.quad	0
 5664      00000000 
 5665 af40 00000000 		.quad	.L201
 5665      00000000 
 5666 af48 00000000 		.quad	0
 5666      00000000 
 5667 af50 00000000 		.quad	.L201
 5667      00000000 
 5668 af58 00000000 		.quad	0
 5668      00000000 
 5669 af60 00000000 		.quad	.L201
 5669      00000000 
 5670 af68 00000000 		.quad	0
 5670      00000000 
 5671 af70 00000000 		.quad	.L201
 5671      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 199


 5672 af78 00000000 		.quad	0
 5672      00000000 
 5673 af80 00000000 		.quad	.L201
 5673      00000000 
 5674 af88 00000000 		.quad	0
 5674      00000000 
 5675 af90 00000000 		.quad	.L201
 5675      00000000 
 5676 af98 00000000 		.quad	0
 5676      00000000 
 5677 afa0 00000000 		.quad	.L201
 5677      00000000 
 5678 afa8 00000000 		.quad	0
 5678      00000000 
 5679 afb0 00000000 		.quad	.L201
 5679      00000000 
 5680 afb8 00000000 		.quad	0
 5680      00000000 
 5681 afc0 00000000 		.quad	.L201
 5681      00000000 
 5682 afc8 00000000 		.quad	0
 5682      00000000 
 5683 afd0 00000000 		.quad	.L201
 5683      00000000 
 5684 afd8 00000000 		.quad	0
 5684      00000000 
 5685 afe0 00000000 		.quad	.L201
 5685      00000000 
 5686 afe8 00000000 		.quad	0
 5686      00000000 
 5687 aff0 00000000 		.quad	.L201
 5687      00000000 
 5688 aff8 00000000 		.quad	0
 5688      00000000 
 5689 b000 00000000 		.quad	.L201
 5689      00000000 
 5690 b008 00000000 		.quad	0
 5690      00000000 
 5691 b010 00000000 		.quad	.L201
 5691      00000000 
 5692 b018 00000000 		.quad	0
 5692      00000000 
 5693 b020 00000000 		.quad	.L201
 5693      00000000 
 5694 b028 00000000 		.quad	0
 5694      00000000 
 5695 b030 00000000 		.quad	.L201
 5695      00000000 
 5696 b038 00000000 		.quad	0
 5696      00000000 
 5697 b040 00000000 		.quad	.L201
 5697      00000000 
 5698 b048 00000000 		.quad	0
 5698      00000000 
 5699 b050 00000000 		.quad	.L201
 5699      00000000 
 5700 b058 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 200


 5700      00000000 
 5701 b060 00000000 		.quad	.L201
 5701      00000000 
 5702 b068 00000000 		.quad	0
 5702      00000000 
 5703 b070 00000000 		.quad	.L201
 5703      00000000 
 5704 b078 00000000 		.quad	0
 5704      00000000 
 5705 b080 00000000 		.quad	.L201
 5705      00000000 
 5706 b088 00000000 		.quad	0
 5706      00000000 
 5707 b090 00000000 		.quad	.L201
 5707      00000000 
 5708 b098 00000000 		.quad	0
 5708      00000000 
 5709 b0a0 00000000 		.quad	.L201
 5709      00000000 
 5710 b0a8 00000000 		.quad	0
 5710      00000000 
 5711 b0b0 00000000 		.quad	.L201
 5711      00000000 
 5712 b0b8 00000000 		.quad	0
 5712      00000000 
 5713 b0c0 00000000 		.quad	.L201
 5713      00000000 
 5714 b0c8 00000000 		.quad	0
 5714      00000000 
 5715 b0d0 00000000 		.quad	.L201
 5715      00000000 
 5716 b0d8 00000000 		.quad	0
 5716      00000000 
 5717 b0e0 00000000 		.quad	.L201
 5717      00000000 
 5718 b0e8 00000000 		.quad	0
 5718      00000000 
 5719 b0f0 00000000 		.quad	.L201
 5719      00000000 
 5720 b0f8 00000000 		.quad	0
 5720      00000000 
 5721 b100 00000000 		.quad	.L201
 5721      00000000 
 5722 b108 00000000 		.quad	0
 5722      00000000 
 5723 b110 00000000 		.quad	.L201
 5723      00000000 
 5724 b118 00000000 		.quad	0
 5724      00000000 
 5725 b120 00000000 		.quad	.L201
 5725      00000000 
 5726 b128 00000000 		.quad	0
 5726      00000000 
 5727 b130 00000000 		.quad	.L201
 5727      00000000 
 5728 b138 00000000 		.quad	0
 5728      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 201


 5729 b140 00000000 		.quad	.L201
 5729      00000000 
 5730 b148 00000000 		.quad	0
 5730      00000000 
 5731 b150 00000000 		.quad	.L201
 5731      00000000 
 5732 b158 00000000 		.quad	0
 5732      00000000 
 5733 b160 00000000 		.quad	.L201
 5733      00000000 
 5734 b168 00000000 		.quad	0
 5734      00000000 
 5735 b170 00000000 		.quad	.L201
 5735      00000000 
 5736 b178 00000000 		.quad	0
 5736      00000000 
 5737 b180 00000000 		.quad	.L201
 5737      00000000 
 5738 b188 00000000 		.quad	0
 5738      00000000 
 5739 b190 00000000 		.quad	.L201
 5739      00000000 
 5740 b198 00000000 		.quad	0
 5740      00000000 
 5741 b1a0 00000000 		.quad	.L201
 5741      00000000 
 5742 b1a8 00000000 		.quad	0
 5742      00000000 
 5743 b1b0 00000000 		.quad	.L201
 5743      00000000 
 5744 b1b8 00000000 		.quad	0
 5744      00000000 
 5745 b1c0 00000000 		.quad	.L201
 5745      00000000 
 5746 b1c8 00000000 		.quad	0
 5746      00000000 
 5747 b1d0 00000000 		.quad	.L201
 5747      00000000 
 5748 b1d8 00000000 		.quad	0
 5748      00000000 
 5749 b1e0 00000000 		.quad	.L201
 5749      00000000 
 5750 b1e8 00000000 		.quad	0
 5750      00000000 
 5751 b1f0 00000000 		.quad	.L201
 5751      00000000 
 5752 b1f8 00000000 		.quad	0
 5752      00000000 
 5753 b200 00000000 		.quad	.L201
 5753      00000000 
 5754 b208 00000000 		.quad	0
 5754      00000000 
 5755 b210 00000000 		.quad	.L201
 5755      00000000 
 5756 b218 00000000 		.quad	0
 5756      00000000 
 5757 b220 00000000 		.quad	.L201
GAS LISTING /tmp/cc15eBE3.s 			page 202


 5757      00000000 
 5758 b228 00000000 		.quad	0
 5758      00000000 
 5759 b230 00000000 		.quad	.L201
 5759      00000000 
 5760 b238 00000000 		.quad	0
 5760      00000000 
 5761 b240 00000000 		.quad	.L201
 5761      00000000 
 5762 b248 00000000 		.quad	0
 5762      00000000 
 5763 b250 00000000 		.quad	.L201
 5763      00000000 
 5764 b258 00000000 		.quad	0
 5764      00000000 
 5765 b260 00000000 		.quad	.L201
 5765      00000000 
 5766 b268 00000000 		.quad	0
 5766      00000000 
 5767 b270 00000000 		.quad	.L201
 5767      00000000 
 5768 b278 00000000 		.quad	0
 5768      00000000 
 5769 b280 00000000 		.quad	.L201
 5769      00000000 
 5770 b288 00000000 		.quad	0
 5770      00000000 
 5771 b290 00000000 		.quad	.L201
 5771      00000000 
 5772 b298 00000000 		.quad	0
 5772      00000000 
 5773 b2a0 00000000 		.quad	.L201
 5773      00000000 
 5774 b2a8 00000000 		.quad	0
 5774      00000000 
 5775 b2b0 00000000 		.quad	.L201
 5775      00000000 
 5776 b2b8 00000000 		.quad	0
 5776      00000000 
 5777              		.align 16
 5778              	.LC26:
 5779 b2c0 00000000 		.quad	.L204
 5779      00000000 
 5780 b2c8 00000000 		.quad	0
 5780      00000000 
 5781 b2d0 00000000 		.quad	.L205
 5781      00000000 
 5782 b2d8 00000000 		.quad	0
 5782      00000000 
 5783 b2e0 00000000 		.quad	.L205
 5783      00000000 
 5784 b2e8 00000000 		.quad	0
 5784      00000000 
 5785 b2f0 00000000 		.quad	.L205
 5785      00000000 
 5786 b2f8 00000000 		.quad	0
 5786      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 203


 5787 b300 00000000 		.quad	.L205
 5787      00000000 
 5788 b308 00000000 		.quad	0
 5788      00000000 
 5789 b310 00000000 		.quad	.L205
 5789      00000000 
 5790 b318 00000000 		.quad	0
 5790      00000000 
 5791 b320 00000000 		.quad	.L205
 5791      00000000 
 5792 b328 00000000 		.quad	0
 5792      00000000 
 5793 b330 00000000 		.quad	.L205
 5793      00000000 
 5794 b338 00000000 		.quad	0
 5794      00000000 
 5795 b340 00000000 		.quad	.L205
 5795      00000000 
 5796 b348 00000000 		.quad	0
 5796      00000000 
 5797 b350 00000000 		.quad	.L205
 5797      00000000 
 5798 b358 00000000 		.quad	0
 5798      00000000 
 5799 b360 00000000 		.quad	.L205
 5799      00000000 
 5800 b368 00000000 		.quad	0
 5800      00000000 
 5801 b370 00000000 		.quad	.L205
 5801      00000000 
 5802 b378 00000000 		.quad	0
 5802      00000000 
 5803 b380 00000000 		.quad	.L205
 5803      00000000 
 5804 b388 00000000 		.quad	0
 5804      00000000 
 5805 b390 00000000 		.quad	.L205
 5805      00000000 
 5806 b398 00000000 		.quad	0
 5806      00000000 
 5807 b3a0 00000000 		.quad	.L205
 5807      00000000 
 5808 b3a8 00000000 		.quad	0
 5808      00000000 
 5809 b3b0 00000000 		.quad	.L205
 5809      00000000 
 5810 b3b8 00000000 		.quad	0
 5810      00000000 
 5811 b3c0 00000000 		.quad	.L205
 5811      00000000 
 5812 b3c8 00000000 		.quad	0
 5812      00000000 
 5813 b3d0 00000000 		.quad	.L205
 5813      00000000 
 5814 b3d8 00000000 		.quad	0
 5814      00000000 
 5815 b3e0 00000000 		.quad	.L205
GAS LISTING /tmp/cc15eBE3.s 			page 204


 5815      00000000 
 5816 b3e8 00000000 		.quad	0
 5816      00000000 
 5817 b3f0 00000000 		.quad	.L205
 5817      00000000 
 5818 b3f8 00000000 		.quad	0
 5818      00000000 
 5819 b400 00000000 		.quad	.L205
 5819      00000000 
 5820 b408 00000000 		.quad	0
 5820      00000000 
 5821 b410 00000000 		.quad	.L205
 5821      00000000 
 5822 b418 00000000 		.quad	0
 5822      00000000 
 5823 b420 00000000 		.quad	.L205
 5823      00000000 
 5824 b428 00000000 		.quad	0
 5824      00000000 
 5825 b430 00000000 		.quad	.L205
 5825      00000000 
 5826 b438 00000000 		.quad	0
 5826      00000000 
 5827 b440 00000000 		.quad	.L205
 5827      00000000 
 5828 b448 00000000 		.quad	0
 5828      00000000 
 5829 b450 00000000 		.quad	.L205
 5829      00000000 
 5830 b458 00000000 		.quad	0
 5830      00000000 
 5831 b460 00000000 		.quad	.L205
 5831      00000000 
 5832 b468 00000000 		.quad	0
 5832      00000000 
 5833 b470 00000000 		.quad	.L205
 5833      00000000 
 5834 b478 00000000 		.quad	0
 5834      00000000 
 5835 b480 00000000 		.quad	.L205
 5835      00000000 
 5836 b488 00000000 		.quad	0
 5836      00000000 
 5837 b490 00000000 		.quad	.L205
 5837      00000000 
 5838 b498 00000000 		.quad	0
 5838      00000000 
 5839 b4a0 00000000 		.quad	.L205
 5839      00000000 
 5840 b4a8 00000000 		.quad	0
 5840      00000000 
 5841 b4b0 00000000 		.quad	.L205
 5841      00000000 
 5842 b4b8 00000000 		.quad	0
 5842      00000000 
 5843 b4c0 00000000 		.quad	.L205
 5843      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 205


 5844 b4c8 00000000 		.quad	0
 5844      00000000 
 5845 b4d0 00000000 		.quad	.L205
 5845      00000000 
 5846 b4d8 00000000 		.quad	0
 5846      00000000 
 5847 b4e0 00000000 		.quad	.L205
 5847      00000000 
 5848 b4e8 00000000 		.quad	0
 5848      00000000 
 5849 b4f0 00000000 		.quad	.L205
 5849      00000000 
 5850 b4f8 00000000 		.quad	0
 5850      00000000 
 5851 b500 00000000 		.quad	.L205
 5851      00000000 
 5852 b508 00000000 		.quad	0
 5852      00000000 
 5853 b510 00000000 		.quad	.L206
 5853      00000000 
 5854 b518 00000000 		.quad	0
 5854      00000000 
 5855 b520 00000000 		.quad	.L205
 5855      00000000 
 5856 b528 00000000 		.quad	0
 5856      00000000 
 5857 b530 00000000 		.quad	.L205
 5857      00000000 
 5858 b538 00000000 		.quad	0
 5858      00000000 
 5859 b540 00000000 		.quad	.L205
 5859      00000000 
 5860 b548 00000000 		.quad	0
 5860      00000000 
 5861 b550 00000000 		.quad	.L205
 5861      00000000 
 5862 b558 00000000 		.quad	0
 5862      00000000 
 5863 b560 00000000 		.quad	.L205
 5863      00000000 
 5864 b568 00000000 		.quad	0
 5864      00000000 
 5865 b570 00000000 		.quad	.L205
 5865      00000000 
 5866 b578 00000000 		.quad	0
 5866      00000000 
 5867 b580 00000000 		.quad	.L205
 5867      00000000 
 5868 b588 00000000 		.quad	0
 5868      00000000 
 5869 b590 00000000 		.quad	.L205
 5869      00000000 
 5870 b598 00000000 		.quad	0
 5870      00000000 
 5871 b5a0 00000000 		.quad	.L205
 5871      00000000 
 5872 b5a8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 206


 5872      00000000 
 5873 b5b0 00000000 		.quad	.L205
 5873      00000000 
 5874 b5b8 00000000 		.quad	0
 5874      00000000 
 5875 b5c0 00000000 		.quad	.L205
 5875      00000000 
 5876 b5c8 00000000 		.quad	0
 5876      00000000 
 5877 b5d0 00000000 		.quad	.L205
 5877      00000000 
 5878 b5d8 00000000 		.quad	0
 5878      00000000 
 5879 b5e0 00000000 		.quad	.L205
 5879      00000000 
 5880 b5e8 00000000 		.quad	0
 5880      00000000 
 5881 b5f0 00000000 		.quad	.L205
 5881      00000000 
 5882 b5f8 00000000 		.quad	0
 5882      00000000 
 5883 b600 00000000 		.quad	.L207
 5883      00000000 
 5884 b608 00000000 		.quad	0
 5884      00000000 
 5885 b610 00000000 		.quad	.L205
 5885      00000000 
 5886 b618 00000000 		.quad	0
 5886      00000000 
 5887 b620 00000000 		.quad	.L205
 5887      00000000 
 5888 b628 00000000 		.quad	0
 5888      00000000 
 5889 b630 00000000 		.quad	.L205
 5889      00000000 
 5890 b638 00000000 		.quad	0
 5890      00000000 
 5891 b640 00000000 		.quad	.L205
 5891      00000000 
 5892 b648 00000000 		.quad	0
 5892      00000000 
 5893 b650 00000000 		.quad	.L205
 5893      00000000 
 5894 b658 00000000 		.quad	0
 5894      00000000 
 5895 b660 00000000 		.quad	.L205
 5895      00000000 
 5896 b668 00000000 		.quad	0
 5896      00000000 
 5897 b670 00000000 		.quad	.L205
 5897      00000000 
 5898 b678 00000000 		.quad	0
 5898      00000000 
 5899 b680 00000000 		.quad	.L205
 5899      00000000 
 5900 b688 00000000 		.quad	0
 5900      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 207


 5901 b690 00000000 		.quad	.L205
 5901      00000000 
 5902 b698 00000000 		.quad	0
 5902      00000000 
 5903 b6a0 00000000 		.quad	.L205
 5903      00000000 
 5904 b6a8 00000000 		.quad	0
 5904      00000000 
 5905 b6b0 00000000 		.quad	.L205
 5905      00000000 
 5906 b6b8 00000000 		.quad	0
 5906      00000000 
 5907 b6c0 00000000 		.quad	.L205
 5907      00000000 
 5908 b6c8 00000000 		.quad	0
 5908      00000000 
 5909 b6d0 00000000 		.quad	.L205
 5909      00000000 
 5910 b6d8 00000000 		.quad	0
 5910      00000000 
 5911 b6e0 00000000 		.quad	.L205
 5911      00000000 
 5912 b6e8 00000000 		.quad	0
 5912      00000000 
 5913 b6f0 00000000 		.quad	.L205
 5913      00000000 
 5914 b6f8 00000000 		.quad	0
 5914      00000000 
 5915 b700 00000000 		.quad	.L205
 5915      00000000 
 5916 b708 00000000 		.quad	0
 5916      00000000 
 5917 b710 00000000 		.quad	.L205
 5917      00000000 
 5918 b718 00000000 		.quad	0
 5918      00000000 
 5919 b720 00000000 		.quad	.L205
 5919      00000000 
 5920 b728 00000000 		.quad	0
 5920      00000000 
 5921 b730 00000000 		.quad	.L205
 5921      00000000 
 5922 b738 00000000 		.quad	0
 5922      00000000 
 5923 b740 00000000 		.quad	.L205
 5923      00000000 
 5924 b748 00000000 		.quad	0
 5924      00000000 
 5925 b750 00000000 		.quad	.L205
 5925      00000000 
 5926 b758 00000000 		.quad	0
 5926      00000000 
 5927 b760 00000000 		.quad	.L205
 5927      00000000 
 5928 b768 00000000 		.quad	0
 5928      00000000 
 5929 b770 00000000 		.quad	.L205
GAS LISTING /tmp/cc15eBE3.s 			page 208


 5929      00000000 
 5930 b778 00000000 		.quad	0
 5930      00000000 
 5931 b780 00000000 		.quad	.L205
 5931      00000000 
 5932 b788 00000000 		.quad	0
 5932      00000000 
 5933 b790 00000000 		.quad	.L205
 5933      00000000 
 5934 b798 00000000 		.quad	0
 5934      00000000 
 5935 b7a0 00000000 		.quad	.L205
 5935      00000000 
 5936 b7a8 00000000 		.quad	0
 5936      00000000 
 5937 b7b0 00000000 		.quad	.L205
 5937      00000000 
 5938 b7b8 00000000 		.quad	0
 5938      00000000 
 5939 b7c0 00000000 		.quad	.L205
 5939      00000000 
 5940 b7c8 00000000 		.quad	0
 5940      00000000 
 5941 b7d0 00000000 		.quad	.L205
 5941      00000000 
 5942 b7d8 00000000 		.quad	0
 5942      00000000 
 5943 b7e0 00000000 		.quad	.L205
 5943      00000000 
 5944 b7e8 00000000 		.quad	0
 5944      00000000 
 5945 b7f0 00000000 		.quad	.L205
 5945      00000000 
 5946 b7f8 00000000 		.quad	0
 5946      00000000 
 5947 b800 00000000 		.quad	.L205
 5947      00000000 
 5948 b808 00000000 		.quad	0
 5948      00000000 
 5949 b810 00000000 		.quad	.L205
 5949      00000000 
 5950 b818 00000000 		.quad	0
 5950      00000000 
 5951 b820 00000000 		.quad	.L205
 5951      00000000 
 5952 b828 00000000 		.quad	0
 5952      00000000 
 5953 b830 00000000 		.quad	.L205
 5953      00000000 
 5954 b838 00000000 		.quad	0
 5954      00000000 
 5955 b840 00000000 		.quad	.L205
 5955      00000000 
 5956 b848 00000000 		.quad	0
 5956      00000000 
 5957 b850 00000000 		.quad	.L205
 5957      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 209


 5958 b858 00000000 		.quad	0
 5958      00000000 
 5959 b860 00000000 		.quad	.L205
 5959      00000000 
 5960 b868 00000000 		.quad	0
 5960      00000000 
 5961 b870 00000000 		.quad	.L205
 5961      00000000 
 5962 b878 00000000 		.quad	0
 5962      00000000 
 5963 b880 00000000 		.quad	.L205
 5963      00000000 
 5964 b888 00000000 		.quad	0
 5964      00000000 
 5965 b890 00000000 		.quad	.L205
 5965      00000000 
 5966 b898 00000000 		.quad	0
 5966      00000000 
 5967 b8a0 00000000 		.quad	.L205
 5967      00000000 
 5968 b8a8 00000000 		.quad	0
 5968      00000000 
 5969 b8b0 00000000 		.quad	.L205
 5969      00000000 
 5970 b8b8 00000000 		.quad	0
 5970      00000000 
 5971 b8c0 00000000 		.quad	.L205
 5971      00000000 
 5972 b8c8 00000000 		.quad	0
 5972      00000000 
 5973 b8d0 00000000 		.quad	.L205
 5973      00000000 
 5974 b8d8 00000000 		.quad	0
 5974      00000000 
 5975 b8e0 00000000 		.quad	.L205
 5975      00000000 
 5976 b8e8 00000000 		.quad	0
 5976      00000000 
 5977 b8f0 00000000 		.quad	.L205
 5977      00000000 
 5978 b8f8 00000000 		.quad	0
 5978      00000000 
 5979 b900 00000000 		.quad	.L205
 5979      00000000 
 5980 b908 00000000 		.quad	0
 5980      00000000 
 5981 b910 00000000 		.quad	.L205
 5981      00000000 
 5982 b918 00000000 		.quad	0
 5982      00000000 
 5983 b920 00000000 		.quad	.L205
 5983      00000000 
 5984 b928 00000000 		.quad	0
 5984      00000000 
 5985 b930 00000000 		.quad	.L205
 5985      00000000 
 5986 b938 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 210


 5986      00000000 
 5987 b940 00000000 		.quad	.L205
 5987      00000000 
 5988 b948 00000000 		.quad	0
 5988      00000000 
 5989 b950 00000000 		.quad	.L205
 5989      00000000 
 5990 b958 00000000 		.quad	0
 5990      00000000 
 5991 b960 00000000 		.quad	.L205
 5991      00000000 
 5992 b968 00000000 		.quad	0
 5992      00000000 
 5993 b970 00000000 		.quad	.L205
 5993      00000000 
 5994 b978 00000000 		.quad	0
 5994      00000000 
 5995 b980 00000000 		.quad	.L205
 5995      00000000 
 5996 b988 00000000 		.quad	0
 5996      00000000 
 5997 b990 00000000 		.quad	.L205
 5997      00000000 
 5998 b998 00000000 		.quad	0
 5998      00000000 
 5999              		.align 16
 6000              	.LC27:
 6001 b9a0 00000000 		.quad	.L208
 6001      00000000 
 6002 b9a8 00000000 		.quad	0
 6002      00000000 
 6003 b9b0 00000000 		.quad	.L209
 6003      00000000 
 6004 b9b8 00000000 		.quad	0
 6004      00000000 
 6005 b9c0 00000000 		.quad	.L210
 6005      00000000 
 6006 b9c8 00000000 		.quad	0
 6006      00000000 
 6007 b9d0 00000000 		.quad	.L211
 6007      00000000 
 6008 b9d8 00000000 		.quad	0
 6008      00000000 
 6009 b9e0 00000000 		.quad	.L210
 6009      00000000 
 6010 b9e8 00000000 		.quad	0
 6010      00000000 
 6011 b9f0 00000000 		.quad	.L209
 6011      00000000 
 6012 b9f8 00000000 		.quad	0
 6012      00000000 
 6013 ba00 00000000 		.quad	.L210
 6013      00000000 
 6014 ba08 00000000 		.quad	0
 6014      00000000 
 6015 ba10 00000000 		.quad	.L210
 6015      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 211


 6016 ba18 00000000 		.quad	0
 6016      00000000 
 6017 ba20 00000000 		.quad	.L210
 6017      00000000 
 6018 ba28 00000000 		.quad	0
 6018      00000000 
 6019 ba30 00000000 		.quad	.L210
 6019      00000000 
 6020 ba38 00000000 		.quad	0
 6020      00000000 
 6021 ba40 00000000 		.quad	.L210
 6021      00000000 
 6022 ba48 00000000 		.quad	0
 6022      00000000 
 6023 ba50 00000000 		.quad	.L210
 6023      00000000 
 6024 ba58 00000000 		.quad	0
 6024      00000000 
 6025 ba60 00000000 		.quad	.L210
 6025      00000000 
 6026 ba68 00000000 		.quad	0
 6026      00000000 
 6027 ba70 00000000 		.quad	.L209
 6027      00000000 
 6028 ba78 00000000 		.quad	0
 6028      00000000 
 6029 ba80 00000000 		.quad	.L209
 6029      00000000 
 6030 ba88 00000000 		.quad	0
 6030      00000000 
 6031 ba90 00000000 		.quad	.L209
 6031      00000000 
 6032 ba98 00000000 		.quad	0
 6032      00000000 
 6033 baa0 00000000 		.quad	.L210
 6033      00000000 
 6034 baa8 00000000 		.quad	0
 6034      00000000 
 6035 bab0 00000000 		.quad	.L210
 6035      00000000 
 6036 bab8 00000000 		.quad	0
 6036      00000000 
 6037 bac0 00000000 		.quad	.L210
 6037      00000000 
 6038 bac8 00000000 		.quad	0
 6038      00000000 
 6039 bad0 00000000 		.quad	.L210
 6039      00000000 
 6040 bad8 00000000 		.quad	0
 6040      00000000 
 6041 bae0 00000000 		.quad	.L209
 6041      00000000 
 6042 bae8 00000000 		.quad	0
 6042      00000000 
 6043 baf0 00000000 		.quad	.L209
 6043      00000000 
 6044 baf8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 212


 6044      00000000 
 6045 bb00 00000000 		.quad	.L209
 6045      00000000 
 6046 bb08 00000000 		.quad	0
 6046      00000000 
 6047 bb10 00000000 		.quad	.L209
 6047      00000000 
 6048 bb18 00000000 		.quad	0
 6048      00000000 
 6049 bb20 00000000 		.quad	.L210
 6049      00000000 
 6050 bb28 00000000 		.quad	0
 6050      00000000 
 6051 bb30 00000000 		.quad	.L210
 6051      00000000 
 6052 bb38 00000000 		.quad	0
 6052      00000000 
 6053 bb40 00000000 		.quad	.L210
 6053      00000000 
 6054 bb48 00000000 		.quad	0
 6054      00000000 
 6055 bb50 00000000 		.quad	.L210
 6055      00000000 
 6056 bb58 00000000 		.quad	0
 6056      00000000 
 6057 bb60 00000000 		.quad	.L209
 6057      00000000 
 6058 bb68 00000000 		.quad	0
 6058      00000000 
 6059 bb70 00000000 		.quad	.L209
 6059      00000000 
 6060 bb78 00000000 		.quad	0
 6060      00000000 
 6061 bb80 00000000 		.quad	.L209
 6061      00000000 
 6062 bb88 00000000 		.quad	0
 6062      00000000 
 6063 bb90 00000000 		.quad	.L209
 6063      00000000 
 6064 bb98 00000000 		.quad	0
 6064      00000000 
 6065 bba0 00000000 		.quad	.L210
 6065      00000000 
 6066 bba8 00000000 		.quad	0
 6066      00000000 
 6067 bbb0 00000000 		.quad	.L212
 6067      00000000 
 6068 bbb8 00000000 		.quad	0
 6068      00000000 
 6069 bbc0 00000000 		.quad	.L210
 6069      00000000 
 6070 bbc8 00000000 		.quad	0
 6070      00000000 
 6071 bbd0 00000000 		.quad	.L210
 6071      00000000 
 6072 bbd8 00000000 		.quad	0
 6072      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 213


 6073 bbe0 00000000 		.quad	.L210
 6073      00000000 
 6074 bbe8 00000000 		.quad	0
 6074      00000000 
 6075 bbf0 00000000 		.quad	.L213
 6075      00000000 
 6076 bbf8 00000000 		.quad	0
 6076      00000000 
 6077 bc00 00000000 		.quad	.L214
 6077      00000000 
 6078 bc08 00000000 		.quad	0
 6078      00000000 
 6079 bc10 00000000 		.quad	.L210
 6079      00000000 
 6080 bc18 00000000 		.quad	0
 6080      00000000 
 6081 bc20 00000000 		.quad	.L209
 6081      00000000 
 6082 bc28 00000000 		.quad	0
 6082      00000000 
 6083 bc30 00000000 		.quad	.L209
 6083      00000000 
 6084 bc38 00000000 		.quad	0
 6084      00000000 
 6085 bc40 00000000 		.quad	.L210
 6085      00000000 
 6086 bc48 00000000 		.quad	0
 6086      00000000 
 6087 bc50 00000000 		.quad	.L210
 6087      00000000 
 6088 bc58 00000000 		.quad	0
 6088      00000000 
 6089 bc60 00000000 		.quad	.L210
 6089      00000000 
 6090 bc68 00000000 		.quad	0
 6090      00000000 
 6091 bc70 00000000 		.quad	.L210
 6091      00000000 
 6092 bc78 00000000 		.quad	0
 6092      00000000 
 6093 bc80 00000000 		.quad	.L210
 6093      00000000 
 6094 bc88 00000000 		.quad	0
 6094      00000000 
 6095 bc90 00000000 		.quad	.L210
 6095      00000000 
 6096 bc98 00000000 		.quad	0
 6096      00000000 
 6097 bca0 00000000 		.quad	.L215
 6097      00000000 
 6098 bca8 00000000 		.quad	0
 6098      00000000 
 6099 bcb0 00000000 		.quad	.L210
 6099      00000000 
 6100 bcb8 00000000 		.quad	0
 6100      00000000 
 6101 bcc0 00000000 		.quad	.L210
GAS LISTING /tmp/cc15eBE3.s 			page 214


 6101      00000000 
 6102 bcc8 00000000 		.quad	0
 6102      00000000 
 6103 bcd0 00000000 		.quad	.L210
 6103      00000000 
 6104 bcd8 00000000 		.quad	0
 6104      00000000 
 6105 bce0 00000000 		.quad	.L210
 6105      00000000 
 6106 bce8 00000000 		.quad	0
 6106      00000000 
 6107 bcf0 00000000 		.quad	.L210
 6107      00000000 
 6108 bcf8 00000000 		.quad	0
 6108      00000000 
 6109 bd00 00000000 		.quad	.L210
 6109      00000000 
 6110 bd08 00000000 		.quad	0
 6110      00000000 
 6111 bd10 00000000 		.quad	.L216
 6111      00000000 
 6112 bd18 00000000 		.quad	0
 6112      00000000 
 6113 bd20 00000000 		.quad	.L217
 6113      00000000 
 6114 bd28 00000000 		.quad	0
 6114      00000000 
 6115 bd30 00000000 		.quad	.L210
 6115      00000000 
 6116 bd38 00000000 		.quad	0
 6116      00000000 
 6117 bd40 00000000 		.quad	.L218
 6117      00000000 
 6118 bd48 00000000 		.quad	0
 6118      00000000 
 6119 bd50 00000000 		.quad	.L209
 6119      00000000 
 6120 bd58 00000000 		.quad	0
 6120      00000000 
 6121 bd60 00000000 		.quad	.L209
 6121      00000000 
 6122 bd68 00000000 		.quad	0
 6122      00000000 
 6123 bd70 00000000 		.quad	.L209
 6123      00000000 
 6124 bd78 00000000 		.quad	0
 6124      00000000 
 6125 bd80 00000000 		.quad	.L209
 6125      00000000 
 6126 bd88 00000000 		.quad	0
 6126      00000000 
 6127 bd90 00000000 		.quad	.L209
 6127      00000000 
 6128 bd98 00000000 		.quad	0
 6128      00000000 
 6129 bda0 00000000 		.quad	.L209
 6129      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 215


 6130 bda8 00000000 		.quad	0
 6130      00000000 
 6131 bdb0 00000000 		.quad	.L209
 6131      00000000 
 6132 bdb8 00000000 		.quad	0
 6132      00000000 
 6133 bdc0 00000000 		.quad	.L209
 6133      00000000 
 6134 bdc8 00000000 		.quad	0
 6134      00000000 
 6135 bdd0 00000000 		.quad	.L210
 6135      00000000 
 6136 bdd8 00000000 		.quad	0
 6136      00000000 
 6137 bde0 00000000 		.quad	.L210
 6137      00000000 
 6138 bde8 00000000 		.quad	0
 6138      00000000 
 6139 bdf0 00000000 		.quad	.L210
 6139      00000000 
 6140 bdf8 00000000 		.quad	0
 6140      00000000 
 6141 be00 00000000 		.quad	.L209
 6141      00000000 
 6142 be08 00000000 		.quad	0
 6142      00000000 
 6143 be10 00000000 		.quad	.L209
 6143      00000000 
 6144 be18 00000000 		.quad	0
 6144      00000000 
 6145 be20 00000000 		.quad	.L209
 6145      00000000 
 6146 be28 00000000 		.quad	0
 6146      00000000 
 6147 be30 00000000 		.quad	.L209
 6147      00000000 
 6148 be38 00000000 		.quad	0
 6148      00000000 
 6149 be40 00000000 		.quad	.L209
 6149      00000000 
 6150 be48 00000000 		.quad	0
 6150      00000000 
 6151 be50 00000000 		.quad	.L210
 6151      00000000 
 6152 be58 00000000 		.quad	0
 6152      00000000 
 6153 be60 00000000 		.quad	.L210
 6153      00000000 
 6154 be68 00000000 		.quad	0
 6154      00000000 
 6155 be70 00000000 		.quad	.L210
 6155      00000000 
 6156 be78 00000000 		.quad	0
 6156      00000000 
 6157 be80 00000000 		.quad	.L210
 6157      00000000 
 6158 be88 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 216


 6158      00000000 
 6159 be90 00000000 		.quad	.L210
 6159      00000000 
 6160 be98 00000000 		.quad	0
 6160      00000000 
 6161 bea0 00000000 		.quad	.L210
 6161      00000000 
 6162 bea8 00000000 		.quad	0
 6162      00000000 
 6163 beb0 00000000 		.quad	.L210
 6163      00000000 
 6164 beb8 00000000 		.quad	0
 6164      00000000 
 6165 bec0 00000000 		.quad	.L209
 6165      00000000 
 6166 bec8 00000000 		.quad	0
 6166      00000000 
 6167 bed0 00000000 		.quad	.L210
 6167      00000000 
 6168 bed8 00000000 		.quad	0
 6168      00000000 
 6169 bee0 00000000 		.quad	.L210
 6169      00000000 
 6170 bee8 00000000 		.quad	0
 6170      00000000 
 6171 bef0 00000000 		.quad	.L210
 6171      00000000 
 6172 bef8 00000000 		.quad	0
 6172      00000000 
 6173 bf00 00000000 		.quad	.L210
 6173      00000000 
 6174 bf08 00000000 		.quad	0
 6174      00000000 
 6175 bf10 00000000 		.quad	.L209
 6175      00000000 
 6176 bf18 00000000 		.quad	0
 6176      00000000 
 6177 bf20 00000000 		.quad	.L209
 6177      00000000 
 6178 bf28 00000000 		.quad	0
 6178      00000000 
 6179 bf30 00000000 		.quad	.L210
 6179      00000000 
 6180 bf38 00000000 		.quad	0
 6180      00000000 
 6181 bf40 00000000 		.quad	.L209
 6181      00000000 
 6182 bf48 00000000 		.quad	0
 6182      00000000 
 6183 bf50 00000000 		.quad	.L209
 6183      00000000 
 6184 bf58 00000000 		.quad	0
 6184      00000000 
 6185 bf60 00000000 		.quad	.L209
 6185      00000000 
 6186 bf68 00000000 		.quad	0
 6186      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 217


 6187 bf70 00000000 		.quad	.L209
 6187      00000000 
 6188 bf78 00000000 		.quad	0
 6188      00000000 
 6189 bf80 00000000 		.quad	.L209
 6189      00000000 
 6190 bf88 00000000 		.quad	0
 6190      00000000 
 6191 bf90 00000000 		.quad	.L209
 6191      00000000 
 6192 bf98 00000000 		.quad	0
 6192      00000000 
 6193 bfa0 00000000 		.quad	.L209
 6193      00000000 
 6194 bfa8 00000000 		.quad	0
 6194      00000000 
 6195 bfb0 00000000 		.quad	.L209
 6195      00000000 
 6196 bfb8 00000000 		.quad	0
 6196      00000000 
 6197 bfc0 00000000 		.quad	.L209
 6197      00000000 
 6198 bfc8 00000000 		.quad	0
 6198      00000000 
 6199 bfd0 00000000 		.quad	.L209
 6199      00000000 
 6200 bfd8 00000000 		.quad	0
 6200      00000000 
 6201 bfe0 00000000 		.quad	.L209
 6201      00000000 
 6202 bfe8 00000000 		.quad	0
 6202      00000000 
 6203 bff0 00000000 		.quad	.L209
 6203      00000000 
 6204 bff8 00000000 		.quad	0
 6204      00000000 
 6205 c000 00000000 		.quad	.L209
 6205      00000000 
 6206 c008 00000000 		.quad	0
 6206      00000000 
 6207 c010 00000000 		.quad	.L209
 6207      00000000 
 6208 c018 00000000 		.quad	0
 6208      00000000 
 6209 c020 00000000 		.quad	.L209
 6209      00000000 
 6210 c028 00000000 		.quad	0
 6210      00000000 
 6211 c030 00000000 		.quad	.L209
 6211      00000000 
 6212 c038 00000000 		.quad	0
 6212      00000000 
 6213 c040 00000000 		.quad	.L209
 6213      00000000 
 6214 c048 00000000 		.quad	0
 6214      00000000 
 6215 c050 00000000 		.quad	.L209
GAS LISTING /tmp/cc15eBE3.s 			page 218


 6215      00000000 
 6216 c058 00000000 		.quad	0
 6216      00000000 
 6217 c060 00000000 		.quad	.L209
 6217      00000000 
 6218 c068 00000000 		.quad	0
 6218      00000000 
 6219 c070 00000000 		.quad	.L209
 6219      00000000 
 6220 c078 00000000 		.quad	0
 6220      00000000 
 6221              		.align 16
 6222              	.LC28:
 6223 c080 00000000 		.quad	.L219
 6223      00000000 
 6224 c088 00000000 		.quad	0
 6224      00000000 
 6225 c090 00000000 		.quad	.L219
 6225      00000000 
 6226 c098 00000000 		.quad	0
 6226      00000000 
 6227 c0a0 00000000 		.quad	.L219
 6227      00000000 
 6228 c0a8 00000000 		.quad	0
 6228      00000000 
 6229 c0b0 00000000 		.quad	.L219
 6229      00000000 
 6230 c0b8 00000000 		.quad	0
 6230      00000000 
 6231 c0c0 00000000 		.quad	.L219
 6231      00000000 
 6232 c0c8 00000000 		.quad	0
 6232      00000000 
 6233 c0d0 00000000 		.quad	.L219
 6233      00000000 
 6234 c0d8 00000000 		.quad	0
 6234      00000000 
 6235 c0e0 00000000 		.quad	.L219
 6235      00000000 
 6236 c0e8 00000000 		.quad	0
 6236      00000000 
 6237 c0f0 00000000 		.quad	.L219
 6237      00000000 
 6238 c0f8 00000000 		.quad	0
 6238      00000000 
 6239 c100 00000000 		.quad	.L219
 6239      00000000 
 6240 c108 00000000 		.quad	0
 6240      00000000 
 6241 c110 00000000 		.quad	.L219
 6241      00000000 
 6242 c118 00000000 		.quad	0
 6242      00000000 
 6243 c120 00000000 		.quad	.L219
 6243      00000000 
 6244 c128 00000000 		.quad	0
 6244      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 219


 6245 c130 00000000 		.quad	.L219
 6245      00000000 
 6246 c138 00000000 		.quad	0
 6246      00000000 
 6247 c140 00000000 		.quad	.L219
 6247      00000000 
 6248 c148 00000000 		.quad	0
 6248      00000000 
 6249 c150 00000000 		.quad	.L219
 6249      00000000 
 6250 c158 00000000 		.quad	0
 6250      00000000 
 6251 c160 00000000 		.quad	.L219
 6251      00000000 
 6252 c168 00000000 		.quad	0
 6252      00000000 
 6253 c170 00000000 		.quad	.L219
 6253      00000000 
 6254 c178 00000000 		.quad	0
 6254      00000000 
 6255 c180 00000000 		.quad	.L219
 6255      00000000 
 6256 c188 00000000 		.quad	0
 6256      00000000 
 6257 c190 00000000 		.quad	.L219
 6257      00000000 
 6258 c198 00000000 		.quad	0
 6258      00000000 
 6259 c1a0 00000000 		.quad	.L219
 6259      00000000 
 6260 c1a8 00000000 		.quad	0
 6260      00000000 
 6261 c1b0 00000000 		.quad	.L219
 6261      00000000 
 6262 c1b8 00000000 		.quad	0
 6262      00000000 
 6263 c1c0 00000000 		.quad	.L219
 6263      00000000 
 6264 c1c8 00000000 		.quad	0
 6264      00000000 
 6265 c1d0 00000000 		.quad	.L219
 6265      00000000 
 6266 c1d8 00000000 		.quad	0
 6266      00000000 
 6267 c1e0 00000000 		.quad	.L219
 6267      00000000 
 6268 c1e8 00000000 		.quad	0
 6268      00000000 
 6269 c1f0 00000000 		.quad	.L219
 6269      00000000 
 6270 c1f8 00000000 		.quad	0
 6270      00000000 
 6271 c200 00000000 		.quad	.L219
 6271      00000000 
 6272 c208 00000000 		.quad	0
 6272      00000000 
 6273 c210 00000000 		.quad	.L219
GAS LISTING /tmp/cc15eBE3.s 			page 220


 6273      00000000 
 6274 c218 00000000 		.quad	0
 6274      00000000 
 6275 c220 00000000 		.quad	.L219
 6275      00000000 
 6276 c228 00000000 		.quad	0
 6276      00000000 
 6277 c230 00000000 		.quad	.L219
 6277      00000000 
 6278 c238 00000000 		.quad	0
 6278      00000000 
 6279 c240 00000000 		.quad	.L219
 6279      00000000 
 6280 c248 00000000 		.quad	0
 6280      00000000 
 6281 c250 00000000 		.quad	.L219
 6281      00000000 
 6282 c258 00000000 		.quad	0
 6282      00000000 
 6283 c260 00000000 		.quad	.L219
 6283      00000000 
 6284 c268 00000000 		.quad	0
 6284      00000000 
 6285 c270 00000000 		.quad	.L219
 6285      00000000 
 6286 c278 00000000 		.quad	0
 6286      00000000 
 6287 c280 00000000 		.quad	.L219
 6287      00000000 
 6288 c288 00000000 		.quad	0
 6288      00000000 
 6289 c290 00000000 		.quad	.L220
 6289      00000000 
 6290 c298 00000000 		.quad	0
 6290      00000000 
 6291 c2a0 00000000 		.quad	.L219
 6291      00000000 
 6292 c2a8 00000000 		.quad	0
 6292      00000000 
 6293 c2b0 00000000 		.quad	.L219
 6293      00000000 
 6294 c2b8 00000000 		.quad	0
 6294      00000000 
 6295 c2c0 00000000 		.quad	.L221
 6295      00000000 
 6296 c2c8 00000000 		.quad	0
 6296      00000000 
 6297 c2d0 00000000 		.quad	.L219
 6297      00000000 
 6298 c2d8 00000000 		.quad	0
 6298      00000000 
 6299 c2e0 00000000 		.quad	.L219
 6299      00000000 
 6300 c2e8 00000000 		.quad	0
 6300      00000000 
 6301 c2f0 00000000 		.quad	.L219
 6301      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 221


 6302 c2f8 00000000 		.quad	0
 6302      00000000 
 6303 c300 00000000 		.quad	.L219
 6303      00000000 
 6304 c308 00000000 		.quad	0
 6304      00000000 
 6305 c310 00000000 		.quad	.L219
 6305      00000000 
 6306 c318 00000000 		.quad	0
 6306      00000000 
 6307 c320 00000000 		.quad	.L219
 6307      00000000 
 6308 c328 00000000 		.quad	0
 6308      00000000 
 6309 c330 00000000 		.quad	.L219
 6309      00000000 
 6310 c338 00000000 		.quad	0
 6310      00000000 
 6311 c340 00000000 		.quad	.L219
 6311      00000000 
 6312 c348 00000000 		.quad	0
 6312      00000000 
 6313 c350 00000000 		.quad	.L219
 6313      00000000 
 6314 c358 00000000 		.quad	0
 6314      00000000 
 6315 c360 00000000 		.quad	.L219
 6315      00000000 
 6316 c368 00000000 		.quad	0
 6316      00000000 
 6317 c370 00000000 		.quad	.L219
 6317      00000000 
 6318 c378 00000000 		.quad	0
 6318      00000000 
 6319 c380 00000000 		.quad	.L219
 6319      00000000 
 6320 c388 00000000 		.quad	0
 6320      00000000 
 6321 c390 00000000 		.quad	.L219
 6321      00000000 
 6322 c398 00000000 		.quad	0
 6322      00000000 
 6323 c3a0 00000000 		.quad	.L219
 6323      00000000 
 6324 c3a8 00000000 		.quad	0
 6324      00000000 
 6325 c3b0 00000000 		.quad	.L219
 6325      00000000 
 6326 c3b8 00000000 		.quad	0
 6326      00000000 
 6327 c3c0 00000000 		.quad	.L222
 6327      00000000 
 6328 c3c8 00000000 		.quad	0
 6328      00000000 
 6329 c3d0 00000000 		.quad	.L219
 6329      00000000 
 6330 c3d8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 222


 6330      00000000 
 6331 c3e0 00000000 		.quad	.L219
 6331      00000000 
 6332 c3e8 00000000 		.quad	0
 6332      00000000 
 6333 c3f0 00000000 		.quad	.L219
 6333      00000000 
 6334 c3f8 00000000 		.quad	0
 6334      00000000 
 6335 c400 00000000 		.quad	.L219
 6335      00000000 
 6336 c408 00000000 		.quad	0
 6336      00000000 
 6337 c410 00000000 		.quad	.L219
 6337      00000000 
 6338 c418 00000000 		.quad	0
 6338      00000000 
 6339 c420 00000000 		.quad	.L219
 6339      00000000 
 6340 c428 00000000 		.quad	0
 6340      00000000 
 6341 c430 00000000 		.quad	.L219
 6341      00000000 
 6342 c438 00000000 		.quad	0
 6342      00000000 
 6343 c440 00000000 		.quad	.L219
 6343      00000000 
 6344 c448 00000000 		.quad	0
 6344      00000000 
 6345 c450 00000000 		.quad	.L219
 6345      00000000 
 6346 c458 00000000 		.quad	0
 6346      00000000 
 6347 c460 00000000 		.quad	.L219
 6347      00000000 
 6348 c468 00000000 		.quad	0
 6348      00000000 
 6349 c470 00000000 		.quad	.L219
 6349      00000000 
 6350 c478 00000000 		.quad	0
 6350      00000000 
 6351 c480 00000000 		.quad	.L219
 6351      00000000 
 6352 c488 00000000 		.quad	0
 6352      00000000 
 6353 c490 00000000 		.quad	.L219
 6353      00000000 
 6354 c498 00000000 		.quad	0
 6354      00000000 
 6355 c4a0 00000000 		.quad	.L219
 6355      00000000 
 6356 c4a8 00000000 		.quad	0
 6356      00000000 
 6357 c4b0 00000000 		.quad	.L219
 6357      00000000 
 6358 c4b8 00000000 		.quad	0
 6358      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 223


 6359 c4c0 00000000 		.quad	.L219
 6359      00000000 
 6360 c4c8 00000000 		.quad	0
 6360      00000000 
 6361 c4d0 00000000 		.quad	.L219
 6361      00000000 
 6362 c4d8 00000000 		.quad	0
 6362      00000000 
 6363 c4e0 00000000 		.quad	.L219
 6363      00000000 
 6364 c4e8 00000000 		.quad	0
 6364      00000000 
 6365 c4f0 00000000 		.quad	.L219
 6365      00000000 
 6366 c4f8 00000000 		.quad	0
 6366      00000000 
 6367 c500 00000000 		.quad	.L219
 6367      00000000 
 6368 c508 00000000 		.quad	0
 6368      00000000 
 6369 c510 00000000 		.quad	.L219
 6369      00000000 
 6370 c518 00000000 		.quad	0
 6370      00000000 
 6371 c520 00000000 		.quad	.L219
 6371      00000000 
 6372 c528 00000000 		.quad	0
 6372      00000000 
 6373 c530 00000000 		.quad	.L219
 6373      00000000 
 6374 c538 00000000 		.quad	0
 6374      00000000 
 6375 c540 00000000 		.quad	.L219
 6375      00000000 
 6376 c548 00000000 		.quad	0
 6376      00000000 
 6377 c550 00000000 		.quad	.L219
 6377      00000000 
 6378 c558 00000000 		.quad	0
 6378      00000000 
 6379 c560 00000000 		.quad	.L219
 6379      00000000 
 6380 c568 00000000 		.quad	0
 6380      00000000 
 6381 c570 00000000 		.quad	.L219
 6381      00000000 
 6382 c578 00000000 		.quad	0
 6382      00000000 
 6383 c580 00000000 		.quad	.L219
 6383      00000000 
 6384 c588 00000000 		.quad	0
 6384      00000000 
 6385 c590 00000000 		.quad	.L219
 6385      00000000 
 6386 c598 00000000 		.quad	0
 6386      00000000 
 6387 c5a0 00000000 		.quad	.L219
GAS LISTING /tmp/cc15eBE3.s 			page 224


 6387      00000000 
 6388 c5a8 00000000 		.quad	0
 6388      00000000 
 6389 c5b0 00000000 		.quad	.L219
 6389      00000000 
 6390 c5b8 00000000 		.quad	0
 6390      00000000 
 6391 c5c0 00000000 		.quad	.L219
 6391      00000000 
 6392 c5c8 00000000 		.quad	0
 6392      00000000 
 6393 c5d0 00000000 		.quad	.L219
 6393      00000000 
 6394 c5d8 00000000 		.quad	0
 6394      00000000 
 6395 c5e0 00000000 		.quad	.L223
 6395      00000000 
 6396 c5e8 00000000 		.quad	0
 6396      00000000 
 6397 c5f0 00000000 		.quad	.L219
 6397      00000000 
 6398 c5f8 00000000 		.quad	0
 6398      00000000 
 6399 c600 00000000 		.quad	.L219
 6399      00000000 
 6400 c608 00000000 		.quad	0
 6400      00000000 
 6401 c610 00000000 		.quad	.L219
 6401      00000000 
 6402 c618 00000000 		.quad	0
 6402      00000000 
 6403 c620 00000000 		.quad	.L219
 6403      00000000 
 6404 c628 00000000 		.quad	0
 6404      00000000 
 6405 c630 00000000 		.quad	.L219
 6405      00000000 
 6406 c638 00000000 		.quad	0
 6406      00000000 
 6407 c640 00000000 		.quad	.L219
 6407      00000000 
 6408 c648 00000000 		.quad	0
 6408      00000000 
 6409 c650 00000000 		.quad	.L219
 6409      00000000 
 6410 c658 00000000 		.quad	0
 6410      00000000 
 6411 c660 00000000 		.quad	.L219
 6411      00000000 
 6412 c668 00000000 		.quad	0
 6412      00000000 
 6413 c670 00000000 		.quad	.L219
 6413      00000000 
 6414 c678 00000000 		.quad	0
 6414      00000000 
 6415 c680 00000000 		.quad	.L219
 6415      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 225


 6416 c688 00000000 		.quad	0
 6416      00000000 
 6417 c690 00000000 		.quad	.L219
 6417      00000000 
 6418 c698 00000000 		.quad	0
 6418      00000000 
 6419 c6a0 00000000 		.quad	.L219
 6419      00000000 
 6420 c6a8 00000000 		.quad	0
 6420      00000000 
 6421 c6b0 00000000 		.quad	.L219
 6421      00000000 
 6422 c6b8 00000000 		.quad	0
 6422      00000000 
 6423 c6c0 00000000 		.quad	.L219
 6423      00000000 
 6424 c6c8 00000000 		.quad	0
 6424      00000000 
 6425 c6d0 00000000 		.quad	.L219
 6425      00000000 
 6426 c6d8 00000000 		.quad	0
 6426      00000000 
 6427 c6e0 00000000 		.quad	.L219
 6427      00000000 
 6428 c6e8 00000000 		.quad	0
 6428      00000000 
 6429 c6f0 00000000 		.quad	.L219
 6429      00000000 
 6430 c6f8 00000000 		.quad	0
 6430      00000000 
 6431 c700 00000000 		.quad	.L219
 6431      00000000 
 6432 c708 00000000 		.quad	0
 6432      00000000 
 6433 c710 00000000 		.quad	.L219
 6433      00000000 
 6434 c718 00000000 		.quad	0
 6434      00000000 
 6435 c720 00000000 		.quad	.L219
 6435      00000000 
 6436 c728 00000000 		.quad	0
 6436      00000000 
 6437 c730 00000000 		.quad	.L219
 6437      00000000 
 6438 c738 00000000 		.quad	0
 6438      00000000 
 6439 c740 00000000 		.quad	.L219
 6439      00000000 
 6440 c748 00000000 		.quad	0
 6440      00000000 
 6441 c750 00000000 		.quad	.L219
 6441      00000000 
 6442 c758 00000000 		.quad	0
 6442      00000000 
 6443              		.align 16
 6444              	.LC29:
 6445 c760 00000000 		.quad	.L224
GAS LISTING /tmp/cc15eBE3.s 			page 226


 6445      00000000 
 6446 c768 00000000 		.quad	0
 6446      00000000 
 6447 c770 00000000 		.quad	.L224
 6447      00000000 
 6448 c778 00000000 		.quad	0
 6448      00000000 
 6449 c780 00000000 		.quad	.L224
 6449      00000000 
 6450 c788 00000000 		.quad	0
 6450      00000000 
 6451 c790 00000000 		.quad	.L224
 6451      00000000 
 6452 c798 00000000 		.quad	0
 6452      00000000 
 6453 c7a0 00000000 		.quad	.L224
 6453      00000000 
 6454 c7a8 00000000 		.quad	0
 6454      00000000 
 6455 c7b0 00000000 		.quad	.L224
 6455      00000000 
 6456 c7b8 00000000 		.quad	0
 6456      00000000 
 6457 c7c0 00000000 		.quad	.L224
 6457      00000000 
 6458 c7c8 00000000 		.quad	0
 6458      00000000 
 6459 c7d0 00000000 		.quad	.L224
 6459      00000000 
 6460 c7d8 00000000 		.quad	0
 6460      00000000 
 6461 c7e0 00000000 		.quad	.L224
 6461      00000000 
 6462 c7e8 00000000 		.quad	0
 6462      00000000 
 6463 c7f0 00000000 		.quad	.L224
 6463      00000000 
 6464 c7f8 00000000 		.quad	0
 6464      00000000 
 6465 c800 00000000 		.quad	.L224
 6465      00000000 
 6466 c808 00000000 		.quad	0
 6466      00000000 
 6467 c810 00000000 		.quad	.L224
 6467      00000000 
 6468 c818 00000000 		.quad	0
 6468      00000000 
 6469 c820 00000000 		.quad	.L224
 6469      00000000 
 6470 c828 00000000 		.quad	0
 6470      00000000 
 6471 c830 00000000 		.quad	.L224
 6471      00000000 
 6472 c838 00000000 		.quad	0
 6472      00000000 
 6473 c840 00000000 		.quad	.L224
 6473      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 227


 6474 c848 00000000 		.quad	0
 6474      00000000 
 6475 c850 00000000 		.quad	.L224
 6475      00000000 
 6476 c858 00000000 		.quad	0
 6476      00000000 
 6477 c860 00000000 		.quad	.L224
 6477      00000000 
 6478 c868 00000000 		.quad	0
 6478      00000000 
 6479 c870 00000000 		.quad	.L224
 6479      00000000 
 6480 c878 00000000 		.quad	0
 6480      00000000 
 6481 c880 00000000 		.quad	.L224
 6481      00000000 
 6482 c888 00000000 		.quad	0
 6482      00000000 
 6483 c890 00000000 		.quad	.L224
 6483      00000000 
 6484 c898 00000000 		.quad	0
 6484      00000000 
 6485 c8a0 00000000 		.quad	.L224
 6485      00000000 
 6486 c8a8 00000000 		.quad	0
 6486      00000000 
 6487 c8b0 00000000 		.quad	.L224
 6487      00000000 
 6488 c8b8 00000000 		.quad	0
 6488      00000000 
 6489 c8c0 00000000 		.quad	.L224
 6489      00000000 
 6490 c8c8 00000000 		.quad	0
 6490      00000000 
 6491 c8d0 00000000 		.quad	.L224
 6491      00000000 
 6492 c8d8 00000000 		.quad	0
 6492      00000000 
 6493 c8e0 00000000 		.quad	.L224
 6493      00000000 
 6494 c8e8 00000000 		.quad	0
 6494      00000000 
 6495 c8f0 00000000 		.quad	.L224
 6495      00000000 
 6496 c8f8 00000000 		.quad	0
 6496      00000000 
 6497 c900 00000000 		.quad	.L224
 6497      00000000 
 6498 c908 00000000 		.quad	0
 6498      00000000 
 6499 c910 00000000 		.quad	.L224
 6499      00000000 
 6500 c918 00000000 		.quad	0
 6500      00000000 
 6501 c920 00000000 		.quad	.L224
 6501      00000000 
 6502 c928 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 228


 6502      00000000 
 6503 c930 00000000 		.quad	.L224
 6503      00000000 
 6504 c938 00000000 		.quad	0
 6504      00000000 
 6505 c940 00000000 		.quad	.L224
 6505      00000000 
 6506 c948 00000000 		.quad	0
 6506      00000000 
 6507 c950 00000000 		.quad	.L224
 6507      00000000 
 6508 c958 00000000 		.quad	0
 6508      00000000 
 6509 c960 00000000 		.quad	.L224
 6509      00000000 
 6510 c968 00000000 		.quad	0
 6510      00000000 
 6511 c970 00000000 		.quad	.L224
 6511      00000000 
 6512 c978 00000000 		.quad	0
 6512      00000000 
 6513 c980 00000000 		.quad	.L224
 6513      00000000 
 6514 c988 00000000 		.quad	0
 6514      00000000 
 6515 c990 00000000 		.quad	.L224
 6515      00000000 
 6516 c998 00000000 		.quad	0
 6516      00000000 
 6517 c9a0 00000000 		.quad	.L224
 6517      00000000 
 6518 c9a8 00000000 		.quad	0
 6518      00000000 
 6519 c9b0 00000000 		.quad	.L225
 6519      00000000 
 6520 c9b8 00000000 		.quad	0
 6520      00000000 
 6521 c9c0 00000000 		.quad	.L224
 6521      00000000 
 6522 c9c8 00000000 		.quad	0
 6522      00000000 
 6523 c9d0 00000000 		.quad	.L224
 6523      00000000 
 6524 c9d8 00000000 		.quad	0
 6524      00000000 
 6525 c9e0 00000000 		.quad	.L224
 6525      00000000 
 6526 c9e8 00000000 		.quad	0
 6526      00000000 
 6527 c9f0 00000000 		.quad	.L224
 6527      00000000 
 6528 c9f8 00000000 		.quad	0
 6528      00000000 
 6529 ca00 00000000 		.quad	.L224
 6529      00000000 
 6530 ca08 00000000 		.quad	0
 6530      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 229


 6531 ca10 00000000 		.quad	.L224
 6531      00000000 
 6532 ca18 00000000 		.quad	0
 6532      00000000 
 6533 ca20 00000000 		.quad	.L224
 6533      00000000 
 6534 ca28 00000000 		.quad	0
 6534      00000000 
 6535 ca30 00000000 		.quad	.L224
 6535      00000000 
 6536 ca38 00000000 		.quad	0
 6536      00000000 
 6537 ca40 00000000 		.quad	.L224
 6537      00000000 
 6538 ca48 00000000 		.quad	0
 6538      00000000 
 6539 ca50 00000000 		.quad	.L224
 6539      00000000 
 6540 ca58 00000000 		.quad	0
 6540      00000000 
 6541 ca60 00000000 		.quad	.L224
 6541      00000000 
 6542 ca68 00000000 		.quad	0
 6542      00000000 
 6543 ca70 00000000 		.quad	.L224
 6543      00000000 
 6544 ca78 00000000 		.quad	0
 6544      00000000 
 6545 ca80 00000000 		.quad	.L224
 6545      00000000 
 6546 ca88 00000000 		.quad	0
 6546      00000000 
 6547 ca90 00000000 		.quad	.L224
 6547      00000000 
 6548 ca98 00000000 		.quad	0
 6548      00000000 
 6549 caa0 00000000 		.quad	.L224
 6549      00000000 
 6550 caa8 00000000 		.quad	0
 6550      00000000 
 6551 cab0 00000000 		.quad	.L224
 6551      00000000 
 6552 cab8 00000000 		.quad	0
 6552      00000000 
 6553 cac0 00000000 		.quad	.L224
 6553      00000000 
 6554 cac8 00000000 		.quad	0
 6554      00000000 
 6555 cad0 00000000 		.quad	.L224
 6555      00000000 
 6556 cad8 00000000 		.quad	0
 6556      00000000 
 6557 cae0 00000000 		.quad	.L224
 6557      00000000 
 6558 cae8 00000000 		.quad	0
 6558      00000000 
 6559 caf0 00000000 		.quad	.L224
GAS LISTING /tmp/cc15eBE3.s 			page 230


 6559      00000000 
 6560 caf8 00000000 		.quad	0
 6560      00000000 
 6561 cb00 00000000 		.quad	.L224
 6561      00000000 
 6562 cb08 00000000 		.quad	0
 6562      00000000 
 6563 cb10 00000000 		.quad	.L224
 6563      00000000 
 6564 cb18 00000000 		.quad	0
 6564      00000000 
 6565 cb20 00000000 		.quad	.L224
 6565      00000000 
 6566 cb28 00000000 		.quad	0
 6566      00000000 
 6567 cb30 00000000 		.quad	.L224
 6567      00000000 
 6568 cb38 00000000 		.quad	0
 6568      00000000 
 6569 cb40 00000000 		.quad	.L224
 6569      00000000 
 6570 cb48 00000000 		.quad	0
 6570      00000000 
 6571 cb50 00000000 		.quad	.L224
 6571      00000000 
 6572 cb58 00000000 		.quad	0
 6572      00000000 
 6573 cb60 00000000 		.quad	.L224
 6573      00000000 
 6574 cb68 00000000 		.quad	0
 6574      00000000 
 6575 cb70 00000000 		.quad	.L224
 6575      00000000 
 6576 cb78 00000000 		.quad	0
 6576      00000000 
 6577 cb80 00000000 		.quad	.L224
 6577      00000000 
 6578 cb88 00000000 		.quad	0
 6578      00000000 
 6579 cb90 00000000 		.quad	.L224
 6579      00000000 
 6580 cb98 00000000 		.quad	0
 6580      00000000 
 6581 cba0 00000000 		.quad	.L224
 6581      00000000 
 6582 cba8 00000000 		.quad	0
 6582      00000000 
 6583 cbb0 00000000 		.quad	.L224
 6583      00000000 
 6584 cbb8 00000000 		.quad	0
 6584      00000000 
 6585 cbc0 00000000 		.quad	.L224
 6585      00000000 
 6586 cbc8 00000000 		.quad	0
 6586      00000000 
 6587 cbd0 00000000 		.quad	.L224
 6587      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 231


 6588 cbd8 00000000 		.quad	0
 6588      00000000 
 6589 cbe0 00000000 		.quad	.L224
 6589      00000000 
 6590 cbe8 00000000 		.quad	0
 6590      00000000 
 6591 cbf0 00000000 		.quad	.L224
 6591      00000000 
 6592 cbf8 00000000 		.quad	0
 6592      00000000 
 6593 cc00 00000000 		.quad	.L224
 6593      00000000 
 6594 cc08 00000000 		.quad	0
 6594      00000000 
 6595 cc10 00000000 		.quad	.L224
 6595      00000000 
 6596 cc18 00000000 		.quad	0
 6596      00000000 
 6597 cc20 00000000 		.quad	.L224
 6597      00000000 
 6598 cc28 00000000 		.quad	0
 6598      00000000 
 6599 cc30 00000000 		.quad	.L224
 6599      00000000 
 6600 cc38 00000000 		.quad	0
 6600      00000000 
 6601 cc40 00000000 		.quad	.L224
 6601      00000000 
 6602 cc48 00000000 		.quad	0
 6602      00000000 
 6603 cc50 00000000 		.quad	.L224
 6603      00000000 
 6604 cc58 00000000 		.quad	0
 6604      00000000 
 6605 cc60 00000000 		.quad	.L224
 6605      00000000 
 6606 cc68 00000000 		.quad	0
 6606      00000000 
 6607 cc70 00000000 		.quad	.L224
 6607      00000000 
 6608 cc78 00000000 		.quad	0
 6608      00000000 
 6609 cc80 00000000 		.quad	.L224
 6609      00000000 
 6610 cc88 00000000 		.quad	0
 6610      00000000 
 6611 cc90 00000000 		.quad	.L224
 6611      00000000 
 6612 cc98 00000000 		.quad	0
 6612      00000000 
 6613 cca0 00000000 		.quad	.L224
 6613      00000000 
 6614 cca8 00000000 		.quad	0
 6614      00000000 
 6615 ccb0 00000000 		.quad	.L224
 6615      00000000 
 6616 ccb8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 232


 6616      00000000 
 6617 ccc0 00000000 		.quad	.L224
 6617      00000000 
 6618 ccc8 00000000 		.quad	0
 6618      00000000 
 6619 ccd0 00000000 		.quad	.L224
 6619      00000000 
 6620 ccd8 00000000 		.quad	0
 6620      00000000 
 6621 cce0 00000000 		.quad	.L224
 6621      00000000 
 6622 cce8 00000000 		.quad	0
 6622      00000000 
 6623 ccf0 00000000 		.quad	.L224
 6623      00000000 
 6624 ccf8 00000000 		.quad	0
 6624      00000000 
 6625 cd00 00000000 		.quad	.L224
 6625      00000000 
 6626 cd08 00000000 		.quad	0
 6626      00000000 
 6627 cd10 00000000 		.quad	.L224
 6627      00000000 
 6628 cd18 00000000 		.quad	0
 6628      00000000 
 6629 cd20 00000000 		.quad	.L224
 6629      00000000 
 6630 cd28 00000000 		.quad	0
 6630      00000000 
 6631 cd30 00000000 		.quad	.L224
 6631      00000000 
 6632 cd38 00000000 		.quad	0
 6632      00000000 
 6633 cd40 00000000 		.quad	.L224
 6633      00000000 
 6634 cd48 00000000 		.quad	0
 6634      00000000 
 6635 cd50 00000000 		.quad	.L224
 6635      00000000 
 6636 cd58 00000000 		.quad	0
 6636      00000000 
 6637 cd60 00000000 		.quad	.L224
 6637      00000000 
 6638 cd68 00000000 		.quad	0
 6638      00000000 
 6639 cd70 00000000 		.quad	.L224
 6639      00000000 
 6640 cd78 00000000 		.quad	0
 6640      00000000 
 6641 cd80 00000000 		.quad	.L224
 6641      00000000 
 6642 cd88 00000000 		.quad	0
 6642      00000000 
 6643 cd90 00000000 		.quad	.L224
 6643      00000000 
 6644 cd98 00000000 		.quad	0
 6644      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 233


 6645 cda0 00000000 		.quad	.L224
 6645      00000000 
 6646 cda8 00000000 		.quad	0
 6646      00000000 
 6647 cdb0 00000000 		.quad	.L224
 6647      00000000 
 6648 cdb8 00000000 		.quad	0
 6648      00000000 
 6649 cdc0 00000000 		.quad	.L224
 6649      00000000 
 6650 cdc8 00000000 		.quad	0
 6650      00000000 
 6651 cdd0 00000000 		.quad	.L224
 6651      00000000 
 6652 cdd8 00000000 		.quad	0
 6652      00000000 
 6653 cde0 00000000 		.quad	.L224
 6653      00000000 
 6654 cde8 00000000 		.quad	0
 6654      00000000 
 6655 cdf0 00000000 		.quad	.L224
 6655      00000000 
 6656 cdf8 00000000 		.quad	0
 6656      00000000 
 6657 ce00 00000000 		.quad	.L224
 6657      00000000 
 6658 ce08 00000000 		.quad	0
 6658      00000000 
 6659 ce10 00000000 		.quad	.L224
 6659      00000000 
 6660 ce18 00000000 		.quad	0
 6660      00000000 
 6661 ce20 00000000 		.quad	.L224
 6661      00000000 
 6662 ce28 00000000 		.quad	0
 6662      00000000 
 6663 ce30 00000000 		.quad	.L224
 6663      00000000 
 6664 ce38 00000000 		.quad	0
 6664      00000000 
 6665              		.align 16
 6666              	.LC30:
 6667 ce40 00000000 		.quad	.L226
 6667      00000000 
 6668 ce48 00000000 		.quad	0
 6668      00000000 
 6669 ce50 00000000 		.quad	.L227
 6669      00000000 
 6670 ce58 00000000 		.quad	0
 6670      00000000 
 6671 ce60 00000000 		.quad	.L227
 6671      00000000 
 6672 ce68 00000000 		.quad	0
 6672      00000000 
 6673 ce70 00000000 		.quad	.L227
 6673      00000000 
 6674 ce78 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 234


 6674      00000000 
 6675 ce80 00000000 		.quad	.L227
 6675      00000000 
 6676 ce88 00000000 		.quad	0
 6676      00000000 
 6677 ce90 00000000 		.quad	.L227
 6677      00000000 
 6678 ce98 00000000 		.quad	0
 6678      00000000 
 6679 cea0 00000000 		.quad	.L227
 6679      00000000 
 6680 cea8 00000000 		.quad	0
 6680      00000000 
 6681 ceb0 00000000 		.quad	.L227
 6681      00000000 
 6682 ceb8 00000000 		.quad	0
 6682      00000000 
 6683 cec0 00000000 		.quad	.L227
 6683      00000000 
 6684 cec8 00000000 		.quad	0
 6684      00000000 
 6685 ced0 00000000 		.quad	.L227
 6685      00000000 
 6686 ced8 00000000 		.quad	0
 6686      00000000 
 6687 cee0 00000000 		.quad	.L227
 6687      00000000 
 6688 cee8 00000000 		.quad	0
 6688      00000000 
 6689 cef0 00000000 		.quad	.L227
 6689      00000000 
 6690 cef8 00000000 		.quad	0
 6690      00000000 
 6691 cf00 00000000 		.quad	.L227
 6691      00000000 
 6692 cf08 00000000 		.quad	0
 6692      00000000 
 6693 cf10 00000000 		.quad	.L227
 6693      00000000 
 6694 cf18 00000000 		.quad	0
 6694      00000000 
 6695 cf20 00000000 		.quad	.L227
 6695      00000000 
 6696 cf28 00000000 		.quad	0
 6696      00000000 
 6697 cf30 00000000 		.quad	.L227
 6697      00000000 
 6698 cf38 00000000 		.quad	0
 6698      00000000 
 6699 cf40 00000000 		.quad	.L227
 6699      00000000 
 6700 cf48 00000000 		.quad	0
 6700      00000000 
 6701 cf50 00000000 		.quad	.L227
 6701      00000000 
 6702 cf58 00000000 		.quad	0
 6702      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 235


 6703 cf60 00000000 		.quad	.L227
 6703      00000000 
 6704 cf68 00000000 		.quad	0
 6704      00000000 
 6705 cf70 00000000 		.quad	.L227
 6705      00000000 
 6706 cf78 00000000 		.quad	0
 6706      00000000 
 6707 cf80 00000000 		.quad	.L227
 6707      00000000 
 6708 cf88 00000000 		.quad	0
 6708      00000000 
 6709 cf90 00000000 		.quad	.L227
 6709      00000000 
 6710 cf98 00000000 		.quad	0
 6710      00000000 
 6711 cfa0 00000000 		.quad	.L227
 6711      00000000 
 6712 cfa8 00000000 		.quad	0
 6712      00000000 
 6713 cfb0 00000000 		.quad	.L227
 6713      00000000 
 6714 cfb8 00000000 		.quad	0
 6714      00000000 
 6715 cfc0 00000000 		.quad	.L228
 6715      00000000 
 6716 cfc8 00000000 		.quad	0
 6716      00000000 
 6717 cfd0 00000000 		.quad	.L227
 6717      00000000 
 6718 cfd8 00000000 		.quad	0
 6718      00000000 
 6719 cfe0 00000000 		.quad	.L227
 6719      00000000 
 6720 cfe8 00000000 		.quad	0
 6720      00000000 
 6721 cff0 00000000 		.quad	.L227
 6721      00000000 
 6722 cff8 00000000 		.quad	0
 6722      00000000 
 6723 d000 00000000 		.quad	.L227
 6723      00000000 
 6724 d008 00000000 		.quad	0
 6724      00000000 
 6725 d010 00000000 		.quad	.L227
 6725      00000000 
 6726 d018 00000000 		.quad	0
 6726      00000000 
 6727 d020 00000000 		.quad	.L227
 6727      00000000 
 6728 d028 00000000 		.quad	0
 6728      00000000 
 6729 d030 00000000 		.quad	.L227
 6729      00000000 
 6730 d038 00000000 		.quad	0
 6730      00000000 
 6731 d040 00000000 		.quad	.L227
GAS LISTING /tmp/cc15eBE3.s 			page 236


 6731      00000000 
 6732 d048 00000000 		.quad	0
 6732      00000000 
 6733 d050 00000000 		.quad	.L229
 6733      00000000 
 6734 d058 00000000 		.quad	0
 6734      00000000 
 6735 d060 00000000 		.quad	.L227
 6735      00000000 
 6736 d068 00000000 		.quad	0
 6736      00000000 
 6737 d070 00000000 		.quad	.L227
 6737      00000000 
 6738 d078 00000000 		.quad	0
 6738      00000000 
 6739 d080 00000000 		.quad	.L230
 6739      00000000 
 6740 d088 00000000 		.quad	0
 6740      00000000 
 6741 d090 00000000 		.quad	.L227
 6741      00000000 
 6742 d098 00000000 		.quad	0
 6742      00000000 
 6743 d0a0 00000000 		.quad	.L227
 6743      00000000 
 6744 d0a8 00000000 		.quad	0
 6744      00000000 
 6745 d0b0 00000000 		.quad	.L227
 6745      00000000 
 6746 d0b8 00000000 		.quad	0
 6746      00000000 
 6747 d0c0 00000000 		.quad	.L227
 6747      00000000 
 6748 d0c8 00000000 		.quad	0
 6748      00000000 
 6749 d0d0 00000000 		.quad	.L227
 6749      00000000 
 6750 d0d8 00000000 		.quad	0
 6750      00000000 
 6751 d0e0 00000000 		.quad	.L227
 6751      00000000 
 6752 d0e8 00000000 		.quad	0
 6752      00000000 
 6753 d0f0 00000000 		.quad	.L227
 6753      00000000 
 6754 d0f8 00000000 		.quad	0
 6754      00000000 
 6755 d100 00000000 		.quad	.L227
 6755      00000000 
 6756 d108 00000000 		.quad	0
 6756      00000000 
 6757 d110 00000000 		.quad	.L227
 6757      00000000 
 6758 d118 00000000 		.quad	0
 6758      00000000 
 6759 d120 00000000 		.quad	.L227
 6759      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 237


 6760 d128 00000000 		.quad	0
 6760      00000000 
 6761 d130 00000000 		.quad	.L227
 6761      00000000 
 6762 d138 00000000 		.quad	0
 6762      00000000 
 6763 d140 00000000 		.quad	.L227
 6763      00000000 
 6764 d148 00000000 		.quad	0
 6764      00000000 
 6765 d150 00000000 		.quad	.L227
 6765      00000000 
 6766 d158 00000000 		.quad	0
 6766      00000000 
 6767 d160 00000000 		.quad	.L227
 6767      00000000 
 6768 d168 00000000 		.quad	0
 6768      00000000 
 6769 d170 00000000 		.quad	.L227
 6769      00000000 
 6770 d178 00000000 		.quad	0
 6770      00000000 
 6771 d180 00000000 		.quad	.L231
 6771      00000000 
 6772 d188 00000000 		.quad	0
 6772      00000000 
 6773 d190 00000000 		.quad	.L227
 6773      00000000 
 6774 d198 00000000 		.quad	0
 6774      00000000 
 6775 d1a0 00000000 		.quad	.L227
 6775      00000000 
 6776 d1a8 00000000 		.quad	0
 6776      00000000 
 6777 d1b0 00000000 		.quad	.L232
 6777      00000000 
 6778 d1b8 00000000 		.quad	0
 6778      00000000 
 6779 d1c0 00000000 		.quad	.L227
 6779      00000000 
 6780 d1c8 00000000 		.quad	0
 6780      00000000 
 6781 d1d0 00000000 		.quad	.L227
 6781      00000000 
 6782 d1d8 00000000 		.quad	0
 6782      00000000 
 6783 d1e0 00000000 		.quad	.L227
 6783      00000000 
 6784 d1e8 00000000 		.quad	0
 6784      00000000 
 6785 d1f0 00000000 		.quad	.L227
 6785      00000000 
 6786 d1f8 00000000 		.quad	0
 6786      00000000 
 6787 d200 00000000 		.quad	.L227
 6787      00000000 
 6788 d208 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 238


 6788      00000000 
 6789 d210 00000000 		.quad	.L227
 6789      00000000 
 6790 d218 00000000 		.quad	0
 6790      00000000 
 6791 d220 00000000 		.quad	.L227
 6791      00000000 
 6792 d228 00000000 		.quad	0
 6792      00000000 
 6793 d230 00000000 		.quad	.L227
 6793      00000000 
 6794 d238 00000000 		.quad	0
 6794      00000000 
 6795 d240 00000000 		.quad	.L227
 6795      00000000 
 6796 d248 00000000 		.quad	0
 6796      00000000 
 6797 d250 00000000 		.quad	.L227
 6797      00000000 
 6798 d258 00000000 		.quad	0
 6798      00000000 
 6799 d260 00000000 		.quad	.L227
 6799      00000000 
 6800 d268 00000000 		.quad	0
 6800      00000000 
 6801 d270 00000000 		.quad	.L227
 6801      00000000 
 6802 d278 00000000 		.quad	0
 6802      00000000 
 6803 d280 00000000 		.quad	.L227
 6803      00000000 
 6804 d288 00000000 		.quad	0
 6804      00000000 
 6805 d290 00000000 		.quad	.L227
 6805      00000000 
 6806 d298 00000000 		.quad	0
 6806      00000000 
 6807 d2a0 00000000 		.quad	.L227
 6807      00000000 
 6808 d2a8 00000000 		.quad	0
 6808      00000000 
 6809 d2b0 00000000 		.quad	.L227
 6809      00000000 
 6810 d2b8 00000000 		.quad	0
 6810      00000000 
 6811 d2c0 00000000 		.quad	.L227
 6811      00000000 
 6812 d2c8 00000000 		.quad	0
 6812      00000000 
 6813 d2d0 00000000 		.quad	.L227
 6813      00000000 
 6814 d2d8 00000000 		.quad	0
 6814      00000000 
 6815 d2e0 00000000 		.quad	.L227
 6815      00000000 
 6816 d2e8 00000000 		.quad	0
 6816      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 239


 6817 d2f0 00000000 		.quad	.L227
 6817      00000000 
 6818 d2f8 00000000 		.quad	0
 6818      00000000 
 6819 d300 00000000 		.quad	.L227
 6819      00000000 
 6820 d308 00000000 		.quad	0
 6820      00000000 
 6821 d310 00000000 		.quad	.L227
 6821      00000000 
 6822 d318 00000000 		.quad	0
 6822      00000000 
 6823 d320 00000000 		.quad	.L227
 6823      00000000 
 6824 d328 00000000 		.quad	0
 6824      00000000 
 6825 d330 00000000 		.quad	.L227
 6825      00000000 
 6826 d338 00000000 		.quad	0
 6826      00000000 
 6827 d340 00000000 		.quad	.L227
 6827      00000000 
 6828 d348 00000000 		.quad	0
 6828      00000000 
 6829 d350 00000000 		.quad	.L227
 6829      00000000 
 6830 d358 00000000 		.quad	0
 6830      00000000 
 6831 d360 00000000 		.quad	.L227
 6831      00000000 
 6832 d368 00000000 		.quad	0
 6832      00000000 
 6833 d370 00000000 		.quad	.L227
 6833      00000000 
 6834 d378 00000000 		.quad	0
 6834      00000000 
 6835 d380 00000000 		.quad	.L227
 6835      00000000 
 6836 d388 00000000 		.quad	0
 6836      00000000 
 6837 d390 00000000 		.quad	.L227
 6837      00000000 
 6838 d398 00000000 		.quad	0
 6838      00000000 
 6839 d3a0 00000000 		.quad	.L227
 6839      00000000 
 6840 d3a8 00000000 		.quad	0
 6840      00000000 
 6841 d3b0 00000000 		.quad	.L227
 6841      00000000 
 6842 d3b8 00000000 		.quad	0
 6842      00000000 
 6843 d3c0 00000000 		.quad	.L227
 6843      00000000 
 6844 d3c8 00000000 		.quad	0
 6844      00000000 
 6845 d3d0 00000000 		.quad	.L227
GAS LISTING /tmp/cc15eBE3.s 			page 240


 6845      00000000 
 6846 d3d8 00000000 		.quad	0
 6846      00000000 
 6847 d3e0 00000000 		.quad	.L227
 6847      00000000 
 6848 d3e8 00000000 		.quad	0
 6848      00000000 
 6849 d3f0 00000000 		.quad	.L227
 6849      00000000 
 6850 d3f8 00000000 		.quad	0
 6850      00000000 
 6851 d400 00000000 		.quad	.L227
 6851      00000000 
 6852 d408 00000000 		.quad	0
 6852      00000000 
 6853 d410 00000000 		.quad	.L227
 6853      00000000 
 6854 d418 00000000 		.quad	0
 6854      00000000 
 6855 d420 00000000 		.quad	.L227
 6855      00000000 
 6856 d428 00000000 		.quad	0
 6856      00000000 
 6857 d430 00000000 		.quad	.L227
 6857      00000000 
 6858 d438 00000000 		.quad	0
 6858      00000000 
 6859 d440 00000000 		.quad	.L227
 6859      00000000 
 6860 d448 00000000 		.quad	0
 6860      00000000 
 6861 d450 00000000 		.quad	.L227
 6861      00000000 
 6862 d458 00000000 		.quad	0
 6862      00000000 
 6863 d460 00000000 		.quad	.L227
 6863      00000000 
 6864 d468 00000000 		.quad	0
 6864      00000000 
 6865 d470 00000000 		.quad	.L227
 6865      00000000 
 6866 d478 00000000 		.quad	0
 6866      00000000 
 6867 d480 00000000 		.quad	.L227
 6867      00000000 
 6868 d488 00000000 		.quad	0
 6868      00000000 
 6869 d490 00000000 		.quad	.L227
 6869      00000000 
 6870 d498 00000000 		.quad	0
 6870      00000000 
 6871 d4a0 00000000 		.quad	.L227
 6871      00000000 
 6872 d4a8 00000000 		.quad	0
 6872      00000000 
 6873 d4b0 00000000 		.quad	.L227
 6873      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 241


 6874 d4b8 00000000 		.quad	0
 6874      00000000 
 6875 d4c0 00000000 		.quad	.L227
 6875      00000000 
 6876 d4c8 00000000 		.quad	0
 6876      00000000 
 6877 d4d0 00000000 		.quad	.L227
 6877      00000000 
 6878 d4d8 00000000 		.quad	0
 6878      00000000 
 6879 d4e0 00000000 		.quad	.L227
 6879      00000000 
 6880 d4e8 00000000 		.quad	0
 6880      00000000 
 6881 d4f0 00000000 		.quad	.L227
 6881      00000000 
 6882 d4f8 00000000 		.quad	0
 6882      00000000 
 6883 d500 00000000 		.quad	.L227
 6883      00000000 
 6884 d508 00000000 		.quad	0
 6884      00000000 
 6885 d510 00000000 		.quad	.L227
 6885      00000000 
 6886 d518 00000000 		.quad	0
 6886      00000000 
 6887              		.align 16
 6888              	.LC31:
 6889 d520 00000000 		.quad	.L233
 6889      00000000 
 6890 d528 00000000 		.quad	0
 6890      00000000 
 6891 d530 00000000 		.quad	.L234
 6891      00000000 
 6892 d538 00000000 		.quad	0
 6892      00000000 
 6893 d540 00000000 		.quad	.L234
 6893      00000000 
 6894 d548 00000000 		.quad	0
 6894      00000000 
 6895 d550 00000000 		.quad	.L234
 6895      00000000 
 6896 d558 00000000 		.quad	0
 6896      00000000 
 6897 d560 00000000 		.quad	.L234
 6897      00000000 
 6898 d568 00000000 		.quad	0
 6898      00000000 
 6899 d570 00000000 		.quad	.L234
 6899      00000000 
 6900 d578 00000000 		.quad	0
 6900      00000000 
 6901 d580 00000000 		.quad	.L234
 6901      00000000 
 6902 d588 00000000 		.quad	0
 6902      00000000 
 6903 d590 00000000 		.quad	.L234
GAS LISTING /tmp/cc15eBE3.s 			page 242


 6903      00000000 
 6904 d598 00000000 		.quad	0
 6904      00000000 
 6905 d5a0 00000000 		.quad	.L234
 6905      00000000 
 6906 d5a8 00000000 		.quad	0
 6906      00000000 
 6907 d5b0 00000000 		.quad	.L234
 6907      00000000 
 6908 d5b8 00000000 		.quad	0
 6908      00000000 
 6909 d5c0 00000000 		.quad	.L234
 6909      00000000 
 6910 d5c8 00000000 		.quad	0
 6910      00000000 
 6911 d5d0 00000000 		.quad	.L234
 6911      00000000 
 6912 d5d8 00000000 		.quad	0
 6912      00000000 
 6913 d5e0 00000000 		.quad	.L234
 6913      00000000 
 6914 d5e8 00000000 		.quad	0
 6914      00000000 
 6915 d5f0 00000000 		.quad	.L234
 6915      00000000 
 6916 d5f8 00000000 		.quad	0
 6916      00000000 
 6917 d600 00000000 		.quad	.L234
 6917      00000000 
 6918 d608 00000000 		.quad	0
 6918      00000000 
 6919 d610 00000000 		.quad	.L234
 6919      00000000 
 6920 d618 00000000 		.quad	0
 6920      00000000 
 6921 d620 00000000 		.quad	.L234
 6921      00000000 
 6922 d628 00000000 		.quad	0
 6922      00000000 
 6923 d630 00000000 		.quad	.L234
 6923      00000000 
 6924 d638 00000000 		.quad	0
 6924      00000000 
 6925 d640 00000000 		.quad	.L234
 6925      00000000 
 6926 d648 00000000 		.quad	0
 6926      00000000 
 6927 d650 00000000 		.quad	.L234
 6927      00000000 
 6928 d658 00000000 		.quad	0
 6928      00000000 
 6929 d660 00000000 		.quad	.L234
 6929      00000000 
 6930 d668 00000000 		.quad	0
 6930      00000000 
 6931 d670 00000000 		.quad	.L234
 6931      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 243


 6932 d678 00000000 		.quad	0
 6932      00000000 
 6933 d680 00000000 		.quad	.L234
 6933      00000000 
 6934 d688 00000000 		.quad	0
 6934      00000000 
 6935 d690 00000000 		.quad	.L234
 6935      00000000 
 6936 d698 00000000 		.quad	0
 6936      00000000 
 6937 d6a0 00000000 		.quad	.L234
 6937      00000000 
 6938 d6a8 00000000 		.quad	0
 6938      00000000 
 6939 d6b0 00000000 		.quad	.L234
 6939      00000000 
 6940 d6b8 00000000 		.quad	0
 6940      00000000 
 6941 d6c0 00000000 		.quad	.L234
 6941      00000000 
 6942 d6c8 00000000 		.quad	0
 6942      00000000 
 6943 d6d0 00000000 		.quad	.L234
 6943      00000000 
 6944 d6d8 00000000 		.quad	0
 6944      00000000 
 6945 d6e0 00000000 		.quad	.L234
 6945      00000000 
 6946 d6e8 00000000 		.quad	0
 6946      00000000 
 6947 d6f0 00000000 		.quad	.L234
 6947      00000000 
 6948 d6f8 00000000 		.quad	0
 6948      00000000 
 6949 d700 00000000 		.quad	.L234
 6949      00000000 
 6950 d708 00000000 		.quad	0
 6950      00000000 
 6951 d710 00000000 		.quad	.L234
 6951      00000000 
 6952 d718 00000000 		.quad	0
 6952      00000000 
 6953 d720 00000000 		.quad	.L234
 6953      00000000 
 6954 d728 00000000 		.quad	0
 6954      00000000 
 6955 d730 00000000 		.quad	.L234
 6955      00000000 
 6956 d738 00000000 		.quad	0
 6956      00000000 
 6957 d740 00000000 		.quad	.L234
 6957      00000000 
 6958 d748 00000000 		.quad	0
 6958      00000000 
 6959 d750 00000000 		.quad	.L234
 6959      00000000 
 6960 d758 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 244


 6960      00000000 
 6961 d760 00000000 		.quad	.L234
 6961      00000000 
 6962 d768 00000000 		.quad	0
 6962      00000000 
 6963 d770 00000000 		.quad	.L234
 6963      00000000 
 6964 d778 00000000 		.quad	0
 6964      00000000 
 6965 d780 00000000 		.quad	.L234
 6965      00000000 
 6966 d788 00000000 		.quad	0
 6966      00000000 
 6967 d790 00000000 		.quad	.L234
 6967      00000000 
 6968 d798 00000000 		.quad	0
 6968      00000000 
 6969 d7a0 00000000 		.quad	.L234
 6969      00000000 
 6970 d7a8 00000000 		.quad	0
 6970      00000000 
 6971 d7b0 00000000 		.quad	.L234
 6971      00000000 
 6972 d7b8 00000000 		.quad	0
 6972      00000000 
 6973 d7c0 00000000 		.quad	.L234
 6973      00000000 
 6974 d7c8 00000000 		.quad	0
 6974      00000000 
 6975 d7d0 00000000 		.quad	.L234
 6975      00000000 
 6976 d7d8 00000000 		.quad	0
 6976      00000000 
 6977 d7e0 00000000 		.quad	.L234
 6977      00000000 
 6978 d7e8 00000000 		.quad	0
 6978      00000000 
 6979 d7f0 00000000 		.quad	.L234
 6979      00000000 
 6980 d7f8 00000000 		.quad	0
 6980      00000000 
 6981 d800 00000000 		.quad	.L234
 6981      00000000 
 6982 d808 00000000 		.quad	0
 6982      00000000 
 6983 d810 00000000 		.quad	.L234
 6983      00000000 
 6984 d818 00000000 		.quad	0
 6984      00000000 
 6985 d820 00000000 		.quad	.L234
 6985      00000000 
 6986 d828 00000000 		.quad	0
 6986      00000000 
 6987 d830 00000000 		.quad	.L234
 6987      00000000 
 6988 d838 00000000 		.quad	0
 6988      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 245


 6989 d840 00000000 		.quad	.L234
 6989      00000000 
 6990 d848 00000000 		.quad	0
 6990      00000000 
 6991 d850 00000000 		.quad	.L234
 6991      00000000 
 6992 d858 00000000 		.quad	0
 6992      00000000 
 6993 d860 00000000 		.quad	.L234
 6993      00000000 
 6994 d868 00000000 		.quad	0
 6994      00000000 
 6995 d870 00000000 		.quad	.L234
 6995      00000000 
 6996 d878 00000000 		.quad	0
 6996      00000000 
 6997 d880 00000000 		.quad	.L234
 6997      00000000 
 6998 d888 00000000 		.quad	0
 6998      00000000 
 6999 d890 00000000 		.quad	.L234
 6999      00000000 
 7000 d898 00000000 		.quad	0
 7000      00000000 
 7001 d8a0 00000000 		.quad	.L234
 7001      00000000 
 7002 d8a8 00000000 		.quad	0
 7002      00000000 
 7003 d8b0 00000000 		.quad	.L234
 7003      00000000 
 7004 d8b8 00000000 		.quad	0
 7004      00000000 
 7005 d8c0 00000000 		.quad	.L234
 7005      00000000 
 7006 d8c8 00000000 		.quad	0
 7006      00000000 
 7007 d8d0 00000000 		.quad	.L234
 7007      00000000 
 7008 d8d8 00000000 		.quad	0
 7008      00000000 
 7009 d8e0 00000000 		.quad	.L234
 7009      00000000 
 7010 d8e8 00000000 		.quad	0
 7010      00000000 
 7011 d8f0 00000000 		.quad	.L234
 7011      00000000 
 7012 d8f8 00000000 		.quad	0
 7012      00000000 
 7013 d900 00000000 		.quad	.L234
 7013      00000000 
 7014 d908 00000000 		.quad	0
 7014      00000000 
 7015 d910 00000000 		.quad	.L234
 7015      00000000 
 7016 d918 00000000 		.quad	0
 7016      00000000 
 7017 d920 00000000 		.quad	.L234
GAS LISTING /tmp/cc15eBE3.s 			page 246


 7017      00000000 
 7018 d928 00000000 		.quad	0
 7018      00000000 
 7019 d930 00000000 		.quad	.L234
 7019      00000000 
 7020 d938 00000000 		.quad	0
 7020      00000000 
 7021 d940 00000000 		.quad	.L234
 7021      00000000 
 7022 d948 00000000 		.quad	0
 7022      00000000 
 7023 d950 00000000 		.quad	.L234
 7023      00000000 
 7024 d958 00000000 		.quad	0
 7024      00000000 
 7025 d960 00000000 		.quad	.L234
 7025      00000000 
 7026 d968 00000000 		.quad	0
 7026      00000000 
 7027 d970 00000000 		.quad	.L234
 7027      00000000 
 7028 d978 00000000 		.quad	0
 7028      00000000 
 7029 d980 00000000 		.quad	.L234
 7029      00000000 
 7030 d988 00000000 		.quad	0
 7030      00000000 
 7031 d990 00000000 		.quad	.L234
 7031      00000000 
 7032 d998 00000000 		.quad	0
 7032      00000000 
 7033 d9a0 00000000 		.quad	.L234
 7033      00000000 
 7034 d9a8 00000000 		.quad	0
 7034      00000000 
 7035 d9b0 00000000 		.quad	.L234
 7035      00000000 
 7036 d9b8 00000000 		.quad	0
 7036      00000000 
 7037 d9c0 00000000 		.quad	.L234
 7037      00000000 
 7038 d9c8 00000000 		.quad	0
 7038      00000000 
 7039 d9d0 00000000 		.quad	.L234
 7039      00000000 
 7040 d9d8 00000000 		.quad	0
 7040      00000000 
 7041 d9e0 00000000 		.quad	.L234
 7041      00000000 
 7042 d9e8 00000000 		.quad	0
 7042      00000000 
 7043 d9f0 00000000 		.quad	.L234
 7043      00000000 
 7044 d9f8 00000000 		.quad	0
 7044      00000000 
 7045 da00 00000000 		.quad	.L234
 7045      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 247


 7046 da08 00000000 		.quad	0
 7046      00000000 
 7047 da10 00000000 		.quad	.L234
 7047      00000000 
 7048 da18 00000000 		.quad	0
 7048      00000000 
 7049 da20 00000000 		.quad	.L234
 7049      00000000 
 7050 da28 00000000 		.quad	0
 7050      00000000 
 7051 da30 00000000 		.quad	.L234
 7051      00000000 
 7052 da38 00000000 		.quad	0
 7052      00000000 
 7053 da40 00000000 		.quad	.L234
 7053      00000000 
 7054 da48 00000000 		.quad	0
 7054      00000000 
 7055 da50 00000000 		.quad	.L234
 7055      00000000 
 7056 da58 00000000 		.quad	0
 7056      00000000 
 7057 da60 00000000 		.quad	.L234
 7057      00000000 
 7058 da68 00000000 		.quad	0
 7058      00000000 
 7059 da70 00000000 		.quad	.L234
 7059      00000000 
 7060 da78 00000000 		.quad	0
 7060      00000000 
 7061 da80 00000000 		.quad	.L234
 7061      00000000 
 7062 da88 00000000 		.quad	0
 7062      00000000 
 7063 da90 00000000 		.quad	.L234
 7063      00000000 
 7064 da98 00000000 		.quad	0
 7064      00000000 
 7065 daa0 00000000 		.quad	.L234
 7065      00000000 
 7066 daa8 00000000 		.quad	0
 7066      00000000 
 7067 dab0 00000000 		.quad	.L234
 7067      00000000 
 7068 dab8 00000000 		.quad	0
 7068      00000000 
 7069 dac0 00000000 		.quad	.L234
 7069      00000000 
 7070 dac8 00000000 		.quad	0
 7070      00000000 
 7071 dad0 00000000 		.quad	.L234
 7071      00000000 
 7072 dad8 00000000 		.quad	0
 7072      00000000 
 7073 dae0 00000000 		.quad	.L234
 7073      00000000 
 7074 dae8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 248


 7074      00000000 
 7075 daf0 00000000 		.quad	.L234
 7075      00000000 
 7076 daf8 00000000 		.quad	0
 7076      00000000 
 7077 db00 00000000 		.quad	.L234
 7077      00000000 
 7078 db08 00000000 		.quad	0
 7078      00000000 
 7079 db10 00000000 		.quad	.L234
 7079      00000000 
 7080 db18 00000000 		.quad	0
 7080      00000000 
 7081 db20 00000000 		.quad	.L234
 7081      00000000 
 7082 db28 00000000 		.quad	0
 7082      00000000 
 7083 db30 00000000 		.quad	.L234
 7083      00000000 
 7084 db38 00000000 		.quad	0
 7084      00000000 
 7085 db40 00000000 		.quad	.L234
 7085      00000000 
 7086 db48 00000000 		.quad	0
 7086      00000000 
 7087 db50 00000000 		.quad	.L234
 7087      00000000 
 7088 db58 00000000 		.quad	0
 7088      00000000 
 7089 db60 00000000 		.quad	.L234
 7089      00000000 
 7090 db68 00000000 		.quad	0
 7090      00000000 
 7091 db70 00000000 		.quad	.L234
 7091      00000000 
 7092 db78 00000000 		.quad	0
 7092      00000000 
 7093 db80 00000000 		.quad	.L234
 7093      00000000 
 7094 db88 00000000 		.quad	0
 7094      00000000 
 7095 db90 00000000 		.quad	.L234
 7095      00000000 
 7096 db98 00000000 		.quad	0
 7096      00000000 
 7097 dba0 00000000 		.quad	.L234
 7097      00000000 
 7098 dba8 00000000 		.quad	0
 7098      00000000 
 7099 dbb0 00000000 		.quad	.L234
 7099      00000000 
 7100 dbb8 00000000 		.quad	0
 7100      00000000 
 7101 dbc0 00000000 		.quad	.L234
 7101      00000000 
 7102 dbc8 00000000 		.quad	0
 7102      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 249


 7103 dbd0 00000000 		.quad	.L234
 7103      00000000 
 7104 dbd8 00000000 		.quad	0
 7104      00000000 
 7105 dbe0 00000000 		.quad	.L234
 7105      00000000 
 7106 dbe8 00000000 		.quad	0
 7106      00000000 
 7107 dbf0 00000000 		.quad	.L234
 7107      00000000 
 7108 dbf8 00000000 		.quad	0
 7108      00000000 
 7109              		.align 16
 7110              	.LC32:
 7111 dc00 00000000 		.quad	.L235
 7111      00000000 
 7112 dc08 00000000 		.quad	0
 7112      00000000 
 7113 dc10 00000000 		.quad	.L235
 7113      00000000 
 7114 dc18 00000000 		.quad	0
 7114      00000000 
 7115 dc20 00000000 		.quad	.L235
 7115      00000000 
 7116 dc28 00000000 		.quad	0
 7116      00000000 
 7117 dc30 00000000 		.quad	.L235
 7117      00000000 
 7118 dc38 00000000 		.quad	0
 7118      00000000 
 7119 dc40 00000000 		.quad	.L235
 7119      00000000 
 7120 dc48 00000000 		.quad	0
 7120      00000000 
 7121 dc50 00000000 		.quad	.L235
 7121      00000000 
 7122 dc58 00000000 		.quad	0
 7122      00000000 
 7123 dc60 00000000 		.quad	.L235
 7123      00000000 
 7124 dc68 00000000 		.quad	0
 7124      00000000 
 7125 dc70 00000000 		.quad	.L235
 7125      00000000 
 7126 dc78 00000000 		.quad	0
 7126      00000000 
 7127 dc80 00000000 		.quad	.L235
 7127      00000000 
 7128 dc88 00000000 		.quad	0
 7128      00000000 
 7129 dc90 00000000 		.quad	.L235
 7129      00000000 
 7130 dc98 00000000 		.quad	0
 7130      00000000 
 7131 dca0 00000000 		.quad	.L235
 7131      00000000 
 7132 dca8 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 250


 7132      00000000 
 7133 dcb0 00000000 		.quad	.L235
 7133      00000000 
 7134 dcb8 00000000 		.quad	0
 7134      00000000 
 7135 dcc0 00000000 		.quad	.L235
 7135      00000000 
 7136 dcc8 00000000 		.quad	0
 7136      00000000 
 7137 dcd0 00000000 		.quad	.L235
 7137      00000000 
 7138 dcd8 00000000 		.quad	0
 7138      00000000 
 7139 dce0 00000000 		.quad	.L235
 7139      00000000 
 7140 dce8 00000000 		.quad	0
 7140      00000000 
 7141 dcf0 00000000 		.quad	.L235
 7141      00000000 
 7142 dcf8 00000000 		.quad	0
 7142      00000000 
 7143 dd00 00000000 		.quad	.L235
 7143      00000000 
 7144 dd08 00000000 		.quad	0
 7144      00000000 
 7145 dd10 00000000 		.quad	.L235
 7145      00000000 
 7146 dd18 00000000 		.quad	0
 7146      00000000 
 7147 dd20 00000000 		.quad	.L235
 7147      00000000 
 7148 dd28 00000000 		.quad	0
 7148      00000000 
 7149 dd30 00000000 		.quad	.L235
 7149      00000000 
 7150 dd38 00000000 		.quad	0
 7150      00000000 
 7151 dd40 00000000 		.quad	.L235
 7151      00000000 
 7152 dd48 00000000 		.quad	0
 7152      00000000 
 7153 dd50 00000000 		.quad	.L235
 7153      00000000 
 7154 dd58 00000000 		.quad	0
 7154      00000000 
 7155 dd60 00000000 		.quad	.L235
 7155      00000000 
 7156 dd68 00000000 		.quad	0
 7156      00000000 
 7157 dd70 00000000 		.quad	.L235
 7157      00000000 
 7158 dd78 00000000 		.quad	0
 7158      00000000 
 7159 dd80 00000000 		.quad	.L235
 7159      00000000 
 7160 dd88 00000000 		.quad	0
 7160      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 251


 7161 dd90 00000000 		.quad	.L235
 7161      00000000 
 7162 dd98 00000000 		.quad	0
 7162      00000000 
 7163 dda0 00000000 		.quad	.L235
 7163      00000000 
 7164 dda8 00000000 		.quad	0
 7164      00000000 
 7165 ddb0 00000000 		.quad	.L235
 7165      00000000 
 7166 ddb8 00000000 		.quad	0
 7166      00000000 
 7167 ddc0 00000000 		.quad	.L235
 7167      00000000 
 7168 ddc8 00000000 		.quad	0
 7168      00000000 
 7169 ddd0 00000000 		.quad	.L235
 7169      00000000 
 7170 ddd8 00000000 		.quad	0
 7170      00000000 
 7171 dde0 00000000 		.quad	.L235
 7171      00000000 
 7172 dde8 00000000 		.quad	0
 7172      00000000 
 7173 ddf0 00000000 		.quad	.L235
 7173      00000000 
 7174 ddf8 00000000 		.quad	0
 7174      00000000 
 7175 de00 00000000 		.quad	.L235
 7175      00000000 
 7176 de08 00000000 		.quad	0
 7176      00000000 
 7177 de10 00000000 		.quad	.L236
 7177      00000000 
 7178 de18 00000000 		.quad	0
 7178      00000000 
 7179 de20 00000000 		.quad	.L235
 7179      00000000 
 7180 de28 00000000 		.quad	0
 7180      00000000 
 7181 de30 00000000 		.quad	.L235
 7181      00000000 
 7182 de38 00000000 		.quad	0
 7182      00000000 
 7183 de40 00000000 		.quad	.L235
 7183      00000000 
 7184 de48 00000000 		.quad	0
 7184      00000000 
 7185 de50 00000000 		.quad	.L235
 7185      00000000 
 7186 de58 00000000 		.quad	0
 7186      00000000 
 7187 de60 00000000 		.quad	.L235
 7187      00000000 
 7188 de68 00000000 		.quad	0
 7188      00000000 
 7189 de70 00000000 		.quad	.L235
GAS LISTING /tmp/cc15eBE3.s 			page 252


 7189      00000000 
 7190 de78 00000000 		.quad	0
 7190      00000000 
 7191 de80 00000000 		.quad	.L235
 7191      00000000 
 7192 de88 00000000 		.quad	0
 7192      00000000 
 7193 de90 00000000 		.quad	.L235
 7193      00000000 
 7194 de98 00000000 		.quad	0
 7194      00000000 
 7195 dea0 00000000 		.quad	.L235
 7195      00000000 
 7196 dea8 00000000 		.quad	0
 7196      00000000 
 7197 deb0 00000000 		.quad	.L235
 7197      00000000 
 7198 deb8 00000000 		.quad	0
 7198      00000000 
 7199 dec0 00000000 		.quad	.L235
 7199      00000000 
 7200 dec8 00000000 		.quad	0
 7200      00000000 
 7201 ded0 00000000 		.quad	.L235
 7201      00000000 
 7202 ded8 00000000 		.quad	0
 7202      00000000 
 7203 dee0 00000000 		.quad	.L235
 7203      00000000 
 7204 dee8 00000000 		.quad	0
 7204      00000000 
 7205 def0 00000000 		.quad	.L235
 7205      00000000 
 7206 def8 00000000 		.quad	0
 7206      00000000 
 7207 df00 00000000 		.quad	.L235
 7207      00000000 
 7208 df08 00000000 		.quad	0
 7208      00000000 
 7209 df10 00000000 		.quad	.L235
 7209      00000000 
 7210 df18 00000000 		.quad	0
 7210      00000000 
 7211 df20 00000000 		.quad	.L235
 7211      00000000 
 7212 df28 00000000 		.quad	0
 7212      00000000 
 7213 df30 00000000 		.quad	.L235
 7213      00000000 
 7214 df38 00000000 		.quad	0
 7214      00000000 
 7215 df40 00000000 		.quad	.L235
 7215      00000000 
 7216 df48 00000000 		.quad	0
 7216      00000000 
 7217 df50 00000000 		.quad	.L235
 7217      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 253


 7218 df58 00000000 		.quad	0
 7218      00000000 
 7219 df60 00000000 		.quad	.L235
 7219      00000000 
 7220 df68 00000000 		.quad	0
 7220      00000000 
 7221 df70 00000000 		.quad	.L235
 7221      00000000 
 7222 df78 00000000 		.quad	0
 7222      00000000 
 7223 df80 00000000 		.quad	.L235
 7223      00000000 
 7224 df88 00000000 		.quad	0
 7224      00000000 
 7225 df90 00000000 		.quad	.L235
 7225      00000000 
 7226 df98 00000000 		.quad	0
 7226      00000000 
 7227 dfa0 00000000 		.quad	.L235
 7227      00000000 
 7228 dfa8 00000000 		.quad	0
 7228      00000000 
 7229 dfb0 00000000 		.quad	.L235
 7229      00000000 
 7230 dfb8 00000000 		.quad	0
 7230      00000000 
 7231 dfc0 00000000 		.quad	.L235
 7231      00000000 
 7232 dfc8 00000000 		.quad	0
 7232      00000000 
 7233 dfd0 00000000 		.quad	.L235
 7233      00000000 
 7234 dfd8 00000000 		.quad	0
 7234      00000000 
 7235 dfe0 00000000 		.quad	.L235
 7235      00000000 
 7236 dfe8 00000000 		.quad	0
 7236      00000000 
 7237 dff0 00000000 		.quad	.L235
 7237      00000000 
 7238 dff8 00000000 		.quad	0
 7238      00000000 
 7239 e000 00000000 		.quad	.L235
 7239      00000000 
 7240 e008 00000000 		.quad	0
 7240      00000000 
 7241 e010 00000000 		.quad	.L235
 7241      00000000 
 7242 e018 00000000 		.quad	0
 7242      00000000 
 7243 e020 00000000 		.quad	.L235
 7243      00000000 
 7244 e028 00000000 		.quad	0
 7244      00000000 
 7245 e030 00000000 		.quad	.L235
 7245      00000000 
 7246 e038 00000000 		.quad	0
GAS LISTING /tmp/cc15eBE3.s 			page 254


 7246      00000000 
 7247 e040 00000000 		.quad	.L235
 7247      00000000 
 7248 e048 00000000 		.quad	0
 7248      00000000 
 7249 e050 00000000 		.quad	.L235
 7249      00000000 
 7250 e058 00000000 		.quad	0
 7250      00000000 
 7251 e060 00000000 		.quad	.L235
 7251      00000000 
 7252 e068 00000000 		.quad	0
 7252      00000000 
 7253 e070 00000000 		.quad	.L235
 7253      00000000 
 7254 e078 00000000 		.quad	0
 7254      00000000 
 7255 e080 00000000 		.quad	.L235
 7255      00000000 
 7256 e088 00000000 		.quad	0
 7256      00000000 
 7257 e090 00000000 		.quad	.L235
 7257      00000000 
 7258 e098 00000000 		.quad	0
 7258      00000000 
 7259 e0a0 00000000 		.quad	.L235
 7259      00000000 
 7260 e0a8 00000000 		.quad	0
 7260      00000000 
 7261 e0b0 00000000 		.quad	.L235
 7261      00000000 
 7262 e0b8 00000000 		.quad	0
 7262      00000000 
 7263 e0c0 00000000 		.quad	.L235
 7263      00000000 
 7264 e0c8 00000000 		.quad	0
 7264      00000000 
 7265 e0d0 00000000 		.quad	.L235
 7265      00000000 
 7266 e0d8 00000000 		.quad	0
 7266      00000000 
 7267 e0e0 00000000 		.quad	.L235
 7267      00000000 
 7268 e0e8 00000000 		.quad	0
 7268      00000000 
 7269 e0f0 00000000 		.quad	.L235
 7269      00000000 
 7270 e0f8 00000000 		.quad	0
 7270      00000000 
 7271 e100 00000000 		.quad	.L235
 7271      00000000 
 7272 e108 00000000 		.quad	0
 7272      00000000 
 7273 e110 00000000 		.quad	.L235
 7273      00000000 
 7274 e118 00000000 		.quad	0
 7274      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 255


 7275 e120 00000000 		.quad	.L235
 7275      00000000 
 7276 e128 00000000 		.quad	0
 7276      00000000 
 7277 e130 00000000 		.quad	.L235
 7277      00000000 
 7278 e138 00000000 		.quad	0
 7278      00000000 
 7279 e140 00000000 		.quad	.L235
 7279      00000000 
 7280 e148 00000000 		.quad	0
 7280      00000000 
 7281 e150 00000000 		.quad	.L235
 7281      00000000 
 7282 e158 00000000 		.quad	0
 7282      00000000 
 7283 e160 00000000 		.quad	.L235
 7283      00000000 
 7284 e168 00000000 		.quad	0
 7284      00000000 
 7285 e170 00000000 		.quad	.L235
 7285      00000000 
 7286 e178 00000000 		.quad	0
 7286      00000000 
 7287 e180 00000000 		.quad	.L235
 7287      00000000 
 7288 e188 00000000 		.quad	0
 7288      00000000 
 7289 e190 00000000 		.quad	.L235
 7289      00000000 
 7290 e198 00000000 		.quad	0
 7290      00000000 
 7291 e1a0 00000000 		.quad	.L235
 7291      00000000 
 7292 e1a8 00000000 		.quad	0
 7292      00000000 
 7293 e1b0 00000000 		.quad	.L235
 7293      00000000 
 7294 e1b8 00000000 		.quad	0
 7294      00000000 
 7295 e1c0 00000000 		.quad	.L235
 7295      00000000 
 7296 e1c8 00000000 		.quad	0
 7296      00000000 
 7297 e1d0 00000000 		.quad	.L235
 7297      00000000 
 7298 e1d8 00000000 		.quad	0
 7298      00000000 
 7299 e1e0 00000000 		.quad	.L235
 7299      00000000 
 7300 e1e8 00000000 		.quad	0
 7300      00000000 
 7301 e1f0 00000000 		.quad	.L235
 7301      00000000 
 7302 e1f8 00000000 		.quad	0
 7302      00000000 
 7303 e200 00000000 		.quad	.L235
GAS LISTING /tmp/cc15eBE3.s 			page 256


 7303      00000000 
 7304 e208 00000000 		.quad	0
 7304      00000000 
 7305 e210 00000000 		.quad	.L235
 7305      00000000 
 7306 e218 00000000 		.quad	0
 7306      00000000 
 7307 e220 00000000 		.quad	.L235
 7307      00000000 
 7308 e228 00000000 		.quad	0
 7308      00000000 
 7309 e230 00000000 		.quad	.L235
 7309      00000000 
 7310 e238 00000000 		.quad	0
 7310      00000000 
 7311 e240 00000000 		.quad	.L235
 7311      00000000 
 7312 e248 00000000 		.quad	0
 7312      00000000 
 7313 e250 00000000 		.quad	.L235
 7313      00000000 
 7314 e258 00000000 		.quad	0
 7314      00000000 
 7315 e260 00000000 		.quad	.L235
 7315      00000000 
 7316 e268 00000000 		.quad	0
 7316      00000000 
 7317 e270 00000000 		.quad	.L235
 7317      00000000 
 7318 e278 00000000 		.quad	0
 7318      00000000 
 7319 e280 00000000 		.quad	.L235
 7319      00000000 
 7320 e288 00000000 		.quad	0
 7320      00000000 
 7321 e290 00000000 		.quad	.L235
 7321      00000000 
 7322 e298 00000000 		.quad	0
 7322      00000000 
 7323 e2a0 00000000 		.quad	.L235
 7323      00000000 
 7324 e2a8 00000000 		.quad	0
 7324      00000000 
 7325 e2b0 00000000 		.quad	.L235
 7325      00000000 
 7326 e2b8 00000000 		.quad	0
 7326      00000000 
 7327 e2c0 00000000 		.quad	.L235
 7327      00000000 
 7328 e2c8 00000000 		.quad	0
 7328      00000000 
 7329 e2d0 00000000 		.quad	.L235
 7329      00000000 
 7330 e2d8 00000000 		.quad	0
 7330      00000000 
 7331              		.text
 7332              		.globl	vm_cpu_super
GAS LISTING /tmp/cc15eBE3.s 			page 257


 7334              	vm_cpu_super:
 7335              	.LFB11:
 7336              		.file 1 "src/vm3.c"
   1:src/vm3.c     **** #include "vm.h"
   2:src/vm3.c     **** #include "syscall.h"
   3:src/vm3.c     **** #include <inttypes.h>
   4:src/vm3.c     **** #include <stdio.h>
   5:src/vm3.c     **** 
   6:src/vm3.c     **** #define FIX_OP 43
   7:src/vm3.c     **** #define INDIRECT_DEBUG 0
   8:src/vm3.c     **** #define T_SIZE 110
   9:src/vm3.c     **** /* Register file. */
  10:src/vm3.c     **** extern uint32_t RF[32];
  11:src/vm3.c     **** /*VM memory vector*/
  12:src/vm3.c     **** extern uint8_t VM_memory[VM_MEMORY_SZ];
  13:src/vm3.c     **** 
  14:src/vm3.c     **** extern uint32_t PC;
  15:src/vm3.c     **** extern uint32_t nPC;
  16:src/vm3.c     **** 
  17:src/vm3.c     **** struct pointer {
  18:src/vm3.c     ****   void * code;
  19:src/vm3.c     ****   struct pointer * next_level;
  20:src/vm3.c     **** };
  21:src/vm3.c     **** void vm_cpu_super(uint32_t newPC, int opt) {
 7337              		.loc 1 21 0
 7338              		.cfi_startproc
 7339              	.LVL0:
 7340 0000 4156     		pushq	%r14
 7341              		.cfi_def_cfa_offset 16
 7342              		.cfi_offset 14, -16
 7343 0002 89FA     		movl	%edi, %edx
  22:src/vm3.c     ****   PC = newPC;
  23:src/vm3.c     ****   nPC = 4;
  24:src/vm3.c     ****   RF[0] = 0; //Register $zero must always be zero
  25:src/vm3.c     ****   RF[31] = 1; //Return default (if the program does not set to zero, should put error)
  26:src/vm3.c     ****   uint32_t HI = 0, LO = 0;
  27:src/vm3.c     ****   uint32_t offset = 4;
  28:src/vm3.c     ****   uint8_t halted = 0;
  29:src/vm3.c     ****   
  30:src/vm3.c     ****   uint8_t rs;
  31:src/vm3.c     ****   uint8_t rt;
  32:src/vm3.c     ****   uint8_t rd;
  33:src/vm3.c     ****   int16_t immediate;
  34:src/vm3.c     ****   uint32_t address;
  35:src/vm3.c     ****   
  36:src/vm3.c     ****   uint8_t shamt;
  37:src/vm3.c     ****   uint8_t funct;
  38:src/vm3.c     ****   
  39:src/vm3.c     ****   uint64_t mult;
  40:src/vm3.c     ****   
  41:src/vm3.c     ****   #if INDIRECT_DEBUG
  42:src/vm3.c     ****   int counter=0;
  43:src/vm3.c     ****   #endif
  44:src/vm3.c     ****   
  45:src/vm3.c     ****   uint32_t instr0;
  46:src/vm3.c     ****   uint8_t op0;
  47:src/vm3.c     ****   uint32_t instr1;
GAS LISTING /tmp/cc15eBE3.s 			page 258


  48:src/vm3.c     ****   uint8_t op1;
  49:src/vm3.c     **** 
  50:src/vm3.c     **** struct pointer * p;
  51:src/vm3.c     **** struct pointer arraylui[T_SIZE] = {  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&luiPLUSsrl, NULL }
 7344              		.loc 1 51 0
 7345 0004 B9B80100 		movl	$440, %ecx
 7345      00
  21:src/vm3.c     ****   PC = newPC;
 7346              		.loc 1 21 0
 7347 0009 4155     		pushq	%r13
 7348              		.cfi_def_cfa_offset 24
 7349              		.cfi_offset 13, -24
 7350 000b 4154     		pushq	%r12
 7351              		.cfi_def_cfa_offset 32
 7352              		.cfi_offset 12, -32
 7353 000d 55       		pushq	%rbp
 7354              		.cfi_def_cfa_offset 40
 7355              		.cfi_offset 6, -40
 7356 000e 89F5     		movl	%esi, %ebp
 7357              		.loc 1 51 0
 7358 0010 BE000000 		movl	$.LC0, %esi
 7358      00
 7359              	.LVL1:
  21:src/vm3.c     ****   PC = newPC;
 7360              		.loc 1 21 0
 7361 0015 53       		pushq	%rbx
 7362              		.cfi_def_cfa_offset 48
 7363              		.cfi_offset 3, -48
 7364 0016 4881ECC0 		subq	$59840, %rsp
 7364      E90000
 7365              		.cfi_def_cfa_offset 59888
  22:src/vm3.c     ****   PC = newPC;
 7366              		.loc 1 22 0
 7367 001d 893D0000 		movl	%edi, PC(%rip)
 7367      0000
  23:src/vm3.c     ****   RF[0] = 0; //Register $zero must always be zero
 7368              		.loc 1 23 0
 7369 0023 C7050000 		movl	$4, nPC(%rip)
 7369      00000400 
 7369      0000
 7370              		.loc 1 51 0
 7371 002d 4889E7   		movq	%rsp, %rdi
 7372              	.LVL2:
  24:src/vm3.c     ****   RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 7373              		.loc 1 24 0
 7374 0030 C7050000 		movl	$0, RF(%rip)
 7374      00000000 
 7374      0000
  25:src/vm3.c     ****   uint32_t HI = 0, LO = 0;
 7375              		.loc 1 25 0
 7376 003a C7050000 		movl	$1, RF+124(%rip)
 7376      00000100 
 7376      0000
 7377              	.LVL3:
 7378              		.loc 1 51 0
 7379 0044 F3A5     		rep movsl
  52:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
GAS LISTING /tmp/cc15eBE3.s 			page 259


  53:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  54:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  55:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  56:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&luiPLUSaddiu, NULL }  ,  { &&lui, NULL }  ,  { &&lu
  57:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  58:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  59:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  60:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  61:src/vm3.c     ****  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }  ,  { &&lui, NULL }
  62:src/vm3.c     ****  }; 
  63:src/vm3.c     **** 
  64:src/vm3.c     **** struct pointer arraymovn[T_SIZE] = {  { &&movnPLUSsll, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NU
 7380              		.loc 1 64 0
 7381 0046 488DBC24 		leaq	1760(%rsp), %rdi
 7381      E0060000 
 7382 004e BE000000 		movl	$.LC1, %esi
 7382      00
  65:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  66:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  67:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  68:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  69:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movnPLUSaddiu, NULL }  ,  { &&movn, NULL }  ,  { 
  70:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  71:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  72:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  73:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  74:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
  75:src/vm3.c     ****  }; 
  76:src/vm3.c     **** 
  77:src/vm3.c     **** struct pointer arraysll[T_SIZE] = {  { &&sllPLUSsll, NULL }  ,  { &&sll, NULL }  ,  { &&sllPLUSsrl,
  78:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }
  79:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sllPLUSmult
  80:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sllPLUSaddu, NULL }  ,  { &&sll
  81:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sllPLUSslt, NULL }  ,  { &&sll, NULL }  ,  { &&sll,
  82:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sllPLUSaddiu, NULL }  ,  { &&sllPLUSslti, NULL }  ,
  83:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }
  84:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }
  85:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sllPLUSsb, NULL }  ,  { &&sll, 
  86:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }
  87:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }
  88:src/vm3.c     ****  }; 
  89:src/vm3.c     **** 
  90:src/vm3.c     **** struct pointer arraymfhi[T_SIZE] = {  { &&mfhiPLUSsll, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhiPLUS
  91:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
  92:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhiPLU
  93:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
  94:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
  95:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhiPLUSaddiu, NULL }  ,  { &&mfhi, NULL }  ,  { 
  96:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
  97:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
  98:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
  99:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
 100:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
 101:src/vm3.c     ****  }; 
 102:src/vm3.c     **** 
 103:src/vm3.c     **** struct pointer arrayor[T_SIZE] = {  { &&orPLUSsll, NULL }  ,  { &&or, NULL }  ,  { &&orPLUSsrl, NUL
 104:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
GAS LISTING /tmp/cc15eBE3.s 			page 260


 105:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 106:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&orPLUSaddu, NULL }  ,  { &&or, NUL
 107:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&orPLUSsltu, NULL }  ,  { &&or, NUL
 108:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 109:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 110:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 111:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 112:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 113:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 114:src/vm3.c     ****  }; 
 115:src/vm3.c     **** 
 116:src/vm3.c     **** struct pointer arrayaddu[T_SIZE] = {  { &&adduPLUSsll, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &
 117:src/vm3.c     ****  ,  { &&addu, NULL }  ,  { &&addu, NULL }  ,  { &&addu, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { 
 118:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&a
 119:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&addu, NULL }  ,  { &&adduPLUSad
 120:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSslt, NULL }  ,  { &&add
 121:src/vm3.c     ****  ,  { &&addu, NULL }  ,  { &&addu, NULL }  ,  { &&adduPLUSaddiu, NULL }  ,  { &&adduPLUSslti, NULL 
 122:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&a
 123:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&a
 124:src/vm3.c     ****  ,  { &&addu, NULL }  ,  { &&addu, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&addu, NULL }  ,  { 
 125:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&a
 126:src/vm3.c     ****  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { &&a
 127:src/vm3.c     ****  }; 
 128:src/vm3.c     **** 
 129:src/vm3.c     **** struct pointer arraysltu[T_SIZE] = {  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,
 130:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltuPLUSmovn, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &
 131:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 132:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 133:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 134:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltuPLUSaddiu, NULL }  ,  { &&sltu, NULL }  ,  { 
 135:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 136:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 137:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 138:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 139:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, N
 140:src/vm3.c     ****  }; 
 141:src/vm3.c     **** 
 142:src/vm3.c     **** struct pointer arraysb[T_SIZE] = {  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb
 143:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 144:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 145:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 146:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 147:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 148:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 149:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 150:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sbPLUSsh, NULL 
 151:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 152:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 153:src/vm3.c     ****  }; 
 154:src/vm3.c     **** 
 155:src/vm3.c     **** struct pointer arrayxor[T_SIZE] = {  { &&xorPLUSsll, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xo
 156:src/vm3.c     ****  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xo
 157:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorP
 158:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xor, NULL }  ,  { &&xor, NULL }  
 159:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xor, NULL }  ,  { &&xor, NULL }  
 160:src/vm3.c     ****  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xorPLUSslti, NULL }  ,  { &&xor
 161:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorP
GAS LISTING /tmp/cc15eBE3.s 			page 261


 162:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorP
 163:src/vm3.c     ****  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xor, NULL }  ,  { &&xo
 164:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorP
 165:src/vm3.c     ****  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xorP
 166:src/vm3.c     ****  }; 
 167:src/vm3.c     **** 
 168:src/vm3.c     **** struct pointer arraylw[T_SIZE] = {  { &&lwPLUSsll, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lw, N
 169:src/vm3.c     ****  ,  { &&lw, NULL }  ,  { &&lw, NULL }  ,  { &&lw, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUS
 170:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSe
 171:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lw, NULL }  ,  { &&lwPLUSaddu, NULL
 172:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSslt, NULL }  ,  { &&lwPLUSslt
 173:src/vm3.c     ****  ,  { &&lwPLUSbgtz, NULL }  ,  { &&lw, NULL }  ,  { &&lwPLUSaddiu, NULL }  ,  { &&lw, NULL }  ,  { 
 174:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSe
 175:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSe
 176:src/vm3.c     ****  ,  { &&lw, NULL }  ,  { &&lw, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lw, NULL }  ,  { &&lw, NU
 177:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSe
 178:src/vm3.c     ****  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUSe
 179:src/vm3.c     ****  }; 
 180:src/vm3.c     **** 
 181:src/vm3.c     **** struct pointer arrayandi[T_SIZE] = {  { &&andiPLUSsll, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NU
 182:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 183:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 184:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 185:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 186:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 187:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 188:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 189:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 190:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 191:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 192:src/vm3.c     ****  }; 
 193:src/vm3.c     **** 
 194:src/vm3.c     **** struct pointer arrayslt[T_SIZE] = {  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { 
 195:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 196:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 197:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&sltPLUSaddu, NULL }  ,  { &&slt
 198:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 199:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 200:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 201:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 202:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 203:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 204:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
 205:src/vm3.c     ****  }; 
 206:src/vm3.c     **** 
 207:src/vm3.c     **** struct pointer arrayblez[T_SIZE] = {  { &&blezPLUSsll, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NU
 208:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 209:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 210:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 211:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 212:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blezPLUSaddiu, NULL }  ,  { &&blez, NULL }  ,  { 
 213:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 214:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 215:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 216:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 217:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 218:src/vm3.c     ****  }; 
GAS LISTING /tmp/cc15eBE3.s 			page 262


 219:src/vm3.c     **** 
 220:src/vm3.c     **** struct pointer arraybeq[T_SIZE] = {  { &&beqPLUSsll, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 221:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 222:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 223:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beqPLUSaddu, NULL }  ,  { &&beq
 224:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 225:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beqPLUSaddiu, NULL }  ,  { &&beq, NULL }  ,  { &&be
 226:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 227:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 228:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 229:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 230:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 231:src/vm3.c     ****  }; 
 232:src/vm3.c     **** 
 233:src/vm3.c     **** struct pointer arrayand[T_SIZE] = {  { &&andPLUSsll, NULL }  ,  { &&and, NULL }  ,  { &&andPLUSsrl,
 234:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 235:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 236:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 237:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 238:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 239:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 240:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 241:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 242:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 243:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 244:src/vm3.c     ****  }; 
 245:src/vm3.c     **** 
 246:src/vm3.c     **** struct pointer arrayaddiu[T_SIZE] = {  { &&addiuPLUSsll, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  
 247:src/vm3.c     ****  ,  { &&addiu, NULL }  ,  { &&addiu, NULL }  ,  { &&addiuPLUSsysc, NULL }  ,  { &&addiuPLUSerror, N
 248:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { 
 249:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiu, NULL }  ,  { &&addiuPL
 250:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSslt, NULL }  ,  { &&
 251:src/vm3.c     ****  ,  { &&addiu, NULL }  ,  { &&addiu, NULL }  ,  { &&addiuPLUSaddiu, NULL }  ,  { &&addiuPLUSslti, N
 252:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { 
 253:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { 
 254:src/vm3.c     ****  ,  { &&addiu, NULL }  ,  { &&addiu, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiu, NULL }  ,
 255:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { 
 256:src/vm3.c     ****  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { &&addiuPLUSerror, NULL }  ,  { 
 257:src/vm3.c     ****  }; 
 258:src/vm3.c     **** 
 259:src/vm3.c     **** struct pointer arraymult[T_SIZE] = {  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,
 260:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 261:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 262:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 263:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 264:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 265:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 266:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 267:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 268:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 269:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 270:src/vm3.c     ****  }; 
 271:src/vm3.c     **** 
 272:src/vm3.c     **** struct pointer arraysysc[T_SIZE] = {  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,
 273:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 274:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 275:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
GAS LISTING /tmp/cc15eBE3.s 			page 263


 276:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 277:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 278:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 279:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 280:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 281:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 282:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 283:src/vm3.c     ****  }; 
 284:src/vm3.c     **** 
 285:src/vm3.c     **** struct pointer arrayerror[T_SIZE] = {  { &&error, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&err
 286:src/vm3.c     ****  ,  { &&error, NULL }  ,  { &&error, NULL }  ,  { &&error, NULL }  ,  { &&errorPLUSerror, NULL }  ,
 287:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { 
 288:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&error, NULL }  ,  { &&errorPL
 289:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&error, NULL }  ,  { &&error, 
 290:src/vm3.c     ****  ,  { &&error, NULL }  ,  { &&error, NULL }  ,  { &&errorPLUSaddiu, NULL }  ,  { &&error, NULL }  ,
 291:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { 
 292:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { 
 293:src/vm3.c     ****  ,  { &&error, NULL }  ,  { &&error, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&error, NULL }  ,
 294:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { 
 295:src/vm3.c     ****  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { &&errorPLUSerror, NULL }  ,  { 
 296:src/vm3.c     ****  }; 
 297:src/vm3.c     **** 
 298:src/vm3.c     **** struct pointer arraynor[T_SIZE] = {  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&norPLUSsrl, NULL }
 299:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 300:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 301:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 302:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 303:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 304:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 305:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 306:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 307:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 308:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 309:src/vm3.c     ****  }; 
 310:src/vm3.c     **** 
 311:src/vm3.c     **** struct pointer arrayslti[T_SIZE] = {  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,
 312:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&sltiPLUSmovn, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &
 313:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 314:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 315:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 316:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 317:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 318:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 319:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 320:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 321:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &&slti, N
 322:src/vm3.c     ****  }; 
 323:src/vm3.c     **** 
 324:src/vm3.c     **** struct pointer arraylbu[T_SIZE] = {  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { 
 325:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 326:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 327:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 328:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 329:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbuPLUSaddiu, NULL }  ,  { &&lbu, NULL }  ,  { &&lb
 330:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 331:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 332:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
GAS LISTING /tmp/cc15eBE3.s 			page 264


 333:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 334:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 335:src/vm3.c     ****  }; 
 336:src/vm3.c     **** 
 337:src/vm3.c     **** struct pointer arraysw[T_SIZE] = {  { &&swPLUSsll, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  , 
 338:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 339:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 340:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&swPLUSaddu, NULL }  ,  { &&sw, NUL
 341:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 342:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&swPLUSaddiu, NULL }  ,  { &&swPLUSslti, NULL }  ,  { 
 343:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 344:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 345:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&swPLUSsb, NULL }  ,  { &&sw, NULL 
 346:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 347:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 348:src/vm3.c     ****  }; 
 349:src/vm3.c     **** 
 350:src/vm3.c     **** struct pointer arraybne[T_SIZE] = {  { &&bnePLUSsll, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 351:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 352:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 353:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bnePLUSaddu, NULL }  ,  { &&bne
 354:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 355:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bnePLUSaddiu, NULL }  ,  { &&bne, NULL }  ,  { &&bn
 356:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 357:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 358:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 359:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 360:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 361:src/vm3.c     ****  }; 
 362:src/vm3.c     **** 
 363:src/vm3.c     **** struct pointer arrayjump[T_SIZE] = {  { &&jumpPLUSsll, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NU
 364:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 365:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 366:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jumpPLUSaddu, NULL }  ,  { &
 367:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 368:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jumpPLUSaddiu, NULL }  ,  { &&jump, NULL }  ,  { 
 369:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 370:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 371:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 372:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 373:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 374:src/vm3.c     ****  }; 
 375:src/vm3.c     **** 
 376:src/vm3.c     **** struct pointer arrayjal[T_SIZE] = {  { &&jalPLUSsll, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 377:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 378:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 379:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jalPLUSaddu, NULL }  ,  { &&jal
 380:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 381:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jalPLUSaddiu, NULL }  ,  { &&jal, NULL }  ,  { &&ja
 382:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 383:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 384:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 385:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 386:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 387:src/vm3.c     ****  }; 
 388:src/vm3.c     **** 
 389:src/vm3.c     **** struct pointer arrayjr[T_SIZE] = {  { &&jrPLUSsll, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  , 
GAS LISTING /tmp/cc15eBE3.s 			page 265


 390:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 391:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 392:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 393:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 394:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jrPLUSaddiu, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NU
 395:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 396:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 397:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 398:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 399:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 400:src/vm3.c     ****  }; 
 401:src/vm3.c     **** 
 402:src/vm3.c     **** struct pointer arraysrl[T_SIZE] = {  { &&srlPLUSsll, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&sr
 403:src/vm3.c     ****  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&sr
 404:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlP
 405:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srl, NULL }  ,  { &&srlPLUSaddu, 
 406:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srl, NULL }  ,  { &&srl, NULL }  
 407:src/vm3.c     ****  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srl, NULL }
 408:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlP
 409:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlP
 410:src/vm3.c     ****  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srl, NULL }  ,  { &&sr
 411:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlP
 412:src/vm3.c     ****  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&srlP
 413:src/vm3.c     ****  }; 
 414:src/vm3.c     **** 
 415:src/vm3.c     **** struct pointer arraysubu[T_SIZE] = {  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,
 416:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 417:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 418:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subuPLUSaddu, NULL }  ,  { &
 419:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 420:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subuPLUSaddiu, NULL }  ,  { &&subu, NULL }  ,  { 
 421:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 422:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 423:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 424:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 425:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 426:src/vm3.c     ****  }; 
 427:src/vm3.c     **** 
 428:src/vm3.c     **** struct pointer arraysh[T_SIZE] = {  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh
 429:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 430:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 431:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 432:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 433:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 434:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 435:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 436:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 437:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 438:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 439:src/vm3.c     ****  }; 
 440:src/vm3.c     **** 
 441:src/vm3.c     **** struct pointer arrayori[T_SIZE] = {  { &&oriPLUSsll, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 442:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 443:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&oriPLUSmult
 444:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&oriPLUSaddu, NULL }  ,  { &&ori
 445:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 446:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&oriPLUSaddiu, NULL }  ,  { &&ori, NULL }  ,  { &&or
GAS LISTING /tmp/cc15eBE3.s 			page 266


 447:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 448:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 449:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 450:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 451:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 452:src/vm3.c     ****  }; 
 453:src/vm3.c     **** 
 454:src/vm3.c     **** struct pointer arraybgtz[T_SIZE] = {  { &&bgtzPLUSsll, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NU
 455:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 456:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 457:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 458:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 459:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 460:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 461:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 462:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 463:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 464:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 465:src/vm3.c     ****  }; 
 466:src/vm3.c     **** 
 467:src/vm3.c     **** struct pointer arraysra[T_SIZE] = {  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { 
 468:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 469:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 470:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sraPLUSaddu, NULL }  ,  { &&sra
 471:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 472:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 473:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 474:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 475:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 476:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 477:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 478:src/vm3.c     ****  }; 
 479:src/vm3.c     **** 
 480:src/vm3.c     **** struct pointer array[T_SIZE] = {  { NULL, arraysll }  ,  { NULL, arrayerror }  ,  { NULL, arraysrl 
 7383              		.loc 1 480 0
 7384 0053 488D8424 		leaq	3520(%rsp), %rax
 7384      C00D0000 
  64:src/vm3.c     ****  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, NULL }  ,  { &&movn, N
 7385              		.loc 1 64 0
 7386 005b 66B9B801 		movw	$440, %cx
 7387 005f F3A5     		rep movsl
  77:src/vm3.c     ****  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }  ,  { &&sll, NULL }
 7388              		.loc 1 77 0
 7389 0061 488DBC24 		leaq	3520(%rsp), %rdi
 7389      C00D0000 
 7390 0069 BE000000 		movl	$.LC2, %esi
 7390      00
 7391 006e 66B9B801 		movw	$440, %cx
 7392 0072 F3A5     		rep movsl
  90:src/vm3.c     ****  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, NULL }  ,  { &&mfhi, N
 7393              		.loc 1 90 0
 7394 0074 488DBC24 		leaq	5280(%rsp), %rdi
 7394      A0140000 
 7395 007c BE000000 		movl	$.LC3, %esi
 7395      00
 7396 0081 66B9B801 		movw	$440, %cx
 7397 0085 F3A5     		rep movsl
GAS LISTING /tmp/cc15eBE3.s 			page 267


 103:src/vm3.c     ****  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  { &&or, NULL }  ,  
 7398              		.loc 1 103 0
 7399 0087 488DBC24 		leaq	7040(%rsp), %rdi
 7399      801B0000 
 7400 008f BE000000 		movl	$.LC4, %esi
 7400      00
 7401 0094 66B9B801 		movw	$440, %cx
 7402 0098 F3A5     		rep movsl
 116:src/vm3.c     ****  ,  { &&addu, NULL }  ,  { &&addu, NULL }  ,  { &&addu, NULL }  ,  { &&adduPLUSerror, NULL }  ,  { 
 7403              		.loc 1 116 0
 7404 009a 488DBC24 		leaq	8800(%rsp), %rdi
 7404      60220000 
 7405 00a2 BE000000 		movl	$.LC5, %esi
 7405      00
 7406 00a7 66B9B801 		movw	$440, %cx
 7407 00ab F3A5     		rep movsl
 129:src/vm3.c     ****  ,  { &&sltu, NULL }  ,  { &&sltuPLUSmovn, NULL }  ,  { &&sltu, NULL }  ,  { &&sltu, NULL }  ,  { &
 7408              		.loc 1 129 0
 7409 00ad 488DBC24 		leaq	10560(%rsp), %rdi
 7409      40290000 
 7410 00b5 BE000000 		movl	$.LC6, %esi
 7410      00
 7411 00ba 66B9B801 		movw	$440, %cx
 7412 00be F3A5     		rep movsl
 142:src/vm3.c     ****  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  { &&sb, NULL }  ,  
 7413              		.loc 1 142 0
 7414 00c0 488DBC24 		leaq	12320(%rsp), %rdi
 7414      20300000 
 7415 00c8 BE000000 		movl	$.LC7, %esi
 7415      00
 7416 00cd 66B9B801 		movw	$440, %cx
 7417 00d1 F3A5     		rep movsl
 155:src/vm3.c     ****  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xor, NULL }  ,  { &&xorPLUSerror, NULL }  ,  { &&xo
 7418              		.loc 1 155 0
 7419 00d3 488DBC24 		leaq	14080(%rsp), %rdi
 7419      00370000 
 7420 00db BE000000 		movl	$.LC8, %esi
 7420      00
 7421 00e0 66B9B801 		movw	$440, %cx
 7422 00e4 F3A5     		rep movsl
 168:src/vm3.c     ****  ,  { &&lw, NULL }  ,  { &&lw, NULL }  ,  { &&lw, NULL }  ,  { &&lwPLUSerror, NULL }  ,  { &&lwPLUS
 7423              		.loc 1 168 0
 7424 00e6 488DBC24 		leaq	15840(%rsp), %rdi
 7424      E03D0000 
 7425 00ee BE000000 		movl	$.LC9, %esi
 7425      00
 7426 00f3 66B9B801 		movw	$440, %cx
 7427 00f7 F3A5     		rep movsl
 181:src/vm3.c     ****  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, NULL }  ,  { &&andi, N
 7428              		.loc 1 181 0
 7429 00f9 488DBC24 		leaq	17600(%rsp), %rdi
 7429      C0440000 
 7430 0101 BE000000 		movl	$.LC10, %esi
 7430      00
 7431 0106 66B9B801 		movw	$440, %cx
 7432 010a F3A5     		rep movsl
 194:src/vm3.c     ****  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }  ,  { &&slt, NULL }
GAS LISTING /tmp/cc15eBE3.s 			page 268


 7433              		.loc 1 194 0
 7434 010c 488DBC24 		leaq	19360(%rsp), %rdi
 7434      A04B0000 
 7435 0114 BE000000 		movl	$.LC11, %esi
 7435      00
 7436 0119 66B9B801 		movw	$440, %cx
 7437 011d F3A5     		rep movsl
 207:src/vm3.c     ****  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, NULL }  ,  { &&blez, N
 7438              		.loc 1 207 0
 7439 011f 488DBC24 		leaq	21120(%rsp), %rdi
 7439      80520000 
 7440 0127 BE000000 		movl	$.LC12, %esi
 7440      00
 7441 012c 66B9B801 		movw	$440, %cx
 7442 0130 F3A5     		rep movsl
 220:src/vm3.c     ****  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }  ,  { &&beq, NULL }
 7443              		.loc 1 220 0
 7444 0132 488DBC24 		leaq	22880(%rsp), %rdi
 7444      60590000 
 7445 013a BE000000 		movl	$.LC13, %esi
 7445      00
 7446 013f 66B9B801 		movw	$440, %cx
 7447 0143 F3A5     		rep movsl
 233:src/vm3.c     ****  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }  ,  { &&and, NULL }
 7448              		.loc 1 233 0
 7449 0145 488DBC24 		leaq	24640(%rsp), %rdi
 7449      40600000 
 7450 014d BE000000 		movl	$.LC14, %esi
 7450      00
 7451 0152 66B9B801 		movw	$440, %cx
 7452 0156 F3A5     		rep movsl
 246:src/vm3.c     ****  ,  { &&addiu, NULL }  ,  { &&addiu, NULL }  ,  { &&addiuPLUSsysc, NULL }  ,  { &&addiuPLUSerror, N
 7453              		.loc 1 246 0
 7454 0158 488DBC24 		leaq	26400(%rsp), %rdi
 7454      20670000 
 7455 0160 BE000000 		movl	$.LC15, %esi
 7455      00
 7456 0165 66B9B801 		movw	$440, %cx
 7457 0169 F3A5     		rep movsl
 259:src/vm3.c     ****  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, NULL }  ,  { &&mult, N
 7458              		.loc 1 259 0
 7459 016b 488DBC24 		leaq	28160(%rsp), %rdi
 7459      006E0000 
 7460 0173 BE000000 		movl	$.LC16, %esi
 7460      00
 7461 0178 66B9B801 		movw	$440, %cx
 7462 017c F3A5     		rep movsl
 272:src/vm3.c     ****  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, NULL }  ,  { &&sysc, N
 7463              		.loc 1 272 0
 7464 017e 488DBC24 		leaq	29920(%rsp), %rdi
 7464      E0740000 
 7465 0186 BE000000 		movl	$.LC17, %esi
 7465      00
 7466 018b 66B9B801 		movw	$440, %cx
 7467 018f F3A5     		rep movsl
 285:src/vm3.c     ****  ,  { &&error, NULL }  ,  { &&error, NULL }  ,  { &&error, NULL }  ,  { &&errorPLUSerror, NULL }  ,
 7468              		.loc 1 285 0
GAS LISTING /tmp/cc15eBE3.s 			page 269


 7469 0191 488DBC24 		leaq	31680(%rsp), %rdi
 7469      C07B0000 
 7470 0199 BE000000 		movl	$.LC18, %esi
 7470      00
 7471 019e 66B9B801 		movw	$440, %cx
 7472 01a2 F3A5     		rep movsl
 298:src/vm3.c     ****  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }  ,  { &&nor, NULL }
 7473              		.loc 1 298 0
 7474 01a4 488DBC24 		leaq	33440(%rsp), %rdi
 7474      A0820000 
 7475 01ac BE000000 		movl	$.LC19, %esi
 7475      00
 7476 01b1 66B9B801 		movw	$440, %cx
 7477 01b5 F3A5     		rep movsl
 311:src/vm3.c     ****  ,  { &&slti, NULL }  ,  { &&sltiPLUSmovn, NULL }  ,  { &&slti, NULL }  ,  { &&slti, NULL }  ,  { &
 7478              		.loc 1 311 0
 7479 01b7 488DBC24 		leaq	35200(%rsp), %rdi
 7479      80890000 
 7480 01bf BE000000 		movl	$.LC20, %esi
 7480      00
 7481 01c4 66B9B801 		movw	$440, %cx
 7482 01c8 F3A5     		rep movsl
 324:src/vm3.c     ****  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }  ,  { &&lbu, NULL }
 7483              		.loc 1 324 0
 7484 01ca 488DBC24 		leaq	36960(%rsp), %rdi
 7484      60900000 
 7485 01d2 BE000000 		movl	$.LC21, %esi
 7485      00
 7486 01d7 66B9B801 		movw	$440, %cx
 7487 01db F3A5     		rep movsl
 337:src/vm3.c     ****  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  { &&sw, NULL }  ,  
 7488              		.loc 1 337 0
 7489 01dd 488DBC24 		leaq	38720(%rsp), %rdi
 7489      40970000 
 7490 01e5 BE000000 		movl	$.LC22, %esi
 7490      00
 7491 01ea 66B9B801 		movw	$440, %cx
 7492 01ee F3A5     		rep movsl
 350:src/vm3.c     ****  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }  ,  { &&bne, NULL }
 7493              		.loc 1 350 0
 7494 01f0 488DBC24 		leaq	40480(%rsp), %rdi
 7494      209E0000 
 7495 01f8 BE000000 		movl	$.LC23, %esi
 7495      00
 7496 01fd 66B9B801 		movw	$440, %cx
 7497 0201 F3A5     		rep movsl
 363:src/vm3.c     ****  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, NULL }  ,  { &&jump, N
 7498              		.loc 1 363 0
 7499 0203 488DBC24 		leaq	42240(%rsp), %rdi
 7499      00A50000 
 7500 020b BE000000 		movl	$.LC24, %esi
 7500      00
 7501 0210 66B9B801 		movw	$440, %cx
 7502 0214 F3A5     		rep movsl
 376:src/vm3.c     ****  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }  ,  { &&jal, NULL }
 7503              		.loc 1 376 0
 7504 0216 488DBC24 		leaq	44000(%rsp), %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 270


 7504      E0AB0000 
 7505 021e BE000000 		movl	$.LC25, %esi
 7505      00
 7506 0223 66B9B801 		movw	$440, %cx
 7507 0227 F3A5     		rep movsl
 389:src/vm3.c     ****  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  { &&jr, NULL }  ,  
 7508              		.loc 1 389 0
 7509 0229 488DBC24 		leaq	45760(%rsp), %rdi
 7509      C0B20000 
 7510 0231 BE000000 		movl	$.LC26, %esi
 7510      00
 7511 0236 66B9B801 		movw	$440, %cx
 7512 023a F3A5     		rep movsl
 402:src/vm3.c     ****  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srl, NULL }  ,  { &&srlPLUSerror, NULL }  ,  { &&sr
 7513              		.loc 1 402 0
 7514 023c 488DBC24 		leaq	47520(%rsp), %rdi
 7514      A0B90000 
 7515 0244 BE000000 		movl	$.LC27, %esi
 7515      00
 7516 0249 66B9B801 		movw	$440, %cx
 7517 024d F3A5     		rep movsl
 415:src/vm3.c     ****  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, NULL }  ,  { &&subu, N
 7518              		.loc 1 415 0
 7519 024f 488DBC24 		leaq	49280(%rsp), %rdi
 7519      80C00000 
 7520 0257 BE000000 		movl	$.LC28, %esi
 7520      00
 7521 025c 66B9B801 		movw	$440, %cx
 7522 0260 F3A5     		rep movsl
 428:src/vm3.c     ****  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  { &&sh, NULL }  ,  
 7523              		.loc 1 428 0
 7524 0262 488DBC24 		leaq	51040(%rsp), %rdi
 7524      60C70000 
 7525 026a BE000000 		movl	$.LC29, %esi
 7525      00
 7526 026f 66B9B801 		movw	$440, %cx
 7527 0273 F3A5     		rep movsl
 441:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 7528              		.loc 1 441 0
 7529 0275 488DBC24 		leaq	52800(%rsp), %rdi
 7529      40CE0000 
 7530 027d BE000000 		movl	$.LC30, %esi
 7530      00
 7531              		.loc 1 480 0
 7532 0282 48898424 		movq	%rax, 58088(%rsp)
 7532      E8E20000 
 7533 028a 488D8424 		leaq	31680(%rsp), %rax
 7533      C07B0000 
 7534 0292 48C78424 		movq	$0, 58080(%rsp)
 7534      E0E20000 
 7534      00000000 
 7535 029e 48C78424 		movq	$0, 58096(%rsp)
 7535      F0E20000 
 7535      00000000 
 7536 02aa 48C78424 		movq	$0, 58112(%rsp)
 7536      00E30000 
 7536      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 271


 7537 02b6 48C78424 		movq	$0, 58128(%rsp)
 7537      10E30000 
 7537      00000000 
 7538 02c2 48898424 		movq	%rax, 58104(%rsp)
 7538      F8E20000 
 7539 02ca 48898424 		movq	%rax, 58168(%rsp)
 7539      38E30000 
 7540 02d2 48C78424 		movq	$.L238, 58144(%rsp)
 7540      20E30000 
 7540      00000000 
 7541 02de 48C78424 		movq	$0, 58152(%rsp)
 7541      28E30000 
 7541      00000000 
 441:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 7542              		.loc 1 441 0
 7543 02ea 66B9B801 		movw	$440, %cx
 7544              		.loc 1 480 0
 7545 02ee 48C78424 		movq	$0, 58160(%rsp)
 7545      30E30000 
 7545      00000000 
 7546 02fa 48C78424 		movq	$.L239, 58176(%rsp)
 7546      40E30000 
 7546      00000000 
 441:src/vm3.c     ****  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }  ,  { &&ori, NULL }
 7547              		.loc 1 441 0
 7548 0306 F3A5     		rep movsl
 454:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 7549              		.loc 1 454 0
 7550 0308 488DBC24 		leaq	54560(%rsp), %rdi
 7550      20D50000 
 7551 0310 BE000000 		movl	$.LC31, %esi
 7551      00
 7552              		.loc 1 480 0
 7553 0315 48C78424 		movq	$0, 58184(%rsp)
 7553      48E30000 
 7553      00000000 
 7554 0321 48C78424 		movq	$.L240, 58192(%rsp)
 7554      50E30000 
 7554      00000000 
 7555 032d 48C78424 		movq	$0, 58200(%rsp)
 7555      58E30000 
 7555      00000000 
 7556 0339 48C78424 		movq	$0, 58208(%rsp)
 7556      60E30000 
 7556      00000000 
 7557 0345 48C78424 		movq	$.L241, 58224(%rsp)
 7557      70E30000 
 7557      00000000 
 7558 0351 48C78424 		movq	$0, 58232(%rsp)
 7558      78E30000 
 7558      00000000 
 7559 035d 48C78424 		movq	$.L242, 58240(%rsp)
 7559      80E30000 
 7559      00000000 
 7560 0369 48C78424 		movq	$0, 58248(%rsp)
 7560      88E30000 
 7560      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 272


 7561 0375 48C78424 		movq	$0, 58256(%rsp)
 7561      90E30000 
 7561      00000000 
 454:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 7562              		.loc 1 454 0
 7563 0381 66B9B801 		movw	$440, %cx
 7564              		.loc 1 480 0
 7565 0385 48C78424 		movq	$0, 58272(%rsp)
 7565      A0E30000 
 7565      00000000 
 454:src/vm3.c     ****  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, NULL }  ,  { &&bgtz, N
 7566              		.loc 1 454 0
 7567 0391 F3A5     		rep movsl
 467:src/vm3.c     ****  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }  ,  { &&sra, NULL }
 7568              		.loc 1 467 0
 7569 0393 488DBC24 		leaq	56320(%rsp), %rdi
 7569      00DC0000 
 7570 039b BE000000 		movl	$.LC32, %esi
 7570      00
 7571 03a0 66B9B801 		movw	$440, %cx
 7572 03a4 F3A5     		rep movsl
 7573              		.loc 1 480 0
 7574 03a6 488D8C24 		leaq	47520(%rsp), %rcx
 7574      A0B90000 
 7575 03ae 48898C24 		movq	%rcx, 58120(%rsp)
 7575      08E30000 
 7576 03b6 488D8C24 		leaq	56320(%rsp), %rcx
 7576      00DC0000 
 7577 03be 48898C24 		movq	%rcx, 58136(%rsp)
 7577      18E30000 
 7578 03c6 488D8C24 		leaq	45760(%rsp), %rcx
 7578      C0B20000 
 7579 03ce 48898C24 		movq	%rcx, 58216(%rsp)
 7579      68E30000 
 7580 03d6 488D8C24 		leaq	1760(%rsp), %rcx
 7580      E0060000 
 7581 03de 48898C24 		movq	%rcx, 58264(%rsp)
 7581      98E30000 
 7582 03e6 488D8C24 		leaq	29920(%rsp), %rcx
 7582      E0740000 
 7583 03ee 48898C24 		movq	%rcx, 58280(%rsp)
 7583      A8E30000 
 7584 03f6 488D8C24 		leaq	5280(%rsp), %rcx
 7584      A0140000 
 7585 03fe 48C78424 		movq	$0, 58288(%rsp)
 7585      B0E30000 
 7585      00000000 
 7586 040a 48898424 		movq	%rax, 58296(%rsp)
 7586      B8E30000 
 7587 0412 48898424 		movq	%rax, 58312(%rsp)
 7587      C8E30000 
 7588 041a 48898C24 		movq	%rcx, 58344(%rsp)
 7588      E8E30000 
 7589 0422 488D8C24 		leaq	28160(%rsp), %rcx
 7589      006E0000 
 7590 042a 48898424 		movq	%rax, 58328(%rsp)
 7590      D8E30000 
GAS LISTING /tmp/cc15eBE3.s 			page 273


 7591 0432 48898424 		movq	%rax, 58408(%rsp)
 7591      28E40000 
 7592 043a 48898424 		movq	%rax, 58424(%rsp)
 7592      38E40000 
 7593 0442 48898C24 		movq	%rcx, 58472(%rsp)
 7593      68E40000 
 7594 044a 488D8C24 		leaq	8800(%rsp), %rcx
 7594      60220000 
 7595 0452 48898424 		movq	%rax, 58440(%rsp)
 7595      48E40000 
 7596 045a 48898424 		movq	%rax, 58456(%rsp)
 7596      58E40000 
 7597 0462 48898424 		movq	%rax, 58536(%rsp)
 7597      A8E40000 
 7598 046a 48898424 		movq	%rax, 58552(%rsp)
 7598      B8E40000 
 7599 0472 48C78424 		movq	$0, 58304(%rsp)
 7599      C0E30000 
 7599      00000000 
 7600 047e 48C78424 		movq	$0, 58320(%rsp)
 7600      D0E30000 
 7600      00000000 
 7601 048a 48C78424 		movq	$0, 58336(%rsp)
 7601      E0E30000 
 7601      00000000 
 7602 0496 48C78424 		movq	$.L243, 58352(%rsp)
 7602      F0E30000 
 7602      00000000 
 7603 04a2 48C78424 		movq	$0, 58360(%rsp)
 7603      F8E30000 
 7603      00000000 
 7604 04ae 48C78424 		movq	$.L244, 58368(%rsp)
 7604      00E40000 
 7604      00000000 
 7605 04ba 48C78424 		movq	$0, 58376(%rsp)
 7605      08E40000 
 7605      00000000 
 7606 04c6 48C78424 		movq	$.L245, 58384(%rsp)
 7606      10E40000 
 7606      00000000 
 7607 04d2 48C78424 		movq	$0, 58392(%rsp)
 7607      18E40000 
 7607      00000000 
 7608 04de 48C78424 		movq	$0, 58400(%rsp)
 7608      20E40000 
 7608      00000000 
 7609 04ea 48C78424 		movq	$0, 58416(%rsp)
 7609      30E40000 
 7609      00000000 
 7610 04f6 48C78424 		movq	$0, 58432(%rsp)
 7610      40E40000 
 7610      00000000 
 7611 0502 48C78424 		movq	$0, 58448(%rsp)
 7611      50E40000 
 7611      00000000 
 7612 050e 48C78424 		movq	$0, 58464(%rsp)
 7612      60E40000 
GAS LISTING /tmp/cc15eBE3.s 			page 274


 7612      00000000 
 7613 051a 48C78424 		movq	$.L246, 58480(%rsp)
 7613      70E40000 
 7613      00000000 
 7614 0526 48C78424 		movq	$0, 58488(%rsp)
 7614      78E40000 
 7614      00000000 
 7615 0532 48C78424 		movq	$.L247, 58496(%rsp)
 7615      80E40000 
 7615      00000000 
 7616 053e 48C78424 		movq	$0, 58504(%rsp)
 7616      88E40000 
 7616      00000000 
 7617 054a 48C78424 		movq	$.L248, 58512(%rsp)
 7617      90E40000 
 7617      00000000 
 7618 0556 48C78424 		movq	$0, 58520(%rsp)
 7618      98E40000 
 7618      00000000 
 7619 0562 48C78424 		movq	$0, 58528(%rsp)
 7619      A0E40000 
 7619      00000000 
 7620 056e 48C78424 		movq	$0, 58544(%rsp)
 7620      B0E40000 
 7620      00000000 
 7621 057a 48C78424 		movq	$0, 58560(%rsp)
 7621      C0E40000 
 7621      00000000 
 7622 0586 48898C24 		movq	%rcx, 58616(%rsp)
 7622      F8E40000 
 7623 058e 488D8C24 		leaq	49280(%rsp), %rcx
 7623      80C00000 
 7624 0596 48898424 		movq	%rax, 58568(%rsp)
 7624      C8E40000 
 7625 059e 48898424 		movq	%rax, 58584(%rsp)
 7625      D8E40000 
 7626 05a6 48898424 		movq	%rax, 58728(%rsp)
 7626      68E50000 
 7627 05ae 48898C24 		movq	%rcx, 58648(%rsp)
 7627      18E50000 
 7628 05b6 488D8C24 		leaq	24640(%rsp), %rcx
 7628      40600000 
 7629 05be 48898424 		movq	%rax, 58744(%rsp)
 7629      78E50000 
 7630 05c6 48C78424 		movq	$0, 58576(%rsp)
 7630      D0E40000 
 7630      00000000 
 7631 05d2 48C78424 		movq	$.L249, 58592(%rsp)
 7631      E0E40000 
 7631      00000000 
 7632 05de 48898C24 		movq	%rcx, 58664(%rsp)
 7632      28E50000 
 7633 05e6 488D8C24 		leaq	7040(%rsp), %rcx
 7633      801B0000 
 7634 05ee 48C78424 		movq	$0, 58600(%rsp)
 7634      E8E40000 
 7634      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 275


 7635 05fa 48C78424 		movq	$0, 58608(%rsp)
 7635      F0E40000 
 7635      00000000 
 7636 0606 48C78424 		movq	$.L250, 58624(%rsp)
 7636      00E50000 
 7636      00000000 
 7637 0612 48898C24 		movq	%rcx, 58680(%rsp)
 7637      38E50000 
 7638 061a 488D8C24 		leaq	14080(%rsp), %rcx
 7638      00370000 
 7639 0622 48C78424 		movq	$0, 58632(%rsp)
 7639      08E50000 
 7639      00000000 
 7640 062e 48C78424 		movq	$0, 58640(%rsp)
 7640      10E50000 
 7640      00000000 
 7641 063a 48C78424 		movq	$0, 58656(%rsp)
 7641      20E50000 
 7641      00000000 
 7642 0646 48898C24 		movq	%rcx, 58696(%rsp)
 7642      48E50000 
 7643 064e 488D8C24 		leaq	33440(%rsp), %rcx
 7643      A0820000 
 7644 0656 48C78424 		movq	$0, 58672(%rsp)
 7644      30E50000 
 7644      00000000 
 7645 0662 48C78424 		movq	$0, 58688(%rsp)
 7645      40E50000 
 7645      00000000 
 7646 066e 48C78424 		movq	$0, 58704(%rsp)
 7646      50E50000 
 7646      00000000 
 7647 067a 48898C24 		movq	%rcx, 58712(%rsp)
 7647      58E50000 
 7648 0682 488D8C24 		leaq	19360(%rsp), %rcx
 7648      A04B0000 
 7649 068a 48C78424 		movq	$0, 58720(%rsp)
 7649      60E50000 
 7649      00000000 
 7650 0696 48C78424 		movq	$0, 58736(%rsp)
 7650      70E50000 
 7650      00000000 
 7651 06a2 48C78424 		movq	$0, 58752(%rsp)
 7651      80E50000 
 7651      00000000 
 7652 06ae 48898C24 		movq	%rcx, 58760(%rsp)
 7652      88E50000 
 7653 06b6 488D8C24 		leaq	10560(%rsp), %rcx
 7653      40290000 
 7654 06be 48C78424 		movq	$0, 58768(%rsp)
 7654      90E50000 
 7654      00000000 
 7655 06ca 48C78424 		movq	$.L251, 58784(%rsp)
 7655      A0E50000 
 7655      00000000 
 7656 06d6 48C78424 		movq	$0, 58792(%rsp)
 7656      A8E50000 
GAS LISTING /tmp/cc15eBE3.s 			page 276


 7656      00000000 
 7657 06e2 48898C24 		movq	%rcx, 58776(%rsp)
 7657      98E50000 
 7658 06ea 488D8C24 		leaq	42240(%rsp), %rcx
 7658      00A50000 
 7659 06f2 48C78424 		movq	$0, 58800(%rsp)
 7659      B0E50000 
 7659      00000000 
 7660 06fe 48C78424 		movq	$0, 58816(%rsp)
 7660      C0E50000 
 7660      00000000 
 7661 070a 48898C24 		movq	%rcx, 58808(%rsp)
 7661      B8E50000 
 7662 0712 488D8C24 		leaq	44000(%rsp), %rcx
 7662      E0AB0000 
 7663 071a 48898C24 		movq	%rcx, 58824(%rsp)
 7663      C8E50000 
 7664 0722 488D8C24 		leaq	22880(%rsp), %rcx
 7664      60590000 
 7665 072a 48C78424 		movq	$0, 58832(%rsp)
 7665      D0E50000 
 7665      00000000 
 7666 0736 48898424 		movq	%rax, 59032(%rsp)
 7666      98E60000 
 7667 073e 48898424 		movq	%rax, 59048(%rsp)
 7667      A8E60000 
 7668 0746 48898C24 		movq	%rcx, 58840(%rsp)
 7668      D8E50000 
 7669 074e 488D8C24 		leaq	40480(%rsp), %rcx
 7669      209E0000 
 7670 0756 48898424 		movq	%rax, 59064(%rsp)
 7670      B8E60000 
 7671 075e 48898424 		movq	%rax, 59080(%rsp)
 7671      C8E60000 
 7672 0766 48898424 		movq	%rax, 59096(%rsp)
 7672      D8E60000 
 7673 076e 48898C24 		movq	%rcx, 58856(%rsp)
 7673      E8E50000 
 7674 0776 488D8C24 		leaq	21120(%rsp), %rcx
 7674      80520000 
 7675 077e 48C78424 		movq	$0, 58848(%rsp)
 7675      E0E50000 
 7675      00000000 
 7676 078a 48C78424 		movq	$0, 58864(%rsp)
 7676      F0E50000 
 7676      00000000 
 7677 0796 48C78424 		movq	$0, 58880(%rsp)
 7677      00E60000 
 7677      00000000 
 7678 07a2 48898C24 		movq	%rcx, 58872(%rsp)
 7678      F8E50000 
 7679 07aa 488D8C24 		leaq	54560(%rsp), %rcx
 7679      20D50000 
 7680 07b2 48C78424 		movq	$.L252, 58896(%rsp)
 7680      10E60000 
 7680      00000000 
 7681 07be 48C78424 		movq	$0, 58904(%rsp)
GAS LISTING /tmp/cc15eBE3.s 			page 277


 7681      18E60000 
 7681      00000000 
 7682 07ca 48C78424 		movq	$0, 58912(%rsp)
 7682      20E60000 
 7682      00000000 
 7683 07d6 48898C24 		movq	%rcx, 58888(%rsp)
 7683      08E60000 
 7684 07de 488D8C24 		leaq	26400(%rsp), %rcx
 7684      20670000 
 7685 07e6 48C78424 		movq	$0, 58928(%rsp)
 7685      30E60000 
 7685      00000000 
 7686 07f2 48C78424 		movq	$.L253, 58944(%rsp)
 7686      40E60000 
 7686      00000000 
 7687 07fe 48C78424 		movq	$0, 58952(%rsp)
 7687      48E60000 
 7687      00000000 
 7688 080a 48898C24 		movq	%rcx, 58920(%rsp)
 7688      28E60000 
 7689 0812 488D8C24 		leaq	35200(%rsp), %rcx
 7689      80890000 
 7690 081a 48C78424 		movq	$0, 58960(%rsp)
 7690      50E60000 
 7690      00000000 
 7691 0826 48C78424 		movq	$0, 58976(%rsp)
 7691      60E60000 
 7691      00000000 
 7692 0832 48C78424 		movq	$.L254, 58992(%rsp)
 7692      70E60000 
 7692      00000000 
 7693 083e 48898C24 		movq	%rcx, 58936(%rsp)
 7693      38E60000 
 7694 0846 488D8C24 		leaq	17600(%rsp), %rcx
 7694      C0440000 
 7695 084e 48C78424 		movq	$0, 59000(%rsp)
 7695      78E60000 
 7695      00000000 
 7696 085a 48C78424 		movq	$0, 59008(%rsp)
 7696      80E60000 
 7696      00000000 
 7697 0866 4889A424 		movq	%rsp, 59016(%rsp)
 7697      88E60000 
 7698 086e 48898C24 		movq	%rcx, 58968(%rsp)
 7698      58E60000 
 7699 0876 488D8C24 		leaq	52800(%rsp), %rcx
 7699      40CE0000 
 7700 087e 48C78424 		movq	$0, 59024(%rsp)
 7700      90E60000 
 7700      00000000 
 7701 088a 48C78424 		movq	$0, 59040(%rsp)
 7701      A0E60000 
 7701      00000000 
 7702 0896 48C78424 		movq	$0, 59056(%rsp)
 7702      B0E60000 
 7702      00000000 
 7703 08a2 48898C24 		movq	%rcx, 58984(%rsp)
GAS LISTING /tmp/cc15eBE3.s 			page 278


 7703      68E60000 
 7704 08aa 488D8C24 		leaq	15840(%rsp), %rcx
 7704      E03D0000 
 7705 08b2 48C78424 		movq	$0, 59072(%rsp)
 7705      C0E60000 
 7705      00000000 
 7706 08be 48C78424 		movq	$0, 59088(%rsp)
 7706      D0E60000 
 7706      00000000 
 7707 08ca 48C78424 		movq	$0, 59104(%rsp)
 7707      E0E60000 
 7707      00000000 
 7708 08d6 48898C24 		movq	%rcx, 59336(%rsp)
 7708      C8E70000 
 7709 08de 488D8C24 		leaq	36960(%rsp), %rcx
 7709      60900000 
 7710 08e6 48898424 		movq	%rax, 59112(%rsp)
 7710      E8E60000 
 7711 08ee 48898424 		movq	%rax, 59128(%rsp)
 7711      F8E60000 
 7712 08f6 48898424 		movq	%rax, 59144(%rsp)
 7712      08E70000 
 7713 08fe 48898C24 		movq	%rcx, 59352(%rsp)
 7713      D8E70000 
 7714 0906 488D8C24 		leaq	12320(%rsp), %rcx
 7714      20300000 
 7715 090e 48898424 		movq	%rax, 59208(%rsp)
 7715      48E70000 
 7716 0916 48898424 		movq	%rax, 59224(%rsp)
 7716      58E70000 
 7717 091e 48898424 		movq	%rax, 59240(%rsp)
 7717      68E70000 
 7718 0926 48898424 		movq	%rax, 59256(%rsp)
 7718      78E70000 
 7719 092e 48898424 		movq	%rax, 59272(%rsp)
 7719      88E70000 
 7720 0936 48C78424 		movq	$0, 59120(%rsp)
 7720      F0E60000 
 7720      00000000 
 7721 0942 48C78424 		movq	$0, 59136(%rsp)
 7721      00E70000 
 7721      00000000 
 7722 094e 48C78424 		movq	$.L255, 59152(%rsp)
 7722      10E70000 
 7722      00000000 
 7723 095a 48C78424 		movq	$0, 59160(%rsp)
 7723      18E70000 
 7723      00000000 
 7724 0966 48C78424 		movq	$.L256, 59168(%rsp)
 7724      20E70000 
 7724      00000000 
 7725 0972 48C78424 		movq	$0, 59176(%rsp)
 7725      28E70000 
 7725      00000000 
 7726 097e 48C78424 		movq	$.L257, 59184(%rsp)
 7726      30E70000 
 7726      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 279


 7727 098a 48C78424 		movq	$0, 59192(%rsp)
 7727      38E70000 
 7727      00000000 
 7728 0996 48C78424 		movq	$0, 59200(%rsp)
 7728      40E70000 
 7728      00000000 
 7729 09a2 48C78424 		movq	$0, 59216(%rsp)
 7729      50E70000 
 7729      00000000 
 7730 09ae 48C78424 		movq	$0, 59232(%rsp)
 7730      60E70000 
 7730      00000000 
 7731 09ba 48C78424 		movq	$0, 59248(%rsp)
 7731      70E70000 
 7731      00000000 
 7732 09c6 48C78424 		movq	$0, 59264(%rsp)
 7732      80E70000 
 7732      00000000 
 7733 09d2 48C78424 		movq	$.L258, 59280(%rsp)
 7733      90E70000 
 7733      00000000 
 7734 09de 48C78424 		movq	$0, 59288(%rsp)
 7734      98E70000 
 7734      00000000 
 7735 09ea 48C78424 		movq	$.L259, 59296(%rsp)
 7735      A0E70000 
 7735      00000000 
 7736 09f6 48C78424 		movq	$0, 59304(%rsp)
 7736      A8E70000 
 7736      00000000 
 7737 0a02 48C78424 		movq	$.L260, 59312(%rsp)
 7737      B0E70000 
 7737      00000000 
 7738 0a0e 48C78424 		movq	$0, 59320(%rsp)
 7738      B8E70000 
 7738      00000000 
 7739 0a1a 48C78424 		movq	$0, 59328(%rsp)
 7739      C0E70000 
 7739      00000000 
 7740 0a26 48C78424 		movq	$0, 59344(%rsp)
 7740      D0E70000 
 7740      00000000 
 7741 0a32 48C78424 		movq	$.L261, 59360(%rsp)
 7741      E0E70000 
 7741      00000000 
 7742 0a3e 48C78424 		movq	$0, 59368(%rsp)
 7742      E8E70000 
 7742      00000000 
 7743 0a4a 48C78424 		movq	$.L262, 59376(%rsp)
 7743      F0E70000 
 7743      00000000 
 7744 0a56 48898C24 		movq	%rcx, 59416(%rsp)
 7744      18E80000 
 7745 0a5e 488D8C24 		leaq	51040(%rsp), %rcx
 7745      60C70000 
 7746 0a66 48898424 		movq	%rax, 59400(%rsp)
 7746      08E80000 
GAS LISTING /tmp/cc15eBE3.s 			page 280


 7747 0a6e 48898424 		movq	%rax, 59480(%rsp)
 7747      58E80000 
 7748 0a76 48898424 		movq	%rax, 59496(%rsp)
 7748      68E80000 
 7749 0a7e 48898C24 		movq	%rcx, 59432(%rsp)
 7749      28E80000 
 7750 0a86 488D8C24 		leaq	38720(%rsp), %rcx
 7750      40970000 
 7751 0a8e 48898424 		movq	%rax, 59528(%rsp)
 7751      88E80000 
 7752 0a96 48898424 		movq	%rax, 59544(%rsp)
 7752      98E80000 
 7753 0a9e 48898424 		movq	%rax, 59560(%rsp)
 7753      A8E80000 
 7754 0aa6 48898C24 		movq	%rcx, 59464(%rsp)
 7754      48E80000 
 7755 0aae 48898424 		movq	%rax, 59576(%rsp)
 7755      B8E80000 
 7756 0ab6 48898424 		movq	%rax, 59592(%rsp)
 7756      C8E80000 
 7757 0abe 48898424 		movq	%rax, 59608(%rsp)
 7757      D8E80000 
 7758 0ac6 48898424 		movq	%rax, 59624(%rsp)
 7758      E8E80000 
 7759 0ace 48898424 		movq	%rax, 59640(%rsp)
 7759      F8E80000 
 7760 0ad6 48C78424 		movq	$0, 59384(%rsp)
 7760      F8E70000 
 7760      00000000 
 7761 0ae2 48C78424 		movq	$0, 59392(%rsp)
 7761      00E80000 
 7761      00000000 
 7762 0aee 48C78424 		movq	$0, 59408(%rsp)
 7762      10E80000 
 7762      00000000 
 7763 0afa 48C78424 		movq	$0, 59424(%rsp)
 7763      20E80000 
 7763      00000000 
 7764 0b06 48C78424 		movq	$.L263, 59440(%rsp)
 7764      30E80000 
 7764      00000000 
 7765 0b12 48C78424 		movq	$0, 59448(%rsp)
 7765      38E80000 
 7765      00000000 
 7766 0b1e 48C78424 		movq	$0, 59456(%rsp)
 7766      40E80000 
 7766      00000000 
 7767 0b2a 48C78424 		movq	$0, 59472(%rsp)
 7767      50E80000 
 7767      00000000 
 7768 0b36 48C78424 		movq	$0, 59488(%rsp)
 7768      60E80000 
 7768      00000000 
 7769 0b42 48C78424 		movq	$.L264, 59504(%rsp)
 7769      70E80000 
 7769      00000000 
 7770 0b4e 48C78424 		movq	$0, 59512(%rsp)
GAS LISTING /tmp/cc15eBE3.s 			page 281


 7770      78E80000 
 7770      00000000 
 7771 0b5a 48C78424 		movq	$0, 59520(%rsp)
 7771      80E80000 
 7771      00000000 
 7772 0b66 48C78424 		movq	$0, 59536(%rsp)
 7772      90E80000 
 7772      00000000 
 7773 0b72 48C78424 		movq	$0, 59552(%rsp)
 7773      A0E80000 
 7773      00000000 
 7774 0b7e 48C78424 		movq	$0, 59568(%rsp)
 7774      B0E80000 
 7774      00000000 
 7775 0b8a 48C78424 		movq	$0, 59584(%rsp)
 7775      C0E80000 
 7775      00000000 
 7776 0b96 48C78424 		movq	$0, 59600(%rsp)
 7776      D0E80000 
 7776      00000000 
 7777 0ba2 48C78424 		movq	$0, 59616(%rsp)
 7777      E0E80000 
 7777      00000000 
 7778 0bae 48C78424 		movq	$0, 59632(%rsp)
 7778      F0E80000 
 7778      00000000 
 7779 0bba 48C78424 		movq	$0, 59648(%rsp)
 7779      00E90000 
 7779      00000000 
 7780 0bc6 48898424 		movq	%rax, 59656(%rsp)
 7780      08E90000 
 7781 0bce 48898424 		movq	%rax, 59672(%rsp)
 7781      18E90000 
 7782 0bd6 48898424 		movq	%rax, 59688(%rsp)
 7782      28E90000 
 7783 0bde 48898424 		movq	%rax, 59704(%rsp)
 7783      38E90000 
 7784 0be6 48898424 		movq	%rax, 59720(%rsp)
 7784      48E90000 
 7785 0bee 48898424 		movq	%rax, 59736(%rsp)
 7785      58E90000 
 7786 0bf6 48898424 		movq	%rax, 59752(%rsp)
 7786      68E90000 
 7787 0bfe 48898424 		movq	%rax, 59768(%rsp)
 7787      78E90000 
 7788 0c06 48898424 		movq	%rax, 59784(%rsp)
 7788      88E90000 
 7789 0c0e 48898424 		movq	%rax, 59800(%rsp)
 7789      98E90000 
 7790 0c16 48898424 		movq	%rax, 59816(%rsp)
 7790      A8E90000 
 7791 0c1e 48898424 		movq	%rax, 59832(%rsp)
 7791      B8E90000 
 481:src/vm3.c     ****  ,  { &&movz, NULL }  ,  { NULL, arraymovn }  ,  { NULL, arraysysc }  ,  { NULL, arrayerror }  ,  {
 482:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }
 483:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { &&add, NULL }  ,  { NULL, arrayaddu }  ,  {
 484:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayslt }  ,  { NULL, arraysltu }  ,
GAS LISTING /tmp/cc15eBE3.s 			page 282


 485:src/vm3.c     ****  ,  { NULL, arraybgtz }  ,  { &&addi, NULL }  ,  { NULL, arrayaddiu }  ,  { NULL, arrayslti }  ,  {
 486:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }
 487:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }
 488:src/vm3.c     ****  ,  { &&lhu, NULL }  ,  { &&lwr, NULL }  ,  { NULL, arrayerror }  ,  { NULL, arraysb }  ,  { NULL, 
 489:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }
 490:src/vm3.c     ****  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }  ,  { NULL, arrayerror }
 491:src/vm3.c     ****  }; 
 492:src/vm3.c     **** 
 493:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 7792              		.loc 1 493 0
 7793 0c26 8D4203   		leal	3(%rdx), %eax
 494:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 495:src/vm3.c     ****   if (op0 == 0x0) {
 496:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 497:src/vm3.c     ****     op0 = op0 + funct;
 498:src/vm3.c     ****   }
 499:src/vm3.c     ****     else {
 500:src/vm3.c     ****     op0 = op0 + FIX_OP;
 501:src/vm3.c     ****   }
 502:src/vm3.c     **** 
 503:src/vm3.c     **** p = array;
 504:src/vm3.c     **** p = p[op0].next_level;
 505:src/vm3.c     **** 
 506:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 7794              		.loc 1 506 0
 7795 0c29 0FB61D00 		movzbl	VM_memory+7(%rip), %ebx
 7795      000000
 480:src/vm3.c     ****  ,  { &&movz, NULL }  ,  { NULL, arraymovn }  ,  { NULL, arraysysc }  ,  { NULL, arrayerror }  ,  {
 7796              		.loc 1 480 0
 7797 0c30 48C78424 		movq	$0, 59664(%rsp)
 7797      10E90000 
 7797      00000000 
 493:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7798              		.loc 1 493 0
 7799 0c3c 440FB680 		movzbl	VM_memory(%rax), %r8d
 7799      00000000 
 7800 0c44 89D0     		movl	%edx, %eax
 480:src/vm3.c     ****  ,  { &&movz, NULL }  ,  { NULL, arraymovn }  ,  { NULL, arraysysc }  ,  { NULL, arrayerror }  ,  {
 7801              		.loc 1 480 0
 7802 0c46 48C78424 		movq	$0, 59680(%rsp)
 7802      20E90000 
 7802      00000000 
 493:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7803              		.loc 1 493 0
 7804 0c52 0FB68000 		movzbl	VM_memory(%rax), %eax
 7804      000000
 480:src/vm3.c     ****  ,  { &&movz, NULL }  ,  { NULL, arraymovn }  ,  { NULL, arraysysc }  ,  { NULL, arrayerror }  ,  {
 7805              		.loc 1 480 0
 7806 0c59 48C78424 		movq	$0, 59696(%rsp)
 7806      30E90000 
 7806      00000000 
 7807 0c65 48C78424 		movq	$0, 59712(%rsp)
 7807      40E90000 
 7807      00000000 
 7808 0c71 48C78424 		movq	$0, 59728(%rsp)
 7808      50E90000 
 7808      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 283


 7809 0c7d 48C78424 		movq	$0, 59744(%rsp)
 7809      60E90000 
 7809      00000000 
 7810 0c89 48C78424 		movq	$0, 59760(%rsp)
 7810      70E90000 
 7810      00000000 
 7811 0c95 48C78424 		movq	$0, 59776(%rsp)
 7811      80E90000 
 7811      00000000 
 7812 0ca1 48C78424 		movq	$0, 59792(%rsp)
 7812      90E90000 
 7812      00000000 
 493:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7813              		.loc 1 493 0
 7814 0cad C1E018   		sall	$24, %eax
 480:src/vm3.c     ****  ,  { &&movz, NULL }  ,  { NULL, arraymovn }  ,  { NULL, arraysysc }  ,  { NULL, arrayerror }  ,  {
 7815              		.loc 1 480 0
 7816 0cb0 48C78424 		movq	$0, 59808(%rsp)
 7816      A0E90000 
 7816      00000000 
 7817 0cbc 48C78424 		movq	$0, 59824(%rsp)
 7817      B0E90000 
 7817      00000000 
 493:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7818              		.loc 1 493 0
 7819 0cc8 4109C0   		orl	%eax, %r8d
 7820 0ccb 8D4201   		leal	1(%rdx), %eax
 7821 0cce 0FB68000 		movzbl	VM_memory(%rax), %eax
 7821      000000
 7822 0cd5 C1E010   		sall	$16, %eax
 7823 0cd8 4109C0   		orl	%eax, %r8d
 7824 0cdb 8D4202   		leal	2(%rdx), %eax
 7825 0cde 0FB68000 		movzbl	VM_memory(%rax), %eax
 7825      000000
 7826 0ce5 C1E008   		sall	$8, %eax
 7827 0ce8 4109C0   		orl	%eax, %r8d
 7828              	.LVL4:
 494:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7829              		.loc 1 494 0
 7830 0ceb 4489C0   		movl	%r8d, %eax
 496:src/vm3.c     ****     op0 = op0 + funct;
 7831              		.loc 1 496 0
 7832 0cee 4488C2   		movb	%r8b, %dl
 7833              	.LVL5:
 494:src/vm3.c     ****   if (op0 == 0x0) {
 7834              		.loc 1 494 0
 7835 0cf1 C1E81A   		shrl	$26, %eax
 7836              	.LVL6:
 496:src/vm3.c     ****     op0 = op0 + funct;
 7837              		.loc 1 496 0
 7838 0cf4 83E23F   		andl	$63, %edx
 7839 0cf7 8D482B   		leal	43(%rax), %ecx
 7840 0cfa 84C0     		testb	%al, %al
 7841              		.loc 1 506 0
 7842 0cfc 0FB60500 		movzbl	VM_memory+4(%rip), %eax
 7842      000000
 7843              	.LVL7:
GAS LISTING /tmp/cc15eBE3.s 			page 284


 496:src/vm3.c     ****     op0 = op0 + funct;
 7844              		.loc 1 496 0
 7845 0d03 0F45D1   		cmovne	%ecx, %edx
 7846              	.LVL8:
 504:src/vm3.c     **** 
 7847              		.loc 1 504 0
 7848 0d06 0FB6D2   		movzbl	%dl, %edx
 7849              		.loc 1 506 0
 7850 0d09 C1E018   		sall	$24, %eax
 504:src/vm3.c     **** 
 7851              		.loc 1 504 0
 7852 0d0c 48C1E204 		salq	$4, %rdx
 7853              	.LVL9:
 7854              		.loc 1 506 0
 7855 0d10 09C3     		orl	%eax, %ebx
 7856 0d12 0FB60500 		movzbl	VM_memory+5(%rip), %eax
 7856      000000
 7857 0d19 C1E010   		sall	$16, %eax
 7858 0d1c 09C3     		orl	%eax, %ebx
 7859 0d1e 0FB60500 		movzbl	VM_memory+6(%rip), %eax
 7859      000000
 7860 0d25 C1E008   		sall	$8, %eax
 7861 0d28 09C3     		orl	%eax, %ebx
 7862              	.LVL10:
 507:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7863              		.loc 1 507 0
 7864 0d2a 89D9     		movl	%ebx, %ecx
 508:src/vm3.c     ****   if (op1 == 0x0) {
 509:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 7865              		.loc 1 509 0
 7866 0d2c 88D8     		movb	%bl, %al
 507:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7867              		.loc 1 507 0
 7868 0d2e C1E91A   		shrl	$26, %ecx
 7869              	.LVL11:
 7870              		.loc 1 509 0
 7871 0d31 83E03F   		andl	$63, %eax
 7872 0d34 8D712B   		leal	43(%rcx), %esi
 7873 0d37 84C9     		testb	%cl, %cl
 7874 0d39 0F45C6   		cmovne	%esi, %eax
 7875              	.LVL12:
  26:src/vm3.c     ****   uint32_t offset = 4;
 7876              		.loc 1 26 0
 7877 0d3c 4531F6   		xorl	%r14d, %r14d
 7878 0d3f 4531ED   		xorl	%r13d, %r13d
 510:src/vm3.c     ****     op1 = op1 + funct;
 511:src/vm3.c     ****   }
 512:src/vm3.c     ****     else {
 513:src/vm3.c     ****     op1 = op1 + FIX_OP;
 514:src/vm3.c     ****   }
 515:src/vm3.c     **** 
 516:src/vm3.c     **** goto *p[op1].code;
 7879              		.loc 1 516 0
 7880 0d42 0FB6C0   		movzbl	%al, %eax
 517:src/vm3.c     **** 
 518:src/vm3.c     **** movn:
 519:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 285


 520:src/vm3.c     **** printf("%d|movn\n",counter);
 521:src/vm3.c     **** counter++;
 522:src/vm3.c     **** #endif
 523:src/vm3.c     **** 
 524:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 525:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 526:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 527:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 528:src/vm3.c     **** PC  =  nPC;
 529:src/vm3.c     **** nPC  += 4;
 530:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 531:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 532:src/vm3.c     ****   if (op0 == 0x0) {
 533:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 534:src/vm3.c     ****     op0 = op0 + funct;
 535:src/vm3.c     ****   }
 536:src/vm3.c     ****     else {
 537:src/vm3.c     ****     op0 = op0 + FIX_OP;
 538:src/vm3.c     ****   }
 539:src/vm3.c     **** 
 540:src/vm3.c     **** p = array;
 541:src/vm3.c     **** p = p[op0].next_level;
 542:src/vm3.c     **** 
 543:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 544:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 545:src/vm3.c     ****   if (op1 == 0x0) {
 546:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 547:src/vm3.c     ****     op1 = op1 + funct;
 548:src/vm3.c     ****   }
 549:src/vm3.c     ****     else {
 550:src/vm3.c     ****     op1 = op1 + FIX_OP;
 551:src/vm3.c     ****   }
 552:src/vm3.c     **** 
 553:src/vm3.c     **** goto *p[op1].code;
 554:src/vm3.c     **** 
 555:src/vm3.c     **** 
 556:src/vm3.c     **** movz:
 557:src/vm3.c     **** #if INDIRECT_DEBUG
 558:src/vm3.c     **** printf("%d|movz\n",counter);
 559:src/vm3.c     **** counter++;
 560:src/vm3.c     **** #endif
 561:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 562:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 563:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 564:src/vm3.c     **** if (RF[rt] == 0) RF[rd] = RF[rs];
 565:src/vm3.c     **** PC  =  nPC;
 566:src/vm3.c     **** nPC  += 4;
 567:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 569:src/vm3.c     ****   if (op0 == 0x0) {
 570:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 571:src/vm3.c     ****     op0 = op0 + funct;
 572:src/vm3.c     ****   }
 573:src/vm3.c     ****     else {
 574:src/vm3.c     ****     op0 = op0 + FIX_OP;
 575:src/vm3.c     ****   }
 576:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 286


 577:src/vm3.c     **** p = array;
 578:src/vm3.c     **** p = p[op0].next_level;
 579:src/vm3.c     **** 
 580:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 582:src/vm3.c     ****   if (op1 == 0x0) {
 583:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 584:src/vm3.c     ****     op1 = op1 + funct;
 585:src/vm3.c     ****   }
 586:src/vm3.c     ****     else {
 587:src/vm3.c     ****     op1 = op1 + FIX_OP;
 588:src/vm3.c     ****   }
 589:src/vm3.c     **** 
 590:src/vm3.c     **** goto *p[op1].code;
 591:src/vm3.c     **** 
 592:src/vm3.c     **** 
 593:src/vm3.c     **** add:
 594:src/vm3.c     **** #if INDIRECT_DEBUG
 595:src/vm3.c     **** printf("%d|add\n",counter);
 596:src/vm3.c     **** counter++;
 597:src/vm3.c     **** #endif
 598:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 599:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 600:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 601:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 602:src/vm3.c     **** PC  =  nPC;
 603:src/vm3.c     **** nPC  += 4;
 604:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 605:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 606:src/vm3.c     ****   if (op0 == 0x0) {
 607:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 608:src/vm3.c     ****     op0 = op0 + funct;
 609:src/vm3.c     ****   }
 610:src/vm3.c     ****     else {
 611:src/vm3.c     ****     op0 = op0 + FIX_OP;
 612:src/vm3.c     ****   }
 613:src/vm3.c     **** 
 614:src/vm3.c     **** p = array;
 615:src/vm3.c     **** p = p[op0].next_level;
 616:src/vm3.c     **** 
 617:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 618:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 619:src/vm3.c     ****   if (op1 == 0x0) {
 620:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 621:src/vm3.c     ****     op1 = op1 + funct;
 622:src/vm3.c     ****   }
 623:src/vm3.c     ****     else {
 624:src/vm3.c     ****     op1 = op1 + FIX_OP;
 625:src/vm3.c     ****   }
 626:src/vm3.c     **** 
 627:src/vm3.c     **** goto *p[op1].code;
 628:src/vm3.c     **** 
 629:src/vm3.c     **** 
 630:src/vm3.c     **** addu:
 631:src/vm3.c     **** #if INDIRECT_DEBUG
 632:src/vm3.c     **** printf("%d|addu\n",counter);
 633:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 287


 634:src/vm3.c     **** #endif
 635:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 636:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 637:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 638:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 639:src/vm3.c     **** PC  =  nPC;
 640:src/vm3.c     **** nPC  += 4;
 641:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 642:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 643:src/vm3.c     ****   if (op0 == 0x0) {
 644:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 645:src/vm3.c     ****     op0 = op0 + funct;
 646:src/vm3.c     ****   }
 647:src/vm3.c     ****     else {
 648:src/vm3.c     ****     op0 = op0 + FIX_OP;
 649:src/vm3.c     ****   }
 650:src/vm3.c     **** 
 651:src/vm3.c     **** p = array;
 652:src/vm3.c     **** p = p[op0].next_level;
 653:src/vm3.c     **** 
 654:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 655:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 656:src/vm3.c     ****   if (op1 == 0x0) {
 657:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 658:src/vm3.c     ****     op1 = op1 + funct;
 659:src/vm3.c     ****   }
 660:src/vm3.c     ****     else {
 661:src/vm3.c     ****     op1 = op1 + FIX_OP;
 662:src/vm3.c     ****   }
 663:src/vm3.c     **** 
 664:src/vm3.c     **** goto *p[op1].code;
 665:src/vm3.c     **** 
 666:src/vm3.c     **** 
 667:src/vm3.c     **** and:
 668:src/vm3.c     **** #if INDIRECT_DEBUG
 669:src/vm3.c     **** printf("%d|and\n",counter);
 670:src/vm3.c     **** counter++;
 671:src/vm3.c     **** #endif
 672:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 673:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 674:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 675:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 676:src/vm3.c     **** PC  =  nPC;
 677:src/vm3.c     **** nPC  += 4;
 678:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 679:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 680:src/vm3.c     ****   if (op0 == 0x0) {
 681:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 682:src/vm3.c     ****     op0 = op0 + funct;
 683:src/vm3.c     ****   }
 684:src/vm3.c     ****     else {
 685:src/vm3.c     ****     op0 = op0 + FIX_OP;
 686:src/vm3.c     ****   }
 687:src/vm3.c     **** 
 688:src/vm3.c     **** p = array;
 689:src/vm3.c     **** p = p[op0].next_level;
 690:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 288


 691:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 692:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 693:src/vm3.c     ****   if (op1 == 0x0) {
 694:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 695:src/vm3.c     ****     op1 = op1 + funct;
 696:src/vm3.c     ****   }
 697:src/vm3.c     ****     else {
 698:src/vm3.c     ****     op1 = op1 + FIX_OP;
 699:src/vm3.c     ****   }
 700:src/vm3.c     **** 
 701:src/vm3.c     **** goto *p[op1].code;
 702:src/vm3.c     **** 
 703:src/vm3.c     **** 
 704:src/vm3.c     **** div:
 705:src/vm3.c     **** #if INDIRECT_DEBUG
 706:src/vm3.c     **** printf("%d|div\n",counter);
 707:src/vm3.c     **** counter++;
 708:src/vm3.c     **** #endif
 709:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 710:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 711:src/vm3.c     **** LO = RF[rs] / RF[rt];
 712:src/vm3.c     **** HI = RF[rs] % RF[rt];
 713:src/vm3.c     **** PC  =  nPC;
 714:src/vm3.c     **** nPC  += 4;
 715:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 716:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 717:src/vm3.c     ****   if (op0 == 0x0) {
 718:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 719:src/vm3.c     ****     op0 = op0 + funct;
 720:src/vm3.c     ****   }
 721:src/vm3.c     ****     else {
 722:src/vm3.c     ****     op0 = op0 + FIX_OP;
 723:src/vm3.c     ****   }
 724:src/vm3.c     **** 
 725:src/vm3.c     **** p = array;
 726:src/vm3.c     **** p = p[op0].next_level;
 727:src/vm3.c     **** 
 728:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 729:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 730:src/vm3.c     ****   if (op1 == 0x0) {
 731:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 732:src/vm3.c     ****     op1 = op1 + funct;
 733:src/vm3.c     ****   }
 734:src/vm3.c     ****     else {
 735:src/vm3.c     ****     op1 = op1 + FIX_OP;
 736:src/vm3.c     ****   }
 737:src/vm3.c     **** 
 738:src/vm3.c     **** goto *p[op1].code;
 739:src/vm3.c     **** 
 740:src/vm3.c     **** 
 741:src/vm3.c     **** divu:
 742:src/vm3.c     **** #if INDIRECT_DEBUG
 743:src/vm3.c     **** printf("%d|divu\n",counter);
 744:src/vm3.c     **** counter++;
 745:src/vm3.c     **** #endif
 746:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 747:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 289


 748:src/vm3.c     **** LO = RF[rs] / RF[rt];
 749:src/vm3.c     **** HI = RF[rs] % RF[rt];
 750:src/vm3.c     **** PC  =  nPC;
 751:src/vm3.c     **** nPC  += 4;
 752:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 753:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 754:src/vm3.c     ****   if (op0 == 0x0) {
 755:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 756:src/vm3.c     ****     op0 = op0 + funct;
 757:src/vm3.c     ****   }
 758:src/vm3.c     ****     else {
 759:src/vm3.c     ****     op0 = op0 + FIX_OP;
 760:src/vm3.c     ****   }
 761:src/vm3.c     **** 
 762:src/vm3.c     **** p = array;
 763:src/vm3.c     **** p = p[op0].next_level;
 764:src/vm3.c     **** 
 765:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 766:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 767:src/vm3.c     ****   if (op1 == 0x0) {
 768:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 769:src/vm3.c     ****     op1 = op1 + funct;
 770:src/vm3.c     ****   }
 771:src/vm3.c     ****     else {
 772:src/vm3.c     ****     op1 = op1 + FIX_OP;
 773:src/vm3.c     ****   }
 774:src/vm3.c     **** 
 775:src/vm3.c     **** goto *p[op1].code;
 776:src/vm3.c     **** 
 777:src/vm3.c     **** 
 778:src/vm3.c     **** mult:
 779:src/vm3.c     **** #if INDIRECT_DEBUG
 780:src/vm3.c     **** printf("%d|mult\n",counter);
 781:src/vm3.c     **** counter++;
 782:src/vm3.c     **** #endif
 783:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 784:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 785:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 786:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 787:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 788:src/vm3.c     **** PC  =  nPC;
 789:src/vm3.c     **** nPC  += 4;
 790:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 791:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 792:src/vm3.c     ****   if (op0 == 0x0) {
 793:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 794:src/vm3.c     ****     op0 = op0 + funct;
 795:src/vm3.c     ****   }
 796:src/vm3.c     ****     else {
 797:src/vm3.c     ****     op0 = op0 + FIX_OP;
 798:src/vm3.c     ****   }
 799:src/vm3.c     **** 
 800:src/vm3.c     **** p = array;
 801:src/vm3.c     **** p = p[op0].next_level;
 802:src/vm3.c     **** 
 803:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 804:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 290


 805:src/vm3.c     ****   if (op1 == 0x0) {
 806:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 807:src/vm3.c     ****     op1 = op1 + funct;
 808:src/vm3.c     ****   }
 809:src/vm3.c     ****     else {
 810:src/vm3.c     ****     op1 = op1 + FIX_OP;
 811:src/vm3.c     ****   }
 812:src/vm3.c     **** 
 813:src/vm3.c     **** goto *p[op1].code;
 814:src/vm3.c     **** 
 815:src/vm3.c     **** 
 816:src/vm3.c     **** multu:
 817:src/vm3.c     **** #if INDIRECT_DEBUG
 818:src/vm3.c     **** printf("%d|multu\n",counter);
 819:src/vm3.c     **** counter++;
 820:src/vm3.c     **** #endif
 821:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 822:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 823:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 824:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 825:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 826:src/vm3.c     **** PC  =  nPC;
 827:src/vm3.c     **** nPC  += 4;
 828:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 829:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 830:src/vm3.c     ****   if (op0 == 0x0) {
 831:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 832:src/vm3.c     ****     op0 = op0 + funct;
 833:src/vm3.c     ****   }
 834:src/vm3.c     ****     else {
 835:src/vm3.c     ****     op0 = op0 + FIX_OP;
 836:src/vm3.c     ****   }
 837:src/vm3.c     **** 
 838:src/vm3.c     **** p = array;
 839:src/vm3.c     **** p = p[op0].next_level;
 840:src/vm3.c     **** 
 841:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 842:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 843:src/vm3.c     ****   if (op1 == 0x0) {
 844:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 845:src/vm3.c     ****     op1 = op1 + funct;
 846:src/vm3.c     ****   }
 847:src/vm3.c     ****     else {
 848:src/vm3.c     ****     op1 = op1 + FIX_OP;
 849:src/vm3.c     ****   }
 850:src/vm3.c     **** 
 851:src/vm3.c     **** goto *p[op1].code;
 852:src/vm3.c     **** 
 853:src/vm3.c     **** 
 854:src/vm3.c     **** nor:
 855:src/vm3.c     **** #if INDIRECT_DEBUG
 856:src/vm3.c     **** printf("%d|nor\n",counter);
 857:src/vm3.c     **** counter++;
 858:src/vm3.c     **** #endif
 859:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 860:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 861:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 291


 862:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 863:src/vm3.c     **** PC  =  nPC;
 864:src/vm3.c     **** nPC  += 4;
 865:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 866:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 867:src/vm3.c     ****   if (op0 == 0x0) {
 868:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 869:src/vm3.c     ****     op0 = op0 + funct;
 870:src/vm3.c     ****   }
 871:src/vm3.c     ****     else {
 872:src/vm3.c     ****     op0 = op0 + FIX_OP;
 873:src/vm3.c     ****   }
 874:src/vm3.c     **** 
 875:src/vm3.c     **** p = array;
 876:src/vm3.c     **** p = p[op0].next_level;
 877:src/vm3.c     **** 
 878:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 879:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 880:src/vm3.c     ****   if (op1 == 0x0) {
 881:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 882:src/vm3.c     ****     op1 = op1 + funct;
 883:src/vm3.c     ****   }
 884:src/vm3.c     ****     else {
 885:src/vm3.c     ****     op1 = op1 + FIX_OP;
 886:src/vm3.c     ****   }
 887:src/vm3.c     **** 
 888:src/vm3.c     **** goto *p[op1].code;
 889:src/vm3.c     **** 
 890:src/vm3.c     **** 
 891:src/vm3.c     **** or:
 892:src/vm3.c     **** #if INDIRECT_DEBUG
 893:src/vm3.c     **** printf("%d|or\n",counter);
 894:src/vm3.c     **** counter++;
 895:src/vm3.c     **** #endif
 896:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 897:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 898:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 899:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 900:src/vm3.c     **** PC  =  nPC;
 901:src/vm3.c     **** nPC  += 4;
 902:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 903:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 904:src/vm3.c     ****   if (op0 == 0x0) {
 905:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 906:src/vm3.c     ****     op0 = op0 + funct;
 907:src/vm3.c     ****   }
 908:src/vm3.c     ****     else {
 909:src/vm3.c     ****     op0 = op0 + FIX_OP;
 910:src/vm3.c     ****   }
 911:src/vm3.c     **** 
 912:src/vm3.c     **** p = array;
 913:src/vm3.c     **** p = p[op0].next_level;
 914:src/vm3.c     **** 
 915:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 916:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 917:src/vm3.c     ****   if (op1 == 0x0) {
 918:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 292


 919:src/vm3.c     ****     op1 = op1 + funct;
 920:src/vm3.c     ****   }
 921:src/vm3.c     ****     else {
 922:src/vm3.c     ****     op1 = op1 + FIX_OP;
 923:src/vm3.c     ****   }
 924:src/vm3.c     **** 
 925:src/vm3.c     **** goto *p[op1].code;
 926:src/vm3.c     **** 
 927:src/vm3.c     **** 
 928:src/vm3.c     **** sll:
 929:src/vm3.c     **** #if INDIRECT_DEBUG
 930:src/vm3.c     **** printf("%d|sll\n",counter);
 931:src/vm3.c     **** counter++;
 932:src/vm3.c     **** #endif
 933:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
 934:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 935:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 936:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 937:src/vm3.c     **** PC  =  nPC;
 938:src/vm3.c     **** nPC  += 4;
 939:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 940:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 941:src/vm3.c     ****   if (op0 == 0x0) {
 942:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 943:src/vm3.c     ****     op0 = op0 + funct;
 944:src/vm3.c     ****   }
 945:src/vm3.c     ****     else {
 946:src/vm3.c     ****     op0 = op0 + FIX_OP;
 947:src/vm3.c     ****   }
 948:src/vm3.c     **** 
 949:src/vm3.c     **** p = array;
 950:src/vm3.c     **** p = p[op0].next_level;
 951:src/vm3.c     **** 
 952:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 953:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 954:src/vm3.c     ****   if (op1 == 0x0) {
 955:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 956:src/vm3.c     ****     op1 = op1 + funct;
 957:src/vm3.c     ****   }
 958:src/vm3.c     ****     else {
 959:src/vm3.c     ****     op1 = op1 + FIX_OP;
 960:src/vm3.c     ****   }
 961:src/vm3.c     **** 
 962:src/vm3.c     **** goto *p[op1].code;
 963:src/vm3.c     **** 
 964:src/vm3.c     **** 
 965:src/vm3.c     **** sllv:
 966:src/vm3.c     **** #if INDIRECT_DEBUG
 967:src/vm3.c     **** printf("%d|sllv\n",counter);
 968:src/vm3.c     **** counter++;
 969:src/vm3.c     **** #endif
 970:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 971:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 972:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 973:src/vm3.c     **** RF[rd] = RF[rt] << RF[rs];
 974:src/vm3.c     **** PC  =  nPC;
 975:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 293


 976:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 977:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 978:src/vm3.c     ****   if (op0 == 0x0) {
 979:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 980:src/vm3.c     ****     op0 = op0 + funct;
 981:src/vm3.c     ****   }
 982:src/vm3.c     ****     else {
 983:src/vm3.c     ****     op0 = op0 + FIX_OP;
 984:src/vm3.c     ****   }
 985:src/vm3.c     **** 
 986:src/vm3.c     **** p = array;
 987:src/vm3.c     **** p = p[op0].next_level;
 988:src/vm3.c     **** 
 989:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 990:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 991:src/vm3.c     ****   if (op1 == 0x0) {
 992:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 993:src/vm3.c     ****     op1 = op1 + funct;
 994:src/vm3.c     ****   }
 995:src/vm3.c     ****     else {
 996:src/vm3.c     ****     op1 = op1 + FIX_OP;
 997:src/vm3.c     ****   }
 998:src/vm3.c     **** 
 999:src/vm3.c     **** goto *p[op1].code;
1000:src/vm3.c     **** 
1001:src/vm3.c     **** 
1002:src/vm3.c     **** sra:
1003:src/vm3.c     **** #if INDIRECT_DEBUG
1004:src/vm3.c     **** printf("%d|sra\n",counter);
1005:src/vm3.c     **** counter++;
1006:src/vm3.c     **** #endif
1007:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
1008:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1009:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
1010:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1011:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
1012:src/vm3.c     **** }
1013:src/vm3.c     **** else {
1014:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1015:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] >> shamt;
1016:src/vm3.c     **** }
1017:src/vm3.c     **** PC  =  nPC;
1018:src/vm3.c     **** nPC  += 4;
1019:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1020:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1021:src/vm3.c     ****   if (op0 == 0x0) {
1022:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1023:src/vm3.c     ****     op0 = op0 + funct;
1024:src/vm3.c     ****   }
1025:src/vm3.c     ****     else {
1026:src/vm3.c     ****     op0 = op0 + FIX_OP;
1027:src/vm3.c     ****   }
1028:src/vm3.c     **** 
1029:src/vm3.c     **** p = array;
1030:src/vm3.c     **** p = p[op0].next_level;
1031:src/vm3.c     **** 
1032:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 294


1033:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1034:src/vm3.c     ****   if (op1 == 0x0) {
1035:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1036:src/vm3.c     ****     op1 = op1 + funct;
1037:src/vm3.c     ****   }
1038:src/vm3.c     ****     else {
1039:src/vm3.c     ****     op1 = op1 + FIX_OP;
1040:src/vm3.c     ****   }
1041:src/vm3.c     **** 
1042:src/vm3.c     **** goto *p[op1].code;
1043:src/vm3.c     **** 
1044:src/vm3.c     **** 
1045:src/vm3.c     **** srav:
1046:src/vm3.c     **** #if INDIRECT_DEBUG
1047:src/vm3.c     **** printf("%d|srav\n",counter);
1048:src/vm3.c     **** counter++;
1049:src/vm3.c     **** #endif
1050:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1051:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1052:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1053:src/vm3.c     **** RF[rd] = RF[rt] >> RF[rs];
1054:src/vm3.c     **** PC  =  nPC;
1055:src/vm3.c     **** nPC  += 4;
1056:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1057:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1058:src/vm3.c     ****   if (op0 == 0x0) {
1059:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1060:src/vm3.c     ****     op0 = op0 + funct;
1061:src/vm3.c     ****   }
1062:src/vm3.c     ****     else {
1063:src/vm3.c     ****     op0 = op0 + FIX_OP;
1064:src/vm3.c     ****   }
1065:src/vm3.c     **** 
1066:src/vm3.c     **** p = array;
1067:src/vm3.c     **** p = p[op0].next_level;
1068:src/vm3.c     **** 
1069:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1070:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1071:src/vm3.c     ****   if (op1 == 0x0) {
1072:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1073:src/vm3.c     ****     op1 = op1 + funct;
1074:src/vm3.c     ****   }
1075:src/vm3.c     ****     else {
1076:src/vm3.c     ****     op1 = op1 + FIX_OP;
1077:src/vm3.c     ****   }
1078:src/vm3.c     **** 
1079:src/vm3.c     **** goto *p[op1].code;
1080:src/vm3.c     **** 
1081:src/vm3.c     **** 
1082:src/vm3.c     **** srl:
1083:src/vm3.c     **** #if INDIRECT_DEBUG
1084:src/vm3.c     **** printf("%d|srl\n",counter);
1085:src/vm3.c     **** counter++;
1086:src/vm3.c     **** #endif
1087:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
1088:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1089:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 295


1090:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
1091:src/vm3.c     **** PC  =  nPC;
1092:src/vm3.c     **** nPC  += 4;
1093:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1094:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1095:src/vm3.c     ****   if (op0 == 0x0) {
1096:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1097:src/vm3.c     ****     op0 = op0 + funct;
1098:src/vm3.c     ****   }
1099:src/vm3.c     ****     else {
1100:src/vm3.c     ****     op0 = op0 + FIX_OP;
1101:src/vm3.c     ****   }
1102:src/vm3.c     **** 
1103:src/vm3.c     **** p = array;
1104:src/vm3.c     **** p = p[op0].next_level;
1105:src/vm3.c     **** 
1106:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1107:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1108:src/vm3.c     ****   if (op1 == 0x0) {
1109:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1110:src/vm3.c     ****     op1 = op1 + funct;
1111:src/vm3.c     ****   }
1112:src/vm3.c     ****     else {
1113:src/vm3.c     ****     op1 = op1 + FIX_OP;
1114:src/vm3.c     ****   }
1115:src/vm3.c     **** 
1116:src/vm3.c     **** goto *p[op1].code;
1117:src/vm3.c     **** 
1118:src/vm3.c     **** 
1119:src/vm3.c     **** srlv:
1120:src/vm3.c     **** #if INDIRECT_DEBUG
1121:src/vm3.c     **** printf("%d|srlv\n",counter);
1122:src/vm3.c     **** counter++;
1123:src/vm3.c     **** #endif
1124:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1125:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1126:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1127:src/vm3.c     **** RF[rd] = RF[rt] >> RF[rs];
1128:src/vm3.c     **** PC  =  nPC;
1129:src/vm3.c     **** nPC  += 4;
1130:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1131:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1132:src/vm3.c     ****   if (op0 == 0x0) {
1133:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1134:src/vm3.c     ****     op0 = op0 + funct;
1135:src/vm3.c     ****   }
1136:src/vm3.c     ****     else {
1137:src/vm3.c     ****     op0 = op0 + FIX_OP;
1138:src/vm3.c     ****   }
1139:src/vm3.c     **** 
1140:src/vm3.c     **** p = array;
1141:src/vm3.c     **** p = p[op0].next_level;
1142:src/vm3.c     **** 
1143:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1144:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1145:src/vm3.c     ****   if (op1 == 0x0) {
1146:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 296


1147:src/vm3.c     ****     op1 = op1 + funct;
1148:src/vm3.c     ****   }
1149:src/vm3.c     ****     else {
1150:src/vm3.c     ****     op1 = op1 + FIX_OP;
1151:src/vm3.c     ****   }
1152:src/vm3.c     **** 
1153:src/vm3.c     **** goto *p[op1].code;
1154:src/vm3.c     **** 
1155:src/vm3.c     **** 
1156:src/vm3.c     **** sub:
1157:src/vm3.c     **** #if INDIRECT_DEBUG
1158:src/vm3.c     **** printf("%d|sub\n",counter);
1159:src/vm3.c     **** counter++;
1160:src/vm3.c     **** #endif
1161:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1162:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1163:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1164:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
1165:src/vm3.c     **** PC  =  nPC;
1166:src/vm3.c     **** nPC  += 4;
1167:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1168:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1169:src/vm3.c     ****   if (op0 == 0x0) {
1170:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1171:src/vm3.c     ****     op0 = op0 + funct;
1172:src/vm3.c     ****   }
1173:src/vm3.c     ****     else {
1174:src/vm3.c     ****     op0 = op0 + FIX_OP;
1175:src/vm3.c     ****   }
1176:src/vm3.c     **** 
1177:src/vm3.c     **** p = array;
1178:src/vm3.c     **** p = p[op0].next_level;
1179:src/vm3.c     **** 
1180:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1181:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1182:src/vm3.c     ****   if (op1 == 0x0) {
1183:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1184:src/vm3.c     ****     op1 = op1 + funct;
1185:src/vm3.c     ****   }
1186:src/vm3.c     ****     else {
1187:src/vm3.c     ****     op1 = op1 + FIX_OP;
1188:src/vm3.c     ****   }
1189:src/vm3.c     **** 
1190:src/vm3.c     **** goto *p[op1].code;
1191:src/vm3.c     **** 
1192:src/vm3.c     **** 
1193:src/vm3.c     **** subu:
1194:src/vm3.c     **** #if INDIRECT_DEBUG
1195:src/vm3.c     **** printf("%d|subu\n",counter);
1196:src/vm3.c     **** counter++;
1197:src/vm3.c     **** #endif
1198:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1199:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1200:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1201:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
1202:src/vm3.c     **** PC  =  nPC;
1203:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 297


1204:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1205:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1206:src/vm3.c     ****   if (op0 == 0x0) {
1207:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1208:src/vm3.c     ****     op0 = op0 + funct;
1209:src/vm3.c     ****   }
1210:src/vm3.c     ****     else {
1211:src/vm3.c     ****     op0 = op0 + FIX_OP;
1212:src/vm3.c     ****   }
1213:src/vm3.c     **** 
1214:src/vm3.c     **** p = array;
1215:src/vm3.c     **** p = p[op0].next_level;
1216:src/vm3.c     **** 
1217:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1218:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1219:src/vm3.c     ****   if (op1 == 0x0) {
1220:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1221:src/vm3.c     ****     op1 = op1 + funct;
1222:src/vm3.c     ****   }
1223:src/vm3.c     ****     else {
1224:src/vm3.c     ****     op1 = op1 + FIX_OP;
1225:src/vm3.c     ****   }
1226:src/vm3.c     **** 
1227:src/vm3.c     **** goto *p[op1].code;
1228:src/vm3.c     **** 
1229:src/vm3.c     **** 
1230:src/vm3.c     **** xor:
1231:src/vm3.c     **** #if INDIRECT_DEBUG
1232:src/vm3.c     **** printf("%d|xor\n",counter);
1233:src/vm3.c     **** counter++;
1234:src/vm3.c     **** #endif
1235:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1236:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1237:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1238:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
1239:src/vm3.c     **** PC  =  nPC;
1240:src/vm3.c     **** nPC  += 4;
1241:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1242:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1243:src/vm3.c     ****   if (op0 == 0x0) {
1244:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1245:src/vm3.c     ****     op0 = op0 + funct;
1246:src/vm3.c     ****   }
1247:src/vm3.c     ****     else {
1248:src/vm3.c     ****     op0 = op0 + FIX_OP;
1249:src/vm3.c     ****   }
1250:src/vm3.c     **** 
1251:src/vm3.c     **** p = array;
1252:src/vm3.c     **** p = p[op0].next_level;
1253:src/vm3.c     **** 
1254:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1256:src/vm3.c     ****   if (op1 == 0x0) {
1257:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1258:src/vm3.c     ****     op1 = op1 + funct;
1259:src/vm3.c     ****   }
1260:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 298


1261:src/vm3.c     ****     op1 = op1 + FIX_OP;
1262:src/vm3.c     ****   }
1263:src/vm3.c     **** 
1264:src/vm3.c     **** goto *p[op1].code;
1265:src/vm3.c     **** 
1266:src/vm3.c     **** 
1267:src/vm3.c     **** slt:
1268:src/vm3.c     **** #if INDIRECT_DEBUG
1269:src/vm3.c     **** printf("%d|slt\n",counter);
1270:src/vm3.c     **** counter++;
1271:src/vm3.c     **** #endif
1272:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1273:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1274:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1275:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
1276:src/vm3.c     **** PC  =  nPC;
1277:src/vm3.c     **** nPC  += 4;
1278:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1279:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1280:src/vm3.c     ****   if (op0 == 0x0) {
1281:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1282:src/vm3.c     ****     op0 = op0 + funct;
1283:src/vm3.c     ****   }
1284:src/vm3.c     ****     else {
1285:src/vm3.c     ****     op0 = op0 + FIX_OP;
1286:src/vm3.c     ****   }
1287:src/vm3.c     **** 
1288:src/vm3.c     **** p = array;
1289:src/vm3.c     **** p = p[op0].next_level;
1290:src/vm3.c     **** 
1291:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1292:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1293:src/vm3.c     ****   if (op1 == 0x0) {
1294:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1295:src/vm3.c     ****     op1 = op1 + funct;
1296:src/vm3.c     ****   }
1297:src/vm3.c     ****     else {
1298:src/vm3.c     ****     op1 = op1 + FIX_OP;
1299:src/vm3.c     ****   }
1300:src/vm3.c     **** 
1301:src/vm3.c     **** goto *p[op1].code;
1302:src/vm3.c     **** 
1303:src/vm3.c     **** 
1304:src/vm3.c     **** sltu:
1305:src/vm3.c     **** #if INDIRECT_DEBUG
1306:src/vm3.c     **** printf("%d|sltu\n",counter);
1307:src/vm3.c     **** counter++;
1308:src/vm3.c     **** #endif
1309:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1310:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1311:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1312:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
1313:src/vm3.c     **** PC  =  nPC;
1314:src/vm3.c     **** nPC  += 4;
1315:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1316:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1317:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 299


1318:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1319:src/vm3.c     ****     op0 = op0 + funct;
1320:src/vm3.c     ****   }
1321:src/vm3.c     ****     else {
1322:src/vm3.c     ****     op0 = op0 + FIX_OP;
1323:src/vm3.c     ****   }
1324:src/vm3.c     **** 
1325:src/vm3.c     **** p = array;
1326:src/vm3.c     **** p = p[op0].next_level;
1327:src/vm3.c     **** 
1328:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1329:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1330:src/vm3.c     ****   if (op1 == 0x0) {
1331:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1332:src/vm3.c     ****     op1 = op1 + funct;
1333:src/vm3.c     ****   }
1334:src/vm3.c     ****     else {
1335:src/vm3.c     ****     op1 = op1 + FIX_OP;
1336:src/vm3.c     ****   }
1337:src/vm3.c     **** 
1338:src/vm3.c     **** goto *p[op1].code;
1339:src/vm3.c     **** 
1340:src/vm3.c     **** 
1341:src/vm3.c     **** jalr:
1342:src/vm3.c     **** #if INDIRECT_DEBUG
1343:src/vm3.c     **** printf("%d|jalr\n",counter);
1344:src/vm3.c     **** counter++;
1345:src/vm3.c     **** #endif
1346:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1347:src/vm3.c     **** RF[31] = PC+8;
1348:src/vm3.c     **** PC = nPC;
1349:src/vm3.c     **** nPC = RF[rs];
1350:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1351:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1352:src/vm3.c     ****   if (op0 == 0x0) {
1353:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1354:src/vm3.c     ****     op0 = op0 + funct;
1355:src/vm3.c     ****   }
1356:src/vm3.c     ****     else {
1357:src/vm3.c     ****     op0 = op0 + FIX_OP;
1358:src/vm3.c     ****   }
1359:src/vm3.c     **** 
1360:src/vm3.c     **** p = array;
1361:src/vm3.c     **** p = p[op0].next_level;
1362:src/vm3.c     **** 
1363:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1364:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1365:src/vm3.c     ****   if (op1 == 0x0) {
1366:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1367:src/vm3.c     ****     op1 = op1 + funct;
1368:src/vm3.c     ****   }
1369:src/vm3.c     ****     else {
1370:src/vm3.c     ****     op1 = op1 + FIX_OP;
1371:src/vm3.c     ****   }
1372:src/vm3.c     **** 
1373:src/vm3.c     **** goto *p[op1].code;
1374:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 300


1375:src/vm3.c     **** 
1376:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1377:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1378:src/vm3.c     ****   if (op0 == 0x0) {
1379:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1380:src/vm3.c     ****     op0 = op0 + funct;
1381:src/vm3.c     ****   }
1382:src/vm3.c     ****     else {
1383:src/vm3.c     ****     op0 = op0 + FIX_OP;
1384:src/vm3.c     ****   }
1385:src/vm3.c     **** 
1386:src/vm3.c     **** p = array;
1387:src/vm3.c     **** p = p[op0].next_level;
1388:src/vm3.c     **** 
1389:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1390:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1391:src/vm3.c     ****   if (op1 == 0x0) {
1392:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1393:src/vm3.c     ****     op1 = op1 + funct;
1394:src/vm3.c     ****   }
1395:src/vm3.c     ****     else {
1396:src/vm3.c     ****     op1 = op1 + FIX_OP;
1397:src/vm3.c     ****   }
1398:src/vm3.c     **** 
1399:src/vm3.c     **** goto *p[op1].code;
1400:src/vm3.c     **** 
1401:src/vm3.c     **** 
1402:src/vm3.c     **** jr:
1403:src/vm3.c     **** #if INDIRECT_DEBUG
1404:src/vm3.c     **** printf("%d|jr\n",counter);
1405:src/vm3.c     **** counter++;
1406:src/vm3.c     **** #endif
1407:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1408:src/vm3.c     **** PC = nPC;
1409:src/vm3.c     **** nPC = RF[rs];
1410:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1411:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1412:src/vm3.c     ****   if (op0 == 0x0) {
1413:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1414:src/vm3.c     ****     op0 = op0 + funct;
1415:src/vm3.c     ****   }
1416:src/vm3.c     ****     else {
1417:src/vm3.c     ****     op0 = op0 + FIX_OP;
1418:src/vm3.c     ****   }
1419:src/vm3.c     **** 
1420:src/vm3.c     **** p = array;
1421:src/vm3.c     **** p = p[op0].next_level;
1422:src/vm3.c     **** 
1423:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1424:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1425:src/vm3.c     ****   if (op1 == 0x0) {
1426:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1427:src/vm3.c     ****     op1 = op1 + funct;
1428:src/vm3.c     ****   }
1429:src/vm3.c     ****     else {
1430:src/vm3.c     ****     op1 = op1 + FIX_OP;
1431:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 301


1432:src/vm3.c     **** 
1433:src/vm3.c     **** goto *p[op1].code;
1434:src/vm3.c     **** 
1435:src/vm3.c     **** 
1436:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1437:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1438:src/vm3.c     ****   if (op0 == 0x0) {
1439:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1440:src/vm3.c     ****     op0 = op0 + funct;
1441:src/vm3.c     ****   }
1442:src/vm3.c     ****     else {
1443:src/vm3.c     ****     op0 = op0 + FIX_OP;
1444:src/vm3.c     ****   }
1445:src/vm3.c     **** 
1446:src/vm3.c     **** p = array;
1447:src/vm3.c     **** p = p[op0].next_level;
1448:src/vm3.c     **** 
1449:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1450:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1451:src/vm3.c     ****   if (op1 == 0x0) {
1452:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1453:src/vm3.c     ****     op1 = op1 + funct;
1454:src/vm3.c     ****   }
1455:src/vm3.c     ****     else {
1456:src/vm3.c     ****     op1 = op1 + FIX_OP;
1457:src/vm3.c     ****   }
1458:src/vm3.c     **** 
1459:src/vm3.c     **** goto *p[op1].code;
1460:src/vm3.c     **** 
1461:src/vm3.c     **** 
1462:src/vm3.c     **** mfhi:
1463:src/vm3.c     **** #if INDIRECT_DEBUG
1464:src/vm3.c     **** printf("%d|mfhi\n",counter);
1465:src/vm3.c     **** counter++;
1466:src/vm3.c     **** #endif
1467:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1468:src/vm3.c     **** RF[rd] = HI;
1469:src/vm3.c     **** PC  =  nPC;
1470:src/vm3.c     **** nPC  += 4;
1471:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1472:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1473:src/vm3.c     ****   if (op0 == 0x0) {
1474:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1475:src/vm3.c     ****     op0 = op0 + funct;
1476:src/vm3.c     ****   }
1477:src/vm3.c     ****     else {
1478:src/vm3.c     ****     op0 = op0 + FIX_OP;
1479:src/vm3.c     ****   }
1480:src/vm3.c     **** 
1481:src/vm3.c     **** p = array;
1482:src/vm3.c     **** p = p[op0].next_level;
1483:src/vm3.c     **** 
1484:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1485:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1486:src/vm3.c     ****   if (op1 == 0x0) {
1487:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1488:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 302


1489:src/vm3.c     ****   }
1490:src/vm3.c     ****     else {
1491:src/vm3.c     ****     op1 = op1 + FIX_OP;
1492:src/vm3.c     ****   }
1493:src/vm3.c     **** 
1494:src/vm3.c     **** goto *p[op1].code;
1495:src/vm3.c     **** 
1496:src/vm3.c     **** 
1497:src/vm3.c     **** mflo:
1498:src/vm3.c     **** #if INDIRECT_DEBUG
1499:src/vm3.c     **** printf("%d|mflo\n",counter);
1500:src/vm3.c     **** counter++;
1501:src/vm3.c     **** #endif
1502:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1503:src/vm3.c     **** RF[rd] = LO;
1504:src/vm3.c     **** PC  =  nPC;
1505:src/vm3.c     **** nPC  += 4;
1506:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1507:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1508:src/vm3.c     ****   if (op0 == 0x0) {
1509:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1510:src/vm3.c     ****     op0 = op0 + funct;
1511:src/vm3.c     ****   }
1512:src/vm3.c     ****     else {
1513:src/vm3.c     ****     op0 = op0 + FIX_OP;
1514:src/vm3.c     ****   }
1515:src/vm3.c     **** 
1516:src/vm3.c     **** p = array;
1517:src/vm3.c     **** p = p[op0].next_level;
1518:src/vm3.c     **** 
1519:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1520:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1521:src/vm3.c     ****   if (op1 == 0x0) {
1522:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1523:src/vm3.c     ****     op1 = op1 + funct;
1524:src/vm3.c     ****   }
1525:src/vm3.c     ****     else {
1526:src/vm3.c     ****     op1 = op1 + FIX_OP;
1527:src/vm3.c     ****   }
1528:src/vm3.c     **** 
1529:src/vm3.c     **** goto *p[op1].code;
1530:src/vm3.c     **** 
1531:src/vm3.c     **** 
1532:src/vm3.c     **** mthi:
1533:src/vm3.c     **** #if INDIRECT_DEBUG
1534:src/vm3.c     **** printf("%d|mthi\n",counter);
1535:src/vm3.c     **** counter++;
1536:src/vm3.c     **** #endif
1537:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1538:src/vm3.c     **** HI = RF[rs];
1539:src/vm3.c     **** PC  =  nPC;
1540:src/vm3.c     **** nPC  += 4;
1541:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1542:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1543:src/vm3.c     ****   if (op0 == 0x0) {
1544:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1545:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 303


1546:src/vm3.c     ****   }
1547:src/vm3.c     ****     else {
1548:src/vm3.c     ****     op0 = op0 + FIX_OP;
1549:src/vm3.c     ****   }
1550:src/vm3.c     **** 
1551:src/vm3.c     **** p = array;
1552:src/vm3.c     **** p = p[op0].next_level;
1553:src/vm3.c     **** 
1554:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1555:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1556:src/vm3.c     ****   if (op1 == 0x0) {
1557:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1558:src/vm3.c     ****     op1 = op1 + funct;
1559:src/vm3.c     ****   }
1560:src/vm3.c     ****     else {
1561:src/vm3.c     ****     op1 = op1 + FIX_OP;
1562:src/vm3.c     ****   }
1563:src/vm3.c     **** 
1564:src/vm3.c     **** goto *p[op1].code;
1565:src/vm3.c     **** 
1566:src/vm3.c     **** 
1567:src/vm3.c     **** mtlo:
1568:src/vm3.c     **** #if INDIRECT_DEBUG
1569:src/vm3.c     **** printf("%d|mtlo\n",counter);
1570:src/vm3.c     **** counter++;
1571:src/vm3.c     **** #endif
1572:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1573:src/vm3.c     **** LO = RF[rs];
1574:src/vm3.c     **** PC  =  nPC;
1575:src/vm3.c     **** nPC  += 4;
1576:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1577:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1578:src/vm3.c     ****   if (op0 == 0x0) {
1579:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1580:src/vm3.c     ****     op0 = op0 + funct;
1581:src/vm3.c     ****   }
1582:src/vm3.c     ****     else {
1583:src/vm3.c     ****     op0 = op0 + FIX_OP;
1584:src/vm3.c     ****   }
1585:src/vm3.c     **** 
1586:src/vm3.c     **** p = array;
1587:src/vm3.c     **** p = p[op0].next_level;
1588:src/vm3.c     **** 
1589:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1590:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1591:src/vm3.c     ****   if (op1 == 0x0) {
1592:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1593:src/vm3.c     ****     op1 = op1 + funct;
1594:src/vm3.c     ****   }
1595:src/vm3.c     ****     else {
1596:src/vm3.c     ****     op1 = op1 + FIX_OP;
1597:src/vm3.c     ****   }
1598:src/vm3.c     **** 
1599:src/vm3.c     **** goto *p[op1].code;
1600:src/vm3.c     **** 
1601:src/vm3.c     **** 
1602:src/vm3.c     **** sysc:
GAS LISTING /tmp/cc15eBE3.s 			page 304


1603:src/vm3.c     **** #if INDIRECT_DEBUG
1604:src/vm3.c     **** printf("%d|sysc\n",counter);
1605:src/vm3.c     **** counter++;
1606:src/vm3.c     **** #endif
1607:src/vm3.c     **** if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respectively
1608:src/vm3.c     **** {
1609:src/vm3.c     **** halted = 1; //Syscall returned 1, exit code
1610:src/vm3.c     **** goto end;
1611:src/vm3.c     **** }
1612:src/vm3.c     **** PC  =  nPC;
1613:src/vm3.c     **** nPC  += 4;
1614:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1615:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1616:src/vm3.c     ****   if (op0 == 0x0) {
1617:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1618:src/vm3.c     ****     op0 = op0 + funct;
1619:src/vm3.c     ****   }
1620:src/vm3.c     ****     else {
1621:src/vm3.c     ****     op0 = op0 + FIX_OP;
1622:src/vm3.c     ****   }
1623:src/vm3.c     **** 
1624:src/vm3.c     **** p = array;
1625:src/vm3.c     **** p = p[op0].next_level;
1626:src/vm3.c     **** 
1627:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1628:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1629:src/vm3.c     ****   if (op1 == 0x0) {
1630:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1631:src/vm3.c     ****     op1 = op1 + funct;
1632:src/vm3.c     ****   }
1633:src/vm3.c     ****     else {
1634:src/vm3.c     ****     op1 = op1 + FIX_OP;
1635:src/vm3.c     ****   }
1636:src/vm3.c     **** 
1637:src/vm3.c     **** goto *p[op1].code;
1638:src/vm3.c     **** 
1639:src/vm3.c     **** 
1640:src/vm3.c     **** addi:
1641:src/vm3.c     **** #if INDIRECT_DEBUG
1642:src/vm3.c     **** printf("%d|addi\n",counter);
1643:src/vm3.c     **** counter++;
1644:src/vm3.c     **** #endif
1645:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1646:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1647:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1648:src/vm3.c     **** RF[rt] = RF[rs] + immediate; //Implementar trap!
1649:src/vm3.c     **** PC  =  nPC;
1650:src/vm3.c     **** nPC  += 4;
1651:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1652:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1653:src/vm3.c     ****   if (op0 == 0x0) {
1654:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1655:src/vm3.c     ****     op0 = op0 + funct;
1656:src/vm3.c     ****   }
1657:src/vm3.c     ****     else {
1658:src/vm3.c     ****     op0 = op0 + FIX_OP;
1659:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 305


1660:src/vm3.c     **** 
1661:src/vm3.c     **** p = array;
1662:src/vm3.c     **** p = p[op0].next_level;
1663:src/vm3.c     **** 
1664:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1665:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1666:src/vm3.c     ****   if (op1 == 0x0) {
1667:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1668:src/vm3.c     ****     op1 = op1 + funct;
1669:src/vm3.c     ****   }
1670:src/vm3.c     ****     else {
1671:src/vm3.c     ****     op1 = op1 + FIX_OP;
1672:src/vm3.c     ****   }
1673:src/vm3.c     **** 
1674:src/vm3.c     **** goto *p[op1].code;
1675:src/vm3.c     **** 
1676:src/vm3.c     **** 
1677:src/vm3.c     **** addiu:
1678:src/vm3.c     **** #if INDIRECT_DEBUG
1679:src/vm3.c     **** printf("%d|addiu\n",counter);
1680:src/vm3.c     **** counter++;
1681:src/vm3.c     **** #endif
1682:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1683:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1684:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1685:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
1686:src/vm3.c     **** PC  =  nPC;
1687:src/vm3.c     **** nPC  += 4;
1688:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1689:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1690:src/vm3.c     ****   if (op0 == 0x0) {
1691:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1692:src/vm3.c     ****     op0 = op0 + funct;
1693:src/vm3.c     ****   }
1694:src/vm3.c     ****     else {
1695:src/vm3.c     ****     op0 = op0 + FIX_OP;
1696:src/vm3.c     ****   }
1697:src/vm3.c     **** 
1698:src/vm3.c     **** p = array;
1699:src/vm3.c     **** p = p[op0].next_level;
1700:src/vm3.c     **** 
1701:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1702:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1703:src/vm3.c     ****   if (op1 == 0x0) {
1704:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1705:src/vm3.c     ****     op1 = op1 + funct;
1706:src/vm3.c     ****   }
1707:src/vm3.c     ****     else {
1708:src/vm3.c     ****     op1 = op1 + FIX_OP;
1709:src/vm3.c     ****   }
1710:src/vm3.c     **** 
1711:src/vm3.c     **** goto *p[op1].code;
1712:src/vm3.c     **** 
1713:src/vm3.c     **** 
1714:src/vm3.c     **** andi:
1715:src/vm3.c     **** #if INDIRECT_DEBUG
1716:src/vm3.c     **** printf("%d|andi\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 306


1717:src/vm3.c     **** counter++;
1718:src/vm3.c     **** #endif
1719:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1720:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1721:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1722:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
1723:src/vm3.c     **** PC  =  nPC;
1724:src/vm3.c     **** nPC  += 4;
1725:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1726:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1727:src/vm3.c     ****   if (op0 == 0x0) {
1728:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1729:src/vm3.c     ****     op0 = op0 + funct;
1730:src/vm3.c     ****   }
1731:src/vm3.c     ****     else {
1732:src/vm3.c     ****     op0 = op0 + FIX_OP;
1733:src/vm3.c     ****   }
1734:src/vm3.c     **** 
1735:src/vm3.c     **** p = array;
1736:src/vm3.c     **** p = p[op0].next_level;
1737:src/vm3.c     **** 
1738:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1739:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1740:src/vm3.c     ****   if (op1 == 0x0) {
1741:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1742:src/vm3.c     ****     op1 = op1 + funct;
1743:src/vm3.c     ****   }
1744:src/vm3.c     ****     else {
1745:src/vm3.c     ****     op1 = op1 + FIX_OP;
1746:src/vm3.c     ****   }
1747:src/vm3.c     **** 
1748:src/vm3.c     **** goto *p[op1].code;
1749:src/vm3.c     **** 
1750:src/vm3.c     **** 
1751:src/vm3.c     **** ori:
1752:src/vm3.c     **** #if INDIRECT_DEBUG
1753:src/vm3.c     **** printf("%d|ori\n",counter);
1754:src/vm3.c     **** counter++;
1755:src/vm3.c     **** #endif
1756:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1757:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1758:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1759:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
1760:src/vm3.c     **** PC  =  nPC;
1761:src/vm3.c     **** nPC  += 4;
1762:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1763:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1764:src/vm3.c     ****   if (op0 == 0x0) {
1765:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1766:src/vm3.c     ****     op0 = op0 + funct;
1767:src/vm3.c     ****   }
1768:src/vm3.c     ****     else {
1769:src/vm3.c     ****     op0 = op0 + FIX_OP;
1770:src/vm3.c     ****   }
1771:src/vm3.c     **** 
1772:src/vm3.c     **** p = array;
1773:src/vm3.c     **** p = p[op0].next_level;
GAS LISTING /tmp/cc15eBE3.s 			page 307


1774:src/vm3.c     **** 
1775:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1776:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1777:src/vm3.c     ****   if (op1 == 0x0) {
1778:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1779:src/vm3.c     ****     op1 = op1 + funct;
1780:src/vm3.c     ****   }
1781:src/vm3.c     ****     else {
1782:src/vm3.c     ****     op1 = op1 + FIX_OP;
1783:src/vm3.c     ****   }
1784:src/vm3.c     **** 
1785:src/vm3.c     **** goto *p[op1].code;
1786:src/vm3.c     **** 
1787:src/vm3.c     **** 
1788:src/vm3.c     **** xori:
1789:src/vm3.c     **** #if INDIRECT_DEBUG
1790:src/vm3.c     **** printf("%d|xori\n",counter);
1791:src/vm3.c     **** counter++;
1792:src/vm3.c     **** #endif
1793:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1794:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
1795:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1796:src/vm3.c     **** RF[rd] = RF[rs] ^ (uint32_t)immediate;
1797:src/vm3.c     **** PC  =  nPC;
1798:src/vm3.c     **** nPC  += 4;
1799:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1800:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1801:src/vm3.c     ****   if (op0 == 0x0) {
1802:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1803:src/vm3.c     ****     op0 = op0 + funct;
1804:src/vm3.c     ****   }
1805:src/vm3.c     ****     else {
1806:src/vm3.c     ****     op0 = op0 + FIX_OP;
1807:src/vm3.c     ****   }
1808:src/vm3.c     **** 
1809:src/vm3.c     **** p = array;
1810:src/vm3.c     **** p = p[op0].next_level;
1811:src/vm3.c     **** 
1812:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1813:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1814:src/vm3.c     ****   if (op1 == 0x0) {
1815:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1816:src/vm3.c     ****     op1 = op1 + funct;
1817:src/vm3.c     ****   }
1818:src/vm3.c     ****     else {
1819:src/vm3.c     ****     op1 = op1 + FIX_OP;
1820:src/vm3.c     ****   }
1821:src/vm3.c     **** 
1822:src/vm3.c     **** goto *p[op1].code;
1823:src/vm3.c     **** 
1824:src/vm3.c     **** 
1825:src/vm3.c     **** lui:
1826:src/vm3.c     **** #if INDIRECT_DEBUG
1827:src/vm3.c     **** printf("%d|lui\n",counter);
1828:src/vm3.c     **** counter++;
1829:src/vm3.c     **** #endif
1830:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
GAS LISTING /tmp/cc15eBE3.s 			page 308


1831:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1832:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1833:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
1834:src/vm3.c     **** PC  =  nPC;
1835:src/vm3.c     **** nPC  += 4;
1836:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1837:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1838:src/vm3.c     ****   if (op0 == 0x0) {
1839:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1840:src/vm3.c     ****     op0 = op0 + funct;
1841:src/vm3.c     ****   }
1842:src/vm3.c     ****     else {
1843:src/vm3.c     ****     op0 = op0 + FIX_OP;
1844:src/vm3.c     ****   }
1845:src/vm3.c     **** 
1846:src/vm3.c     **** p = array;
1847:src/vm3.c     **** p = p[op0].next_level;
1848:src/vm3.c     **** 
1849:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1850:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1851:src/vm3.c     ****   if (op1 == 0x0) {
1852:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1853:src/vm3.c     ****     op1 = op1 + funct;
1854:src/vm3.c     ****   }
1855:src/vm3.c     ****     else {
1856:src/vm3.c     ****     op1 = op1 + FIX_OP;
1857:src/vm3.c     ****   }
1858:src/vm3.c     **** 
1859:src/vm3.c     **** goto *p[op1].code;
1860:src/vm3.c     **** 
1861:src/vm3.c     **** 
1862:src/vm3.c     **** lhi:
1863:src/vm3.c     **** #if INDIRECT_DEBUG
1864:src/vm3.c     **** printf("%d|lhi\n",counter);
1865:src/vm3.c     **** counter++;
1866:src/vm3.c     **** #endif
1867:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1868:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1869:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
1870:src/vm3.c     **** PC  =  nPC;
1871:src/vm3.c     **** nPC  += 4;
1872:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1873:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1874:src/vm3.c     ****   if (op0 == 0x0) {
1875:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1876:src/vm3.c     ****     op0 = op0 + funct;
1877:src/vm3.c     ****   }
1878:src/vm3.c     ****     else {
1879:src/vm3.c     ****     op0 = op0 + FIX_OP;
1880:src/vm3.c     ****   }
1881:src/vm3.c     **** 
1882:src/vm3.c     **** p = array;
1883:src/vm3.c     **** p = p[op0].next_level;
1884:src/vm3.c     **** 
1885:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1886:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1887:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 309


1888:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1889:src/vm3.c     ****     op1 = op1 + funct;
1890:src/vm3.c     ****   }
1891:src/vm3.c     ****     else {
1892:src/vm3.c     ****     op1 = op1 + FIX_OP;
1893:src/vm3.c     ****   }
1894:src/vm3.c     **** 
1895:src/vm3.c     **** goto *p[op1].code;
1896:src/vm3.c     **** 
1897:src/vm3.c     **** 
1898:src/vm3.c     **** llo:
1899:src/vm3.c     **** #if INDIRECT_DEBUG
1900:src/vm3.c     **** printf("%d|llo\n",counter);
1901:src/vm3.c     **** counter++;
1902:src/vm3.c     **** #endif
1903:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1904:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1905:src/vm3.c     **** RF[rt] = immediate;
1906:src/vm3.c     **** PC  =  nPC;
1907:src/vm3.c     **** nPC  += 4;
1908:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1909:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1910:src/vm3.c     ****   if (op0 == 0x0) {
1911:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1912:src/vm3.c     ****     op0 = op0 + funct;
1913:src/vm3.c     ****   }
1914:src/vm3.c     ****     else {
1915:src/vm3.c     ****     op0 = op0 + FIX_OP;
1916:src/vm3.c     ****   }
1917:src/vm3.c     **** 
1918:src/vm3.c     **** p = array;
1919:src/vm3.c     **** p = p[op0].next_level;
1920:src/vm3.c     **** 
1921:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1922:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1923:src/vm3.c     ****   if (op1 == 0x0) {
1924:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1925:src/vm3.c     ****     op1 = op1 + funct;
1926:src/vm3.c     ****   }
1927:src/vm3.c     ****     else {
1928:src/vm3.c     ****     op1 = op1 + FIX_OP;
1929:src/vm3.c     ****   }
1930:src/vm3.c     **** 
1931:src/vm3.c     **** goto *p[op1].code;
1932:src/vm3.c     **** 
1933:src/vm3.c     **** 
1934:src/vm3.c     **** slti:
1935:src/vm3.c     **** #if INDIRECT_DEBUG
1936:src/vm3.c     **** printf("%d|slti\n",counter);
1937:src/vm3.c     **** counter++;
1938:src/vm3.c     **** #endif
1939:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1940:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1941:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1942:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
1943:src/vm3.c     **** PC  =  nPC;
1944:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 310


1945:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1946:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1947:src/vm3.c     ****   if (op0 == 0x0) {
1948:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1949:src/vm3.c     ****     op0 = op0 + funct;
1950:src/vm3.c     ****   }
1951:src/vm3.c     ****     else {
1952:src/vm3.c     ****     op0 = op0 + FIX_OP;
1953:src/vm3.c     ****   }
1954:src/vm3.c     **** 
1955:src/vm3.c     **** p = array;
1956:src/vm3.c     **** p = p[op0].next_level;
1957:src/vm3.c     **** 
1958:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1959:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1960:src/vm3.c     ****   if (op1 == 0x0) {
1961:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1962:src/vm3.c     ****     op1 = op1 + funct;
1963:src/vm3.c     ****   }
1964:src/vm3.c     ****     else {
1965:src/vm3.c     ****     op1 = op1 + FIX_OP;
1966:src/vm3.c     ****   }
1967:src/vm3.c     **** 
1968:src/vm3.c     **** goto *p[op1].code;
1969:src/vm3.c     **** 
1970:src/vm3.c     **** 
1971:src/vm3.c     **** sltiu:
1972:src/vm3.c     **** #if INDIRECT_DEBUG
1973:src/vm3.c     **** printf("%d|sltiu\n",counter);
1974:src/vm3.c     **** counter++;
1975:src/vm3.c     **** #endif
1976:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
1977:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
1978:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
1979:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
1980:src/vm3.c     **** PC  =  nPC;
1981:src/vm3.c     **** nPC  += 4;
1982:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
1983:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
1984:src/vm3.c     ****   if (op0 == 0x0) {
1985:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
1986:src/vm3.c     ****     op0 = op0 + funct;
1987:src/vm3.c     ****   }
1988:src/vm3.c     ****     else {
1989:src/vm3.c     ****     op0 = op0 + FIX_OP;
1990:src/vm3.c     ****   }
1991:src/vm3.c     **** 
1992:src/vm3.c     **** p = array;
1993:src/vm3.c     **** p = p[op0].next_level;
1994:src/vm3.c     **** 
1995:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
1996:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
1997:src/vm3.c     ****   if (op1 == 0x0) {
1998:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
1999:src/vm3.c     ****     op1 = op1 + funct;
2000:src/vm3.c     ****   }
2001:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 311


2002:src/vm3.c     ****     op1 = op1 + FIX_OP;
2003:src/vm3.c     ****   }
2004:src/vm3.c     **** 
2005:src/vm3.c     **** goto *p[op1].code;
2006:src/vm3.c     **** 
2007:src/vm3.c     **** 
2008:src/vm3.c     **** branch:
2009:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2010:src/vm3.c     **** if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
2011:src/vm3.c     **** {
2012:src/vm3.c     ****   #if INDIRECT_DEBUG
2013:src/vm3.c     ****   printf("%d|bgez\n",counter);
2014:src/vm3.c     ****   counter++;
2015:src/vm3.c     ****   #endif
2016:src/vm3.c     ****   rs = (instr0 >> 21) & 0x1F;
2017:src/vm3.c     ****   if ((int32_t)RF[rs] >= 0)
2018:src/vm3.c     ****   {
2019:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
2020:src/vm3.c     ****     PC  =  nPC;
2021:src/vm3.c     ****     nPC  += (immediate << 2);
2022:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
2023:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2024:src/vm3.c     ****   if (op0 == 0x0) {
2025:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2026:src/vm3.c     ****     op0 = op0 + funct;
2027:src/vm3.c     ****   }
2028:src/vm3.c     ****     else {
2029:src/vm3.c     ****     op0 = op0 + FIX_OP;
2030:src/vm3.c     ****   }
2031:src/vm3.c     **** 
2032:src/vm3.c     **** p = array;
2033:src/vm3.c     **** p = p[op0].next_level;
2034:src/vm3.c     **** 
2035:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2036:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2037:src/vm3.c     ****   if (op1 == 0x0) {
2038:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2039:src/vm3.c     ****     op1 = op1 + funct;
2040:src/vm3.c     ****   }
2041:src/vm3.c     ****     else {
2042:src/vm3.c     ****     op1 = op1 + FIX_OP;
2043:src/vm3.c     ****   }
2044:src/vm3.c     **** 
2045:src/vm3.c     **** goto *p[op1].code;
2046:src/vm3.c     **** 
2047:src/vm3.c     **** 
2048:src/vm3.c     ****   }
2049:src/vm3.c     ****   else
2050:src/vm3.c     ****   {
2051:src/vm3.c     ****     PC  =  nPC;
2052:src/vm3.c     ****     nPC  += 4;
2053:src/vm3.c     ****   }
2054:src/vm3.c     **** }
2055:src/vm3.c     **** else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
2056:src/vm3.c     **** {
2057:src/vm3.c     ****   #if INDIRECT_DEBUG
2058:src/vm3.c     ****   printf("%d|bgezal\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 312


2059:src/vm3.c     ****   counter++;
2060:src/vm3.c     ****   #endif
2061:src/vm3.c     ****   rs = (instr0 >> 21) & 0x1F;
2062:src/vm3.c     ****   if ((int32_t)RF[rs] >= 0)
2063:src/vm3.c     ****   {
2064:src/vm3.c     ****     RF[31] = PC + 8;
2065:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
2066:src/vm3.c     ****     PC  =  nPC;
2067:src/vm3.c     ****     nPC  += (immediate << 2);
2068:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
2069:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2070:src/vm3.c     ****   if (op0 == 0x0) {
2071:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2072:src/vm3.c     ****     op0 = op0 + funct;
2073:src/vm3.c     ****   }
2074:src/vm3.c     ****     else {
2075:src/vm3.c     ****     op0 = op0 + FIX_OP;
2076:src/vm3.c     ****   }
2077:src/vm3.c     **** 
2078:src/vm3.c     **** p = array;
2079:src/vm3.c     **** p = p[op0].next_level;
2080:src/vm3.c     **** 
2081:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2082:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2083:src/vm3.c     ****   if (op1 == 0x0) {
2084:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2085:src/vm3.c     ****     op1 = op1 + funct;
2086:src/vm3.c     ****   }
2087:src/vm3.c     ****     else {
2088:src/vm3.c     ****     op1 = op1 + FIX_OP;
2089:src/vm3.c     ****   }
2090:src/vm3.c     **** 
2091:src/vm3.c     **** goto *p[op1].code;
2092:src/vm3.c     **** 
2093:src/vm3.c     **** 
2094:src/vm3.c     ****   }
2095:src/vm3.c     ****   else
2096:src/vm3.c     ****   {
2097:src/vm3.c     ****     PC  =  nPC;
2098:src/vm3.c     ****     nPC  += 4;
2099:src/vm3.c     ****   }
2100:src/vm3.c     **** }
2101:src/vm3.c     **** else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
2102:src/vm3.c     **** {
2103:src/vm3.c     ****   #if INDIRECT_DEBUG
2104:src/vm3.c     ****   printf("%d|bltz\n",counter);
2105:src/vm3.c     ****   counter++;
2106:src/vm3.c     ****   #endif
2107:src/vm3.c     ****   rs = (instr0 >> 21) & 0x1F;
2108:src/vm3.c     ****   if ((int32_t)RF[rs] < 0)
2109:src/vm3.c     ****   {
2110:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
2111:src/vm3.c     ****     PC  =  nPC;
2112:src/vm3.c     ****     nPC  += (immediate << 2);
2113:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
2114:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2115:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 313


2116:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2117:src/vm3.c     ****     op0 = op0 + funct;
2118:src/vm3.c     ****   }
2119:src/vm3.c     ****     else {
2120:src/vm3.c     ****     op0 = op0 + FIX_OP;
2121:src/vm3.c     ****   }
2122:src/vm3.c     **** 
2123:src/vm3.c     **** p = array;
2124:src/vm3.c     **** p = p[op0].next_level;
2125:src/vm3.c     **** 
2126:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2127:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2128:src/vm3.c     ****   if (op1 == 0x0) {
2129:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2130:src/vm3.c     ****     op1 = op1 + funct;
2131:src/vm3.c     ****   }
2132:src/vm3.c     ****     else {
2133:src/vm3.c     ****     op1 = op1 + FIX_OP;
2134:src/vm3.c     ****   }
2135:src/vm3.c     **** 
2136:src/vm3.c     **** goto *p[op1].code;
2137:src/vm3.c     **** 
2138:src/vm3.c     **** 
2139:src/vm3.c     ****   }
2140:src/vm3.c     ****   else
2141:src/vm3.c     ****   {
2142:src/vm3.c     ****     PC  =  nPC;
2143:src/vm3.c     ****     nPC  += 4;
2144:src/vm3.c     ****   }
2145:src/vm3.c     **** }
2146:src/vm3.c     **** else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
2147:src/vm3.c     **** {
2148:src/vm3.c     ****   #if INDIRECT_DEBUG
2149:src/vm3.c     ****   printf("%d|bltzal\n",counter);
2150:src/vm3.c     ****   counter++;
2151:src/vm3.c     ****   #endif
2152:src/vm3.c     ****   rs = (instr0 >> 21) & 0x1F;
2153:src/vm3.c     ****   if ((int32_t)RF[rs] < 0)
2154:src/vm3.c     ****   {
2155:src/vm3.c     ****     RF[31] = PC + 8;
2156:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
2157:src/vm3.c     ****     PC  =  nPC;
2158:src/vm3.c     ****     nPC  += (immediate << 2);
2159:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
2160:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2161:src/vm3.c     ****   if (op0 == 0x0) {
2162:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2163:src/vm3.c     ****     op0 = op0 + funct;
2164:src/vm3.c     ****   }
2165:src/vm3.c     ****     else {
2166:src/vm3.c     ****     op0 = op0 + FIX_OP;
2167:src/vm3.c     ****   }
2168:src/vm3.c     **** 
2169:src/vm3.c     **** p = array;
2170:src/vm3.c     **** p = p[op0].next_level;
2171:src/vm3.c     **** 
2172:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 314


2173:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2174:src/vm3.c     ****   if (op1 == 0x0) {
2175:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2176:src/vm3.c     ****     op1 = op1 + funct;
2177:src/vm3.c     ****   }
2178:src/vm3.c     ****     else {
2179:src/vm3.c     ****     op1 = op1 + FIX_OP;
2180:src/vm3.c     ****   }
2181:src/vm3.c     **** 
2182:src/vm3.c     **** goto *p[op1].code;
2183:src/vm3.c     **** 
2184:src/vm3.c     **** 
2185:src/vm3.c     ****   }
2186:src/vm3.c     ****   else
2187:src/vm3.c     ****   {
2188:src/vm3.c     ****     PC  =  nPC;
2189:src/vm3.c     ****     nPC  += 4;
2190:src/vm3.c     ****   }
2191:src/vm3.c     **** }
2192:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2193:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2194:src/vm3.c     ****   if (op0 == 0x0) {
2195:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2196:src/vm3.c     ****     op0 = op0 + funct;
2197:src/vm3.c     ****   }
2198:src/vm3.c     ****     else {
2199:src/vm3.c     ****     op0 = op0 + FIX_OP;
2200:src/vm3.c     ****   }
2201:src/vm3.c     **** 
2202:src/vm3.c     **** p = array;
2203:src/vm3.c     **** p = p[op0].next_level;
2204:src/vm3.c     **** 
2205:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2206:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2207:src/vm3.c     ****   if (op1 == 0x0) {
2208:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2209:src/vm3.c     ****     op1 = op1 + funct;
2210:src/vm3.c     ****   }
2211:src/vm3.c     ****     else {
2212:src/vm3.c     ****     op1 = op1 + FIX_OP;
2213:src/vm3.c     ****   }
2214:src/vm3.c     **** 
2215:src/vm3.c     **** goto *p[op1].code;
2216:src/vm3.c     **** 
2217:src/vm3.c     **** 
2218:src/vm3.c     **** beq:
2219:src/vm3.c     **** #if INDIRECT_DEBUG
2220:src/vm3.c     **** printf("%d|beq\n",counter);
2221:src/vm3.c     **** counter++;
2222:src/vm3.c     **** #endif
2223:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2224:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2225:src/vm3.c     **** if (RF[rs] == RF[rt])
2226:src/vm3.c     **** {
2227:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
2228:src/vm3.c     ****   PC  =  nPC;
2229:src/vm3.c     ****   nPC  += (immediate << 2);
GAS LISTING /tmp/cc15eBE3.s 			page 315


2230:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
2231:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2232:src/vm3.c     ****   if (op0 == 0x0) {
2233:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2234:src/vm3.c     ****     op0 = op0 + funct;
2235:src/vm3.c     ****   }
2236:src/vm3.c     ****     else {
2237:src/vm3.c     ****     op0 = op0 + FIX_OP;
2238:src/vm3.c     ****   }
2239:src/vm3.c     **** 
2240:src/vm3.c     **** p = array;
2241:src/vm3.c     **** p = p[op0].next_level;
2242:src/vm3.c     **** 
2243:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2244:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2245:src/vm3.c     ****   if (op1 == 0x0) {
2246:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2247:src/vm3.c     ****     op1 = op1 + funct;
2248:src/vm3.c     ****   }
2249:src/vm3.c     ****     else {
2250:src/vm3.c     ****     op1 = op1 + FIX_OP;
2251:src/vm3.c     ****   }
2252:src/vm3.c     **** 
2253:src/vm3.c     **** goto *p[op1].code;
2254:src/vm3.c     **** 
2255:src/vm3.c     **** 
2256:src/vm3.c     **** }
2257:src/vm3.c     **** else
2258:src/vm3.c     **** {
2259:src/vm3.c     ****   PC  =  nPC;
2260:src/vm3.c     ****   nPC  += 4;
2261:src/vm3.c     **** }
2262:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2263:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2264:src/vm3.c     ****   if (op0 == 0x0) {
2265:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2266:src/vm3.c     ****     op0 = op0 + funct;
2267:src/vm3.c     ****   }
2268:src/vm3.c     ****     else {
2269:src/vm3.c     ****     op0 = op0 + FIX_OP;
2270:src/vm3.c     ****   }
2271:src/vm3.c     **** 
2272:src/vm3.c     **** p = array;
2273:src/vm3.c     **** p = p[op0].next_level;
2274:src/vm3.c     **** 
2275:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2276:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2277:src/vm3.c     ****   if (op1 == 0x0) {
2278:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2279:src/vm3.c     ****     op1 = op1 + funct;
2280:src/vm3.c     ****   }
2281:src/vm3.c     ****     else {
2282:src/vm3.c     ****     op1 = op1 + FIX_OP;
2283:src/vm3.c     ****   }
2284:src/vm3.c     **** 
2285:src/vm3.c     **** goto *p[op1].code;
2286:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 316


2287:src/vm3.c     **** 
2288:src/vm3.c     **** bgtz:
2289:src/vm3.c     **** #if INDIRECT_DEBUG
2290:src/vm3.c     **** printf("%d|bgtz\n",counter);
2291:src/vm3.c     **** counter++;
2292:src/vm3.c     **** #endif
2293:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2294:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
2295:src/vm3.c     **** {
2296:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
2297:src/vm3.c     ****   PC  =  nPC;
2298:src/vm3.c     ****   nPC  += (immediate << 2);
2299:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
2300:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2301:src/vm3.c     ****   if (op0 == 0x0) {
2302:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2303:src/vm3.c     ****     op0 = op0 + funct;
2304:src/vm3.c     ****   }
2305:src/vm3.c     ****     else {
2306:src/vm3.c     ****     op0 = op0 + FIX_OP;
2307:src/vm3.c     ****   }
2308:src/vm3.c     **** 
2309:src/vm3.c     **** p = array;
2310:src/vm3.c     **** p = p[op0].next_level;
2311:src/vm3.c     **** 
2312:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2313:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2314:src/vm3.c     ****   if (op1 == 0x0) {
2315:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2316:src/vm3.c     ****     op1 = op1 + funct;
2317:src/vm3.c     ****   }
2318:src/vm3.c     ****     else {
2319:src/vm3.c     ****     op1 = op1 + FIX_OP;
2320:src/vm3.c     ****   }
2321:src/vm3.c     **** 
2322:src/vm3.c     **** goto *p[op1].code;
2323:src/vm3.c     **** 
2324:src/vm3.c     **** 
2325:src/vm3.c     **** }
2326:src/vm3.c     **** else
2327:src/vm3.c     **** {
2328:src/vm3.c     ****   PC  =  nPC;
2329:src/vm3.c     ****   nPC  += 4;
2330:src/vm3.c     **** }
2331:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2332:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2333:src/vm3.c     ****   if (op0 == 0x0) {
2334:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2335:src/vm3.c     ****     op0 = op0 + funct;
2336:src/vm3.c     ****   }
2337:src/vm3.c     ****     else {
2338:src/vm3.c     ****     op0 = op0 + FIX_OP;
2339:src/vm3.c     ****   }
2340:src/vm3.c     **** 
2341:src/vm3.c     **** p = array;
2342:src/vm3.c     **** p = p[op0].next_level;
2343:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 317


2344:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2345:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2346:src/vm3.c     ****   if (op1 == 0x0) {
2347:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2348:src/vm3.c     ****     op1 = op1 + funct;
2349:src/vm3.c     ****   }
2350:src/vm3.c     ****     else {
2351:src/vm3.c     ****     op1 = op1 + FIX_OP;
2352:src/vm3.c     ****   }
2353:src/vm3.c     **** 
2354:src/vm3.c     **** goto *p[op1].code;
2355:src/vm3.c     **** 
2356:src/vm3.c     **** 
2357:src/vm3.c     **** blez:
2358:src/vm3.c     **** #if INDIRECT_DEBUG
2359:src/vm3.c     **** printf("%d|blez\n",counter);
2360:src/vm3.c     **** counter++;
2361:src/vm3.c     **** #endif
2362:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2363:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
2364:src/vm3.c     **** {
2365:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
2366:src/vm3.c     ****   PC  =  nPC;
2367:src/vm3.c     ****   nPC  += (immediate << 2);
2368:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
2369:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2370:src/vm3.c     ****   if (op0 == 0x0) {
2371:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2372:src/vm3.c     ****     op0 = op0 + funct;
2373:src/vm3.c     ****   }
2374:src/vm3.c     ****     else {
2375:src/vm3.c     ****     op0 = op0 + FIX_OP;
2376:src/vm3.c     ****   }
2377:src/vm3.c     **** 
2378:src/vm3.c     **** p = array;
2379:src/vm3.c     **** p = p[op0].next_level;
2380:src/vm3.c     **** 
2381:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2382:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2383:src/vm3.c     ****   if (op1 == 0x0) {
2384:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2385:src/vm3.c     ****     op1 = op1 + funct;
2386:src/vm3.c     ****   }
2387:src/vm3.c     ****     else {
2388:src/vm3.c     ****     op1 = op1 + FIX_OP;
2389:src/vm3.c     ****   }
2390:src/vm3.c     **** 
2391:src/vm3.c     **** goto *p[op1].code;
2392:src/vm3.c     **** 
2393:src/vm3.c     **** 
2394:src/vm3.c     **** }
2395:src/vm3.c     **** else
2396:src/vm3.c     **** {
2397:src/vm3.c     ****   PC  =  nPC;
2398:src/vm3.c     ****   nPC  += 4;
2399:src/vm3.c     **** }
2400:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 318


2401:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2402:src/vm3.c     ****   if (op0 == 0x0) {
2403:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2404:src/vm3.c     ****     op0 = op0 + funct;
2405:src/vm3.c     ****   }
2406:src/vm3.c     ****     else {
2407:src/vm3.c     ****     op0 = op0 + FIX_OP;
2408:src/vm3.c     ****   }
2409:src/vm3.c     **** 
2410:src/vm3.c     **** p = array;
2411:src/vm3.c     **** p = p[op0].next_level;
2412:src/vm3.c     **** 
2413:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2414:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2415:src/vm3.c     ****   if (op1 == 0x0) {
2416:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2417:src/vm3.c     ****     op1 = op1 + funct;
2418:src/vm3.c     ****   }
2419:src/vm3.c     ****     else {
2420:src/vm3.c     ****     op1 = op1 + FIX_OP;
2421:src/vm3.c     ****   }
2422:src/vm3.c     **** 
2423:src/vm3.c     **** goto *p[op1].code;
2424:src/vm3.c     **** 
2425:src/vm3.c     **** 
2426:src/vm3.c     **** bne:
2427:src/vm3.c     **** #if INDIRECT_DEBUG
2428:src/vm3.c     **** printf("%d|bne\n",counter);
2429:src/vm3.c     **** counter++;
2430:src/vm3.c     **** #endif
2431:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2432:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2433:src/vm3.c     **** if (RF[rs] != RF[rt])
2434:src/vm3.c     **** {
2435:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
2436:src/vm3.c     ****   PC  =  nPC;
2437:src/vm3.c     ****   nPC  += (immediate << 2);
2438:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
2439:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2440:src/vm3.c     ****   if (op0 == 0x0) {
2441:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2442:src/vm3.c     ****     op0 = op0 + funct;
2443:src/vm3.c     ****   }
2444:src/vm3.c     ****     else {
2445:src/vm3.c     ****     op0 = op0 + FIX_OP;
2446:src/vm3.c     ****   }
2447:src/vm3.c     **** 
2448:src/vm3.c     **** p = array;
2449:src/vm3.c     **** p = p[op0].next_level;
2450:src/vm3.c     **** 
2451:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2452:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2453:src/vm3.c     ****   if (op1 == 0x0) {
2454:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2455:src/vm3.c     ****     op1 = op1 + funct;
2456:src/vm3.c     ****   }
2457:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 319


2458:src/vm3.c     ****     op1 = op1 + FIX_OP;
2459:src/vm3.c     ****   }
2460:src/vm3.c     **** 
2461:src/vm3.c     **** goto *p[op1].code;
2462:src/vm3.c     **** 
2463:src/vm3.c     **** 
2464:src/vm3.c     **** }
2465:src/vm3.c     **** else
2466:src/vm3.c     **** {
2467:src/vm3.c     ****   PC  =  nPC;
2468:src/vm3.c     ****   nPC  += 4;
2469:src/vm3.c     **** }
2470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2472:src/vm3.c     ****   if (op0 == 0x0) {
2473:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2474:src/vm3.c     ****     op0 = op0 + funct;
2475:src/vm3.c     ****   }
2476:src/vm3.c     ****     else {
2477:src/vm3.c     ****     op0 = op0 + FIX_OP;
2478:src/vm3.c     ****   }
2479:src/vm3.c     **** 
2480:src/vm3.c     **** p = array;
2481:src/vm3.c     **** p = p[op0].next_level;
2482:src/vm3.c     **** 
2483:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2485:src/vm3.c     ****   if (op1 == 0x0) {
2486:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2487:src/vm3.c     ****     op1 = op1 + funct;
2488:src/vm3.c     ****   }
2489:src/vm3.c     ****     else {
2490:src/vm3.c     ****     op1 = op1 + FIX_OP;
2491:src/vm3.c     ****   }
2492:src/vm3.c     **** 
2493:src/vm3.c     **** goto *p[op1].code;
2494:src/vm3.c     **** 
2495:src/vm3.c     **** 
2496:src/vm3.c     **** lb:
2497:src/vm3.c     **** #if INDIRECT_DEBUG
2498:src/vm3.c     **** printf("%d|lb\n",counter);
2499:src/vm3.c     **** counter++;
2500:src/vm3.c     **** #endif
2501:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2502:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2503:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2504:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + immediate
2505:src/vm3.c     **** PC  =  nPC;
2506:src/vm3.c     **** nPC  += 4;
2507:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2508:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2509:src/vm3.c     ****   if (op0 == 0x0) {
2510:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2511:src/vm3.c     ****     op0 = op0 + funct;
2512:src/vm3.c     ****   }
2513:src/vm3.c     ****     else {
2514:src/vm3.c     ****     op0 = op0 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 320


2515:src/vm3.c     ****   }
2516:src/vm3.c     **** 
2517:src/vm3.c     **** p = array;
2518:src/vm3.c     **** p = p[op0].next_level;
2519:src/vm3.c     **** 
2520:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2521:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2522:src/vm3.c     ****   if (op1 == 0x0) {
2523:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2524:src/vm3.c     ****     op1 = op1 + funct;
2525:src/vm3.c     ****   }
2526:src/vm3.c     ****     else {
2527:src/vm3.c     ****     op1 = op1 + FIX_OP;
2528:src/vm3.c     ****   }
2529:src/vm3.c     **** 
2530:src/vm3.c     **** goto *p[op1].code;
2531:src/vm3.c     **** 
2532:src/vm3.c     **** 
2533:src/vm3.c     **** lbu:
2534:src/vm3.c     **** #if INDIRECT_DEBUG
2535:src/vm3.c     **** printf("%d|lbu\n",counter);
2536:src/vm3.c     **** counter++;
2537:src/vm3.c     **** #endif
2538:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2539:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2540:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2541:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
2542:src/vm3.c     **** PC  =  nPC;
2543:src/vm3.c     **** nPC  += 4;
2544:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2545:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2546:src/vm3.c     ****   if (op0 == 0x0) {
2547:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2548:src/vm3.c     ****     op0 = op0 + funct;
2549:src/vm3.c     ****   }
2550:src/vm3.c     ****     else {
2551:src/vm3.c     ****     op0 = op0 + FIX_OP;
2552:src/vm3.c     ****   }
2553:src/vm3.c     **** 
2554:src/vm3.c     **** p = array;
2555:src/vm3.c     **** p = p[op0].next_level;
2556:src/vm3.c     **** 
2557:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2558:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2559:src/vm3.c     ****   if (op1 == 0x0) {
2560:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2561:src/vm3.c     ****     op1 = op1 + funct;
2562:src/vm3.c     ****   }
2563:src/vm3.c     ****     else {
2564:src/vm3.c     ****     op1 = op1 + FIX_OP;
2565:src/vm3.c     ****   }
2566:src/vm3.c     **** 
2567:src/vm3.c     **** goto *p[op1].code;
2568:src/vm3.c     **** 
2569:src/vm3.c     **** 
2570:src/vm3.c     **** lh:
2571:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 321


2572:src/vm3.c     **** printf("%d|lh\n",counter);
2573:src/vm3.c     **** counter++;
2574:src/vm3.c     **** #endif
2575:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2576:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2577:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2578:src/vm3.c     **** RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + immedia
2579:src/vm3.c     **** PC  =  nPC;
2580:src/vm3.c     **** nPC  += 4;
2581:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2582:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2583:src/vm3.c     ****   if (op0 == 0x0) {
2584:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2585:src/vm3.c     ****     op0 = op0 + funct;
2586:src/vm3.c     ****   }
2587:src/vm3.c     ****     else {
2588:src/vm3.c     ****     op0 = op0 + FIX_OP;
2589:src/vm3.c     ****   }
2590:src/vm3.c     **** 
2591:src/vm3.c     **** p = array;
2592:src/vm3.c     **** p = p[op0].next_level;
2593:src/vm3.c     **** 
2594:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2595:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2596:src/vm3.c     ****   if (op1 == 0x0) {
2597:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2598:src/vm3.c     ****     op1 = op1 + funct;
2599:src/vm3.c     ****   }
2600:src/vm3.c     ****     else {
2601:src/vm3.c     ****     op1 = op1 + FIX_OP;
2602:src/vm3.c     ****   }
2603:src/vm3.c     **** 
2604:src/vm3.c     **** goto *p[op1].code;
2605:src/vm3.c     **** 
2606:src/vm3.c     **** 
2607:src/vm3.c     **** lhu:
2608:src/vm3.c     **** #if INDIRECT_DEBUG
2609:src/vm3.c     **** printf("%d|lhu\n",counter);
2610:src/vm3.c     **** counter++;
2611:src/vm3.c     **** #endif
2612:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2613:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2614:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2615:src/vm3.c     **** RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + immediat
2616:src/vm3.c     **** PC  =  nPC;
2617:src/vm3.c     **** nPC  += 4;
2618:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2619:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2620:src/vm3.c     ****   if (op0 == 0x0) {
2621:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2622:src/vm3.c     ****     op0 = op0 + funct;
2623:src/vm3.c     ****   }
2624:src/vm3.c     ****     else {
2625:src/vm3.c     ****     op0 = op0 + FIX_OP;
2626:src/vm3.c     ****   }
2627:src/vm3.c     **** 
2628:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 322


2629:src/vm3.c     **** p = p[op0].next_level;
2630:src/vm3.c     **** 
2631:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2632:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2633:src/vm3.c     ****   if (op1 == 0x0) {
2634:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2635:src/vm3.c     ****     op1 = op1 + funct;
2636:src/vm3.c     ****   }
2637:src/vm3.c     ****     else {
2638:src/vm3.c     ****     op1 = op1 + FIX_OP;
2639:src/vm3.c     ****   }
2640:src/vm3.c     **** 
2641:src/vm3.c     **** goto *p[op1].code;
2642:src/vm3.c     **** 
2643:src/vm3.c     **** 
2644:src/vm3.c     **** lw:
2645:src/vm3.c     **** #if INDIRECT_DEBUG
2646:src/vm3.c     **** printf("%d|lw\n",counter);
2647:src/vm3.c     **** counter++;
2648:src/vm3.c     **** #endif
2649:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2650:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2651:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2652:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
2653:src/vm3.c     **** PC  =  nPC;
2654:src/vm3.c     **** nPC  += 4;
2655:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2656:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2657:src/vm3.c     ****   if (op0 == 0x0) {
2658:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2659:src/vm3.c     ****     op0 = op0 + funct;
2660:src/vm3.c     ****   }
2661:src/vm3.c     ****     else {
2662:src/vm3.c     ****     op0 = op0 + FIX_OP;
2663:src/vm3.c     ****   }
2664:src/vm3.c     **** 
2665:src/vm3.c     **** p = array;
2666:src/vm3.c     **** p = p[op0].next_level;
2667:src/vm3.c     **** 
2668:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2670:src/vm3.c     ****   if (op1 == 0x0) {
2671:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2672:src/vm3.c     ****     op1 = op1 + funct;
2673:src/vm3.c     ****   }
2674:src/vm3.c     ****     else {
2675:src/vm3.c     ****     op1 = op1 + FIX_OP;
2676:src/vm3.c     ****   }
2677:src/vm3.c     **** 
2678:src/vm3.c     **** goto *p[op1].code;
2679:src/vm3.c     **** 
2680:src/vm3.c     **** 
2681:src/vm3.c     **** sb:
2682:src/vm3.c     **** #if INDIRECT_DEBUG
2683:src/vm3.c     **** printf("%d|sb\n",counter);
2684:src/vm3.c     **** counter++;
2685:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 323


2686:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2687:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2688:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2689:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
2690:src/vm3.c     **** PC  =  nPC;
2691:src/vm3.c     **** nPC  += 4;
2692:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2693:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2694:src/vm3.c     ****   if (op0 == 0x0) {
2695:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2696:src/vm3.c     ****     op0 = op0 + funct;
2697:src/vm3.c     ****   }
2698:src/vm3.c     ****     else {
2699:src/vm3.c     ****     op0 = op0 + FIX_OP;
2700:src/vm3.c     ****   }
2701:src/vm3.c     **** 
2702:src/vm3.c     **** p = array;
2703:src/vm3.c     **** p = p[op0].next_level;
2704:src/vm3.c     **** 
2705:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2706:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2707:src/vm3.c     ****   if (op1 == 0x0) {
2708:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2709:src/vm3.c     ****     op1 = op1 + funct;
2710:src/vm3.c     ****   }
2711:src/vm3.c     ****     else {
2712:src/vm3.c     ****     op1 = op1 + FIX_OP;
2713:src/vm3.c     ****   }
2714:src/vm3.c     **** 
2715:src/vm3.c     **** goto *p[op1].code;
2716:src/vm3.c     **** 
2717:src/vm3.c     **** 
2718:src/vm3.c     **** sh:
2719:src/vm3.c     **** #if INDIRECT_DEBUG
2720:src/vm3.c     **** printf("%d|sh\n",counter);
2721:src/vm3.c     **** counter++;
2722:src/vm3.c     **** #endif
2723:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2724:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2725:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2726:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
2727:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
2728:src/vm3.c     **** PC  =  nPC;
2729:src/vm3.c     **** nPC  += 4;
2730:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2731:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2732:src/vm3.c     ****   if (op0 == 0x0) {
2733:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2734:src/vm3.c     ****     op0 = op0 + funct;
2735:src/vm3.c     ****   }
2736:src/vm3.c     ****     else {
2737:src/vm3.c     ****     op0 = op0 + FIX_OP;
2738:src/vm3.c     ****   }
2739:src/vm3.c     **** 
2740:src/vm3.c     **** p = array;
2741:src/vm3.c     **** p = p[op0].next_level;
2742:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 324


2743:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2744:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2745:src/vm3.c     ****   if (op1 == 0x0) {
2746:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2747:src/vm3.c     ****     op1 = op1 + funct;
2748:src/vm3.c     ****   }
2749:src/vm3.c     ****     else {
2750:src/vm3.c     ****     op1 = op1 + FIX_OP;
2751:src/vm3.c     ****   }
2752:src/vm3.c     **** 
2753:src/vm3.c     **** goto *p[op1].code;
2754:src/vm3.c     **** 
2755:src/vm3.c     **** 
2756:src/vm3.c     **** sw:
2757:src/vm3.c     **** #if INDIRECT_DEBUG
2758:src/vm3.c     **** printf("%d|sw\n",counter);
2759:src/vm3.c     **** counter++;
2760:src/vm3.c     **** #endif
2761:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2762:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2763:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2764:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
2765:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
2766:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
2767:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
2768:src/vm3.c     **** PC  =  nPC;
2769:src/vm3.c     **** nPC  += 4;
2770:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2771:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2772:src/vm3.c     ****   if (op0 == 0x0) {
2773:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2774:src/vm3.c     ****     op0 = op0 + funct;
2775:src/vm3.c     ****   }
2776:src/vm3.c     ****     else {
2777:src/vm3.c     ****     op0 = op0 + FIX_OP;
2778:src/vm3.c     ****   }
2779:src/vm3.c     **** 
2780:src/vm3.c     **** p = array;
2781:src/vm3.c     **** p = p[op0].next_level;
2782:src/vm3.c     **** 
2783:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2784:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2785:src/vm3.c     ****   if (op1 == 0x0) {
2786:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2787:src/vm3.c     ****     op1 = op1 + funct;
2788:src/vm3.c     ****   }
2789:src/vm3.c     ****     else {
2790:src/vm3.c     ****     op1 = op1 + FIX_OP;
2791:src/vm3.c     ****   }
2792:src/vm3.c     **** 
2793:src/vm3.c     **** goto *p[op1].code;
2794:src/vm3.c     **** 
2795:src/vm3.c     **** 
2796:src/vm3.c     **** jump:
2797:src/vm3.c     **** #if INDIRECT_DEBUG
2798:src/vm3.c     **** printf("%d|jump\n",counter);
2799:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 325


2800:src/vm3.c     **** #endif
2801:src/vm3.c     **** PC = nPC;
2802:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
2803:src/vm3.c     **** nPC = address << 2;
2804:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2805:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2806:src/vm3.c     ****   if (op0 == 0x0) {
2807:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2808:src/vm3.c     ****     op0 = op0 + funct;
2809:src/vm3.c     ****   }
2810:src/vm3.c     ****     else {
2811:src/vm3.c     ****     op0 = op0 + FIX_OP;
2812:src/vm3.c     ****   }
2813:src/vm3.c     **** 
2814:src/vm3.c     **** p = array;
2815:src/vm3.c     **** p = p[op0].next_level;
2816:src/vm3.c     **** 
2817:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2818:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2819:src/vm3.c     ****   if (op1 == 0x0) {
2820:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2821:src/vm3.c     ****     op1 = op1 + funct;
2822:src/vm3.c     ****   }
2823:src/vm3.c     ****     else {
2824:src/vm3.c     ****     op1 = op1 + FIX_OP;
2825:src/vm3.c     ****   }
2826:src/vm3.c     **** 
2827:src/vm3.c     **** goto *p[op1].code;
2828:src/vm3.c     **** 
2829:src/vm3.c     **** 
2830:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2831:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2832:src/vm3.c     ****   if (op0 == 0x0) {
2833:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2834:src/vm3.c     ****     op0 = op0 + funct;
2835:src/vm3.c     ****   }
2836:src/vm3.c     ****     else {
2837:src/vm3.c     ****     op0 = op0 + FIX_OP;
2838:src/vm3.c     ****   }
2839:src/vm3.c     **** 
2840:src/vm3.c     **** p = array;
2841:src/vm3.c     **** p = p[op0].next_level;
2842:src/vm3.c     **** 
2843:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2844:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2845:src/vm3.c     ****   if (op1 == 0x0) {
2846:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2847:src/vm3.c     ****     op1 = op1 + funct;
2848:src/vm3.c     ****   }
2849:src/vm3.c     ****     else {
2850:src/vm3.c     ****     op1 = op1 + FIX_OP;
2851:src/vm3.c     ****   }
2852:src/vm3.c     **** 
2853:src/vm3.c     **** goto *p[op1].code;
2854:src/vm3.c     **** 
2855:src/vm3.c     **** 
2856:src/vm3.c     **** jal:
GAS LISTING /tmp/cc15eBE3.s 			page 326


2857:src/vm3.c     **** #if INDIRECT_DEBUG
2858:src/vm3.c     **** printf("%d|jal\n",counter);
2859:src/vm3.c     **** counter++;
2860:src/vm3.c     **** #endif
2861:src/vm3.c     **** RF[31] = PC + 8;
2862:src/vm3.c     **** PC = nPC;
2863:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
2864:src/vm3.c     **** nPC = address << 2;
2865:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2866:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2867:src/vm3.c     ****   if (op0 == 0x0) {
2868:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2869:src/vm3.c     ****     op0 = op0 + funct;
2870:src/vm3.c     ****   }
2871:src/vm3.c     ****     else {
2872:src/vm3.c     ****     op0 = op0 + FIX_OP;
2873:src/vm3.c     ****   }
2874:src/vm3.c     **** 
2875:src/vm3.c     **** p = array;
2876:src/vm3.c     **** p = p[op0].next_level;
2877:src/vm3.c     **** 
2878:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2879:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2880:src/vm3.c     ****   if (op1 == 0x0) {
2881:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2882:src/vm3.c     ****     op1 = op1 + funct;
2883:src/vm3.c     ****   }
2884:src/vm3.c     ****     else {
2885:src/vm3.c     ****     op1 = op1 + FIX_OP;
2886:src/vm3.c     ****   }
2887:src/vm3.c     **** 
2888:src/vm3.c     **** goto *p[op1].code;
2889:src/vm3.c     **** 
2890:src/vm3.c     **** 
2891:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2892:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2893:src/vm3.c     ****   if (op0 == 0x0) {
2894:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2895:src/vm3.c     ****     op0 = op0 + funct;
2896:src/vm3.c     ****   }
2897:src/vm3.c     ****     else {
2898:src/vm3.c     ****     op0 = op0 + FIX_OP;
2899:src/vm3.c     ****   }
2900:src/vm3.c     **** 
2901:src/vm3.c     **** p = array;
2902:src/vm3.c     **** p = p[op0].next_level;
2903:src/vm3.c     **** 
2904:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2905:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2906:src/vm3.c     ****   if (op1 == 0x0) {
2907:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2908:src/vm3.c     ****     op1 = op1 + funct;
2909:src/vm3.c     ****   }
2910:src/vm3.c     ****     else {
2911:src/vm3.c     ****     op1 = op1 + FIX_OP;
2912:src/vm3.c     ****   }
2913:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 327


2914:src/vm3.c     **** goto *p[op1].code;
2915:src/vm3.c     **** 
2916:src/vm3.c     **** 
2917:src/vm3.c     **** trap:
2918:src/vm3.c     **** #if INDIRECT_DEBUG
2919:src/vm3.c     **** printf("%d|trap\n",counter);
2920:src/vm3.c     **** counter++;
2921:src/vm3.c     **** #endif
2922:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
2923:src/vm3.c     **** syscall((uint8_t)(address&0xFF));
2924:src/vm3.c     **** PC  =  nPC;
2925:src/vm3.c     **** nPC  += 4;
2926:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
2927:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2928:src/vm3.c     ****   if (op0 == 0x0) {
2929:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2930:src/vm3.c     ****     op0 = op0 + funct;
2931:src/vm3.c     ****   }
2932:src/vm3.c     ****     else {
2933:src/vm3.c     ****     op0 = op0 + FIX_OP;
2934:src/vm3.c     ****   }
2935:src/vm3.c     **** 
2936:src/vm3.c     **** p = array;
2937:src/vm3.c     **** p = p[op0].next_level;
2938:src/vm3.c     **** 
2939:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2940:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2941:src/vm3.c     ****   if (op1 == 0x0) {
2942:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2943:src/vm3.c     ****     op1 = op1 + funct;
2944:src/vm3.c     ****   }
2945:src/vm3.c     ****     else {
2946:src/vm3.c     ****     op1 = op1 + FIX_OP;
2947:src/vm3.c     ****   }
2948:src/vm3.c     **** 
2949:src/vm3.c     **** goto *p[op1].code;
2950:src/vm3.c     **** 
2951:src/vm3.c     **** 
2952:src/vm3.c     **** swl:
2953:src/vm3.c     **** #if INDIRECT_DEBUG
2954:src/vm3.c     **** printf("%d|swl\n",counter);
2955:src/vm3.c     **** counter++;
2956:src/vm3.c     **** #endif
2957:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2958:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2959:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2960:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
2961:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
2962:src/vm3.c     **** PC  =  nPC;
2963:src/vm3.c     **** nPC  += 4;  instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_
2964:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
2965:src/vm3.c     ****   if (op0 == 0x0) {
2966:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
2967:src/vm3.c     ****     op0 = op0 + funct;
2968:src/vm3.c     ****   }
2969:src/vm3.c     ****     else {
2970:src/vm3.c     ****     op0 = op0 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 328


2971:src/vm3.c     ****   }
2972:src/vm3.c     **** 
2973:src/vm3.c     **** p = array;
2974:src/vm3.c     **** p = p[op0].next_level;
2975:src/vm3.c     **** 
2976:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
2977:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
2978:src/vm3.c     ****   if (op1 == 0x0) {
2979:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
2980:src/vm3.c     ****     op1 = op1 + funct;
2981:src/vm3.c     ****   }
2982:src/vm3.c     ****     else {
2983:src/vm3.c     ****     op1 = op1 + FIX_OP;
2984:src/vm3.c     ****   }
2985:src/vm3.c     **** 
2986:src/vm3.c     **** goto *p[op1].code;
2987:src/vm3.c     **** 
2988:src/vm3.c     **** 
2989:src/vm3.c     **** swr:
2990:src/vm3.c     **** #if INDIRECT_DEBUG
2991:src/vm3.c     **** printf("%d|swr\n",counter);
2992:src/vm3.c     **** counter++;
2993:src/vm3.c     **** #endif
2994:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
2995:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
2996:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
2997:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
2998:src/vm3.c     **** VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
2999:src/vm3.c     **** PC  =  nPC;
3000:src/vm3.c     **** nPC  += 4;
3001:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3002:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3003:src/vm3.c     ****   if (op0 == 0x0) {
3004:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3005:src/vm3.c     ****     op0 = op0 + funct;
3006:src/vm3.c     ****   }
3007:src/vm3.c     ****     else {
3008:src/vm3.c     ****     op0 = op0 + FIX_OP;
3009:src/vm3.c     ****   }
3010:src/vm3.c     **** 
3011:src/vm3.c     **** p = array;
3012:src/vm3.c     **** p = p[op0].next_level;
3013:src/vm3.c     **** 
3014:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3015:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3016:src/vm3.c     ****   if (op1 == 0x0) {
3017:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3018:src/vm3.c     ****     op1 = op1 + funct;
3019:src/vm3.c     ****   }
3020:src/vm3.c     ****     else {
3021:src/vm3.c     ****     op1 = op1 + FIX_OP;
3022:src/vm3.c     ****   }
3023:src/vm3.c     **** 
3024:src/vm3.c     **** goto *p[op1].code;
3025:src/vm3.c     **** 
3026:src/vm3.c     **** 
3027:src/vm3.c     **** lwl:
GAS LISTING /tmp/cc15eBE3.s 			page 329


3028:src/vm3.c     **** #if INDIRECT_DEBUG
3029:src/vm3.c     **** printf("%d|lwl\n",counter);
3030:src/vm3.c     **** counter++;
3031:src/vm3.c     **** #endif
3032:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3033:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3034:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3035:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
3036:src/vm3.c     **** PC  =  nPC;
3037:src/vm3.c     **** nPC  += 4;
3038:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3039:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3040:src/vm3.c     ****   if (op0 == 0x0) {
3041:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3042:src/vm3.c     ****     op0 = op0 + funct;
3043:src/vm3.c     ****   }
3044:src/vm3.c     ****     else {
3045:src/vm3.c     ****     op0 = op0 + FIX_OP;
3046:src/vm3.c     ****   }
3047:src/vm3.c     **** 
3048:src/vm3.c     **** p = array;
3049:src/vm3.c     **** p = p[op0].next_level;
3050:src/vm3.c     **** 
3051:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3052:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3053:src/vm3.c     ****   if (op1 == 0x0) {
3054:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3055:src/vm3.c     ****     op1 = op1 + funct;
3056:src/vm3.c     ****   }
3057:src/vm3.c     ****     else {
3058:src/vm3.c     ****     op1 = op1 + FIX_OP;
3059:src/vm3.c     ****   }
3060:src/vm3.c     **** 
3061:src/vm3.c     **** goto *p[op1].code;
3062:src/vm3.c     **** 
3063:src/vm3.c     **** 
3064:src/vm3.c     **** lwr:
3065:src/vm3.c     **** #if INDIRECT_DEBUG
3066:src/vm3.c     **** printf("%d|lwr\n",counter);
3067:src/vm3.c     **** counter++;
3068:src/vm3.c     **** #endif
3069:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3070:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3071:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3072:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + immedi
3073:src/vm3.c     **** PC  =  nPC;
3074:src/vm3.c     **** nPC  += 4;
3075:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3076:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3077:src/vm3.c     ****   if (op0 == 0x0) {
3078:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3079:src/vm3.c     ****     op0 = op0 + funct;
3080:src/vm3.c     ****   }
3081:src/vm3.c     ****     else {
3082:src/vm3.c     ****     op0 = op0 + FIX_OP;
3083:src/vm3.c     ****   }
3084:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 330


3085:src/vm3.c     **** p = array;
3086:src/vm3.c     **** p = p[op0].next_level;
3087:src/vm3.c     **** 
3088:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3089:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3090:src/vm3.c     ****   if (op1 == 0x0) {
3091:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3092:src/vm3.c     ****     op1 = op1 + funct;
3093:src/vm3.c     ****   }
3094:src/vm3.c     ****     else {
3095:src/vm3.c     ****     op1 = op1 + FIX_OP;
3096:src/vm3.c     ****   }
3097:src/vm3.c     **** 
3098:src/vm3.c     **** goto *p[op1].code;
3099:src/vm3.c     **** 
3100:src/vm3.c     **** 
3101:src/vm3.c     **** error:
3102:src/vm3.c     **** #if INDIRECT_DEBUG
3103:src/vm3.c     **** printf("Error, unknown instr0uction %d.\n", instr0);
3104:src/vm3.c     **** #endif
3105:src/vm3.c     **** PC  =  nPC;
3106:src/vm3.c     **** nPC  += 4;
3107:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3108:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3109:src/vm3.c     ****   if (op0 == 0x0) {
3110:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3111:src/vm3.c     ****     op0 = op0 + funct;
3112:src/vm3.c     ****   }
3113:src/vm3.c     ****     else {
3114:src/vm3.c     ****     op0 = op0 + FIX_OP;
3115:src/vm3.c     ****   }
3116:src/vm3.c     **** 
3117:src/vm3.c     **** p = array;
3118:src/vm3.c     **** p = p[op0].next_level;
3119:src/vm3.c     **** 
3120:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3121:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3122:src/vm3.c     ****   if (op1 == 0x0) {
3123:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3124:src/vm3.c     ****     op1 = op1 + funct;
3125:src/vm3.c     ****   }
3126:src/vm3.c     ****     else {
3127:src/vm3.c     ****     op1 = op1 + FIX_OP;
3128:src/vm3.c     ****   }
3129:src/vm3.c     **** 
3130:src/vm3.c     **** goto *p[op1].code;
3131:src/vm3.c     **** 
3132:src/vm3.c     **** 
3133:src/vm3.c     **** luiPLUSlui:
3134:src/vm3.c     **** #if INDIRECT_DEBUG
3135:src/vm3.c     **** printf("%d|lui\n",counter);
3136:src/vm3.c     **** counter++;
3137:src/vm3.c     **** #endif
3138:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
3139:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3140:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3141:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
GAS LISTING /tmp/cc15eBE3.s 			page 331


3142:src/vm3.c     **** PC  =  nPC;
3143:src/vm3.c     **** nPC  += 4;
3144:src/vm3.c     **** 
3145:src/vm3.c     **** #if INDIRECT_DEBUG
3146:src/vm3.c     **** printf("%d|lui\n",counter);
3147:src/vm3.c     **** counter++;
3148:src/vm3.c     **** #endif
3149:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
3150:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3151:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
3152:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
3153:src/vm3.c     **** PC  =  nPC;
3154:src/vm3.c     **** nPC  += 4;
3155:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3156:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3157:src/vm3.c     ****   if (op0 == 0x0) {
3158:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3159:src/vm3.c     ****     op0 = op0 + funct;
3160:src/vm3.c     ****   }
3161:src/vm3.c     ****     else {
3162:src/vm3.c     ****     op0 = op0 + FIX_OP;
3163:src/vm3.c     ****   }
3164:src/vm3.c     **** 
3165:src/vm3.c     **** p = array;
3166:src/vm3.c     **** p = p[op0].next_level;
3167:src/vm3.c     **** 
3168:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3169:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3170:src/vm3.c     ****   if (op1 == 0x0) {
3171:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3172:src/vm3.c     ****     op1 = op1 + funct;
3173:src/vm3.c     ****   }
3174:src/vm3.c     ****     else {
3175:src/vm3.c     ****     op1 = op1 + FIX_OP;
3176:src/vm3.c     ****   }
3177:src/vm3.c     **** 
3178:src/vm3.c     **** goto *p[op1].code;
3179:src/vm3.c     **** 
3180:src/vm3.c     **** 
3181:src/vm3.c     **** movnPLUSaddiu:
3182:src/vm3.c     **** #if INDIRECT_DEBUG
3183:src/vm3.c     **** printf("%d|movn\n",counter);
3184:src/vm3.c     **** counter++;
3185:src/vm3.c     **** #endif
3186:src/vm3.c     **** 
3187:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3188:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3189:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3190:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
3191:src/vm3.c     **** PC  =  nPC;
3192:src/vm3.c     **** nPC  += 4;
3193:src/vm3.c     **** 
3194:src/vm3.c     **** #if INDIRECT_DEBUG
3195:src/vm3.c     **** printf("%d|addiu\n",counter);
3196:src/vm3.c     **** counter++;
3197:src/vm3.c     **** #endif
3198:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 332


3199:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3200:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
3201:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
3202:src/vm3.c     **** PC  =  nPC;
3203:src/vm3.c     **** nPC  += 4;
3204:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3205:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3206:src/vm3.c     ****   if (op0 == 0x0) {
3207:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3208:src/vm3.c     ****     op0 = op0 + funct;
3209:src/vm3.c     ****   }
3210:src/vm3.c     ****     else {
3211:src/vm3.c     ****     op0 = op0 + FIX_OP;
3212:src/vm3.c     ****   }
3213:src/vm3.c     **** 
3214:src/vm3.c     **** p = array;
3215:src/vm3.c     **** p = p[op0].next_level;
3216:src/vm3.c     **** 
3217:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3218:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3219:src/vm3.c     ****   if (op1 == 0x0) {
3220:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3221:src/vm3.c     ****     op1 = op1 + funct;
3222:src/vm3.c     ****   }
3223:src/vm3.c     ****     else {
3224:src/vm3.c     ****     op1 = op1 + FIX_OP;
3225:src/vm3.c     ****   }
3226:src/vm3.c     **** 
3227:src/vm3.c     **** goto *p[op1].code;
3228:src/vm3.c     **** 
3229:src/vm3.c     **** 
3230:src/vm3.c     **** sllPLUSmult:
3231:src/vm3.c     **** #if INDIRECT_DEBUG
3232:src/vm3.c     **** printf("%d|sll\n",counter);
3233:src/vm3.c     **** counter++;
3234:src/vm3.c     **** #endif
3235:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
3236:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3237:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3238:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
3239:src/vm3.c     **** PC  =  nPC;
3240:src/vm3.c     **** nPC  += 4;
3241:src/vm3.c     **** 
3242:src/vm3.c     **** #if INDIRECT_DEBUG
3243:src/vm3.c     **** printf("%d|mult\n",counter);
3244:src/vm3.c     **** counter++;
3245:src/vm3.c     **** #endif
3246:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3247:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3248:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
3249:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
3250:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
3251:src/vm3.c     **** PC  =  nPC;
3252:src/vm3.c     **** nPC  += 4;
3253:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3254:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3255:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 333


3256:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3257:src/vm3.c     ****     op0 = op0 + funct;
3258:src/vm3.c     ****   }
3259:src/vm3.c     ****     else {
3260:src/vm3.c     ****     op0 = op0 + FIX_OP;
3261:src/vm3.c     ****   }
3262:src/vm3.c     **** 
3263:src/vm3.c     **** p = array;
3264:src/vm3.c     **** p = p[op0].next_level;
3265:src/vm3.c     **** 
3266:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3267:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3268:src/vm3.c     ****   if (op1 == 0x0) {
3269:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3270:src/vm3.c     ****     op1 = op1 + funct;
3271:src/vm3.c     ****   }
3272:src/vm3.c     ****     else {
3273:src/vm3.c     ****     op1 = op1 + FIX_OP;
3274:src/vm3.c     ****   }
3275:src/vm3.c     **** 
3276:src/vm3.c     **** goto *p[op1].code;
3277:src/vm3.c     **** 
3278:src/vm3.c     **** 
3279:src/vm3.c     **** movnPLUSbne:
3280:src/vm3.c     **** #if INDIRECT_DEBUG
3281:src/vm3.c     **** printf("%d|movn\n",counter);
3282:src/vm3.c     **** counter++;
3283:src/vm3.c     **** #endif
3284:src/vm3.c     **** 
3285:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3286:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3287:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3288:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
3289:src/vm3.c     **** PC  =  nPC;
3290:src/vm3.c     **** nPC  += 4;
3291:src/vm3.c     **** 
3292:src/vm3.c     **** #if INDIRECT_DEBUG
3293:src/vm3.c     **** printf("%d|bne\n",counter);
3294:src/vm3.c     **** counter++;
3295:src/vm3.c     **** #endif
3296:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3297:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3298:src/vm3.c     **** if (RF[rs] != RF[rt])
3299:src/vm3.c     **** {
3300:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
3301:src/vm3.c     ****   PC  =  nPC;
3302:src/vm3.c     ****   nPC  += (immediate << 2);
3303:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
3304:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3305:src/vm3.c     ****   if (op0 == 0x0) {
3306:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3307:src/vm3.c     ****     op0 = op0 + funct;
3308:src/vm3.c     ****   }
3309:src/vm3.c     ****     else {
3310:src/vm3.c     ****     op0 = op0 + FIX_OP;
3311:src/vm3.c     ****   }
3312:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 334


3313:src/vm3.c     **** p = array;
3314:src/vm3.c     **** p = p[op0].next_level;
3315:src/vm3.c     **** 
3316:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3317:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3318:src/vm3.c     ****   if (op1 == 0x0) {
3319:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3320:src/vm3.c     ****     op1 = op1 + funct;
3321:src/vm3.c     ****   }
3322:src/vm3.c     ****     else {
3323:src/vm3.c     ****     op1 = op1 + FIX_OP;
3324:src/vm3.c     ****   }
3325:src/vm3.c     **** 
3326:src/vm3.c     **** goto *p[op1].code;
3327:src/vm3.c     **** 
3328:src/vm3.c     **** 
3329:src/vm3.c     **** }
3330:src/vm3.c     **** else
3331:src/vm3.c     **** {
3332:src/vm3.c     ****   PC  =  nPC;
3333:src/vm3.c     ****   nPC  += 4;
3334:src/vm3.c     **** }
3335:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3336:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3337:src/vm3.c     ****   if (op0 == 0x0) {
3338:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3339:src/vm3.c     ****     op0 = op0 + funct;
3340:src/vm3.c     ****   }
3341:src/vm3.c     ****     else {
3342:src/vm3.c     ****     op0 = op0 + FIX_OP;
3343:src/vm3.c     ****   }
3344:src/vm3.c     **** 
3345:src/vm3.c     **** p = array;
3346:src/vm3.c     **** p = p[op0].next_level;
3347:src/vm3.c     **** 
3348:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3349:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3350:src/vm3.c     ****   if (op1 == 0x0) {
3351:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3352:src/vm3.c     ****     op1 = op1 + funct;
3353:src/vm3.c     ****   }
3354:src/vm3.c     ****     else {
3355:src/vm3.c     ****     op1 = op1 + FIX_OP;
3356:src/vm3.c     ****   }
3357:src/vm3.c     **** 
3358:src/vm3.c     **** goto *p[op1].code;
3359:src/vm3.c     **** 
3360:src/vm3.c     **** 
3361:src/vm3.c     **** mfhiPLUSsrl:
3362:src/vm3.c     **** #if INDIRECT_DEBUG
3363:src/vm3.c     **** printf("%d|mfhi\n",counter);
3364:src/vm3.c     **** counter++;
3365:src/vm3.c     **** #endif
3366:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3367:src/vm3.c     **** RF[rd] = HI;
3368:src/vm3.c     **** PC  =  nPC;
3369:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 335


3370:src/vm3.c     **** 
3371:src/vm3.c     **** #if INDIRECT_DEBUG
3372:src/vm3.c     **** printf("%d|srl\n",counter);
3373:src/vm3.c     **** counter++;
3374:src/vm3.c     **** #endif
3375:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
3376:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3377:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3378:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
3379:src/vm3.c     **** PC  =  nPC;
3380:src/vm3.c     **** nPC  += 4;
3381:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3382:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3383:src/vm3.c     ****   if (op0 == 0x0) {
3384:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3385:src/vm3.c     ****     op0 = op0 + funct;
3386:src/vm3.c     ****   }
3387:src/vm3.c     ****     else {
3388:src/vm3.c     ****     op0 = op0 + FIX_OP;
3389:src/vm3.c     ****   }
3390:src/vm3.c     **** 
3391:src/vm3.c     **** p = array;
3392:src/vm3.c     **** p = p[op0].next_level;
3393:src/vm3.c     **** 
3394:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3395:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3396:src/vm3.c     ****   if (op1 == 0x0) {
3397:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3398:src/vm3.c     ****     op1 = op1 + funct;
3399:src/vm3.c     ****   }
3400:src/vm3.c     ****     else {
3401:src/vm3.c     ****     op1 = op1 + FIX_OP;
3402:src/vm3.c     ****   }
3403:src/vm3.c     **** 
3404:src/vm3.c     **** goto *p[op1].code;
3405:src/vm3.c     **** 
3406:src/vm3.c     **** 
3407:src/vm3.c     **** orPLUSsrl:
3408:src/vm3.c     **** #if INDIRECT_DEBUG
3409:src/vm3.c     **** printf("%d|or\n",counter);
3410:src/vm3.c     **** counter++;
3411:src/vm3.c     **** #endif
3412:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3413:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3414:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3415:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
3416:src/vm3.c     **** PC  =  nPC;
3417:src/vm3.c     **** nPC  += 4;
3418:src/vm3.c     **** 
3419:src/vm3.c     **** #if INDIRECT_DEBUG
3420:src/vm3.c     **** printf("%d|srl\n",counter);
3421:src/vm3.c     **** counter++;
3422:src/vm3.c     **** #endif
3423:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
3424:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3425:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3426:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
GAS LISTING /tmp/cc15eBE3.s 			page 336


3427:src/vm3.c     **** PC  =  nPC;
3428:src/vm3.c     **** nPC  += 4;
3429:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3430:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3431:src/vm3.c     ****   if (op0 == 0x0) {
3432:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3433:src/vm3.c     ****     op0 = op0 + funct;
3434:src/vm3.c     ****   }
3435:src/vm3.c     ****     else {
3436:src/vm3.c     ****     op0 = op0 + FIX_OP;
3437:src/vm3.c     ****   }
3438:src/vm3.c     **** 
3439:src/vm3.c     **** p = array;
3440:src/vm3.c     **** p = p[op0].next_level;
3441:src/vm3.c     **** 
3442:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3443:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3444:src/vm3.c     ****   if (op1 == 0x0) {
3445:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3446:src/vm3.c     ****     op1 = op1 + funct;
3447:src/vm3.c     ****   }
3448:src/vm3.c     ****     else {
3449:src/vm3.c     ****     op1 = op1 + FIX_OP;
3450:src/vm3.c     ****   }
3451:src/vm3.c     **** 
3452:src/vm3.c     **** goto *p[op1].code;
3453:src/vm3.c     **** 
3454:src/vm3.c     **** 
3455:src/vm3.c     **** adduPLUSsubu:
3456:src/vm3.c     **** #if INDIRECT_DEBUG
3457:src/vm3.c     **** printf("%d|addu\n",counter);
3458:src/vm3.c     **** counter++;
3459:src/vm3.c     **** #endif
3460:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3461:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3462:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3463:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
3464:src/vm3.c     **** PC  =  nPC;
3465:src/vm3.c     **** nPC  += 4;
3466:src/vm3.c     **** 
3467:src/vm3.c     **** #if INDIRECT_DEBUG
3468:src/vm3.c     **** printf("%d|subu\n",counter);
3469:src/vm3.c     **** counter++;
3470:src/vm3.c     **** #endif
3471:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3472:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3473:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3474:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
3475:src/vm3.c     **** PC  =  nPC;
3476:src/vm3.c     **** nPC  += 4;
3477:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3478:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3479:src/vm3.c     ****   if (op0 == 0x0) {
3480:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3481:src/vm3.c     ****     op0 = op0 + funct;
3482:src/vm3.c     ****   }
3483:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 337


3484:src/vm3.c     ****     op0 = op0 + FIX_OP;
3485:src/vm3.c     ****   }
3486:src/vm3.c     **** 
3487:src/vm3.c     **** p = array;
3488:src/vm3.c     **** p = p[op0].next_level;
3489:src/vm3.c     **** 
3490:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3491:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3492:src/vm3.c     ****   if (op1 == 0x0) {
3493:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3494:src/vm3.c     ****     op1 = op1 + funct;
3495:src/vm3.c     ****   }
3496:src/vm3.c     ****     else {
3497:src/vm3.c     ****     op1 = op1 + FIX_OP;
3498:src/vm3.c     ****   }
3499:src/vm3.c     **** 
3500:src/vm3.c     **** goto *p[op1].code;
3501:src/vm3.c     **** 
3502:src/vm3.c     **** 
3503:src/vm3.c     **** sltuPLUSmovn:
3504:src/vm3.c     **** #if INDIRECT_DEBUG
3505:src/vm3.c     **** printf("%d|sltu\n",counter);
3506:src/vm3.c     **** counter++;
3507:src/vm3.c     **** #endif
3508:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3509:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3510:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3511:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
3512:src/vm3.c     **** PC  =  nPC;
3513:src/vm3.c     **** nPC  += 4;
3514:src/vm3.c     **** 
3515:src/vm3.c     **** #if INDIRECT_DEBUG
3516:src/vm3.c     **** printf("%d|movn\n",counter);
3517:src/vm3.c     **** counter++;
3518:src/vm3.c     **** #endif
3519:src/vm3.c     **** 
3520:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3521:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3522:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3523:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
3524:src/vm3.c     **** PC  =  nPC;
3525:src/vm3.c     **** nPC  += 4;
3526:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3527:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3528:src/vm3.c     ****   if (op0 == 0x0) {
3529:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3530:src/vm3.c     ****     op0 = op0 + funct;
3531:src/vm3.c     ****   }
3532:src/vm3.c     ****     else {
3533:src/vm3.c     ****     op0 = op0 + FIX_OP;
3534:src/vm3.c     ****   }
3535:src/vm3.c     **** 
3536:src/vm3.c     **** p = array;
3537:src/vm3.c     **** p = p[op0].next_level;
3538:src/vm3.c     **** 
3539:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3540:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 338


3541:src/vm3.c     ****   if (op1 == 0x0) {
3542:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3543:src/vm3.c     ****     op1 = op1 + funct;
3544:src/vm3.c     ****   }
3545:src/vm3.c     ****     else {
3546:src/vm3.c     ****     op1 = op1 + FIX_OP;
3547:src/vm3.c     ****   }
3548:src/vm3.c     **** 
3549:src/vm3.c     **** goto *p[op1].code;
3550:src/vm3.c     **** 
3551:src/vm3.c     **** 
3552:src/vm3.c     **** sltuPLUSbeq:
3553:src/vm3.c     **** #if INDIRECT_DEBUG
3554:src/vm3.c     **** printf("%d|sltu\n",counter);
3555:src/vm3.c     **** counter++;
3556:src/vm3.c     **** #endif
3557:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3558:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3559:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3560:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
3561:src/vm3.c     **** PC  =  nPC;
3562:src/vm3.c     **** nPC  += 4;
3563:src/vm3.c     **** 
3564:src/vm3.c     **** #if INDIRECT_DEBUG
3565:src/vm3.c     **** printf("%d|beq\n",counter);
3566:src/vm3.c     **** counter++;
3567:src/vm3.c     **** #endif
3568:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3569:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3570:src/vm3.c     **** if (RF[rs] == RF[rt])
3571:src/vm3.c     **** {
3572:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
3573:src/vm3.c     ****   PC  =  nPC;
3574:src/vm3.c     ****   nPC  += (immediate << 2);
3575:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
3576:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3577:src/vm3.c     ****   if (op0 == 0x0) {
3578:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3579:src/vm3.c     ****     op0 = op0 + funct;
3580:src/vm3.c     ****   }
3581:src/vm3.c     ****     else {
3582:src/vm3.c     ****     op0 = op0 + FIX_OP;
3583:src/vm3.c     ****   }
3584:src/vm3.c     **** 
3585:src/vm3.c     **** p = array;
3586:src/vm3.c     **** p = p[op0].next_level;
3587:src/vm3.c     **** 
3588:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3589:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3590:src/vm3.c     ****   if (op1 == 0x0) {
3591:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3592:src/vm3.c     ****     op1 = op1 + funct;
3593:src/vm3.c     ****   }
3594:src/vm3.c     ****     else {
3595:src/vm3.c     ****     op1 = op1 + FIX_OP;
3596:src/vm3.c     ****   }
3597:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 339


3598:src/vm3.c     **** goto *p[op1].code;
3599:src/vm3.c     **** 
3600:src/vm3.c     **** 
3601:src/vm3.c     **** }
3602:src/vm3.c     **** else
3603:src/vm3.c     **** {
3604:src/vm3.c     ****   PC  =  nPC;
3605:src/vm3.c     ****   nPC  += 4;
3606:src/vm3.c     **** }
3607:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3608:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3609:src/vm3.c     ****   if (op0 == 0x0) {
3610:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3611:src/vm3.c     ****     op0 = op0 + funct;
3612:src/vm3.c     ****   }
3613:src/vm3.c     ****     else {
3614:src/vm3.c     ****     op0 = op0 + FIX_OP;
3615:src/vm3.c     ****   }
3616:src/vm3.c     **** 
3617:src/vm3.c     **** p = array;
3618:src/vm3.c     **** p = p[op0].next_level;
3619:src/vm3.c     **** 
3620:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3621:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3622:src/vm3.c     ****   if (op1 == 0x0) {
3623:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3624:src/vm3.c     ****     op1 = op1 + funct;
3625:src/vm3.c     ****   }
3626:src/vm3.c     ****     else {
3627:src/vm3.c     ****     op1 = op1 + FIX_OP;
3628:src/vm3.c     ****   }
3629:src/vm3.c     **** 
3630:src/vm3.c     **** goto *p[op1].code;
3631:src/vm3.c     **** 
3632:src/vm3.c     **** 
3633:src/vm3.c     **** sbPLUSsh:
3634:src/vm3.c     **** #if INDIRECT_DEBUG
3635:src/vm3.c     **** printf("%d|sb\n",counter);
3636:src/vm3.c     **** counter++;
3637:src/vm3.c     **** #endif
3638:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3639:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3640:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3641:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
3642:src/vm3.c     **** PC  =  nPC;
3643:src/vm3.c     **** nPC  += 4;
3644:src/vm3.c     **** 
3645:src/vm3.c     **** #if INDIRECT_DEBUG
3646:src/vm3.c     **** printf("%d|sh\n",counter);
3647:src/vm3.c     **** counter++;
3648:src/vm3.c     **** #endif
3649:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3650:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3651:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
3652:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
3653:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
3654:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 340


3655:src/vm3.c     **** nPC  += 4;
3656:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3657:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3658:src/vm3.c     ****   if (op0 == 0x0) {
3659:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3660:src/vm3.c     ****     op0 = op0 + funct;
3661:src/vm3.c     ****   }
3662:src/vm3.c     ****     else {
3663:src/vm3.c     ****     op0 = op0 + FIX_OP;
3664:src/vm3.c     ****   }
3665:src/vm3.c     **** 
3666:src/vm3.c     **** p = array;
3667:src/vm3.c     **** p = p[op0].next_level;
3668:src/vm3.c     **** 
3669:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3670:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3671:src/vm3.c     ****   if (op1 == 0x0) {
3672:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3673:src/vm3.c     ****     op1 = op1 + funct;
3674:src/vm3.c     ****   }
3675:src/vm3.c     ****     else {
3676:src/vm3.c     ****     op1 = op1 + FIX_OP;
3677:src/vm3.c     ****   }
3678:src/vm3.c     **** 
3679:src/vm3.c     **** goto *p[op1].code;
3680:src/vm3.c     **** 
3681:src/vm3.c     **** 
3682:src/vm3.c     **** mfhiPLUSaddiu:
3683:src/vm3.c     **** #if INDIRECT_DEBUG
3684:src/vm3.c     **** printf("%d|mfhi\n",counter);
3685:src/vm3.c     **** counter++;
3686:src/vm3.c     **** #endif
3687:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3688:src/vm3.c     **** RF[rd] = HI;
3689:src/vm3.c     **** PC  =  nPC;
3690:src/vm3.c     **** nPC  += 4;
3691:src/vm3.c     **** 
3692:src/vm3.c     **** #if INDIRECT_DEBUG
3693:src/vm3.c     **** printf("%d|addiu\n",counter);
3694:src/vm3.c     **** counter++;
3695:src/vm3.c     **** #endif
3696:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3697:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3698:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
3699:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
3700:src/vm3.c     **** PC  =  nPC;
3701:src/vm3.c     **** nPC  += 4;
3702:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3703:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3704:src/vm3.c     ****   if (op0 == 0x0) {
3705:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3706:src/vm3.c     ****     op0 = op0 + funct;
3707:src/vm3.c     ****   }
3708:src/vm3.c     ****     else {
3709:src/vm3.c     ****     op0 = op0 + FIX_OP;
3710:src/vm3.c     ****   }
3711:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 341


3712:src/vm3.c     **** p = array;
3713:src/vm3.c     **** p = p[op0].next_level;
3714:src/vm3.c     **** 
3715:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3716:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3717:src/vm3.c     ****   if (op1 == 0x0) {
3718:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3719:src/vm3.c     ****     op1 = op1 + funct;
3720:src/vm3.c     ****   }
3721:src/vm3.c     ****     else {
3722:src/vm3.c     ****     op1 = op1 + FIX_OP;
3723:src/vm3.c     ****   }
3724:src/vm3.c     **** 
3725:src/vm3.c     **** goto *p[op1].code;
3726:src/vm3.c     **** 
3727:src/vm3.c     **** 
3728:src/vm3.c     **** xorPLUSsll:
3729:src/vm3.c     **** #if INDIRECT_DEBUG
3730:src/vm3.c     **** printf("%d|xor\n",counter);
3731:src/vm3.c     **** counter++;
3732:src/vm3.c     **** #endif
3733:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3734:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3735:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3736:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
3737:src/vm3.c     **** PC  =  nPC;
3738:src/vm3.c     **** nPC  += 4;
3739:src/vm3.c     **** 
3740:src/vm3.c     **** #if INDIRECT_DEBUG
3741:src/vm3.c     **** printf("%d|sll\n",counter);
3742:src/vm3.c     **** counter++;
3743:src/vm3.c     **** #endif
3744:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
3745:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3746:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3747:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
3748:src/vm3.c     **** PC  =  nPC;
3749:src/vm3.c     **** nPC  += 4;
3750:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3751:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3752:src/vm3.c     ****   if (op0 == 0x0) {
3753:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3754:src/vm3.c     ****     op0 = op0 + funct;
3755:src/vm3.c     ****   }
3756:src/vm3.c     ****     else {
3757:src/vm3.c     ****     op0 = op0 + FIX_OP;
3758:src/vm3.c     ****   }
3759:src/vm3.c     **** 
3760:src/vm3.c     **** p = array;
3761:src/vm3.c     **** p = p[op0].next_level;
3762:src/vm3.c     **** 
3763:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3764:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3765:src/vm3.c     ****   if (op1 == 0x0) {
3766:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3767:src/vm3.c     ****     op1 = op1 + funct;
3768:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 342


3769:src/vm3.c     ****     else {
3770:src/vm3.c     ****     op1 = op1 + FIX_OP;
3771:src/vm3.c     ****   }
3772:src/vm3.c     **** 
3773:src/vm3.c     **** goto *p[op1].code;
3774:src/vm3.c     **** 
3775:src/vm3.c     **** 
3776:src/vm3.c     **** lwPLUSaddu:
3777:src/vm3.c     **** #if INDIRECT_DEBUG
3778:src/vm3.c     **** printf("%d|lw\n",counter);
3779:src/vm3.c     **** counter++;
3780:src/vm3.c     **** #endif
3781:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3782:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3783:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3784:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
3785:src/vm3.c     **** PC  =  nPC;
3786:src/vm3.c     **** nPC  += 4;
3787:src/vm3.c     **** 
3788:src/vm3.c     **** #if INDIRECT_DEBUG
3789:src/vm3.c     **** printf("%d|addu\n",counter);
3790:src/vm3.c     **** counter++;
3791:src/vm3.c     **** #endif
3792:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3793:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3794:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3795:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
3796:src/vm3.c     **** PC  =  nPC;
3797:src/vm3.c     **** nPC  += 4;
3798:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3799:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3800:src/vm3.c     ****   if (op0 == 0x0) {
3801:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3802:src/vm3.c     ****     op0 = op0 + funct;
3803:src/vm3.c     ****   }
3804:src/vm3.c     ****     else {
3805:src/vm3.c     ****     op0 = op0 + FIX_OP;
3806:src/vm3.c     ****   }
3807:src/vm3.c     **** 
3808:src/vm3.c     **** p = array;
3809:src/vm3.c     **** p = p[op0].next_level;
3810:src/vm3.c     **** 
3811:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3812:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3813:src/vm3.c     ****   if (op1 == 0x0) {
3814:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3815:src/vm3.c     ****     op1 = op1 + funct;
3816:src/vm3.c     ****   }
3817:src/vm3.c     ****     else {
3818:src/vm3.c     ****     op1 = op1 + FIX_OP;
3819:src/vm3.c     ****   }
3820:src/vm3.c     **** 
3821:src/vm3.c     **** goto *p[op1].code;
3822:src/vm3.c     **** 
3823:src/vm3.c     **** 
3824:src/vm3.c     **** andiPLUSor:
3825:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 343


3826:src/vm3.c     **** printf("%d|andi\n",counter);
3827:src/vm3.c     **** counter++;
3828:src/vm3.c     **** #endif
3829:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3830:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3831:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3832:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
3833:src/vm3.c     **** PC  =  nPC;
3834:src/vm3.c     **** nPC  += 4;
3835:src/vm3.c     **** 
3836:src/vm3.c     **** #if INDIRECT_DEBUG
3837:src/vm3.c     **** printf("%d|or\n",counter);
3838:src/vm3.c     **** counter++;
3839:src/vm3.c     **** #endif
3840:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3841:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3842:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3843:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
3844:src/vm3.c     **** PC  =  nPC;
3845:src/vm3.c     **** nPC  += 4;
3846:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3847:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3848:src/vm3.c     ****   if (op0 == 0x0) {
3849:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3850:src/vm3.c     ****     op0 = op0 + funct;
3851:src/vm3.c     ****   }
3852:src/vm3.c     ****     else {
3853:src/vm3.c     ****     op0 = op0 + FIX_OP;
3854:src/vm3.c     ****   }
3855:src/vm3.c     **** 
3856:src/vm3.c     **** p = array;
3857:src/vm3.c     **** p = p[op0].next_level;
3858:src/vm3.c     **** 
3859:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3860:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3861:src/vm3.c     ****   if (op1 == 0x0) {
3862:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3863:src/vm3.c     ****     op1 = op1 + funct;
3864:src/vm3.c     ****   }
3865:src/vm3.c     ****     else {
3866:src/vm3.c     ****     op1 = op1 + FIX_OP;
3867:src/vm3.c     ****   }
3868:src/vm3.c     **** 
3869:src/vm3.c     **** goto *p[op1].code;
3870:src/vm3.c     **** 
3871:src/vm3.c     **** 
3872:src/vm3.c     **** andiPLUSsubu:
3873:src/vm3.c     **** #if INDIRECT_DEBUG
3874:src/vm3.c     **** printf("%d|andi\n",counter);
3875:src/vm3.c     **** counter++;
3876:src/vm3.c     **** #endif
3877:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3878:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3879:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3880:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
3881:src/vm3.c     **** PC  =  nPC;
3882:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 344


3883:src/vm3.c     **** 
3884:src/vm3.c     **** #if INDIRECT_DEBUG
3885:src/vm3.c     **** printf("%d|subu\n",counter);
3886:src/vm3.c     **** counter++;
3887:src/vm3.c     **** #endif
3888:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3889:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3890:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
3891:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
3892:src/vm3.c     **** PC  =  nPC;
3893:src/vm3.c     **** nPC  += 4;
3894:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3895:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3896:src/vm3.c     ****   if (op0 == 0x0) {
3897:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3898:src/vm3.c     ****     op0 = op0 + funct;
3899:src/vm3.c     ****   }
3900:src/vm3.c     ****     else {
3901:src/vm3.c     ****     op0 = op0 + FIX_OP;
3902:src/vm3.c     ****   }
3903:src/vm3.c     **** 
3904:src/vm3.c     **** p = array;
3905:src/vm3.c     **** p = p[op0].next_level;
3906:src/vm3.c     **** 
3907:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3908:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3909:src/vm3.c     ****   if (op1 == 0x0) {
3910:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3911:src/vm3.c     ****     op1 = op1 + funct;
3912:src/vm3.c     ****   }
3913:src/vm3.c     ****     else {
3914:src/vm3.c     ****     op1 = op1 + FIX_OP;
3915:src/vm3.c     ****   }
3916:src/vm3.c     **** 
3917:src/vm3.c     **** goto *p[op1].code;
3918:src/vm3.c     **** 
3919:src/vm3.c     **** 
3920:src/vm3.c     **** sltPLUSlw:
3921:src/vm3.c     **** #if INDIRECT_DEBUG
3922:src/vm3.c     **** printf("%d|slt\n",counter);
3923:src/vm3.c     **** counter++;
3924:src/vm3.c     **** #endif
3925:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3926:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3927:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
3928:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
3929:src/vm3.c     **** PC  =  nPC;
3930:src/vm3.c     **** nPC  += 4;
3931:src/vm3.c     **** 
3932:src/vm3.c     **** #if INDIRECT_DEBUG
3933:src/vm3.c     **** printf("%d|lw\n",counter);
3934:src/vm3.c     **** counter++;
3935:src/vm3.c     **** #endif
3936:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
3937:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
3938:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
3939:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
GAS LISTING /tmp/cc15eBE3.s 			page 345


3940:src/vm3.c     **** PC  =  nPC;
3941:src/vm3.c     **** nPC  += 4;
3942:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3943:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3944:src/vm3.c     ****   if (op0 == 0x0) {
3945:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3946:src/vm3.c     ****     op0 = op0 + funct;
3947:src/vm3.c     ****   }
3948:src/vm3.c     ****     else {
3949:src/vm3.c     ****     op0 = op0 + FIX_OP;
3950:src/vm3.c     ****   }
3951:src/vm3.c     **** 
3952:src/vm3.c     **** p = array;
3953:src/vm3.c     **** p = p[op0].next_level;
3954:src/vm3.c     **** 
3955:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
3956:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
3957:src/vm3.c     ****   if (op1 == 0x0) {
3958:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
3959:src/vm3.c     ****     op1 = op1 + funct;
3960:src/vm3.c     ****   }
3961:src/vm3.c     ****     else {
3962:src/vm3.c     ****     op1 = op1 + FIX_OP;
3963:src/vm3.c     ****   }
3964:src/vm3.c     **** 
3965:src/vm3.c     **** goto *p[op1].code;
3966:src/vm3.c     **** 
3967:src/vm3.c     **** 
3968:src/vm3.c     **** lwPLUSjump:
3969:src/vm3.c     **** #if INDIRECT_DEBUG
3970:src/vm3.c     **** printf("%d|lw\n",counter);
3971:src/vm3.c     **** counter++;
3972:src/vm3.c     **** #endif
3973:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
3974:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
3975:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
3976:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
3977:src/vm3.c     **** PC  =  nPC;
3978:src/vm3.c     **** nPC  += 4;
3979:src/vm3.c     **** 
3980:src/vm3.c     **** #if INDIRECT_DEBUG
3981:src/vm3.c     **** printf("%d|jump\n",counter);
3982:src/vm3.c     **** counter++;
3983:src/vm3.c     **** #endif
3984:src/vm3.c     **** PC = nPC;
3985:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
3986:src/vm3.c     **** nPC = address << 2;
3987:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
3988:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
3989:src/vm3.c     ****   if (op0 == 0x0) {
3990:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
3991:src/vm3.c     ****     op0 = op0 + funct;
3992:src/vm3.c     ****   }
3993:src/vm3.c     ****     else {
3994:src/vm3.c     ****     op0 = op0 + FIX_OP;
3995:src/vm3.c     ****   }
3996:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 346


3997:src/vm3.c     **** p = array;
3998:src/vm3.c     **** p = p[op0].next_level;
3999:src/vm3.c     **** 
4000:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4001:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4002:src/vm3.c     ****   if (op1 == 0x0) {
4003:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4004:src/vm3.c     ****     op1 = op1 + funct;
4005:src/vm3.c     ****   }
4006:src/vm3.c     ****     else {
4007:src/vm3.c     ****     op1 = op1 + FIX_OP;
4008:src/vm3.c     ****   }
4009:src/vm3.c     **** 
4010:src/vm3.c     **** goto *p[op1].code;
4011:src/vm3.c     **** 
4012:src/vm3.c     **** 
4013:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4014:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4015:src/vm3.c     ****   if (op0 == 0x0) {
4016:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4017:src/vm3.c     ****     op0 = op0 + funct;
4018:src/vm3.c     ****   }
4019:src/vm3.c     ****     else {
4020:src/vm3.c     ****     op0 = op0 + FIX_OP;
4021:src/vm3.c     ****   }
4022:src/vm3.c     **** 
4023:src/vm3.c     **** p = array;
4024:src/vm3.c     **** p = p[op0].next_level;
4025:src/vm3.c     **** 
4026:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4027:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4028:src/vm3.c     ****   if (op1 == 0x0) {
4029:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4030:src/vm3.c     ****     op1 = op1 + funct;
4031:src/vm3.c     ****   }
4032:src/vm3.c     ****     else {
4033:src/vm3.c     ****     op1 = op1 + FIX_OP;
4034:src/vm3.c     ****   }
4035:src/vm3.c     **** 
4036:src/vm3.c     **** goto *p[op1].code;
4037:src/vm3.c     **** 
4038:src/vm3.c     **** 
4039:src/vm3.c     **** blezPLUSsll:
4040:src/vm3.c     **** #if INDIRECT_DEBUG
4041:src/vm3.c     **** printf("%d|blez\n",counter);
4042:src/vm3.c     **** counter++;
4043:src/vm3.c     **** #endif
4044:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4045:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
4046:src/vm3.c     **** {
4047:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
4048:src/vm3.c     ****   PC  =  nPC;
4049:src/vm3.c     ****   nPC  += (immediate << 2);
4050:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
4051:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4052:src/vm3.c     ****   if (op0 == 0x0) {
4053:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 347


4054:src/vm3.c     ****     op0 = op0 + funct;
4055:src/vm3.c     ****   }
4056:src/vm3.c     ****     else {
4057:src/vm3.c     ****     op0 = op0 + FIX_OP;
4058:src/vm3.c     ****   }
4059:src/vm3.c     **** 
4060:src/vm3.c     **** p = array;
4061:src/vm3.c     **** p = p[op0].next_level;
4062:src/vm3.c     **** 
4063:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4064:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4065:src/vm3.c     ****   if (op1 == 0x0) {
4066:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4067:src/vm3.c     ****     op1 = op1 + funct;
4068:src/vm3.c     ****   }
4069:src/vm3.c     ****     else {
4070:src/vm3.c     ****     op1 = op1 + FIX_OP;
4071:src/vm3.c     ****   }
4072:src/vm3.c     **** 
4073:src/vm3.c     **** goto *p[op1].code;
4074:src/vm3.c     **** 
4075:src/vm3.c     **** 
4076:src/vm3.c     **** }
4077:src/vm3.c     **** else
4078:src/vm3.c     **** {
4079:src/vm3.c     ****   PC  =  nPC;
4080:src/vm3.c     ****   nPC  += 4;
4081:src/vm3.c     **** }
4082:src/vm3.c     **** 
4083:src/vm3.c     **** #if INDIRECT_DEBUG
4084:src/vm3.c     **** printf("%d|sll\n",counter);
4085:src/vm3.c     **** counter++;
4086:src/vm3.c     **** #endif
4087:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
4088:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4089:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
4090:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
4091:src/vm3.c     **** PC  =  nPC;
4092:src/vm3.c     **** nPC  += 4;
4093:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4094:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4095:src/vm3.c     ****   if (op0 == 0x0) {
4096:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4097:src/vm3.c     ****     op0 = op0 + funct;
4098:src/vm3.c     ****   }
4099:src/vm3.c     ****     else {
4100:src/vm3.c     ****     op0 = op0 + FIX_OP;
4101:src/vm3.c     ****   }
4102:src/vm3.c     **** 
4103:src/vm3.c     **** p = array;
4104:src/vm3.c     **** p = p[op0].next_level;
4105:src/vm3.c     **** 
4106:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4107:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4108:src/vm3.c     ****   if (op1 == 0x0) {
4109:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4110:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 348


4111:src/vm3.c     ****   }
4112:src/vm3.c     ****     else {
4113:src/vm3.c     ****     op1 = op1 + FIX_OP;
4114:src/vm3.c     ****   }
4115:src/vm3.c     **** 
4116:src/vm3.c     **** goto *p[op1].code;
4117:src/vm3.c     **** 
4118:src/vm3.c     **** 
4119:src/vm3.c     **** sllPLUSsw:
4120:src/vm3.c     **** #if INDIRECT_DEBUG
4121:src/vm3.c     **** printf("%d|sll\n",counter);
4122:src/vm3.c     **** counter++;
4123:src/vm3.c     **** #endif
4124:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
4125:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4126:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4127:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
4128:src/vm3.c     **** PC  =  nPC;
4129:src/vm3.c     **** nPC  += 4;
4130:src/vm3.c     **** 
4131:src/vm3.c     **** #if INDIRECT_DEBUG
4132:src/vm3.c     **** printf("%d|sw\n",counter);
4133:src/vm3.c     **** counter++;
4134:src/vm3.c     **** #endif
4135:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4136:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4137:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4138:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
4139:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
4140:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
4141:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
4142:src/vm3.c     **** PC  =  nPC;
4143:src/vm3.c     **** nPC  += 4;
4144:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4145:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4146:src/vm3.c     ****   if (op0 == 0x0) {
4147:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4148:src/vm3.c     ****     op0 = op0 + funct;
4149:src/vm3.c     ****   }
4150:src/vm3.c     ****     else {
4151:src/vm3.c     ****     op0 = op0 + FIX_OP;
4152:src/vm3.c     ****   }
4153:src/vm3.c     **** 
4154:src/vm3.c     **** p = array;
4155:src/vm3.c     **** p = p[op0].next_level;
4156:src/vm3.c     **** 
4157:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4158:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4159:src/vm3.c     ****   if (op1 == 0x0) {
4160:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4161:src/vm3.c     ****     op1 = op1 + funct;
4162:src/vm3.c     ****   }
4163:src/vm3.c     ****     else {
4164:src/vm3.c     ****     op1 = op1 + FIX_OP;
4165:src/vm3.c     ****   }
4166:src/vm3.c     **** 
4167:src/vm3.c     **** goto *p[op1].code;
GAS LISTING /tmp/cc15eBE3.s 			page 349


4168:src/vm3.c     **** 
4169:src/vm3.c     **** 
4170:src/vm3.c     **** beqPLUSaddiu:
4171:src/vm3.c     **** #if INDIRECT_DEBUG
4172:src/vm3.c     **** printf("%d|beq\n",counter);
4173:src/vm3.c     **** counter++;
4174:src/vm3.c     **** #endif
4175:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4176:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4177:src/vm3.c     **** if (RF[rs] == RF[rt])
4178:src/vm3.c     **** {
4179:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
4180:src/vm3.c     ****   PC  =  nPC;
4181:src/vm3.c     ****   nPC  += (immediate << 2);
4182:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
4183:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4184:src/vm3.c     ****   if (op0 == 0x0) {
4185:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4186:src/vm3.c     ****     op0 = op0 + funct;
4187:src/vm3.c     ****   }
4188:src/vm3.c     ****     else {
4189:src/vm3.c     ****     op0 = op0 + FIX_OP;
4190:src/vm3.c     ****   }
4191:src/vm3.c     **** 
4192:src/vm3.c     **** p = array;
4193:src/vm3.c     **** p = p[op0].next_level;
4194:src/vm3.c     **** 
4195:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4196:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4197:src/vm3.c     ****   if (op1 == 0x0) {
4198:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4199:src/vm3.c     ****     op1 = op1 + funct;
4200:src/vm3.c     ****   }
4201:src/vm3.c     ****     else {
4202:src/vm3.c     ****     op1 = op1 + FIX_OP;
4203:src/vm3.c     ****   }
4204:src/vm3.c     **** 
4205:src/vm3.c     **** goto *p[op1].code;
4206:src/vm3.c     **** 
4207:src/vm3.c     **** 
4208:src/vm3.c     **** }
4209:src/vm3.c     **** else
4210:src/vm3.c     **** {
4211:src/vm3.c     ****   PC  =  nPC;
4212:src/vm3.c     ****   nPC  += 4;
4213:src/vm3.c     **** }
4214:src/vm3.c     **** 
4215:src/vm3.c     **** #if INDIRECT_DEBUG
4216:src/vm3.c     **** printf("%d|addiu\n",counter);
4217:src/vm3.c     **** counter++;
4218:src/vm3.c     **** #endif
4219:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4220:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4221:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4222:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
4223:src/vm3.c     **** PC  =  nPC;
4224:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 350


4225:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4227:src/vm3.c     ****   if (op0 == 0x0) {
4228:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4229:src/vm3.c     ****     op0 = op0 + funct;
4230:src/vm3.c     ****   }
4231:src/vm3.c     ****     else {
4232:src/vm3.c     ****     op0 = op0 + FIX_OP;
4233:src/vm3.c     ****   }
4234:src/vm3.c     **** 
4235:src/vm3.c     **** p = array;
4236:src/vm3.c     **** p = p[op0].next_level;
4237:src/vm3.c     **** 
4238:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4239:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4240:src/vm3.c     ****   if (op1 == 0x0) {
4241:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4242:src/vm3.c     ****     op1 = op1 + funct;
4243:src/vm3.c     ****   }
4244:src/vm3.c     ****     else {
4245:src/vm3.c     ****     op1 = op1 + FIX_OP;
4246:src/vm3.c     ****   }
4247:src/vm3.c     **** 
4248:src/vm3.c     **** goto *p[op1].code;
4249:src/vm3.c     **** 
4250:src/vm3.c     **** 
4251:src/vm3.c     **** lwPLUSbeq:
4252:src/vm3.c     **** #if INDIRECT_DEBUG
4253:src/vm3.c     **** printf("%d|lw\n",counter);
4254:src/vm3.c     **** counter++;
4255:src/vm3.c     **** #endif
4256:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4257:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4258:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
4259:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
4260:src/vm3.c     **** PC  =  nPC;
4261:src/vm3.c     **** nPC  += 4;
4262:src/vm3.c     **** 
4263:src/vm3.c     **** #if INDIRECT_DEBUG
4264:src/vm3.c     **** printf("%d|beq\n",counter);
4265:src/vm3.c     **** counter++;
4266:src/vm3.c     **** #endif
4267:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4268:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4269:src/vm3.c     **** if (RF[rs] == RF[rt])
4270:src/vm3.c     **** {
4271:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
4272:src/vm3.c     ****   PC  =  nPC;
4273:src/vm3.c     ****   nPC  += (immediate << 2);
4274:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
4275:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4276:src/vm3.c     ****   if (op0 == 0x0) {
4277:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4278:src/vm3.c     ****     op0 = op0 + funct;
4279:src/vm3.c     ****   }
4280:src/vm3.c     ****     else {
4281:src/vm3.c     ****     op0 = op0 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 351


4282:src/vm3.c     ****   }
4283:src/vm3.c     **** 
4284:src/vm3.c     **** p = array;
4285:src/vm3.c     **** p = p[op0].next_level;
4286:src/vm3.c     **** 
4287:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4288:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4289:src/vm3.c     ****   if (op1 == 0x0) {
4290:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4291:src/vm3.c     ****     op1 = op1 + funct;
4292:src/vm3.c     ****   }
4293:src/vm3.c     ****     else {
4294:src/vm3.c     ****     op1 = op1 + FIX_OP;
4295:src/vm3.c     ****   }
4296:src/vm3.c     **** 
4297:src/vm3.c     **** goto *p[op1].code;
4298:src/vm3.c     **** 
4299:src/vm3.c     **** 
4300:src/vm3.c     **** }
4301:src/vm3.c     **** else
4302:src/vm3.c     **** {
4303:src/vm3.c     ****   PC  =  nPC;
4304:src/vm3.c     ****   nPC  += 4;
4305:src/vm3.c     **** }
4306:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4307:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4308:src/vm3.c     ****   if (op0 == 0x0) {
4309:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4310:src/vm3.c     ****     op0 = op0 + funct;
4311:src/vm3.c     ****   }
4312:src/vm3.c     ****     else {
4313:src/vm3.c     ****     op0 = op0 + FIX_OP;
4314:src/vm3.c     ****   }
4315:src/vm3.c     **** 
4316:src/vm3.c     **** p = array;
4317:src/vm3.c     **** p = p[op0].next_level;
4318:src/vm3.c     **** 
4319:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4320:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4321:src/vm3.c     ****   if (op1 == 0x0) {
4322:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4323:src/vm3.c     ****     op1 = op1 + funct;
4324:src/vm3.c     ****   }
4325:src/vm3.c     ****     else {
4326:src/vm3.c     ****     op1 = op1 + FIX_OP;
4327:src/vm3.c     ****   }
4328:src/vm3.c     **** 
4329:src/vm3.c     **** goto *p[op1].code;
4330:src/vm3.c     **** 
4331:src/vm3.c     **** 
4332:src/vm3.c     **** andPLUSandi:
4333:src/vm3.c     **** #if INDIRECT_DEBUG
4334:src/vm3.c     **** printf("%d|and\n",counter);
4335:src/vm3.c     **** counter++;
4336:src/vm3.c     **** #endif
4337:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4338:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 352


4339:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4340:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
4341:src/vm3.c     **** PC  =  nPC;
4342:src/vm3.c     **** nPC  += 4;
4343:src/vm3.c     **** 
4344:src/vm3.c     **** #if INDIRECT_DEBUG
4345:src/vm3.c     **** printf("%d|andi\n",counter);
4346:src/vm3.c     **** counter++;
4347:src/vm3.c     **** #endif
4348:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4349:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4350:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4351:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
4352:src/vm3.c     **** PC  =  nPC;
4353:src/vm3.c     **** nPC  += 4;
4354:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4355:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4356:src/vm3.c     ****   if (op0 == 0x0) {
4357:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4358:src/vm3.c     ****     op0 = op0 + funct;
4359:src/vm3.c     ****   }
4360:src/vm3.c     ****     else {
4361:src/vm3.c     ****     op0 = op0 + FIX_OP;
4362:src/vm3.c     ****   }
4363:src/vm3.c     **** 
4364:src/vm3.c     **** p = array;
4365:src/vm3.c     **** p = p[op0].next_level;
4366:src/vm3.c     **** 
4367:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4368:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4369:src/vm3.c     ****   if (op1 == 0x0) {
4370:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4371:src/vm3.c     ****     op1 = op1 + funct;
4372:src/vm3.c     ****   }
4373:src/vm3.c     ****     else {
4374:src/vm3.c     ****     op1 = op1 + FIX_OP;
4375:src/vm3.c     ****   }
4376:src/vm3.c     **** 
4377:src/vm3.c     **** goto *p[op1].code;
4378:src/vm3.c     **** 
4379:src/vm3.c     **** 
4380:src/vm3.c     **** addiuPLUSslt:
4381:src/vm3.c     **** #if INDIRECT_DEBUG
4382:src/vm3.c     **** printf("%d|addiu\n",counter);
4383:src/vm3.c     **** counter++;
4384:src/vm3.c     **** #endif
4385:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4386:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4387:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
4388:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
4389:src/vm3.c     **** PC  =  nPC;
4390:src/vm3.c     **** nPC  += 4;
4391:src/vm3.c     **** 
4392:src/vm3.c     **** #if INDIRECT_DEBUG
4393:src/vm3.c     **** printf("%d|slt\n",counter);
4394:src/vm3.c     **** counter++;
4395:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 353


4396:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4397:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4398:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
4399:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
4400:src/vm3.c     **** PC  =  nPC;
4401:src/vm3.c     **** nPC  += 4;
4402:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4403:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4404:src/vm3.c     ****   if (op0 == 0x0) {
4405:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4406:src/vm3.c     ****     op0 = op0 + funct;
4407:src/vm3.c     ****   }
4408:src/vm3.c     ****     else {
4409:src/vm3.c     ****     op0 = op0 + FIX_OP;
4410:src/vm3.c     ****   }
4411:src/vm3.c     **** 
4412:src/vm3.c     **** p = array;
4413:src/vm3.c     **** p = p[op0].next_level;
4414:src/vm3.c     **** 
4415:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4416:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4417:src/vm3.c     ****   if (op1 == 0x0) {
4418:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4419:src/vm3.c     ****     op1 = op1 + funct;
4420:src/vm3.c     ****   }
4421:src/vm3.c     ****     else {
4422:src/vm3.c     ****     op1 = op1 + FIX_OP;
4423:src/vm3.c     ****   }
4424:src/vm3.c     **** 
4425:src/vm3.c     **** goto *p[op1].code;
4426:src/vm3.c     **** 
4427:src/vm3.c     **** 
4428:src/vm3.c     **** multPLUSmfhi:
4429:src/vm3.c     **** #if INDIRECT_DEBUG
4430:src/vm3.c     **** printf("%d|mult\n",counter);
4431:src/vm3.c     **** counter++;
4432:src/vm3.c     **** #endif
4433:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4434:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4435:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
4436:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
4437:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
4438:src/vm3.c     **** PC  =  nPC;
4439:src/vm3.c     **** nPC  += 4;
4440:src/vm3.c     **** 
4441:src/vm3.c     **** #if INDIRECT_DEBUG
4442:src/vm3.c     **** printf("%d|mfhi\n",counter);
4443:src/vm3.c     **** counter++;
4444:src/vm3.c     **** #endif
4445:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
4446:src/vm3.c     **** RF[rd] = HI;
4447:src/vm3.c     **** PC  =  nPC;
4448:src/vm3.c     **** nPC  += 4;
4449:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4450:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4451:src/vm3.c     ****   if (op0 == 0x0) {
4452:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 354


4453:src/vm3.c     ****     op0 = op0 + funct;
4454:src/vm3.c     ****   }
4455:src/vm3.c     ****     else {
4456:src/vm3.c     ****     op0 = op0 + FIX_OP;
4457:src/vm3.c     ****   }
4458:src/vm3.c     **** 
4459:src/vm3.c     **** p = array;
4460:src/vm3.c     **** p = p[op0].next_level;
4461:src/vm3.c     **** 
4462:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4463:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4464:src/vm3.c     ****   if (op1 == 0x0) {
4465:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4466:src/vm3.c     ****     op1 = op1 + funct;
4467:src/vm3.c     ****   }
4468:src/vm3.c     ****     else {
4469:src/vm3.c     ****     op1 = op1 + FIX_OP;
4470:src/vm3.c     ****   }
4471:src/vm3.c     **** 
4472:src/vm3.c     **** goto *p[op1].code;
4473:src/vm3.c     **** 
4474:src/vm3.c     **** 
4475:src/vm3.c     **** sllPLUSsb:
4476:src/vm3.c     **** #if INDIRECT_DEBUG
4477:src/vm3.c     **** printf("%d|sll\n",counter);
4478:src/vm3.c     **** counter++;
4479:src/vm3.c     **** #endif
4480:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
4481:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4482:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4483:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
4484:src/vm3.c     **** PC  =  nPC;
4485:src/vm3.c     **** nPC  += 4;
4486:src/vm3.c     **** 
4487:src/vm3.c     **** #if INDIRECT_DEBUG
4488:src/vm3.c     **** printf("%d|sb\n",counter);
4489:src/vm3.c     **** counter++;
4490:src/vm3.c     **** #endif
4491:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4492:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4493:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4494:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
4495:src/vm3.c     **** PC  =  nPC;
4496:src/vm3.c     **** nPC  += 4;
4497:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4498:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4499:src/vm3.c     ****   if (op0 == 0x0) {
4500:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4501:src/vm3.c     ****     op0 = op0 + funct;
4502:src/vm3.c     ****   }
4503:src/vm3.c     ****     else {
4504:src/vm3.c     ****     op0 = op0 + FIX_OP;
4505:src/vm3.c     ****   }
4506:src/vm3.c     **** 
4507:src/vm3.c     **** p = array;
4508:src/vm3.c     **** p = p[op0].next_level;
4509:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 355


4510:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4511:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4512:src/vm3.c     ****   if (op1 == 0x0) {
4513:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4514:src/vm3.c     ****     op1 = op1 + funct;
4515:src/vm3.c     ****   }
4516:src/vm3.c     ****     else {
4517:src/vm3.c     ****     op1 = op1 + FIX_OP;
4518:src/vm3.c     ****   }
4519:src/vm3.c     **** 
4520:src/vm3.c     **** goto *p[op1].code;
4521:src/vm3.c     **** 
4522:src/vm3.c     **** 
4523:src/vm3.c     **** sllPLUSlbu:
4524:src/vm3.c     **** #if INDIRECT_DEBUG
4525:src/vm3.c     **** printf("%d|sll\n",counter);
4526:src/vm3.c     **** counter++;
4527:src/vm3.c     **** #endif
4528:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
4529:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4530:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4531:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
4532:src/vm3.c     **** PC  =  nPC;
4533:src/vm3.c     **** nPC  += 4;
4534:src/vm3.c     **** 
4535:src/vm3.c     **** #if INDIRECT_DEBUG
4536:src/vm3.c     **** printf("%d|lbu\n",counter);
4537:src/vm3.c     **** counter++;
4538:src/vm3.c     **** #endif
4539:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4540:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4541:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4542:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
4543:src/vm3.c     **** PC  =  nPC;
4544:src/vm3.c     **** nPC  += 4;
4545:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4546:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4547:src/vm3.c     ****   if (op0 == 0x0) {
4548:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4549:src/vm3.c     ****     op0 = op0 + funct;
4550:src/vm3.c     ****   }
4551:src/vm3.c     ****     else {
4552:src/vm3.c     ****     op0 = op0 + FIX_OP;
4553:src/vm3.c     ****   }
4554:src/vm3.c     **** 
4555:src/vm3.c     **** p = array;
4556:src/vm3.c     **** p = p[op0].next_level;
4557:src/vm3.c     **** 
4558:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4559:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4560:src/vm3.c     ****   if (op1 == 0x0) {
4561:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4562:src/vm3.c     ****     op1 = op1 + funct;
4563:src/vm3.c     ****   }
4564:src/vm3.c     ****     else {
4565:src/vm3.c     ****     op1 = op1 + FIX_OP;
4566:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 356


4567:src/vm3.c     **** 
4568:src/vm3.c     **** goto *p[op1].code;
4569:src/vm3.c     **** 
4570:src/vm3.c     **** 
4571:src/vm3.c     **** addiuPLUSsll:
4572:src/vm3.c     **** #if INDIRECT_DEBUG
4573:src/vm3.c     **** printf("%d|addiu\n",counter);
4574:src/vm3.c     **** counter++;
4575:src/vm3.c     **** #endif
4576:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4577:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4578:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
4579:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
4580:src/vm3.c     **** PC  =  nPC;
4581:src/vm3.c     **** nPC  += 4;
4582:src/vm3.c     **** 
4583:src/vm3.c     **** #if INDIRECT_DEBUG
4584:src/vm3.c     **** printf("%d|sll\n",counter);
4585:src/vm3.c     **** counter++;
4586:src/vm3.c     **** #endif
4587:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
4588:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4589:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
4590:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
4591:src/vm3.c     **** PC  =  nPC;
4592:src/vm3.c     **** nPC  += 4;
4593:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4594:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4595:src/vm3.c     ****   if (op0 == 0x0) {
4596:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4597:src/vm3.c     ****     op0 = op0 + funct;
4598:src/vm3.c     ****   }
4599:src/vm3.c     ****     else {
4600:src/vm3.c     ****     op0 = op0 + FIX_OP;
4601:src/vm3.c     ****   }
4602:src/vm3.c     **** 
4603:src/vm3.c     **** p = array;
4604:src/vm3.c     **** p = p[op0].next_level;
4605:src/vm3.c     **** 
4606:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4607:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4608:src/vm3.c     ****   if (op1 == 0x0) {
4609:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4610:src/vm3.c     ****     op1 = op1 + funct;
4611:src/vm3.c     ****   }
4612:src/vm3.c     ****     else {
4613:src/vm3.c     ****     op1 = op1 + FIX_OP;
4614:src/vm3.c     ****   }
4615:src/vm3.c     **** 
4616:src/vm3.c     **** goto *p[op1].code;
4617:src/vm3.c     **** 
4618:src/vm3.c     **** 
4619:src/vm3.c     **** mfhiPLUSmult:
4620:src/vm3.c     **** #if INDIRECT_DEBUG
4621:src/vm3.c     **** printf("%d|mfhi\n",counter);
4622:src/vm3.c     **** counter++;
4623:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 357


4624:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4625:src/vm3.c     **** RF[rd] = HI;
4626:src/vm3.c     **** PC  =  nPC;
4627:src/vm3.c     **** nPC  += 4;
4628:src/vm3.c     **** 
4629:src/vm3.c     **** #if INDIRECT_DEBUG
4630:src/vm3.c     **** printf("%d|mult\n",counter);
4631:src/vm3.c     **** counter++;
4632:src/vm3.c     **** #endif
4633:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4634:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4635:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
4636:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
4637:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
4638:src/vm3.c     **** PC  =  nPC;
4639:src/vm3.c     **** nPC  += 4;
4640:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4641:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4642:src/vm3.c     ****   if (op0 == 0x0) {
4643:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4644:src/vm3.c     ****     op0 = op0 + funct;
4645:src/vm3.c     ****   }
4646:src/vm3.c     ****     else {
4647:src/vm3.c     ****     op0 = op0 + FIX_OP;
4648:src/vm3.c     ****   }
4649:src/vm3.c     **** 
4650:src/vm3.c     **** p = array;
4651:src/vm3.c     **** p = p[op0].next_level;
4652:src/vm3.c     **** 
4653:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4654:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4655:src/vm3.c     ****   if (op1 == 0x0) {
4656:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4657:src/vm3.c     ****     op1 = op1 + funct;
4658:src/vm3.c     ****   }
4659:src/vm3.c     ****     else {
4660:src/vm3.c     ****     op1 = op1 + FIX_OP;
4661:src/vm3.c     ****   }
4662:src/vm3.c     **** 
4663:src/vm3.c     **** goto *p[op1].code;
4664:src/vm3.c     **** 
4665:src/vm3.c     **** 
4666:src/vm3.c     **** sllPLUSbne:
4667:src/vm3.c     **** #if INDIRECT_DEBUG
4668:src/vm3.c     **** printf("%d|sll\n",counter);
4669:src/vm3.c     **** counter++;
4670:src/vm3.c     **** #endif
4671:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
4672:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4673:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4674:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
4675:src/vm3.c     **** PC  =  nPC;
4676:src/vm3.c     **** nPC  += 4;
4677:src/vm3.c     **** 
4678:src/vm3.c     **** #if INDIRECT_DEBUG
4679:src/vm3.c     **** printf("%d|bne\n",counter);
4680:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 358


4681:src/vm3.c     **** #endif
4682:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4683:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4684:src/vm3.c     **** if (RF[rs] != RF[rt])
4685:src/vm3.c     **** {
4686:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
4687:src/vm3.c     ****   PC  =  nPC;
4688:src/vm3.c     ****   nPC  += (immediate << 2);
4689:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
4690:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4691:src/vm3.c     ****   if (op0 == 0x0) {
4692:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4693:src/vm3.c     ****     op0 = op0 + funct;
4694:src/vm3.c     ****   }
4695:src/vm3.c     ****     else {
4696:src/vm3.c     ****     op0 = op0 + FIX_OP;
4697:src/vm3.c     ****   }
4698:src/vm3.c     **** 
4699:src/vm3.c     **** p = array;
4700:src/vm3.c     **** p = p[op0].next_level;
4701:src/vm3.c     **** 
4702:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4703:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4704:src/vm3.c     ****   if (op1 == 0x0) {
4705:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4706:src/vm3.c     ****     op1 = op1 + funct;
4707:src/vm3.c     ****   }
4708:src/vm3.c     ****     else {
4709:src/vm3.c     ****     op1 = op1 + FIX_OP;
4710:src/vm3.c     ****   }
4711:src/vm3.c     **** 
4712:src/vm3.c     **** goto *p[op1].code;
4713:src/vm3.c     **** 
4714:src/vm3.c     **** 
4715:src/vm3.c     **** }
4716:src/vm3.c     **** else
4717:src/vm3.c     **** {
4718:src/vm3.c     ****   PC  =  nPC;
4719:src/vm3.c     ****   nPC  += 4;
4720:src/vm3.c     **** }
4721:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4723:src/vm3.c     ****   if (op0 == 0x0) {
4724:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4725:src/vm3.c     ****     op0 = op0 + funct;
4726:src/vm3.c     ****   }
4727:src/vm3.c     ****     else {
4728:src/vm3.c     ****     op0 = op0 + FIX_OP;
4729:src/vm3.c     ****   }
4730:src/vm3.c     **** 
4731:src/vm3.c     **** p = array;
4732:src/vm3.c     **** p = p[op0].next_level;
4733:src/vm3.c     **** 
4734:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4735:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4736:src/vm3.c     ****   if (op1 == 0x0) {
4737:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 359


4738:src/vm3.c     ****     op1 = op1 + funct;
4739:src/vm3.c     ****   }
4740:src/vm3.c     ****     else {
4741:src/vm3.c     ****     op1 = op1 + FIX_OP;
4742:src/vm3.c     ****   }
4743:src/vm3.c     **** 
4744:src/vm3.c     **** goto *p[op1].code;
4745:src/vm3.c     **** 
4746:src/vm3.c     **** 
4747:src/vm3.c     **** syscPLUSjr:
4748:src/vm3.c     **** #if INDIRECT_DEBUG
4749:src/vm3.c     **** printf("%d|sysc\n",counter);
4750:src/vm3.c     **** counter++;
4751:src/vm3.c     **** #endif
4752:src/vm3.c     **** if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respectively
4753:src/vm3.c     **** {
4754:src/vm3.c     **** halted = 1; //Syscall returned 1, exit code
4755:src/vm3.c     **** goto end;
4756:src/vm3.c     **** }
4757:src/vm3.c     **** PC  =  nPC;
4758:src/vm3.c     **** nPC  += 4;
4759:src/vm3.c     **** 
4760:src/vm3.c     **** #if INDIRECT_DEBUG
4761:src/vm3.c     **** printf("%d|jr\n",counter);
4762:src/vm3.c     **** counter++;
4763:src/vm3.c     **** #endif
4764:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4765:src/vm3.c     **** PC = nPC;
4766:src/vm3.c     **** nPC = RF[rs];
4767:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4768:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4769:src/vm3.c     ****   if (op0 == 0x0) {
4770:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4771:src/vm3.c     ****     op0 = op0 + funct;
4772:src/vm3.c     ****   }
4773:src/vm3.c     ****     else {
4774:src/vm3.c     ****     op0 = op0 + FIX_OP;
4775:src/vm3.c     ****   }
4776:src/vm3.c     **** 
4777:src/vm3.c     **** p = array;
4778:src/vm3.c     **** p = p[op0].next_level;
4779:src/vm3.c     **** 
4780:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4781:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4782:src/vm3.c     ****   if (op1 == 0x0) {
4783:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4784:src/vm3.c     ****     op1 = op1 + funct;
4785:src/vm3.c     ****   }
4786:src/vm3.c     ****     else {
4787:src/vm3.c     ****     op1 = op1 + FIX_OP;
4788:src/vm3.c     ****   }
4789:src/vm3.c     **** 
4790:src/vm3.c     **** goto *p[op1].code;
4791:src/vm3.c     **** 
4792:src/vm3.c     **** 
4793:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4794:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 360


4795:src/vm3.c     ****   if (op0 == 0x0) {
4796:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4797:src/vm3.c     ****     op0 = op0 + funct;
4798:src/vm3.c     ****   }
4799:src/vm3.c     ****     else {
4800:src/vm3.c     ****     op0 = op0 + FIX_OP;
4801:src/vm3.c     ****   }
4802:src/vm3.c     **** 
4803:src/vm3.c     **** p = array;
4804:src/vm3.c     **** p = p[op0].next_level;
4805:src/vm3.c     **** 
4806:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4807:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4808:src/vm3.c     ****   if (op1 == 0x0) {
4809:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4810:src/vm3.c     ****     op1 = op1 + funct;
4811:src/vm3.c     ****   }
4812:src/vm3.c     ****     else {
4813:src/vm3.c     ****     op1 = op1 + FIX_OP;
4814:src/vm3.c     ****   }
4815:src/vm3.c     **** 
4816:src/vm3.c     **** goto *p[op1].code;
4817:src/vm3.c     **** 
4818:src/vm3.c     **** 
4819:src/vm3.c     **** errorPLUSaddiu:
4820:src/vm3.c     **** #if INDIRECT_DEBUG
4821:src/vm3.c     **** printf("Error, unknown instr0uction %d.\n", instr0);
4822:src/vm3.c     **** #endif
4823:src/vm3.c     **** PC  =  nPC;
4824:src/vm3.c     **** nPC  += 4;
4825:src/vm3.c     **** 
4826:src/vm3.c     **** #if INDIRECT_DEBUG
4827:src/vm3.c     **** printf("%d|addiu\n",counter);
4828:src/vm3.c     **** counter++;
4829:src/vm3.c     **** #endif
4830:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4831:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4832:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4833:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
4834:src/vm3.c     **** PC  =  nPC;
4835:src/vm3.c     **** nPC  += 4;
4836:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4837:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4838:src/vm3.c     ****   if (op0 == 0x0) {
4839:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4840:src/vm3.c     ****     op0 = op0 + funct;
4841:src/vm3.c     ****   }
4842:src/vm3.c     ****     else {
4843:src/vm3.c     ****     op0 = op0 + FIX_OP;
4844:src/vm3.c     ****   }
4845:src/vm3.c     **** 
4846:src/vm3.c     **** p = array;
4847:src/vm3.c     **** p = p[op0].next_level;
4848:src/vm3.c     **** 
4849:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4850:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4851:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 361


4852:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4853:src/vm3.c     ****     op1 = op1 + funct;
4854:src/vm3.c     ****   }
4855:src/vm3.c     ****     else {
4856:src/vm3.c     ****     op1 = op1 + FIX_OP;
4857:src/vm3.c     ****   }
4858:src/vm3.c     **** 
4859:src/vm3.c     **** goto *p[op1].code;
4860:src/vm3.c     **** 
4861:src/vm3.c     **** 
4862:src/vm3.c     **** luiPLUSlw:
4863:src/vm3.c     **** #if INDIRECT_DEBUG
4864:src/vm3.c     **** printf("%d|lui\n",counter);
4865:src/vm3.c     **** counter++;
4866:src/vm3.c     **** #endif
4867:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
4868:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4869:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
4870:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
4871:src/vm3.c     **** PC  =  nPC;
4872:src/vm3.c     **** nPC  += 4;
4873:src/vm3.c     **** 
4874:src/vm3.c     **** #if INDIRECT_DEBUG
4875:src/vm3.c     **** printf("%d|lw\n",counter);
4876:src/vm3.c     **** counter++;
4877:src/vm3.c     **** #endif
4878:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
4879:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4880:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
4881:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
4882:src/vm3.c     **** PC  =  nPC;
4883:src/vm3.c     **** nPC  += 4;
4884:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4885:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4886:src/vm3.c     ****   if (op0 == 0x0) {
4887:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4888:src/vm3.c     ****     op0 = op0 + funct;
4889:src/vm3.c     ****   }
4890:src/vm3.c     ****     else {
4891:src/vm3.c     ****     op0 = op0 + FIX_OP;
4892:src/vm3.c     ****   }
4893:src/vm3.c     **** 
4894:src/vm3.c     **** p = array;
4895:src/vm3.c     **** p = p[op0].next_level;
4896:src/vm3.c     **** 
4897:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4898:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4899:src/vm3.c     ****   if (op1 == 0x0) {
4900:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4901:src/vm3.c     ****     op1 = op1 + funct;
4902:src/vm3.c     ****   }
4903:src/vm3.c     ****     else {
4904:src/vm3.c     ****     op1 = op1 + FIX_OP;
4905:src/vm3.c     ****   }
4906:src/vm3.c     **** 
4907:src/vm3.c     **** goto *p[op1].code;
4908:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 362


4909:src/vm3.c     **** 
4910:src/vm3.c     **** addiuPLUSsysc:
4911:src/vm3.c     **** #if INDIRECT_DEBUG
4912:src/vm3.c     **** printf("%d|addiu\n",counter);
4913:src/vm3.c     **** counter++;
4914:src/vm3.c     **** #endif
4915:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4916:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
4917:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
4918:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
4919:src/vm3.c     **** PC  =  nPC;
4920:src/vm3.c     **** nPC  += 4;
4921:src/vm3.c     **** 
4922:src/vm3.c     **** #if INDIRECT_DEBUG
4923:src/vm3.c     **** printf("%d|sysc\n",counter);
4924:src/vm3.c     **** counter++;
4925:src/vm3.c     **** #endif
4926:src/vm3.c     **** if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respectively
4927:src/vm3.c     **** {
4928:src/vm3.c     **** halted = 1; //Syscall returned 1, exit code
4929:src/vm3.c     **** goto end;
4930:src/vm3.c     **** }
4931:src/vm3.c     **** PC  =  nPC;
4932:src/vm3.c     **** nPC  += 4;
4933:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4934:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4935:src/vm3.c     ****   if (op0 == 0x0) {
4936:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4937:src/vm3.c     ****     op0 = op0 + funct;
4938:src/vm3.c     ****   }
4939:src/vm3.c     ****     else {
4940:src/vm3.c     ****     op0 = op0 + FIX_OP;
4941:src/vm3.c     ****   }
4942:src/vm3.c     **** 
4943:src/vm3.c     **** p = array;
4944:src/vm3.c     **** p = p[op0].next_level;
4945:src/vm3.c     **** 
4946:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4947:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4948:src/vm3.c     ****   if (op1 == 0x0) {
4949:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4950:src/vm3.c     ****     op1 = op1 + funct;
4951:src/vm3.c     ****   }
4952:src/vm3.c     ****     else {
4953:src/vm3.c     ****     op1 = op1 + FIX_OP;
4954:src/vm3.c     ****   }
4955:src/vm3.c     **** 
4956:src/vm3.c     **** goto *p[op1].code;
4957:src/vm3.c     **** 
4958:src/vm3.c     **** 
4959:src/vm3.c     **** norPLUSsrl:
4960:src/vm3.c     **** #if INDIRECT_DEBUG
4961:src/vm3.c     **** printf("%d|nor\n",counter);
4962:src/vm3.c     **** counter++;
4963:src/vm3.c     **** #endif
4964:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
4965:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 363


4966:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
4967:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
4968:src/vm3.c     **** PC  =  nPC;
4969:src/vm3.c     **** nPC  += 4;
4970:src/vm3.c     **** 
4971:src/vm3.c     **** #if INDIRECT_DEBUG
4972:src/vm3.c     **** printf("%d|srl\n",counter);
4973:src/vm3.c     **** counter++;
4974:src/vm3.c     **** #endif
4975:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
4976:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
4977:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
4978:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
4979:src/vm3.c     **** PC  =  nPC;
4980:src/vm3.c     **** nPC  += 4;
4981:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
4982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
4983:src/vm3.c     ****   if (op0 == 0x0) {
4984:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
4985:src/vm3.c     ****     op0 = op0 + funct;
4986:src/vm3.c     ****   }
4987:src/vm3.c     ****     else {
4988:src/vm3.c     ****     op0 = op0 + FIX_OP;
4989:src/vm3.c     ****   }
4990:src/vm3.c     **** 
4991:src/vm3.c     **** p = array;
4992:src/vm3.c     **** p = p[op0].next_level;
4993:src/vm3.c     **** 
4994:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
4995:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
4996:src/vm3.c     ****   if (op1 == 0x0) {
4997:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
4998:src/vm3.c     ****     op1 = op1 + funct;
4999:src/vm3.c     ****   }
5000:src/vm3.c     ****     else {
5001:src/vm3.c     ****     op1 = op1 + FIX_OP;
5002:src/vm3.c     ****   }
5003:src/vm3.c     **** 
5004:src/vm3.c     **** goto *p[op1].code;
5005:src/vm3.c     **** 
5006:src/vm3.c     **** 
5007:src/vm3.c     **** addiuPLUSjump:
5008:src/vm3.c     **** #if INDIRECT_DEBUG
5009:src/vm3.c     **** printf("%d|addiu\n",counter);
5010:src/vm3.c     **** counter++;
5011:src/vm3.c     **** #endif
5012:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5013:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5014:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
5015:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
5016:src/vm3.c     **** PC  =  nPC;
5017:src/vm3.c     **** nPC  += 4;
5018:src/vm3.c     **** 
5019:src/vm3.c     **** #if INDIRECT_DEBUG
5020:src/vm3.c     **** printf("%d|jump\n",counter);
5021:src/vm3.c     **** counter++;
5022:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 364


5023:src/vm3.c     **** PC = nPC;
5024:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
5025:src/vm3.c     **** nPC = address << 2;
5026:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5027:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5028:src/vm3.c     ****   if (op0 == 0x0) {
5029:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5030:src/vm3.c     ****     op0 = op0 + funct;
5031:src/vm3.c     ****   }
5032:src/vm3.c     ****     else {
5033:src/vm3.c     ****     op0 = op0 + FIX_OP;
5034:src/vm3.c     ****   }
5035:src/vm3.c     **** 
5036:src/vm3.c     **** p = array;
5037:src/vm3.c     **** p = p[op0].next_level;
5038:src/vm3.c     **** 
5039:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5040:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5041:src/vm3.c     ****   if (op1 == 0x0) {
5042:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5043:src/vm3.c     ****     op1 = op1 + funct;
5044:src/vm3.c     ****   }
5045:src/vm3.c     ****     else {
5046:src/vm3.c     ****     op1 = op1 + FIX_OP;
5047:src/vm3.c     ****   }
5048:src/vm3.c     **** 
5049:src/vm3.c     **** goto *p[op1].code;
5050:src/vm3.c     **** 
5051:src/vm3.c     **** 
5052:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5053:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5054:src/vm3.c     ****   if (op0 == 0x0) {
5055:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5056:src/vm3.c     ****     op0 = op0 + funct;
5057:src/vm3.c     ****   }
5058:src/vm3.c     ****     else {
5059:src/vm3.c     ****     op0 = op0 + FIX_OP;
5060:src/vm3.c     ****   }
5061:src/vm3.c     **** 
5062:src/vm3.c     **** p = array;
5063:src/vm3.c     **** p = p[op0].next_level;
5064:src/vm3.c     **** 
5065:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5066:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5067:src/vm3.c     ****   if (op1 == 0x0) {
5068:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5069:src/vm3.c     ****     op1 = op1 + funct;
5070:src/vm3.c     ****   }
5071:src/vm3.c     ****     else {
5072:src/vm3.c     ****     op1 = op1 + FIX_OP;
5073:src/vm3.c     ****   }
5074:src/vm3.c     **** 
5075:src/vm3.c     **** goto *p[op1].code;
5076:src/vm3.c     **** 
5077:src/vm3.c     **** 
5078:src/vm3.c     **** xorPLUSandi:
5079:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 365


5080:src/vm3.c     **** printf("%d|xor\n",counter);
5081:src/vm3.c     **** counter++;
5082:src/vm3.c     **** #endif
5083:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5084:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5085:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5086:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
5087:src/vm3.c     **** PC  =  nPC;
5088:src/vm3.c     **** nPC  += 4;
5089:src/vm3.c     **** 
5090:src/vm3.c     **** #if INDIRECT_DEBUG
5091:src/vm3.c     **** printf("%d|andi\n",counter);
5092:src/vm3.c     **** counter++;
5093:src/vm3.c     **** #endif
5094:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5095:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5096:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
5097:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
5098:src/vm3.c     **** PC  =  nPC;
5099:src/vm3.c     **** nPC  += 4;
5100:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5101:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5102:src/vm3.c     ****   if (op0 == 0x0) {
5103:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5104:src/vm3.c     ****     op0 = op0 + funct;
5105:src/vm3.c     ****   }
5106:src/vm3.c     ****     else {
5107:src/vm3.c     ****     op0 = op0 + FIX_OP;
5108:src/vm3.c     ****   }
5109:src/vm3.c     **** 
5110:src/vm3.c     **** p = array;
5111:src/vm3.c     **** p = p[op0].next_level;
5112:src/vm3.c     **** 
5113:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5114:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5115:src/vm3.c     ****   if (op1 == 0x0) {
5116:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5117:src/vm3.c     ****     op1 = op1 + funct;
5118:src/vm3.c     ****   }
5119:src/vm3.c     ****     else {
5120:src/vm3.c     ****     op1 = op1 + FIX_OP;
5121:src/vm3.c     ****   }
5122:src/vm3.c     **** 
5123:src/vm3.c     **** goto *p[op1].code;
5124:src/vm3.c     **** 
5125:src/vm3.c     **** 
5126:src/vm3.c     **** adduPLUSbne:
5127:src/vm3.c     **** #if INDIRECT_DEBUG
5128:src/vm3.c     **** printf("%d|addu\n",counter);
5129:src/vm3.c     **** counter++;
5130:src/vm3.c     **** #endif
5131:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5132:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5133:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5134:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
5135:src/vm3.c     **** PC  =  nPC;
5136:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 366


5137:src/vm3.c     **** 
5138:src/vm3.c     **** #if INDIRECT_DEBUG
5139:src/vm3.c     **** printf("%d|bne\n",counter);
5140:src/vm3.c     **** counter++;
5141:src/vm3.c     **** #endif
5142:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5143:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5144:src/vm3.c     **** if (RF[rs] != RF[rt])
5145:src/vm3.c     **** {
5146:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
5147:src/vm3.c     ****   PC  =  nPC;
5148:src/vm3.c     ****   nPC  += (immediate << 2);
5149:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
5150:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5151:src/vm3.c     ****   if (op0 == 0x0) {
5152:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5153:src/vm3.c     ****     op0 = op0 + funct;
5154:src/vm3.c     ****   }
5155:src/vm3.c     ****     else {
5156:src/vm3.c     ****     op0 = op0 + FIX_OP;
5157:src/vm3.c     ****   }
5158:src/vm3.c     **** 
5159:src/vm3.c     **** p = array;
5160:src/vm3.c     **** p = p[op0].next_level;
5161:src/vm3.c     **** 
5162:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5163:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5164:src/vm3.c     ****   if (op1 == 0x0) {
5165:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5166:src/vm3.c     ****     op1 = op1 + funct;
5167:src/vm3.c     ****   }
5168:src/vm3.c     ****     else {
5169:src/vm3.c     ****     op1 = op1 + FIX_OP;
5170:src/vm3.c     ****   }
5171:src/vm3.c     **** 
5172:src/vm3.c     **** goto *p[op1].code;
5173:src/vm3.c     **** 
5174:src/vm3.c     **** 
5175:src/vm3.c     **** }
5176:src/vm3.c     **** else
5177:src/vm3.c     **** {
5178:src/vm3.c     ****   PC  =  nPC;
5179:src/vm3.c     ****   nPC  += 4;
5180:src/vm3.c     **** }
5181:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5182:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5183:src/vm3.c     ****   if (op0 == 0x0) {
5184:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5185:src/vm3.c     ****     op0 = op0 + funct;
5186:src/vm3.c     ****   }
5187:src/vm3.c     ****     else {
5188:src/vm3.c     ****     op0 = op0 + FIX_OP;
5189:src/vm3.c     ****   }
5190:src/vm3.c     **** 
5191:src/vm3.c     **** p = array;
5192:src/vm3.c     **** p = p[op0].next_level;
5193:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 367


5194:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5195:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5196:src/vm3.c     ****   if (op1 == 0x0) {
5197:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5198:src/vm3.c     ****     op1 = op1 + funct;
5199:src/vm3.c     ****   }
5200:src/vm3.c     ****     else {
5201:src/vm3.c     ****     op1 = op1 + FIX_OP;
5202:src/vm3.c     ****   }
5203:src/vm3.c     **** 
5204:src/vm3.c     **** goto *p[op1].code;
5205:src/vm3.c     **** 
5206:src/vm3.c     **** 
5207:src/vm3.c     **** errorPLUSlw:
5208:src/vm3.c     **** #if INDIRECT_DEBUG
5209:src/vm3.c     **** printf("Error, unknown instr0uction %d.\n", instr0);
5210:src/vm3.c     **** #endif
5211:src/vm3.c     **** PC  =  nPC;
5212:src/vm3.c     **** nPC  += 4;
5213:src/vm3.c     **** 
5214:src/vm3.c     **** #if INDIRECT_DEBUG
5215:src/vm3.c     **** printf("%d|lw\n",counter);
5216:src/vm3.c     **** counter++;
5217:src/vm3.c     **** #endif
5218:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5219:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5220:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
5221:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
5222:src/vm3.c     **** PC  =  nPC;
5223:src/vm3.c     **** nPC  += 4;
5224:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5226:src/vm3.c     ****   if (op0 == 0x0) {
5227:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5228:src/vm3.c     ****     op0 = op0 + funct;
5229:src/vm3.c     ****   }
5230:src/vm3.c     ****     else {
5231:src/vm3.c     ****     op0 = op0 + FIX_OP;
5232:src/vm3.c     ****   }
5233:src/vm3.c     **** 
5234:src/vm3.c     **** p = array;
5235:src/vm3.c     **** p = p[op0].next_level;
5236:src/vm3.c     **** 
5237:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5239:src/vm3.c     ****   if (op1 == 0x0) {
5240:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5241:src/vm3.c     ****     op1 = op1 + funct;
5242:src/vm3.c     ****   }
5243:src/vm3.c     ****     else {
5244:src/vm3.c     ****     op1 = op1 + FIX_OP;
5245:src/vm3.c     ****   }
5246:src/vm3.c     **** 
5247:src/vm3.c     **** goto *p[op1].code;
5248:src/vm3.c     **** 
5249:src/vm3.c     **** 
5250:src/vm3.c     **** sltiPLUSmovn:
GAS LISTING /tmp/cc15eBE3.s 			page 368


5251:src/vm3.c     **** #if INDIRECT_DEBUG
5252:src/vm3.c     **** printf("%d|slti\n",counter);
5253:src/vm3.c     **** counter++;
5254:src/vm3.c     **** #endif
5255:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5256:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5257:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
5258:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
5259:src/vm3.c     **** PC  =  nPC;
5260:src/vm3.c     **** nPC  += 4;
5261:src/vm3.c     **** 
5262:src/vm3.c     **** #if INDIRECT_DEBUG
5263:src/vm3.c     **** printf("%d|movn\n",counter);
5264:src/vm3.c     **** counter++;
5265:src/vm3.c     **** #endif
5266:src/vm3.c     **** 
5267:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5268:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5269:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5270:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
5271:src/vm3.c     **** PC  =  nPC;
5272:src/vm3.c     **** nPC  += 4;
5273:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5274:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5275:src/vm3.c     ****   if (op0 == 0x0) {
5276:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5277:src/vm3.c     ****     op0 = op0 + funct;
5278:src/vm3.c     ****   }
5279:src/vm3.c     ****     else {
5280:src/vm3.c     ****     op0 = op0 + FIX_OP;
5281:src/vm3.c     ****   }
5282:src/vm3.c     **** 
5283:src/vm3.c     **** p = array;
5284:src/vm3.c     **** p = p[op0].next_level;
5285:src/vm3.c     **** 
5286:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5287:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5288:src/vm3.c     ****   if (op1 == 0x0) {
5289:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5290:src/vm3.c     ****     op1 = op1 + funct;
5291:src/vm3.c     ****   }
5292:src/vm3.c     ****     else {
5293:src/vm3.c     ****     op1 = op1 + FIX_OP;
5294:src/vm3.c     ****   }
5295:src/vm3.c     **** 
5296:src/vm3.c     **** goto *p[op1].code;
5297:src/vm3.c     **** 
5298:src/vm3.c     **** 
5299:src/vm3.c     **** lbuPLUSsubu:
5300:src/vm3.c     **** #if INDIRECT_DEBUG
5301:src/vm3.c     **** printf("%d|lbu\n",counter);
5302:src/vm3.c     **** counter++;
5303:src/vm3.c     **** #endif
5304:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5305:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5306:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
5307:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
GAS LISTING /tmp/cc15eBE3.s 			page 369


5308:src/vm3.c     **** PC  =  nPC;
5309:src/vm3.c     **** nPC  += 4;
5310:src/vm3.c     **** 
5311:src/vm3.c     **** #if INDIRECT_DEBUG
5312:src/vm3.c     **** printf("%d|subu\n",counter);
5313:src/vm3.c     **** counter++;
5314:src/vm3.c     **** #endif
5315:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5316:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5317:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5318:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
5319:src/vm3.c     **** PC  =  nPC;
5320:src/vm3.c     **** nPC  += 4;
5321:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5322:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5323:src/vm3.c     ****   if (op0 == 0x0) {
5324:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5325:src/vm3.c     ****     op0 = op0 + funct;
5326:src/vm3.c     ****   }
5327:src/vm3.c     ****     else {
5328:src/vm3.c     ****     op0 = op0 + FIX_OP;
5329:src/vm3.c     ****   }
5330:src/vm3.c     **** 
5331:src/vm3.c     **** p = array;
5332:src/vm3.c     **** p = p[op0].next_level;
5333:src/vm3.c     **** 
5334:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5335:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5336:src/vm3.c     ****   if (op1 == 0x0) {
5337:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5338:src/vm3.c     ****     op1 = op1 + funct;
5339:src/vm3.c     ****   }
5340:src/vm3.c     ****     else {
5341:src/vm3.c     ****     op1 = op1 + FIX_OP;
5342:src/vm3.c     ****   }
5343:src/vm3.c     **** 
5344:src/vm3.c     **** goto *p[op1].code;
5345:src/vm3.c     **** 
5346:src/vm3.c     **** 
5347:src/vm3.c     **** andPLUSsll:
5348:src/vm3.c     **** #if INDIRECT_DEBUG
5349:src/vm3.c     **** printf("%d|and\n",counter);
5350:src/vm3.c     **** counter++;
5351:src/vm3.c     **** #endif
5352:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5353:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5354:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5355:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
5356:src/vm3.c     **** PC  =  nPC;
5357:src/vm3.c     **** nPC  += 4;
5358:src/vm3.c     **** 
5359:src/vm3.c     **** #if INDIRECT_DEBUG
5360:src/vm3.c     **** printf("%d|sll\n",counter);
5361:src/vm3.c     **** counter++;
5362:src/vm3.c     **** #endif
5363:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
5364:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 370


5365:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5366:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
5367:src/vm3.c     **** PC  =  nPC;
5368:src/vm3.c     **** nPC  += 4;
5369:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5370:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5371:src/vm3.c     ****   if (op0 == 0x0) {
5372:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5373:src/vm3.c     ****     op0 = op0 + funct;
5374:src/vm3.c     ****   }
5375:src/vm3.c     ****     else {
5376:src/vm3.c     ****     op0 = op0 + FIX_OP;
5377:src/vm3.c     ****   }
5378:src/vm3.c     **** 
5379:src/vm3.c     **** p = array;
5380:src/vm3.c     **** p = p[op0].next_level;
5381:src/vm3.c     **** 
5382:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5383:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5384:src/vm3.c     ****   if (op1 == 0x0) {
5385:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5386:src/vm3.c     ****     op1 = op1 + funct;
5387:src/vm3.c     ****   }
5388:src/vm3.c     ****     else {
5389:src/vm3.c     ****     op1 = op1 + FIX_OP;
5390:src/vm3.c     ****   }
5391:src/vm3.c     **** 
5392:src/vm3.c     **** goto *p[op1].code;
5393:src/vm3.c     **** 
5394:src/vm3.c     **** 
5395:src/vm3.c     **** swPLUSsb:
5396:src/vm3.c     **** #if INDIRECT_DEBUG
5397:src/vm3.c     **** printf("%d|sw\n",counter);
5398:src/vm3.c     **** counter++;
5399:src/vm3.c     **** #endif
5400:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5401:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5402:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
5403:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
5404:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
5405:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
5406:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
5407:src/vm3.c     **** PC  =  nPC;
5408:src/vm3.c     **** nPC  += 4;
5409:src/vm3.c     **** 
5410:src/vm3.c     **** #if INDIRECT_DEBUG
5411:src/vm3.c     **** printf("%d|sb\n",counter);
5412:src/vm3.c     **** counter++;
5413:src/vm3.c     **** #endif
5414:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5415:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5416:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
5417:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
5418:src/vm3.c     **** PC  =  nPC;
5419:src/vm3.c     **** nPC  += 4;
5420:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5421:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 371


5422:src/vm3.c     ****   if (op0 == 0x0) {
5423:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5424:src/vm3.c     ****     op0 = op0 + funct;
5425:src/vm3.c     ****   }
5426:src/vm3.c     ****     else {
5427:src/vm3.c     ****     op0 = op0 + FIX_OP;
5428:src/vm3.c     ****   }
5429:src/vm3.c     **** 
5430:src/vm3.c     **** p = array;
5431:src/vm3.c     **** p = p[op0].next_level;
5432:src/vm3.c     **** 
5433:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5434:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5435:src/vm3.c     ****   if (op1 == 0x0) {
5436:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5437:src/vm3.c     ****     op1 = op1 + funct;
5438:src/vm3.c     ****   }
5439:src/vm3.c     ****     else {
5440:src/vm3.c     ****     op1 = op1 + FIX_OP;
5441:src/vm3.c     ****   }
5442:src/vm3.c     **** 
5443:src/vm3.c     **** goto *p[op1].code;
5444:src/vm3.c     **** 
5445:src/vm3.c     **** 
5446:src/vm3.c     **** swPLUSslti:
5447:src/vm3.c     **** #if INDIRECT_DEBUG
5448:src/vm3.c     **** printf("%d|sw\n",counter);
5449:src/vm3.c     **** counter++;
5450:src/vm3.c     **** #endif
5451:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5452:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5453:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
5454:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
5455:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
5456:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
5457:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
5458:src/vm3.c     **** PC  =  nPC;
5459:src/vm3.c     **** nPC  += 4;
5460:src/vm3.c     **** 
5461:src/vm3.c     **** #if INDIRECT_DEBUG
5462:src/vm3.c     **** printf("%d|slti\n",counter);
5463:src/vm3.c     **** counter++;
5464:src/vm3.c     **** #endif
5465:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5466:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5467:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
5468:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
5469:src/vm3.c     **** PC  =  nPC;
5470:src/vm3.c     **** nPC  += 4;
5471:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5472:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5473:src/vm3.c     ****   if (op0 == 0x0) {
5474:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5475:src/vm3.c     ****     op0 = op0 + funct;
5476:src/vm3.c     ****   }
5477:src/vm3.c     ****     else {
5478:src/vm3.c     ****     op0 = op0 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 372


5479:src/vm3.c     ****   }
5480:src/vm3.c     **** 
5481:src/vm3.c     **** p = array;
5482:src/vm3.c     **** p = p[op0].next_level;
5483:src/vm3.c     **** 
5484:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5485:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5486:src/vm3.c     ****   if (op1 == 0x0) {
5487:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5488:src/vm3.c     ****     op1 = op1 + funct;
5489:src/vm3.c     ****   }
5490:src/vm3.c     ****     else {
5491:src/vm3.c     ****     op1 = op1 + FIX_OP;
5492:src/vm3.c     ****   }
5493:src/vm3.c     **** 
5494:src/vm3.c     **** goto *p[op1].code;
5495:src/vm3.c     **** 
5496:src/vm3.c     **** 
5497:src/vm3.c     **** sllPLUSaddu:
5498:src/vm3.c     **** #if INDIRECT_DEBUG
5499:src/vm3.c     **** printf("%d|sll\n",counter);
5500:src/vm3.c     **** counter++;
5501:src/vm3.c     **** #endif
5502:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
5503:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5504:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5505:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
5506:src/vm3.c     **** PC  =  nPC;
5507:src/vm3.c     **** nPC  += 4;
5508:src/vm3.c     **** 
5509:src/vm3.c     **** #if INDIRECT_DEBUG
5510:src/vm3.c     **** printf("%d|addu\n",counter);
5511:src/vm3.c     **** counter++;
5512:src/vm3.c     **** #endif
5513:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5514:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5515:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5516:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
5517:src/vm3.c     **** PC  =  nPC;
5518:src/vm3.c     **** nPC  += 4;
5519:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5520:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5521:src/vm3.c     ****   if (op0 == 0x0) {
5522:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5523:src/vm3.c     ****     op0 = op0 + funct;
5524:src/vm3.c     ****   }
5525:src/vm3.c     ****     else {
5526:src/vm3.c     ****     op0 = op0 + FIX_OP;
5527:src/vm3.c     ****   }
5528:src/vm3.c     **** 
5529:src/vm3.c     **** p = array;
5530:src/vm3.c     **** p = p[op0].next_level;
5531:src/vm3.c     **** 
5532:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5533:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5534:src/vm3.c     ****   if (op1 == 0x0) {
5535:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 373


5536:src/vm3.c     ****     op1 = op1 + funct;
5537:src/vm3.c     ****   }
5538:src/vm3.c     ****     else {
5539:src/vm3.c     ****     op1 = op1 + FIX_OP;
5540:src/vm3.c     ****   }
5541:src/vm3.c     **** 
5542:src/vm3.c     **** goto *p[op1].code;
5543:src/vm3.c     **** 
5544:src/vm3.c     **** 
5545:src/vm3.c     **** adduPLUSmult:
5546:src/vm3.c     **** #if INDIRECT_DEBUG
5547:src/vm3.c     **** printf("%d|addu\n",counter);
5548:src/vm3.c     **** counter++;
5549:src/vm3.c     **** #endif
5550:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5551:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5552:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5553:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
5554:src/vm3.c     **** PC  =  nPC;
5555:src/vm3.c     **** nPC  += 4;
5556:src/vm3.c     **** 
5557:src/vm3.c     **** #if INDIRECT_DEBUG
5558:src/vm3.c     **** printf("%d|mult\n",counter);
5559:src/vm3.c     **** counter++;
5560:src/vm3.c     **** #endif
5561:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5562:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5563:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
5564:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
5565:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
5566:src/vm3.c     **** PC  =  nPC;
5567:src/vm3.c     **** nPC  += 4;
5568:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5569:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5570:src/vm3.c     ****   if (op0 == 0x0) {
5571:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5572:src/vm3.c     ****     op0 = op0 + funct;
5573:src/vm3.c     ****   }
5574:src/vm3.c     ****     else {
5575:src/vm3.c     ****     op0 = op0 + FIX_OP;
5576:src/vm3.c     ****   }
5577:src/vm3.c     **** 
5578:src/vm3.c     **** p = array;
5579:src/vm3.c     **** p = p[op0].next_level;
5580:src/vm3.c     **** 
5581:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5582:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5583:src/vm3.c     ****   if (op1 == 0x0) {
5584:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5585:src/vm3.c     ****     op1 = op1 + funct;
5586:src/vm3.c     ****   }
5587:src/vm3.c     ****     else {
5588:src/vm3.c     ****     op1 = op1 + FIX_OP;
5589:src/vm3.c     ****   }
5590:src/vm3.c     **** 
5591:src/vm3.c     **** goto *p[op1].code;
5592:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 374


5593:src/vm3.c     **** 
5594:src/vm3.c     **** sllPLUSlui:
5595:src/vm3.c     **** #if INDIRECT_DEBUG
5596:src/vm3.c     **** printf("%d|sll\n",counter);
5597:src/vm3.c     **** counter++;
5598:src/vm3.c     **** #endif
5599:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
5600:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5601:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5602:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
5603:src/vm3.c     **** PC  =  nPC;
5604:src/vm3.c     **** nPC  += 4;
5605:src/vm3.c     **** 
5606:src/vm3.c     **** #if INDIRECT_DEBUG
5607:src/vm3.c     **** printf("%d|lui\n",counter);
5608:src/vm3.c     **** counter++;
5609:src/vm3.c     **** #endif
5610:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
5611:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5612:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
5613:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
5614:src/vm3.c     **** PC  =  nPC;
5615:src/vm3.c     **** nPC  += 4;
5616:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5617:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5618:src/vm3.c     ****   if (op0 == 0x0) {
5619:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5620:src/vm3.c     ****     op0 = op0 + funct;
5621:src/vm3.c     ****   }
5622:src/vm3.c     ****     else {
5623:src/vm3.c     ****     op0 = op0 + FIX_OP;
5624:src/vm3.c     ****   }
5625:src/vm3.c     **** 
5626:src/vm3.c     **** p = array;
5627:src/vm3.c     **** p = p[op0].next_level;
5628:src/vm3.c     **** 
5629:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5630:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5631:src/vm3.c     ****   if (op1 == 0x0) {
5632:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5633:src/vm3.c     ****     op1 = op1 + funct;
5634:src/vm3.c     ****   }
5635:src/vm3.c     ****     else {
5636:src/vm3.c     ****     op1 = op1 + FIX_OP;
5637:src/vm3.c     ****   }
5638:src/vm3.c     **** 
5639:src/vm3.c     **** goto *p[op1].code;
5640:src/vm3.c     **** 
5641:src/vm3.c     **** 
5642:src/vm3.c     **** adduPLUSsrl:
5643:src/vm3.c     **** #if INDIRECT_DEBUG
5644:src/vm3.c     **** printf("%d|addu\n",counter);
5645:src/vm3.c     **** counter++;
5646:src/vm3.c     **** #endif
5647:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5648:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5649:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 375


5650:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
5651:src/vm3.c     **** PC  =  nPC;
5652:src/vm3.c     **** nPC  += 4;
5653:src/vm3.c     **** 
5654:src/vm3.c     **** #if INDIRECT_DEBUG
5655:src/vm3.c     **** printf("%d|srl\n",counter);
5656:src/vm3.c     **** counter++;
5657:src/vm3.c     **** #endif
5658:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
5659:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5660:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5661:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
5662:src/vm3.c     **** PC  =  nPC;
5663:src/vm3.c     **** nPC  += 4;
5664:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5665:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5666:src/vm3.c     ****   if (op0 == 0x0) {
5667:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5668:src/vm3.c     ****     op0 = op0 + funct;
5669:src/vm3.c     ****   }
5670:src/vm3.c     ****     else {
5671:src/vm3.c     ****     op0 = op0 + FIX_OP;
5672:src/vm3.c     ****   }
5673:src/vm3.c     **** 
5674:src/vm3.c     **** p = array;
5675:src/vm3.c     **** p = p[op0].next_level;
5676:src/vm3.c     **** 
5677:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5678:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5679:src/vm3.c     ****   if (op1 == 0x0) {
5680:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5681:src/vm3.c     ****     op1 = op1 + funct;
5682:src/vm3.c     ****   }
5683:src/vm3.c     ****     else {
5684:src/vm3.c     ****     op1 = op1 + FIX_OP;
5685:src/vm3.c     ****   }
5686:src/vm3.c     **** 
5687:src/vm3.c     **** goto *p[op1].code;
5688:src/vm3.c     **** 
5689:src/vm3.c     **** 
5690:src/vm3.c     **** sllPLUSjal:
5691:src/vm3.c     **** #if INDIRECT_DEBUG
5692:src/vm3.c     **** printf("%d|sll\n",counter);
5693:src/vm3.c     **** counter++;
5694:src/vm3.c     **** #endif
5695:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
5696:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5697:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5698:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
5699:src/vm3.c     **** PC  =  nPC;
5700:src/vm3.c     **** nPC  += 4;
5701:src/vm3.c     **** 
5702:src/vm3.c     **** #if INDIRECT_DEBUG
5703:src/vm3.c     **** printf("%d|jal\n",counter);
5704:src/vm3.c     **** counter++;
5705:src/vm3.c     **** #endif
5706:src/vm3.c     **** RF[31] = PC + 8;
GAS LISTING /tmp/cc15eBE3.s 			page 376


5707:src/vm3.c     **** PC = nPC;
5708:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
5709:src/vm3.c     **** nPC = address << 2;
5710:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5711:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5712:src/vm3.c     ****   if (op0 == 0x0) {
5713:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5714:src/vm3.c     ****     op0 = op0 + funct;
5715:src/vm3.c     ****   }
5716:src/vm3.c     ****     else {
5717:src/vm3.c     ****     op0 = op0 + FIX_OP;
5718:src/vm3.c     ****   }
5719:src/vm3.c     **** 
5720:src/vm3.c     **** p = array;
5721:src/vm3.c     **** p = p[op0].next_level;
5722:src/vm3.c     **** 
5723:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5724:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5725:src/vm3.c     ****   if (op1 == 0x0) {
5726:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5727:src/vm3.c     ****     op1 = op1 + funct;
5728:src/vm3.c     ****   }
5729:src/vm3.c     ****     else {
5730:src/vm3.c     ****     op1 = op1 + FIX_OP;
5731:src/vm3.c     ****   }
5732:src/vm3.c     **** 
5733:src/vm3.c     **** goto *p[op1].code;
5734:src/vm3.c     **** 
5735:src/vm3.c     **** 
5736:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5737:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5738:src/vm3.c     ****   if (op0 == 0x0) {
5739:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5740:src/vm3.c     ****     op0 = op0 + funct;
5741:src/vm3.c     ****   }
5742:src/vm3.c     ****     else {
5743:src/vm3.c     ****     op0 = op0 + FIX_OP;
5744:src/vm3.c     ****   }
5745:src/vm3.c     **** 
5746:src/vm3.c     **** p = array;
5747:src/vm3.c     **** p = p[op0].next_level;
5748:src/vm3.c     **** 
5749:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5750:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5751:src/vm3.c     ****   if (op1 == 0x0) {
5752:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5753:src/vm3.c     ****     op1 = op1 + funct;
5754:src/vm3.c     ****   }
5755:src/vm3.c     ****     else {
5756:src/vm3.c     ****     op1 = op1 + FIX_OP;
5757:src/vm3.c     ****   }
5758:src/vm3.c     **** 
5759:src/vm3.c     **** goto *p[op1].code;
5760:src/vm3.c     **** 
5761:src/vm3.c     **** 
5762:src/vm3.c     **** sbPLUSjal:
5763:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 377


5764:src/vm3.c     **** printf("%d|sb\n",counter);
5765:src/vm3.c     **** counter++;
5766:src/vm3.c     **** #endif
5767:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5768:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5769:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
5770:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
5771:src/vm3.c     **** PC  =  nPC;
5772:src/vm3.c     **** nPC  += 4;
5773:src/vm3.c     **** 
5774:src/vm3.c     **** #if INDIRECT_DEBUG
5775:src/vm3.c     **** printf("%d|jal\n",counter);
5776:src/vm3.c     **** counter++;
5777:src/vm3.c     **** #endif
5778:src/vm3.c     **** RF[31] = PC + 8;
5779:src/vm3.c     **** PC = nPC;
5780:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
5781:src/vm3.c     **** nPC = address << 2;
5782:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5783:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5784:src/vm3.c     ****   if (op0 == 0x0) {
5785:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5786:src/vm3.c     ****     op0 = op0 + funct;
5787:src/vm3.c     ****   }
5788:src/vm3.c     ****     else {
5789:src/vm3.c     ****     op0 = op0 + FIX_OP;
5790:src/vm3.c     ****   }
5791:src/vm3.c     **** 
5792:src/vm3.c     **** p = array;
5793:src/vm3.c     **** p = p[op0].next_level;
5794:src/vm3.c     **** 
5795:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5796:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5797:src/vm3.c     ****   if (op1 == 0x0) {
5798:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5799:src/vm3.c     ****     op1 = op1 + funct;
5800:src/vm3.c     ****   }
5801:src/vm3.c     ****     else {
5802:src/vm3.c     ****     op1 = op1 + FIX_OP;
5803:src/vm3.c     ****   }
5804:src/vm3.c     **** 
5805:src/vm3.c     **** goto *p[op1].code;
5806:src/vm3.c     **** 
5807:src/vm3.c     **** 
5808:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5809:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5810:src/vm3.c     ****   if (op0 == 0x0) {
5811:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5812:src/vm3.c     ****     op0 = op0 + funct;
5813:src/vm3.c     ****   }
5814:src/vm3.c     ****     else {
5815:src/vm3.c     ****     op0 = op0 + FIX_OP;
5816:src/vm3.c     ****   }
5817:src/vm3.c     **** 
5818:src/vm3.c     **** p = array;
5819:src/vm3.c     **** p = p[op0].next_level;
5820:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 378


5821:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5822:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5823:src/vm3.c     ****   if (op1 == 0x0) {
5824:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5825:src/vm3.c     ****     op1 = op1 + funct;
5826:src/vm3.c     ****   }
5827:src/vm3.c     ****     else {
5828:src/vm3.c     ****     op1 = op1 + FIX_OP;
5829:src/vm3.c     ****   }
5830:src/vm3.c     **** 
5831:src/vm3.c     **** goto *p[op1].code;
5832:src/vm3.c     **** 
5833:src/vm3.c     **** 
5834:src/vm3.c     **** andPLUSor:
5835:src/vm3.c     **** #if INDIRECT_DEBUG
5836:src/vm3.c     **** printf("%d|and\n",counter);
5837:src/vm3.c     **** counter++;
5838:src/vm3.c     **** #endif
5839:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5840:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5841:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
5842:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
5843:src/vm3.c     **** PC  =  nPC;
5844:src/vm3.c     **** nPC  += 4;
5845:src/vm3.c     **** 
5846:src/vm3.c     **** #if INDIRECT_DEBUG
5847:src/vm3.c     **** printf("%d|or\n",counter);
5848:src/vm3.c     **** counter++;
5849:src/vm3.c     **** #endif
5850:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
5851:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5852:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5853:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
5854:src/vm3.c     **** PC  =  nPC;
5855:src/vm3.c     **** nPC  += 4;
5856:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5857:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5858:src/vm3.c     ****   if (op0 == 0x0) {
5859:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5860:src/vm3.c     ****     op0 = op0 + funct;
5861:src/vm3.c     ****   }
5862:src/vm3.c     ****     else {
5863:src/vm3.c     ****     op0 = op0 + FIX_OP;
5864:src/vm3.c     ****   }
5865:src/vm3.c     **** 
5866:src/vm3.c     **** p = array;
5867:src/vm3.c     **** p = p[op0].next_level;
5868:src/vm3.c     **** 
5869:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5870:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5871:src/vm3.c     ****   if (op1 == 0x0) {
5872:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5873:src/vm3.c     ****     op1 = op1 + funct;
5874:src/vm3.c     ****   }
5875:src/vm3.c     ****     else {
5876:src/vm3.c     ****     op1 = op1 + FIX_OP;
5877:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 379


5878:src/vm3.c     **** 
5879:src/vm3.c     **** goto *p[op1].code;
5880:src/vm3.c     **** 
5881:src/vm3.c     **** 
5882:src/vm3.c     **** bnePLUSsll:
5883:src/vm3.c     **** #if INDIRECT_DEBUG
5884:src/vm3.c     **** printf("%d|bne\n",counter);
5885:src/vm3.c     **** counter++;
5886:src/vm3.c     **** #endif
5887:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
5888:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
5889:src/vm3.c     **** if (RF[rs] != RF[rt])
5890:src/vm3.c     **** {
5891:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
5892:src/vm3.c     ****   PC  =  nPC;
5893:src/vm3.c     ****   nPC  += (immediate << 2);
5894:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
5895:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5896:src/vm3.c     ****   if (op0 == 0x0) {
5897:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5898:src/vm3.c     ****     op0 = op0 + funct;
5899:src/vm3.c     ****   }
5900:src/vm3.c     ****     else {
5901:src/vm3.c     ****     op0 = op0 + FIX_OP;
5902:src/vm3.c     ****   }
5903:src/vm3.c     **** 
5904:src/vm3.c     **** p = array;
5905:src/vm3.c     **** p = p[op0].next_level;
5906:src/vm3.c     **** 
5907:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5908:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5909:src/vm3.c     ****   if (op1 == 0x0) {
5910:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5911:src/vm3.c     ****     op1 = op1 + funct;
5912:src/vm3.c     ****   }
5913:src/vm3.c     ****     else {
5914:src/vm3.c     ****     op1 = op1 + FIX_OP;
5915:src/vm3.c     ****   }
5916:src/vm3.c     **** 
5917:src/vm3.c     **** goto *p[op1].code;
5918:src/vm3.c     **** 
5919:src/vm3.c     **** 
5920:src/vm3.c     **** }
5921:src/vm3.c     **** else
5922:src/vm3.c     **** {
5923:src/vm3.c     ****   PC  =  nPC;
5924:src/vm3.c     ****   nPC  += 4;
5925:src/vm3.c     **** }
5926:src/vm3.c     **** 
5927:src/vm3.c     **** #if INDIRECT_DEBUG
5928:src/vm3.c     **** printf("%d|sll\n",counter);
5929:src/vm3.c     **** counter++;
5930:src/vm3.c     **** #endif
5931:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
5932:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
5933:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
5934:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
GAS LISTING /tmp/cc15eBE3.s 			page 380


5935:src/vm3.c     **** PC  =  nPC;
5936:src/vm3.c     **** nPC  += 4;
5937:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5939:src/vm3.c     ****   if (op0 == 0x0) {
5940:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5941:src/vm3.c     ****     op0 = op0 + funct;
5942:src/vm3.c     ****   }
5943:src/vm3.c     ****     else {
5944:src/vm3.c     ****     op0 = op0 + FIX_OP;
5945:src/vm3.c     ****   }
5946:src/vm3.c     **** 
5947:src/vm3.c     **** p = array;
5948:src/vm3.c     **** p = p[op0].next_level;
5949:src/vm3.c     **** 
5950:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5952:src/vm3.c     ****   if (op1 == 0x0) {
5953:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5954:src/vm3.c     ****     op1 = op1 + funct;
5955:src/vm3.c     ****   }
5956:src/vm3.c     ****     else {
5957:src/vm3.c     ****     op1 = op1 + FIX_OP;
5958:src/vm3.c     ****   }
5959:src/vm3.c     **** 
5960:src/vm3.c     **** goto *p[op1].code;
5961:src/vm3.c     **** 
5962:src/vm3.c     **** 
5963:src/vm3.c     **** jumpPLUSaddiu:
5964:src/vm3.c     **** #if INDIRECT_DEBUG
5965:src/vm3.c     **** printf("%d|jump\n",counter);
5966:src/vm3.c     **** counter++;
5967:src/vm3.c     **** #endif
5968:src/vm3.c     **** PC = nPC;
5969:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
5970:src/vm3.c     **** nPC = address << 2;
5971:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
5972:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
5973:src/vm3.c     ****   if (op0 == 0x0) {
5974:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
5975:src/vm3.c     ****     op0 = op0 + funct;
5976:src/vm3.c     ****   }
5977:src/vm3.c     ****     else {
5978:src/vm3.c     ****     op0 = op0 + FIX_OP;
5979:src/vm3.c     ****   }
5980:src/vm3.c     **** 
5981:src/vm3.c     **** p = array;
5982:src/vm3.c     **** p = p[op0].next_level;
5983:src/vm3.c     **** 
5984:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
5985:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
5986:src/vm3.c     ****   if (op1 == 0x0) {
5987:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
5988:src/vm3.c     ****     op1 = op1 + funct;
5989:src/vm3.c     ****   }
5990:src/vm3.c     ****     else {
5991:src/vm3.c     ****     op1 = op1 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 381


5992:src/vm3.c     ****   }
5993:src/vm3.c     **** 
5994:src/vm3.c     **** goto *p[op1].code;
5995:src/vm3.c     **** 
5996:src/vm3.c     **** 
5997:src/vm3.c     **** 
5998:src/vm3.c     **** #if INDIRECT_DEBUG
5999:src/vm3.c     **** printf("%d|addiu\n",counter);
6000:src/vm3.c     **** counter++;
6001:src/vm3.c     **** #endif
6002:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6003:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6004:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6005:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6006:src/vm3.c     **** PC  =  nPC;
6007:src/vm3.c     **** nPC  += 4;
6008:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6009:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6010:src/vm3.c     ****   if (op0 == 0x0) {
6011:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6012:src/vm3.c     ****     op0 = op0 + funct;
6013:src/vm3.c     ****   }
6014:src/vm3.c     ****     else {
6015:src/vm3.c     ****     op0 = op0 + FIX_OP;
6016:src/vm3.c     ****   }
6017:src/vm3.c     **** 
6018:src/vm3.c     **** p = array;
6019:src/vm3.c     **** p = p[op0].next_level;
6020:src/vm3.c     **** 
6021:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6022:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6023:src/vm3.c     ****   if (op1 == 0x0) {
6024:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6025:src/vm3.c     ****     op1 = op1 + funct;
6026:src/vm3.c     ****   }
6027:src/vm3.c     ****     else {
6028:src/vm3.c     ****     op1 = op1 + FIX_OP;
6029:src/vm3.c     ****   }
6030:src/vm3.c     **** 
6031:src/vm3.c     **** goto *p[op1].code;
6032:src/vm3.c     **** 
6033:src/vm3.c     **** 
6034:src/vm3.c     **** jalPLUSsll:
6035:src/vm3.c     **** #if INDIRECT_DEBUG
6036:src/vm3.c     **** printf("%d|jal\n",counter);
6037:src/vm3.c     **** counter++;
6038:src/vm3.c     **** #endif
6039:src/vm3.c     **** RF[31] = PC + 8;
6040:src/vm3.c     **** PC = nPC;
6041:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
6042:src/vm3.c     **** nPC = address << 2;
6043:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6044:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6045:src/vm3.c     ****   if (op0 == 0x0) {
6046:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6047:src/vm3.c     ****     op0 = op0 + funct;
6048:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 382


6049:src/vm3.c     ****     else {
6050:src/vm3.c     ****     op0 = op0 + FIX_OP;
6051:src/vm3.c     ****   }
6052:src/vm3.c     **** 
6053:src/vm3.c     **** p = array;
6054:src/vm3.c     **** p = p[op0].next_level;
6055:src/vm3.c     **** 
6056:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6057:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6058:src/vm3.c     ****   if (op1 == 0x0) {
6059:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6060:src/vm3.c     ****     op1 = op1 + funct;
6061:src/vm3.c     ****   }
6062:src/vm3.c     ****     else {
6063:src/vm3.c     ****     op1 = op1 + FIX_OP;
6064:src/vm3.c     ****   }
6065:src/vm3.c     **** 
6066:src/vm3.c     **** goto *p[op1].code;
6067:src/vm3.c     **** 
6068:src/vm3.c     **** 
6069:src/vm3.c     **** 
6070:src/vm3.c     **** #if INDIRECT_DEBUG
6071:src/vm3.c     **** printf("%d|sll\n",counter);
6072:src/vm3.c     **** counter++;
6073:src/vm3.c     **** #endif
6074:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
6075:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6076:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
6077:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
6078:src/vm3.c     **** PC  =  nPC;
6079:src/vm3.c     **** nPC  += 4;
6080:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6081:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6082:src/vm3.c     ****   if (op0 == 0x0) {
6083:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6084:src/vm3.c     ****     op0 = op0 + funct;
6085:src/vm3.c     ****   }
6086:src/vm3.c     ****     else {
6087:src/vm3.c     ****     op0 = op0 + FIX_OP;
6088:src/vm3.c     ****   }
6089:src/vm3.c     **** 
6090:src/vm3.c     **** p = array;
6091:src/vm3.c     **** p = p[op0].next_level;
6092:src/vm3.c     **** 
6093:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6094:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6095:src/vm3.c     ****   if (op1 == 0x0) {
6096:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6097:src/vm3.c     ****     op1 = op1 + funct;
6098:src/vm3.c     ****   }
6099:src/vm3.c     ****     else {
6100:src/vm3.c     ****     op1 = op1 + FIX_OP;
6101:src/vm3.c     ****   }
6102:src/vm3.c     **** 
6103:src/vm3.c     **** goto *p[op1].code;
6104:src/vm3.c     **** 
6105:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 383


6106:src/vm3.c     **** xorPLUSbne:
6107:src/vm3.c     **** #if INDIRECT_DEBUG
6108:src/vm3.c     **** printf("%d|xor\n",counter);
6109:src/vm3.c     **** counter++;
6110:src/vm3.c     **** #endif
6111:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6112:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6113:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6114:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
6115:src/vm3.c     **** PC  =  nPC;
6116:src/vm3.c     **** nPC  += 4;
6117:src/vm3.c     **** 
6118:src/vm3.c     **** #if INDIRECT_DEBUG
6119:src/vm3.c     **** printf("%d|bne\n",counter);
6120:src/vm3.c     **** counter++;
6121:src/vm3.c     **** #endif
6122:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6123:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6124:src/vm3.c     **** if (RF[rs] != RF[rt])
6125:src/vm3.c     **** {
6126:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
6127:src/vm3.c     ****   PC  =  nPC;
6128:src/vm3.c     ****   nPC  += (immediate << 2);
6129:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
6130:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6131:src/vm3.c     ****   if (op0 == 0x0) {
6132:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6133:src/vm3.c     ****     op0 = op0 + funct;
6134:src/vm3.c     ****   }
6135:src/vm3.c     ****     else {
6136:src/vm3.c     ****     op0 = op0 + FIX_OP;
6137:src/vm3.c     ****   }
6138:src/vm3.c     **** 
6139:src/vm3.c     **** p = array;
6140:src/vm3.c     **** p = p[op0].next_level;
6141:src/vm3.c     **** 
6142:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6143:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6144:src/vm3.c     ****   if (op1 == 0x0) {
6145:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6146:src/vm3.c     ****     op1 = op1 + funct;
6147:src/vm3.c     ****   }
6148:src/vm3.c     ****     else {
6149:src/vm3.c     ****     op1 = op1 + FIX_OP;
6150:src/vm3.c     ****   }
6151:src/vm3.c     **** 
6152:src/vm3.c     **** goto *p[op1].code;
6153:src/vm3.c     **** 
6154:src/vm3.c     **** 
6155:src/vm3.c     **** }
6156:src/vm3.c     **** else
6157:src/vm3.c     **** {
6158:src/vm3.c     ****   PC  =  nPC;
6159:src/vm3.c     ****   nPC  += 4;
6160:src/vm3.c     **** }
6161:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6162:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 384


6163:src/vm3.c     ****   if (op0 == 0x0) {
6164:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6165:src/vm3.c     ****     op0 = op0 + funct;
6166:src/vm3.c     ****   }
6167:src/vm3.c     ****     else {
6168:src/vm3.c     ****     op0 = op0 + FIX_OP;
6169:src/vm3.c     ****   }
6170:src/vm3.c     **** 
6171:src/vm3.c     **** p = array;
6172:src/vm3.c     **** p = p[op0].next_level;
6173:src/vm3.c     **** 
6174:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6175:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6176:src/vm3.c     ****   if (op1 == 0x0) {
6177:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6178:src/vm3.c     ****     op1 = op1 + funct;
6179:src/vm3.c     ****   }
6180:src/vm3.c     ****     else {
6181:src/vm3.c     ****     op1 = op1 + FIX_OP;
6182:src/vm3.c     ****   }
6183:src/vm3.c     **** 
6184:src/vm3.c     **** goto *p[op1].code;
6185:src/vm3.c     **** 
6186:src/vm3.c     **** 
6187:src/vm3.c     **** addiuPLUSbne:
6188:src/vm3.c     **** #if INDIRECT_DEBUG
6189:src/vm3.c     **** printf("%d|addiu\n",counter);
6190:src/vm3.c     **** counter++;
6191:src/vm3.c     **** #endif
6192:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6193:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6194:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
6195:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6196:src/vm3.c     **** PC  =  nPC;
6197:src/vm3.c     **** nPC  += 4;
6198:src/vm3.c     **** 
6199:src/vm3.c     **** #if INDIRECT_DEBUG
6200:src/vm3.c     **** printf("%d|bne\n",counter);
6201:src/vm3.c     **** counter++;
6202:src/vm3.c     **** #endif
6203:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6204:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6205:src/vm3.c     **** if (RF[rs] != RF[rt])
6206:src/vm3.c     **** {
6207:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
6208:src/vm3.c     ****   PC  =  nPC;
6209:src/vm3.c     ****   nPC  += (immediate << 2);
6210:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
6211:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6212:src/vm3.c     ****   if (op0 == 0x0) {
6213:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6214:src/vm3.c     ****     op0 = op0 + funct;
6215:src/vm3.c     ****   }
6216:src/vm3.c     ****     else {
6217:src/vm3.c     ****     op0 = op0 + FIX_OP;
6218:src/vm3.c     ****   }
6219:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 385


6220:src/vm3.c     **** p = array;
6221:src/vm3.c     **** p = p[op0].next_level;
6222:src/vm3.c     **** 
6223:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6224:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6225:src/vm3.c     ****   if (op1 == 0x0) {
6226:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6227:src/vm3.c     ****     op1 = op1 + funct;
6228:src/vm3.c     ****   }
6229:src/vm3.c     ****     else {
6230:src/vm3.c     ****     op1 = op1 + FIX_OP;
6231:src/vm3.c     ****   }
6232:src/vm3.c     **** 
6233:src/vm3.c     **** goto *p[op1].code;
6234:src/vm3.c     **** 
6235:src/vm3.c     **** 
6236:src/vm3.c     **** }
6237:src/vm3.c     **** else
6238:src/vm3.c     **** {
6239:src/vm3.c     ****   PC  =  nPC;
6240:src/vm3.c     ****   nPC  += 4;
6241:src/vm3.c     **** }
6242:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6243:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6244:src/vm3.c     ****   if (op0 == 0x0) {
6245:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6246:src/vm3.c     ****     op0 = op0 + funct;
6247:src/vm3.c     ****   }
6248:src/vm3.c     ****     else {
6249:src/vm3.c     ****     op0 = op0 + FIX_OP;
6250:src/vm3.c     ****   }
6251:src/vm3.c     **** 
6252:src/vm3.c     **** p = array;
6253:src/vm3.c     **** p = p[op0].next_level;
6254:src/vm3.c     **** 
6255:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6256:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6257:src/vm3.c     ****   if (op1 == 0x0) {
6258:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6259:src/vm3.c     ****     op1 = op1 + funct;
6260:src/vm3.c     ****   }
6261:src/vm3.c     ****     else {
6262:src/vm3.c     ****     op1 = op1 + FIX_OP;
6263:src/vm3.c     ****   }
6264:src/vm3.c     **** 
6265:src/vm3.c     **** goto *p[op1].code;
6266:src/vm3.c     **** 
6267:src/vm3.c     **** 
6268:src/vm3.c     **** sllPLUSand:
6269:src/vm3.c     **** #if INDIRECT_DEBUG
6270:src/vm3.c     **** printf("%d|sll\n",counter);
6271:src/vm3.c     **** counter++;
6272:src/vm3.c     **** #endif
6273:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
6274:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6275:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6276:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
GAS LISTING /tmp/cc15eBE3.s 			page 386


6277:src/vm3.c     **** PC  =  nPC;
6278:src/vm3.c     **** nPC  += 4;
6279:src/vm3.c     **** 
6280:src/vm3.c     **** #if INDIRECT_DEBUG
6281:src/vm3.c     **** printf("%d|and\n",counter);
6282:src/vm3.c     **** counter++;
6283:src/vm3.c     **** #endif
6284:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6285:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6286:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
6287:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
6288:src/vm3.c     **** PC  =  nPC;
6289:src/vm3.c     **** nPC  += 4;
6290:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6291:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6292:src/vm3.c     ****   if (op0 == 0x0) {
6293:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6294:src/vm3.c     ****     op0 = op0 + funct;
6295:src/vm3.c     ****   }
6296:src/vm3.c     ****     else {
6297:src/vm3.c     ****     op0 = op0 + FIX_OP;
6298:src/vm3.c     ****   }
6299:src/vm3.c     **** 
6300:src/vm3.c     **** p = array;
6301:src/vm3.c     **** p = p[op0].next_level;
6302:src/vm3.c     **** 
6303:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6304:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6305:src/vm3.c     ****   if (op1 == 0x0) {
6306:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6307:src/vm3.c     ****     op1 = op1 + funct;
6308:src/vm3.c     ****   }
6309:src/vm3.c     ****     else {
6310:src/vm3.c     ****     op1 = op1 + FIX_OP;
6311:src/vm3.c     ****   }
6312:src/vm3.c     **** 
6313:src/vm3.c     **** goto *p[op1].code;
6314:src/vm3.c     **** 
6315:src/vm3.c     **** 
6316:src/vm3.c     **** luiPLUSsw:
6317:src/vm3.c     **** #if INDIRECT_DEBUG
6318:src/vm3.c     **** printf("%d|lui\n",counter);
6319:src/vm3.c     **** counter++;
6320:src/vm3.c     **** #endif
6321:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
6322:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6323:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
6324:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
6325:src/vm3.c     **** PC  =  nPC;
6326:src/vm3.c     **** nPC  += 4;
6327:src/vm3.c     **** 
6328:src/vm3.c     **** #if INDIRECT_DEBUG
6329:src/vm3.c     **** printf("%d|sw\n",counter);
6330:src/vm3.c     **** counter++;
6331:src/vm3.c     **** #endif
6332:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6333:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 387


6334:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6335:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
6336:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
6337:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
6338:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
6339:src/vm3.c     **** PC  =  nPC;
6340:src/vm3.c     **** nPC  += 4;
6341:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6342:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6343:src/vm3.c     ****   if (op0 == 0x0) {
6344:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6345:src/vm3.c     ****     op0 = op0 + funct;
6346:src/vm3.c     ****   }
6347:src/vm3.c     ****     else {
6348:src/vm3.c     ****     op0 = op0 + FIX_OP;
6349:src/vm3.c     ****   }
6350:src/vm3.c     **** 
6351:src/vm3.c     **** p = array;
6352:src/vm3.c     **** p = p[op0].next_level;
6353:src/vm3.c     **** 
6354:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6355:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6356:src/vm3.c     ****   if (op1 == 0x0) {
6357:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6358:src/vm3.c     ****     op1 = op1 + funct;
6359:src/vm3.c     ****   }
6360:src/vm3.c     ****     else {
6361:src/vm3.c     ****     op1 = op1 + FIX_OP;
6362:src/vm3.c     ****   }
6363:src/vm3.c     **** 
6364:src/vm3.c     **** goto *p[op1].code;
6365:src/vm3.c     **** 
6366:src/vm3.c     **** 
6367:src/vm3.c     **** xorPLUSslti:
6368:src/vm3.c     **** #if INDIRECT_DEBUG
6369:src/vm3.c     **** printf("%d|xor\n",counter);
6370:src/vm3.c     **** counter++;
6371:src/vm3.c     **** #endif
6372:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6373:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6374:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6375:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
6376:src/vm3.c     **** PC  =  nPC;
6377:src/vm3.c     **** nPC  += 4;
6378:src/vm3.c     **** 
6379:src/vm3.c     **** #if INDIRECT_DEBUG
6380:src/vm3.c     **** printf("%d|slti\n",counter);
6381:src/vm3.c     **** counter++;
6382:src/vm3.c     **** #endif
6383:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6384:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6385:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6386:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
6387:src/vm3.c     **** PC  =  nPC;
6388:src/vm3.c     **** nPC  += 4;
6389:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6390:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 388


6391:src/vm3.c     ****   if (op0 == 0x0) {
6392:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6393:src/vm3.c     ****     op0 = op0 + funct;
6394:src/vm3.c     ****   }
6395:src/vm3.c     ****     else {
6396:src/vm3.c     ****     op0 = op0 + FIX_OP;
6397:src/vm3.c     ****   }
6398:src/vm3.c     **** 
6399:src/vm3.c     **** p = array;
6400:src/vm3.c     **** p = p[op0].next_level;
6401:src/vm3.c     **** 
6402:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6403:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6404:src/vm3.c     ****   if (op1 == 0x0) {
6405:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6406:src/vm3.c     ****     op1 = op1 + funct;
6407:src/vm3.c     ****   }
6408:src/vm3.c     ****     else {
6409:src/vm3.c     ****     op1 = op1 + FIX_OP;
6410:src/vm3.c     ****   }
6411:src/vm3.c     **** 
6412:src/vm3.c     **** goto *p[op1].code;
6413:src/vm3.c     **** 
6414:src/vm3.c     **** 
6415:src/vm3.c     **** andPLUSxor:
6416:src/vm3.c     **** #if INDIRECT_DEBUG
6417:src/vm3.c     **** printf("%d|and\n",counter);
6418:src/vm3.c     **** counter++;
6419:src/vm3.c     **** #endif
6420:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6421:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6422:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6423:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
6424:src/vm3.c     **** PC  =  nPC;
6425:src/vm3.c     **** nPC  += 4;
6426:src/vm3.c     **** 
6427:src/vm3.c     **** #if INDIRECT_DEBUG
6428:src/vm3.c     **** printf("%d|xor\n",counter);
6429:src/vm3.c     **** counter++;
6430:src/vm3.c     **** #endif
6431:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6432:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6433:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
6434:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
6435:src/vm3.c     **** PC  =  nPC;
6436:src/vm3.c     **** nPC  += 4;
6437:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6438:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6439:src/vm3.c     ****   if (op0 == 0x0) {
6440:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6441:src/vm3.c     ****     op0 = op0 + funct;
6442:src/vm3.c     ****   }
6443:src/vm3.c     ****     else {
6444:src/vm3.c     ****     op0 = op0 + FIX_OP;
6445:src/vm3.c     ****   }
6446:src/vm3.c     **** 
6447:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 389


6448:src/vm3.c     **** p = p[op0].next_level;
6449:src/vm3.c     **** 
6450:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6451:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6452:src/vm3.c     ****   if (op1 == 0x0) {
6453:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6454:src/vm3.c     ****     op1 = op1 + funct;
6455:src/vm3.c     ****   }
6456:src/vm3.c     ****     else {
6457:src/vm3.c     ****     op1 = op1 + FIX_OP;
6458:src/vm3.c     ****   }
6459:src/vm3.c     **** 
6460:src/vm3.c     **** goto *p[op1].code;
6461:src/vm3.c     **** 
6462:src/vm3.c     **** 
6463:src/vm3.c     **** jumpPLUSsll:
6464:src/vm3.c     **** #if INDIRECT_DEBUG
6465:src/vm3.c     **** printf("%d|jump\n",counter);
6466:src/vm3.c     **** counter++;
6467:src/vm3.c     **** #endif
6468:src/vm3.c     **** PC = nPC;
6469:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
6470:src/vm3.c     **** nPC = address << 2;
6471:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6472:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6473:src/vm3.c     ****   if (op0 == 0x0) {
6474:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6475:src/vm3.c     ****     op0 = op0 + funct;
6476:src/vm3.c     ****   }
6477:src/vm3.c     ****     else {
6478:src/vm3.c     ****     op0 = op0 + FIX_OP;
6479:src/vm3.c     ****   }
6480:src/vm3.c     **** 
6481:src/vm3.c     **** p = array;
6482:src/vm3.c     **** p = p[op0].next_level;
6483:src/vm3.c     **** 
6484:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6485:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6486:src/vm3.c     ****   if (op1 == 0x0) {
6487:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6488:src/vm3.c     ****     op1 = op1 + funct;
6489:src/vm3.c     ****   }
6490:src/vm3.c     ****     else {
6491:src/vm3.c     ****     op1 = op1 + FIX_OP;
6492:src/vm3.c     ****   }
6493:src/vm3.c     **** 
6494:src/vm3.c     **** goto *p[op1].code;
6495:src/vm3.c     **** 
6496:src/vm3.c     **** 
6497:src/vm3.c     **** 
6498:src/vm3.c     **** #if INDIRECT_DEBUG
6499:src/vm3.c     **** printf("%d|sll\n",counter);
6500:src/vm3.c     **** counter++;
6501:src/vm3.c     **** #endif
6502:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
6503:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6504:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 390


6505:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
6506:src/vm3.c     **** PC  =  nPC;
6507:src/vm3.c     **** nPC  += 4;
6508:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6509:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6510:src/vm3.c     ****   if (op0 == 0x0) {
6511:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6512:src/vm3.c     ****     op0 = op0 + funct;
6513:src/vm3.c     ****   }
6514:src/vm3.c     ****     else {
6515:src/vm3.c     ****     op0 = op0 + FIX_OP;
6516:src/vm3.c     ****   }
6517:src/vm3.c     **** 
6518:src/vm3.c     **** p = array;
6519:src/vm3.c     **** p = p[op0].next_level;
6520:src/vm3.c     **** 
6521:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6522:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6523:src/vm3.c     ****   if (op1 == 0x0) {
6524:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6525:src/vm3.c     ****     op1 = op1 + funct;
6526:src/vm3.c     ****   }
6527:src/vm3.c     ****     else {
6528:src/vm3.c     ****     op1 = op1 + FIX_OP;
6529:src/vm3.c     ****   }
6530:src/vm3.c     **** 
6531:src/vm3.c     **** goto *p[op1].code;
6532:src/vm3.c     **** 
6533:src/vm3.c     **** 
6534:src/vm3.c     **** jrPLUSaddiu:
6535:src/vm3.c     **** #if INDIRECT_DEBUG
6536:src/vm3.c     **** printf("%d|jr\n",counter);
6537:src/vm3.c     **** counter++;
6538:src/vm3.c     **** #endif
6539:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6540:src/vm3.c     **** PC = nPC;
6541:src/vm3.c     **** nPC = RF[rs];
6542:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6543:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6544:src/vm3.c     ****   if (op0 == 0x0) {
6545:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6546:src/vm3.c     ****     op0 = op0 + funct;
6547:src/vm3.c     ****   }
6548:src/vm3.c     ****     else {
6549:src/vm3.c     ****     op0 = op0 + FIX_OP;
6550:src/vm3.c     ****   }
6551:src/vm3.c     **** 
6552:src/vm3.c     **** p = array;
6553:src/vm3.c     **** p = p[op0].next_level;
6554:src/vm3.c     **** 
6555:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6556:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6557:src/vm3.c     ****   if (op1 == 0x0) {
6558:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6559:src/vm3.c     ****     op1 = op1 + funct;
6560:src/vm3.c     ****   }
6561:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 391


6562:src/vm3.c     ****     op1 = op1 + FIX_OP;
6563:src/vm3.c     ****   }
6564:src/vm3.c     **** 
6565:src/vm3.c     **** goto *p[op1].code;
6566:src/vm3.c     **** 
6567:src/vm3.c     **** 
6568:src/vm3.c     **** 
6569:src/vm3.c     **** #if INDIRECT_DEBUG
6570:src/vm3.c     **** printf("%d|addiu\n",counter);
6571:src/vm3.c     **** counter++;
6572:src/vm3.c     **** #endif
6573:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6574:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6575:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6576:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6577:src/vm3.c     **** PC  =  nPC;
6578:src/vm3.c     **** nPC  += 4;
6579:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6580:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6581:src/vm3.c     ****   if (op0 == 0x0) {
6582:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6583:src/vm3.c     ****     op0 = op0 + funct;
6584:src/vm3.c     ****   }
6585:src/vm3.c     ****     else {
6586:src/vm3.c     ****     op0 = op0 + FIX_OP;
6587:src/vm3.c     ****   }
6588:src/vm3.c     **** 
6589:src/vm3.c     **** p = array;
6590:src/vm3.c     **** p = p[op0].next_level;
6591:src/vm3.c     **** 
6592:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6593:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6594:src/vm3.c     ****   if (op1 == 0x0) {
6595:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6596:src/vm3.c     ****     op1 = op1 + funct;
6597:src/vm3.c     ****   }
6598:src/vm3.c     ****     else {
6599:src/vm3.c     ****     op1 = op1 + FIX_OP;
6600:src/vm3.c     ****   }
6601:src/vm3.c     **** 
6602:src/vm3.c     **** goto *p[op1].code;
6603:src/vm3.c     **** 
6604:src/vm3.c     **** 
6605:src/vm3.c     **** orPLUSlui:
6606:src/vm3.c     **** #if INDIRECT_DEBUG
6607:src/vm3.c     **** printf("%d|or\n",counter);
6608:src/vm3.c     **** counter++;
6609:src/vm3.c     **** #endif
6610:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6611:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6612:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6613:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
6614:src/vm3.c     **** PC  =  nPC;
6615:src/vm3.c     **** nPC  += 4;
6616:src/vm3.c     **** 
6617:src/vm3.c     **** #if INDIRECT_DEBUG
6618:src/vm3.c     **** printf("%d|lui\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 392


6619:src/vm3.c     **** counter++;
6620:src/vm3.c     **** #endif
6621:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
6622:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6623:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6624:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
6625:src/vm3.c     **** PC  =  nPC;
6626:src/vm3.c     **** nPC  += 4;
6627:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6628:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6629:src/vm3.c     ****   if (op0 == 0x0) {
6630:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6631:src/vm3.c     ****     op0 = op0 + funct;
6632:src/vm3.c     ****   }
6633:src/vm3.c     ****     else {
6634:src/vm3.c     ****     op0 = op0 + FIX_OP;
6635:src/vm3.c     ****   }
6636:src/vm3.c     **** 
6637:src/vm3.c     **** p = array;
6638:src/vm3.c     **** p = p[op0].next_level;
6639:src/vm3.c     **** 
6640:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6641:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6642:src/vm3.c     ****   if (op1 == 0x0) {
6643:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6644:src/vm3.c     ****     op1 = op1 + funct;
6645:src/vm3.c     ****   }
6646:src/vm3.c     ****     else {
6647:src/vm3.c     ****     op1 = op1 + FIX_OP;
6648:src/vm3.c     ****   }
6649:src/vm3.c     **** 
6650:src/vm3.c     **** goto *p[op1].code;
6651:src/vm3.c     **** 
6652:src/vm3.c     **** 
6653:src/vm3.c     **** srlPLUSlui:
6654:src/vm3.c     **** #if INDIRECT_DEBUG
6655:src/vm3.c     **** printf("%d|srl\n",counter);
6656:src/vm3.c     **** counter++;
6657:src/vm3.c     **** #endif
6658:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
6659:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6660:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6661:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
6662:src/vm3.c     **** PC  =  nPC;
6663:src/vm3.c     **** nPC  += 4;
6664:src/vm3.c     **** 
6665:src/vm3.c     **** #if INDIRECT_DEBUG
6666:src/vm3.c     **** printf("%d|lui\n",counter);
6667:src/vm3.c     **** counter++;
6668:src/vm3.c     **** #endif
6669:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
6670:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6671:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6672:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
6673:src/vm3.c     **** PC  =  nPC;
6674:src/vm3.c     **** nPC  += 4;
6675:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 393


6676:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6677:src/vm3.c     ****   if (op0 == 0x0) {
6678:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6679:src/vm3.c     ****     op0 = op0 + funct;
6680:src/vm3.c     ****   }
6681:src/vm3.c     ****     else {
6682:src/vm3.c     ****     op0 = op0 + FIX_OP;
6683:src/vm3.c     ****   }
6684:src/vm3.c     **** 
6685:src/vm3.c     **** p = array;
6686:src/vm3.c     **** p = p[op0].next_level;
6687:src/vm3.c     **** 
6688:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6689:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6690:src/vm3.c     ****   if (op1 == 0x0) {
6691:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6692:src/vm3.c     ****     op1 = op1 + funct;
6693:src/vm3.c     ****   }
6694:src/vm3.c     ****     else {
6695:src/vm3.c     ****     op1 = op1 + FIX_OP;
6696:src/vm3.c     ****   }
6697:src/vm3.c     **** 
6698:src/vm3.c     **** goto *p[op1].code;
6699:src/vm3.c     **** 
6700:src/vm3.c     **** 
6701:src/vm3.c     **** xorPLUSerror:
6702:src/vm3.c     **** #if INDIRECT_DEBUG
6703:src/vm3.c     **** printf("%d|xor\n",counter);
6704:src/vm3.c     **** counter++;
6705:src/vm3.c     **** #endif
6706:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6707:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6708:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6709:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
6710:src/vm3.c     **** PC  =  nPC;
6711:src/vm3.c     **** nPC  += 4;
6712:src/vm3.c     **** 
6713:src/vm3.c     **** #if INDIRECT_DEBUG
6714:src/vm3.c     **** printf("Error, unknown instr1uction %d.\n", instr1);
6715:src/vm3.c     **** #endif
6716:src/vm3.c     **** PC  =  nPC;
6717:src/vm3.c     **** nPC  += 4;
6718:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6719:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6720:src/vm3.c     ****   if (op0 == 0x0) {
6721:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6722:src/vm3.c     ****     op0 = op0 + funct;
6723:src/vm3.c     ****   }
6724:src/vm3.c     ****     else {
6725:src/vm3.c     ****     op0 = op0 + FIX_OP;
6726:src/vm3.c     ****   }
6727:src/vm3.c     **** 
6728:src/vm3.c     **** p = array;
6729:src/vm3.c     **** p = p[op0].next_level;
6730:src/vm3.c     **** 
6731:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6732:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 394


6733:src/vm3.c     ****   if (op1 == 0x0) {
6734:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6735:src/vm3.c     ****     op1 = op1 + funct;
6736:src/vm3.c     ****   }
6737:src/vm3.c     ****     else {
6738:src/vm3.c     ****     op1 = op1 + FIX_OP;
6739:src/vm3.c     ****   }
6740:src/vm3.c     **** 
6741:src/vm3.c     **** goto *p[op1].code;
6742:src/vm3.c     **** 
6743:src/vm3.c     **** 
6744:src/vm3.c     **** sltiPLUSsw:
6745:src/vm3.c     **** #if INDIRECT_DEBUG
6746:src/vm3.c     **** printf("%d|slti\n",counter);
6747:src/vm3.c     **** counter++;
6748:src/vm3.c     **** #endif
6749:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6750:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6751:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
6752:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
6753:src/vm3.c     **** PC  =  nPC;
6754:src/vm3.c     **** nPC  += 4;
6755:src/vm3.c     **** 
6756:src/vm3.c     **** #if INDIRECT_DEBUG
6757:src/vm3.c     **** printf("%d|sw\n",counter);
6758:src/vm3.c     **** counter++;
6759:src/vm3.c     **** #endif
6760:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6761:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6762:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6763:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
6764:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
6765:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
6766:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
6767:src/vm3.c     **** PC  =  nPC;
6768:src/vm3.c     **** nPC  += 4;
6769:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6771:src/vm3.c     ****   if (op0 == 0x0) {
6772:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6773:src/vm3.c     ****     op0 = op0 + funct;
6774:src/vm3.c     ****   }
6775:src/vm3.c     ****     else {
6776:src/vm3.c     ****     op0 = op0 + FIX_OP;
6777:src/vm3.c     ****   }
6778:src/vm3.c     **** 
6779:src/vm3.c     **** p = array;
6780:src/vm3.c     **** p = p[op0].next_level;
6781:src/vm3.c     **** 
6782:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6783:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6784:src/vm3.c     ****   if (op1 == 0x0) {
6785:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6786:src/vm3.c     ****     op1 = op1 + funct;
6787:src/vm3.c     ****   }
6788:src/vm3.c     ****     else {
6789:src/vm3.c     ****     op1 = op1 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 395


6790:src/vm3.c     ****   }
6791:src/vm3.c     **** 
6792:src/vm3.c     **** goto *p[op1].code;
6793:src/vm3.c     **** 
6794:src/vm3.c     **** 
6795:src/vm3.c     **** orPLUSaddu:
6796:src/vm3.c     **** #if INDIRECT_DEBUG
6797:src/vm3.c     **** printf("%d|or\n",counter);
6798:src/vm3.c     **** counter++;
6799:src/vm3.c     **** #endif
6800:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6801:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6802:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
6803:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
6804:src/vm3.c     **** PC  =  nPC;
6805:src/vm3.c     **** nPC  += 4;
6806:src/vm3.c     **** 
6807:src/vm3.c     **** #if INDIRECT_DEBUG
6808:src/vm3.c     **** printf("%d|addu\n",counter);
6809:src/vm3.c     **** counter++;
6810:src/vm3.c     **** #endif
6811:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6812:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6813:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
6814:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
6815:src/vm3.c     **** PC  =  nPC;
6816:src/vm3.c     **** nPC  += 4;
6817:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6818:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6819:src/vm3.c     ****   if (op0 == 0x0) {
6820:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6821:src/vm3.c     ****     op0 = op0 + funct;
6822:src/vm3.c     ****   }
6823:src/vm3.c     ****     else {
6824:src/vm3.c     ****     op0 = op0 + FIX_OP;
6825:src/vm3.c     ****   }
6826:src/vm3.c     **** 
6827:src/vm3.c     **** p = array;
6828:src/vm3.c     **** p = p[op0].next_level;
6829:src/vm3.c     **** 
6830:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6831:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6832:src/vm3.c     ****   if (op1 == 0x0) {
6833:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6834:src/vm3.c     ****     op1 = op1 + funct;
6835:src/vm3.c     ****   }
6836:src/vm3.c     ****     else {
6837:src/vm3.c     ****     op1 = op1 + FIX_OP;
6838:src/vm3.c     ****   }
6839:src/vm3.c     **** 
6840:src/vm3.c     **** goto *p[op1].code;
6841:src/vm3.c     **** 
6842:src/vm3.c     **** 
6843:src/vm3.c     **** addiuPLUSjal:
6844:src/vm3.c     **** #if INDIRECT_DEBUG
6845:src/vm3.c     **** printf("%d|addiu\n",counter);
6846:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 396


6847:src/vm3.c     **** #endif
6848:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6849:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6850:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
6851:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6852:src/vm3.c     **** PC  =  nPC;
6853:src/vm3.c     **** nPC  += 4;
6854:src/vm3.c     **** 
6855:src/vm3.c     **** #if INDIRECT_DEBUG
6856:src/vm3.c     **** printf("%d|jal\n",counter);
6857:src/vm3.c     **** counter++;
6858:src/vm3.c     **** #endif
6859:src/vm3.c     **** RF[31] = PC + 8;
6860:src/vm3.c     **** PC = nPC;
6861:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
6862:src/vm3.c     **** nPC = address << 2;
6863:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6864:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6865:src/vm3.c     ****   if (op0 == 0x0) {
6866:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6867:src/vm3.c     ****     op0 = op0 + funct;
6868:src/vm3.c     ****   }
6869:src/vm3.c     ****     else {
6870:src/vm3.c     ****     op0 = op0 + FIX_OP;
6871:src/vm3.c     ****   }
6872:src/vm3.c     **** 
6873:src/vm3.c     **** p = array;
6874:src/vm3.c     **** p = p[op0].next_level;
6875:src/vm3.c     **** 
6876:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6877:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6878:src/vm3.c     ****   if (op1 == 0x0) {
6879:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6880:src/vm3.c     ****     op1 = op1 + funct;
6881:src/vm3.c     ****   }
6882:src/vm3.c     ****     else {
6883:src/vm3.c     ****     op1 = op1 + FIX_OP;
6884:src/vm3.c     ****   }
6885:src/vm3.c     **** 
6886:src/vm3.c     **** goto *p[op1].code;
6887:src/vm3.c     **** 
6888:src/vm3.c     **** 
6889:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6890:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6891:src/vm3.c     ****   if (op0 == 0x0) {
6892:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6893:src/vm3.c     ****     op0 = op0 + funct;
6894:src/vm3.c     ****   }
6895:src/vm3.c     ****     else {
6896:src/vm3.c     ****     op0 = op0 + FIX_OP;
6897:src/vm3.c     ****   }
6898:src/vm3.c     **** 
6899:src/vm3.c     **** p = array;
6900:src/vm3.c     **** p = p[op0].next_level;
6901:src/vm3.c     **** 
6902:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6903:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 397


6904:src/vm3.c     ****   if (op1 == 0x0) {
6905:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6906:src/vm3.c     ****     op1 = op1 + funct;
6907:src/vm3.c     ****   }
6908:src/vm3.c     ****     else {
6909:src/vm3.c     ****     op1 = op1 + FIX_OP;
6910:src/vm3.c     ****   }
6911:src/vm3.c     **** 
6912:src/vm3.c     **** goto *p[op1].code;
6913:src/vm3.c     **** 
6914:src/vm3.c     **** 
6915:src/vm3.c     **** addiuPLUSmult:
6916:src/vm3.c     **** #if INDIRECT_DEBUG
6917:src/vm3.c     **** printf("%d|addiu\n",counter);
6918:src/vm3.c     **** counter++;
6919:src/vm3.c     **** #endif
6920:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6921:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6922:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
6923:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6924:src/vm3.c     **** PC  =  nPC;
6925:src/vm3.c     **** nPC  += 4;
6926:src/vm3.c     **** 
6927:src/vm3.c     **** #if INDIRECT_DEBUG
6928:src/vm3.c     **** printf("%d|mult\n",counter);
6929:src/vm3.c     **** counter++;
6930:src/vm3.c     **** #endif
6931:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6932:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6933:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
6934:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
6935:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
6936:src/vm3.c     **** PC  =  nPC;
6937:src/vm3.c     **** nPC  += 4;
6938:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6939:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6940:src/vm3.c     ****   if (op0 == 0x0) {
6941:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6942:src/vm3.c     ****     op0 = op0 + funct;
6943:src/vm3.c     ****   }
6944:src/vm3.c     ****     else {
6945:src/vm3.c     ****     op0 = op0 + FIX_OP;
6946:src/vm3.c     ****   }
6947:src/vm3.c     **** 
6948:src/vm3.c     **** p = array;
6949:src/vm3.c     **** p = p[op0].next_level;
6950:src/vm3.c     **** 
6951:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
6952:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
6953:src/vm3.c     ****   if (op1 == 0x0) {
6954:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
6955:src/vm3.c     ****     op1 = op1 + funct;
6956:src/vm3.c     ****   }
6957:src/vm3.c     ****     else {
6958:src/vm3.c     ****     op1 = op1 + FIX_OP;
6959:src/vm3.c     ****   }
6960:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 398


6961:src/vm3.c     **** goto *p[op1].code;
6962:src/vm3.c     **** 
6963:src/vm3.c     **** 
6964:src/vm3.c     **** addiuPLUSaddiu:
6965:src/vm3.c     **** #if INDIRECT_DEBUG
6966:src/vm3.c     **** printf("%d|addiu\n",counter);
6967:src/vm3.c     **** counter++;
6968:src/vm3.c     **** #endif
6969:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
6970:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
6971:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
6972:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6973:src/vm3.c     **** PC  =  nPC;
6974:src/vm3.c     **** nPC  += 4;
6975:src/vm3.c     **** 
6976:src/vm3.c     **** #if INDIRECT_DEBUG
6977:src/vm3.c     **** printf("%d|addiu\n",counter);
6978:src/vm3.c     **** counter++;
6979:src/vm3.c     **** #endif
6980:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
6981:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
6982:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
6983:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
6984:src/vm3.c     **** PC  =  nPC;
6985:src/vm3.c     **** nPC  += 4;
6986:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
6987:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
6988:src/vm3.c     ****   if (op0 == 0x0) {
6989:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
6990:src/vm3.c     ****     op0 = op0 + funct;
6991:src/vm3.c     ****   }
6992:src/vm3.c     ****     else {
6993:src/vm3.c     ****     op0 = op0 + FIX_OP;
6994:src/vm3.c     ****   }
6995:src/vm3.c     **** 
6996:src/vm3.c     **** p = array;
6997:src/vm3.c     **** p = p[op0].next_level;
6998:src/vm3.c     **** 
6999:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7000:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7001:src/vm3.c     ****   if (op1 == 0x0) {
7002:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7003:src/vm3.c     ****     op1 = op1 + funct;
7004:src/vm3.c     ****   }
7005:src/vm3.c     ****     else {
7006:src/vm3.c     ****     op1 = op1 + FIX_OP;
7007:src/vm3.c     ****   }
7008:src/vm3.c     **** 
7009:src/vm3.c     **** goto *p[op1].code;
7010:src/vm3.c     **** 
7011:src/vm3.c     **** 
7012:src/vm3.c     **** blezPLUSaddiu:
7013:src/vm3.c     **** #if INDIRECT_DEBUG
7014:src/vm3.c     **** printf("%d|blez\n",counter);
7015:src/vm3.c     **** counter++;
7016:src/vm3.c     **** #endif
7017:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 399


7018:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
7019:src/vm3.c     **** {
7020:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
7021:src/vm3.c     ****   PC  =  nPC;
7022:src/vm3.c     ****   nPC  += (immediate << 2);
7023:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
7024:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7025:src/vm3.c     ****   if (op0 == 0x0) {
7026:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7027:src/vm3.c     ****     op0 = op0 + funct;
7028:src/vm3.c     ****   }
7029:src/vm3.c     ****     else {
7030:src/vm3.c     ****     op0 = op0 + FIX_OP;
7031:src/vm3.c     ****   }
7032:src/vm3.c     **** 
7033:src/vm3.c     **** p = array;
7034:src/vm3.c     **** p = p[op0].next_level;
7035:src/vm3.c     **** 
7036:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7037:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7038:src/vm3.c     ****   if (op1 == 0x0) {
7039:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7040:src/vm3.c     ****     op1 = op1 + funct;
7041:src/vm3.c     ****   }
7042:src/vm3.c     ****     else {
7043:src/vm3.c     ****     op1 = op1 + FIX_OP;
7044:src/vm3.c     ****   }
7045:src/vm3.c     **** 
7046:src/vm3.c     **** goto *p[op1].code;
7047:src/vm3.c     **** 
7048:src/vm3.c     **** 
7049:src/vm3.c     **** }
7050:src/vm3.c     **** else
7051:src/vm3.c     **** {
7052:src/vm3.c     ****   PC  =  nPC;
7053:src/vm3.c     ****   nPC  += 4;
7054:src/vm3.c     **** }
7055:src/vm3.c     **** 
7056:src/vm3.c     **** #if INDIRECT_DEBUG
7057:src/vm3.c     **** printf("%d|addiu\n",counter);
7058:src/vm3.c     **** counter++;
7059:src/vm3.c     **** #endif
7060:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7061:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7062:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7063:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
7064:src/vm3.c     **** PC  =  nPC;
7065:src/vm3.c     **** nPC  += 4;
7066:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7067:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7068:src/vm3.c     ****   if (op0 == 0x0) {
7069:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7070:src/vm3.c     ****     op0 = op0 + funct;
7071:src/vm3.c     ****   }
7072:src/vm3.c     ****     else {
7073:src/vm3.c     ****     op0 = op0 + FIX_OP;
7074:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 400


7075:src/vm3.c     **** 
7076:src/vm3.c     **** p = array;
7077:src/vm3.c     **** p = p[op0].next_level;
7078:src/vm3.c     **** 
7079:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7080:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7081:src/vm3.c     ****   if (op1 == 0x0) {
7082:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7083:src/vm3.c     ****     op1 = op1 + funct;
7084:src/vm3.c     ****   }
7085:src/vm3.c     ****     else {
7086:src/vm3.c     ****     op1 = op1 + FIX_OP;
7087:src/vm3.c     ****   }
7088:src/vm3.c     **** 
7089:src/vm3.c     **** goto *p[op1].code;
7090:src/vm3.c     **** 
7091:src/vm3.c     **** 
7092:src/vm3.c     **** jrPLUSor:
7093:src/vm3.c     **** #if INDIRECT_DEBUG
7094:src/vm3.c     **** printf("%d|jr\n",counter);
7095:src/vm3.c     **** counter++;
7096:src/vm3.c     **** #endif
7097:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7098:src/vm3.c     **** PC = nPC;
7099:src/vm3.c     **** nPC = RF[rs];
7100:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7101:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7102:src/vm3.c     ****   if (op0 == 0x0) {
7103:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7104:src/vm3.c     ****     op0 = op0 + funct;
7105:src/vm3.c     ****   }
7106:src/vm3.c     ****     else {
7107:src/vm3.c     ****     op0 = op0 + FIX_OP;
7108:src/vm3.c     ****   }
7109:src/vm3.c     **** 
7110:src/vm3.c     **** p = array;
7111:src/vm3.c     **** p = p[op0].next_level;
7112:src/vm3.c     **** 
7113:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7114:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7115:src/vm3.c     ****   if (op1 == 0x0) {
7116:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7117:src/vm3.c     ****     op1 = op1 + funct;
7118:src/vm3.c     ****   }
7119:src/vm3.c     ****     else {
7120:src/vm3.c     ****     op1 = op1 + FIX_OP;
7121:src/vm3.c     ****   }
7122:src/vm3.c     **** 
7123:src/vm3.c     **** goto *p[op1].code;
7124:src/vm3.c     **** 
7125:src/vm3.c     **** 
7126:src/vm3.c     **** 
7127:src/vm3.c     **** #if INDIRECT_DEBUG
7128:src/vm3.c     **** printf("%d|or\n",counter);
7129:src/vm3.c     **** counter++;
7130:src/vm3.c     **** #endif
7131:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 401


7132:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7133:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
7134:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
7135:src/vm3.c     **** PC  =  nPC;
7136:src/vm3.c     **** nPC  += 4;
7137:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7138:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7139:src/vm3.c     ****   if (op0 == 0x0) {
7140:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7141:src/vm3.c     ****     op0 = op0 + funct;
7142:src/vm3.c     ****   }
7143:src/vm3.c     ****     else {
7144:src/vm3.c     ****     op0 = op0 + FIX_OP;
7145:src/vm3.c     ****   }
7146:src/vm3.c     **** 
7147:src/vm3.c     **** p = array;
7148:src/vm3.c     **** p = p[op0].next_level;
7149:src/vm3.c     **** 
7150:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7151:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7152:src/vm3.c     ****   if (op1 == 0x0) {
7153:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7154:src/vm3.c     ****     op1 = op1 + funct;
7155:src/vm3.c     ****   }
7156:src/vm3.c     ****     else {
7157:src/vm3.c     ****     op1 = op1 + FIX_OP;
7158:src/vm3.c     ****   }
7159:src/vm3.c     **** 
7160:src/vm3.c     **** goto *p[op1].code;
7161:src/vm3.c     **** 
7162:src/vm3.c     **** 
7163:src/vm3.c     **** subuPLUSsw:
7164:src/vm3.c     **** #if INDIRECT_DEBUG
7165:src/vm3.c     **** printf("%d|subu\n",counter);
7166:src/vm3.c     **** counter++;
7167:src/vm3.c     **** #endif
7168:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7169:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7170:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7171:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
7172:src/vm3.c     **** PC  =  nPC;
7173:src/vm3.c     **** nPC  += 4;
7174:src/vm3.c     **** 
7175:src/vm3.c     **** #if INDIRECT_DEBUG
7176:src/vm3.c     **** printf("%d|sw\n",counter);
7177:src/vm3.c     **** counter++;
7178:src/vm3.c     **** #endif
7179:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7180:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7181:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7182:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
7183:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
7184:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
7185:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
7186:src/vm3.c     **** PC  =  nPC;
7187:src/vm3.c     **** nPC  += 4;
7188:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 402


7189:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7190:src/vm3.c     ****   if (op0 == 0x0) {
7191:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7192:src/vm3.c     ****     op0 = op0 + funct;
7193:src/vm3.c     ****   }
7194:src/vm3.c     ****     else {
7195:src/vm3.c     ****     op0 = op0 + FIX_OP;
7196:src/vm3.c     ****   }
7197:src/vm3.c     **** 
7198:src/vm3.c     **** p = array;
7199:src/vm3.c     **** p = p[op0].next_level;
7200:src/vm3.c     **** 
7201:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7202:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7203:src/vm3.c     ****   if (op1 == 0x0) {
7204:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7205:src/vm3.c     ****     op1 = op1 + funct;
7206:src/vm3.c     ****   }
7207:src/vm3.c     ****     else {
7208:src/vm3.c     ****     op1 = op1 + FIX_OP;
7209:src/vm3.c     ****   }
7210:src/vm3.c     **** 
7211:src/vm3.c     **** goto *p[op1].code;
7212:src/vm3.c     **** 
7213:src/vm3.c     **** 
7214:src/vm3.c     **** bnePLUSsw:
7215:src/vm3.c     **** #if INDIRECT_DEBUG
7216:src/vm3.c     **** printf("%d|bne\n",counter);
7217:src/vm3.c     **** counter++;
7218:src/vm3.c     **** #endif
7219:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7220:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7221:src/vm3.c     **** if (RF[rs] != RF[rt])
7222:src/vm3.c     **** {
7223:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
7224:src/vm3.c     ****   PC  =  nPC;
7225:src/vm3.c     ****   nPC  += (immediate << 2);
7226:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
7227:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7228:src/vm3.c     ****   if (op0 == 0x0) {
7229:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7230:src/vm3.c     ****     op0 = op0 + funct;
7231:src/vm3.c     ****   }
7232:src/vm3.c     ****     else {
7233:src/vm3.c     ****     op0 = op0 + FIX_OP;
7234:src/vm3.c     ****   }
7235:src/vm3.c     **** 
7236:src/vm3.c     **** p = array;
7237:src/vm3.c     **** p = p[op0].next_level;
7238:src/vm3.c     **** 
7239:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7240:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7241:src/vm3.c     ****   if (op1 == 0x0) {
7242:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7243:src/vm3.c     ****     op1 = op1 + funct;
7244:src/vm3.c     ****   }
7245:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 403


7246:src/vm3.c     ****     op1 = op1 + FIX_OP;
7247:src/vm3.c     ****   }
7248:src/vm3.c     **** 
7249:src/vm3.c     **** goto *p[op1].code;
7250:src/vm3.c     **** 
7251:src/vm3.c     **** 
7252:src/vm3.c     **** }
7253:src/vm3.c     **** else
7254:src/vm3.c     **** {
7255:src/vm3.c     ****   PC  =  nPC;
7256:src/vm3.c     ****   nPC  += 4;
7257:src/vm3.c     **** }
7258:src/vm3.c     **** 
7259:src/vm3.c     **** #if INDIRECT_DEBUG
7260:src/vm3.c     **** printf("%d|sw\n",counter);
7261:src/vm3.c     **** counter++;
7262:src/vm3.c     **** #endif
7263:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7264:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7265:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7266:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
7267:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
7268:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
7269:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
7270:src/vm3.c     **** PC  =  nPC;
7271:src/vm3.c     **** nPC  += 4;
7272:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7273:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7274:src/vm3.c     ****   if (op0 == 0x0) {
7275:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7276:src/vm3.c     ****     op0 = op0 + funct;
7277:src/vm3.c     ****   }
7278:src/vm3.c     ****     else {
7279:src/vm3.c     ****     op0 = op0 + FIX_OP;
7280:src/vm3.c     ****   }
7281:src/vm3.c     **** 
7282:src/vm3.c     **** p = array;
7283:src/vm3.c     **** p = p[op0].next_level;
7284:src/vm3.c     **** 
7285:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7286:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7287:src/vm3.c     ****   if (op1 == 0x0) {
7288:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7289:src/vm3.c     ****     op1 = op1 + funct;
7290:src/vm3.c     ****   }
7291:src/vm3.c     ****     else {
7292:src/vm3.c     ****     op1 = op1 + FIX_OP;
7293:src/vm3.c     ****   }
7294:src/vm3.c     **** 
7295:src/vm3.c     **** goto *p[op1].code;
7296:src/vm3.c     **** 
7297:src/vm3.c     **** 
7298:src/vm3.c     **** addiuPLUSjr:
7299:src/vm3.c     **** #if INDIRECT_DEBUG
7300:src/vm3.c     **** printf("%d|addiu\n",counter);
7301:src/vm3.c     **** counter++;
7302:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 404


7303:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7304:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7305:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
7306:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
7307:src/vm3.c     **** PC  =  nPC;
7308:src/vm3.c     **** nPC  += 4;
7309:src/vm3.c     **** 
7310:src/vm3.c     **** #if INDIRECT_DEBUG
7311:src/vm3.c     **** printf("%d|jr\n",counter);
7312:src/vm3.c     **** counter++;
7313:src/vm3.c     **** #endif
7314:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7315:src/vm3.c     **** PC = nPC;
7316:src/vm3.c     **** nPC = RF[rs];
7317:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7318:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7319:src/vm3.c     ****   if (op0 == 0x0) {
7320:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7321:src/vm3.c     ****     op0 = op0 + funct;
7322:src/vm3.c     ****   }
7323:src/vm3.c     ****     else {
7324:src/vm3.c     ****     op0 = op0 + FIX_OP;
7325:src/vm3.c     ****   }
7326:src/vm3.c     **** 
7327:src/vm3.c     **** p = array;
7328:src/vm3.c     **** p = p[op0].next_level;
7329:src/vm3.c     **** 
7330:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7331:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7332:src/vm3.c     ****   if (op1 == 0x0) {
7333:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7334:src/vm3.c     ****     op1 = op1 + funct;
7335:src/vm3.c     ****   }
7336:src/vm3.c     ****     else {
7337:src/vm3.c     ****     op1 = op1 + FIX_OP;
7338:src/vm3.c     ****   }
7339:src/vm3.c     **** 
7340:src/vm3.c     **** goto *p[op1].code;
7341:src/vm3.c     **** 
7342:src/vm3.c     **** 
7343:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7344:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7345:src/vm3.c     ****   if (op0 == 0x0) {
7346:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7347:src/vm3.c     ****     op0 = op0 + funct;
7348:src/vm3.c     ****   }
7349:src/vm3.c     ****     else {
7350:src/vm3.c     ****     op0 = op0 + FIX_OP;
7351:src/vm3.c     ****   }
7352:src/vm3.c     **** 
7353:src/vm3.c     **** p = array;
7354:src/vm3.c     **** p = p[op0].next_level;
7355:src/vm3.c     **** 
7356:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7357:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7358:src/vm3.c     ****   if (op1 == 0x0) {
7359:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 405


7360:src/vm3.c     ****     op1 = op1 + funct;
7361:src/vm3.c     ****   }
7362:src/vm3.c     ****     else {
7363:src/vm3.c     ****     op1 = op1 + FIX_OP;
7364:src/vm3.c     ****   }
7365:src/vm3.c     **** 
7366:src/vm3.c     **** goto *p[op1].code;
7367:src/vm3.c     **** 
7368:src/vm3.c     **** 
7369:src/vm3.c     **** lwPLUSjr:
7370:src/vm3.c     **** #if INDIRECT_DEBUG
7371:src/vm3.c     **** printf("%d|lw\n",counter);
7372:src/vm3.c     **** counter++;
7373:src/vm3.c     **** #endif
7374:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7375:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7376:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
7377:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
7378:src/vm3.c     **** PC  =  nPC;
7379:src/vm3.c     **** nPC  += 4;
7380:src/vm3.c     **** 
7381:src/vm3.c     **** #if INDIRECT_DEBUG
7382:src/vm3.c     **** printf("%d|jr\n",counter);
7383:src/vm3.c     **** counter++;
7384:src/vm3.c     **** #endif
7385:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7386:src/vm3.c     **** PC = nPC;
7387:src/vm3.c     **** nPC = RF[rs];
7388:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7389:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7390:src/vm3.c     ****   if (op0 == 0x0) {
7391:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7392:src/vm3.c     ****     op0 = op0 + funct;
7393:src/vm3.c     ****   }
7394:src/vm3.c     ****     else {
7395:src/vm3.c     ****     op0 = op0 + FIX_OP;
7396:src/vm3.c     ****   }
7397:src/vm3.c     **** 
7398:src/vm3.c     **** p = array;
7399:src/vm3.c     **** p = p[op0].next_level;
7400:src/vm3.c     **** 
7401:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7403:src/vm3.c     ****   if (op1 == 0x0) {
7404:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7405:src/vm3.c     ****     op1 = op1 + funct;
7406:src/vm3.c     ****   }
7407:src/vm3.c     ****     else {
7408:src/vm3.c     ****     op1 = op1 + FIX_OP;
7409:src/vm3.c     ****   }
7410:src/vm3.c     **** 
7411:src/vm3.c     **** goto *p[op1].code;
7412:src/vm3.c     **** 
7413:src/vm3.c     **** 
7414:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7415:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7416:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 406


7417:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7418:src/vm3.c     ****     op0 = op0 + funct;
7419:src/vm3.c     ****   }
7420:src/vm3.c     ****     else {
7421:src/vm3.c     ****     op0 = op0 + FIX_OP;
7422:src/vm3.c     ****   }
7423:src/vm3.c     **** 
7424:src/vm3.c     **** p = array;
7425:src/vm3.c     **** p = p[op0].next_level;
7426:src/vm3.c     **** 
7427:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7428:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7429:src/vm3.c     ****   if (op1 == 0x0) {
7430:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7431:src/vm3.c     ****     op1 = op1 + funct;
7432:src/vm3.c     ****   }
7433:src/vm3.c     ****     else {
7434:src/vm3.c     ****     op1 = op1 + FIX_OP;
7435:src/vm3.c     ****   }
7436:src/vm3.c     **** 
7437:src/vm3.c     **** goto *p[op1].code;
7438:src/vm3.c     **** 
7439:src/vm3.c     **** 
7440:src/vm3.c     **** jalPLUSaddu:
7441:src/vm3.c     **** #if INDIRECT_DEBUG
7442:src/vm3.c     **** printf("%d|jal\n",counter);
7443:src/vm3.c     **** counter++;
7444:src/vm3.c     **** #endif
7445:src/vm3.c     **** RF[31] = PC + 8;
7446:src/vm3.c     **** PC = nPC;
7447:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
7448:src/vm3.c     **** nPC = address << 2;
7449:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7450:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7451:src/vm3.c     ****   if (op0 == 0x0) {
7452:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7453:src/vm3.c     ****     op0 = op0 + funct;
7454:src/vm3.c     ****   }
7455:src/vm3.c     ****     else {
7456:src/vm3.c     ****     op0 = op0 + FIX_OP;
7457:src/vm3.c     ****   }
7458:src/vm3.c     **** 
7459:src/vm3.c     **** p = array;
7460:src/vm3.c     **** p = p[op0].next_level;
7461:src/vm3.c     **** 
7462:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7463:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7464:src/vm3.c     ****   if (op1 == 0x0) {
7465:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7466:src/vm3.c     ****     op1 = op1 + funct;
7467:src/vm3.c     ****   }
7468:src/vm3.c     ****     else {
7469:src/vm3.c     ****     op1 = op1 + FIX_OP;
7470:src/vm3.c     ****   }
7471:src/vm3.c     **** 
7472:src/vm3.c     **** goto *p[op1].code;
7473:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 407


7474:src/vm3.c     **** 
7475:src/vm3.c     **** 
7476:src/vm3.c     **** #if INDIRECT_DEBUG
7477:src/vm3.c     **** printf("%d|addu\n",counter);
7478:src/vm3.c     **** counter++;
7479:src/vm3.c     **** #endif
7480:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7481:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7482:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
7483:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
7484:src/vm3.c     **** PC  =  nPC;
7485:src/vm3.c     **** nPC  += 4;
7486:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7487:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7488:src/vm3.c     ****   if (op0 == 0x0) {
7489:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7490:src/vm3.c     ****     op0 = op0 + funct;
7491:src/vm3.c     ****   }
7492:src/vm3.c     ****     else {
7493:src/vm3.c     ****     op0 = op0 + FIX_OP;
7494:src/vm3.c     ****   }
7495:src/vm3.c     **** 
7496:src/vm3.c     **** p = array;
7497:src/vm3.c     **** p = p[op0].next_level;
7498:src/vm3.c     **** 
7499:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7500:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7501:src/vm3.c     ****   if (op1 == 0x0) {
7502:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7503:src/vm3.c     ****     op1 = op1 + funct;
7504:src/vm3.c     ****   }
7505:src/vm3.c     ****     else {
7506:src/vm3.c     ****     op1 = op1 + FIX_OP;
7507:src/vm3.c     ****   }
7508:src/vm3.c     **** 
7509:src/vm3.c     **** goto *p[op1].code;
7510:src/vm3.c     **** 
7511:src/vm3.c     **** 
7512:src/vm3.c     **** adduPLUSslt:
7513:src/vm3.c     **** #if INDIRECT_DEBUG
7514:src/vm3.c     **** printf("%d|addu\n",counter);
7515:src/vm3.c     **** counter++;
7516:src/vm3.c     **** #endif
7517:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7518:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7519:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7520:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
7521:src/vm3.c     **** PC  =  nPC;
7522:src/vm3.c     **** nPC  += 4;
7523:src/vm3.c     **** 
7524:src/vm3.c     **** #if INDIRECT_DEBUG
7525:src/vm3.c     **** printf("%d|slt\n",counter);
7526:src/vm3.c     **** counter++;
7527:src/vm3.c     **** #endif
7528:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7529:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7530:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 408


7531:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
7532:src/vm3.c     **** PC  =  nPC;
7533:src/vm3.c     **** nPC  += 4;
7534:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7535:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7536:src/vm3.c     ****   if (op0 == 0x0) {
7537:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7538:src/vm3.c     ****     op0 = op0 + funct;
7539:src/vm3.c     ****   }
7540:src/vm3.c     ****     else {
7541:src/vm3.c     ****     op0 = op0 + FIX_OP;
7542:src/vm3.c     ****   }
7543:src/vm3.c     **** 
7544:src/vm3.c     **** p = array;
7545:src/vm3.c     **** p = p[op0].next_level;
7546:src/vm3.c     **** 
7547:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7548:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7549:src/vm3.c     ****   if (op1 == 0x0) {
7550:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7551:src/vm3.c     ****     op1 = op1 + funct;
7552:src/vm3.c     ****   }
7553:src/vm3.c     ****     else {
7554:src/vm3.c     ****     op1 = op1 + FIX_OP;
7555:src/vm3.c     ****   }
7556:src/vm3.c     **** 
7557:src/vm3.c     **** goto *p[op1].code;
7558:src/vm3.c     **** 
7559:src/vm3.c     **** 
7560:src/vm3.c     **** lwPLUSaddiu:
7561:src/vm3.c     **** #if INDIRECT_DEBUG
7562:src/vm3.c     **** printf("%d|lw\n",counter);
7563:src/vm3.c     **** counter++;
7564:src/vm3.c     **** #endif
7565:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7566:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7567:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
7568:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
7569:src/vm3.c     **** PC  =  nPC;
7570:src/vm3.c     **** nPC  += 4;
7571:src/vm3.c     **** 
7572:src/vm3.c     **** #if INDIRECT_DEBUG
7573:src/vm3.c     **** printf("%d|addiu\n",counter);
7574:src/vm3.c     **** counter++;
7575:src/vm3.c     **** #endif
7576:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7577:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7578:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7579:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
7580:src/vm3.c     **** PC  =  nPC;
7581:src/vm3.c     **** nPC  += 4;
7582:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7583:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7584:src/vm3.c     ****   if (op0 == 0x0) {
7585:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7586:src/vm3.c     ****     op0 = op0 + funct;
7587:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 409


7588:src/vm3.c     ****     else {
7589:src/vm3.c     ****     op0 = op0 + FIX_OP;
7590:src/vm3.c     ****   }
7591:src/vm3.c     **** 
7592:src/vm3.c     **** p = array;
7593:src/vm3.c     **** p = p[op0].next_level;
7594:src/vm3.c     **** 
7595:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7596:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7597:src/vm3.c     ****   if (op1 == 0x0) {
7598:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7599:src/vm3.c     ****     op1 = op1 + funct;
7600:src/vm3.c     ****   }
7601:src/vm3.c     ****     else {
7602:src/vm3.c     ****     op1 = op1 + FIX_OP;
7603:src/vm3.c     ****   }
7604:src/vm3.c     **** 
7605:src/vm3.c     **** goto *p[op1].code;
7606:src/vm3.c     **** 
7607:src/vm3.c     **** 
7608:src/vm3.c     **** swPLUSsll:
7609:src/vm3.c     **** #if INDIRECT_DEBUG
7610:src/vm3.c     **** printf("%d|sw\n",counter);
7611:src/vm3.c     **** counter++;
7612:src/vm3.c     **** #endif
7613:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7614:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7615:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
7616:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
7617:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
7618:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
7619:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
7620:src/vm3.c     **** PC  =  nPC;
7621:src/vm3.c     **** nPC  += 4;
7622:src/vm3.c     **** 
7623:src/vm3.c     **** #if INDIRECT_DEBUG
7624:src/vm3.c     **** printf("%d|sll\n",counter);
7625:src/vm3.c     **** counter++;
7626:src/vm3.c     **** #endif
7627:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
7628:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7629:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
7630:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
7631:src/vm3.c     **** PC  =  nPC;
7632:src/vm3.c     **** nPC  += 4;
7633:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7634:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7635:src/vm3.c     ****   if (op0 == 0x0) {
7636:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7637:src/vm3.c     ****     op0 = op0 + funct;
7638:src/vm3.c     ****   }
7639:src/vm3.c     ****     else {
7640:src/vm3.c     ****     op0 = op0 + FIX_OP;
7641:src/vm3.c     ****   }
7642:src/vm3.c     **** 
7643:src/vm3.c     **** p = array;
7644:src/vm3.c     **** p = p[op0].next_level;
GAS LISTING /tmp/cc15eBE3.s 			page 410


7645:src/vm3.c     **** 
7646:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7647:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7648:src/vm3.c     ****   if (op1 == 0x0) {
7649:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7650:src/vm3.c     ****     op1 = op1 + funct;
7651:src/vm3.c     ****   }
7652:src/vm3.c     ****     else {
7653:src/vm3.c     ****     op1 = op1 + FIX_OP;
7654:src/vm3.c     ****   }
7655:src/vm3.c     **** 
7656:src/vm3.c     **** goto *p[op1].code;
7657:src/vm3.c     **** 
7658:src/vm3.c     **** 
7659:src/vm3.c     **** sllPLUSori:
7660:src/vm3.c     **** #if INDIRECT_DEBUG
7661:src/vm3.c     **** printf("%d|sll\n",counter);
7662:src/vm3.c     **** counter++;
7663:src/vm3.c     **** #endif
7664:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
7665:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7666:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7667:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
7668:src/vm3.c     **** PC  =  nPC;
7669:src/vm3.c     **** nPC  += 4;
7670:src/vm3.c     **** 
7671:src/vm3.c     **** #if INDIRECT_DEBUG
7672:src/vm3.c     **** printf("%d|ori\n",counter);
7673:src/vm3.c     **** counter++;
7674:src/vm3.c     **** #endif
7675:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7676:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7677:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7678:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
7679:src/vm3.c     **** PC  =  nPC;
7680:src/vm3.c     **** nPC  += 4;
7681:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7682:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7683:src/vm3.c     ****   if (op0 == 0x0) {
7684:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7685:src/vm3.c     ****     op0 = op0 + funct;
7686:src/vm3.c     ****   }
7687:src/vm3.c     ****     else {
7688:src/vm3.c     ****     op0 = op0 + FIX_OP;
7689:src/vm3.c     ****   }
7690:src/vm3.c     **** 
7691:src/vm3.c     **** p = array;
7692:src/vm3.c     **** p = p[op0].next_level;
7693:src/vm3.c     **** 
7694:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7695:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7696:src/vm3.c     ****   if (op1 == 0x0) {
7697:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7698:src/vm3.c     ****     op1 = op1 + funct;
7699:src/vm3.c     ****   }
7700:src/vm3.c     ****     else {
7701:src/vm3.c     ****     op1 = op1 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 411


7702:src/vm3.c     ****   }
7703:src/vm3.c     **** 
7704:src/vm3.c     **** goto *p[op1].code;
7705:src/vm3.c     **** 
7706:src/vm3.c     **** 
7707:src/vm3.c     **** adduPLUSsw:
7708:src/vm3.c     **** #if INDIRECT_DEBUG
7709:src/vm3.c     **** printf("%d|addu\n",counter);
7710:src/vm3.c     **** counter++;
7711:src/vm3.c     **** #endif
7712:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7713:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7714:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7715:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
7716:src/vm3.c     **** PC  =  nPC;
7717:src/vm3.c     **** nPC  += 4;
7718:src/vm3.c     **** 
7719:src/vm3.c     **** #if INDIRECT_DEBUG
7720:src/vm3.c     **** printf("%d|sw\n",counter);
7721:src/vm3.c     **** counter++;
7722:src/vm3.c     **** #endif
7723:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7724:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7725:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7726:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
7727:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
7728:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
7729:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
7730:src/vm3.c     **** PC  =  nPC;
7731:src/vm3.c     **** nPC  += 4;
7732:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7733:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7734:src/vm3.c     ****   if (op0 == 0x0) {
7735:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7736:src/vm3.c     ****     op0 = op0 + funct;
7737:src/vm3.c     ****   }
7738:src/vm3.c     ****     else {
7739:src/vm3.c     ****     op0 = op0 + FIX_OP;
7740:src/vm3.c     ****   }
7741:src/vm3.c     **** 
7742:src/vm3.c     **** p = array;
7743:src/vm3.c     **** p = p[op0].next_level;
7744:src/vm3.c     **** 
7745:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7746:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7747:src/vm3.c     ****   if (op1 == 0x0) {
7748:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7749:src/vm3.c     ****     op1 = op1 + funct;
7750:src/vm3.c     ****   }
7751:src/vm3.c     ****     else {
7752:src/vm3.c     ****     op1 = op1 + FIX_OP;
7753:src/vm3.c     ****   }
7754:src/vm3.c     **** 
7755:src/vm3.c     **** goto *p[op1].code;
7756:src/vm3.c     **** 
7757:src/vm3.c     **** 
7758:src/vm3.c     **** addiuPLUSlw:
GAS LISTING /tmp/cc15eBE3.s 			page 412


7759:src/vm3.c     **** #if INDIRECT_DEBUG
7760:src/vm3.c     **** printf("%d|addiu\n",counter);
7761:src/vm3.c     **** counter++;
7762:src/vm3.c     **** #endif
7763:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7764:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7765:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
7766:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
7767:src/vm3.c     **** PC  =  nPC;
7768:src/vm3.c     **** nPC  += 4;
7769:src/vm3.c     **** 
7770:src/vm3.c     **** #if INDIRECT_DEBUG
7771:src/vm3.c     **** printf("%d|lw\n",counter);
7772:src/vm3.c     **** counter++;
7773:src/vm3.c     **** #endif
7774:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7775:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7776:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
7777:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
7778:src/vm3.c     **** PC  =  nPC;
7779:src/vm3.c     **** nPC  += 4;
7780:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7781:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7782:src/vm3.c     ****   if (op0 == 0x0) {
7783:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7784:src/vm3.c     ****     op0 = op0 + funct;
7785:src/vm3.c     ****   }
7786:src/vm3.c     ****     else {
7787:src/vm3.c     ****     op0 = op0 + FIX_OP;
7788:src/vm3.c     ****   }
7789:src/vm3.c     **** 
7790:src/vm3.c     **** p = array;
7791:src/vm3.c     **** p = p[op0].next_level;
7792:src/vm3.c     **** 
7793:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7794:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7795:src/vm3.c     ****   if (op1 == 0x0) {
7796:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7797:src/vm3.c     ****     op1 = op1 + funct;
7798:src/vm3.c     ****   }
7799:src/vm3.c     ****     else {
7800:src/vm3.c     ****     op1 = op1 + FIX_OP;
7801:src/vm3.c     ****   }
7802:src/vm3.c     **** 
7803:src/vm3.c     **** goto *p[op1].code;
7804:src/vm3.c     **** 
7805:src/vm3.c     **** 
7806:src/vm3.c     **** sllPLUSsll:
7807:src/vm3.c     **** #if INDIRECT_DEBUG
7808:src/vm3.c     **** printf("%d|sll\n",counter);
7809:src/vm3.c     **** counter++;
7810:src/vm3.c     **** #endif
7811:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
7812:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7813:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7814:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
7815:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 413


7816:src/vm3.c     **** nPC  += 4;
7817:src/vm3.c     **** 
7818:src/vm3.c     **** #if INDIRECT_DEBUG
7819:src/vm3.c     **** printf("%d|sll\n",counter);
7820:src/vm3.c     **** counter++;
7821:src/vm3.c     **** #endif
7822:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
7823:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7824:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
7825:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
7826:src/vm3.c     **** PC  =  nPC;
7827:src/vm3.c     **** nPC  += 4;
7828:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7829:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7830:src/vm3.c     ****   if (op0 == 0x0) {
7831:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7832:src/vm3.c     ****     op0 = op0 + funct;
7833:src/vm3.c     ****   }
7834:src/vm3.c     ****     else {
7835:src/vm3.c     ****     op0 = op0 + FIX_OP;
7836:src/vm3.c     ****   }
7837:src/vm3.c     **** 
7838:src/vm3.c     **** p = array;
7839:src/vm3.c     **** p = p[op0].next_level;
7840:src/vm3.c     **** 
7841:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7842:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7843:src/vm3.c     ****   if (op1 == 0x0) {
7844:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7845:src/vm3.c     ****     op1 = op1 + funct;
7846:src/vm3.c     ****   }
7847:src/vm3.c     ****     else {
7848:src/vm3.c     ****     op1 = op1 + FIX_OP;
7849:src/vm3.c     ****   }
7850:src/vm3.c     **** 
7851:src/vm3.c     **** goto *p[op1].code;
7852:src/vm3.c     **** 
7853:src/vm3.c     **** 
7854:src/vm3.c     **** errorPLUSaddu:
7855:src/vm3.c     **** #if INDIRECT_DEBUG
7856:src/vm3.c     **** printf("Error, unknown instr0uction %d.\n", instr0);
7857:src/vm3.c     **** #endif
7858:src/vm3.c     **** PC  =  nPC;
7859:src/vm3.c     **** nPC  += 4;
7860:src/vm3.c     **** 
7861:src/vm3.c     **** #if INDIRECT_DEBUG
7862:src/vm3.c     **** printf("%d|addu\n",counter);
7863:src/vm3.c     **** counter++;
7864:src/vm3.c     **** #endif
7865:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7866:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
7867:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
7868:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
7869:src/vm3.c     **** PC  =  nPC;
7870:src/vm3.c     **** nPC  += 4;
7871:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7872:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 414


7873:src/vm3.c     ****   if (op0 == 0x0) {
7874:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7875:src/vm3.c     ****     op0 = op0 + funct;
7876:src/vm3.c     ****   }
7877:src/vm3.c     ****     else {
7878:src/vm3.c     ****     op0 = op0 + FIX_OP;
7879:src/vm3.c     ****   }
7880:src/vm3.c     **** 
7881:src/vm3.c     **** p = array;
7882:src/vm3.c     **** p = p[op0].next_level;
7883:src/vm3.c     **** 
7884:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7885:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7886:src/vm3.c     ****   if (op1 == 0x0) {
7887:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7888:src/vm3.c     ****     op1 = op1 + funct;
7889:src/vm3.c     ****   }
7890:src/vm3.c     ****     else {
7891:src/vm3.c     ****     op1 = op1 + FIX_OP;
7892:src/vm3.c     ****   }
7893:src/vm3.c     **** 
7894:src/vm3.c     **** goto *p[op1].code;
7895:src/vm3.c     **** 
7896:src/vm3.c     **** 
7897:src/vm3.c     **** adduPLUSjal:
7898:src/vm3.c     **** #if INDIRECT_DEBUG
7899:src/vm3.c     **** printf("%d|addu\n",counter);
7900:src/vm3.c     **** counter++;
7901:src/vm3.c     **** #endif
7902:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
7903:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7904:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7905:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
7906:src/vm3.c     **** PC  =  nPC;
7907:src/vm3.c     **** nPC  += 4;
7908:src/vm3.c     **** 
7909:src/vm3.c     **** #if INDIRECT_DEBUG
7910:src/vm3.c     **** printf("%d|jal\n",counter);
7911:src/vm3.c     **** counter++;
7912:src/vm3.c     **** #endif
7913:src/vm3.c     **** RF[31] = PC + 8;
7914:src/vm3.c     **** PC = nPC;
7915:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
7916:src/vm3.c     **** nPC = address << 2;
7917:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7918:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7919:src/vm3.c     ****   if (op0 == 0x0) {
7920:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7921:src/vm3.c     ****     op0 = op0 + funct;
7922:src/vm3.c     ****   }
7923:src/vm3.c     ****     else {
7924:src/vm3.c     ****     op0 = op0 + FIX_OP;
7925:src/vm3.c     ****   }
7926:src/vm3.c     **** 
7927:src/vm3.c     **** p = array;
7928:src/vm3.c     **** p = p[op0].next_level;
7929:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 415


7930:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7931:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7932:src/vm3.c     ****   if (op1 == 0x0) {
7933:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7934:src/vm3.c     ****     op1 = op1 + funct;
7935:src/vm3.c     ****   }
7936:src/vm3.c     ****     else {
7937:src/vm3.c     ****     op1 = op1 + FIX_OP;
7938:src/vm3.c     ****   }
7939:src/vm3.c     **** 
7940:src/vm3.c     **** goto *p[op1].code;
7941:src/vm3.c     **** 
7942:src/vm3.c     **** 
7943:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7944:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7945:src/vm3.c     ****   if (op0 == 0x0) {
7946:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7947:src/vm3.c     ****     op0 = op0 + funct;
7948:src/vm3.c     ****   }
7949:src/vm3.c     ****     else {
7950:src/vm3.c     ****     op0 = op0 + FIX_OP;
7951:src/vm3.c     ****   }
7952:src/vm3.c     **** 
7953:src/vm3.c     **** p = array;
7954:src/vm3.c     **** p = p[op0].next_level;
7955:src/vm3.c     **** 
7956:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
7957:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
7958:src/vm3.c     ****   if (op1 == 0x0) {
7959:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
7960:src/vm3.c     ****     op1 = op1 + funct;
7961:src/vm3.c     ****   }
7962:src/vm3.c     ****     else {
7963:src/vm3.c     ****     op1 = op1 + FIX_OP;
7964:src/vm3.c     ****   }
7965:src/vm3.c     **** 
7966:src/vm3.c     **** goto *p[op1].code;
7967:src/vm3.c     **** 
7968:src/vm3.c     **** 
7969:src/vm3.c     **** sllPLUSxor:
7970:src/vm3.c     **** #if INDIRECT_DEBUG
7971:src/vm3.c     **** printf("%d|sll\n",counter);
7972:src/vm3.c     **** counter++;
7973:src/vm3.c     **** #endif
7974:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
7975:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
7976:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
7977:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
7978:src/vm3.c     **** PC  =  nPC;
7979:src/vm3.c     **** nPC  += 4;
7980:src/vm3.c     **** 
7981:src/vm3.c     **** #if INDIRECT_DEBUG
7982:src/vm3.c     **** printf("%d|xor\n",counter);
7983:src/vm3.c     **** counter++;
7984:src/vm3.c     **** #endif
7985:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
7986:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 416


7987:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
7988:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
7989:src/vm3.c     **** PC  =  nPC;
7990:src/vm3.c     **** nPC  += 4;
7991:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
7992:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
7993:src/vm3.c     ****   if (op0 == 0x0) {
7994:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
7995:src/vm3.c     ****     op0 = op0 + funct;
7996:src/vm3.c     ****   }
7997:src/vm3.c     ****     else {
7998:src/vm3.c     ****     op0 = op0 + FIX_OP;
7999:src/vm3.c     ****   }
8000:src/vm3.c     **** 
8001:src/vm3.c     **** p = array;
8002:src/vm3.c     **** p = p[op0].next_level;
8003:src/vm3.c     **** 
8004:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8005:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8006:src/vm3.c     ****   if (op1 == 0x0) {
8007:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8008:src/vm3.c     ****     op1 = op1 + funct;
8009:src/vm3.c     ****   }
8010:src/vm3.c     ****     else {
8011:src/vm3.c     ****     op1 = op1 + FIX_OP;
8012:src/vm3.c     ****   }
8013:src/vm3.c     **** 
8014:src/vm3.c     **** goto *p[op1].code;
8015:src/vm3.c     **** 
8016:src/vm3.c     **** 
8017:src/vm3.c     **** shPLUSor:
8018:src/vm3.c     **** #if INDIRECT_DEBUG
8019:src/vm3.c     **** printf("%d|sh\n",counter);
8020:src/vm3.c     **** counter++;
8021:src/vm3.c     **** #endif
8022:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8023:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8024:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8025:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
8026:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
8027:src/vm3.c     **** PC  =  nPC;
8028:src/vm3.c     **** nPC  += 4;
8029:src/vm3.c     **** 
8030:src/vm3.c     **** #if INDIRECT_DEBUG
8031:src/vm3.c     **** printf("%d|or\n",counter);
8032:src/vm3.c     **** counter++;
8033:src/vm3.c     **** #endif
8034:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8035:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8036:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
8037:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
8038:src/vm3.c     **** PC  =  nPC;
8039:src/vm3.c     **** nPC  += 4;
8040:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8041:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8042:src/vm3.c     ****   if (op0 == 0x0) {
8043:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 417


8044:src/vm3.c     ****     op0 = op0 + funct;
8045:src/vm3.c     ****   }
8046:src/vm3.c     ****     else {
8047:src/vm3.c     ****     op0 = op0 + FIX_OP;
8048:src/vm3.c     ****   }
8049:src/vm3.c     **** 
8050:src/vm3.c     **** p = array;
8051:src/vm3.c     **** p = p[op0].next_level;
8052:src/vm3.c     **** 
8053:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8054:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8055:src/vm3.c     ****   if (op1 == 0x0) {
8056:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8057:src/vm3.c     ****     op1 = op1 + funct;
8058:src/vm3.c     ****   }
8059:src/vm3.c     ****     else {
8060:src/vm3.c     ****     op1 = op1 + FIX_OP;
8061:src/vm3.c     ****   }
8062:src/vm3.c     **** 
8063:src/vm3.c     **** goto *p[op1].code;
8064:src/vm3.c     **** 
8065:src/vm3.c     **** 
8066:src/vm3.c     **** adduPLUSlui:
8067:src/vm3.c     **** #if INDIRECT_DEBUG
8068:src/vm3.c     **** printf("%d|addu\n",counter);
8069:src/vm3.c     **** counter++;
8070:src/vm3.c     **** #endif
8071:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8072:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8073:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8074:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
8075:src/vm3.c     **** PC  =  nPC;
8076:src/vm3.c     **** nPC  += 4;
8077:src/vm3.c     **** 
8078:src/vm3.c     **** #if INDIRECT_DEBUG
8079:src/vm3.c     **** printf("%d|lui\n",counter);
8080:src/vm3.c     **** counter++;
8081:src/vm3.c     **** #endif
8082:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
8083:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8084:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
8085:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
8086:src/vm3.c     **** PC  =  nPC;
8087:src/vm3.c     **** nPC  += 4;
8088:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8089:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8090:src/vm3.c     ****   if (op0 == 0x0) {
8091:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8092:src/vm3.c     ****     op0 = op0 + funct;
8093:src/vm3.c     ****   }
8094:src/vm3.c     ****     else {
8095:src/vm3.c     ****     op0 = op0 + FIX_OP;
8096:src/vm3.c     ****   }
8097:src/vm3.c     **** 
8098:src/vm3.c     **** p = array;
8099:src/vm3.c     **** p = p[op0].next_level;
8100:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 418


8101:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8102:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8103:src/vm3.c     ****   if (op1 == 0x0) {
8104:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8105:src/vm3.c     ****     op1 = op1 + funct;
8106:src/vm3.c     ****   }
8107:src/vm3.c     ****     else {
8108:src/vm3.c     ****     op1 = op1 + FIX_OP;
8109:src/vm3.c     ****   }
8110:src/vm3.c     **** 
8111:src/vm3.c     **** goto *p[op1].code;
8112:src/vm3.c     **** 
8113:src/vm3.c     **** 
8114:src/vm3.c     **** addiuPLUSlbu:
8115:src/vm3.c     **** #if INDIRECT_DEBUG
8116:src/vm3.c     **** printf("%d|addiu\n",counter);
8117:src/vm3.c     **** counter++;
8118:src/vm3.c     **** #endif
8119:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8120:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8121:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8122:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
8123:src/vm3.c     **** PC  =  nPC;
8124:src/vm3.c     **** nPC  += 4;
8125:src/vm3.c     **** 
8126:src/vm3.c     **** #if INDIRECT_DEBUG
8127:src/vm3.c     **** printf("%d|lbu\n",counter);
8128:src/vm3.c     **** counter++;
8129:src/vm3.c     **** #endif
8130:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8131:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8132:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
8133:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
8134:src/vm3.c     **** PC  =  nPC;
8135:src/vm3.c     **** nPC  += 4;
8136:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8137:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8138:src/vm3.c     ****   if (op0 == 0x0) {
8139:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8140:src/vm3.c     ****     op0 = op0 + funct;
8141:src/vm3.c     ****   }
8142:src/vm3.c     ****     else {
8143:src/vm3.c     ****     op0 = op0 + FIX_OP;
8144:src/vm3.c     ****   }
8145:src/vm3.c     **** 
8146:src/vm3.c     **** p = array;
8147:src/vm3.c     **** p = p[op0].next_level;
8148:src/vm3.c     **** 
8149:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8150:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8151:src/vm3.c     ****   if (op1 == 0x0) {
8152:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8153:src/vm3.c     ****     op1 = op1 + funct;
8154:src/vm3.c     ****   }
8155:src/vm3.c     ****     else {
8156:src/vm3.c     ****     op1 = op1 + FIX_OP;
8157:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 419


8158:src/vm3.c     **** 
8159:src/vm3.c     **** goto *p[op1].code;
8160:src/vm3.c     **** 
8161:src/vm3.c     **** 
8162:src/vm3.c     **** srlPLUSori:
8163:src/vm3.c     **** #if INDIRECT_DEBUG
8164:src/vm3.c     **** printf("%d|srl\n",counter);
8165:src/vm3.c     **** counter++;
8166:src/vm3.c     **** #endif
8167:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
8168:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8169:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8170:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
8171:src/vm3.c     **** PC  =  nPC;
8172:src/vm3.c     **** nPC  += 4;
8173:src/vm3.c     **** 
8174:src/vm3.c     **** #if INDIRECT_DEBUG
8175:src/vm3.c     **** printf("%d|ori\n",counter);
8176:src/vm3.c     **** counter++;
8177:src/vm3.c     **** #endif
8178:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8179:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8180:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
8181:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
8182:src/vm3.c     **** PC  =  nPC;
8183:src/vm3.c     **** nPC  += 4;
8184:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8185:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8186:src/vm3.c     ****   if (op0 == 0x0) {
8187:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8188:src/vm3.c     ****     op0 = op0 + funct;
8189:src/vm3.c     ****   }
8190:src/vm3.c     ****     else {
8191:src/vm3.c     ****     op0 = op0 + FIX_OP;
8192:src/vm3.c     ****   }
8193:src/vm3.c     **** 
8194:src/vm3.c     **** p = array;
8195:src/vm3.c     **** p = p[op0].next_level;
8196:src/vm3.c     **** 
8197:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8198:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8199:src/vm3.c     ****   if (op1 == 0x0) {
8200:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8201:src/vm3.c     ****     op1 = op1 + funct;
8202:src/vm3.c     ****   }
8203:src/vm3.c     ****     else {
8204:src/vm3.c     ****     op1 = op1 + FIX_OP;
8205:src/vm3.c     ****   }
8206:src/vm3.c     **** 
8207:src/vm3.c     **** goto *p[op1].code;
8208:src/vm3.c     **** 
8209:src/vm3.c     **** 
8210:src/vm3.c     **** bnePLUSxor:
8211:src/vm3.c     **** #if INDIRECT_DEBUG
8212:src/vm3.c     **** printf("%d|bne\n",counter);
8213:src/vm3.c     **** counter++;
8214:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 420


8215:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8216:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8217:src/vm3.c     **** if (RF[rs] != RF[rt])
8218:src/vm3.c     **** {
8219:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
8220:src/vm3.c     ****   PC  =  nPC;
8221:src/vm3.c     ****   nPC  += (immediate << 2);
8222:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
8223:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8224:src/vm3.c     ****   if (op0 == 0x0) {
8225:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8226:src/vm3.c     ****     op0 = op0 + funct;
8227:src/vm3.c     ****   }
8228:src/vm3.c     ****     else {
8229:src/vm3.c     ****     op0 = op0 + FIX_OP;
8230:src/vm3.c     ****   }
8231:src/vm3.c     **** 
8232:src/vm3.c     **** p = array;
8233:src/vm3.c     **** p = p[op0].next_level;
8234:src/vm3.c     **** 
8235:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8236:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8237:src/vm3.c     ****   if (op1 == 0x0) {
8238:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8239:src/vm3.c     ****     op1 = op1 + funct;
8240:src/vm3.c     ****   }
8241:src/vm3.c     ****     else {
8242:src/vm3.c     ****     op1 = op1 + FIX_OP;
8243:src/vm3.c     ****   }
8244:src/vm3.c     **** 
8245:src/vm3.c     **** goto *p[op1].code;
8246:src/vm3.c     **** 
8247:src/vm3.c     **** 
8248:src/vm3.c     **** }
8249:src/vm3.c     **** else
8250:src/vm3.c     **** {
8251:src/vm3.c     ****   PC  =  nPC;
8252:src/vm3.c     ****   nPC  += 4;
8253:src/vm3.c     **** }
8254:src/vm3.c     **** 
8255:src/vm3.c     **** #if INDIRECT_DEBUG
8256:src/vm3.c     **** printf("%d|xor\n",counter);
8257:src/vm3.c     **** counter++;
8258:src/vm3.c     **** #endif
8259:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8260:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8261:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
8262:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
8263:src/vm3.c     **** PC  =  nPC;
8264:src/vm3.c     **** nPC  += 4;
8265:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8266:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8267:src/vm3.c     ****   if (op0 == 0x0) {
8268:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8269:src/vm3.c     ****     op0 = op0 + funct;
8270:src/vm3.c     ****   }
8271:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 421


8272:src/vm3.c     ****     op0 = op0 + FIX_OP;
8273:src/vm3.c     ****   }
8274:src/vm3.c     **** 
8275:src/vm3.c     **** p = array;
8276:src/vm3.c     **** p = p[op0].next_level;
8277:src/vm3.c     **** 
8278:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8279:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8280:src/vm3.c     ****   if (op1 == 0x0) {
8281:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8282:src/vm3.c     ****     op1 = op1 + funct;
8283:src/vm3.c     ****   }
8284:src/vm3.c     ****     else {
8285:src/vm3.c     ****     op1 = op1 + FIX_OP;
8286:src/vm3.c     ****   }
8287:src/vm3.c     **** 
8288:src/vm3.c     **** goto *p[op1].code;
8289:src/vm3.c     **** 
8290:src/vm3.c     **** 
8291:src/vm3.c     **** sllPLUSslt:
8292:src/vm3.c     **** #if INDIRECT_DEBUG
8293:src/vm3.c     **** printf("%d|sll\n",counter);
8294:src/vm3.c     **** counter++;
8295:src/vm3.c     **** #endif
8296:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
8297:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8298:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8299:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
8300:src/vm3.c     **** PC  =  nPC;
8301:src/vm3.c     **** nPC  += 4;
8302:src/vm3.c     **** 
8303:src/vm3.c     **** #if INDIRECT_DEBUG
8304:src/vm3.c     **** printf("%d|slt\n",counter);
8305:src/vm3.c     **** counter++;
8306:src/vm3.c     **** #endif
8307:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8308:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8309:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
8310:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
8311:src/vm3.c     **** PC  =  nPC;
8312:src/vm3.c     **** nPC  += 4;
8313:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8314:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8315:src/vm3.c     ****   if (op0 == 0x0) {
8316:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8317:src/vm3.c     ****     op0 = op0 + funct;
8318:src/vm3.c     ****   }
8319:src/vm3.c     ****     else {
8320:src/vm3.c     ****     op0 = op0 + FIX_OP;
8321:src/vm3.c     ****   }
8322:src/vm3.c     **** 
8323:src/vm3.c     **** p = array;
8324:src/vm3.c     **** p = p[op0].next_level;
8325:src/vm3.c     **** 
8326:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8327:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8328:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 422


8329:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8330:src/vm3.c     ****     op1 = op1 + funct;
8331:src/vm3.c     ****   }
8332:src/vm3.c     ****     else {
8333:src/vm3.c     ****     op1 = op1 + FIX_OP;
8334:src/vm3.c     ****   }
8335:src/vm3.c     **** 
8336:src/vm3.c     **** goto *p[op1].code;
8337:src/vm3.c     **** 
8338:src/vm3.c     **** 
8339:src/vm3.c     **** xorPLUSnor:
8340:src/vm3.c     **** #if INDIRECT_DEBUG
8341:src/vm3.c     **** printf("%d|xor\n",counter);
8342:src/vm3.c     **** counter++;
8343:src/vm3.c     **** #endif
8344:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8345:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8346:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8347:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
8348:src/vm3.c     **** PC  =  nPC;
8349:src/vm3.c     **** nPC  += 4;
8350:src/vm3.c     **** 
8351:src/vm3.c     **** #if INDIRECT_DEBUG
8352:src/vm3.c     **** printf("%d|nor\n",counter);
8353:src/vm3.c     **** counter++;
8354:src/vm3.c     **** #endif
8355:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8356:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8357:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
8358:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
8359:src/vm3.c     **** PC  =  nPC;
8360:src/vm3.c     **** nPC  += 4;
8361:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8362:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8363:src/vm3.c     ****   if (op0 == 0x0) {
8364:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8365:src/vm3.c     ****     op0 = op0 + funct;
8366:src/vm3.c     ****   }
8367:src/vm3.c     ****     else {
8368:src/vm3.c     ****     op0 = op0 + FIX_OP;
8369:src/vm3.c     ****   }
8370:src/vm3.c     **** 
8371:src/vm3.c     **** p = array;
8372:src/vm3.c     **** p = p[op0].next_level;
8373:src/vm3.c     **** 
8374:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8375:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8376:src/vm3.c     ****   if (op1 == 0x0) {
8377:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8378:src/vm3.c     ****     op1 = op1 + funct;
8379:src/vm3.c     ****   }
8380:src/vm3.c     ****     else {
8381:src/vm3.c     ****     op1 = op1 + FIX_OP;
8382:src/vm3.c     ****   }
8383:src/vm3.c     **** 
8384:src/vm3.c     **** goto *p[op1].code;
8385:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 423


8386:src/vm3.c     **** 
8387:src/vm3.c     **** lwPLUSbgtz:
8388:src/vm3.c     **** #if INDIRECT_DEBUG
8389:src/vm3.c     **** printf("%d|lw\n",counter);
8390:src/vm3.c     **** counter++;
8391:src/vm3.c     **** #endif
8392:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8393:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8394:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8395:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
8396:src/vm3.c     **** PC  =  nPC;
8397:src/vm3.c     **** nPC  += 4;
8398:src/vm3.c     **** 
8399:src/vm3.c     **** #if INDIRECT_DEBUG
8400:src/vm3.c     **** printf("%d|bgtz\n",counter);
8401:src/vm3.c     **** counter++;
8402:src/vm3.c     **** #endif
8403:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8404:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
8405:src/vm3.c     **** {
8406:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
8407:src/vm3.c     ****   PC  =  nPC;
8408:src/vm3.c     ****   nPC  += (immediate << 2);
8409:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
8410:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8411:src/vm3.c     ****   if (op0 == 0x0) {
8412:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8413:src/vm3.c     ****     op0 = op0 + funct;
8414:src/vm3.c     ****   }
8415:src/vm3.c     ****     else {
8416:src/vm3.c     ****     op0 = op0 + FIX_OP;
8417:src/vm3.c     ****   }
8418:src/vm3.c     **** 
8419:src/vm3.c     **** p = array;
8420:src/vm3.c     **** p = p[op0].next_level;
8421:src/vm3.c     **** 
8422:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8423:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8424:src/vm3.c     ****   if (op1 == 0x0) {
8425:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8426:src/vm3.c     ****     op1 = op1 + funct;
8427:src/vm3.c     ****   }
8428:src/vm3.c     ****     else {
8429:src/vm3.c     ****     op1 = op1 + FIX_OP;
8430:src/vm3.c     ****   }
8431:src/vm3.c     **** 
8432:src/vm3.c     **** goto *p[op1].code;
8433:src/vm3.c     **** 
8434:src/vm3.c     **** 
8435:src/vm3.c     **** }
8436:src/vm3.c     **** else
8437:src/vm3.c     **** {
8438:src/vm3.c     ****   PC  =  nPC;
8439:src/vm3.c     ****   nPC  += 4;
8440:src/vm3.c     **** }
8441:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8442:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 424


8443:src/vm3.c     ****   if (op0 == 0x0) {
8444:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8445:src/vm3.c     ****     op0 = op0 + funct;
8446:src/vm3.c     ****   }
8447:src/vm3.c     ****     else {
8448:src/vm3.c     ****     op0 = op0 + FIX_OP;
8449:src/vm3.c     ****   }
8450:src/vm3.c     **** 
8451:src/vm3.c     **** p = array;
8452:src/vm3.c     **** p = p[op0].next_level;
8453:src/vm3.c     **** 
8454:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8455:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8456:src/vm3.c     ****   if (op1 == 0x0) {
8457:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8458:src/vm3.c     ****     op1 = op1 + funct;
8459:src/vm3.c     ****   }
8460:src/vm3.c     ****     else {
8461:src/vm3.c     ****     op1 = op1 + FIX_OP;
8462:src/vm3.c     ****   }
8463:src/vm3.c     **** 
8464:src/vm3.c     **** goto *p[op1].code;
8465:src/vm3.c     **** 
8466:src/vm3.c     **** 
8467:src/vm3.c     **** addiuPLUSbeq:
8468:src/vm3.c     **** #if INDIRECT_DEBUG
8469:src/vm3.c     **** printf("%d|addiu\n",counter);
8470:src/vm3.c     **** counter++;
8471:src/vm3.c     **** #endif
8472:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8473:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8474:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8475:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
8476:src/vm3.c     **** PC  =  nPC;
8477:src/vm3.c     **** nPC  += 4;
8478:src/vm3.c     **** 
8479:src/vm3.c     **** #if INDIRECT_DEBUG
8480:src/vm3.c     **** printf("%d|beq\n",counter);
8481:src/vm3.c     **** counter++;
8482:src/vm3.c     **** #endif
8483:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8484:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8485:src/vm3.c     **** if (RF[rs] == RF[rt])
8486:src/vm3.c     **** {
8487:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
8488:src/vm3.c     ****   PC  =  nPC;
8489:src/vm3.c     ****   nPC  += (immediate << 2);
8490:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
8491:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8492:src/vm3.c     ****   if (op0 == 0x0) {
8493:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8494:src/vm3.c     ****     op0 = op0 + funct;
8495:src/vm3.c     ****   }
8496:src/vm3.c     ****     else {
8497:src/vm3.c     ****     op0 = op0 + FIX_OP;
8498:src/vm3.c     ****   }
8499:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 425


8500:src/vm3.c     **** p = array;
8501:src/vm3.c     **** p = p[op0].next_level;
8502:src/vm3.c     **** 
8503:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8504:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8505:src/vm3.c     ****   if (op1 == 0x0) {
8506:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8507:src/vm3.c     ****     op1 = op1 + funct;
8508:src/vm3.c     ****   }
8509:src/vm3.c     ****     else {
8510:src/vm3.c     ****     op1 = op1 + FIX_OP;
8511:src/vm3.c     ****   }
8512:src/vm3.c     **** 
8513:src/vm3.c     **** goto *p[op1].code;
8514:src/vm3.c     **** 
8515:src/vm3.c     **** 
8516:src/vm3.c     **** }
8517:src/vm3.c     **** else
8518:src/vm3.c     **** {
8519:src/vm3.c     ****   PC  =  nPC;
8520:src/vm3.c     ****   nPC  += 4;
8521:src/vm3.c     **** }
8522:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8523:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8524:src/vm3.c     ****   if (op0 == 0x0) {
8525:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8526:src/vm3.c     ****     op0 = op0 + funct;
8527:src/vm3.c     ****   }
8528:src/vm3.c     ****     else {
8529:src/vm3.c     ****     op0 = op0 + FIX_OP;
8530:src/vm3.c     ****   }
8531:src/vm3.c     **** 
8532:src/vm3.c     **** p = array;
8533:src/vm3.c     **** p = p[op0].next_level;
8534:src/vm3.c     **** 
8535:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8536:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8537:src/vm3.c     ****   if (op1 == 0x0) {
8538:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8539:src/vm3.c     ****     op1 = op1 + funct;
8540:src/vm3.c     ****   }
8541:src/vm3.c     ****     else {
8542:src/vm3.c     ****     op1 = op1 + FIX_OP;
8543:src/vm3.c     ****   }
8544:src/vm3.c     **** 
8545:src/vm3.c     **** goto *p[op1].code;
8546:src/vm3.c     **** 
8547:src/vm3.c     **** 
8548:src/vm3.c     **** sltPLUSbne:
8549:src/vm3.c     **** #if INDIRECT_DEBUG
8550:src/vm3.c     **** printf("%d|slt\n",counter);
8551:src/vm3.c     **** counter++;
8552:src/vm3.c     **** #endif
8553:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8554:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8555:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8556:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
GAS LISTING /tmp/cc15eBE3.s 			page 426


8557:src/vm3.c     **** PC  =  nPC;
8558:src/vm3.c     **** nPC  += 4;
8559:src/vm3.c     **** 
8560:src/vm3.c     **** #if INDIRECT_DEBUG
8561:src/vm3.c     **** printf("%d|bne\n",counter);
8562:src/vm3.c     **** counter++;
8563:src/vm3.c     **** #endif
8564:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8565:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8566:src/vm3.c     **** if (RF[rs] != RF[rt])
8567:src/vm3.c     **** {
8568:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
8569:src/vm3.c     ****   PC  =  nPC;
8570:src/vm3.c     ****   nPC  += (immediate << 2);
8571:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
8572:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8573:src/vm3.c     ****   if (op0 == 0x0) {
8574:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8575:src/vm3.c     ****     op0 = op0 + funct;
8576:src/vm3.c     ****   }
8577:src/vm3.c     ****     else {
8578:src/vm3.c     ****     op0 = op0 + FIX_OP;
8579:src/vm3.c     ****   }
8580:src/vm3.c     **** 
8581:src/vm3.c     **** p = array;
8582:src/vm3.c     **** p = p[op0].next_level;
8583:src/vm3.c     **** 
8584:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8585:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8586:src/vm3.c     ****   if (op1 == 0x0) {
8587:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8588:src/vm3.c     ****     op1 = op1 + funct;
8589:src/vm3.c     ****   }
8590:src/vm3.c     ****     else {
8591:src/vm3.c     ****     op1 = op1 + FIX_OP;
8592:src/vm3.c     ****   }
8593:src/vm3.c     **** 
8594:src/vm3.c     **** goto *p[op1].code;
8595:src/vm3.c     **** 
8596:src/vm3.c     **** 
8597:src/vm3.c     **** }
8598:src/vm3.c     **** else
8599:src/vm3.c     **** {
8600:src/vm3.c     ****   PC  =  nPC;
8601:src/vm3.c     ****   nPC  += 4;
8602:src/vm3.c     **** }
8603:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8604:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8605:src/vm3.c     ****   if (op0 == 0x0) {
8606:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8607:src/vm3.c     ****     op0 = op0 + funct;
8608:src/vm3.c     ****   }
8609:src/vm3.c     ****     else {
8610:src/vm3.c     ****     op0 = op0 + FIX_OP;
8611:src/vm3.c     ****   }
8612:src/vm3.c     **** 
8613:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 427


8614:src/vm3.c     **** p = p[op0].next_level;
8615:src/vm3.c     **** 
8616:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8617:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8618:src/vm3.c     ****   if (op1 == 0x0) {
8619:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8620:src/vm3.c     ****     op1 = op1 + funct;
8621:src/vm3.c     ****   }
8622:src/vm3.c     ****     else {
8623:src/vm3.c     ****     op1 = op1 + FIX_OP;
8624:src/vm3.c     ****   }
8625:src/vm3.c     **** 
8626:src/vm3.c     **** goto *p[op1].code;
8627:src/vm3.c     **** 
8628:src/vm3.c     **** 
8629:src/vm3.c     **** swPLUSbne:
8630:src/vm3.c     **** #if INDIRECT_DEBUG
8631:src/vm3.c     **** printf("%d|sw\n",counter);
8632:src/vm3.c     **** counter++;
8633:src/vm3.c     **** #endif
8634:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8635:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8636:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8637:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
8638:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
8639:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
8640:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
8641:src/vm3.c     **** PC  =  nPC;
8642:src/vm3.c     **** nPC  += 4;
8643:src/vm3.c     **** 
8644:src/vm3.c     **** #if INDIRECT_DEBUG
8645:src/vm3.c     **** printf("%d|bne\n",counter);
8646:src/vm3.c     **** counter++;
8647:src/vm3.c     **** #endif
8648:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8649:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8650:src/vm3.c     **** if (RF[rs] != RF[rt])
8651:src/vm3.c     **** {
8652:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
8653:src/vm3.c     ****   PC  =  nPC;
8654:src/vm3.c     ****   nPC  += (immediate << 2);
8655:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
8656:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8657:src/vm3.c     ****   if (op0 == 0x0) {
8658:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8659:src/vm3.c     ****     op0 = op0 + funct;
8660:src/vm3.c     ****   }
8661:src/vm3.c     ****     else {
8662:src/vm3.c     ****     op0 = op0 + FIX_OP;
8663:src/vm3.c     ****   }
8664:src/vm3.c     **** 
8665:src/vm3.c     **** p = array;
8666:src/vm3.c     **** p = p[op0].next_level;
8667:src/vm3.c     **** 
8668:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8670:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 428


8671:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8672:src/vm3.c     ****     op1 = op1 + funct;
8673:src/vm3.c     ****   }
8674:src/vm3.c     ****     else {
8675:src/vm3.c     ****     op1 = op1 + FIX_OP;
8676:src/vm3.c     ****   }
8677:src/vm3.c     **** 
8678:src/vm3.c     **** goto *p[op1].code;
8679:src/vm3.c     **** 
8680:src/vm3.c     **** 
8681:src/vm3.c     **** }
8682:src/vm3.c     **** else
8683:src/vm3.c     **** {
8684:src/vm3.c     ****   PC  =  nPC;
8685:src/vm3.c     ****   nPC  += 4;
8686:src/vm3.c     **** }
8687:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8688:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8689:src/vm3.c     ****   if (op0 == 0x0) {
8690:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8691:src/vm3.c     ****     op0 = op0 + funct;
8692:src/vm3.c     ****   }
8693:src/vm3.c     ****     else {
8694:src/vm3.c     ****     op0 = op0 + FIX_OP;
8695:src/vm3.c     ****   }
8696:src/vm3.c     **** 
8697:src/vm3.c     **** p = array;
8698:src/vm3.c     **** p = p[op0].next_level;
8699:src/vm3.c     **** 
8700:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8701:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8702:src/vm3.c     ****   if (op1 == 0x0) {
8703:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8704:src/vm3.c     ****     op1 = op1 + funct;
8705:src/vm3.c     ****   }
8706:src/vm3.c     ****     else {
8707:src/vm3.c     ****     op1 = op1 + FIX_OP;
8708:src/vm3.c     ****   }
8709:src/vm3.c     **** 
8710:src/vm3.c     **** goto *p[op1].code;
8711:src/vm3.c     **** 
8712:src/vm3.c     **** 
8713:src/vm3.c     **** srlPLUSor:
8714:src/vm3.c     **** #if INDIRECT_DEBUG
8715:src/vm3.c     **** printf("%d|srl\n",counter);
8716:src/vm3.c     **** counter++;
8717:src/vm3.c     **** #endif
8718:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
8719:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8720:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8721:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
8722:src/vm3.c     **** PC  =  nPC;
8723:src/vm3.c     **** nPC  += 4;
8724:src/vm3.c     **** 
8725:src/vm3.c     **** #if INDIRECT_DEBUG
8726:src/vm3.c     **** printf("%d|or\n",counter);
8727:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 429


8728:src/vm3.c     **** #endif
8729:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8730:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8731:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
8732:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
8733:src/vm3.c     **** PC  =  nPC;
8734:src/vm3.c     **** nPC  += 4;
8735:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8736:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8737:src/vm3.c     ****   if (op0 == 0x0) {
8738:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8739:src/vm3.c     ****     op0 = op0 + funct;
8740:src/vm3.c     ****   }
8741:src/vm3.c     ****     else {
8742:src/vm3.c     ****     op0 = op0 + FIX_OP;
8743:src/vm3.c     ****   }
8744:src/vm3.c     **** 
8745:src/vm3.c     **** p = array;
8746:src/vm3.c     **** p = p[op0].next_level;
8747:src/vm3.c     **** 
8748:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8749:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8750:src/vm3.c     ****   if (op1 == 0x0) {
8751:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8752:src/vm3.c     ****     op1 = op1 + funct;
8753:src/vm3.c     ****   }
8754:src/vm3.c     ****     else {
8755:src/vm3.c     ****     op1 = op1 + FIX_OP;
8756:src/vm3.c     ****   }
8757:src/vm3.c     **** 
8758:src/vm3.c     **** goto *p[op1].code;
8759:src/vm3.c     **** 
8760:src/vm3.c     **** 
8761:src/vm3.c     **** sllPLUSjump:
8762:src/vm3.c     **** #if INDIRECT_DEBUG
8763:src/vm3.c     **** printf("%d|sll\n",counter);
8764:src/vm3.c     **** counter++;
8765:src/vm3.c     **** #endif
8766:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
8767:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8768:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8769:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
8770:src/vm3.c     **** PC  =  nPC;
8771:src/vm3.c     **** nPC  += 4;
8772:src/vm3.c     **** 
8773:src/vm3.c     **** #if INDIRECT_DEBUG
8774:src/vm3.c     **** printf("%d|jump\n",counter);
8775:src/vm3.c     **** counter++;
8776:src/vm3.c     **** #endif
8777:src/vm3.c     **** PC = nPC;
8778:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
8779:src/vm3.c     **** nPC = address << 2;
8780:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8781:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8782:src/vm3.c     ****   if (op0 == 0x0) {
8783:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8784:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 430


8785:src/vm3.c     ****   }
8786:src/vm3.c     ****     else {
8787:src/vm3.c     ****     op0 = op0 + FIX_OP;
8788:src/vm3.c     ****   }
8789:src/vm3.c     **** 
8790:src/vm3.c     **** p = array;
8791:src/vm3.c     **** p = p[op0].next_level;
8792:src/vm3.c     **** 
8793:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8794:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8795:src/vm3.c     ****   if (op1 == 0x0) {
8796:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8797:src/vm3.c     ****     op1 = op1 + funct;
8798:src/vm3.c     ****   }
8799:src/vm3.c     ****     else {
8800:src/vm3.c     ****     op1 = op1 + FIX_OP;
8801:src/vm3.c     ****   }
8802:src/vm3.c     **** 
8803:src/vm3.c     **** goto *p[op1].code;
8804:src/vm3.c     **** 
8805:src/vm3.c     **** 
8806:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8807:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8808:src/vm3.c     ****   if (op0 == 0x0) {
8809:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8810:src/vm3.c     ****     op0 = op0 + funct;
8811:src/vm3.c     ****   }
8812:src/vm3.c     ****     else {
8813:src/vm3.c     ****     op0 = op0 + FIX_OP;
8814:src/vm3.c     ****   }
8815:src/vm3.c     **** 
8816:src/vm3.c     **** p = array;
8817:src/vm3.c     **** p = p[op0].next_level;
8818:src/vm3.c     **** 
8819:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8820:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8821:src/vm3.c     ****   if (op1 == 0x0) {
8822:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8823:src/vm3.c     ****     op1 = op1 + funct;
8824:src/vm3.c     ****   }
8825:src/vm3.c     ****     else {
8826:src/vm3.c     ****     op1 = op1 + FIX_OP;
8827:src/vm3.c     ****   }
8828:src/vm3.c     **** 
8829:src/vm3.c     **** goto *p[op1].code;
8830:src/vm3.c     **** 
8831:src/vm3.c     **** 
8832:src/vm3.c     **** addiuPLUSandi:
8833:src/vm3.c     **** #if INDIRECT_DEBUG
8834:src/vm3.c     **** printf("%d|addiu\n",counter);
8835:src/vm3.c     **** counter++;
8836:src/vm3.c     **** #endif
8837:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8838:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8839:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8840:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
8841:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 431


8842:src/vm3.c     **** nPC  += 4;
8843:src/vm3.c     **** 
8844:src/vm3.c     **** #if INDIRECT_DEBUG
8845:src/vm3.c     **** printf("%d|andi\n",counter);
8846:src/vm3.c     **** counter++;
8847:src/vm3.c     **** #endif
8848:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8849:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8850:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
8851:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
8852:src/vm3.c     **** PC  =  nPC;
8853:src/vm3.c     **** nPC  += 4;
8854:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8855:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8856:src/vm3.c     ****   if (op0 == 0x0) {
8857:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8858:src/vm3.c     ****     op0 = op0 + funct;
8859:src/vm3.c     ****   }
8860:src/vm3.c     ****     else {
8861:src/vm3.c     ****     op0 = op0 + FIX_OP;
8862:src/vm3.c     ****   }
8863:src/vm3.c     **** 
8864:src/vm3.c     **** p = array;
8865:src/vm3.c     **** p = p[op0].next_level;
8866:src/vm3.c     **** 
8867:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8868:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8869:src/vm3.c     ****   if (op1 == 0x0) {
8870:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8871:src/vm3.c     ****     op1 = op1 + funct;
8872:src/vm3.c     ****   }
8873:src/vm3.c     ****     else {
8874:src/vm3.c     ****     op1 = op1 + FIX_OP;
8875:src/vm3.c     ****   }
8876:src/vm3.c     **** 
8877:src/vm3.c     **** goto *p[op1].code;
8878:src/vm3.c     **** 
8879:src/vm3.c     **** 
8880:src/vm3.c     **** addiuPLUSsubu:
8881:src/vm3.c     **** #if INDIRECT_DEBUG
8882:src/vm3.c     **** printf("%d|addiu\n",counter);
8883:src/vm3.c     **** counter++;
8884:src/vm3.c     **** #endif
8885:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
8886:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8887:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
8888:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
8889:src/vm3.c     **** PC  =  nPC;
8890:src/vm3.c     **** nPC  += 4;
8891:src/vm3.c     **** 
8892:src/vm3.c     **** #if INDIRECT_DEBUG
8893:src/vm3.c     **** printf("%d|subu\n",counter);
8894:src/vm3.c     **** counter++;
8895:src/vm3.c     **** #endif
8896:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8897:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8898:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 432


8899:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
8900:src/vm3.c     **** PC  =  nPC;
8901:src/vm3.c     **** nPC  += 4;
8902:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8903:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8904:src/vm3.c     ****   if (op0 == 0x0) {
8905:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8906:src/vm3.c     ****     op0 = op0 + funct;
8907:src/vm3.c     ****   }
8908:src/vm3.c     ****     else {
8909:src/vm3.c     ****     op0 = op0 + FIX_OP;
8910:src/vm3.c     ****   }
8911:src/vm3.c     **** 
8912:src/vm3.c     **** p = array;
8913:src/vm3.c     **** p = p[op0].next_level;
8914:src/vm3.c     **** 
8915:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8916:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8917:src/vm3.c     ****   if (op1 == 0x0) {
8918:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8919:src/vm3.c     ****     op1 = op1 + funct;
8920:src/vm3.c     ****   }
8921:src/vm3.c     ****     else {
8922:src/vm3.c     ****     op1 = op1 + FIX_OP;
8923:src/vm3.c     ****   }
8924:src/vm3.c     **** 
8925:src/vm3.c     **** goto *p[op1].code;
8926:src/vm3.c     **** 
8927:src/vm3.c     **** 
8928:src/vm3.c     **** srlPLUSaddu:
8929:src/vm3.c     **** #if INDIRECT_DEBUG
8930:src/vm3.c     **** printf("%d|srl\n",counter);
8931:src/vm3.c     **** counter++;
8932:src/vm3.c     **** #endif
8933:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
8934:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
8935:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
8936:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
8937:src/vm3.c     **** PC  =  nPC;
8938:src/vm3.c     **** nPC  += 4;
8939:src/vm3.c     **** 
8940:src/vm3.c     **** #if INDIRECT_DEBUG
8941:src/vm3.c     **** printf("%d|addu\n",counter);
8942:src/vm3.c     **** counter++;
8943:src/vm3.c     **** #endif
8944:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
8945:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
8946:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
8947:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
8948:src/vm3.c     **** PC  =  nPC;
8949:src/vm3.c     **** nPC  += 4;
8950:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8951:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8952:src/vm3.c     ****   if (op0 == 0x0) {
8953:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8954:src/vm3.c     ****     op0 = op0 + funct;
8955:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 433


8956:src/vm3.c     ****     else {
8957:src/vm3.c     ****     op0 = op0 + FIX_OP;
8958:src/vm3.c     ****   }
8959:src/vm3.c     **** 
8960:src/vm3.c     **** p = array;
8961:src/vm3.c     **** p = p[op0].next_level;
8962:src/vm3.c     **** 
8963:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8964:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8965:src/vm3.c     ****   if (op1 == 0x0) {
8966:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
8967:src/vm3.c     ****     op1 = op1 + funct;
8968:src/vm3.c     ****   }
8969:src/vm3.c     ****     else {
8970:src/vm3.c     ****     op1 = op1 + FIX_OP;
8971:src/vm3.c     ****   }
8972:src/vm3.c     **** 
8973:src/vm3.c     **** goto *p[op1].code;
8974:src/vm3.c     **** 
8975:src/vm3.c     **** 
8976:src/vm3.c     **** jumpPLUSsw:
8977:src/vm3.c     **** #if INDIRECT_DEBUG
8978:src/vm3.c     **** printf("%d|jump\n",counter);
8979:src/vm3.c     **** counter++;
8980:src/vm3.c     **** #endif
8981:src/vm3.c     **** PC = nPC;
8982:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
8983:src/vm3.c     **** nPC = address << 2;
8984:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
8985:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
8986:src/vm3.c     ****   if (op0 == 0x0) {
8987:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
8988:src/vm3.c     ****     op0 = op0 + funct;
8989:src/vm3.c     ****   }
8990:src/vm3.c     ****     else {
8991:src/vm3.c     ****     op0 = op0 + FIX_OP;
8992:src/vm3.c     ****   }
8993:src/vm3.c     **** 
8994:src/vm3.c     **** p = array;
8995:src/vm3.c     **** p = p[op0].next_level;
8996:src/vm3.c     **** 
8997:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
8998:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
8999:src/vm3.c     ****   if (op1 == 0x0) {
9000:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9001:src/vm3.c     ****     op1 = op1 + funct;
9002:src/vm3.c     ****   }
9003:src/vm3.c     ****     else {
9004:src/vm3.c     ****     op1 = op1 + FIX_OP;
9005:src/vm3.c     ****   }
9006:src/vm3.c     **** 
9007:src/vm3.c     **** goto *p[op1].code;
9008:src/vm3.c     **** 
9009:src/vm3.c     **** 
9010:src/vm3.c     **** 
9011:src/vm3.c     **** #if INDIRECT_DEBUG
9012:src/vm3.c     **** printf("%d|sw\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 434


9013:src/vm3.c     **** counter++;
9014:src/vm3.c     **** #endif
9015:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9016:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9017:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9018:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
9019:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
9020:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
9021:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
9022:src/vm3.c     **** PC  =  nPC;
9023:src/vm3.c     **** nPC  += 4;
9024:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9025:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9026:src/vm3.c     ****   if (op0 == 0x0) {
9027:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9028:src/vm3.c     ****     op0 = op0 + funct;
9029:src/vm3.c     ****   }
9030:src/vm3.c     ****     else {
9031:src/vm3.c     ****     op0 = op0 + FIX_OP;
9032:src/vm3.c     ****   }
9033:src/vm3.c     **** 
9034:src/vm3.c     **** p = array;
9035:src/vm3.c     **** p = p[op0].next_level;
9036:src/vm3.c     **** 
9037:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9038:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9039:src/vm3.c     ****   if (op1 == 0x0) {
9040:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9041:src/vm3.c     ****     op1 = op1 + funct;
9042:src/vm3.c     ****   }
9043:src/vm3.c     ****     else {
9044:src/vm3.c     ****     op1 = op1 + FIX_OP;
9045:src/vm3.c     ****   }
9046:src/vm3.c     **** 
9047:src/vm3.c     **** goto *p[op1].code;
9048:src/vm3.c     **** 
9049:src/vm3.c     **** 
9050:src/vm3.c     **** srlPLUSsra:
9051:src/vm3.c     **** #if INDIRECT_DEBUG
9052:src/vm3.c     **** printf("%d|srl\n",counter);
9053:src/vm3.c     **** counter++;
9054:src/vm3.c     **** #endif
9055:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
9056:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9057:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
9058:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
9059:src/vm3.c     **** PC  =  nPC;
9060:src/vm3.c     **** nPC  += 4;
9061:src/vm3.c     **** 
9062:src/vm3.c     **** #if INDIRECT_DEBUG
9063:src/vm3.c     **** printf("%d|sra\n",counter);
9064:src/vm3.c     **** counter++;
9065:src/vm3.c     **** #endif
9066:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
9067:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9068:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
9069:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 435


9070:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
9071:src/vm3.c     **** }
9072:src/vm3.c     **** else {
9073:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9074:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] >> shamt;
9075:src/vm3.c     **** }
9076:src/vm3.c     **** PC  =  nPC;
9077:src/vm3.c     **** nPC  += 4;
9078:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9079:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9080:src/vm3.c     ****   if (op0 == 0x0) {
9081:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9082:src/vm3.c     ****     op0 = op0 + funct;
9083:src/vm3.c     ****   }
9084:src/vm3.c     ****     else {
9085:src/vm3.c     ****     op0 = op0 + FIX_OP;
9086:src/vm3.c     ****   }
9087:src/vm3.c     **** 
9088:src/vm3.c     **** p = array;
9089:src/vm3.c     **** p = p[op0].next_level;
9090:src/vm3.c     **** 
9091:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9092:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9093:src/vm3.c     ****   if (op1 == 0x0) {
9094:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9095:src/vm3.c     ****     op1 = op1 + funct;
9096:src/vm3.c     ****   }
9097:src/vm3.c     ****     else {
9098:src/vm3.c     ****     op1 = op1 + FIX_OP;
9099:src/vm3.c     ****   }
9100:src/vm3.c     **** 
9101:src/vm3.c     **** goto *p[op1].code;
9102:src/vm3.c     **** 
9103:src/vm3.c     **** 
9104:src/vm3.c     **** andiPLUSxor:
9105:src/vm3.c     **** #if INDIRECT_DEBUG
9106:src/vm3.c     **** printf("%d|andi\n",counter);
9107:src/vm3.c     **** counter++;
9108:src/vm3.c     **** #endif
9109:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9110:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9111:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9112:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
9113:src/vm3.c     **** PC  =  nPC;
9114:src/vm3.c     **** nPC  += 4;
9115:src/vm3.c     **** 
9116:src/vm3.c     **** #if INDIRECT_DEBUG
9117:src/vm3.c     **** printf("%d|xor\n",counter);
9118:src/vm3.c     **** counter++;
9119:src/vm3.c     **** #endif
9120:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9121:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9122:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9123:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
9124:src/vm3.c     **** PC  =  nPC;
9125:src/vm3.c     **** nPC  += 4;
9126:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 436


9127:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9128:src/vm3.c     ****   if (op0 == 0x0) {
9129:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9130:src/vm3.c     ****     op0 = op0 + funct;
9131:src/vm3.c     ****   }
9132:src/vm3.c     ****     else {
9133:src/vm3.c     ****     op0 = op0 + FIX_OP;
9134:src/vm3.c     ****   }
9135:src/vm3.c     **** 
9136:src/vm3.c     **** p = array;
9137:src/vm3.c     **** p = p[op0].next_level;
9138:src/vm3.c     **** 
9139:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9140:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9141:src/vm3.c     ****   if (op1 == 0x0) {
9142:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9143:src/vm3.c     ****     op1 = op1 + funct;
9144:src/vm3.c     ****   }
9145:src/vm3.c     ****     else {
9146:src/vm3.c     ****     op1 = op1 + FIX_OP;
9147:src/vm3.c     ****   }
9148:src/vm3.c     **** 
9149:src/vm3.c     **** goto *p[op1].code;
9150:src/vm3.c     **** 
9151:src/vm3.c     **** 
9152:src/vm3.c     **** swPLUSaddiu:
9153:src/vm3.c     **** #if INDIRECT_DEBUG
9154:src/vm3.c     **** printf("%d|sw\n",counter);
9155:src/vm3.c     **** counter++;
9156:src/vm3.c     **** #endif
9157:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9158:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9159:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9160:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
9161:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
9162:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
9163:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
9164:src/vm3.c     **** PC  =  nPC;
9165:src/vm3.c     **** nPC  += 4;
9166:src/vm3.c     **** 
9167:src/vm3.c     **** #if INDIRECT_DEBUG
9168:src/vm3.c     **** printf("%d|addiu\n",counter);
9169:src/vm3.c     **** counter++;
9170:src/vm3.c     **** #endif
9171:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9172:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9173:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9174:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
9175:src/vm3.c     **** PC  =  nPC;
9176:src/vm3.c     **** nPC  += 4;
9177:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9178:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9179:src/vm3.c     ****   if (op0 == 0x0) {
9180:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9181:src/vm3.c     ****     op0 = op0 + funct;
9182:src/vm3.c     ****   }
9183:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 437


9184:src/vm3.c     ****     op0 = op0 + FIX_OP;
9185:src/vm3.c     ****   }
9186:src/vm3.c     **** 
9187:src/vm3.c     **** p = array;
9188:src/vm3.c     **** p = p[op0].next_level;
9189:src/vm3.c     **** 
9190:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9191:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9192:src/vm3.c     ****   if (op1 == 0x0) {
9193:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9194:src/vm3.c     ****     op1 = op1 + funct;
9195:src/vm3.c     ****   }
9196:src/vm3.c     ****     else {
9197:src/vm3.c     ****     op1 = op1 + FIX_OP;
9198:src/vm3.c     ****   }
9199:src/vm3.c     **** 
9200:src/vm3.c     **** goto *p[op1].code;
9201:src/vm3.c     **** 
9202:src/vm3.c     **** 
9203:src/vm3.c     **** sllPLUSblez:
9204:src/vm3.c     **** #if INDIRECT_DEBUG
9205:src/vm3.c     **** printf("%d|sll\n",counter);
9206:src/vm3.c     **** counter++;
9207:src/vm3.c     **** #endif
9208:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
9209:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9210:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
9211:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
9212:src/vm3.c     **** PC  =  nPC;
9213:src/vm3.c     **** nPC  += 4;
9214:src/vm3.c     **** 
9215:src/vm3.c     **** #if INDIRECT_DEBUG
9216:src/vm3.c     **** printf("%d|blez\n",counter);
9217:src/vm3.c     **** counter++;
9218:src/vm3.c     **** #endif
9219:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9220:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
9221:src/vm3.c     **** {
9222:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
9223:src/vm3.c     ****   PC  =  nPC;
9224:src/vm3.c     ****   nPC  += (immediate << 2);
9225:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
9226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9227:src/vm3.c     ****   if (op0 == 0x0) {
9228:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9229:src/vm3.c     ****     op0 = op0 + funct;
9230:src/vm3.c     ****   }
9231:src/vm3.c     ****     else {
9232:src/vm3.c     ****     op0 = op0 + FIX_OP;
9233:src/vm3.c     ****   }
9234:src/vm3.c     **** 
9235:src/vm3.c     **** p = array;
9236:src/vm3.c     **** p = p[op0].next_level;
9237:src/vm3.c     **** 
9238:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9239:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9240:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 438


9241:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9242:src/vm3.c     ****     op1 = op1 + funct;
9243:src/vm3.c     ****   }
9244:src/vm3.c     ****     else {
9245:src/vm3.c     ****     op1 = op1 + FIX_OP;
9246:src/vm3.c     ****   }
9247:src/vm3.c     **** 
9248:src/vm3.c     **** goto *p[op1].code;
9249:src/vm3.c     **** 
9250:src/vm3.c     **** 
9251:src/vm3.c     **** }
9252:src/vm3.c     **** else
9253:src/vm3.c     **** {
9254:src/vm3.c     ****   PC  =  nPC;
9255:src/vm3.c     ****   nPC  += 4;
9256:src/vm3.c     **** }
9257:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9258:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9259:src/vm3.c     ****   if (op0 == 0x0) {
9260:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9261:src/vm3.c     ****     op0 = op0 + funct;
9262:src/vm3.c     ****   }
9263:src/vm3.c     ****     else {
9264:src/vm3.c     ****     op0 = op0 + FIX_OP;
9265:src/vm3.c     ****   }
9266:src/vm3.c     **** 
9267:src/vm3.c     **** p = array;
9268:src/vm3.c     **** p = p[op0].next_level;
9269:src/vm3.c     **** 
9270:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9271:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9272:src/vm3.c     ****   if (op1 == 0x0) {
9273:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9274:src/vm3.c     ****     op1 = op1 + funct;
9275:src/vm3.c     ****   }
9276:src/vm3.c     ****     else {
9277:src/vm3.c     ****     op1 = op1 + FIX_OP;
9278:src/vm3.c     ****   }
9279:src/vm3.c     **** 
9280:src/vm3.c     **** goto *p[op1].code;
9281:src/vm3.c     **** 
9282:src/vm3.c     **** 
9283:src/vm3.c     **** swPLUSjal:
9284:src/vm3.c     **** #if INDIRECT_DEBUG
9285:src/vm3.c     **** printf("%d|sw\n",counter);
9286:src/vm3.c     **** counter++;
9287:src/vm3.c     **** #endif
9288:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9289:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9290:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9291:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
9292:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
9293:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
9294:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
9295:src/vm3.c     **** PC  =  nPC;
9296:src/vm3.c     **** nPC  += 4;
9297:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 439


9298:src/vm3.c     **** #if INDIRECT_DEBUG
9299:src/vm3.c     **** printf("%d|jal\n",counter);
9300:src/vm3.c     **** counter++;
9301:src/vm3.c     **** #endif
9302:src/vm3.c     **** RF[31] = PC + 8;
9303:src/vm3.c     **** PC = nPC;
9304:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
9305:src/vm3.c     **** nPC = address << 2;
9306:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9307:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9308:src/vm3.c     ****   if (op0 == 0x0) {
9309:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9310:src/vm3.c     ****     op0 = op0 + funct;
9311:src/vm3.c     ****   }
9312:src/vm3.c     ****     else {
9313:src/vm3.c     ****     op0 = op0 + FIX_OP;
9314:src/vm3.c     ****   }
9315:src/vm3.c     **** 
9316:src/vm3.c     **** p = array;
9317:src/vm3.c     **** p = p[op0].next_level;
9318:src/vm3.c     **** 
9319:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9320:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9321:src/vm3.c     ****   if (op1 == 0x0) {
9322:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9323:src/vm3.c     ****     op1 = op1 + funct;
9324:src/vm3.c     ****   }
9325:src/vm3.c     ****     else {
9326:src/vm3.c     ****     op1 = op1 + FIX_OP;
9327:src/vm3.c     ****   }
9328:src/vm3.c     **** 
9329:src/vm3.c     **** goto *p[op1].code;
9330:src/vm3.c     **** 
9331:src/vm3.c     **** 
9332:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9333:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9334:src/vm3.c     ****   if (op0 == 0x0) {
9335:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9336:src/vm3.c     ****     op0 = op0 + funct;
9337:src/vm3.c     ****   }
9338:src/vm3.c     ****     else {
9339:src/vm3.c     ****     op0 = op0 + FIX_OP;
9340:src/vm3.c     ****   }
9341:src/vm3.c     **** 
9342:src/vm3.c     **** p = array;
9343:src/vm3.c     **** p = p[op0].next_level;
9344:src/vm3.c     **** 
9345:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9346:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9347:src/vm3.c     ****   if (op1 == 0x0) {
9348:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9349:src/vm3.c     ****     op1 = op1 + funct;
9350:src/vm3.c     ****   }
9351:src/vm3.c     ****     else {
9352:src/vm3.c     ****     op1 = op1 + FIX_OP;
9353:src/vm3.c     ****   }
9354:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 440


9355:src/vm3.c     **** goto *p[op1].code;
9356:src/vm3.c     **** 
9357:src/vm3.c     **** 
9358:src/vm3.c     **** oriPLUSand:
9359:src/vm3.c     **** #if INDIRECT_DEBUG
9360:src/vm3.c     **** printf("%d|ori\n",counter);
9361:src/vm3.c     **** counter++;
9362:src/vm3.c     **** #endif
9363:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9364:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9365:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9366:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
9367:src/vm3.c     **** PC  =  nPC;
9368:src/vm3.c     **** nPC  += 4;
9369:src/vm3.c     **** 
9370:src/vm3.c     **** #if INDIRECT_DEBUG
9371:src/vm3.c     **** printf("%d|and\n",counter);
9372:src/vm3.c     **** counter++;
9373:src/vm3.c     **** #endif
9374:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9375:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9376:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9377:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
9378:src/vm3.c     **** PC  =  nPC;
9379:src/vm3.c     **** nPC  += 4;
9380:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9382:src/vm3.c     ****   if (op0 == 0x0) {
9383:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9384:src/vm3.c     ****     op0 = op0 + funct;
9385:src/vm3.c     ****   }
9386:src/vm3.c     ****     else {
9387:src/vm3.c     ****     op0 = op0 + FIX_OP;
9388:src/vm3.c     ****   }
9389:src/vm3.c     **** 
9390:src/vm3.c     **** p = array;
9391:src/vm3.c     **** p = p[op0].next_level;
9392:src/vm3.c     **** 
9393:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9395:src/vm3.c     ****   if (op1 == 0x0) {
9396:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9397:src/vm3.c     ****     op1 = op1 + funct;
9398:src/vm3.c     ****   }
9399:src/vm3.c     ****     else {
9400:src/vm3.c     ****     op1 = op1 + FIX_OP;
9401:src/vm3.c     ****   }
9402:src/vm3.c     **** 
9403:src/vm3.c     **** goto *p[op1].code;
9404:src/vm3.c     **** 
9405:src/vm3.c     **** 
9406:src/vm3.c     **** srlPLUSerror:
9407:src/vm3.c     **** #if INDIRECT_DEBUG
9408:src/vm3.c     **** printf("%d|srl\n",counter);
9409:src/vm3.c     **** counter++;
9410:src/vm3.c     **** #endif
9411:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 441


9412:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9413:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
9414:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
9415:src/vm3.c     **** PC  =  nPC;
9416:src/vm3.c     **** nPC  += 4;
9417:src/vm3.c     **** 
9418:src/vm3.c     **** #if INDIRECT_DEBUG
9419:src/vm3.c     **** printf("Error, unknown instr1uction %d.\n", instr1);
9420:src/vm3.c     **** #endif
9421:src/vm3.c     **** PC  =  nPC;
9422:src/vm3.c     **** nPC  += 4;
9423:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9424:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9425:src/vm3.c     ****   if (op0 == 0x0) {
9426:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9427:src/vm3.c     ****     op0 = op0 + funct;
9428:src/vm3.c     ****   }
9429:src/vm3.c     ****     else {
9430:src/vm3.c     ****     op0 = op0 + FIX_OP;
9431:src/vm3.c     ****   }
9432:src/vm3.c     **** 
9433:src/vm3.c     **** p = array;
9434:src/vm3.c     **** p = p[op0].next_level;
9435:src/vm3.c     **** 
9436:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9437:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9438:src/vm3.c     ****   if (op1 == 0x0) {
9439:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9440:src/vm3.c     ****     op1 = op1 + funct;
9441:src/vm3.c     ****   }
9442:src/vm3.c     ****     else {
9443:src/vm3.c     ****     op1 = op1 + FIX_OP;
9444:src/vm3.c     ****   }
9445:src/vm3.c     **** 
9446:src/vm3.c     **** goto *p[op1].code;
9447:src/vm3.c     **** 
9448:src/vm3.c     **** 
9449:src/vm3.c     **** subuPLUSaddiu:
9450:src/vm3.c     **** #if INDIRECT_DEBUG
9451:src/vm3.c     **** printf("%d|subu\n",counter);
9452:src/vm3.c     **** counter++;
9453:src/vm3.c     **** #endif
9454:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9455:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9456:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
9457:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
9458:src/vm3.c     **** PC  =  nPC;
9459:src/vm3.c     **** nPC  += 4;
9460:src/vm3.c     **** 
9461:src/vm3.c     **** #if INDIRECT_DEBUG
9462:src/vm3.c     **** printf("%d|addiu\n",counter);
9463:src/vm3.c     **** counter++;
9464:src/vm3.c     **** #endif
9465:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9466:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9467:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9468:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
GAS LISTING /tmp/cc15eBE3.s 			page 442


9469:src/vm3.c     **** PC  =  nPC;
9470:src/vm3.c     **** nPC  += 4;
9471:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9472:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9473:src/vm3.c     ****   if (op0 == 0x0) {
9474:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9475:src/vm3.c     ****     op0 = op0 + funct;
9476:src/vm3.c     ****   }
9477:src/vm3.c     ****     else {
9478:src/vm3.c     ****     op0 = op0 + FIX_OP;
9479:src/vm3.c     ****   }
9480:src/vm3.c     **** 
9481:src/vm3.c     **** p = array;
9482:src/vm3.c     **** p = p[op0].next_level;
9483:src/vm3.c     **** 
9484:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9485:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9486:src/vm3.c     ****   if (op1 == 0x0) {
9487:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9488:src/vm3.c     ****     op1 = op1 + funct;
9489:src/vm3.c     ****   }
9490:src/vm3.c     ****     else {
9491:src/vm3.c     ****     op1 = op1 + FIX_OP;
9492:src/vm3.c     ****   }
9493:src/vm3.c     **** 
9494:src/vm3.c     **** goto *p[op1].code;
9495:src/vm3.c     **** 
9496:src/vm3.c     **** 
9497:src/vm3.c     **** addiuPLUSaddu:
9498:src/vm3.c     **** #if INDIRECT_DEBUG
9499:src/vm3.c     **** printf("%d|addiu\n",counter);
9500:src/vm3.c     **** counter++;
9501:src/vm3.c     **** #endif
9502:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9503:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9504:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9505:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
9506:src/vm3.c     **** PC  =  nPC;
9507:src/vm3.c     **** nPC  += 4;
9508:src/vm3.c     **** 
9509:src/vm3.c     **** #if INDIRECT_DEBUG
9510:src/vm3.c     **** printf("%d|addu\n",counter);
9511:src/vm3.c     **** counter++;
9512:src/vm3.c     **** #endif
9513:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9514:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9515:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9516:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
9517:src/vm3.c     **** PC  =  nPC;
9518:src/vm3.c     **** nPC  += 4;
9519:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9520:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9521:src/vm3.c     ****   if (op0 == 0x0) {
9522:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9523:src/vm3.c     ****     op0 = op0 + funct;
9524:src/vm3.c     ****   }
9525:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 443


9526:src/vm3.c     ****     op0 = op0 + FIX_OP;
9527:src/vm3.c     ****   }
9528:src/vm3.c     **** 
9529:src/vm3.c     **** p = array;
9530:src/vm3.c     **** p = p[op0].next_level;
9531:src/vm3.c     **** 
9532:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9533:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9534:src/vm3.c     ****   if (op1 == 0x0) {
9535:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9536:src/vm3.c     ****     op1 = op1 + funct;
9537:src/vm3.c     ****   }
9538:src/vm3.c     ****     else {
9539:src/vm3.c     ****     op1 = op1 + FIX_OP;
9540:src/vm3.c     ****   }
9541:src/vm3.c     **** 
9542:src/vm3.c     **** goto *p[op1].code;
9543:src/vm3.c     **** 
9544:src/vm3.c     **** 
9545:src/vm3.c     **** addiuPLUSslti:
9546:src/vm3.c     **** #if INDIRECT_DEBUG
9547:src/vm3.c     **** printf("%d|addiu\n",counter);
9548:src/vm3.c     **** counter++;
9549:src/vm3.c     **** #endif
9550:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9551:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9552:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9553:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
9554:src/vm3.c     **** PC  =  nPC;
9555:src/vm3.c     **** nPC  += 4;
9556:src/vm3.c     **** 
9557:src/vm3.c     **** #if INDIRECT_DEBUG
9558:src/vm3.c     **** printf("%d|slti\n",counter);
9559:src/vm3.c     **** counter++;
9560:src/vm3.c     **** #endif
9561:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9562:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9563:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9564:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
9565:src/vm3.c     **** PC  =  nPC;
9566:src/vm3.c     **** nPC  += 4;
9567:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9569:src/vm3.c     ****   if (op0 == 0x0) {
9570:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9571:src/vm3.c     ****     op0 = op0 + funct;
9572:src/vm3.c     ****   }
9573:src/vm3.c     ****     else {
9574:src/vm3.c     ****     op0 = op0 + FIX_OP;
9575:src/vm3.c     ****   }
9576:src/vm3.c     **** 
9577:src/vm3.c     **** p = array;
9578:src/vm3.c     **** p = p[op0].next_level;
9579:src/vm3.c     **** 
9580:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9582:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 444


9583:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9584:src/vm3.c     ****     op1 = op1 + funct;
9585:src/vm3.c     ****   }
9586:src/vm3.c     ****     else {
9587:src/vm3.c     ****     op1 = op1 + FIX_OP;
9588:src/vm3.c     ****   }
9589:src/vm3.c     **** 
9590:src/vm3.c     **** goto *p[op1].code;
9591:src/vm3.c     **** 
9592:src/vm3.c     **** 
9593:src/vm3.c     **** addiuPLUSsltu:
9594:src/vm3.c     **** #if INDIRECT_DEBUG
9595:src/vm3.c     **** printf("%d|addiu\n",counter);
9596:src/vm3.c     **** counter++;
9597:src/vm3.c     **** #endif
9598:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9599:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9600:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9601:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
9602:src/vm3.c     **** PC  =  nPC;
9603:src/vm3.c     **** nPC  += 4;
9604:src/vm3.c     **** 
9605:src/vm3.c     **** #if INDIRECT_DEBUG
9606:src/vm3.c     **** printf("%d|sltu\n",counter);
9607:src/vm3.c     **** counter++;
9608:src/vm3.c     **** #endif
9609:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9610:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9611:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9612:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
9613:src/vm3.c     **** PC  =  nPC;
9614:src/vm3.c     **** nPC  += 4;
9615:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9616:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9617:src/vm3.c     ****   if (op0 == 0x0) {
9618:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9619:src/vm3.c     ****     op0 = op0 + funct;
9620:src/vm3.c     ****   }
9621:src/vm3.c     ****     else {
9622:src/vm3.c     ****     op0 = op0 + FIX_OP;
9623:src/vm3.c     ****   }
9624:src/vm3.c     **** 
9625:src/vm3.c     **** p = array;
9626:src/vm3.c     **** p = p[op0].next_level;
9627:src/vm3.c     **** 
9628:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9629:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9630:src/vm3.c     ****   if (op1 == 0x0) {
9631:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9632:src/vm3.c     ****     op1 = op1 + funct;
9633:src/vm3.c     ****   }
9634:src/vm3.c     ****     else {
9635:src/vm3.c     ****     op1 = op1 + FIX_OP;
9636:src/vm3.c     ****   }
9637:src/vm3.c     **** 
9638:src/vm3.c     **** goto *p[op1].code;
9639:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 445


9640:src/vm3.c     **** 
9641:src/vm3.c     **** swPLUSlw:
9642:src/vm3.c     **** #if INDIRECT_DEBUG
9643:src/vm3.c     **** printf("%d|sw\n",counter);
9644:src/vm3.c     **** counter++;
9645:src/vm3.c     **** #endif
9646:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9647:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9648:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9649:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
9650:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
9651:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
9652:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
9653:src/vm3.c     **** PC  =  nPC;
9654:src/vm3.c     **** nPC  += 4;
9655:src/vm3.c     **** 
9656:src/vm3.c     **** #if INDIRECT_DEBUG
9657:src/vm3.c     **** printf("%d|lw\n",counter);
9658:src/vm3.c     **** counter++;
9659:src/vm3.c     **** #endif
9660:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9661:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9662:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9663:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
9664:src/vm3.c     **** PC  =  nPC;
9665:src/vm3.c     **** nPC  += 4;
9666:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9667:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9668:src/vm3.c     ****   if (op0 == 0x0) {
9669:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9670:src/vm3.c     ****     op0 = op0 + funct;
9671:src/vm3.c     ****   }
9672:src/vm3.c     ****     else {
9673:src/vm3.c     ****     op0 = op0 + FIX_OP;
9674:src/vm3.c     ****   }
9675:src/vm3.c     **** 
9676:src/vm3.c     **** p = array;
9677:src/vm3.c     **** p = p[op0].next_level;
9678:src/vm3.c     **** 
9679:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9680:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9681:src/vm3.c     ****   if (op1 == 0x0) {
9682:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9683:src/vm3.c     ****     op1 = op1 + funct;
9684:src/vm3.c     ****   }
9685:src/vm3.c     ****     else {
9686:src/vm3.c     ****     op1 = op1 + FIX_OP;
9687:src/vm3.c     ****   }
9688:src/vm3.c     **** 
9689:src/vm3.c     **** goto *p[op1].code;
9690:src/vm3.c     **** 
9691:src/vm3.c     **** 
9692:src/vm3.c     **** sllPLUSandi:
9693:src/vm3.c     **** #if INDIRECT_DEBUG
9694:src/vm3.c     **** printf("%d|sll\n",counter);
9695:src/vm3.c     **** counter++;
9696:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 446


9697:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
9698:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9699:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
9700:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
9701:src/vm3.c     **** PC  =  nPC;
9702:src/vm3.c     **** nPC  += 4;
9703:src/vm3.c     **** 
9704:src/vm3.c     **** #if INDIRECT_DEBUG
9705:src/vm3.c     **** printf("%d|andi\n",counter);
9706:src/vm3.c     **** counter++;
9707:src/vm3.c     **** #endif
9708:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9709:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9710:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9711:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
9712:src/vm3.c     **** PC  =  nPC;
9713:src/vm3.c     **** nPC  += 4;
9714:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9715:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9716:src/vm3.c     ****   if (op0 == 0x0) {
9717:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9718:src/vm3.c     ****     op0 = op0 + funct;
9719:src/vm3.c     ****   }
9720:src/vm3.c     ****     else {
9721:src/vm3.c     ****     op0 = op0 + FIX_OP;
9722:src/vm3.c     ****   }
9723:src/vm3.c     **** 
9724:src/vm3.c     **** p = array;
9725:src/vm3.c     **** p = p[op0].next_level;
9726:src/vm3.c     **** 
9727:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9728:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9729:src/vm3.c     ****   if (op1 == 0x0) {
9730:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9731:src/vm3.c     ****     op1 = op1 + funct;
9732:src/vm3.c     ****   }
9733:src/vm3.c     ****     else {
9734:src/vm3.c     ****     op1 = op1 + FIX_OP;
9735:src/vm3.c     ****   }
9736:src/vm3.c     **** 
9737:src/vm3.c     **** goto *p[op1].code;
9738:src/vm3.c     **** 
9739:src/vm3.c     **** 
9740:src/vm3.c     **** andiPLUSsll:
9741:src/vm3.c     **** #if INDIRECT_DEBUG
9742:src/vm3.c     **** printf("%d|andi\n",counter);
9743:src/vm3.c     **** counter++;
9744:src/vm3.c     **** #endif
9745:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9746:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9747:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9748:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
9749:src/vm3.c     **** PC  =  nPC;
9750:src/vm3.c     **** nPC  += 4;
9751:src/vm3.c     **** 
9752:src/vm3.c     **** #if INDIRECT_DEBUG
9753:src/vm3.c     **** printf("%d|sll\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 447


9754:src/vm3.c     **** counter++;
9755:src/vm3.c     **** #endif
9756:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
9757:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9758:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9759:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
9760:src/vm3.c     **** PC  =  nPC;
9761:src/vm3.c     **** nPC  += 4;
9762:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9763:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9764:src/vm3.c     ****   if (op0 == 0x0) {
9765:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9766:src/vm3.c     ****     op0 = op0 + funct;
9767:src/vm3.c     ****   }
9768:src/vm3.c     ****     else {
9769:src/vm3.c     ****     op0 = op0 + FIX_OP;
9770:src/vm3.c     ****   }
9771:src/vm3.c     **** 
9772:src/vm3.c     **** p = array;
9773:src/vm3.c     **** p = p[op0].next_level;
9774:src/vm3.c     **** 
9775:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9776:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9777:src/vm3.c     ****   if (op1 == 0x0) {
9778:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9779:src/vm3.c     ****     op1 = op1 + funct;
9780:src/vm3.c     ****   }
9781:src/vm3.c     ****     else {
9782:src/vm3.c     ****     op1 = op1 + FIX_OP;
9783:src/vm3.c     ****   }
9784:src/vm3.c     **** 
9785:src/vm3.c     **** goto *p[op1].code;
9786:src/vm3.c     **** 
9787:src/vm3.c     **** 
9788:src/vm3.c     **** luiPLUSsrl:
9789:src/vm3.c     **** #if INDIRECT_DEBUG
9790:src/vm3.c     **** printf("%d|lui\n",counter);
9791:src/vm3.c     **** counter++;
9792:src/vm3.c     **** #endif
9793:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
9794:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9795:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9796:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
9797:src/vm3.c     **** PC  =  nPC;
9798:src/vm3.c     **** nPC  += 4;
9799:src/vm3.c     **** 
9800:src/vm3.c     **** #if INDIRECT_DEBUG
9801:src/vm3.c     **** printf("%d|srl\n",counter);
9802:src/vm3.c     **** counter++;
9803:src/vm3.c     **** #endif
9804:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
9805:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9806:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
9807:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
9808:src/vm3.c     **** PC  =  nPC;
9809:src/vm3.c     **** nPC  += 4;
9810:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 448


9811:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9812:src/vm3.c     ****   if (op0 == 0x0) {
9813:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9814:src/vm3.c     ****     op0 = op0 + funct;
9815:src/vm3.c     ****   }
9816:src/vm3.c     ****     else {
9817:src/vm3.c     ****     op0 = op0 + FIX_OP;
9818:src/vm3.c     ****   }
9819:src/vm3.c     **** 
9820:src/vm3.c     **** p = array;
9821:src/vm3.c     **** p = p[op0].next_level;
9822:src/vm3.c     **** 
9823:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9824:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9825:src/vm3.c     ****   if (op1 == 0x0) {
9826:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9827:src/vm3.c     ****     op1 = op1 + funct;
9828:src/vm3.c     ****   }
9829:src/vm3.c     ****     else {
9830:src/vm3.c     ****     op1 = op1 + FIX_OP;
9831:src/vm3.c     ****   }
9832:src/vm3.c     **** 
9833:src/vm3.c     **** goto *p[op1].code;
9834:src/vm3.c     **** 
9835:src/vm3.c     **** 
9836:src/vm3.c     **** swPLUSlui:
9837:src/vm3.c     **** #if INDIRECT_DEBUG
9838:src/vm3.c     **** printf("%d|sw\n",counter);
9839:src/vm3.c     **** counter++;
9840:src/vm3.c     **** #endif
9841:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9842:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9843:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9844:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
9845:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
9846:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
9847:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
9848:src/vm3.c     **** PC  =  nPC;
9849:src/vm3.c     **** nPC  += 4;
9850:src/vm3.c     **** 
9851:src/vm3.c     **** #if INDIRECT_DEBUG
9852:src/vm3.c     **** printf("%d|lui\n",counter);
9853:src/vm3.c     **** counter++;
9854:src/vm3.c     **** #endif
9855:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
9856:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
9857:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
9858:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
9859:src/vm3.c     **** PC  =  nPC;
9860:src/vm3.c     **** nPC  += 4;
9861:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9862:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9863:src/vm3.c     ****   if (op0 == 0x0) {
9864:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9865:src/vm3.c     ****     op0 = op0 + funct;
9866:src/vm3.c     ****   }
9867:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 449


9868:src/vm3.c     ****     op0 = op0 + FIX_OP;
9869:src/vm3.c     ****   }
9870:src/vm3.c     **** 
9871:src/vm3.c     **** p = array;
9872:src/vm3.c     **** p = p[op0].next_level;
9873:src/vm3.c     **** 
9874:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9875:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9876:src/vm3.c     ****   if (op1 == 0x0) {
9877:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9878:src/vm3.c     ****     op1 = op1 + funct;
9879:src/vm3.c     ****   }
9880:src/vm3.c     ****     else {
9881:src/vm3.c     ****     op1 = op1 + FIX_OP;
9882:src/vm3.c     ****   }
9883:src/vm3.c     **** 
9884:src/vm3.c     **** goto *p[op1].code;
9885:src/vm3.c     **** 
9886:src/vm3.c     **** 
9887:src/vm3.c     **** andiPLUSjr:
9888:src/vm3.c     **** #if INDIRECT_DEBUG
9889:src/vm3.c     **** printf("%d|andi\n",counter);
9890:src/vm3.c     **** counter++;
9891:src/vm3.c     **** #endif
9892:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9893:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9894:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9895:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
9896:src/vm3.c     **** PC  =  nPC;
9897:src/vm3.c     **** nPC  += 4;
9898:src/vm3.c     **** 
9899:src/vm3.c     **** #if INDIRECT_DEBUG
9900:src/vm3.c     **** printf("%d|jr\n",counter);
9901:src/vm3.c     **** counter++;
9902:src/vm3.c     **** #endif
9903:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
9904:src/vm3.c     **** PC = nPC;
9905:src/vm3.c     **** nPC = RF[rs];
9906:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9907:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9908:src/vm3.c     ****   if (op0 == 0x0) {
9909:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9910:src/vm3.c     ****     op0 = op0 + funct;
9911:src/vm3.c     ****   }
9912:src/vm3.c     ****     else {
9913:src/vm3.c     ****     op0 = op0 + FIX_OP;
9914:src/vm3.c     ****   }
9915:src/vm3.c     **** 
9916:src/vm3.c     **** p = array;
9917:src/vm3.c     **** p = p[op0].next_level;
9918:src/vm3.c     **** 
9919:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9920:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9921:src/vm3.c     ****   if (op1 == 0x0) {
9922:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9923:src/vm3.c     ****     op1 = op1 + funct;
9924:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 450


9925:src/vm3.c     ****     else {
9926:src/vm3.c     ****     op1 = op1 + FIX_OP;
9927:src/vm3.c     ****   }
9928:src/vm3.c     **** 
9929:src/vm3.c     **** goto *p[op1].code;
9930:src/vm3.c     **** 
9931:src/vm3.c     **** 
9932:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9933:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9934:src/vm3.c     ****   if (op0 == 0x0) {
9935:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
9936:src/vm3.c     ****     op0 = op0 + funct;
9937:src/vm3.c     ****   }
9938:src/vm3.c     ****     else {
9939:src/vm3.c     ****     op0 = op0 + FIX_OP;
9940:src/vm3.c     ****   }
9941:src/vm3.c     **** 
9942:src/vm3.c     **** p = array;
9943:src/vm3.c     **** p = p[op0].next_level;
9944:src/vm3.c     **** 
9945:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9946:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9947:src/vm3.c     ****   if (op1 == 0x0) {
9948:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9949:src/vm3.c     ****     op1 = op1 + funct;
9950:src/vm3.c     ****   }
9951:src/vm3.c     ****     else {
9952:src/vm3.c     ****     op1 = op1 + FIX_OP;
9953:src/vm3.c     ****   }
9954:src/vm3.c     **** 
9955:src/vm3.c     **** goto *p[op1].code;
9956:src/vm3.c     **** 
9957:src/vm3.c     **** 
9958:src/vm3.c     **** lwPLUSjal:
9959:src/vm3.c     **** #if INDIRECT_DEBUG
9960:src/vm3.c     **** printf("%d|lw\n",counter);
9961:src/vm3.c     **** counter++;
9962:src/vm3.c     **** #endif
9963:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
9964:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
9965:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
9966:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
9967:src/vm3.c     **** PC  =  nPC;
9968:src/vm3.c     **** nPC  += 4;
9969:src/vm3.c     **** 
9970:src/vm3.c     **** #if INDIRECT_DEBUG
9971:src/vm3.c     **** printf("%d|jal\n",counter);
9972:src/vm3.c     **** counter++;
9973:src/vm3.c     **** #endif
9974:src/vm3.c     **** RF[31] = PC + 8;
9975:src/vm3.c     **** PC = nPC;
9976:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
9977:src/vm3.c     **** nPC = address << 2;
9978:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
9979:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
9980:src/vm3.c     ****   if (op0 == 0x0) {
9981:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 451


9982:src/vm3.c     ****     op0 = op0 + funct;
9983:src/vm3.c     ****   }
9984:src/vm3.c     ****     else {
9985:src/vm3.c     ****     op0 = op0 + FIX_OP;
9986:src/vm3.c     ****   }
9987:src/vm3.c     **** 
9988:src/vm3.c     **** p = array;
9989:src/vm3.c     **** p = p[op0].next_level;
9990:src/vm3.c     **** 
9991:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
9992:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
9993:src/vm3.c     ****   if (op1 == 0x0) {
9994:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
9995:src/vm3.c     ****     op1 = op1 + funct;
9996:src/vm3.c     ****   }
9997:src/vm3.c     ****     else {
9998:src/vm3.c     ****     op1 = op1 + FIX_OP;
9999:src/vm3.c     ****   }
10000:src/vm3.c     **** 
10001:src/vm3.c     **** goto *p[op1].code;
10002:src/vm3.c     **** 
10003:src/vm3.c     **** 
10004:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10005:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10006:src/vm3.c     ****   if (op0 == 0x0) {
10007:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10008:src/vm3.c     ****     op0 = op0 + funct;
10009:src/vm3.c     ****   }
10010:src/vm3.c     ****     else {
10011:src/vm3.c     ****     op0 = op0 + FIX_OP;
10012:src/vm3.c     ****   }
10013:src/vm3.c     **** 
10014:src/vm3.c     **** p = array;
10015:src/vm3.c     **** p = p[op0].next_level;
10016:src/vm3.c     **** 
10017:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10018:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10019:src/vm3.c     ****   if (op1 == 0x0) {
10020:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10021:src/vm3.c     ****     op1 = op1 + funct;
10022:src/vm3.c     ****   }
10023:src/vm3.c     ****     else {
10024:src/vm3.c     ****     op1 = op1 + FIX_OP;
10025:src/vm3.c     ****   }
10026:src/vm3.c     **** 
10027:src/vm3.c     **** goto *p[op1].code;
10028:src/vm3.c     **** 
10029:src/vm3.c     **** 
10030:src/vm3.c     **** srlPLUSbne:
10031:src/vm3.c     **** #if INDIRECT_DEBUG
10032:src/vm3.c     **** printf("%d|srl\n",counter);
10033:src/vm3.c     **** counter++;
10034:src/vm3.c     **** #endif
10035:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
10036:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10037:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
10038:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
GAS LISTING /tmp/cc15eBE3.s 			page 452


10039:src/vm3.c     **** PC  =  nPC;
10040:src/vm3.c     **** nPC  += 4;
10041:src/vm3.c     **** 
10042:src/vm3.c     **** #if INDIRECT_DEBUG
10043:src/vm3.c     **** printf("%d|bne\n",counter);
10044:src/vm3.c     **** counter++;
10045:src/vm3.c     **** #endif
10046:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10047:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10048:src/vm3.c     **** if (RF[rs] != RF[rt])
10049:src/vm3.c     **** {
10050:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
10051:src/vm3.c     ****   PC  =  nPC;
10052:src/vm3.c     ****   nPC  += (immediate << 2);
10053:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
10054:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10055:src/vm3.c     ****   if (op0 == 0x0) {
10056:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10057:src/vm3.c     ****     op0 = op0 + funct;
10058:src/vm3.c     ****   }
10059:src/vm3.c     ****     else {
10060:src/vm3.c     ****     op0 = op0 + FIX_OP;
10061:src/vm3.c     ****   }
10062:src/vm3.c     **** 
10063:src/vm3.c     **** p = array;
10064:src/vm3.c     **** p = p[op0].next_level;
10065:src/vm3.c     **** 
10066:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10067:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10068:src/vm3.c     ****   if (op1 == 0x0) {
10069:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10070:src/vm3.c     ****     op1 = op1 + funct;
10071:src/vm3.c     ****   }
10072:src/vm3.c     ****     else {
10073:src/vm3.c     ****     op1 = op1 + FIX_OP;
10074:src/vm3.c     ****   }
10075:src/vm3.c     **** 
10076:src/vm3.c     **** goto *p[op1].code;
10077:src/vm3.c     **** 
10078:src/vm3.c     **** 
10079:src/vm3.c     **** }
10080:src/vm3.c     **** else
10081:src/vm3.c     **** {
10082:src/vm3.c     ****   PC  =  nPC;
10083:src/vm3.c     ****   nPC  += 4;
10084:src/vm3.c     **** }
10085:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10086:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10087:src/vm3.c     ****   if (op0 == 0x0) {
10088:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10089:src/vm3.c     ****     op0 = op0 + funct;
10090:src/vm3.c     ****   }
10091:src/vm3.c     ****     else {
10092:src/vm3.c     ****     op0 = op0 + FIX_OP;
10093:src/vm3.c     ****   }
10094:src/vm3.c     **** 
10095:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 453


10096:src/vm3.c     **** p = p[op0].next_level;
10097:src/vm3.c     **** 
10098:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10099:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10100:src/vm3.c     ****   if (op1 == 0x0) {
10101:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10102:src/vm3.c     ****     op1 = op1 + funct;
10103:src/vm3.c     ****   }
10104:src/vm3.c     ****     else {
10105:src/vm3.c     ****     op1 = op1 + FIX_OP;
10106:src/vm3.c     ****   }
10107:src/vm3.c     **** 
10108:src/vm3.c     **** goto *p[op1].code;
10109:src/vm3.c     **** 
10110:src/vm3.c     **** 
10111:src/vm3.c     **** srlPLUSxor:
10112:src/vm3.c     **** #if INDIRECT_DEBUG
10113:src/vm3.c     **** printf("%d|srl\n",counter);
10114:src/vm3.c     **** counter++;
10115:src/vm3.c     **** #endif
10116:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
10117:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10118:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
10119:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
10120:src/vm3.c     **** PC  =  nPC;
10121:src/vm3.c     **** nPC  += 4;
10122:src/vm3.c     **** 
10123:src/vm3.c     **** #if INDIRECT_DEBUG
10124:src/vm3.c     **** printf("%d|xor\n",counter);
10125:src/vm3.c     **** counter++;
10126:src/vm3.c     **** #endif
10127:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10128:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10129:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
10130:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
10131:src/vm3.c     **** PC  =  nPC;
10132:src/vm3.c     **** nPC  += 4;
10133:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10134:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10135:src/vm3.c     ****   if (op0 == 0x0) {
10136:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10137:src/vm3.c     ****     op0 = op0 + funct;
10138:src/vm3.c     ****   }
10139:src/vm3.c     ****     else {
10140:src/vm3.c     ****     op0 = op0 + FIX_OP;
10141:src/vm3.c     ****   }
10142:src/vm3.c     **** 
10143:src/vm3.c     **** p = array;
10144:src/vm3.c     **** p = p[op0].next_level;
10145:src/vm3.c     **** 
10146:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10147:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10148:src/vm3.c     ****   if (op1 == 0x0) {
10149:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10150:src/vm3.c     ****     op1 = op1 + funct;
10151:src/vm3.c     ****   }
10152:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 454


10153:src/vm3.c     ****     op1 = op1 + FIX_OP;
10154:src/vm3.c     ****   }
10155:src/vm3.c     **** 
10156:src/vm3.c     **** goto *p[op1].code;
10157:src/vm3.c     **** 
10158:src/vm3.c     **** 
10159:src/vm3.c     **** oriPLUSaddu:
10160:src/vm3.c     **** #if INDIRECT_DEBUG
10161:src/vm3.c     **** printf("%d|ori\n",counter);
10162:src/vm3.c     **** counter++;
10163:src/vm3.c     **** #endif
10164:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10165:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10166:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
10167:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
10168:src/vm3.c     **** PC  =  nPC;
10169:src/vm3.c     **** nPC  += 4;
10170:src/vm3.c     **** 
10171:src/vm3.c     **** #if INDIRECT_DEBUG
10172:src/vm3.c     **** printf("%d|addu\n",counter);
10173:src/vm3.c     **** counter++;
10174:src/vm3.c     **** #endif
10175:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10176:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10177:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
10178:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
10179:src/vm3.c     **** PC  =  nPC;
10180:src/vm3.c     **** nPC  += 4;
10181:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10182:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10183:src/vm3.c     ****   if (op0 == 0x0) {
10184:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10185:src/vm3.c     ****     op0 = op0 + funct;
10186:src/vm3.c     ****   }
10187:src/vm3.c     ****     else {
10188:src/vm3.c     ****     op0 = op0 + FIX_OP;
10189:src/vm3.c     ****   }
10190:src/vm3.c     **** 
10191:src/vm3.c     **** p = array;
10192:src/vm3.c     **** p = p[op0].next_level;
10193:src/vm3.c     **** 
10194:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10195:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10196:src/vm3.c     ****   if (op1 == 0x0) {
10197:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10198:src/vm3.c     ****     op1 = op1 + funct;
10199:src/vm3.c     ****   }
10200:src/vm3.c     ****     else {
10201:src/vm3.c     ****     op1 = op1 + FIX_OP;
10202:src/vm3.c     ****   }
10203:src/vm3.c     **** 
10204:src/vm3.c     **** goto *p[op1].code;
10205:src/vm3.c     **** 
10206:src/vm3.c     **** 
10207:src/vm3.c     **** bnePLUSaddiu:
10208:src/vm3.c     **** #if INDIRECT_DEBUG
10209:src/vm3.c     **** printf("%d|bne\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 455


10210:src/vm3.c     **** counter++;
10211:src/vm3.c     **** #endif
10212:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10213:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10214:src/vm3.c     **** if (RF[rs] != RF[rt])
10215:src/vm3.c     **** {
10216:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
10217:src/vm3.c     ****   PC  =  nPC;
10218:src/vm3.c     ****   nPC  += (immediate << 2);
10219:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
10220:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10221:src/vm3.c     ****   if (op0 == 0x0) {
10222:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10223:src/vm3.c     ****     op0 = op0 + funct;
10224:src/vm3.c     ****   }
10225:src/vm3.c     ****     else {
10226:src/vm3.c     ****     op0 = op0 + FIX_OP;
10227:src/vm3.c     ****   }
10228:src/vm3.c     **** 
10229:src/vm3.c     **** p = array;
10230:src/vm3.c     **** p = p[op0].next_level;
10231:src/vm3.c     **** 
10232:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10233:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10234:src/vm3.c     ****   if (op1 == 0x0) {
10235:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10236:src/vm3.c     ****     op1 = op1 + funct;
10237:src/vm3.c     ****   }
10238:src/vm3.c     ****     else {
10239:src/vm3.c     ****     op1 = op1 + FIX_OP;
10240:src/vm3.c     ****   }
10241:src/vm3.c     **** 
10242:src/vm3.c     **** goto *p[op1].code;
10243:src/vm3.c     **** 
10244:src/vm3.c     **** 
10245:src/vm3.c     **** }
10246:src/vm3.c     **** else
10247:src/vm3.c     **** {
10248:src/vm3.c     ****   PC  =  nPC;
10249:src/vm3.c     ****   nPC  += 4;
10250:src/vm3.c     **** }
10251:src/vm3.c     **** 
10252:src/vm3.c     **** #if INDIRECT_DEBUG
10253:src/vm3.c     **** printf("%d|addiu\n",counter);
10254:src/vm3.c     **** counter++;
10255:src/vm3.c     **** #endif
10256:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10257:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10258:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
10259:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
10260:src/vm3.c     **** PC  =  nPC;
10261:src/vm3.c     **** nPC  += 4;
10262:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10263:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10264:src/vm3.c     ****   if (op0 == 0x0) {
10265:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10266:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 456


10267:src/vm3.c     ****   }
10268:src/vm3.c     ****     else {
10269:src/vm3.c     ****     op0 = op0 + FIX_OP;
10270:src/vm3.c     ****   }
10271:src/vm3.c     **** 
10272:src/vm3.c     **** p = array;
10273:src/vm3.c     **** p = p[op0].next_level;
10274:src/vm3.c     **** 
10275:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10276:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10277:src/vm3.c     ****   if (op1 == 0x0) {
10278:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10279:src/vm3.c     ****     op1 = op1 + funct;
10280:src/vm3.c     ****   }
10281:src/vm3.c     ****     else {
10282:src/vm3.c     ****     op1 = op1 + FIX_OP;
10283:src/vm3.c     ****   }
10284:src/vm3.c     **** 
10285:src/vm3.c     **** goto *p[op1].code;
10286:src/vm3.c     **** 
10287:src/vm3.c     **** 
10288:src/vm3.c     **** bgtzPLUSsll:
10289:src/vm3.c     **** #if INDIRECT_DEBUG
10290:src/vm3.c     **** printf("%d|bgtz\n",counter);
10291:src/vm3.c     **** counter++;
10292:src/vm3.c     **** #endif
10293:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10294:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
10295:src/vm3.c     **** {
10296:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
10297:src/vm3.c     ****   PC  =  nPC;
10298:src/vm3.c     ****   nPC  += (immediate << 2);
10299:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
10300:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10301:src/vm3.c     ****   if (op0 == 0x0) {
10302:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10303:src/vm3.c     ****     op0 = op0 + funct;
10304:src/vm3.c     ****   }
10305:src/vm3.c     ****     else {
10306:src/vm3.c     ****     op0 = op0 + FIX_OP;
10307:src/vm3.c     ****   }
10308:src/vm3.c     **** 
10309:src/vm3.c     **** p = array;
10310:src/vm3.c     **** p = p[op0].next_level;
10311:src/vm3.c     **** 
10312:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10313:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10314:src/vm3.c     ****   if (op1 == 0x0) {
10315:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10316:src/vm3.c     ****     op1 = op1 + funct;
10317:src/vm3.c     ****   }
10318:src/vm3.c     ****     else {
10319:src/vm3.c     ****     op1 = op1 + FIX_OP;
10320:src/vm3.c     ****   }
10321:src/vm3.c     **** 
10322:src/vm3.c     **** goto *p[op1].code;
10323:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 457


10324:src/vm3.c     **** 
10325:src/vm3.c     **** }
10326:src/vm3.c     **** else
10327:src/vm3.c     **** {
10328:src/vm3.c     ****   PC  =  nPC;
10329:src/vm3.c     ****   nPC  += 4;
10330:src/vm3.c     **** }
10331:src/vm3.c     **** 
10332:src/vm3.c     **** #if INDIRECT_DEBUG
10333:src/vm3.c     **** printf("%d|sll\n",counter);
10334:src/vm3.c     **** counter++;
10335:src/vm3.c     **** #endif
10336:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
10337:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10338:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
10339:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
10340:src/vm3.c     **** PC  =  nPC;
10341:src/vm3.c     **** nPC  += 4;
10342:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10343:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10344:src/vm3.c     ****   if (op0 == 0x0) {
10345:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10346:src/vm3.c     ****     op0 = op0 + funct;
10347:src/vm3.c     ****   }
10348:src/vm3.c     ****     else {
10349:src/vm3.c     ****     op0 = op0 + FIX_OP;
10350:src/vm3.c     ****   }
10351:src/vm3.c     **** 
10352:src/vm3.c     **** p = array;
10353:src/vm3.c     **** p = p[op0].next_level;
10354:src/vm3.c     **** 
10355:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10356:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10357:src/vm3.c     ****   if (op1 == 0x0) {
10358:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10359:src/vm3.c     ****     op1 = op1 + funct;
10360:src/vm3.c     ****   }
10361:src/vm3.c     ****     else {
10362:src/vm3.c     ****     op1 = op1 + FIX_OP;
10363:src/vm3.c     ****   }
10364:src/vm3.c     **** 
10365:src/vm3.c     **** goto *p[op1].code;
10366:src/vm3.c     **** 
10367:src/vm3.c     **** 
10368:src/vm3.c     **** luiPLUSjal:
10369:src/vm3.c     **** #if INDIRECT_DEBUG
10370:src/vm3.c     **** printf("%d|lui\n",counter);
10371:src/vm3.c     **** counter++;
10372:src/vm3.c     **** #endif
10373:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
10374:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10375:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
10376:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
10377:src/vm3.c     **** PC  =  nPC;
10378:src/vm3.c     **** nPC  += 4;
10379:src/vm3.c     **** 
10380:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 458


10381:src/vm3.c     **** printf("%d|jal\n",counter);
10382:src/vm3.c     **** counter++;
10383:src/vm3.c     **** #endif
10384:src/vm3.c     **** RF[31] = PC + 8;
10385:src/vm3.c     **** PC = nPC;
10386:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
10387:src/vm3.c     **** nPC = address << 2;
10388:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10389:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10390:src/vm3.c     ****   if (op0 == 0x0) {
10391:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10392:src/vm3.c     ****     op0 = op0 + funct;
10393:src/vm3.c     ****   }
10394:src/vm3.c     ****     else {
10395:src/vm3.c     ****     op0 = op0 + FIX_OP;
10396:src/vm3.c     ****   }
10397:src/vm3.c     **** 
10398:src/vm3.c     **** p = array;
10399:src/vm3.c     **** p = p[op0].next_level;
10400:src/vm3.c     **** 
10401:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10403:src/vm3.c     ****   if (op1 == 0x0) {
10404:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10405:src/vm3.c     ****     op1 = op1 + funct;
10406:src/vm3.c     ****   }
10407:src/vm3.c     ****     else {
10408:src/vm3.c     ****     op1 = op1 + FIX_OP;
10409:src/vm3.c     ****   }
10410:src/vm3.c     **** 
10411:src/vm3.c     **** goto *p[op1].code;
10412:src/vm3.c     **** 
10413:src/vm3.c     **** 
10414:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10415:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10416:src/vm3.c     ****   if (op0 == 0x0) {
10417:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10418:src/vm3.c     ****     op0 = op0 + funct;
10419:src/vm3.c     ****   }
10420:src/vm3.c     ****     else {
10421:src/vm3.c     ****     op0 = op0 + FIX_OP;
10422:src/vm3.c     ****   }
10423:src/vm3.c     **** 
10424:src/vm3.c     **** p = array;
10425:src/vm3.c     **** p = p[op0].next_level;
10426:src/vm3.c     **** 
10427:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10428:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10429:src/vm3.c     ****   if (op1 == 0x0) {
10430:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10431:src/vm3.c     ****     op1 = op1 + funct;
10432:src/vm3.c     ****   }
10433:src/vm3.c     ****     else {
10434:src/vm3.c     ****     op1 = op1 + FIX_OP;
10435:src/vm3.c     ****   }
10436:src/vm3.c     **** 
10437:src/vm3.c     **** goto *p[op1].code;
GAS LISTING /tmp/cc15eBE3.s 			page 459


10438:src/vm3.c     **** 
10439:src/vm3.c     **** 
10440:src/vm3.c     **** addiuPLUSerror:
10441:src/vm3.c     **** #if INDIRECT_DEBUG
10442:src/vm3.c     **** printf("%d|addiu\n",counter);
10443:src/vm3.c     **** counter++;
10444:src/vm3.c     **** #endif
10445:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10446:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10447:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
10448:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
10449:src/vm3.c     **** PC  =  nPC;
10450:src/vm3.c     **** nPC  += 4;
10451:src/vm3.c     **** 
10452:src/vm3.c     **** #if INDIRECT_DEBUG
10453:src/vm3.c     **** printf("Error, unknown instr1uction %d.\n", instr1);
10454:src/vm3.c     **** #endif
10455:src/vm3.c     **** PC  =  nPC;
10456:src/vm3.c     **** nPC  += 4;
10457:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10458:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10459:src/vm3.c     ****   if (op0 == 0x0) {
10460:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10461:src/vm3.c     ****     op0 = op0 + funct;
10462:src/vm3.c     ****   }
10463:src/vm3.c     ****     else {
10464:src/vm3.c     ****     op0 = op0 + FIX_OP;
10465:src/vm3.c     ****   }
10466:src/vm3.c     **** 
10467:src/vm3.c     **** p = array;
10468:src/vm3.c     **** p = p[op0].next_level;
10469:src/vm3.c     **** 
10470:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10471:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10472:src/vm3.c     ****   if (op1 == 0x0) {
10473:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10474:src/vm3.c     ****     op1 = op1 + funct;
10475:src/vm3.c     ****   }
10476:src/vm3.c     ****     else {
10477:src/vm3.c     ****     op1 = op1 + FIX_OP;
10478:src/vm3.c     ****   }
10479:src/vm3.c     **** 
10480:src/vm3.c     **** goto *p[op1].code;
10481:src/vm3.c     **** 
10482:src/vm3.c     **** 
10483:src/vm3.c     **** andPLUSsrl:
10484:src/vm3.c     **** #if INDIRECT_DEBUG
10485:src/vm3.c     **** printf("%d|and\n",counter);
10486:src/vm3.c     **** counter++;
10487:src/vm3.c     **** #endif
10488:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10489:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10490:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
10491:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
10492:src/vm3.c     **** PC  =  nPC;
10493:src/vm3.c     **** nPC  += 4;
10494:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 460


10495:src/vm3.c     **** #if INDIRECT_DEBUG
10496:src/vm3.c     **** printf("%d|srl\n",counter);
10497:src/vm3.c     **** counter++;
10498:src/vm3.c     **** #endif
10499:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
10500:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10501:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
10502:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
10503:src/vm3.c     **** PC  =  nPC;
10504:src/vm3.c     **** nPC  += 4;
10505:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10506:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10507:src/vm3.c     ****   if (op0 == 0x0) {
10508:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10509:src/vm3.c     ****     op0 = op0 + funct;
10510:src/vm3.c     ****   }
10511:src/vm3.c     ****     else {
10512:src/vm3.c     ****     op0 = op0 + FIX_OP;
10513:src/vm3.c     ****   }
10514:src/vm3.c     **** 
10515:src/vm3.c     **** p = array;
10516:src/vm3.c     **** p = p[op0].next_level;
10517:src/vm3.c     **** 
10518:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10519:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10520:src/vm3.c     ****   if (op1 == 0x0) {
10521:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10522:src/vm3.c     ****     op1 = op1 + funct;
10523:src/vm3.c     ****   }
10524:src/vm3.c     ****     else {
10525:src/vm3.c     ****     op1 = op1 + FIX_OP;
10526:src/vm3.c     ****   }
10527:src/vm3.c     **** 
10528:src/vm3.c     **** goto *p[op1].code;
10529:src/vm3.c     **** 
10530:src/vm3.c     **** 
10531:src/vm3.c     **** sraPLUSaddu:
10532:src/vm3.c     **** #if INDIRECT_DEBUG
10533:src/vm3.c     **** printf("%d|sra\n",counter);
10534:src/vm3.c     **** counter++;
10535:src/vm3.c     **** #endif
10536:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
10537:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
10538:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
10539:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
10540:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 7881              		.loc 1 10540 0
 7882 0d45 4183CCFF 		orl	$-1, %r12d
 516:src/vm3.c     **** 
 7883              		.loc 1 516 0
 7884 0d49 48C1E004 		salq	$4, %rax
 7885              	.LVL13:
 7886 0d4d 48038414 		addq	58088(%rsp,%rdx), %rax
 7886      E8E20000 
 7887 0d55 488B08   		movq	(%rax), %rcx
 7888              	.LVL14:
 7889              	.L269:
GAS LISTING /tmp/cc15eBE3.s 			page 461


 7890 0d58 FFE1     		jmp	*%rcx
 7891              	.L10:
 7892              	.LVL15:
 525:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 7893              		.loc 1 525 0
 7894 0d5a 4489C0   		movl	%r8d, %eax
 7895 0d5d C1E810   		shrl	$16, %eax
 527:src/vm3.c     **** PC  =  nPC;
 7896              		.loc 1 527 0
 7897 0d60 83E01F   		andl	$31, %eax
 7898 0d63 833C8500 		cmpl	$0, RF(,%rax,4)
 7898      00000000 
 7899 0d6b 7420     		je	.L270
 524:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 7900              		.loc 1 524 0 discriminator 1
 7901 0d6d 4489C0   		movl	%r8d, %eax
 526:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 7902              		.loc 1 526 0 discriminator 1
 7903 0d70 41C1E80B 		shrl	$11, %r8d
 7904              	.LVL16:
 524:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 7905              		.loc 1 524 0 discriminator 1
 7906 0d74 C1E815   		shrl	$21, %eax
 7907              	.LVL17:
 527:src/vm3.c     **** PC  =  nPC;
 7908              		.loc 1 527 0 discriminator 1
 7909 0d77 4183E01F 		andl	$31, %r8d
 7910              	.LVL18:
 7911 0d7b 83E01F   		andl	$31, %eax
 7912              	.LVL19:
 7913 0d7e 8B048500 		movl	RF(,%rax,4), %eax
 7913      000000
 7914 0d85 42890485 		movl	%eax, RF(,%r8,4)
 7914      00000000 
 7915              	.L270:
 528:src/vm3.c     **** nPC  += 4;
 7916              		.loc 1 528 0
 7917 0d8d 8B050000 		movl	nPC(%rip), %eax
 7917      0000
 530:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7918              		.loc 1 530 0
 7919 0d93 8D5003   		leal	3(%rax), %edx
 529:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 7920              		.loc 1 529 0
 7921 0d96 8D4804   		leal	4(%rax), %ecx
 528:src/vm3.c     **** nPC  += 4;
 7922              		.loc 1 528 0
 7923 0d99 89050000 		movl	%eax, PC(%rip)
 7923      0000
 530:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7924              		.loc 1 530 0
 7925 0d9f 440FB682 		movzbl	VM_memory(%rdx), %r8d
 7925      00000000 
 7926 0da7 89C2     		movl	%eax, %edx
 543:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7927              		.loc 1 543 0
 7928 0da9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 462


 7928      000000
 7929              	.LVL20:
 530:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7930              		.loc 1 530 0
 7931 0db0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 7931      000000
 529:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 7932              		.loc 1 529 0
 7933 0db7 890D0000 		movl	%ecx, nPC(%rip)
 7933      0000
 543:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7934              		.loc 1 543 0
 7935 0dbd 8D4805   		leal	5(%rax), %ecx
 7936 0dc0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 7936      000000
 530:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 7937              		.loc 1 530 0
 7938 0dc7 C1E218   		sall	$24, %edx
 7939 0dca 4109D0   		orl	%edx, %r8d
 7940 0dcd 8D5001   		leal	1(%rax), %edx
 7941 0dd0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 7941      000000
 7942 0dd7 C1E210   		sall	$16, %edx
 7943 0dda 4109D0   		orl	%edx, %r8d
 7944 0ddd 8D5002   		leal	2(%rax), %edx
 7945 0de0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 7945      000000
 7946 0de7 C1E208   		sall	$8, %edx
 7947 0dea 4109D0   		orl	%edx, %r8d
 7948              	.LVL21:
 531:src/vm3.c     ****   if (op0 == 0x0) {
 7949              		.loc 1 531 0
 7950 0ded 4489C6   		movl	%r8d, %esi
 533:src/vm3.c     ****     op0 = op0 + funct;
 7951              		.loc 1 533 0
 7952 0df0 4488C2   		movb	%r8b, %dl
 531:src/vm3.c     ****   if (op0 == 0x0) {
 7953              		.loc 1 531 0
 7954 0df3 C1EE1A   		shrl	$26, %esi
 7955              	.LVL22:
 533:src/vm3.c     ****     op0 = op0 + funct;
 7956              		.loc 1 533 0
 7957 0df6 83E23F   		andl	$63, %edx
 7958 0df9 8D7E2B   		leal	43(%rsi), %edi
 7959 0dfc 4084F6   		testb	%sil, %sil
 7960 0dff 0F45D7   		cmovne	%edi, %edx
 7961              	.LVL23:
 543:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7962              		.loc 1 543 0
 7963 0e02 C1E110   		sall	$16, %ecx
 7964 0e05 C1E318   		sall	$24, %ebx
 7965 0e08 09CB     		orl	%ecx, %ebx
 7966 0e0a 8D4807   		leal	7(%rax), %ecx
 7967 0e0d 83C006   		addl	$6, %eax
 7968 0e10 0FB68000 		movzbl	VM_memory(%rax), %eax
 7968      000000
 541:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 463


 7969              		.loc 1 541 0
 7970 0e17 0FB6D2   		movzbl	%dl, %edx
 543:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7971              		.loc 1 543 0
 7972 0e1a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 7972      000000
 541:src/vm3.c     **** 
 7973              		.loc 1 541 0
 7974 0e21 48C1E204 		salq	$4, %rdx
 7975              	.LVL24:
 543:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 7976              		.loc 1 543 0
 7977 0e25 C1E008   		sall	$8, %eax
 7978 0e28 09CB     		orl	%ecx, %ebx
 7979 0e2a 09C3     		orl	%eax, %ebx
 7980              	.LVL25:
 544:src/vm3.c     ****   if (op1 == 0x0) {
 7981              		.loc 1 544 0
 7982 0e2c 89D9     		movl	%ebx, %ecx
 546:src/vm3.c     ****     op1 = op1 + funct;
 7983              		.loc 1 546 0
 7984 0e2e 88D8     		movb	%bl, %al
 544:src/vm3.c     ****   if (op1 == 0x0) {
 7985              		.loc 1 544 0
 7986 0e30 C1E91A   		shrl	$26, %ecx
 7987              	.LVL26:
 546:src/vm3.c     ****     op1 = op1 + funct;
 7988              		.loc 1 546 0
 7989 0e33 83E03F   		andl	$63, %eax
 7990 0e36 8D712B   		leal	43(%rcx), %esi
 7991 0e39 84C9     		testb	%cl, %cl
 7992 0e3b 0F45C6   		cmovne	%esi, %eax
 7993              	.LVL27:
 553:src/vm3.c     **** 
 7994              		.loc 1 553 0
 7995 0e3e 0FB6C0   		movzbl	%al, %eax
 7996 0e41 48C1E004 		salq	$4, %rax
 7997              	.LVL28:
 7998 0e45 48038414 		addq	58088(%rsp,%rdx), %rax
 7998      E8E20000 
 7999 0e4d 488B08   		movq	(%rax), %rcx
 8000 0e50 E903FFFF 		jmp	.L269
 8000      FF
 8001              	.LVL29:
 8002              	.L242:
 562:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8003              		.loc 1 562 0
 8004 0e55 4489C0   		movl	%r8d, %eax
 8005 0e58 C1E810   		shrl	$16, %eax
 564:src/vm3.c     **** PC  =  nPC;
 8006              		.loc 1 564 0
 8007 0e5b 83E01F   		andl	$31, %eax
 8008 0e5e 833C8500 		cmpl	$0, RF(,%rax,4)
 8008      00000000 
 8009 0e66 7520     		jne	.L276
 561:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8010              		.loc 1 561 0 discriminator 1
GAS LISTING /tmp/cc15eBE3.s 			page 464


 8011 0e68 4489C0   		movl	%r8d, %eax
 563:src/vm3.c     **** if (RF[rt] == 0) RF[rd] = RF[rs];
 8012              		.loc 1 563 0 discriminator 1
 8013 0e6b 41C1E80B 		shrl	$11, %r8d
 8014              	.LVL30:
 561:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8015              		.loc 1 561 0 discriminator 1
 8016 0e6f C1E815   		shrl	$21, %eax
 8017              	.LVL31:
 564:src/vm3.c     **** PC  =  nPC;
 8018              		.loc 1 564 0 discriminator 1
 8019 0e72 4183E01F 		andl	$31, %r8d
 8020              	.LVL32:
 8021 0e76 83E01F   		andl	$31, %eax
 8022              	.LVL33:
 8023 0e79 8B048500 		movl	RF(,%rax,4), %eax
 8023      000000
 8024 0e80 42890485 		movl	%eax, RF(,%r8,4)
 8024      00000000 
 8025              	.L276:
 565:src/vm3.c     **** nPC  += 4;
 8026              		.loc 1 565 0
 8027 0e88 8B050000 		movl	nPC(%rip), %eax
 8027      0000
 567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8028              		.loc 1 567 0
 8029 0e8e 8D5003   		leal	3(%rax), %edx
 566:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8030              		.loc 1 566 0
 8031 0e91 8D4804   		leal	4(%rax), %ecx
 565:src/vm3.c     **** nPC  += 4;
 8032              		.loc 1 565 0
 8033 0e94 89050000 		movl	%eax, PC(%rip)
 8033      0000
 567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8034              		.loc 1 567 0
 8035 0e9a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8035      00000000 
 8036 0ea2 89C2     		movl	%eax, %edx
 580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8037              		.loc 1 580 0
 8038 0ea4 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8038      000000
 8039              	.LVL34:
 567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8040              		.loc 1 567 0
 8041 0eab 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8041      000000
 566:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8042              		.loc 1 566 0
 8043 0eb2 890D0000 		movl	%ecx, nPC(%rip)
 8043      0000
 580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8044              		.loc 1 580 0
 8045 0eb8 8D4805   		leal	5(%rax), %ecx
 8046 0ebb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8046      000000
GAS LISTING /tmp/cc15eBE3.s 			page 465


 567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8047              		.loc 1 567 0
 8048 0ec2 C1E218   		sall	$24, %edx
 8049 0ec5 4109D0   		orl	%edx, %r8d
 8050 0ec8 8D5001   		leal	1(%rax), %edx
 8051 0ecb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8051      000000
 8052 0ed2 C1E210   		sall	$16, %edx
 8053 0ed5 4109D0   		orl	%edx, %r8d
 8054 0ed8 8D5002   		leal	2(%rax), %edx
 8055 0edb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8055      000000
 8056 0ee2 C1E208   		sall	$8, %edx
 8057 0ee5 4109D0   		orl	%edx, %r8d
 8058              	.LVL35:
 568:src/vm3.c     ****   if (op0 == 0x0) {
 8059              		.loc 1 568 0
 8060 0ee8 4489C6   		movl	%r8d, %esi
 570:src/vm3.c     ****     op0 = op0 + funct;
 8061              		.loc 1 570 0
 8062 0eeb 4488C2   		movb	%r8b, %dl
 568:src/vm3.c     ****   if (op0 == 0x0) {
 8063              		.loc 1 568 0
 8064 0eee C1EE1A   		shrl	$26, %esi
 8065              	.LVL36:
 570:src/vm3.c     ****     op0 = op0 + funct;
 8066              		.loc 1 570 0
 8067 0ef1 83E23F   		andl	$63, %edx
 8068 0ef4 8D7E2B   		leal	43(%rsi), %edi
 8069 0ef7 4084F6   		testb	%sil, %sil
 8070 0efa 0F45D7   		cmovne	%edi, %edx
 8071              	.LVL37:
 580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8072              		.loc 1 580 0
 8073 0efd C1E110   		sall	$16, %ecx
 8074 0f00 C1E318   		sall	$24, %ebx
 8075 0f03 09CB     		orl	%ecx, %ebx
 8076 0f05 8D4807   		leal	7(%rax), %ecx
 8077 0f08 83C006   		addl	$6, %eax
 8078 0f0b 0FB68000 		movzbl	VM_memory(%rax), %eax
 8078      000000
 578:src/vm3.c     **** 
 8079              		.loc 1 578 0
 8080 0f12 0FB6D2   		movzbl	%dl, %edx
 580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8081              		.loc 1 580 0
 8082 0f15 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8082      000000
 578:src/vm3.c     **** 
 8083              		.loc 1 578 0
 8084 0f1c 48C1E204 		salq	$4, %rdx
 8085              	.LVL38:
 580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8086              		.loc 1 580 0
 8087 0f20 C1E008   		sall	$8, %eax
 8088 0f23 09CB     		orl	%ecx, %ebx
 8089 0f25 09C3     		orl	%eax, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 466


 8090              	.LVL39:
 581:src/vm3.c     ****   if (op1 == 0x0) {
 8091              		.loc 1 581 0
 8092 0f27 89D9     		movl	%ebx, %ecx
 583:src/vm3.c     ****     op1 = op1 + funct;
 8093              		.loc 1 583 0
 8094 0f29 88D8     		movb	%bl, %al
 581:src/vm3.c     ****   if (op1 == 0x0) {
 8095              		.loc 1 581 0
 8096 0f2b C1E91A   		shrl	$26, %ecx
 8097              	.LVL40:
 583:src/vm3.c     ****     op1 = op1 + funct;
 8098              		.loc 1 583 0
 8099 0f2e 83E03F   		andl	$63, %eax
 8100 0f31 8D712B   		leal	43(%rcx), %esi
 8101 0f34 84C9     		testb	%cl, %cl
 8102 0f36 0F45C6   		cmovne	%esi, %eax
 8103              	.LVL41:
 590:src/vm3.c     **** 
 8104              		.loc 1 590 0
 8105 0f39 0FB6C0   		movzbl	%al, %eax
 8106 0f3c 48C1E004 		salq	$4, %rax
 8107              	.LVL42:
 8108 0f40 48038414 		addq	58088(%rsp,%rdx), %rax
 8108      E8E20000 
 8109 0f48 488B08   		movq	(%rax), %rcx
 8110 0f4b E908FEFF 		jmp	.L269
 8110      FF
 8111              	.LVL43:
 8112              	.L249:
 599:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8113              		.loc 1 599 0
 8114 0f50 4489C0   		movl	%r8d, %eax
 600:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 8115              		.loc 1 600 0
 8116 0f53 4489C2   		movl	%r8d, %edx
 598:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8117              		.loc 1 598 0
 8118 0f56 41C1E815 		shrl	$21, %r8d
 8119              	.LVL44:
 599:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8120              		.loc 1 599 0
 8121 0f5a C1E810   		shrl	$16, %eax
 8122              	.LVL45:
 601:src/vm3.c     **** PC  =  nPC;
 8123              		.loc 1 601 0
 8124 0f5d 4183E01F 		andl	$31, %r8d
 600:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 8125              		.loc 1 600 0
 8126 0f61 C1EA0B   		shrl	$11, %edx
 8127              	.LVL46:
 601:src/vm3.c     **** PC  =  nPC;
 8128              		.loc 1 601 0
 8129 0f64 83E01F   		andl	$31, %eax
 8130 0f67 83E21F   		andl	$31, %edx
 8131 0f6a 8B048500 		movl	RF(,%rax,4), %eax
 8131      000000
GAS LISTING /tmp/cc15eBE3.s 			page 467


 8132 0f71 42030485 		addl	RF(,%r8,4), %eax
 8132      00000000 
 8133 0f79 89049500 		movl	%eax, RF(,%rdx,4)
 8133      000000
 602:src/vm3.c     **** nPC  += 4;
 8134              		.loc 1 602 0
 8135 0f80 8B050000 		movl	nPC(%rip), %eax
 8135      0000
 604:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8136              		.loc 1 604 0
 8137 0f86 8D5003   		leal	3(%rax), %edx
 603:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8138              		.loc 1 603 0
 8139 0f89 8D4804   		leal	4(%rax), %ecx
 602:src/vm3.c     **** nPC  += 4;
 8140              		.loc 1 602 0
 8141 0f8c 89050000 		movl	%eax, PC(%rip)
 8141      0000
 604:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8142              		.loc 1 604 0
 8143 0f92 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8143      00000000 
 8144 0f9a 89C2     		movl	%eax, %edx
 617:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8145              		.loc 1 617 0
 8146 0f9c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8146      000000
 8147              	.LVL47:
 604:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8148              		.loc 1 604 0
 8149 0fa3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8149      000000
 603:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8150              		.loc 1 603 0
 8151 0faa 890D0000 		movl	%ecx, nPC(%rip)
 8151      0000
 617:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8152              		.loc 1 617 0
 8153 0fb0 8D4805   		leal	5(%rax), %ecx
 8154 0fb3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8154      000000
 604:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8155              		.loc 1 604 0
 8156 0fba C1E218   		sall	$24, %edx
 8157 0fbd 4109D0   		orl	%edx, %r8d
 8158 0fc0 8D5001   		leal	1(%rax), %edx
 8159 0fc3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8159      000000
 8160 0fca C1E210   		sall	$16, %edx
 8161 0fcd 4109D0   		orl	%edx, %r8d
 8162 0fd0 8D5002   		leal	2(%rax), %edx
 8163 0fd3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8163      000000
 8164 0fda C1E208   		sall	$8, %edx
 8165 0fdd 4109D0   		orl	%edx, %r8d
 8166              	.LVL48:
 605:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 468


 8167              		.loc 1 605 0
 8168 0fe0 4489C6   		movl	%r8d, %esi
 607:src/vm3.c     ****     op0 = op0 + funct;
 8169              		.loc 1 607 0
 8170 0fe3 4488C2   		movb	%r8b, %dl
 605:src/vm3.c     ****   if (op0 == 0x0) {
 8171              		.loc 1 605 0
 8172 0fe6 C1EE1A   		shrl	$26, %esi
 8173              	.LVL49:
 607:src/vm3.c     ****     op0 = op0 + funct;
 8174              		.loc 1 607 0
 8175 0fe9 83E23F   		andl	$63, %edx
 8176 0fec 8D7E2B   		leal	43(%rsi), %edi
 8177 0fef 4084F6   		testb	%sil, %sil
 8178 0ff2 0F45D7   		cmovne	%edi, %edx
 8179              	.LVL50:
 617:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8180              		.loc 1 617 0
 8181 0ff5 C1E110   		sall	$16, %ecx
 8182 0ff8 C1E318   		sall	$24, %ebx
 8183 0ffb 09CB     		orl	%ecx, %ebx
 8184 0ffd 8D4807   		leal	7(%rax), %ecx
 8185 1000 83C006   		addl	$6, %eax
 8186 1003 0FB68000 		movzbl	VM_memory(%rax), %eax
 8186      000000
 615:src/vm3.c     **** 
 8187              		.loc 1 615 0
 8188 100a 0FB6D2   		movzbl	%dl, %edx
 617:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8189              		.loc 1 617 0
 8190 100d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8190      000000
 615:src/vm3.c     **** 
 8191              		.loc 1 615 0
 8192 1014 48C1E204 		salq	$4, %rdx
 8193              	.LVL51:
 617:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8194              		.loc 1 617 0
 8195 1018 C1E008   		sall	$8, %eax
 8196 101b 09CB     		orl	%ecx, %ebx
 8197 101d 09C3     		orl	%eax, %ebx
 8198              	.LVL52:
 618:src/vm3.c     ****   if (op1 == 0x0) {
 8199              		.loc 1 618 0
 8200 101f 89D9     		movl	%ebx, %ecx
 620:src/vm3.c     ****     op1 = op1 + funct;
 8201              		.loc 1 620 0
 8202 1021 88D8     		movb	%bl, %al
 618:src/vm3.c     ****   if (op1 == 0x0) {
 8203              		.loc 1 618 0
 8204 1023 C1E91A   		shrl	$26, %ecx
 8205              	.LVL53:
 620:src/vm3.c     ****     op1 = op1 + funct;
 8206              		.loc 1 620 0
 8207 1026 83E03F   		andl	$63, %eax
 8208 1029 8D712B   		leal	43(%rcx), %esi
 8209 102c 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 469


 8210 102e 0F45C6   		cmovne	%esi, %eax
 8211              	.LVL54:
 627:src/vm3.c     **** 
 8212              		.loc 1 627 0
 8213 1031 0FB6C0   		movzbl	%al, %eax
 8214 1034 48C1E004 		salq	$4, %rax
 8215              	.LVL55:
 8216 1038 48038414 		addq	58088(%rsp,%rdx), %rax
 8216      E8E20000 
 8217 1040 488B08   		movq	(%rax), %rcx
 8218 1043 E910FDFF 		jmp	.L269
 8218      FF
 8219              	.LVL56:
 8220              	.L53:
 636:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8221              		.loc 1 636 0
 8222 1048 4489C0   		movl	%r8d, %eax
 637:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 8223              		.loc 1 637 0
 8224 104b 4489C2   		movl	%r8d, %edx
 635:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8225              		.loc 1 635 0
 8226 104e 41C1E815 		shrl	$21, %r8d
 8227              	.LVL57:
 636:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8228              		.loc 1 636 0
 8229 1052 C1E810   		shrl	$16, %eax
 8230              	.LVL58:
 638:src/vm3.c     **** PC  =  nPC;
 8231              		.loc 1 638 0
 8232 1055 4183E01F 		andl	$31, %r8d
 637:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 8233              		.loc 1 637 0
 8234 1059 C1EA0B   		shrl	$11, %edx
 8235              	.LVL59:
 638:src/vm3.c     **** PC  =  nPC;
 8236              		.loc 1 638 0
 8237 105c 83E01F   		andl	$31, %eax
 8238 105f 83E21F   		andl	$31, %edx
 8239 1062 8B048500 		movl	RF(,%rax,4), %eax
 8239      000000
 8240 1069 42030485 		addl	RF(,%r8,4), %eax
 8240      00000000 
 8241 1071 89049500 		movl	%eax, RF(,%rdx,4)
 8241      000000
 639:src/vm3.c     **** nPC  += 4;
 8242              		.loc 1 639 0
 8243 1078 8B050000 		movl	nPC(%rip), %eax
 8243      0000
 641:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8244              		.loc 1 641 0
 8245 107e 8D5003   		leal	3(%rax), %edx
 640:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8246              		.loc 1 640 0
 8247 1081 8D4804   		leal	4(%rax), %ecx
 639:src/vm3.c     **** nPC  += 4;
 8248              		.loc 1 639 0
GAS LISTING /tmp/cc15eBE3.s 			page 470


 8249 1084 89050000 		movl	%eax, PC(%rip)
 8249      0000
 641:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8250              		.loc 1 641 0
 8251 108a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8251      00000000 
 8252 1092 89C2     		movl	%eax, %edx
 654:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8253              		.loc 1 654 0
 8254 1094 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8254      000000
 8255              	.LVL60:
 641:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8256              		.loc 1 641 0
 8257 109b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8257      000000
 640:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8258              		.loc 1 640 0
 8259 10a2 890D0000 		movl	%ecx, nPC(%rip)
 8259      0000
 654:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8260              		.loc 1 654 0
 8261 10a8 8D4805   		leal	5(%rax), %ecx
 8262 10ab 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8262      000000
 641:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8263              		.loc 1 641 0
 8264 10b2 C1E218   		sall	$24, %edx
 8265 10b5 4109D0   		orl	%edx, %r8d
 8266 10b8 8D5001   		leal	1(%rax), %edx
 8267 10bb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8267      000000
 8268 10c2 C1E210   		sall	$16, %edx
 8269 10c5 4109D0   		orl	%edx, %r8d
 8270 10c8 8D5002   		leal	2(%rax), %edx
 8271 10cb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8271      000000
 8272 10d2 C1E208   		sall	$8, %edx
 8273 10d5 4109D0   		orl	%edx, %r8d
 8274              	.LVL61:
 642:src/vm3.c     ****   if (op0 == 0x0) {
 8275              		.loc 1 642 0
 8276 10d8 4489C6   		movl	%r8d, %esi
 644:src/vm3.c     ****     op0 = op0 + funct;
 8277              		.loc 1 644 0
 8278 10db 4488C2   		movb	%r8b, %dl
 642:src/vm3.c     ****   if (op0 == 0x0) {
 8279              		.loc 1 642 0
 8280 10de C1EE1A   		shrl	$26, %esi
 8281              	.LVL62:
 644:src/vm3.c     ****     op0 = op0 + funct;
 8282              		.loc 1 644 0
 8283 10e1 83E23F   		andl	$63, %edx
 8284 10e4 8D7E2B   		leal	43(%rsi), %edi
 8285 10e7 4084F6   		testb	%sil, %sil
 8286 10ea 0F45D7   		cmovne	%edi, %edx
 8287              	.LVL63:
GAS LISTING /tmp/cc15eBE3.s 			page 471


 654:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8288              		.loc 1 654 0
 8289 10ed C1E110   		sall	$16, %ecx
 8290 10f0 C1E318   		sall	$24, %ebx
 8291 10f3 09CB     		orl	%ecx, %ebx
 8292 10f5 8D4807   		leal	7(%rax), %ecx
 8293 10f8 83C006   		addl	$6, %eax
 8294 10fb 0FB68000 		movzbl	VM_memory(%rax), %eax
 8294      000000
 652:src/vm3.c     **** 
 8295              		.loc 1 652 0
 8296 1102 0FB6D2   		movzbl	%dl, %edx
 654:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8297              		.loc 1 654 0
 8298 1105 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8298      000000
 652:src/vm3.c     **** 
 8299              		.loc 1 652 0
 8300 110c 48C1E204 		salq	$4, %rdx
 8301              	.LVL64:
 654:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8302              		.loc 1 654 0
 8303 1110 C1E008   		sall	$8, %eax
 8304 1113 09CB     		orl	%ecx, %ebx
 8305 1115 09C3     		orl	%eax, %ebx
 8306              	.LVL65:
 655:src/vm3.c     ****   if (op1 == 0x0) {
 8307              		.loc 1 655 0
 8308 1117 89D9     		movl	%ebx, %ecx
 657:src/vm3.c     ****     op1 = op1 + funct;
 8309              		.loc 1 657 0
 8310 1119 88D8     		movb	%bl, %al
 655:src/vm3.c     ****   if (op1 == 0x0) {
 8311              		.loc 1 655 0
 8312 111b C1E91A   		shrl	$26, %ecx
 8313              	.LVL66:
 657:src/vm3.c     ****     op1 = op1 + funct;
 8314              		.loc 1 657 0
 8315 111e 83E03F   		andl	$63, %eax
 8316 1121 8D712B   		leal	43(%rcx), %esi
 8317 1124 84C9     		testb	%cl, %cl
 8318 1126 0F45C6   		cmovne	%esi, %eax
 8319              	.LVL67:
 664:src/vm3.c     **** 
 8320              		.loc 1 664 0
 8321 1129 0FB6C0   		movzbl	%al, %eax
 8322 112c 48C1E004 		salq	$4, %rax
 8323              	.LVL68:
 8324 1130 48038414 		addq	58088(%rsp,%rdx), %rax
 8324      E8E20000 
 8325 1138 488B08   		movq	(%rax), %rcx
 8326 113b E918FCFF 		jmp	.L269
 8326      FF
 8327              	.LVL69:
 8328              	.L125:
 673:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8329              		.loc 1 673 0
GAS LISTING /tmp/cc15eBE3.s 			page 472


 8330 1140 4489C0   		movl	%r8d, %eax
 674:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 8331              		.loc 1 674 0
 8332 1143 4489C2   		movl	%r8d, %edx
 672:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8333              		.loc 1 672 0
 8334 1146 41C1E815 		shrl	$21, %r8d
 8335              	.LVL70:
 673:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8336              		.loc 1 673 0
 8337 114a C1E810   		shrl	$16, %eax
 8338              	.LVL71:
 675:src/vm3.c     **** PC  =  nPC;
 8339              		.loc 1 675 0
 8340 114d 4183E01F 		andl	$31, %r8d
 674:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 8341              		.loc 1 674 0
 8342 1151 C1EA0B   		shrl	$11, %edx
 8343              	.LVL72:
 675:src/vm3.c     **** PC  =  nPC;
 8344              		.loc 1 675 0
 8345 1154 83E01F   		andl	$31, %eax
 8346 1157 83E21F   		andl	$31, %edx
 8347 115a 8B048500 		movl	RF(,%rax,4), %eax
 8347      000000
 8348 1161 42230485 		andl	RF(,%r8,4), %eax
 8348      00000000 
 8349 1169 89049500 		movl	%eax, RF(,%rdx,4)
 8349      000000
 676:src/vm3.c     **** nPC  += 4;
 8350              		.loc 1 676 0
 8351 1170 8B050000 		movl	nPC(%rip), %eax
 8351      0000
 678:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8352              		.loc 1 678 0
 8353 1176 8D5003   		leal	3(%rax), %edx
 677:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8354              		.loc 1 677 0
 8355 1179 8D4804   		leal	4(%rax), %ecx
 676:src/vm3.c     **** nPC  += 4;
 8356              		.loc 1 676 0
 8357 117c 89050000 		movl	%eax, PC(%rip)
 8357      0000
 678:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8358              		.loc 1 678 0
 8359 1182 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8359      00000000 
 8360 118a 89C2     		movl	%eax, %edx
 691:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8361              		.loc 1 691 0
 8362 118c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8362      000000
 8363              	.LVL73:
 678:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8364              		.loc 1 678 0
 8365 1193 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8365      000000
GAS LISTING /tmp/cc15eBE3.s 			page 473


 677:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8366              		.loc 1 677 0
 8367 119a 890D0000 		movl	%ecx, nPC(%rip)
 8367      0000
 691:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8368              		.loc 1 691 0
 8369 11a0 8D4805   		leal	5(%rax), %ecx
 8370 11a3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8370      000000
 678:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8371              		.loc 1 678 0
 8372 11aa C1E218   		sall	$24, %edx
 8373 11ad 4109D0   		orl	%edx, %r8d
 8374 11b0 8D5001   		leal	1(%rax), %edx
 8375 11b3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8375      000000
 8376 11ba C1E210   		sall	$16, %edx
 8377 11bd 4109D0   		orl	%edx, %r8d
 8378 11c0 8D5002   		leal	2(%rax), %edx
 8379 11c3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8379      000000
 8380 11ca C1E208   		sall	$8, %edx
 8381 11cd 4109D0   		orl	%edx, %r8d
 8382              	.LVL74:
 679:src/vm3.c     ****   if (op0 == 0x0) {
 8383              		.loc 1 679 0
 8384 11d0 4489C6   		movl	%r8d, %esi
 681:src/vm3.c     ****     op0 = op0 + funct;
 8385              		.loc 1 681 0
 8386 11d3 4488C2   		movb	%r8b, %dl
 679:src/vm3.c     ****   if (op0 == 0x0) {
 8387              		.loc 1 679 0
 8388 11d6 C1EE1A   		shrl	$26, %esi
 8389              	.LVL75:
 681:src/vm3.c     ****     op0 = op0 + funct;
 8390              		.loc 1 681 0
 8391 11d9 83E23F   		andl	$63, %edx
 8392 11dc 8D7E2B   		leal	43(%rsi), %edi
 8393 11df 4084F6   		testb	%sil, %sil
 8394 11e2 0F45D7   		cmovne	%edi, %edx
 8395              	.LVL76:
 691:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8396              		.loc 1 691 0
 8397 11e5 C1E110   		sall	$16, %ecx
 8398 11e8 C1E318   		sall	$24, %ebx
 8399 11eb 09CB     		orl	%ecx, %ebx
 8400 11ed 8D4807   		leal	7(%rax), %ecx
 8401 11f0 83C006   		addl	$6, %eax
 8402 11f3 0FB68000 		movzbl	VM_memory(%rax), %eax
 8402      000000
 689:src/vm3.c     **** 
 8403              		.loc 1 689 0
 8404 11fa 0FB6D2   		movzbl	%dl, %edx
 691:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8405              		.loc 1 691 0
 8406 11fd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8406      000000
GAS LISTING /tmp/cc15eBE3.s 			page 474


 689:src/vm3.c     **** 
 8407              		.loc 1 689 0
 8408 1204 48C1E204 		salq	$4, %rdx
 8409              	.LVL77:
 691:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8410              		.loc 1 691 0
 8411 1208 C1E008   		sall	$8, %eax
 8412 120b 09CB     		orl	%ecx, %ebx
 8413 120d 09C3     		orl	%eax, %ebx
 8414              	.LVL78:
 692:src/vm3.c     ****   if (op1 == 0x0) {
 8415              		.loc 1 692 0
 8416 120f 89D9     		movl	%ebx, %ecx
 694:src/vm3.c     ****     op1 = op1 + funct;
 8417              		.loc 1 694 0
 8418 1211 88D8     		movb	%bl, %al
 692:src/vm3.c     ****   if (op1 == 0x0) {
 8419              		.loc 1 692 0
 8420 1213 C1E91A   		shrl	$26, %ecx
 8421              	.LVL79:
 694:src/vm3.c     ****     op1 = op1 + funct;
 8422              		.loc 1 694 0
 8423 1216 83E03F   		andl	$63, %eax
 8424 1219 8D712B   		leal	43(%rcx), %esi
 8425 121c 84C9     		testb	%cl, %cl
 8426 121e 0F45C6   		cmovne	%esi, %eax
 8427              	.LVL80:
 701:src/vm3.c     **** 
 8428              		.loc 1 701 0
 8429 1221 0FB6C0   		movzbl	%al, %eax
 8430 1224 48C1E004 		salq	$4, %rax
 8431              	.LVL81:
 8432 1228 48038414 		addq	58088(%rsp,%rdx), %rax
 8432      E8E20000 
 8433 1230 488B08   		movq	(%rax), %rcx
 8434 1233 E920FBFF 		jmp	.L269
 8434      FF
 8435              	.LVL82:
 8436              	.L247:
 709:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8437              		.loc 1 709 0
 8438 1238 4489C0   		movl	%r8d, %eax
 710:src/vm3.c     **** LO = RF[rs] / RF[rt];
 8439              		.loc 1 710 0
 8440 123b 41C1E810 		shrl	$16, %r8d
 8441              	.LVL83:
 712:src/vm3.c     **** PC  =  nPC;
 8442              		.loc 1 712 0
 8443 123f 31D2     		xorl	%edx, %edx
 709:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8444              		.loc 1 709 0
 8445 1241 C1E815   		shrl	$21, %eax
 8446              	.LVL84:
 711:src/vm3.c     **** HI = RF[rs] % RF[rt];
 8447              		.loc 1 711 0
 8448 1244 4183E01F 		andl	$31, %r8d
 8449 1248 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 475


 8450 124b 8B048500 		movl	RF(,%rax,4), %eax
 8450      000000
 8451              	.LVL85:
 712:src/vm3.c     **** PC  =  nPC;
 8452              		.loc 1 712 0
 8453 1252 42F73485 		divl	RF(,%r8,4)
 8453      00000000 
 8454              	.LVL86:
 8455 125a 4189C6   		movl	%eax, %r14d
 8456              	.LVL87:
 713:src/vm3.c     **** nPC  += 4;
 8457              		.loc 1 713 0
 8458 125d 8B050000 		movl	nPC(%rip), %eax
 8458      0000
 8459              	.LVL88:
 712:src/vm3.c     **** PC  =  nPC;
 8460              		.loc 1 712 0
 8461 1263 4189D5   		movl	%edx, %r13d
 715:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8462              		.loc 1 715 0
 8463 1266 8D5003   		leal	3(%rax), %edx
 714:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8464              		.loc 1 714 0
 8465 1269 8D4804   		leal	4(%rax), %ecx
 713:src/vm3.c     **** nPC  += 4;
 8466              		.loc 1 713 0
 8467 126c 89050000 		movl	%eax, PC(%rip)
 8467      0000
 715:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8468              		.loc 1 715 0
 8469 1272 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8469      00000000 
 8470 127a 89C2     		movl	%eax, %edx
 728:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8471              		.loc 1 728 0
 8472 127c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8472      000000
 8473              	.LVL89:
 715:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8474              		.loc 1 715 0
 8475 1283 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8475      000000
 714:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8476              		.loc 1 714 0
 8477 128a 890D0000 		movl	%ecx, nPC(%rip)
 8477      0000
 728:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8478              		.loc 1 728 0
 8479 1290 8D4805   		leal	5(%rax), %ecx
 8480 1293 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8480      000000
 715:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8481              		.loc 1 715 0
 8482 129a C1E218   		sall	$24, %edx
 8483 129d 4109D0   		orl	%edx, %r8d
 8484 12a0 8D5001   		leal	1(%rax), %edx
 8485 12a3 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 476


 8485      000000
 8486 12aa C1E210   		sall	$16, %edx
 8487 12ad 4109D0   		orl	%edx, %r8d
 8488 12b0 8D5002   		leal	2(%rax), %edx
 8489 12b3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8489      000000
 8490 12ba C1E208   		sall	$8, %edx
 8491 12bd 4109D0   		orl	%edx, %r8d
 8492              	.LVL90:
 716:src/vm3.c     ****   if (op0 == 0x0) {
 8493              		.loc 1 716 0
 8494 12c0 4489C6   		movl	%r8d, %esi
 718:src/vm3.c     ****     op0 = op0 + funct;
 8495              		.loc 1 718 0
 8496 12c3 4488C2   		movb	%r8b, %dl
 716:src/vm3.c     ****   if (op0 == 0x0) {
 8497              		.loc 1 716 0
 8498 12c6 C1EE1A   		shrl	$26, %esi
 8499              	.LVL91:
 718:src/vm3.c     ****     op0 = op0 + funct;
 8500              		.loc 1 718 0
 8501 12c9 83E23F   		andl	$63, %edx
 8502 12cc 8D7E2B   		leal	43(%rsi), %edi
 8503 12cf 4084F6   		testb	%sil, %sil
 8504 12d2 0F45D7   		cmovne	%edi, %edx
 8505              	.LVL92:
 728:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8506              		.loc 1 728 0
 8507 12d5 C1E110   		sall	$16, %ecx
 8508 12d8 C1E318   		sall	$24, %ebx
 8509 12db 09CB     		orl	%ecx, %ebx
 8510 12dd 8D4807   		leal	7(%rax), %ecx
 8511 12e0 83C006   		addl	$6, %eax
 8512 12e3 0FB68000 		movzbl	VM_memory(%rax), %eax
 8512      000000
 726:src/vm3.c     **** 
 8513              		.loc 1 726 0
 8514 12ea 0FB6D2   		movzbl	%dl, %edx
 728:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8515              		.loc 1 728 0
 8516 12ed 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8516      000000
 726:src/vm3.c     **** 
 8517              		.loc 1 726 0
 8518 12f4 48C1E204 		salq	$4, %rdx
 8519              	.LVL93:
 728:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8520              		.loc 1 728 0
 8521 12f8 C1E008   		sall	$8, %eax
 8522 12fb 09CB     		orl	%ecx, %ebx
 8523 12fd 09C3     		orl	%eax, %ebx
 8524              	.LVL94:
 729:src/vm3.c     ****   if (op1 == 0x0) {
 8525              		.loc 1 729 0
 8526 12ff 89D9     		movl	%ebx, %ecx
 731:src/vm3.c     ****     op1 = op1 + funct;
 8527              		.loc 1 731 0
GAS LISTING /tmp/cc15eBE3.s 			page 477


 8528 1301 88D8     		movb	%bl, %al
 729:src/vm3.c     ****   if (op1 == 0x0) {
 8529              		.loc 1 729 0
 8530 1303 C1E91A   		shrl	$26, %ecx
 8531              	.LVL95:
 731:src/vm3.c     ****     op1 = op1 + funct;
 8532              		.loc 1 731 0
 8533 1306 83E03F   		andl	$63, %eax
 8534 1309 8D712B   		leal	43(%rcx), %esi
 8535 130c 84C9     		testb	%cl, %cl
 8536 130e 0F45C6   		cmovne	%esi, %eax
 8537              	.LVL96:
 738:src/vm3.c     **** 
 8538              		.loc 1 738 0
 8539 1311 0FB6C0   		movzbl	%al, %eax
 8540 1314 48C1E004 		salq	$4, %rax
 8541              	.LVL97:
 8542 1318 48038414 		addq	58088(%rsp,%rdx), %rax
 8542      E8E20000 
 8543 1320 488B08   		movq	(%rax), %rcx
 8544 1323 E930FAFF 		jmp	.L269
 8544      FF
 8545              	.LVL98:
 8546              	.L248:
 746:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8547              		.loc 1 746 0
 8548 1328 4489C0   		movl	%r8d, %eax
 747:src/vm3.c     **** LO = RF[rs] / RF[rt];
 8549              		.loc 1 747 0
 8550 132b 41C1E810 		shrl	$16, %r8d
 8551              	.LVL99:
 749:src/vm3.c     **** PC  =  nPC;
 8552              		.loc 1 749 0
 8553 132f 31D2     		xorl	%edx, %edx
 746:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8554              		.loc 1 746 0
 8555 1331 C1E815   		shrl	$21, %eax
 8556              	.LVL100:
 748:src/vm3.c     **** HI = RF[rs] % RF[rt];
 8557              		.loc 1 748 0
 8558 1334 4183E01F 		andl	$31, %r8d
 8559 1338 83E01F   		andl	$31, %eax
 8560 133b 8B048500 		movl	RF(,%rax,4), %eax
 8560      000000
 8561              	.LVL101:
 749:src/vm3.c     **** PC  =  nPC;
 8562              		.loc 1 749 0
 8563 1342 42F73485 		divl	RF(,%r8,4)
 8563      00000000 
 8564              	.LVL102:
 8565 134a 4189C6   		movl	%eax, %r14d
 8566              	.LVL103:
 750:src/vm3.c     **** nPC  += 4;
 8567              		.loc 1 750 0
 8568 134d 8B050000 		movl	nPC(%rip), %eax
 8568      0000
 8569              	.LVL104:
GAS LISTING /tmp/cc15eBE3.s 			page 478


 749:src/vm3.c     **** PC  =  nPC;
 8570              		.loc 1 749 0
 8571 1353 4189D5   		movl	%edx, %r13d
 752:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8572              		.loc 1 752 0
 8573 1356 8D5003   		leal	3(%rax), %edx
 751:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8574              		.loc 1 751 0
 8575 1359 8D4804   		leal	4(%rax), %ecx
 750:src/vm3.c     **** nPC  += 4;
 8576              		.loc 1 750 0
 8577 135c 89050000 		movl	%eax, PC(%rip)
 8577      0000
 752:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8578              		.loc 1 752 0
 8579 1362 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8579      00000000 
 8580 136a 89C2     		movl	%eax, %edx
 765:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8581              		.loc 1 765 0
 8582 136c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8582      000000
 8583              	.LVL105:
 752:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8584              		.loc 1 752 0
 8585 1373 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8585      000000
 751:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8586              		.loc 1 751 0
 8587 137a 890D0000 		movl	%ecx, nPC(%rip)
 8587      0000
 765:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8588              		.loc 1 765 0
 8589 1380 8D4805   		leal	5(%rax), %ecx
 8590 1383 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8590      000000
 752:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8591              		.loc 1 752 0
 8592 138a C1E218   		sall	$24, %edx
 8593 138d 4109D0   		orl	%edx, %r8d
 8594 1390 8D5001   		leal	1(%rax), %edx
 8595 1393 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8595      000000
 8596 139a C1E210   		sall	$16, %edx
 8597 139d 4109D0   		orl	%edx, %r8d
 8598 13a0 8D5002   		leal	2(%rax), %edx
 8599 13a3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8599      000000
 8600 13aa C1E208   		sall	$8, %edx
 8601 13ad 4109D0   		orl	%edx, %r8d
 8602              	.LVL106:
 753:src/vm3.c     ****   if (op0 == 0x0) {
 8603              		.loc 1 753 0
 8604 13b0 4489C6   		movl	%r8d, %esi
 755:src/vm3.c     ****     op0 = op0 + funct;
 8605              		.loc 1 755 0
 8606 13b3 4488C2   		movb	%r8b, %dl
GAS LISTING /tmp/cc15eBE3.s 			page 479


 753:src/vm3.c     ****   if (op0 == 0x0) {
 8607              		.loc 1 753 0
 8608 13b6 C1EE1A   		shrl	$26, %esi
 8609              	.LVL107:
 755:src/vm3.c     ****     op0 = op0 + funct;
 8610              		.loc 1 755 0
 8611 13b9 83E23F   		andl	$63, %edx
 8612 13bc 8D7E2B   		leal	43(%rsi), %edi
 8613 13bf 4084F6   		testb	%sil, %sil
 8614 13c2 0F45D7   		cmovne	%edi, %edx
 8615              	.LVL108:
 765:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8616              		.loc 1 765 0
 8617 13c5 C1E110   		sall	$16, %ecx
 8618 13c8 C1E318   		sall	$24, %ebx
 8619 13cb 09CB     		orl	%ecx, %ebx
 8620 13cd 8D4807   		leal	7(%rax), %ecx
 8621 13d0 83C006   		addl	$6, %eax
 8622 13d3 0FB68000 		movzbl	VM_memory(%rax), %eax
 8622      000000
 763:src/vm3.c     **** 
 8623              		.loc 1 763 0
 8624 13da 0FB6D2   		movzbl	%dl, %edx
 765:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8625              		.loc 1 765 0
 8626 13dd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8626      000000
 763:src/vm3.c     **** 
 8627              		.loc 1 763 0
 8628 13e4 48C1E204 		salq	$4, %rdx
 8629              	.LVL109:
 765:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8630              		.loc 1 765 0
 8631 13e8 C1E008   		sall	$8, %eax
 8632 13eb 09CB     		orl	%ecx, %ebx
 8633 13ed 09C3     		orl	%eax, %ebx
 8634              	.LVL110:
 766:src/vm3.c     ****   if (op1 == 0x0) {
 8635              		.loc 1 766 0
 8636 13ef 89D9     		movl	%ebx, %ecx
 768:src/vm3.c     ****     op1 = op1 + funct;
 8637              		.loc 1 768 0
 8638 13f1 88D8     		movb	%bl, %al
 766:src/vm3.c     ****   if (op1 == 0x0) {
 8639              		.loc 1 766 0
 8640 13f3 C1E91A   		shrl	$26, %ecx
 8641              	.LVL111:
 768:src/vm3.c     ****     op1 = op1 + funct;
 8642              		.loc 1 768 0
 8643 13f6 83E03F   		andl	$63, %eax
 8644 13f9 8D712B   		leal	43(%rcx), %esi
 8645 13fc 84C9     		testb	%cl, %cl
 8646 13fe 0F45C6   		cmovne	%esi, %eax
 8647              	.LVL112:
 775:src/vm3.c     **** 
 8648              		.loc 1 775 0
 8649 1401 0FB6C0   		movzbl	%al, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 480


 8650 1404 48C1E004 		salq	$4, %rax
 8651              	.LVL113:
 8652 1408 48038414 		addq	58088(%rsp,%rdx), %rax
 8652      E8E20000 
 8653 1410 488B08   		movq	(%rax), %rcx
 8654 1413 E940F9FF 		jmp	.L269
 8654      FF
 8655              	.LVL114:
 8656              	.L154:
 784:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 8657              		.loc 1 784 0
 8658 1418 4489C0   		movl	%r8d, %eax
 783:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8659              		.loc 1 783 0
 8660 141b 41C1E815 		shrl	$21, %r8d
 8661              	.LVL115:
 784:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 8662              		.loc 1 784 0
 8663 141f C1E810   		shrl	$16, %eax
 8664              	.LVL116:
 785:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 8665              		.loc 1 785 0
 8666 1422 4183E01F 		andl	$31, %r8d
 8667 1426 83E01F   		andl	$31, %eax
 8668 1429 448B3485 		movl	RF(,%rax,4), %r14d
 8668      00000000 
 8669              	.LVL117:
 8670 1431 428B0485 		movl	RF(,%r8,4), %eax
 8670      00000000 
 8671 1439 4C0FAFF0 		imulq	%rax, %r14
 8672              	.LVL118:
 786:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 8673              		.loc 1 786 0
 8674 143d 4C89F0   		movq	%r14, %rax
 8675 1440 48C1E820 		shrq	$32, %rax
 8676 1444 4989C5   		movq	%rax, %r13
 8677              	.LVL119:
 788:src/vm3.c     **** nPC  += 4;
 8678              		.loc 1 788 0
 8679 1447 8B050000 		movl	nPC(%rip), %eax
 8679      0000
 8680              	.LVL120:
 790:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8681              		.loc 1 790 0
 8682 144d 8D5003   		leal	3(%rax), %edx
 789:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8683              		.loc 1 789 0
 8684 1450 8D4804   		leal	4(%rax), %ecx
 788:src/vm3.c     **** nPC  += 4;
 8685              		.loc 1 788 0
 8686 1453 89050000 		movl	%eax, PC(%rip)
 8686      0000
 790:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8687              		.loc 1 790 0
 8688 1459 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8688      00000000 
 8689 1461 89C2     		movl	%eax, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 481


 803:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8690              		.loc 1 803 0
 8691 1463 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8691      000000
 8692              	.LVL121:
 790:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8693              		.loc 1 790 0
 8694 146a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8694      000000
 789:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8695              		.loc 1 789 0
 8696 1471 890D0000 		movl	%ecx, nPC(%rip)
 8696      0000
 803:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8697              		.loc 1 803 0
 8698 1477 8D4805   		leal	5(%rax), %ecx
 8699 147a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8699      000000
 790:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8700              		.loc 1 790 0
 8701 1481 C1E218   		sall	$24, %edx
 8702 1484 4109D0   		orl	%edx, %r8d
 8703 1487 8D5001   		leal	1(%rax), %edx
 8704 148a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8704      000000
 8705 1491 C1E210   		sall	$16, %edx
 8706 1494 4109D0   		orl	%edx, %r8d
 8707 1497 8D5002   		leal	2(%rax), %edx
 8708 149a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8708      000000
 8709 14a1 C1E208   		sall	$8, %edx
 8710 14a4 4109D0   		orl	%edx, %r8d
 8711              	.LVL122:
 791:src/vm3.c     ****   if (op0 == 0x0) {
 8712              		.loc 1 791 0
 8713 14a7 4489C6   		movl	%r8d, %esi
 793:src/vm3.c     ****     op0 = op0 + funct;
 8714              		.loc 1 793 0
 8715 14aa 4488C2   		movb	%r8b, %dl
 791:src/vm3.c     ****   if (op0 == 0x0) {
 8716              		.loc 1 791 0
 8717 14ad C1EE1A   		shrl	$26, %esi
 8718              	.LVL123:
 793:src/vm3.c     ****     op0 = op0 + funct;
 8719              		.loc 1 793 0
 8720 14b0 83E23F   		andl	$63, %edx
 8721 14b3 8D7E2B   		leal	43(%rsi), %edi
 8722 14b6 4084F6   		testb	%sil, %sil
 8723 14b9 0F45D7   		cmovne	%edi, %edx
 8724              	.LVL124:
 803:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8725              		.loc 1 803 0
 8726 14bc C1E110   		sall	$16, %ecx
 8727 14bf C1E318   		sall	$24, %ebx
 8728 14c2 09CB     		orl	%ecx, %ebx
 8729 14c4 8D4807   		leal	7(%rax), %ecx
 8730 14c7 83C006   		addl	$6, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 482


 8731 14ca 0FB68000 		movzbl	VM_memory(%rax), %eax
 8731      000000
 801:src/vm3.c     **** 
 8732              		.loc 1 801 0
 8733 14d1 0FB6D2   		movzbl	%dl, %edx
 803:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8734              		.loc 1 803 0
 8735 14d4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8735      000000
 801:src/vm3.c     **** 
 8736              		.loc 1 801 0
 8737 14db 48C1E204 		salq	$4, %rdx
 8738              	.LVL125:
 803:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8739              		.loc 1 803 0
 8740 14df C1E008   		sall	$8, %eax
 8741 14e2 09CB     		orl	%ecx, %ebx
 8742 14e4 09C3     		orl	%eax, %ebx
 8743              	.LVL126:
 804:src/vm3.c     ****   if (op1 == 0x0) {
 8744              		.loc 1 804 0
 8745 14e6 89D9     		movl	%ebx, %ecx
 806:src/vm3.c     ****     op1 = op1 + funct;
 8746              		.loc 1 806 0
 8747 14e8 88D8     		movb	%bl, %al
 804:src/vm3.c     ****   if (op1 == 0x0) {
 8748              		.loc 1 804 0
 8749 14ea C1E91A   		shrl	$26, %ecx
 8750              	.LVL127:
 806:src/vm3.c     ****     op1 = op1 + funct;
 8751              		.loc 1 806 0
 8752 14ed 83E03F   		andl	$63, %eax
 8753 14f0 8D712B   		leal	43(%rcx), %esi
 8754 14f3 84C9     		testb	%cl, %cl
 8755 14f5 0F45C6   		cmovne	%esi, %eax
 8756              	.LVL128:
 813:src/vm3.c     **** 
 8757              		.loc 1 813 0
 8758 14f8 0FB6C0   		movzbl	%al, %eax
 8759 14fb 48C1E004 		salq	$4, %rax
 8760              	.LVL129:
 8761 14ff 48038414 		addq	58088(%rsp,%rdx), %rax
 8761      E8E20000 
 8762 1507 488B08   		movq	(%rax), %rcx
 8763 150a E949F8FF 		jmp	.L269
 8763      FF
 8764              	.LVL130:
 8765              	.L246:
 822:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 8766              		.loc 1 822 0
 8767 150f 4489C0   		movl	%r8d, %eax
 821:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8768              		.loc 1 821 0
 8769 1512 41C1E815 		shrl	$21, %r8d
 8770              	.LVL131:
 822:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 8771              		.loc 1 822 0
GAS LISTING /tmp/cc15eBE3.s 			page 483


 8772 1516 C1E810   		shrl	$16, %eax
 8773              	.LVL132:
 823:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 8774              		.loc 1 823 0
 8775 1519 4183E01F 		andl	$31, %r8d
 8776 151d 83E01F   		andl	$31, %eax
 8777 1520 448B3485 		movl	RF(,%rax,4), %r14d
 8777      00000000 
 8778              	.LVL133:
 8779 1528 428B0485 		movl	RF(,%r8,4), %eax
 8779      00000000 
 8780 1530 4C0FAFF0 		imulq	%rax, %r14
 8781              	.LVL134:
 824:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 8782              		.loc 1 824 0
 8783 1534 4C89F0   		movq	%r14, %rax
 8784 1537 48C1E820 		shrq	$32, %rax
 8785 153b 4989C5   		movq	%rax, %r13
 8786              	.LVL135:
 826:src/vm3.c     **** nPC  += 4;
 8787              		.loc 1 826 0
 8788 153e 8B050000 		movl	nPC(%rip), %eax
 8788      0000
 8789              	.LVL136:
 828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8790              		.loc 1 828 0
 8791 1544 8D5003   		leal	3(%rax), %edx
 827:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8792              		.loc 1 827 0
 8793 1547 8D4804   		leal	4(%rax), %ecx
 826:src/vm3.c     **** nPC  += 4;
 8794              		.loc 1 826 0
 8795 154a 89050000 		movl	%eax, PC(%rip)
 8795      0000
 828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8796              		.loc 1 828 0
 8797 1550 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8797      00000000 
 8798 1558 89C2     		movl	%eax, %edx
 841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8799              		.loc 1 841 0
 8800 155a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8800      000000
 8801              	.LVL137:
 828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8802              		.loc 1 828 0
 8803 1561 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8803      000000
 827:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8804              		.loc 1 827 0
 8805 1568 890D0000 		movl	%ecx, nPC(%rip)
 8805      0000
 841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8806              		.loc 1 841 0
 8807 156e 8D4805   		leal	5(%rax), %ecx
 8808 1571 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8808      000000
GAS LISTING /tmp/cc15eBE3.s 			page 484


 828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8809              		.loc 1 828 0
 8810 1578 C1E218   		sall	$24, %edx
 8811 157b 4109D0   		orl	%edx, %r8d
 8812 157e 8D5001   		leal	1(%rax), %edx
 8813 1581 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8813      000000
 8814 1588 C1E210   		sall	$16, %edx
 8815 158b 4109D0   		orl	%edx, %r8d
 8816 158e 8D5002   		leal	2(%rax), %edx
 8817 1591 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8817      000000
 8818 1598 C1E208   		sall	$8, %edx
 8819 159b 4109D0   		orl	%edx, %r8d
 8820              	.LVL138:
 829:src/vm3.c     ****   if (op0 == 0x0) {
 8821              		.loc 1 829 0
 8822 159e 4489C6   		movl	%r8d, %esi
 831:src/vm3.c     ****     op0 = op0 + funct;
 8823              		.loc 1 831 0
 8824 15a1 4488C2   		movb	%r8b, %dl
 829:src/vm3.c     ****   if (op0 == 0x0) {
 8825              		.loc 1 829 0
 8826 15a4 C1EE1A   		shrl	$26, %esi
 8827              	.LVL139:
 831:src/vm3.c     ****     op0 = op0 + funct;
 8828              		.loc 1 831 0
 8829 15a7 83E23F   		andl	$63, %edx
 8830 15aa 8D7E2B   		leal	43(%rsi), %edi
 8831 15ad 4084F6   		testb	%sil, %sil
 8832 15b0 0F45D7   		cmovne	%edi, %edx
 8833              	.LVL140:
 841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8834              		.loc 1 841 0
 8835 15b3 C1E110   		sall	$16, %ecx
 8836 15b6 C1E318   		sall	$24, %ebx
 8837 15b9 09CB     		orl	%ecx, %ebx
 8838 15bb 8D4807   		leal	7(%rax), %ecx
 8839 15be 83C006   		addl	$6, %eax
 8840 15c1 0FB68000 		movzbl	VM_memory(%rax), %eax
 8840      000000
 839:src/vm3.c     **** 
 8841              		.loc 1 839 0
 8842 15c8 0FB6D2   		movzbl	%dl, %edx
 841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8843              		.loc 1 841 0
 8844 15cb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8844      000000
 839:src/vm3.c     **** 
 8845              		.loc 1 839 0
 8846 15d2 48C1E204 		salq	$4, %rdx
 8847              	.LVL141:
 841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8848              		.loc 1 841 0
 8849 15d6 C1E008   		sall	$8, %eax
 8850 15d9 09CB     		orl	%ecx, %ebx
 8851 15db 09C3     		orl	%eax, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 485


 8852              	.LVL142:
 842:src/vm3.c     ****   if (op1 == 0x0) {
 8853              		.loc 1 842 0
 8854 15dd 89D9     		movl	%ebx, %ecx
 844:src/vm3.c     ****     op1 = op1 + funct;
 8855              		.loc 1 844 0
 8856 15df 88D8     		movb	%bl, %al
 842:src/vm3.c     ****   if (op1 == 0x0) {
 8857              		.loc 1 842 0
 8858 15e1 C1E91A   		shrl	$26, %ecx
 8859              	.LVL143:
 844:src/vm3.c     ****     op1 = op1 + funct;
 8860              		.loc 1 844 0
 8861 15e4 83E03F   		andl	$63, %eax
 8862 15e7 8D712B   		leal	43(%rcx), %esi
 8863 15ea 84C9     		testb	%cl, %cl
 8864 15ec 0F45C6   		cmovne	%esi, %eax
 8865              	.LVL144:
 851:src/vm3.c     **** 
 8866              		.loc 1 851 0
 8867 15ef 0FB6C0   		movzbl	%al, %eax
 8868 15f2 48C1E004 		salq	$4, %rax
 8869              	.LVL145:
 8870 15f6 48038414 		addq	58088(%rsp,%rdx), %rax
 8870      E8E20000 
 8871 15fe 488B08   		movq	(%rax), %rcx
 8872 1601 E952F7FF 		jmp	.L269
 8872      FF
 8873              	.LVL146:
 8874              	.L165:
 860:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8875              		.loc 1 860 0
 8876 1606 4489C0   		movl	%r8d, %eax
 861:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 8877              		.loc 1 861 0
 8878 1609 4489C2   		movl	%r8d, %edx
 859:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8879              		.loc 1 859 0
 8880 160c 41C1E815 		shrl	$21, %r8d
 8881              	.LVL147:
 860:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8882              		.loc 1 860 0
 8883 1610 C1E810   		shrl	$16, %eax
 8884              	.LVL148:
 862:src/vm3.c     **** PC  =  nPC;
 8885              		.loc 1 862 0
 8886 1613 4183E01F 		andl	$31, %r8d
 861:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 8887              		.loc 1 861 0
 8888 1617 C1EA0B   		shrl	$11, %edx
 8889              	.LVL149:
 862:src/vm3.c     **** PC  =  nPC;
 8890              		.loc 1 862 0
 8891 161a 83E01F   		andl	$31, %eax
 8892 161d 83E21F   		andl	$31, %edx
 8893 1620 8B048500 		movl	RF(,%rax,4), %eax
 8893      000000
GAS LISTING /tmp/cc15eBE3.s 			page 486


 8894 1627 420B0485 		orl	RF(,%r8,4), %eax
 8894      00000000 
 8895 162f F7D0     		notl	%eax
 8896 1631 89049500 		movl	%eax, RF(,%rdx,4)
 8896      000000
 863:src/vm3.c     **** nPC  += 4;
 8897              		.loc 1 863 0
 8898 1638 8B050000 		movl	nPC(%rip), %eax
 8898      0000
 865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8899              		.loc 1 865 0
 8900 163e 8D5003   		leal	3(%rax), %edx
 864:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8901              		.loc 1 864 0
 8902 1641 8D4804   		leal	4(%rax), %ecx
 863:src/vm3.c     **** nPC  += 4;
 8903              		.loc 1 863 0
 8904 1644 89050000 		movl	%eax, PC(%rip)
 8904      0000
 865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8905              		.loc 1 865 0
 8906 164a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 8906      00000000 
 8907 1652 89C2     		movl	%eax, %edx
 878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8908              		.loc 1 878 0
 8909 1654 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 8909      000000
 8910              	.LVL150:
 865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8911              		.loc 1 865 0
 8912 165b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8912      000000
 864:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 8913              		.loc 1 864 0
 8914 1662 890D0000 		movl	%ecx, nPC(%rip)
 8914      0000
 878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8915              		.loc 1 878 0
 8916 1668 8D4805   		leal	5(%rax), %ecx
 8917 166b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8917      000000
 865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 8918              		.loc 1 865 0
 8919 1672 C1E218   		sall	$24, %edx
 8920 1675 4109D0   		orl	%edx, %r8d
 8921 1678 8D5001   		leal	1(%rax), %edx
 8922 167b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8922      000000
 8923 1682 C1E210   		sall	$16, %edx
 8924 1685 4109D0   		orl	%edx, %r8d
 8925 1688 8D5002   		leal	2(%rax), %edx
 8926 168b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 8926      000000
 8927 1692 C1E208   		sall	$8, %edx
 8928 1695 4109D0   		orl	%edx, %r8d
 8929              	.LVL151:
GAS LISTING /tmp/cc15eBE3.s 			page 487


 866:src/vm3.c     ****   if (op0 == 0x0) {
 8930              		.loc 1 866 0
 8931 1698 4489C6   		movl	%r8d, %esi
 868:src/vm3.c     ****     op0 = op0 + funct;
 8932              		.loc 1 868 0
 8933 169b 4488C2   		movb	%r8b, %dl
 866:src/vm3.c     ****   if (op0 == 0x0) {
 8934              		.loc 1 866 0
 8935 169e C1EE1A   		shrl	$26, %esi
 8936              	.LVL152:
 868:src/vm3.c     ****     op0 = op0 + funct;
 8937              		.loc 1 868 0
 8938 16a1 83E23F   		andl	$63, %edx
 8939 16a4 8D7E2B   		leal	43(%rsi), %edi
 8940 16a7 4084F6   		testb	%sil, %sil
 8941 16aa 0F45D7   		cmovne	%edi, %edx
 8942              	.LVL153:
 878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8943              		.loc 1 878 0
 8944 16ad C1E110   		sall	$16, %ecx
 8945 16b0 C1E318   		sall	$24, %ebx
 8946 16b3 09CB     		orl	%ecx, %ebx
 8947 16b5 8D4807   		leal	7(%rax), %ecx
 8948 16b8 83C006   		addl	$6, %eax
 8949 16bb 0FB68000 		movzbl	VM_memory(%rax), %eax
 8949      000000
 876:src/vm3.c     **** 
 8950              		.loc 1 876 0
 8951 16c2 0FB6D2   		movzbl	%dl, %edx
 878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8952              		.loc 1 878 0
 8953 16c5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 8953      000000
 876:src/vm3.c     **** 
 8954              		.loc 1 876 0
 8955 16cc 48C1E204 		salq	$4, %rdx
 8956              	.LVL154:
 878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 8957              		.loc 1 878 0
 8958 16d0 C1E008   		sall	$8, %eax
 8959 16d3 09CB     		orl	%ecx, %ebx
 8960 16d5 09C3     		orl	%eax, %ebx
 8961              	.LVL155:
 879:src/vm3.c     ****   if (op1 == 0x0) {
 8962              		.loc 1 879 0
 8963 16d7 89D9     		movl	%ebx, %ecx
 881:src/vm3.c     ****     op1 = op1 + funct;
 8964              		.loc 1 881 0
 8965 16d9 88D8     		movb	%bl, %al
 879:src/vm3.c     ****   if (op1 == 0x0) {
 8966              		.loc 1 879 0
 8967 16db C1E91A   		shrl	$26, %ecx
 8968              	.LVL156:
 881:src/vm3.c     ****     op1 = op1 + funct;
 8969              		.loc 1 881 0
 8970 16de 83E03F   		andl	$63, %eax
 8971 16e1 8D712B   		leal	43(%rcx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 488


 8972 16e4 84C9     		testb	%cl, %cl
 8973 16e6 0F45C6   		cmovne	%esi, %eax
 8974              	.LVL157:
 888:src/vm3.c     **** 
 8975              		.loc 1 888 0
 8976 16e9 0FB6C0   		movzbl	%al, %eax
 8977 16ec 48C1E004 		salq	$4, %rax
 8978              	.LVL158:
 8979 16f0 48038414 		addq	58088(%rsp,%rdx), %rax
 8979      E8E20000 
 8980 16f8 488B08   		movq	(%rax), %rcx
 8981 16fb E958F6FF 		jmp	.L269
 8981      FF
 8982              	.LVL159:
 8983              	.L43:
 897:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8984              		.loc 1 897 0
 8985 1700 4489C0   		movl	%r8d, %eax
 898:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 8986              		.loc 1 898 0
 8987 1703 4489C2   		movl	%r8d, %edx
 896:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 8988              		.loc 1 896 0
 8989 1706 41C1E815 		shrl	$21, %r8d
 8990              	.LVL160:
 897:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 8991              		.loc 1 897 0
 8992 170a C1E810   		shrl	$16, %eax
 8993              	.LVL161:
 899:src/vm3.c     **** PC  =  nPC;
 8994              		.loc 1 899 0
 8995 170d 4183E01F 		andl	$31, %r8d
 898:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 8996              		.loc 1 898 0
 8997 1711 C1EA0B   		shrl	$11, %edx
 8998              	.LVL162:
 899:src/vm3.c     **** PC  =  nPC;
 8999              		.loc 1 899 0
 9000 1714 83E01F   		andl	$31, %eax
 9001 1717 83E21F   		andl	$31, %edx
 9002 171a 8B048500 		movl	RF(,%rax,4), %eax
 9002      000000
 9003 1721 420B0485 		orl	RF(,%r8,4), %eax
 9003      00000000 
 9004 1729 89049500 		movl	%eax, RF(,%rdx,4)
 9004      000000
 900:src/vm3.c     **** nPC  += 4;
 9005              		.loc 1 900 0
 9006 1730 8B050000 		movl	nPC(%rip), %eax
 9006      0000
 902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9007              		.loc 1 902 0
 9008 1736 8D5003   		leal	3(%rax), %edx
 901:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9009              		.loc 1 901 0
 9010 1739 8D4804   		leal	4(%rax), %ecx
 900:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 489


 9011              		.loc 1 900 0
 9012 173c 89050000 		movl	%eax, PC(%rip)
 9012      0000
 902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9013              		.loc 1 902 0
 9014 1742 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9014      00000000 
 9015 174a 89C2     		movl	%eax, %edx
 915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9016              		.loc 1 915 0
 9017 174c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9017      000000
 9018              	.LVL163:
 902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9019              		.loc 1 902 0
 9020 1753 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9020      000000
 901:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9021              		.loc 1 901 0
 9022 175a 890D0000 		movl	%ecx, nPC(%rip)
 9022      0000
 915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9023              		.loc 1 915 0
 9024 1760 8D4805   		leal	5(%rax), %ecx
 9025 1763 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9025      000000
 902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9026              		.loc 1 902 0
 9027 176a C1E218   		sall	$24, %edx
 9028 176d 4109D0   		orl	%edx, %r8d
 9029 1770 8D5001   		leal	1(%rax), %edx
 9030 1773 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9030      000000
 9031 177a C1E210   		sall	$16, %edx
 9032 177d 4109D0   		orl	%edx, %r8d
 9033 1780 8D5002   		leal	2(%rax), %edx
 9034 1783 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9034      000000
 9035 178a C1E208   		sall	$8, %edx
 9036 178d 4109D0   		orl	%edx, %r8d
 9037              	.LVL164:
 903:src/vm3.c     ****   if (op0 == 0x0) {
 9038              		.loc 1 903 0
 9039 1790 4489C6   		movl	%r8d, %esi
 905:src/vm3.c     ****     op0 = op0 + funct;
 9040              		.loc 1 905 0
 9041 1793 4488C2   		movb	%r8b, %dl
 903:src/vm3.c     ****   if (op0 == 0x0) {
 9042              		.loc 1 903 0
 9043 1796 C1EE1A   		shrl	$26, %esi
 9044              	.LVL165:
 905:src/vm3.c     ****     op0 = op0 + funct;
 9045              		.loc 1 905 0
 9046 1799 83E23F   		andl	$63, %edx
 9047 179c 8D7E2B   		leal	43(%rsi), %edi
 9048 179f 4084F6   		testb	%sil, %sil
 9049 17a2 0F45D7   		cmovne	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 490


 9050              	.LVL166:
 915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9051              		.loc 1 915 0
 9052 17a5 C1E110   		sall	$16, %ecx
 9053 17a8 C1E318   		sall	$24, %ebx
 9054 17ab 09CB     		orl	%ecx, %ebx
 9055 17ad 8D4807   		leal	7(%rax), %ecx
 9056 17b0 83C006   		addl	$6, %eax
 9057 17b3 0FB68000 		movzbl	VM_memory(%rax), %eax
 9057      000000
 913:src/vm3.c     **** 
 9058              		.loc 1 913 0
 9059 17ba 0FB6D2   		movzbl	%dl, %edx
 915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9060              		.loc 1 915 0
 9061 17bd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9061      000000
 913:src/vm3.c     **** 
 9062              		.loc 1 913 0
 9063 17c4 48C1E204 		salq	$4, %rdx
 9064              	.LVL167:
 915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9065              		.loc 1 915 0
 9066 17c8 C1E008   		sall	$8, %eax
 9067 17cb 09CB     		orl	%ecx, %ebx
 9068 17cd 09C3     		orl	%eax, %ebx
 9069              	.LVL168:
 916:src/vm3.c     ****   if (op1 == 0x0) {
 9070              		.loc 1 916 0
 9071 17cf 89D9     		movl	%ebx, %ecx
 918:src/vm3.c     ****     op1 = op1 + funct;
 9072              		.loc 1 918 0
 9073 17d1 88D8     		movb	%bl, %al
 916:src/vm3.c     ****   if (op1 == 0x0) {
 9074              		.loc 1 916 0
 9075 17d3 C1E91A   		shrl	$26, %ecx
 9076              	.LVL169:
 918:src/vm3.c     ****     op1 = op1 + funct;
 9077              		.loc 1 918 0
 9078 17d6 83E03F   		andl	$63, %eax
 9079 17d9 8D712B   		leal	43(%rcx), %esi
 9080 17dc 84C9     		testb	%cl, %cl
 9081 17de 0F45C6   		cmovne	%esi, %eax
 9082              	.LVL170:
 925:src/vm3.c     **** 
 9083              		.loc 1 925 0
 9084 17e1 0FB6C0   		movzbl	%al, %eax
 9085 17e4 48C1E004 		salq	$4, %rax
 9086              	.LVL171:
 9087 17e8 48038414 		addq	58088(%rsp,%rdx), %rax
 9087      E8E20000 
 9088 17f0 488B08   		movq	(%rax), %rcx
 9089 17f3 E960F5FF 		jmp	.L269
 9089      FF
 9090              	.LVL172:
 9091              	.L16:
 934:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 491


 9092              		.loc 1 934 0
 9093 17f8 4489C0   		movl	%r8d, %eax
 935:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 9094              		.loc 1 935 0
 9095 17fb 4489C2   		movl	%r8d, %edx
 933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9096              		.loc 1 933 0
 9097 17fe 41C1E806 		shrl	$6, %r8d
 9098              	.LVL173:
 934:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9099              		.loc 1 934 0
 9100 1802 C1E810   		shrl	$16, %eax
 9101              	.LVL174:
 933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9102              		.loc 1 933 0
 9103 1805 4488C1   		movb	%r8b, %cl
 935:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 9104              		.loc 1 935 0
 9105 1808 C1EA0B   		shrl	$11, %edx
 9106              	.LVL175:
 936:src/vm3.c     **** PC  =  nPC;
 9107              		.loc 1 936 0
 9108 180b 83E01F   		andl	$31, %eax
 933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9109              		.loc 1 933 0
 9110 180e 83E11F   		andl	$31, %ecx
 936:src/vm3.c     **** PC  =  nPC;
 9111              		.loc 1 936 0
 9112 1811 83E21F   		andl	$31, %edx
 9113 1814 8B048500 		movl	RF(,%rax,4), %eax
 9113      000000
 9114 181b D3E0     		sall	%cl, %eax
 9115 181d 89049500 		movl	%eax, RF(,%rdx,4)
 9115      000000
 937:src/vm3.c     **** nPC  += 4;
 9116              		.loc 1 937 0
 9117 1824 8B050000 		movl	nPC(%rip), %eax
 9117      0000
 939:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9118              		.loc 1 939 0
 9119 182a 8D5003   		leal	3(%rax), %edx
 938:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9120              		.loc 1 938 0
 9121 182d 8D4804   		leal	4(%rax), %ecx
 937:src/vm3.c     **** nPC  += 4;
 9122              		.loc 1 937 0
 9123 1830 89050000 		movl	%eax, PC(%rip)
 9123      0000
 939:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9124              		.loc 1 939 0
 9125 1836 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9125      00000000 
 9126 183e 89C2     		movl	%eax, %edx
 952:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9127              		.loc 1 952 0
 9128 1840 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9128      000000
GAS LISTING /tmp/cc15eBE3.s 			page 492


 9129              	.LVL176:
 939:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9130              		.loc 1 939 0
 9131 1847 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9131      000000
 938:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9132              		.loc 1 938 0
 9133 184e 890D0000 		movl	%ecx, nPC(%rip)
 9133      0000
 952:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9134              		.loc 1 952 0
 9135 1854 8D4805   		leal	5(%rax), %ecx
 9136 1857 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9136      000000
 939:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9137              		.loc 1 939 0
 9138 185e C1E218   		sall	$24, %edx
 9139 1861 4109D0   		orl	%edx, %r8d
 9140 1864 8D5001   		leal	1(%rax), %edx
 9141 1867 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9141      000000
 9142 186e C1E210   		sall	$16, %edx
 9143 1871 4109D0   		orl	%edx, %r8d
 9144 1874 8D5002   		leal	2(%rax), %edx
 9145 1877 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9145      000000
 9146 187e C1E208   		sall	$8, %edx
 9147 1881 4109D0   		orl	%edx, %r8d
 9148              	.LVL177:
 940:src/vm3.c     ****   if (op0 == 0x0) {
 9149              		.loc 1 940 0
 9150 1884 4489C6   		movl	%r8d, %esi
 942:src/vm3.c     ****     op0 = op0 + funct;
 9151              		.loc 1 942 0
 9152 1887 4488C2   		movb	%r8b, %dl
 940:src/vm3.c     ****   if (op0 == 0x0) {
 9153              		.loc 1 940 0
 9154 188a C1EE1A   		shrl	$26, %esi
 9155              	.LVL178:
 942:src/vm3.c     ****     op0 = op0 + funct;
 9156              		.loc 1 942 0
 9157 188d 83E23F   		andl	$63, %edx
 9158 1890 8D7E2B   		leal	43(%rsi), %edi
 9159 1893 4084F6   		testb	%sil, %sil
 9160 1896 0F45D7   		cmovne	%edi, %edx
 9161              	.LVL179:
 952:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9162              		.loc 1 952 0
 9163 1899 C1E110   		sall	$16, %ecx
 9164 189c C1E318   		sall	$24, %ebx
 9165 189f 09CB     		orl	%ecx, %ebx
 9166 18a1 8D4807   		leal	7(%rax), %ecx
 9167 18a4 83C006   		addl	$6, %eax
 9168 18a7 0FB68000 		movzbl	VM_memory(%rax), %eax
 9168      000000
 950:src/vm3.c     **** 
 9169              		.loc 1 950 0
GAS LISTING /tmp/cc15eBE3.s 			page 493


 9170 18ae 0FB6D2   		movzbl	%dl, %edx
 952:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9171              		.loc 1 952 0
 9172 18b1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9172      000000
 950:src/vm3.c     **** 
 9173              		.loc 1 950 0
 9174 18b8 48C1E204 		salq	$4, %rdx
 9175              	.LVL180:
 952:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9176              		.loc 1 952 0
 9177 18bc C1E008   		sall	$8, %eax
 9178 18bf 09CB     		orl	%ecx, %ebx
 9179 18c1 09C3     		orl	%eax, %ebx
 9180              	.LVL181:
 953:src/vm3.c     ****   if (op1 == 0x0) {
 9181              		.loc 1 953 0
 9182 18c3 89D9     		movl	%ebx, %ecx
 955:src/vm3.c     ****     op1 = op1 + funct;
 9183              		.loc 1 955 0
 9184 18c5 88D8     		movb	%bl, %al
 953:src/vm3.c     ****   if (op1 == 0x0) {
 9185              		.loc 1 953 0
 9186 18c7 C1E91A   		shrl	$26, %ecx
 9187              	.LVL182:
 955:src/vm3.c     ****     op1 = op1 + funct;
 9188              		.loc 1 955 0
 9189 18ca 83E03F   		andl	$63, %eax
 9190 18cd 8D712B   		leal	43(%rcx), %esi
 9191 18d0 84C9     		testb	%cl, %cl
 9192 18d2 0F45C6   		cmovne	%esi, %eax
 9193              	.LVL183:
 962:src/vm3.c     **** 
 9194              		.loc 1 962 0
 9195 18d5 0FB6C0   		movzbl	%al, %eax
 9196 18d8 48C1E004 		salq	$4, %rax
 9197              	.LVL184:
 9198 18dc 48038414 		addq	58088(%rsp,%rdx), %rax
 9198      E8E20000 
 9199 18e4 488B08   		movq	(%rax), %rcx
 9200 18e7 E96CF4FF 		jmp	.L269
 9200      FF
 9201              	.LVL185:
 9202              	.L238:
 971:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9203              		.loc 1 971 0
 9204 18ec 4489C0   		movl	%r8d, %eax
 972:src/vm3.c     **** RF[rd] = RF[rt] << RF[rs];
 9205              		.loc 1 972 0
 9206 18ef 4489C2   		movl	%r8d, %edx
 970:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9207              		.loc 1 970 0
 9208 18f2 41C1E815 		shrl	$21, %r8d
 9209              	.LVL186:
 971:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9210              		.loc 1 971 0
 9211 18f6 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 494


 9212              	.LVL187:
 973:src/vm3.c     **** PC  =  nPC;
 9213              		.loc 1 973 0
 9214 18f9 4183E01F 		andl	$31, %r8d
 972:src/vm3.c     **** RF[rd] = RF[rt] << RF[rs];
 9215              		.loc 1 972 0
 9216 18fd C1EA0B   		shrl	$11, %edx
 9217              	.LVL188:
 973:src/vm3.c     **** PC  =  nPC;
 9218              		.loc 1 973 0
 9219 1900 83E01F   		andl	$31, %eax
 9220 1903 428B0C85 		movl	RF(,%r8,4), %ecx
 9220      00000000 
 9221 190b 83E21F   		andl	$31, %edx
 9222 190e 8B048500 		movl	RF(,%rax,4), %eax
 9222      000000
 9223 1915 D3E0     		sall	%cl, %eax
 9224 1917 89049500 		movl	%eax, RF(,%rdx,4)
 9224      000000
 974:src/vm3.c     **** nPC  += 4;
 9225              		.loc 1 974 0
 9226 191e 8B050000 		movl	nPC(%rip), %eax
 9226      0000
 976:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9227              		.loc 1 976 0
 9228 1924 8D5003   		leal	3(%rax), %edx
 975:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9229              		.loc 1 975 0
 9230 1927 8D4804   		leal	4(%rax), %ecx
 974:src/vm3.c     **** nPC  += 4;
 9231              		.loc 1 974 0
 9232 192a 89050000 		movl	%eax, PC(%rip)
 9232      0000
 976:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9233              		.loc 1 976 0
 9234 1930 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9234      00000000 
 9235 1938 89C2     		movl	%eax, %edx
 989:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9236              		.loc 1 989 0
 9237 193a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9237      000000
 9238              	.LVL189:
 976:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9239              		.loc 1 976 0
 9240 1941 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9240      000000
 975:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9241              		.loc 1 975 0
 9242 1948 890D0000 		movl	%ecx, nPC(%rip)
 9242      0000
 989:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9243              		.loc 1 989 0
 9244 194e 8D4805   		leal	5(%rax), %ecx
 9245 1951 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9245      000000
 976:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 495


 9246              		.loc 1 976 0
 9247 1958 C1E218   		sall	$24, %edx
 9248 195b 4109D0   		orl	%edx, %r8d
 9249 195e 8D5001   		leal	1(%rax), %edx
 9250 1961 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9250      000000
 9251 1968 C1E210   		sall	$16, %edx
 9252 196b 4109D0   		orl	%edx, %r8d
 9253 196e 8D5002   		leal	2(%rax), %edx
 9254 1971 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9254      000000
 9255 1978 C1E208   		sall	$8, %edx
 9256 197b 4109D0   		orl	%edx, %r8d
 9257              	.LVL190:
 977:src/vm3.c     ****   if (op0 == 0x0) {
 9258              		.loc 1 977 0
 9259 197e 4489C6   		movl	%r8d, %esi
 979:src/vm3.c     ****     op0 = op0 + funct;
 9260              		.loc 1 979 0
 9261 1981 4488C2   		movb	%r8b, %dl
 977:src/vm3.c     ****   if (op0 == 0x0) {
 9262              		.loc 1 977 0
 9263 1984 C1EE1A   		shrl	$26, %esi
 9264              	.LVL191:
 979:src/vm3.c     ****     op0 = op0 + funct;
 9265              		.loc 1 979 0
 9266 1987 83E23F   		andl	$63, %edx
 9267 198a 8D7E2B   		leal	43(%rsi), %edi
 9268 198d 4084F6   		testb	%sil, %sil
 9269 1990 0F45D7   		cmovne	%edi, %edx
 9270              	.LVL192:
 989:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9271              		.loc 1 989 0
 9272 1993 C1E110   		sall	$16, %ecx
 9273 1996 C1E318   		sall	$24, %ebx
 9274 1999 09CB     		orl	%ecx, %ebx
 9275 199b 8D4807   		leal	7(%rax), %ecx
 9276 199e 83C006   		addl	$6, %eax
 9277 19a1 0FB68000 		movzbl	VM_memory(%rax), %eax
 9277      000000
 987:src/vm3.c     **** 
 9278              		.loc 1 987 0
 9279 19a8 0FB6D2   		movzbl	%dl, %edx
 989:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9280              		.loc 1 989 0
 9281 19ab 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9281      000000
 987:src/vm3.c     **** 
 9282              		.loc 1 987 0
 9283 19b2 48C1E204 		salq	$4, %rdx
 9284              	.LVL193:
 989:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9285              		.loc 1 989 0
 9286 19b6 C1E008   		sall	$8, %eax
 9287 19b9 09CB     		orl	%ecx, %ebx
 9288 19bb 09C3     		orl	%eax, %ebx
 9289              	.LVL194:
GAS LISTING /tmp/cc15eBE3.s 			page 496


 990:src/vm3.c     ****   if (op1 == 0x0) {
 9290              		.loc 1 990 0
 9291 19bd 89D9     		movl	%ebx, %ecx
 992:src/vm3.c     ****     op1 = op1 + funct;
 9292              		.loc 1 992 0
 9293 19bf 88D8     		movb	%bl, %al
 990:src/vm3.c     ****   if (op1 == 0x0) {
 9294              		.loc 1 990 0
 9295 19c1 C1E91A   		shrl	$26, %ecx
 9296              	.LVL195:
 992:src/vm3.c     ****     op1 = op1 + funct;
 9297              		.loc 1 992 0
 9298 19c4 83E03F   		andl	$63, %eax
 9299 19c7 8D712B   		leal	43(%rcx), %esi
 9300 19ca 84C9     		testb	%cl, %cl
 9301 19cc 0F45C6   		cmovne	%esi, %eax
 9302              	.LVL196:
 999:src/vm3.c     **** 
 9303              		.loc 1 999 0
 9304 19cf 0FB6C0   		movzbl	%al, %eax
 9305 19d2 48C1E004 		salq	$4, %rax
 9306              	.LVL197:
 9307 19d6 48038414 		addq	58088(%rsp,%rdx), %rax
 9307      E8E20000 
 9308 19de 488B08   		movq	(%rax), %rcx
 9309 19e1 E972F3FF 		jmp	.L269
 9309      FF
 9310              	.LVL198:
 9311              	.L235:
1008:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
 9312              		.loc 1 1008 0
 9313 19e6 4489C0   		movl	%r8d, %eax
1007:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9314              		.loc 1 1007 0
 9315 19e9 4489C1   		movl	%r8d, %ecx
1010:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 9316              		.loc 1 1010 0
 9317 19ec 41C1E80B 		shrl	$11, %r8d
 9318              	.LVL199:
1008:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
 9319              		.loc 1 1008 0
 9320 19f0 C1E810   		shrl	$16, %eax
 9321              	.LVL200:
1007:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9322              		.loc 1 1007 0
 9323 19f3 C1E906   		shrl	$6, %ecx
 9324              	.LVL201:
1011:src/vm3.c     **** }
 9325              		.loc 1 1011 0
 9326 19f6 4183E01F 		andl	$31, %r8d
1009:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9327              		.loc 1 1009 0
 9328 19fa 83E01F   		andl	$31, %eax
1007:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9329              		.loc 1 1007 0
 9330 19fd 83E11F   		andl	$31, %ecx
 9331              	.LVL202:
GAS LISTING /tmp/cc15eBE3.s 			page 497


1009:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9332              		.loc 1 1009 0
 9333 1a00 8B148500 		movl	RF(,%rax,4), %edx
 9333      000000
 9334 1a07 85D2     		testl	%edx, %edx
 9335 1a09 7917     		jns	.L325
1009:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9336              		.loc 1 1009 0 is_stmt 0 discriminator 1
 9337 1a0b 84C9     		testb	%cl, %cl
 9338 1a0d 7413     		je	.L325
 9339              	.LVL203:
1011:src/vm3.c     **** }
 9340              		.loc 1 1011 0 is_stmt 1
 9341 1a0f 4489E0   		movl	%r12d, %eax
 9342 1a12 D3E8     		shrl	%cl, %eax
 9343 1a14 F7D0     		notl	%eax
 9344 1a16 09D0     		orl	%edx, %eax
 9345 1a18 42890485 		movl	%eax, RF(,%r8,4)
 9345      00000000 
 9346 1a20 EB0A     		jmp	.L326
 9347              	.LVL204:
 9348              	.L325:
1015:src/vm3.c     **** }
 9349              		.loc 1 1015 0
 9350 1a22 D3FA     		sarl	%cl, %edx
 9351 1a24 42891485 		movl	%edx, RF(,%r8,4)
 9351      00000000 
 9352              	.LVL205:
 9353              	.L326:
1017:src/vm3.c     **** nPC  += 4;
 9354              		.loc 1 1017 0
 9355 1a2c 8B050000 		movl	nPC(%rip), %eax
 9355      0000
1019:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9356              		.loc 1 1019 0
 9357 1a32 8D5003   		leal	3(%rax), %edx
1018:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9358              		.loc 1 1018 0
 9359 1a35 8D4804   		leal	4(%rax), %ecx
 9360              	.LVL206:
1017:src/vm3.c     **** nPC  += 4;
 9361              		.loc 1 1017 0
 9362 1a38 89050000 		movl	%eax, PC(%rip)
 9362      0000
1019:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9363              		.loc 1 1019 0
 9364 1a3e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9364      00000000 
 9365 1a46 89C2     		movl	%eax, %edx
1032:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9366              		.loc 1 1032 0
 9367 1a48 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9367      000000
 9368              	.LVL207:
1019:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9369              		.loc 1 1019 0
 9370 1a4f 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 498


 9370      000000
1018:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9371              		.loc 1 1018 0
 9372 1a56 890D0000 		movl	%ecx, nPC(%rip)
 9372      0000
1032:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9373              		.loc 1 1032 0
 9374 1a5c 8D4805   		leal	5(%rax), %ecx
 9375 1a5f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9375      000000
1019:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9376              		.loc 1 1019 0
 9377 1a66 C1E218   		sall	$24, %edx
 9378 1a69 4109D0   		orl	%edx, %r8d
 9379 1a6c 8D5001   		leal	1(%rax), %edx
 9380 1a6f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9380      000000
 9381 1a76 C1E210   		sall	$16, %edx
 9382 1a79 4109D0   		orl	%edx, %r8d
 9383 1a7c 8D5002   		leal	2(%rax), %edx
 9384 1a7f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9384      000000
 9385 1a86 C1E208   		sall	$8, %edx
 9386 1a89 4109D0   		orl	%edx, %r8d
 9387              	.LVL208:
1020:src/vm3.c     ****   if (op0 == 0x0) {
 9388              		.loc 1 1020 0
 9389 1a8c 4489C6   		movl	%r8d, %esi
1022:src/vm3.c     ****     op0 = op0 + funct;
 9390              		.loc 1 1022 0
 9391 1a8f 4488C2   		movb	%r8b, %dl
1020:src/vm3.c     ****   if (op0 == 0x0) {
 9392              		.loc 1 1020 0
 9393 1a92 C1EE1A   		shrl	$26, %esi
 9394              	.LVL209:
1022:src/vm3.c     ****     op0 = op0 + funct;
 9395              		.loc 1 1022 0
 9396 1a95 83E23F   		andl	$63, %edx
 9397 1a98 8D7E2B   		leal	43(%rsi), %edi
 9398 1a9b 4084F6   		testb	%sil, %sil
 9399 1a9e 0F45D7   		cmovne	%edi, %edx
 9400              	.LVL210:
1032:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9401              		.loc 1 1032 0
 9402 1aa1 C1E110   		sall	$16, %ecx
 9403 1aa4 C1E318   		sall	$24, %ebx
 9404 1aa7 09CB     		orl	%ecx, %ebx
 9405 1aa9 8D4807   		leal	7(%rax), %ecx
 9406 1aac 83C006   		addl	$6, %eax
 9407 1aaf 0FB68000 		movzbl	VM_memory(%rax), %eax
 9407      000000
1030:src/vm3.c     **** 
 9408              		.loc 1 1030 0
 9409 1ab6 0FB6D2   		movzbl	%dl, %edx
1032:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9410              		.loc 1 1032 0
 9411 1ab9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 499


 9411      000000
1030:src/vm3.c     **** 
 9412              		.loc 1 1030 0
 9413 1ac0 48C1E204 		salq	$4, %rdx
 9414              	.LVL211:
1032:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9415              		.loc 1 1032 0
 9416 1ac4 C1E008   		sall	$8, %eax
 9417 1ac7 09CB     		orl	%ecx, %ebx
 9418 1ac9 09C3     		orl	%eax, %ebx
 9419              	.LVL212:
1033:src/vm3.c     ****   if (op1 == 0x0) {
 9420              		.loc 1 1033 0
 9421 1acb 89D9     		movl	%ebx, %ecx
1035:src/vm3.c     ****     op1 = op1 + funct;
 9422              		.loc 1 1035 0
 9423 1acd 88D8     		movb	%bl, %al
1033:src/vm3.c     ****   if (op1 == 0x0) {
 9424              		.loc 1 1033 0
 9425 1acf C1E91A   		shrl	$26, %ecx
 9426              	.LVL213:
1035:src/vm3.c     ****     op1 = op1 + funct;
 9427              		.loc 1 1035 0
 9428 1ad2 83E03F   		andl	$63, %eax
 9429 1ad5 8D712B   		leal	43(%rcx), %esi
 9430 1ad8 84C9     		testb	%cl, %cl
 9431 1ada 0F45C6   		cmovne	%esi, %eax
 9432              	.LVL214:
1042:src/vm3.c     **** 
 9433              		.loc 1 1042 0
 9434 1add 0FB6C0   		movzbl	%al, %eax
 9435 1ae0 48C1E004 		salq	$4, %rax
 9436              	.LVL215:
 9437 1ae4 48038414 		addq	58088(%rsp,%rdx), %rax
 9437      E8E20000 
 9438 1aec 488B08   		movq	(%rax), %rcx
 9439 1aef E964F2FF 		jmp	.L269
 9439      FF
 9440              	.LVL216:
 9441              	.L240:
1051:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9442              		.loc 1 1051 0
 9443 1af4 4489C0   		movl	%r8d, %eax
1052:src/vm3.c     **** RF[rd] = RF[rt] >> RF[rs];
 9444              		.loc 1 1052 0
 9445 1af7 4489C2   		movl	%r8d, %edx
1050:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9446              		.loc 1 1050 0
 9447 1afa 41C1E815 		shrl	$21, %r8d
 9448              	.LVL217:
1051:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9449              		.loc 1 1051 0
 9450 1afe C1E810   		shrl	$16, %eax
 9451              	.LVL218:
1053:src/vm3.c     **** PC  =  nPC;
 9452              		.loc 1 1053 0
 9453 1b01 4183E01F 		andl	$31, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 500


1052:src/vm3.c     **** RF[rd] = RF[rt] >> RF[rs];
 9454              		.loc 1 1052 0
 9455 1b05 C1EA0B   		shrl	$11, %edx
 9456              	.LVL219:
1053:src/vm3.c     **** PC  =  nPC;
 9457              		.loc 1 1053 0
 9458 1b08 83E01F   		andl	$31, %eax
 9459 1b0b 428B0C85 		movl	RF(,%r8,4), %ecx
 9459      00000000 
 9460 1b13 83E21F   		andl	$31, %edx
 9461 1b16 8B048500 		movl	RF(,%rax,4), %eax
 9461      000000
 9462 1b1d D3E8     		shrl	%cl, %eax
 9463 1b1f 89049500 		movl	%eax, RF(,%rdx,4)
 9463      000000
1054:src/vm3.c     **** nPC  += 4;
 9464              		.loc 1 1054 0
 9465 1b26 8B050000 		movl	nPC(%rip), %eax
 9465      0000
1056:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9466              		.loc 1 1056 0
 9467 1b2c 8D5003   		leal	3(%rax), %edx
1055:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9468              		.loc 1 1055 0
 9469 1b2f 8D4804   		leal	4(%rax), %ecx
1054:src/vm3.c     **** nPC  += 4;
 9470              		.loc 1 1054 0
 9471 1b32 89050000 		movl	%eax, PC(%rip)
 9471      0000
1056:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9472              		.loc 1 1056 0
 9473 1b38 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9473      00000000 
 9474 1b40 89C2     		movl	%eax, %edx
1069:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9475              		.loc 1 1069 0
 9476 1b42 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9476      000000
 9477              	.LVL220:
1056:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9478              		.loc 1 1056 0
 9479 1b49 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9479      000000
1055:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9480              		.loc 1 1055 0
 9481 1b50 890D0000 		movl	%ecx, nPC(%rip)
 9481      0000
1069:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9482              		.loc 1 1069 0
 9483 1b56 8D4805   		leal	5(%rax), %ecx
 9484 1b59 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9484      000000
1056:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9485              		.loc 1 1056 0
 9486 1b60 C1E218   		sall	$24, %edx
 9487 1b63 4109D0   		orl	%edx, %r8d
 9488 1b66 8D5001   		leal	1(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 501


 9489 1b69 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9489      000000
 9490 1b70 C1E210   		sall	$16, %edx
 9491 1b73 4109D0   		orl	%edx, %r8d
 9492 1b76 8D5002   		leal	2(%rax), %edx
 9493 1b79 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9493      000000
 9494 1b80 C1E208   		sall	$8, %edx
 9495 1b83 4109D0   		orl	%edx, %r8d
 9496              	.LVL221:
1057:src/vm3.c     ****   if (op0 == 0x0) {
 9497              		.loc 1 1057 0
 9498 1b86 4489C6   		movl	%r8d, %esi
1059:src/vm3.c     ****     op0 = op0 + funct;
 9499              		.loc 1 1059 0
 9500 1b89 4488C2   		movb	%r8b, %dl
1057:src/vm3.c     ****   if (op0 == 0x0) {
 9501              		.loc 1 1057 0
 9502 1b8c C1EE1A   		shrl	$26, %esi
 9503              	.LVL222:
1059:src/vm3.c     ****     op0 = op0 + funct;
 9504              		.loc 1 1059 0
 9505 1b8f 83E23F   		andl	$63, %edx
 9506 1b92 8D7E2B   		leal	43(%rsi), %edi
 9507 1b95 4084F6   		testb	%sil, %sil
 9508 1b98 0F45D7   		cmovne	%edi, %edx
 9509              	.LVL223:
1069:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9510              		.loc 1 1069 0
 9511 1b9b C1E110   		sall	$16, %ecx
 9512 1b9e C1E318   		sall	$24, %ebx
 9513 1ba1 09CB     		orl	%ecx, %ebx
 9514 1ba3 8D4807   		leal	7(%rax), %ecx
 9515 1ba6 83C006   		addl	$6, %eax
 9516 1ba9 0FB68000 		movzbl	VM_memory(%rax), %eax
 9516      000000
1067:src/vm3.c     **** 
 9517              		.loc 1 1067 0
 9518 1bb0 0FB6D2   		movzbl	%dl, %edx
1069:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9519              		.loc 1 1069 0
 9520 1bb3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9520      000000
1067:src/vm3.c     **** 
 9521              		.loc 1 1067 0
 9522 1bba 48C1E204 		salq	$4, %rdx
 9523              	.LVL224:
1069:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9524              		.loc 1 1069 0
 9525 1bbe C1E008   		sall	$8, %eax
 9526 1bc1 09CB     		orl	%ecx, %ebx
 9527 1bc3 09C3     		orl	%eax, %ebx
 9528              	.LVL225:
1070:src/vm3.c     ****   if (op1 == 0x0) {
 9529              		.loc 1 1070 0
 9530 1bc5 89D9     		movl	%ebx, %ecx
1072:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 502


 9531              		.loc 1 1072 0
 9532 1bc7 88D8     		movb	%bl, %al
1070:src/vm3.c     ****   if (op1 == 0x0) {
 9533              		.loc 1 1070 0
 9534 1bc9 C1E91A   		shrl	$26, %ecx
 9535              	.LVL226:
1072:src/vm3.c     ****     op1 = op1 + funct;
 9536              		.loc 1 1072 0
 9537 1bcc 83E03F   		andl	$63, %eax
 9538 1bcf 8D712B   		leal	43(%rcx), %esi
 9539 1bd2 84C9     		testb	%cl, %cl
 9540 1bd4 0F45C6   		cmovne	%esi, %eax
 9541              	.LVL227:
1079:src/vm3.c     **** 
 9542              		.loc 1 1079 0
 9543 1bd7 0FB6C0   		movzbl	%al, %eax
 9544 1bda 48C1E004 		salq	$4, %rax
 9545              	.LVL228:
 9546 1bde 48038414 		addq	58088(%rsp,%rdx), %rax
 9546      E8E20000 
 9547 1be6 488B08   		movq	(%rax), %rcx
 9548 1be9 E96AF1FF 		jmp	.L269
 9548      FF
 9549              	.LVL229:
 9550              	.L210:
1088:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9551              		.loc 1 1088 0
 9552 1bee 4489C0   		movl	%r8d, %eax
1089:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 9553              		.loc 1 1089 0
 9554 1bf1 4489C2   		movl	%r8d, %edx
1087:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9555              		.loc 1 1087 0
 9556 1bf4 41C1E806 		shrl	$6, %r8d
 9557              	.LVL230:
1088:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9558              		.loc 1 1088 0
 9559 1bf8 C1E810   		shrl	$16, %eax
 9560              	.LVL231:
1087:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9561              		.loc 1 1087 0
 9562 1bfb 4488C1   		movb	%r8b, %cl
1089:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 9563              		.loc 1 1089 0
 9564 1bfe C1EA0B   		shrl	$11, %edx
 9565              	.LVL232:
1090:src/vm3.c     **** PC  =  nPC;
 9566              		.loc 1 1090 0
 9567 1c01 83E01F   		andl	$31, %eax
1087:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9568              		.loc 1 1087 0
 9569 1c04 83E11F   		andl	$31, %ecx
1090:src/vm3.c     **** PC  =  nPC;
 9570              		.loc 1 1090 0
 9571 1c07 83E21F   		andl	$31, %edx
 9572 1c0a 8B048500 		movl	RF(,%rax,4), %eax
 9572      000000
GAS LISTING /tmp/cc15eBE3.s 			page 503


 9573 1c11 D3E8     		shrl	%cl, %eax
 9574 1c13 89049500 		movl	%eax, RF(,%rdx,4)
 9574      000000
1091:src/vm3.c     **** nPC  += 4;
 9575              		.loc 1 1091 0
 9576 1c1a 8B050000 		movl	nPC(%rip), %eax
 9576      0000
1093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9577              		.loc 1 1093 0
 9578 1c20 8D5003   		leal	3(%rax), %edx
1092:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9579              		.loc 1 1092 0
 9580 1c23 8D4804   		leal	4(%rax), %ecx
1091:src/vm3.c     **** nPC  += 4;
 9581              		.loc 1 1091 0
 9582 1c26 89050000 		movl	%eax, PC(%rip)
 9582      0000
1093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9583              		.loc 1 1093 0
 9584 1c2c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9584      00000000 
 9585 1c34 89C2     		movl	%eax, %edx
1106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9586              		.loc 1 1106 0
 9587 1c36 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9587      000000
 9588              	.LVL233:
1093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9589              		.loc 1 1093 0
 9590 1c3d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9590      000000
1092:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9591              		.loc 1 1092 0
 9592 1c44 890D0000 		movl	%ecx, nPC(%rip)
 9592      0000
1106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9593              		.loc 1 1106 0
 9594 1c4a 8D4805   		leal	5(%rax), %ecx
 9595 1c4d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9595      000000
1093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9596              		.loc 1 1093 0
 9597 1c54 C1E218   		sall	$24, %edx
 9598 1c57 4109D0   		orl	%edx, %r8d
 9599 1c5a 8D5001   		leal	1(%rax), %edx
 9600 1c5d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9600      000000
 9601 1c64 C1E210   		sall	$16, %edx
 9602 1c67 4109D0   		orl	%edx, %r8d
 9603 1c6a 8D5002   		leal	2(%rax), %edx
 9604 1c6d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9604      000000
 9605 1c74 C1E208   		sall	$8, %edx
 9606 1c77 4109D0   		orl	%edx, %r8d
 9607              	.LVL234:
1094:src/vm3.c     ****   if (op0 == 0x0) {
 9608              		.loc 1 1094 0
GAS LISTING /tmp/cc15eBE3.s 			page 504


 9609 1c7a 4489C6   		movl	%r8d, %esi
1096:src/vm3.c     ****     op0 = op0 + funct;
 9610              		.loc 1 1096 0
 9611 1c7d 4488C2   		movb	%r8b, %dl
1094:src/vm3.c     ****   if (op0 == 0x0) {
 9612              		.loc 1 1094 0
 9613 1c80 C1EE1A   		shrl	$26, %esi
 9614              	.LVL235:
1096:src/vm3.c     ****     op0 = op0 + funct;
 9615              		.loc 1 1096 0
 9616 1c83 83E23F   		andl	$63, %edx
 9617 1c86 8D7E2B   		leal	43(%rsi), %edi
 9618 1c89 4084F6   		testb	%sil, %sil
 9619 1c8c 0F45D7   		cmovne	%edi, %edx
 9620              	.LVL236:
1106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9621              		.loc 1 1106 0
 9622 1c8f C1E110   		sall	$16, %ecx
 9623 1c92 C1E318   		sall	$24, %ebx
 9624 1c95 09CB     		orl	%ecx, %ebx
 9625 1c97 8D4807   		leal	7(%rax), %ecx
 9626 1c9a 83C006   		addl	$6, %eax
 9627 1c9d 0FB68000 		movzbl	VM_memory(%rax), %eax
 9627      000000
1104:src/vm3.c     **** 
 9628              		.loc 1 1104 0
 9629 1ca4 0FB6D2   		movzbl	%dl, %edx
1106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9630              		.loc 1 1106 0
 9631 1ca7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9631      000000
1104:src/vm3.c     **** 
 9632              		.loc 1 1104 0
 9633 1cae 48C1E204 		salq	$4, %rdx
 9634              	.LVL237:
1106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9635              		.loc 1 1106 0
 9636 1cb2 C1E008   		sall	$8, %eax
 9637 1cb5 09CB     		orl	%ecx, %ebx
 9638 1cb7 09C3     		orl	%eax, %ebx
 9639              	.LVL238:
1107:src/vm3.c     ****   if (op1 == 0x0) {
 9640              		.loc 1 1107 0
 9641 1cb9 89D9     		movl	%ebx, %ecx
1109:src/vm3.c     ****     op1 = op1 + funct;
 9642              		.loc 1 1109 0
 9643 1cbb 88D8     		movb	%bl, %al
1107:src/vm3.c     ****   if (op1 == 0x0) {
 9644              		.loc 1 1107 0
 9645 1cbd C1E91A   		shrl	$26, %ecx
 9646              	.LVL239:
1109:src/vm3.c     ****     op1 = op1 + funct;
 9647              		.loc 1 1109 0
 9648 1cc0 83E03F   		andl	$63, %eax
 9649 1cc3 8D712B   		leal	43(%rcx), %esi
 9650 1cc6 84C9     		testb	%cl, %cl
 9651 1cc8 0F45C6   		cmovne	%esi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 505


 9652              	.LVL240:
1116:src/vm3.c     **** 
 9653              		.loc 1 1116 0
 9654 1ccb 0FB6C0   		movzbl	%al, %eax
 9655 1cce 48C1E004 		salq	$4, %rax
 9656              	.LVL241:
 9657 1cd2 48038414 		addq	58088(%rsp,%rdx), %rax
 9657      E8E20000 
 9658 1cda 488B08   		movq	(%rax), %rcx
 9659 1cdd E976F0FF 		jmp	.L269
 9659      FF
 9660              	.LVL242:
 9661              	.L239:
1125:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9662              		.loc 1 1125 0
 9663 1ce2 4489C0   		movl	%r8d, %eax
1126:src/vm3.c     **** RF[rd] = RF[rt] >> RF[rs];
 9664              		.loc 1 1126 0
 9665 1ce5 4489C2   		movl	%r8d, %edx
1124:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9666              		.loc 1 1124 0
 9667 1ce8 41C1E815 		shrl	$21, %r8d
 9668              	.LVL243:
1125:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9669              		.loc 1 1125 0
 9670 1cec C1E810   		shrl	$16, %eax
 9671              	.LVL244:
1127:src/vm3.c     **** PC  =  nPC;
 9672              		.loc 1 1127 0
 9673 1cef 4183E01F 		andl	$31, %r8d
1126:src/vm3.c     **** RF[rd] = RF[rt] >> RF[rs];
 9674              		.loc 1 1126 0
 9675 1cf3 C1EA0B   		shrl	$11, %edx
 9676              	.LVL245:
1127:src/vm3.c     **** PC  =  nPC;
 9677              		.loc 1 1127 0
 9678 1cf6 83E01F   		andl	$31, %eax
 9679 1cf9 428B0C85 		movl	RF(,%r8,4), %ecx
 9679      00000000 
 9680 1d01 83E21F   		andl	$31, %edx
 9681 1d04 8B048500 		movl	RF(,%rax,4), %eax
 9681      000000
 9682 1d0b D3E8     		shrl	%cl, %eax
 9683 1d0d 89049500 		movl	%eax, RF(,%rdx,4)
 9683      000000
1128:src/vm3.c     **** nPC  += 4;
 9684              		.loc 1 1128 0
 9685 1d14 8B050000 		movl	nPC(%rip), %eax
 9685      0000
1130:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9686              		.loc 1 1130 0
 9687 1d1a 8D5003   		leal	3(%rax), %edx
1129:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9688              		.loc 1 1129 0
 9689 1d1d 8D4804   		leal	4(%rax), %ecx
1128:src/vm3.c     **** nPC  += 4;
 9690              		.loc 1 1128 0
GAS LISTING /tmp/cc15eBE3.s 			page 506


 9691 1d20 89050000 		movl	%eax, PC(%rip)
 9691      0000
1130:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9692              		.loc 1 1130 0
 9693 1d26 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9693      00000000 
 9694 1d2e 89C2     		movl	%eax, %edx
1143:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9695              		.loc 1 1143 0
 9696 1d30 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9696      000000
 9697              	.LVL246:
1130:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9698              		.loc 1 1130 0
 9699 1d37 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9699      000000
1129:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9700              		.loc 1 1129 0
 9701 1d3e 890D0000 		movl	%ecx, nPC(%rip)
 9701      0000
1143:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9702              		.loc 1 1143 0
 9703 1d44 8D4805   		leal	5(%rax), %ecx
 9704 1d47 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9704      000000
1130:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9705              		.loc 1 1130 0
 9706 1d4e C1E218   		sall	$24, %edx
 9707 1d51 4109D0   		orl	%edx, %r8d
 9708 1d54 8D5001   		leal	1(%rax), %edx
 9709 1d57 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9709      000000
 9710 1d5e C1E210   		sall	$16, %edx
 9711 1d61 4109D0   		orl	%edx, %r8d
 9712 1d64 8D5002   		leal	2(%rax), %edx
 9713 1d67 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9713      000000
 9714 1d6e C1E208   		sall	$8, %edx
 9715 1d71 4109D0   		orl	%edx, %r8d
 9716              	.LVL247:
1131:src/vm3.c     ****   if (op0 == 0x0) {
 9717              		.loc 1 1131 0
 9718 1d74 4489C6   		movl	%r8d, %esi
1133:src/vm3.c     ****     op0 = op0 + funct;
 9719              		.loc 1 1133 0
 9720 1d77 4488C2   		movb	%r8b, %dl
1131:src/vm3.c     ****   if (op0 == 0x0) {
 9721              		.loc 1 1131 0
 9722 1d7a C1EE1A   		shrl	$26, %esi
 9723              	.LVL248:
1133:src/vm3.c     ****     op0 = op0 + funct;
 9724              		.loc 1 1133 0
 9725 1d7d 83E23F   		andl	$63, %edx
 9726 1d80 8D7E2B   		leal	43(%rsi), %edi
 9727 1d83 4084F6   		testb	%sil, %sil
 9728 1d86 0F45D7   		cmovne	%edi, %edx
 9729              	.LVL249:
GAS LISTING /tmp/cc15eBE3.s 			page 507


1143:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9730              		.loc 1 1143 0
 9731 1d89 C1E110   		sall	$16, %ecx
 9732 1d8c C1E318   		sall	$24, %ebx
 9733 1d8f 09CB     		orl	%ecx, %ebx
 9734 1d91 8D4807   		leal	7(%rax), %ecx
 9735 1d94 83C006   		addl	$6, %eax
 9736 1d97 0FB68000 		movzbl	VM_memory(%rax), %eax
 9736      000000
1141:src/vm3.c     **** 
 9737              		.loc 1 1141 0
 9738 1d9e 0FB6D2   		movzbl	%dl, %edx
1143:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9739              		.loc 1 1143 0
 9740 1da1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9740      000000
1141:src/vm3.c     **** 
 9741              		.loc 1 1141 0
 9742 1da8 48C1E204 		salq	$4, %rdx
 9743              	.LVL250:
1143:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9744              		.loc 1 1143 0
 9745 1dac C1E008   		sall	$8, %eax
 9746 1daf 09CB     		orl	%ecx, %ebx
 9747 1db1 09C3     		orl	%eax, %ebx
 9748              	.LVL251:
1144:src/vm3.c     ****   if (op1 == 0x0) {
 9749              		.loc 1 1144 0
 9750 1db3 89D9     		movl	%ebx, %ecx
1146:src/vm3.c     ****     op1 = op1 + funct;
 9751              		.loc 1 1146 0
 9752 1db5 88D8     		movb	%bl, %al
1144:src/vm3.c     ****   if (op1 == 0x0) {
 9753              		.loc 1 1144 0
 9754 1db7 C1E91A   		shrl	$26, %ecx
 9755              	.LVL252:
1146:src/vm3.c     ****     op1 = op1 + funct;
 9756              		.loc 1 1146 0
 9757 1dba 83E03F   		andl	$63, %eax
 9758 1dbd 8D712B   		leal	43(%rcx), %esi
 9759 1dc0 84C9     		testb	%cl, %cl
 9760 1dc2 0F45C6   		cmovne	%esi, %eax
 9761              	.LVL253:
1153:src/vm3.c     **** 
 9762              		.loc 1 1153 0
 9763 1dc5 0FB6C0   		movzbl	%al, %eax
 9764 1dc8 48C1E004 		salq	$4, %rax
 9765              	.LVL254:
 9766 1dcc 48038414 		addq	58088(%rsp,%rdx), %rax
 9766      E8E20000 
 9767 1dd4 488B08   		movq	(%rax), %rcx
 9768 1dd7 E97CEFFF 		jmp	.L269
 9768      FF
 9769              	.LVL255:
 9770              	.L250:
1161:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9771              		.loc 1 1161 0
GAS LISTING /tmp/cc15eBE3.s 			page 508


 9772 1ddc 4489C0   		movl	%r8d, %eax
1163:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 9773              		.loc 1 1163 0
 9774 1ddf 4489C2   		movl	%r8d, %edx
1162:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9775              		.loc 1 1162 0
 9776 1de2 41C1E810 		shrl	$16, %r8d
 9777              	.LVL256:
1161:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9778              		.loc 1 1161 0
 9779 1de6 C1E815   		shrl	$21, %eax
 9780              	.LVL257:
1164:src/vm3.c     **** PC  =  nPC;
 9781              		.loc 1 1164 0
 9782 1de9 4183E01F 		andl	$31, %r8d
1163:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 9783              		.loc 1 1163 0
 9784 1ded C1EA0B   		shrl	$11, %edx
 9785              	.LVL258:
1164:src/vm3.c     **** PC  =  nPC;
 9786              		.loc 1 1164 0
 9787 1df0 83E01F   		andl	$31, %eax
 9788 1df3 83E21F   		andl	$31, %edx
 9789 1df6 8B048500 		movl	RF(,%rax,4), %eax
 9789      000000
 9790 1dfd 422B0485 		subl	RF(,%r8,4), %eax
 9790      00000000 
 9791 1e05 89049500 		movl	%eax, RF(,%rdx,4)
 9791      000000
1165:src/vm3.c     **** nPC  += 4;
 9792              		.loc 1 1165 0
 9793 1e0c 8B050000 		movl	nPC(%rip), %eax
 9793      0000
1167:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9794              		.loc 1 1167 0
 9795 1e12 8D5003   		leal	3(%rax), %edx
1166:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9796              		.loc 1 1166 0
 9797 1e15 8D4804   		leal	4(%rax), %ecx
1165:src/vm3.c     **** nPC  += 4;
 9798              		.loc 1 1165 0
 9799 1e18 89050000 		movl	%eax, PC(%rip)
 9799      0000
1167:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9800              		.loc 1 1167 0
 9801 1e1e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9801      00000000 
 9802 1e26 89C2     		movl	%eax, %edx
1180:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9803              		.loc 1 1180 0
 9804 1e28 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9804      000000
 9805              	.LVL259:
1167:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9806              		.loc 1 1167 0
 9807 1e2f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9807      000000
GAS LISTING /tmp/cc15eBE3.s 			page 509


1166:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9808              		.loc 1 1166 0
 9809 1e36 890D0000 		movl	%ecx, nPC(%rip)
 9809      0000
1180:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9810              		.loc 1 1180 0
 9811 1e3c 8D4805   		leal	5(%rax), %ecx
 9812 1e3f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9812      000000
1167:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9813              		.loc 1 1167 0
 9814 1e46 C1E218   		sall	$24, %edx
 9815 1e49 4109D0   		orl	%edx, %r8d
 9816 1e4c 8D5001   		leal	1(%rax), %edx
 9817 1e4f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9817      000000
 9818 1e56 C1E210   		sall	$16, %edx
 9819 1e59 4109D0   		orl	%edx, %r8d
 9820 1e5c 8D5002   		leal	2(%rax), %edx
 9821 1e5f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9821      000000
 9822 1e66 C1E208   		sall	$8, %edx
 9823 1e69 4109D0   		orl	%edx, %r8d
 9824              	.LVL260:
1168:src/vm3.c     ****   if (op0 == 0x0) {
 9825              		.loc 1 1168 0
 9826 1e6c 4489C6   		movl	%r8d, %esi
1170:src/vm3.c     ****     op0 = op0 + funct;
 9827              		.loc 1 1170 0
 9828 1e6f 4488C2   		movb	%r8b, %dl
1168:src/vm3.c     ****   if (op0 == 0x0) {
 9829              		.loc 1 1168 0
 9830 1e72 C1EE1A   		shrl	$26, %esi
 9831              	.LVL261:
1170:src/vm3.c     ****     op0 = op0 + funct;
 9832              		.loc 1 1170 0
 9833 1e75 83E23F   		andl	$63, %edx
 9834 1e78 8D7E2B   		leal	43(%rsi), %edi
 9835 1e7b 4084F6   		testb	%sil, %sil
 9836 1e7e 0F45D7   		cmovne	%edi, %edx
 9837              	.LVL262:
1180:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9838              		.loc 1 1180 0
 9839 1e81 C1E110   		sall	$16, %ecx
 9840 1e84 C1E318   		sall	$24, %ebx
 9841 1e87 09CB     		orl	%ecx, %ebx
 9842 1e89 8D4807   		leal	7(%rax), %ecx
 9843 1e8c 83C006   		addl	$6, %eax
 9844 1e8f 0FB68000 		movzbl	VM_memory(%rax), %eax
 9844      000000
1178:src/vm3.c     **** 
 9845              		.loc 1 1178 0
 9846 1e96 0FB6D2   		movzbl	%dl, %edx
1180:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9847              		.loc 1 1180 0
 9848 1e99 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9848      000000
GAS LISTING /tmp/cc15eBE3.s 			page 510


1178:src/vm3.c     **** 
 9849              		.loc 1 1178 0
 9850 1ea0 48C1E204 		salq	$4, %rdx
 9851              	.LVL263:
1180:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9852              		.loc 1 1180 0
 9853 1ea4 C1E008   		sall	$8, %eax
 9854 1ea7 09CB     		orl	%ecx, %ebx
 9855 1ea9 09C3     		orl	%eax, %ebx
 9856              	.LVL264:
1181:src/vm3.c     ****   if (op1 == 0x0) {
 9857              		.loc 1 1181 0
 9858 1eab 89D9     		movl	%ebx, %ecx
1183:src/vm3.c     ****     op1 = op1 + funct;
 9859              		.loc 1 1183 0
 9860 1ead 88D8     		movb	%bl, %al
1181:src/vm3.c     ****   if (op1 == 0x0) {
 9861              		.loc 1 1181 0
 9862 1eaf C1E91A   		shrl	$26, %ecx
 9863              	.LVL265:
1183:src/vm3.c     ****     op1 = op1 + funct;
 9864              		.loc 1 1183 0
 9865 1eb2 83E03F   		andl	$63, %eax
 9866 1eb5 8D712B   		leal	43(%rcx), %esi
 9867 1eb8 84C9     		testb	%cl, %cl
 9868 1eba 0F45C6   		cmovne	%esi, %eax
 9869              	.LVL266:
1190:src/vm3.c     **** 
 9870              		.loc 1 1190 0
 9871 1ebd 0FB6C0   		movzbl	%al, %eax
 9872 1ec0 48C1E004 		salq	$4, %rax
 9873              	.LVL267:
 9874 1ec4 48038414 		addq	58088(%rsp,%rdx), %rax
 9874      E8E20000 
 9875 1ecc 488B08   		movq	(%rax), %rcx
 9876 1ecf E984EEFF 		jmp	.L269
 9876      FF
 9877              	.LVL268:
 9878              	.L219:
1198:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9879              		.loc 1 1198 0
 9880 1ed4 4489C0   		movl	%r8d, %eax
1200:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 9881              		.loc 1 1200 0
 9882 1ed7 4489C2   		movl	%r8d, %edx
1199:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9883              		.loc 1 1199 0
 9884 1eda 41C1E810 		shrl	$16, %r8d
 9885              	.LVL269:
1198:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9886              		.loc 1 1198 0
 9887 1ede C1E815   		shrl	$21, %eax
 9888              	.LVL270:
1201:src/vm3.c     **** PC  =  nPC;
 9889              		.loc 1 1201 0
 9890 1ee1 4183E01F 		andl	$31, %r8d
1200:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
GAS LISTING /tmp/cc15eBE3.s 			page 511


 9891              		.loc 1 1200 0
 9892 1ee5 C1EA0B   		shrl	$11, %edx
 9893              	.LVL271:
1201:src/vm3.c     **** PC  =  nPC;
 9894              		.loc 1 1201 0
 9895 1ee8 83E01F   		andl	$31, %eax
 9896 1eeb 83E21F   		andl	$31, %edx
 9897 1eee 8B048500 		movl	RF(,%rax,4), %eax
 9897      000000
 9898 1ef5 422B0485 		subl	RF(,%r8,4), %eax
 9898      00000000 
 9899 1efd 89049500 		movl	%eax, RF(,%rdx,4)
 9899      000000
1202:src/vm3.c     **** nPC  += 4;
 9900              		.loc 1 1202 0
 9901 1f04 8B050000 		movl	nPC(%rip), %eax
 9901      0000
1204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9902              		.loc 1 1204 0
 9903 1f0a 8D5003   		leal	3(%rax), %edx
1203:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9904              		.loc 1 1203 0
 9905 1f0d 8D4804   		leal	4(%rax), %ecx
1202:src/vm3.c     **** nPC  += 4;
 9906              		.loc 1 1202 0
 9907 1f10 89050000 		movl	%eax, PC(%rip)
 9907      0000
1204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9908              		.loc 1 1204 0
 9909 1f16 440FB682 		movzbl	VM_memory(%rdx), %r8d
 9909      00000000 
 9910 1f1e 89C2     		movl	%eax, %edx
1217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9911              		.loc 1 1217 0
 9912 1f20 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 9912      000000
 9913              	.LVL272:
1204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9914              		.loc 1 1204 0
 9915 1f27 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9915      000000
1203:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 9916              		.loc 1 1203 0
 9917 1f2e 890D0000 		movl	%ecx, nPC(%rip)
 9917      0000
1217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9918              		.loc 1 1217 0
 9919 1f34 8D4805   		leal	5(%rax), %ecx
 9920 1f37 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9920      000000
1204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 9921              		.loc 1 1204 0
 9922 1f3e C1E218   		sall	$24, %edx
 9923 1f41 4109D0   		orl	%edx, %r8d
 9924 1f44 8D5001   		leal	1(%rax), %edx
 9925 1f47 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9925      000000
GAS LISTING /tmp/cc15eBE3.s 			page 512


 9926 1f4e C1E210   		sall	$16, %edx
 9927 1f51 4109D0   		orl	%edx, %r8d
 9928 1f54 8D5002   		leal	2(%rax), %edx
 9929 1f57 0FB69200 		movzbl	VM_memory(%rdx), %edx
 9929      000000
 9930 1f5e C1E208   		sall	$8, %edx
 9931 1f61 4109D0   		orl	%edx, %r8d
 9932              	.LVL273:
1205:src/vm3.c     ****   if (op0 == 0x0) {
 9933              		.loc 1 1205 0
 9934 1f64 4489C6   		movl	%r8d, %esi
1207:src/vm3.c     ****     op0 = op0 + funct;
 9935              		.loc 1 1207 0
 9936 1f67 4488C2   		movb	%r8b, %dl
1205:src/vm3.c     ****   if (op0 == 0x0) {
 9937              		.loc 1 1205 0
 9938 1f6a C1EE1A   		shrl	$26, %esi
 9939              	.LVL274:
1207:src/vm3.c     ****     op0 = op0 + funct;
 9940              		.loc 1 1207 0
 9941 1f6d 83E23F   		andl	$63, %edx
 9942 1f70 8D7E2B   		leal	43(%rsi), %edi
 9943 1f73 4084F6   		testb	%sil, %sil
 9944 1f76 0F45D7   		cmovne	%edi, %edx
 9945              	.LVL275:
1217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9946              		.loc 1 1217 0
 9947 1f79 C1E110   		sall	$16, %ecx
 9948 1f7c C1E318   		sall	$24, %ebx
 9949 1f7f 09CB     		orl	%ecx, %ebx
 9950 1f81 8D4807   		leal	7(%rax), %ecx
 9951 1f84 83C006   		addl	$6, %eax
 9952 1f87 0FB68000 		movzbl	VM_memory(%rax), %eax
 9952      000000
1215:src/vm3.c     **** 
 9953              		.loc 1 1215 0
 9954 1f8e 0FB6D2   		movzbl	%dl, %edx
1217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9955              		.loc 1 1217 0
 9956 1f91 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 9956      000000
1215:src/vm3.c     **** 
 9957              		.loc 1 1215 0
 9958 1f98 48C1E204 		salq	$4, %rdx
 9959              	.LVL276:
1217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 9960              		.loc 1 1217 0
 9961 1f9c C1E008   		sall	$8, %eax
 9962 1f9f 09CB     		orl	%ecx, %ebx
 9963 1fa1 09C3     		orl	%eax, %ebx
 9964              	.LVL277:
1218:src/vm3.c     ****   if (op1 == 0x0) {
 9965              		.loc 1 1218 0
 9966 1fa3 89D9     		movl	%ebx, %ecx
1220:src/vm3.c     ****     op1 = op1 + funct;
 9967              		.loc 1 1220 0
 9968 1fa5 88D8     		movb	%bl, %al
GAS LISTING /tmp/cc15eBE3.s 			page 513


1218:src/vm3.c     ****   if (op1 == 0x0) {
 9969              		.loc 1 1218 0
 9970 1fa7 C1E91A   		shrl	$26, %ecx
 9971              	.LVL278:
1220:src/vm3.c     ****     op1 = op1 + funct;
 9972              		.loc 1 1220 0
 9973 1faa 83E03F   		andl	$63, %eax
 9974 1fad 8D712B   		leal	43(%rcx), %esi
 9975 1fb0 84C9     		testb	%cl, %cl
 9976 1fb2 0F45C6   		cmovne	%esi, %eax
 9977              	.LVL279:
1227:src/vm3.c     **** 
 9978              		.loc 1 1227 0
 9979 1fb5 0FB6C0   		movzbl	%al, %eax
 9980 1fb8 48C1E004 		salq	$4, %rax
 9981              	.LVL280:
 9982 1fbc 48038414 		addq	58088(%rsp,%rdx), %rax
 9982      E8E20000 
 9983 1fc4 488B08   		movq	(%rax), %rcx
 9984 1fc7 E98CEDFF 		jmp	.L269
 9984      FF
 9985              	.LVL281:
 9986              	.L80:
1236:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9987              		.loc 1 1236 0
 9988 1fcc 4489C0   		movl	%r8d, %eax
1237:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 9989              		.loc 1 1237 0
 9990 1fcf 4489C2   		movl	%r8d, %edx
1235:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 9991              		.loc 1 1235 0
 9992 1fd2 41C1E815 		shrl	$21, %r8d
 9993              	.LVL282:
1236:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 9994              		.loc 1 1236 0
 9995 1fd6 C1E810   		shrl	$16, %eax
 9996              	.LVL283:
1238:src/vm3.c     **** PC  =  nPC;
 9997              		.loc 1 1238 0
 9998 1fd9 4183E01F 		andl	$31, %r8d
1237:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 9999              		.loc 1 1237 0
 10000 1fdd C1EA0B   		shrl	$11, %edx
 10001              	.LVL284:
1238:src/vm3.c     **** PC  =  nPC;
 10002              		.loc 1 1238 0
 10003 1fe0 83E01F   		andl	$31, %eax
 10004 1fe3 83E21F   		andl	$31, %edx
 10005 1fe6 8B048500 		movl	RF(,%rax,4), %eax
 10005      000000
 10006 1fed 42330485 		xorl	RF(,%r8,4), %eax
 10006      00000000 
 10007 1ff5 89049500 		movl	%eax, RF(,%rdx,4)
 10007      000000
1239:src/vm3.c     **** nPC  += 4;
 10008              		.loc 1 1239 0
 10009 1ffc 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 514


 10009      0000
1241:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10010              		.loc 1 1241 0
 10011 2002 8D5003   		leal	3(%rax), %edx
1240:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10012              		.loc 1 1240 0
 10013 2005 8D4804   		leal	4(%rax), %ecx
1239:src/vm3.c     **** nPC  += 4;
 10014              		.loc 1 1239 0
 10015 2008 89050000 		movl	%eax, PC(%rip)
 10015      0000
1241:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10016              		.loc 1 1241 0
 10017 200e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10017      00000000 
 10018 2016 89C2     		movl	%eax, %edx
1254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10019              		.loc 1 1254 0
 10020 2018 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10020      000000
 10021              	.LVL285:
1241:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10022              		.loc 1 1241 0
 10023 201f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10023      000000
1240:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10024              		.loc 1 1240 0
 10025 2026 890D0000 		movl	%ecx, nPC(%rip)
 10025      0000
1254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10026              		.loc 1 1254 0
 10027 202c 8D4805   		leal	5(%rax), %ecx
 10028 202f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10028      000000
1241:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10029              		.loc 1 1241 0
 10030 2036 C1E218   		sall	$24, %edx
 10031 2039 4109D0   		orl	%edx, %r8d
 10032 203c 8D5001   		leal	1(%rax), %edx
 10033 203f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10033      000000
 10034 2046 C1E210   		sall	$16, %edx
 10035 2049 4109D0   		orl	%edx, %r8d
 10036 204c 8D5002   		leal	2(%rax), %edx
 10037 204f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10037      000000
 10038 2056 C1E208   		sall	$8, %edx
 10039 2059 4109D0   		orl	%edx, %r8d
 10040              	.LVL286:
1242:src/vm3.c     ****   if (op0 == 0x0) {
 10041              		.loc 1 1242 0
 10042 205c 4489C6   		movl	%r8d, %esi
1244:src/vm3.c     ****     op0 = op0 + funct;
 10043              		.loc 1 1244 0
 10044 205f 4488C2   		movb	%r8b, %dl
1242:src/vm3.c     ****   if (op0 == 0x0) {
 10045              		.loc 1 1242 0
GAS LISTING /tmp/cc15eBE3.s 			page 515


 10046 2062 C1EE1A   		shrl	$26, %esi
 10047              	.LVL287:
1244:src/vm3.c     ****     op0 = op0 + funct;
 10048              		.loc 1 1244 0
 10049 2065 83E23F   		andl	$63, %edx
 10050 2068 8D7E2B   		leal	43(%rsi), %edi
 10051 206b 4084F6   		testb	%sil, %sil
 10052 206e 0F45D7   		cmovne	%edi, %edx
 10053              	.LVL288:
1254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10054              		.loc 1 1254 0
 10055 2071 C1E110   		sall	$16, %ecx
 10056 2074 C1E318   		sall	$24, %ebx
 10057 2077 09CB     		orl	%ecx, %ebx
 10058 2079 8D4807   		leal	7(%rax), %ecx
 10059 207c 83C006   		addl	$6, %eax
 10060 207f 0FB68000 		movzbl	VM_memory(%rax), %eax
 10060      000000
1252:src/vm3.c     **** 
 10061              		.loc 1 1252 0
 10062 2086 0FB6D2   		movzbl	%dl, %edx
1254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10063              		.loc 1 1254 0
 10064 2089 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10064      000000
1252:src/vm3.c     **** 
 10065              		.loc 1 1252 0
 10066 2090 48C1E204 		salq	$4, %rdx
 10067              	.LVL289:
1254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10068              		.loc 1 1254 0
 10069 2094 C1E008   		sall	$8, %eax
 10070 2097 09CB     		orl	%ecx, %ebx
 10071 2099 09C3     		orl	%eax, %ebx
 10072              	.LVL290:
1255:src/vm3.c     ****   if (op1 == 0x0) {
 10073              		.loc 1 1255 0
 10074 209b 89D9     		movl	%ebx, %ecx
1257:src/vm3.c     ****     op1 = op1 + funct;
 10075              		.loc 1 1257 0
 10076 209d 88D8     		movb	%bl, %al
1255:src/vm3.c     ****   if (op1 == 0x0) {
 10077              		.loc 1 1255 0
 10078 209f C1E91A   		shrl	$26, %ecx
 10079              	.LVL291:
1257:src/vm3.c     ****     op1 = op1 + funct;
 10080              		.loc 1 1257 0
 10081 20a2 83E03F   		andl	$63, %eax
 10082 20a5 8D712B   		leal	43(%rcx), %esi
 10083 20a8 84C9     		testb	%cl, %cl
 10084 20aa 0F45C6   		cmovne	%esi, %eax
 10085              	.LVL292:
1264:src/vm3.c     **** 
 10086              		.loc 1 1264 0
 10087 20ad 0FB6C0   		movzbl	%al, %eax
 10088 20b0 48C1E004 		salq	$4, %rax
 10089              	.LVL293:
GAS LISTING /tmp/cc15eBE3.s 			page 516


 10090 20b4 48038414 		addq	58088(%rsp,%rdx), %rax
 10090      E8E20000 
 10091 20bc 488B08   		movq	(%rax), %rcx
 10092 20bf E994ECFF 		jmp	.L269
 10092      FF
 10093              	.LVL294:
 10094              	.L111:
1272:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 10095              		.loc 1 1272 0
 10096 20c4 4489C2   		movl	%r8d, %edx
1274:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 10097              		.loc 1 1274 0
 10098 20c7 4489C0   		movl	%r8d, %eax
1273:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 10099              		.loc 1 1273 0
 10100 20ca 41C1E810 		shrl	$16, %r8d
 10101              	.LVL295:
1272:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 10102              		.loc 1 1272 0
 10103 20ce C1EA15   		shrl	$21, %edx
1275:src/vm3.c     **** PC  =  nPC;
 10104              		.loc 1 1275 0
 10105 20d1 4183E01F 		andl	$31, %r8d
1274:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 10106              		.loc 1 1274 0
 10107 20d5 C1E80B   		shrl	$11, %eax
 10108              	.LVL296:
1275:src/vm3.c     **** PC  =  nPC;
 10109              		.loc 1 1275 0
 10110 20d8 83E21F   		andl	$31, %edx
 10111 20db 428B3C85 		movl	RF(,%r8,4), %edi
 10111      00000000 
 10112 20e3 83E01F   		andl	$31, %eax
 10113 20e6 393C9500 		cmpl	%edi, RF(,%rdx,4)
 10113      000000
 10114 20ed 0F92C2   		setb	%dl
 10115 20f0 0FB6D2   		movzbl	%dl, %edx
 10116 20f3 89148500 		movl	%edx, RF(,%rax,4)
 10116      000000
1276:src/vm3.c     **** nPC  += 4;
 10117              		.loc 1 1276 0
 10118 20fa 8B050000 		movl	nPC(%rip), %eax
 10118      0000
1278:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10119              		.loc 1 1278 0
 10120 2100 8D5003   		leal	3(%rax), %edx
1277:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10121              		.loc 1 1277 0
 10122 2103 8D4804   		leal	4(%rax), %ecx
1276:src/vm3.c     **** nPC  += 4;
 10123              		.loc 1 1276 0
 10124 2106 89050000 		movl	%eax, PC(%rip)
 10124      0000
1278:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10125              		.loc 1 1278 0
 10126 210c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10126      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 517


 10127 2114 89C2     		movl	%eax, %edx
1291:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10128              		.loc 1 1291 0
 10129 2116 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10129      000000
 10130              	.LVL297:
1278:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10131              		.loc 1 1278 0
 10132 211d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10132      000000
1277:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10133              		.loc 1 1277 0
 10134 2124 890D0000 		movl	%ecx, nPC(%rip)
 10134      0000
1291:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10135              		.loc 1 1291 0
 10136 212a 8D4805   		leal	5(%rax), %ecx
 10137 212d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10137      000000
1278:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10138              		.loc 1 1278 0
 10139 2134 C1E218   		sall	$24, %edx
 10140 2137 4109D0   		orl	%edx, %r8d
 10141 213a 8D5001   		leal	1(%rax), %edx
 10142 213d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10142      000000
 10143 2144 C1E210   		sall	$16, %edx
 10144 2147 4109D0   		orl	%edx, %r8d
 10145 214a 8D5002   		leal	2(%rax), %edx
 10146 214d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10146      000000
 10147 2154 C1E208   		sall	$8, %edx
 10148 2157 4109D0   		orl	%edx, %r8d
 10149              	.LVL298:
1279:src/vm3.c     ****   if (op0 == 0x0) {
 10150              		.loc 1 1279 0
 10151 215a 4489C6   		movl	%r8d, %esi
1281:src/vm3.c     ****     op0 = op0 + funct;
 10152              		.loc 1 1281 0
 10153 215d 4488C2   		movb	%r8b, %dl
1279:src/vm3.c     ****   if (op0 == 0x0) {
 10154              		.loc 1 1279 0
 10155 2160 C1EE1A   		shrl	$26, %esi
 10156              	.LVL299:
1281:src/vm3.c     ****     op0 = op0 + funct;
 10157              		.loc 1 1281 0
 10158 2163 83E23F   		andl	$63, %edx
 10159 2166 8D7E2B   		leal	43(%rsi), %edi
 10160 2169 4084F6   		testb	%sil, %sil
 10161 216c 0F45D7   		cmovne	%edi, %edx
 10162              	.LVL300:
1291:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10163              		.loc 1 1291 0
 10164 216f C1E110   		sall	$16, %ecx
 10165 2172 C1E318   		sall	$24, %ebx
 10166 2175 09CB     		orl	%ecx, %ebx
 10167 2177 8D4807   		leal	7(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 518


 10168 217a 83C006   		addl	$6, %eax
 10169 217d 0FB68000 		movzbl	VM_memory(%rax), %eax
 10169      000000
1289:src/vm3.c     **** 
 10170              		.loc 1 1289 0
 10171 2184 0FB6D2   		movzbl	%dl, %edx
1291:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10172              		.loc 1 1291 0
 10173 2187 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10173      000000
1289:src/vm3.c     **** 
 10174              		.loc 1 1289 0
 10175 218e 48C1E204 		salq	$4, %rdx
 10176              	.LVL301:
1291:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10177              		.loc 1 1291 0
 10178 2192 C1E008   		sall	$8, %eax
 10179 2195 09CB     		orl	%ecx, %ebx
 10180 2197 09C3     		orl	%eax, %ebx
 10181              	.LVL302:
1292:src/vm3.c     ****   if (op1 == 0x0) {
 10182              		.loc 1 1292 0
 10183 2199 89D9     		movl	%ebx, %ecx
1294:src/vm3.c     ****     op1 = op1 + funct;
 10184              		.loc 1 1294 0
 10185 219b 88D8     		movb	%bl, %al
1292:src/vm3.c     ****   if (op1 == 0x0) {
 10186              		.loc 1 1292 0
 10187 219d C1E91A   		shrl	$26, %ecx
 10188              	.LVL303:
1294:src/vm3.c     ****     op1 = op1 + funct;
 10189              		.loc 1 1294 0
 10190 21a0 83E03F   		andl	$63, %eax
 10191 21a3 8D712B   		leal	43(%rcx), %esi
 10192 21a6 84C9     		testb	%cl, %cl
 10193 21a8 0F45C6   		cmovne	%esi, %eax
 10194              	.LVL304:
1301:src/vm3.c     **** 
 10195              		.loc 1 1301 0
 10196 21ab 0FB6C0   		movzbl	%al, %eax
 10197 21ae 48C1E004 		salq	$4, %rax
 10198              	.LVL305:
 10199 21b2 48038414 		addq	58088(%rsp,%rdx), %rax
 10199      E8E20000 
 10200 21ba 488B08   		movq	(%rax), %rcx
 10201 21bd E996EBFF 		jmp	.L269
 10201      FF
 10202              	.LVL306:
 10203              	.L69:
1309:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 10204              		.loc 1 1309 0
 10205 21c2 4489C2   		movl	%r8d, %edx
1311:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 10206              		.loc 1 1311 0
 10207 21c5 4489C0   		movl	%r8d, %eax
1310:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 10208              		.loc 1 1310 0
GAS LISTING /tmp/cc15eBE3.s 			page 519


 10209 21c8 41C1E810 		shrl	$16, %r8d
 10210              	.LVL307:
1309:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 10211              		.loc 1 1309 0
 10212 21cc C1EA15   		shrl	$21, %edx
1312:src/vm3.c     **** PC  =  nPC;
 10213              		.loc 1 1312 0
 10214 21cf 4183E01F 		andl	$31, %r8d
1311:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 10215              		.loc 1 1311 0
 10216 21d3 C1E80B   		shrl	$11, %eax
 10217              	.LVL308:
1312:src/vm3.c     **** PC  =  nPC;
 10218              		.loc 1 1312 0
 10219 21d6 83E21F   		andl	$31, %edx
 10220 21d9 428B3C85 		movl	RF(,%r8,4), %edi
 10220      00000000 
 10221 21e1 83E01F   		andl	$31, %eax
 10222 21e4 393C9500 		cmpl	%edi, RF(,%rdx,4)
 10222      000000
 10223 21eb 0F92C2   		setb	%dl
 10224 21ee 0FB6D2   		movzbl	%dl, %edx
 10225 21f1 89148500 		movl	%edx, RF(,%rax,4)
 10225      000000
1313:src/vm3.c     **** nPC  += 4;
 10226              		.loc 1 1313 0
 10227 21f8 8B050000 		movl	nPC(%rip), %eax
 10227      0000
1315:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10228              		.loc 1 1315 0
 10229 21fe 8D5003   		leal	3(%rax), %edx
1314:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10230              		.loc 1 1314 0
 10231 2201 8D4804   		leal	4(%rax), %ecx
1313:src/vm3.c     **** nPC  += 4;
 10232              		.loc 1 1313 0
 10233 2204 89050000 		movl	%eax, PC(%rip)
 10233      0000
1315:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10234              		.loc 1 1315 0
 10235 220a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10235      00000000 
 10236 2212 89C2     		movl	%eax, %edx
1328:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10237              		.loc 1 1328 0
 10238 2214 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10238      000000
 10239              	.LVL309:
1315:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10240              		.loc 1 1315 0
 10241 221b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10241      000000
1314:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10242              		.loc 1 1314 0
 10243 2222 890D0000 		movl	%ecx, nPC(%rip)
 10243      0000
1328:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 520


 10244              		.loc 1 1328 0
 10245 2228 8D4805   		leal	5(%rax), %ecx
 10246 222b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10246      000000
1315:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10247              		.loc 1 1315 0
 10248 2232 C1E218   		sall	$24, %edx
 10249 2235 4109D0   		orl	%edx, %r8d
 10250 2238 8D5001   		leal	1(%rax), %edx
 10251 223b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10251      000000
 10252 2242 C1E210   		sall	$16, %edx
 10253 2245 4109D0   		orl	%edx, %r8d
 10254 2248 8D5002   		leal	2(%rax), %edx
 10255 224b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10255      000000
 10256 2252 C1E208   		sall	$8, %edx
 10257 2255 4109D0   		orl	%edx, %r8d
 10258              	.LVL310:
1316:src/vm3.c     ****   if (op0 == 0x0) {
 10259              		.loc 1 1316 0
 10260 2258 4489C6   		movl	%r8d, %esi
1318:src/vm3.c     ****     op0 = op0 + funct;
 10261              		.loc 1 1318 0
 10262 225b 4488C2   		movb	%r8b, %dl
1316:src/vm3.c     ****   if (op0 == 0x0) {
 10263              		.loc 1 1316 0
 10264 225e C1EE1A   		shrl	$26, %esi
 10265              	.LVL311:
1318:src/vm3.c     ****     op0 = op0 + funct;
 10266              		.loc 1 1318 0
 10267 2261 83E23F   		andl	$63, %edx
 10268 2264 8D7E2B   		leal	43(%rsi), %edi
 10269 2267 4084F6   		testb	%sil, %sil
 10270 226a 0F45D7   		cmovne	%edi, %edx
 10271              	.LVL312:
1328:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10272              		.loc 1 1328 0
 10273 226d C1E110   		sall	$16, %ecx
 10274 2270 C1E318   		sall	$24, %ebx
 10275 2273 09CB     		orl	%ecx, %ebx
 10276 2275 8D4807   		leal	7(%rax), %ecx
 10277 2278 83C006   		addl	$6, %eax
 10278 227b 0FB68000 		movzbl	VM_memory(%rax), %eax
 10278      000000
1326:src/vm3.c     **** 
 10279              		.loc 1 1326 0
 10280 2282 0FB6D2   		movzbl	%dl, %edx
1328:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10281              		.loc 1 1328 0
 10282 2285 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10282      000000
1326:src/vm3.c     **** 
 10283              		.loc 1 1326 0
 10284 228c 48C1E204 		salq	$4, %rdx
 10285              	.LVL313:
1328:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 521


 10286              		.loc 1 1328 0
 10287 2290 C1E008   		sall	$8, %eax
 10288 2293 09CB     		orl	%ecx, %ebx
 10289 2295 09C3     		orl	%eax, %ebx
 10290              	.LVL314:
1329:src/vm3.c     ****   if (op1 == 0x0) {
 10291              		.loc 1 1329 0
 10292 2297 89D9     		movl	%ebx, %ecx
1331:src/vm3.c     ****     op1 = op1 + funct;
 10293              		.loc 1 1331 0
 10294 2299 88D8     		movb	%bl, %al
1329:src/vm3.c     ****   if (op1 == 0x0) {
 10295              		.loc 1 1329 0
 10296 229b C1E91A   		shrl	$26, %ecx
 10297              	.LVL315:
1331:src/vm3.c     ****     op1 = op1 + funct;
 10298              		.loc 1 1331 0
 10299 229e 83E03F   		andl	$63, %eax
 10300 22a1 8D712B   		leal	43(%rcx), %esi
 10301 22a4 84C9     		testb	%cl, %cl
 10302 22a6 0F45C6   		cmovne	%esi, %eax
 10303              	.LVL316:
1338:src/vm3.c     **** 
 10304              		.loc 1 1338 0
 10305 22a9 0FB6C0   		movzbl	%al, %eax
 10306 22ac 48C1E004 		salq	$4, %rax
 10307              	.LVL317:
 10308 22b0 48038414 		addq	58088(%rsp,%rdx), %rax
 10308      E8E20000 
 10309 22b8 488B08   		movq	(%rax), %rcx
 10310 22bb E998EAFF 		jmp	.L269
 10310      FF
 10311              	.LVL318:
 10312              	.L241:
1348:src/vm3.c     **** nPC = RF[rs];
 10313              		.loc 1 1348 0
 10314 22c0 8B150000 		movl	nPC(%rip), %edx
 10314      0000
1347:src/vm3.c     **** PC = nPC;
 10315              		.loc 1 1347 0
 10316 22c6 8B050000 		movl	PC(%rip), %eax
 10316      0000
1346:src/vm3.c     **** RF[31] = PC+8;
 10317              		.loc 1 1346 0
 10318 22cc 41C1E815 		shrl	$21, %r8d
 10319              	.LVL319:
1349:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10320              		.loc 1 1349 0
 10321 22d0 4183E01F 		andl	$31, %r8d
1350:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10322              		.loc 1 1350 0
 10323 22d4 8D4A03   		leal	3(%rdx), %ecx
1347:src/vm3.c     **** PC = nPC;
 10324              		.loc 1 1347 0
 10325 22d7 83C008   		addl	$8, %eax
1348:src/vm3.c     **** nPC = RF[rs];
 10326              		.loc 1 1348 0
GAS LISTING /tmp/cc15eBE3.s 			page 522


 10327 22da 89150000 		movl	%edx, PC(%rip)
 10327      0000
1347:src/vm3.c     **** PC = nPC;
 10328              		.loc 1 1347 0
 10329 22e0 89050000 		movl	%eax, RF+124(%rip)
 10329      0000
1349:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10330              		.loc 1 1349 0
 10331 22e6 428B0485 		movl	RF(,%r8,4), %eax
 10331      00000000 
1350:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10332              		.loc 1 1350 0
 10333 22ee 440FB681 		movzbl	VM_memory(%rcx), %r8d
 10333      00000000 
 10334 22f6 89D1     		movl	%edx, %ecx
 10335 22f8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10335      000000
1349:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10336              		.loc 1 1349 0
 10337 22ff 89050000 		movl	%eax, nPC(%rip)
 10337      0000
1350:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10338              		.loc 1 1350 0
 10339 2305 C1E118   		sall	$24, %ecx
 10340 2308 4109C8   		orl	%ecx, %r8d
 10341 230b 8D4A01   		leal	1(%rdx), %ecx
 10342 230e 83C202   		addl	$2, %edx
 10343 2311 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10343      000000
 10344 2318 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10344      000000
 10345 231f C1E208   		sall	$8, %edx
 10346 2322 C1E110   		sall	$16, %ecx
 10347 2325 4109C8   		orl	%ecx, %r8d
 10348 2328 4109D0   		orl	%edx, %r8d
 10349              	.LVL320:
1351:src/vm3.c     ****   if (op0 == 0x0) {
 10350              		.loc 1 1351 0
 10351 232b 4489C1   		movl	%r8d, %ecx
1353:src/vm3.c     ****     op0 = op0 + funct;
 10352              		.loc 1 1353 0
 10353 232e 4488C2   		movb	%r8b, %dl
1351:src/vm3.c     ****   if (op0 == 0x0) {
 10354              		.loc 1 1351 0
 10355 2331 C1E91A   		shrl	$26, %ecx
 10356              	.LVL321:
1353:src/vm3.c     ****     op0 = op0 + funct;
 10357              		.loc 1 1353 0
 10358 2334 83E23F   		andl	$63, %edx
 10359 2337 8D712B   		leal	43(%rcx), %esi
 10360 233a 84C9     		testb	%cl, %cl
1363:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10361              		.loc 1 1363 0
 10362 233c 8D4803   		leal	3(%rax), %ecx
 10363              	.LVL322:
 10364 233f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10364      000000
GAS LISTING /tmp/cc15eBE3.s 			page 523


 10365              	.LVL323:
 10366 2346 89C1     		movl	%eax, %ecx
1353:src/vm3.c     ****     op0 = op0 + funct;
 10367              		.loc 1 1353 0
 10368 2348 0F45D6   		cmovne	%esi, %edx
 10369              	.LVL324:
1363:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10370              		.loc 1 1363 0
 10371 234b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10371      000000
1361:src/vm3.c     **** 
 10372              		.loc 1 1361 0
 10373 2352 0FB6D2   		movzbl	%dl, %edx
 10374 2355 48C1E204 		salq	$4, %rdx
 10375              	.LVL325:
1363:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10376              		.loc 1 1363 0
 10377 2359 C1E118   		sall	$24, %ecx
 10378 235c 09CB     		orl	%ecx, %ebx
 10379 235e 8D4801   		leal	1(%rax), %ecx
 10380 2361 83C002   		addl	$2, %eax
 10381 2364 0FB68000 		movzbl	VM_memory(%rax), %eax
 10381      000000
 10382 236b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10382      000000
 10383 2372 C1E008   		sall	$8, %eax
 10384 2375 C1E110   		sall	$16, %ecx
 10385 2378 09CB     		orl	%ecx, %ebx
 10386 237a 09C3     		orl	%eax, %ebx
 10387              	.LVL326:
1364:src/vm3.c     ****   if (op1 == 0x0) {
 10388              		.loc 1 1364 0
 10389 237c 89D9     		movl	%ebx, %ecx
1366:src/vm3.c     ****     op1 = op1 + funct;
 10390              		.loc 1 1366 0
 10391 237e 88D8     		movb	%bl, %al
1364:src/vm3.c     ****   if (op1 == 0x0) {
 10392              		.loc 1 1364 0
 10393 2380 C1E91A   		shrl	$26, %ecx
 10394              	.LVL327:
1366:src/vm3.c     ****     op1 = op1 + funct;
 10395              		.loc 1 1366 0
 10396 2383 83E03F   		andl	$63, %eax
 10397 2386 8D712B   		leal	43(%rcx), %esi
 10398 2389 84C9     		testb	%cl, %cl
 10399 238b 0F45C6   		cmovne	%esi, %eax
 10400              	.LVL328:
1373:src/vm3.c     **** 
 10401              		.loc 1 1373 0
 10402 238e 0FB6C0   		movzbl	%al, %eax
 10403 2391 48C1E004 		salq	$4, %rax
 10404              	.LVL329:
 10405 2395 48038414 		addq	58088(%rsp,%rdx), %rax
 10405      E8E20000 
 10406 239d 488B08   		movq	(%rax), %rcx
 10407 23a0 E9B3E9FF 		jmp	.L269
 10407      FF
GAS LISTING /tmp/cc15eBE3.s 			page 524


 10408              	.LVL330:
 10409              	.L205:
1408:src/vm3.c     **** nPC = RF[rs];
 10410              		.loc 1 1408 0
 10411 23a5 8B150000 		movl	nPC(%rip), %edx
 10411      0000
1407:src/vm3.c     **** PC = nPC;
 10412              		.loc 1 1407 0
 10413 23ab 41C1E815 		shrl	$21, %r8d
 10414              	.LVL331:
1409:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10415              		.loc 1 1409 0
 10416 23af 4183E01F 		andl	$31, %r8d
 10417 23b3 428B0485 		movl	RF(,%r8,4), %eax
 10417      00000000 
1410:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10418              		.loc 1 1410 0
 10419 23bb 8D4A03   		leal	3(%rdx), %ecx
1408:src/vm3.c     **** nPC = RF[rs];
 10420              		.loc 1 1408 0
 10421 23be 89150000 		movl	%edx, PC(%rip)
 10421      0000
1410:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10422              		.loc 1 1410 0
 10423 23c4 440FB681 		movzbl	VM_memory(%rcx), %r8d
 10423      00000000 
 10424 23cc 89D1     		movl	%edx, %ecx
1409:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10425              		.loc 1 1409 0
 10426 23ce 89050000 		movl	%eax, nPC(%rip)
 10426      0000
1410:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10427              		.loc 1 1410 0
 10428 23d4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10428      000000
 10429 23db C1E118   		sall	$24, %ecx
 10430 23de 4109C8   		orl	%ecx, %r8d
 10431 23e1 8D4A01   		leal	1(%rdx), %ecx
 10432 23e4 83C202   		addl	$2, %edx
 10433 23e7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10433      000000
 10434 23ee 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10434      000000
 10435 23f5 C1E208   		sall	$8, %edx
 10436 23f8 C1E110   		sall	$16, %ecx
 10437 23fb 4109C8   		orl	%ecx, %r8d
 10438 23fe 4109D0   		orl	%edx, %r8d
 10439              	.LVL332:
1411:src/vm3.c     ****   if (op0 == 0x0) {
 10440              		.loc 1 1411 0
 10441 2401 4489C1   		movl	%r8d, %ecx
1413:src/vm3.c     ****     op0 = op0 + funct;
 10442              		.loc 1 1413 0
 10443 2404 4488C2   		movb	%r8b, %dl
1411:src/vm3.c     ****   if (op0 == 0x0) {
 10444              		.loc 1 1411 0
 10445 2407 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 525


 10446              	.LVL333:
1413:src/vm3.c     ****     op0 = op0 + funct;
 10447              		.loc 1 1413 0
 10448 240a 83E23F   		andl	$63, %edx
 10449 240d 8D712B   		leal	43(%rcx), %esi
 10450 2410 84C9     		testb	%cl, %cl
1423:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10451              		.loc 1 1423 0
 10452 2412 8D4803   		leal	3(%rax), %ecx
 10453              	.LVL334:
 10454 2415 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10454      000000
 10455              	.LVL335:
 10456 241c 89C1     		movl	%eax, %ecx
1413:src/vm3.c     ****     op0 = op0 + funct;
 10457              		.loc 1 1413 0
 10458 241e 0F45D6   		cmovne	%esi, %edx
 10459              	.LVL336:
1423:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10460              		.loc 1 1423 0
 10461 2421 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10461      000000
1421:src/vm3.c     **** 
 10462              		.loc 1 1421 0
 10463 2428 0FB6D2   		movzbl	%dl, %edx
 10464 242b 48C1E204 		salq	$4, %rdx
 10465              	.LVL337:
1423:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10466              		.loc 1 1423 0
 10467 242f C1E118   		sall	$24, %ecx
 10468 2432 09CB     		orl	%ecx, %ebx
 10469 2434 8D4801   		leal	1(%rax), %ecx
 10470 2437 83C002   		addl	$2, %eax
 10471 243a 0FB68000 		movzbl	VM_memory(%rax), %eax
 10471      000000
 10472 2441 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10472      000000
 10473 2448 C1E008   		sall	$8, %eax
 10474 244b C1E110   		sall	$16, %ecx
 10475 244e 09CB     		orl	%ecx, %ebx
 10476 2450 09C3     		orl	%eax, %ebx
 10477              	.LVL338:
1424:src/vm3.c     ****   if (op1 == 0x0) {
 10478              		.loc 1 1424 0
 10479 2452 89D9     		movl	%ebx, %ecx
1426:src/vm3.c     ****     op1 = op1 + funct;
 10480              		.loc 1 1426 0
 10481 2454 88D8     		movb	%bl, %al
1424:src/vm3.c     ****   if (op1 == 0x0) {
 10482              		.loc 1 1424 0
 10483 2456 C1E91A   		shrl	$26, %ecx
 10484              	.LVL339:
1426:src/vm3.c     ****     op1 = op1 + funct;
 10485              		.loc 1 1426 0
 10486 2459 83E03F   		andl	$63, %eax
 10487 245c 8D712B   		leal	43(%rcx), %esi
 10488 245f 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 526


 10489 2461 0F45C6   		cmovne	%esi, %eax
 10490              	.LVL340:
1433:src/vm3.c     **** 
 10491              		.loc 1 1433 0
 10492 2464 0FB6C0   		movzbl	%al, %eax
 10493 2467 48C1E004 		salq	$4, %rax
 10494              	.LVL341:
 10495 246b 48038414 		addq	58088(%rsp,%rdx), %rax
 10495      E8E20000 
 10496 2473 488B08   		movq	(%rax), %rcx
 10497 2476 E9DDE8FF 		jmp	.L269
 10497      FF
 10498              	.LVL342:
 10499              	.L38:
1469:src/vm3.c     **** nPC  += 4;
 10500              		.loc 1 1469 0
 10501 247b 8B050000 		movl	nPC(%rip), %eax
 10501      0000
1467:src/vm3.c     **** RF[rd] = HI;
 10502              		.loc 1 1467 0
 10503 2481 41C1E80B 		shrl	$11, %r8d
 10504              	.LVL343:
1468:src/vm3.c     **** PC  =  nPC;
 10505              		.loc 1 1468 0
 10506 2485 4183E01F 		andl	$31, %r8d
 10507 2489 46892C85 		movl	%r13d, RF(,%r8,4)
 10507      00000000 
1471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10508              		.loc 1 1471 0
 10509 2491 8D5003   		leal	3(%rax), %edx
1470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10510              		.loc 1 1470 0
 10511 2494 8D4804   		leal	4(%rax), %ecx
1469:src/vm3.c     **** nPC  += 4;
 10512              		.loc 1 1469 0
 10513 2497 89050000 		movl	%eax, PC(%rip)
 10513      0000
1471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10514              		.loc 1 1471 0
 10515 249d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10515      00000000 
 10516 24a5 89C2     		movl	%eax, %edx
1484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10517              		.loc 1 1484 0
 10518 24a7 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10518      000000
 10519              	.LVL344:
1471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10520              		.loc 1 1471 0
 10521 24ae 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10521      000000
1470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10522              		.loc 1 1470 0
 10523 24b5 890D0000 		movl	%ecx, nPC(%rip)
 10523      0000
1484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10524              		.loc 1 1484 0
GAS LISTING /tmp/cc15eBE3.s 			page 527


 10525 24bb 8D4805   		leal	5(%rax), %ecx
 10526 24be 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10526      000000
1471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10527              		.loc 1 1471 0
 10528 24c5 C1E218   		sall	$24, %edx
 10529 24c8 4109D0   		orl	%edx, %r8d
 10530 24cb 8D5001   		leal	1(%rax), %edx
 10531 24ce 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10531      000000
 10532 24d5 C1E210   		sall	$16, %edx
 10533 24d8 4109D0   		orl	%edx, %r8d
 10534 24db 8D5002   		leal	2(%rax), %edx
 10535 24de 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10535      000000
 10536 24e5 C1E208   		sall	$8, %edx
 10537 24e8 4109D0   		orl	%edx, %r8d
 10538              	.LVL345:
1472:src/vm3.c     ****   if (op0 == 0x0) {
 10539              		.loc 1 1472 0
 10540 24eb 4489C6   		movl	%r8d, %esi
1474:src/vm3.c     ****     op0 = op0 + funct;
 10541              		.loc 1 1474 0
 10542 24ee 4488C2   		movb	%r8b, %dl
1472:src/vm3.c     ****   if (op0 == 0x0) {
 10543              		.loc 1 1472 0
 10544 24f1 C1EE1A   		shrl	$26, %esi
 10545              	.LVL346:
1474:src/vm3.c     ****     op0 = op0 + funct;
 10546              		.loc 1 1474 0
 10547 24f4 83E23F   		andl	$63, %edx
 10548 24f7 8D7E2B   		leal	43(%rsi), %edi
 10549 24fa 4084F6   		testb	%sil, %sil
 10550 24fd 0F45D7   		cmovne	%edi, %edx
 10551              	.LVL347:
1484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10552              		.loc 1 1484 0
 10553 2500 C1E110   		sall	$16, %ecx
 10554 2503 C1E318   		sall	$24, %ebx
 10555 2506 09CB     		orl	%ecx, %ebx
 10556 2508 8D4807   		leal	7(%rax), %ecx
 10557 250b 83C006   		addl	$6, %eax
 10558 250e 0FB68000 		movzbl	VM_memory(%rax), %eax
 10558      000000
1482:src/vm3.c     **** 
 10559              		.loc 1 1482 0
 10560 2515 0FB6D2   		movzbl	%dl, %edx
1484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10561              		.loc 1 1484 0
 10562 2518 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10562      000000
1482:src/vm3.c     **** 
 10563              		.loc 1 1482 0
 10564 251f 48C1E204 		salq	$4, %rdx
 10565              	.LVL348:
1484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10566              		.loc 1 1484 0
GAS LISTING /tmp/cc15eBE3.s 			page 528


 10567 2523 C1E008   		sall	$8, %eax
 10568 2526 09CB     		orl	%ecx, %ebx
 10569 2528 09C3     		orl	%eax, %ebx
 10570              	.LVL349:
1485:src/vm3.c     ****   if (op1 == 0x0) {
 10571              		.loc 1 1485 0
 10572 252a 89D9     		movl	%ebx, %ecx
1487:src/vm3.c     ****     op1 = op1 + funct;
 10573              		.loc 1 1487 0
 10574 252c 88D8     		movb	%bl, %al
1485:src/vm3.c     ****   if (op1 == 0x0) {
 10575              		.loc 1 1485 0
 10576 252e C1E91A   		shrl	$26, %ecx
 10577              	.LVL350:
1487:src/vm3.c     ****     op1 = op1 + funct;
 10578              		.loc 1 1487 0
 10579 2531 83E03F   		andl	$63, %eax
 10580 2534 8D712B   		leal	43(%rcx), %esi
 10581 2537 84C9     		testb	%cl, %cl
 10582 2539 0F45C6   		cmovne	%esi, %eax
 10583              	.LVL351:
1494:src/vm3.c     **** 
 10584              		.loc 1 1494 0
 10585 253c 0FB6C0   		movzbl	%al, %eax
 10586 253f 48C1E004 		salq	$4, %rax
 10587              	.LVL352:
 10588 2543 48038414 		addq	58088(%rsp,%rdx), %rax
 10588      E8E20000 
 10589 254b 488B08   		movq	(%rax), %rcx
 10590 254e E905E8FF 		jmp	.L269
 10590      FF
 10591              	.LVL353:
 10592              	.L244:
1504:src/vm3.c     **** nPC  += 4;
 10593              		.loc 1 1504 0
 10594 2553 8B050000 		movl	nPC(%rip), %eax
 10594      0000
1502:src/vm3.c     **** RF[rd] = LO;
 10595              		.loc 1 1502 0
 10596 2559 41C1E80B 		shrl	$11, %r8d
 10597              	.LVL354:
1503:src/vm3.c     **** PC  =  nPC;
 10598              		.loc 1 1503 0
 10599 255d 4183E01F 		andl	$31, %r8d
 10600 2561 46893485 		movl	%r14d, RF(,%r8,4)
 10600      00000000 
1506:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10601              		.loc 1 1506 0
 10602 2569 8D5003   		leal	3(%rax), %edx
1505:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10603              		.loc 1 1505 0
 10604 256c 8D4804   		leal	4(%rax), %ecx
1504:src/vm3.c     **** nPC  += 4;
 10605              		.loc 1 1504 0
 10606 256f 89050000 		movl	%eax, PC(%rip)
 10606      0000
1506:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 529


 10607              		.loc 1 1506 0
 10608 2575 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10608      00000000 
 10609 257d 89C2     		movl	%eax, %edx
1519:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10610              		.loc 1 1519 0
 10611 257f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10611      000000
 10612              	.LVL355:
1506:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10613              		.loc 1 1506 0
 10614 2586 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10614      000000
1505:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10615              		.loc 1 1505 0
 10616 258d 890D0000 		movl	%ecx, nPC(%rip)
 10616      0000
1519:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10617              		.loc 1 1519 0
 10618 2593 8D4805   		leal	5(%rax), %ecx
 10619 2596 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10619      000000
1506:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10620              		.loc 1 1506 0
 10621 259d C1E218   		sall	$24, %edx
 10622 25a0 4109D0   		orl	%edx, %r8d
 10623 25a3 8D5001   		leal	1(%rax), %edx
 10624 25a6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10624      000000
 10625 25ad C1E210   		sall	$16, %edx
 10626 25b0 4109D0   		orl	%edx, %r8d
 10627 25b3 8D5002   		leal	2(%rax), %edx
 10628 25b6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10628      000000
 10629 25bd C1E208   		sall	$8, %edx
 10630 25c0 4109D0   		orl	%edx, %r8d
 10631              	.LVL356:
1507:src/vm3.c     ****   if (op0 == 0x0) {
 10632              		.loc 1 1507 0
 10633 25c3 4489C6   		movl	%r8d, %esi
1509:src/vm3.c     ****     op0 = op0 + funct;
 10634              		.loc 1 1509 0
 10635 25c6 4488C2   		movb	%r8b, %dl
1507:src/vm3.c     ****   if (op0 == 0x0) {
 10636              		.loc 1 1507 0
 10637 25c9 C1EE1A   		shrl	$26, %esi
 10638              	.LVL357:
1509:src/vm3.c     ****     op0 = op0 + funct;
 10639              		.loc 1 1509 0
 10640 25cc 83E23F   		andl	$63, %edx
 10641 25cf 8D7E2B   		leal	43(%rsi), %edi
 10642 25d2 4084F6   		testb	%sil, %sil
 10643 25d5 0F45D7   		cmovne	%edi, %edx
 10644              	.LVL358:
1519:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10645              		.loc 1 1519 0
 10646 25d8 C1E110   		sall	$16, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 530


 10647 25db C1E318   		sall	$24, %ebx
 10648 25de 09CB     		orl	%ecx, %ebx
 10649 25e0 8D4807   		leal	7(%rax), %ecx
 10650 25e3 83C006   		addl	$6, %eax
 10651 25e6 0FB68000 		movzbl	VM_memory(%rax), %eax
 10651      000000
1517:src/vm3.c     **** 
 10652              		.loc 1 1517 0
 10653 25ed 0FB6D2   		movzbl	%dl, %edx
1519:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10654              		.loc 1 1519 0
 10655 25f0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10655      000000
1517:src/vm3.c     **** 
 10656              		.loc 1 1517 0
 10657 25f7 48C1E204 		salq	$4, %rdx
 10658              	.LVL359:
1519:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10659              		.loc 1 1519 0
 10660 25fb C1E008   		sall	$8, %eax
 10661 25fe 09CB     		orl	%ecx, %ebx
 10662 2600 09C3     		orl	%eax, %ebx
 10663              	.LVL360:
1520:src/vm3.c     ****   if (op1 == 0x0) {
 10664              		.loc 1 1520 0
 10665 2602 89D9     		movl	%ebx, %ecx
1522:src/vm3.c     ****     op1 = op1 + funct;
 10666              		.loc 1 1522 0
 10667 2604 88D8     		movb	%bl, %al
1520:src/vm3.c     ****   if (op1 == 0x0) {
 10668              		.loc 1 1520 0
 10669 2606 C1E91A   		shrl	$26, %ecx
 10670              	.LVL361:
1522:src/vm3.c     ****     op1 = op1 + funct;
 10671              		.loc 1 1522 0
 10672 2609 83E03F   		andl	$63, %eax
 10673 260c 8D712B   		leal	43(%rcx), %esi
 10674 260f 84C9     		testb	%cl, %cl
 10675 2611 0F45C6   		cmovne	%esi, %eax
 10676              	.LVL362:
1529:src/vm3.c     **** 
 10677              		.loc 1 1529 0
 10678 2614 0FB6C0   		movzbl	%al, %eax
 10679 2617 48C1E004 		salq	$4, %rax
 10680              	.LVL363:
 10681 261b 48038414 		addq	58088(%rsp,%rdx), %rax
 10681      E8E20000 
 10682 2623 488B08   		movq	(%rax), %rcx
 10683 2626 E92DE7FF 		jmp	.L269
 10683      FF
 10684              	.LVL364:
 10685              	.L243:
1539:src/vm3.c     **** nPC  += 4;
 10686              		.loc 1 1539 0
 10687 262b 8B050000 		movl	nPC(%rip), %eax
 10687      0000
1537:src/vm3.c     **** HI = RF[rs];
GAS LISTING /tmp/cc15eBE3.s 			page 531


 10688              		.loc 1 1537 0
 10689 2631 41C1E815 		shrl	$21, %r8d
 10690              	.LVL365:
1538:src/vm3.c     **** PC  =  nPC;
 10691              		.loc 1 1538 0
 10692 2635 4183E01F 		andl	$31, %r8d
 10693 2639 468B2C85 		movl	RF(,%r8,4), %r13d
 10693      00000000 
 10694              	.LVL366:
1541:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10695              		.loc 1 1541 0
 10696 2641 8D5003   		leal	3(%rax), %edx
1540:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10697              		.loc 1 1540 0
 10698 2644 8D4804   		leal	4(%rax), %ecx
1539:src/vm3.c     **** nPC  += 4;
 10699              		.loc 1 1539 0
 10700 2647 89050000 		movl	%eax, PC(%rip)
 10700      0000
1541:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10701              		.loc 1 1541 0
 10702 264d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10702      00000000 
 10703 2655 89C2     		movl	%eax, %edx
1554:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10704              		.loc 1 1554 0
 10705 2657 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10705      000000
 10706              	.LVL367:
1541:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10707              		.loc 1 1541 0
 10708 265e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10708      000000
1540:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10709              		.loc 1 1540 0
 10710 2665 890D0000 		movl	%ecx, nPC(%rip)
 10710      0000
1554:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10711              		.loc 1 1554 0
 10712 266b 8D4805   		leal	5(%rax), %ecx
 10713 266e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10713      000000
1541:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10714              		.loc 1 1541 0
 10715 2675 C1E218   		sall	$24, %edx
 10716 2678 4109D0   		orl	%edx, %r8d
 10717 267b 8D5001   		leal	1(%rax), %edx
 10718 267e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10718      000000
 10719 2685 C1E210   		sall	$16, %edx
 10720 2688 4109D0   		orl	%edx, %r8d
 10721 268b 8D5002   		leal	2(%rax), %edx
 10722 268e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10722      000000
 10723 2695 C1E208   		sall	$8, %edx
 10724 2698 4109D0   		orl	%edx, %r8d
 10725              	.LVL368:
GAS LISTING /tmp/cc15eBE3.s 			page 532


1542:src/vm3.c     ****   if (op0 == 0x0) {
 10726              		.loc 1 1542 0
 10727 269b 4489C6   		movl	%r8d, %esi
1544:src/vm3.c     ****     op0 = op0 + funct;
 10728              		.loc 1 1544 0
 10729 269e 4488C2   		movb	%r8b, %dl
1542:src/vm3.c     ****   if (op0 == 0x0) {
 10730              		.loc 1 1542 0
 10731 26a1 C1EE1A   		shrl	$26, %esi
 10732              	.LVL369:
1544:src/vm3.c     ****     op0 = op0 + funct;
 10733              		.loc 1 1544 0
 10734 26a4 83E23F   		andl	$63, %edx
 10735 26a7 8D7E2B   		leal	43(%rsi), %edi
 10736 26aa 4084F6   		testb	%sil, %sil
 10737 26ad 0F45D7   		cmovne	%edi, %edx
 10738              	.LVL370:
1554:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10739              		.loc 1 1554 0
 10740 26b0 C1E110   		sall	$16, %ecx
 10741 26b3 C1E318   		sall	$24, %ebx
 10742 26b6 09CB     		orl	%ecx, %ebx
 10743 26b8 8D4807   		leal	7(%rax), %ecx
 10744 26bb 83C006   		addl	$6, %eax
 10745 26be 0FB68000 		movzbl	VM_memory(%rax), %eax
 10745      000000
1552:src/vm3.c     **** 
 10746              		.loc 1 1552 0
 10747 26c5 0FB6D2   		movzbl	%dl, %edx
1554:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10748              		.loc 1 1554 0
 10749 26c8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10749      000000
1552:src/vm3.c     **** 
 10750              		.loc 1 1552 0
 10751 26cf 48C1E204 		salq	$4, %rdx
 10752              	.LVL371:
1554:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10753              		.loc 1 1554 0
 10754 26d3 C1E008   		sall	$8, %eax
 10755 26d6 09CB     		orl	%ecx, %ebx
 10756 26d8 09C3     		orl	%eax, %ebx
 10757              	.LVL372:
1555:src/vm3.c     ****   if (op1 == 0x0) {
 10758              		.loc 1 1555 0
 10759 26da 89D9     		movl	%ebx, %ecx
1557:src/vm3.c     ****     op1 = op1 + funct;
 10760              		.loc 1 1557 0
 10761 26dc 88D8     		movb	%bl, %al
1555:src/vm3.c     ****   if (op1 == 0x0) {
 10762              		.loc 1 1555 0
 10763 26de C1E91A   		shrl	$26, %ecx
 10764              	.LVL373:
1557:src/vm3.c     ****     op1 = op1 + funct;
 10765              		.loc 1 1557 0
 10766 26e1 83E03F   		andl	$63, %eax
 10767 26e4 8D712B   		leal	43(%rcx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 533


 10768 26e7 84C9     		testb	%cl, %cl
 10769 26e9 0F45C6   		cmovne	%esi, %eax
 10770              	.LVL374:
1564:src/vm3.c     **** 
 10771              		.loc 1 1564 0
 10772 26ec 0FB6C0   		movzbl	%al, %eax
 10773 26ef 48C1E004 		salq	$4, %rax
 10774              	.LVL375:
 10775 26f3 48038414 		addq	58088(%rsp,%rdx), %rax
 10775      E8E20000 
 10776 26fb 488B08   		movq	(%rax), %rcx
 10777 26fe E955E6FF 		jmp	.L269
 10777      FF
 10778              	.LVL376:
 10779              	.L245:
1574:src/vm3.c     **** nPC  += 4;
 10780              		.loc 1 1574 0
 10781 2703 8B050000 		movl	nPC(%rip), %eax
 10781      0000
1572:src/vm3.c     **** LO = RF[rs];
 10782              		.loc 1 1572 0
 10783 2709 41C1E815 		shrl	$21, %r8d
 10784              	.LVL377:
1573:src/vm3.c     **** PC  =  nPC;
 10785              		.loc 1 1573 0
 10786 270d 4183E01F 		andl	$31, %r8d
 10787 2711 468B3485 		movl	RF(,%r8,4), %r14d
 10787      00000000 
 10788              	.LVL378:
1576:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10789              		.loc 1 1576 0
 10790 2719 8D5003   		leal	3(%rax), %edx
1575:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10791              		.loc 1 1575 0
 10792 271c 8D4804   		leal	4(%rax), %ecx
1574:src/vm3.c     **** nPC  += 4;
 10793              		.loc 1 1574 0
 10794 271f 89050000 		movl	%eax, PC(%rip)
 10794      0000
1576:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10795              		.loc 1 1576 0
 10796 2725 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10796      00000000 
 10797 272d 89C2     		movl	%eax, %edx
1589:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10798              		.loc 1 1589 0
 10799 272f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10799      000000
 10800              	.LVL379:
1576:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10801              		.loc 1 1576 0
 10802 2736 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10802      000000
1575:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10803              		.loc 1 1575 0
 10804 273d 890D0000 		movl	%ecx, nPC(%rip)
 10804      0000
GAS LISTING /tmp/cc15eBE3.s 			page 534


1589:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10805              		.loc 1 1589 0
 10806 2743 8D4805   		leal	5(%rax), %ecx
 10807 2746 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10807      000000
1576:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10808              		.loc 1 1576 0
 10809 274d C1E218   		sall	$24, %edx
 10810 2750 4109D0   		orl	%edx, %r8d
 10811 2753 8D5001   		leal	1(%rax), %edx
 10812 2756 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10812      000000
 10813 275d C1E210   		sall	$16, %edx
 10814 2760 4109D0   		orl	%edx, %r8d
 10815 2763 8D5002   		leal	2(%rax), %edx
 10816 2766 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10816      000000
 10817 276d C1E208   		sall	$8, %edx
 10818 2770 4109D0   		orl	%edx, %r8d
 10819              	.LVL380:
1577:src/vm3.c     ****   if (op0 == 0x0) {
 10820              		.loc 1 1577 0
 10821 2773 4489C6   		movl	%r8d, %esi
1579:src/vm3.c     ****     op0 = op0 + funct;
 10822              		.loc 1 1579 0
 10823 2776 4488C2   		movb	%r8b, %dl
1577:src/vm3.c     ****   if (op0 == 0x0) {
 10824              		.loc 1 1577 0
 10825 2779 C1EE1A   		shrl	$26, %esi
 10826              	.LVL381:
1579:src/vm3.c     ****     op0 = op0 + funct;
 10827              		.loc 1 1579 0
 10828 277c 83E23F   		andl	$63, %edx
 10829 277f 8D7E2B   		leal	43(%rsi), %edi
 10830 2782 4084F6   		testb	%sil, %sil
 10831 2785 0F45D7   		cmovne	%edi, %edx
 10832              	.LVL382:
1589:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10833              		.loc 1 1589 0
 10834 2788 C1E110   		sall	$16, %ecx
 10835 278b C1E318   		sall	$24, %ebx
 10836 278e 09CB     		orl	%ecx, %ebx
 10837 2790 8D4807   		leal	7(%rax), %ecx
 10838 2793 83C006   		addl	$6, %eax
 10839 2796 0FB68000 		movzbl	VM_memory(%rax), %eax
 10839      000000
1587:src/vm3.c     **** 
 10840              		.loc 1 1587 0
 10841 279d 0FB6D2   		movzbl	%dl, %edx
1589:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10842              		.loc 1 1589 0
 10843 27a0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10843      000000
1587:src/vm3.c     **** 
 10844              		.loc 1 1587 0
 10845 27a7 48C1E204 		salq	$4, %rdx
 10846              	.LVL383:
GAS LISTING /tmp/cc15eBE3.s 			page 535


1589:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10847              		.loc 1 1589 0
 10848 27ab C1E008   		sall	$8, %eax
 10849 27ae 09CB     		orl	%ecx, %ebx
 10850 27b0 09C3     		orl	%eax, %ebx
 10851              	.LVL384:
1590:src/vm3.c     ****   if (op1 == 0x0) {
 10852              		.loc 1 1590 0
 10853 27b2 89D9     		movl	%ebx, %ecx
1592:src/vm3.c     ****     op1 = op1 + funct;
 10854              		.loc 1 1592 0
 10855 27b4 88D8     		movb	%bl, %al
1590:src/vm3.c     ****   if (op1 == 0x0) {
 10856              		.loc 1 1590 0
 10857 27b6 C1E91A   		shrl	$26, %ecx
 10858              	.LVL385:
1592:src/vm3.c     ****     op1 = op1 + funct;
 10859              		.loc 1 1592 0
 10860 27b9 83E03F   		andl	$63, %eax
 10861 27bc 8D712B   		leal	43(%rcx), %esi
 10862 27bf 84C9     		testb	%cl, %cl
 10863 27c1 0F45C6   		cmovne	%esi, %eax
 10864              	.LVL386:
1599:src/vm3.c     **** 
 10865              		.loc 1 1599 0
 10866 27c4 0FB6C0   		movzbl	%al, %eax
 10867 27c7 48C1E004 		salq	$4, %rax
 10868              	.LVL387:
 10869 27cb 48038414 		addq	58088(%rsp,%rdx), %rax
 10869      E8E20000 
 10870 27d3 488B08   		movq	(%rax), %rcx
 10871 27d6 E97DE5FF 		jmp	.L269
 10871      FF
 10872              	.LVL388:
 10873              	.L156:
 10874 27db 0FB63D00 		movzbl	RF+8(%rip), %edi
 10874      000000
1607:src/vm3.c     **** {
 10875              		.loc 1 1607 0
 10876 27e2 E8000000 		call	syscall
 10876      00
 10877              	.LVL389:
 10878 27e7 84C0     		testb	%al, %al
 10879 27e9 0F85D022 		jne	.L387
 10879      0100
1612:src/vm3.c     **** nPC  += 4;
 10880              		.loc 1 1612 0
 10881 27ef 8B050000 		movl	nPC(%rip), %eax
 10881      0000
1614:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10882              		.loc 1 1614 0
 10883 27f5 8D5003   		leal	3(%rax), %edx
1613:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10884              		.loc 1 1613 0
 10885 27f8 8D4804   		leal	4(%rax), %ecx
1612:src/vm3.c     **** nPC  += 4;
 10886              		.loc 1 1612 0
GAS LISTING /tmp/cc15eBE3.s 			page 536


 10887 27fb 89050000 		movl	%eax, PC(%rip)
 10887      0000
1614:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10888              		.loc 1 1614 0
 10889 2801 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10889      00000000 
 10890 2809 89C2     		movl	%eax, %edx
1627:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10891              		.loc 1 1627 0
 10892 280b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10892      000000
 10893              	.LVL390:
1614:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10894              		.loc 1 1614 0
 10895 2812 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10895      000000
1613:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10896              		.loc 1 1613 0
 10897 2819 890D0000 		movl	%ecx, nPC(%rip)
 10897      0000
1627:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10898              		.loc 1 1627 0
 10899 281f 8D4805   		leal	5(%rax), %ecx
 10900 2822 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10900      000000
1614:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10901              		.loc 1 1614 0
 10902 2829 C1E218   		sall	$24, %edx
 10903 282c 4109D0   		orl	%edx, %r8d
 10904 282f 8D5001   		leal	1(%rax), %edx
 10905 2832 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10905      000000
 10906 2839 C1E210   		sall	$16, %edx
 10907 283c 4109D0   		orl	%edx, %r8d
 10908 283f 8D5002   		leal	2(%rax), %edx
 10909 2842 0FB69200 		movzbl	VM_memory(%rdx), %edx
 10909      000000
 10910 2849 C1E208   		sall	$8, %edx
 10911 284c 4109D0   		orl	%edx, %r8d
 10912              	.LVL391:
1615:src/vm3.c     ****   if (op0 == 0x0) {
 10913              		.loc 1 1615 0
 10914 284f 4489C6   		movl	%r8d, %esi
1617:src/vm3.c     ****     op0 = op0 + funct;
 10915              		.loc 1 1617 0
 10916 2852 4488C2   		movb	%r8b, %dl
1615:src/vm3.c     ****   if (op0 == 0x0) {
 10917              		.loc 1 1615 0
 10918 2855 C1EE1A   		shrl	$26, %esi
 10919              	.LVL392:
1617:src/vm3.c     ****     op0 = op0 + funct;
 10920              		.loc 1 1617 0
 10921 2858 83E23F   		andl	$63, %edx
 10922 285b 8D7E2B   		leal	43(%rsi), %edi
 10923 285e 4084F6   		testb	%sil, %sil
 10924 2861 0F45D7   		cmovne	%edi, %edx
 10925              	.LVL393:
GAS LISTING /tmp/cc15eBE3.s 			page 537


1627:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10926              		.loc 1 1627 0
 10927 2864 C1E110   		sall	$16, %ecx
 10928 2867 C1E318   		sall	$24, %ebx
 10929 286a 09CB     		orl	%ecx, %ebx
 10930 286c 8D4807   		leal	7(%rax), %ecx
 10931 286f 83C006   		addl	$6, %eax
 10932 2872 0FB68000 		movzbl	VM_memory(%rax), %eax
 10932      000000
1625:src/vm3.c     **** 
 10933              		.loc 1 1625 0
 10934 2879 0FB6D2   		movzbl	%dl, %edx
1627:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10935              		.loc 1 1627 0
 10936 287c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 10936      000000
1625:src/vm3.c     **** 
 10937              		.loc 1 1625 0
 10938 2883 48C1E204 		salq	$4, %rdx
 10939              	.LVL394:
1627:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10940              		.loc 1 1627 0
 10941 2887 C1E008   		sall	$8, %eax
 10942 288a 09CB     		orl	%ecx, %ebx
 10943 288c 09C3     		orl	%eax, %ebx
 10944              	.LVL395:
1628:src/vm3.c     ****   if (op1 == 0x0) {
 10945              		.loc 1 1628 0
 10946 288e 89D9     		movl	%ebx, %ecx
1630:src/vm3.c     ****     op1 = op1 + funct;
 10947              		.loc 1 1630 0
 10948 2890 88D8     		movb	%bl, %al
1628:src/vm3.c     ****   if (op1 == 0x0) {
 10949              		.loc 1 1628 0
 10950 2892 C1E91A   		shrl	$26, %ecx
 10951              	.LVL396:
1630:src/vm3.c     ****     op1 = op1 + funct;
 10952              		.loc 1 1630 0
 10953 2895 83E03F   		andl	$63, %eax
 10954 2898 8D712B   		leal	43(%rcx), %esi
 10955 289b 84C9     		testb	%cl, %cl
 10956 289d 0F45C6   		cmovne	%esi, %eax
 10957              	.LVL397:
1637:src/vm3.c     **** 
 10958              		.loc 1 1637 0
 10959 28a0 0FB6C0   		movzbl	%al, %eax
 10960 28a3 48C1E004 		salq	$4, %rax
 10961              	.LVL398:
 10962 28a7 48038414 		addq	58088(%rsp,%rdx), %rax
 10962      E8E20000 
 10963 28af 488B08   		movq	(%rax), %rcx
 10964 28b2 E9A1E4FF 		jmp	.L269
 10964      FF
 10965              	.LVL399:
 10966              	.L252:
1645:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 10967              		.loc 1 1645 0
GAS LISTING /tmp/cc15eBE3.s 			page 538


 10968 28b7 4489C2   		movl	%r8d, %edx
1646:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 10969              		.loc 1 1646 0
 10970 28ba 4489C0   		movl	%r8d, %eax
1648:src/vm3.c     **** PC  =  nPC;
 10971              		.loc 1 1648 0
 10972 28bd 450FBFC0 		movswl	%r8w, %r8d
 10973              	.LVL400:
1645:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 10974              		.loc 1 1645 0
 10975 28c1 C1EA15   		shrl	$21, %edx
1646:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 10976              		.loc 1 1646 0
 10977 28c4 C1E810   		shrl	$16, %eax
 10978              	.LVL401:
1648:src/vm3.c     **** PC  =  nPC;
 10979              		.loc 1 1648 0
 10980 28c7 83E21F   		andl	$31, %edx
 10981 28ca 83E01F   		andl	$31, %eax
 10982 28cd 44030495 		addl	RF(,%rdx,4), %r8d
 10982      00000000 
 10983              	.LVL402:
 10984 28d5 44890485 		movl	%r8d, RF(,%rax,4)
 10984      00000000 
1649:src/vm3.c     **** nPC  += 4;
 10985              		.loc 1 1649 0
 10986 28dd 8B050000 		movl	nPC(%rip), %eax
 10986      0000
1651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10987              		.loc 1 1651 0
 10988 28e3 8D5003   		leal	3(%rax), %edx
1650:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 10989              		.loc 1 1650 0
 10990 28e6 8D4804   		leal	4(%rax), %ecx
1649:src/vm3.c     **** nPC  += 4;
 10991              		.loc 1 1649 0
 10992 28e9 89050000 		movl	%eax, PC(%rip)
 10992      0000
1651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10993              		.loc 1 1651 0
 10994 28ef 440FB682 		movzbl	VM_memory(%rdx), %r8d
 10994      00000000 
 10995 28f7 89C2     		movl	%eax, %edx
1664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 10996              		.loc 1 1664 0
 10997 28f9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 10997      000000
 10998              	.LVL403:
1651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 10999              		.loc 1 1651 0
 11000 2900 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11000      000000
1650:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11001              		.loc 1 1650 0
 11002 2907 890D0000 		movl	%ecx, nPC(%rip)
 11002      0000
1664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 539


 11003              		.loc 1 1664 0
 11004 290d 8D4805   		leal	5(%rax), %ecx
 11005 2910 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11005      000000
1651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11006              		.loc 1 1651 0
 11007 2917 C1E218   		sall	$24, %edx
 11008 291a 4109D0   		orl	%edx, %r8d
 11009 291d 8D5001   		leal	1(%rax), %edx
 11010 2920 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11010      000000
 11011 2927 C1E210   		sall	$16, %edx
 11012 292a 4109D0   		orl	%edx, %r8d
 11013 292d 8D5002   		leal	2(%rax), %edx
 11014 2930 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11014      000000
 11015 2937 C1E208   		sall	$8, %edx
 11016 293a 4109D0   		orl	%edx, %r8d
 11017              	.LVL404:
1652:src/vm3.c     ****   if (op0 == 0x0) {
 11018              		.loc 1 1652 0
 11019 293d 4489C6   		movl	%r8d, %esi
1654:src/vm3.c     ****     op0 = op0 + funct;
 11020              		.loc 1 1654 0
 11021 2940 4488C2   		movb	%r8b, %dl
1652:src/vm3.c     ****   if (op0 == 0x0) {
 11022              		.loc 1 1652 0
 11023 2943 C1EE1A   		shrl	$26, %esi
 11024              	.LVL405:
1654:src/vm3.c     ****     op0 = op0 + funct;
 11025              		.loc 1 1654 0
 11026 2946 83E23F   		andl	$63, %edx
 11027 2949 8D7E2B   		leal	43(%rsi), %edi
 11028 294c 4084F6   		testb	%sil, %sil
 11029 294f 0F45D7   		cmovne	%edi, %edx
 11030              	.LVL406:
1664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11031              		.loc 1 1664 0
 11032 2952 C1E110   		sall	$16, %ecx
 11033 2955 C1E318   		sall	$24, %ebx
 11034 2958 09CB     		orl	%ecx, %ebx
 11035 295a 8D4807   		leal	7(%rax), %ecx
 11036 295d 83C006   		addl	$6, %eax
 11037 2960 0FB68000 		movzbl	VM_memory(%rax), %eax
 11037      000000
1662:src/vm3.c     **** 
 11038              		.loc 1 1662 0
 11039 2967 0FB6D2   		movzbl	%dl, %edx
1664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11040              		.loc 1 1664 0
 11041 296a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11041      000000
1662:src/vm3.c     **** 
 11042              		.loc 1 1662 0
 11043 2971 48C1E204 		salq	$4, %rdx
 11044              	.LVL407:
1664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 540


 11045              		.loc 1 1664 0
 11046 2975 C1E008   		sall	$8, %eax
 11047 2978 09CB     		orl	%ecx, %ebx
 11048 297a 09C3     		orl	%eax, %ebx
 11049              	.LVL408:
1665:src/vm3.c     ****   if (op1 == 0x0) {
 11050              		.loc 1 1665 0
 11051 297c 89D9     		movl	%ebx, %ecx
1667:src/vm3.c     ****     op1 = op1 + funct;
 11052              		.loc 1 1667 0
 11053 297e 88D8     		movb	%bl, %al
1665:src/vm3.c     ****   if (op1 == 0x0) {
 11054              		.loc 1 1665 0
 11055 2980 C1E91A   		shrl	$26, %ecx
 11056              	.LVL409:
1667:src/vm3.c     ****     op1 = op1 + funct;
 11057              		.loc 1 1667 0
 11058 2983 83E03F   		andl	$63, %eax
 11059 2986 8D712B   		leal	43(%rcx), %esi
 11060 2989 84C9     		testb	%cl, %cl
 11061 298b 0F45C6   		cmovne	%esi, %eax
 11062              	.LVL410:
1674:src/vm3.c     **** 
 11063              		.loc 1 1674 0
 11064 298e 0FB6C0   		movzbl	%al, %eax
 11065 2991 48C1E004 		salq	$4, %rax
 11066              	.LVL411:
 11067 2995 48038414 		addq	58088(%rsp,%rdx), %rax
 11067      E8E20000 
 11068 299d 488B08   		movq	(%rax), %rcx
 11069 29a0 E9B3E3FF 		jmp	.L269
 11069      FF
 11070              	.LVL412:
 11071              	.L133:
1682:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11072              		.loc 1 1682 0
 11073 29a5 4489C2   		movl	%r8d, %edx
1683:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11074              		.loc 1 1683 0
 11075 29a8 4489C0   		movl	%r8d, %eax
1685:src/vm3.c     **** PC  =  nPC;
 11076              		.loc 1 1685 0
 11077 29ab 450FBFC0 		movswl	%r8w, %r8d
 11078              	.LVL413:
1682:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11079              		.loc 1 1682 0
 11080 29af C1EA15   		shrl	$21, %edx
1683:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11081              		.loc 1 1683 0
 11082 29b2 C1E810   		shrl	$16, %eax
 11083              	.LVL414:
1685:src/vm3.c     **** PC  =  nPC;
 11084              		.loc 1 1685 0
 11085 29b5 83E21F   		andl	$31, %edx
 11086 29b8 83E01F   		andl	$31, %eax
 11087 29bb 44030495 		addl	RF(,%rdx,4), %r8d
 11087      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 541


 11088              	.LVL415:
 11089 29c3 44890485 		movl	%r8d, RF(,%rax,4)
 11089      00000000 
1686:src/vm3.c     **** nPC  += 4;
 11090              		.loc 1 1686 0
 11091 29cb 8B050000 		movl	nPC(%rip), %eax
 11091      0000
1688:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11092              		.loc 1 1688 0
 11093 29d1 8D5003   		leal	3(%rax), %edx
1687:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11094              		.loc 1 1687 0
 11095 29d4 8D4804   		leal	4(%rax), %ecx
1686:src/vm3.c     **** nPC  += 4;
 11096              		.loc 1 1686 0
 11097 29d7 89050000 		movl	%eax, PC(%rip)
 11097      0000
1688:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11098              		.loc 1 1688 0
 11099 29dd 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11099      00000000 
 11100 29e5 89C2     		movl	%eax, %edx
1701:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11101              		.loc 1 1701 0
 11102 29e7 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11102      000000
 11103              	.LVL416:
1688:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11104              		.loc 1 1688 0
 11105 29ee 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11105      000000
1687:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11106              		.loc 1 1687 0
 11107 29f5 890D0000 		movl	%ecx, nPC(%rip)
 11107      0000
1701:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11108              		.loc 1 1701 0
 11109 29fb 8D4805   		leal	5(%rax), %ecx
 11110 29fe 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11110      000000
1688:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11111              		.loc 1 1688 0
 11112 2a05 C1E218   		sall	$24, %edx
 11113 2a08 4109D0   		orl	%edx, %r8d
 11114 2a0b 8D5001   		leal	1(%rax), %edx
 11115 2a0e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11115      000000
 11116 2a15 C1E210   		sall	$16, %edx
 11117 2a18 4109D0   		orl	%edx, %r8d
 11118 2a1b 8D5002   		leal	2(%rax), %edx
 11119 2a1e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11119      000000
 11120 2a25 C1E208   		sall	$8, %edx
 11121 2a28 4109D0   		orl	%edx, %r8d
 11122              	.LVL417:
1689:src/vm3.c     ****   if (op0 == 0x0) {
 11123              		.loc 1 1689 0
GAS LISTING /tmp/cc15eBE3.s 			page 542


 11124 2a2b 4489C6   		movl	%r8d, %esi
1691:src/vm3.c     ****     op0 = op0 + funct;
 11125              		.loc 1 1691 0
 11126 2a2e 4488C2   		movb	%r8b, %dl
1689:src/vm3.c     ****   if (op0 == 0x0) {
 11127              		.loc 1 1689 0
 11128 2a31 C1EE1A   		shrl	$26, %esi
 11129              	.LVL418:
1691:src/vm3.c     ****     op0 = op0 + funct;
 11130              		.loc 1 1691 0
 11131 2a34 83E23F   		andl	$63, %edx
 11132 2a37 8D7E2B   		leal	43(%rsi), %edi
 11133 2a3a 4084F6   		testb	%sil, %sil
 11134 2a3d 0F45D7   		cmovne	%edi, %edx
 11135              	.LVL419:
1701:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11136              		.loc 1 1701 0
 11137 2a40 C1E110   		sall	$16, %ecx
 11138 2a43 C1E318   		sall	$24, %ebx
 11139 2a46 09CB     		orl	%ecx, %ebx
 11140 2a48 8D4807   		leal	7(%rax), %ecx
 11141 2a4b 83C006   		addl	$6, %eax
 11142 2a4e 0FB68000 		movzbl	VM_memory(%rax), %eax
 11142      000000
1699:src/vm3.c     **** 
 11143              		.loc 1 1699 0
 11144 2a55 0FB6D2   		movzbl	%dl, %edx
1701:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11145              		.loc 1 1701 0
 11146 2a58 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11146      000000
1699:src/vm3.c     **** 
 11147              		.loc 1 1699 0
 11148 2a5f 48C1E204 		salq	$4, %rdx
 11149              	.LVL420:
1701:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11150              		.loc 1 1701 0
 11151 2a63 C1E008   		sall	$8, %eax
 11152 2a66 09CB     		orl	%ecx, %ebx
 11153 2a68 09C3     		orl	%eax, %ebx
 11154              	.LVL421:
1702:src/vm3.c     ****   if (op1 == 0x0) {
 11155              		.loc 1 1702 0
 11156 2a6a 89D9     		movl	%ebx, %ecx
1704:src/vm3.c     ****     op1 = op1 + funct;
 11157              		.loc 1 1704 0
 11158 2a6c 88D8     		movb	%bl, %al
1702:src/vm3.c     ****   if (op1 == 0x0) {
 11159              		.loc 1 1702 0
 11160 2a6e C1E91A   		shrl	$26, %ecx
 11161              	.LVL422:
1704:src/vm3.c     ****     op1 = op1 + funct;
 11162              		.loc 1 1704 0
 11163 2a71 83E03F   		andl	$63, %eax
 11164 2a74 8D712B   		leal	43(%rcx), %esi
 11165 2a77 84C9     		testb	%cl, %cl
 11166 2a79 0F45C6   		cmovne	%esi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 543


 11167              	.LVL423:
1711:src/vm3.c     **** 
 11168              		.loc 1 1711 0
 11169 2a7c 0FB6C0   		movzbl	%al, %eax
 11170 2a7f 48C1E004 		salq	$4, %rax
 11171              	.LVL424:
 11172 2a83 48038414 		addq	58088(%rsp,%rdx), %rax
 11172      E8E20000 
 11173 2a8b 488B08   		movq	(%rax), %rcx
 11174 2a8e E9C5E2FF 		jmp	.L269
 11174      FF
 11175              	.LVL425:
 11176              	.L106:
1719:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11177              		.loc 1 1719 0
 11178 2a93 4489C2   		movl	%r8d, %edx
1720:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11179              		.loc 1 1720 0
 11180 2a96 4489C0   		movl	%r8d, %eax
1722:src/vm3.c     **** PC  =  nPC;
 11181              		.loc 1 1722 0
 11182 2a99 450FBFC0 		movswl	%r8w, %r8d
 11183              	.LVL426:
1719:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11184              		.loc 1 1719 0
 11185 2a9d C1EA15   		shrl	$21, %edx
1720:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11186              		.loc 1 1720 0
 11187 2aa0 C1E810   		shrl	$16, %eax
 11188              	.LVL427:
1722:src/vm3.c     **** PC  =  nPC;
 11189              		.loc 1 1722 0
 11190 2aa3 83E21F   		andl	$31, %edx
 11191 2aa6 83E01F   		andl	$31, %eax
 11192 2aa9 44230495 		andl	RF(,%rdx,4), %r8d
 11192      00000000 
 11193              	.LVL428:
 11194 2ab1 44890485 		movl	%r8d, RF(,%rax,4)
 11194      00000000 
1723:src/vm3.c     **** nPC  += 4;
 11195              		.loc 1 1723 0
 11196 2ab9 8B050000 		movl	nPC(%rip), %eax
 11196      0000
1725:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11197              		.loc 1 1725 0
 11198 2abf 8D5003   		leal	3(%rax), %edx
1724:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11199              		.loc 1 1724 0
 11200 2ac2 8D4804   		leal	4(%rax), %ecx
1723:src/vm3.c     **** nPC  += 4;
 11201              		.loc 1 1723 0
 11202 2ac5 89050000 		movl	%eax, PC(%rip)
 11202      0000
1725:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11203              		.loc 1 1725 0
 11204 2acb 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11204      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 544


 11205 2ad3 89C2     		movl	%eax, %edx
1738:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11206              		.loc 1 1738 0
 11207 2ad5 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11207      000000
 11208              	.LVL429:
1725:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11209              		.loc 1 1725 0
 11210 2adc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11210      000000
1724:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11211              		.loc 1 1724 0
 11212 2ae3 890D0000 		movl	%ecx, nPC(%rip)
 11212      0000
1738:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11213              		.loc 1 1738 0
 11214 2ae9 8D4805   		leal	5(%rax), %ecx
 11215 2aec 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11215      000000
1725:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11216              		.loc 1 1725 0
 11217 2af3 C1E218   		sall	$24, %edx
 11218 2af6 4109D0   		orl	%edx, %r8d
 11219 2af9 8D5001   		leal	1(%rax), %edx
 11220 2afc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11220      000000
 11221 2b03 C1E210   		sall	$16, %edx
 11222 2b06 4109D0   		orl	%edx, %r8d
 11223 2b09 8D5002   		leal	2(%rax), %edx
 11224 2b0c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11224      000000
 11225 2b13 C1E208   		sall	$8, %edx
 11226 2b16 4109D0   		orl	%edx, %r8d
 11227              	.LVL430:
1726:src/vm3.c     ****   if (op0 == 0x0) {
 11228              		.loc 1 1726 0
 11229 2b19 4489C6   		movl	%r8d, %esi
1728:src/vm3.c     ****     op0 = op0 + funct;
 11230              		.loc 1 1728 0
 11231 2b1c 4488C2   		movb	%r8b, %dl
1726:src/vm3.c     ****   if (op0 == 0x0) {
 11232              		.loc 1 1726 0
 11233 2b1f C1EE1A   		shrl	$26, %esi
 11234              	.LVL431:
1728:src/vm3.c     ****     op0 = op0 + funct;
 11235              		.loc 1 1728 0
 11236 2b22 83E23F   		andl	$63, %edx
 11237 2b25 8D7E2B   		leal	43(%rsi), %edi
 11238 2b28 4084F6   		testb	%sil, %sil
 11239 2b2b 0F45D7   		cmovne	%edi, %edx
 11240              	.LVL432:
1738:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11241              		.loc 1 1738 0
 11242 2b2e C1E110   		sall	$16, %ecx
 11243 2b31 C1E318   		sall	$24, %ebx
 11244 2b34 09CB     		orl	%ecx, %ebx
 11245 2b36 8D4807   		leal	7(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 545


 11246 2b39 83C006   		addl	$6, %eax
 11247 2b3c 0FB68000 		movzbl	VM_memory(%rax), %eax
 11247      000000
1736:src/vm3.c     **** 
 11248              		.loc 1 1736 0
 11249 2b43 0FB6D2   		movzbl	%dl, %edx
1738:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11250              		.loc 1 1738 0
 11251 2b46 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11251      000000
1736:src/vm3.c     **** 
 11252              		.loc 1 1736 0
 11253 2b4d 48C1E204 		salq	$4, %rdx
 11254              	.LVL433:
1738:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11255              		.loc 1 1738 0
 11256 2b51 C1E008   		sall	$8, %eax
 11257 2b54 09CB     		orl	%ecx, %ebx
 11258 2b56 09C3     		orl	%eax, %ebx
 11259              	.LVL434:
1739:src/vm3.c     ****   if (op1 == 0x0) {
 11260              		.loc 1 1739 0
 11261 2b58 89D9     		movl	%ebx, %ecx
1741:src/vm3.c     ****     op1 = op1 + funct;
 11262              		.loc 1 1741 0
 11263 2b5a 88D8     		movb	%bl, %al
1739:src/vm3.c     ****   if (op1 == 0x0) {
 11264              		.loc 1 1739 0
 11265 2b5c C1E91A   		shrl	$26, %ecx
 11266              	.LVL435:
1741:src/vm3.c     ****     op1 = op1 + funct;
 11267              		.loc 1 1741 0
 11268 2b5f 83E03F   		andl	$63, %eax
 11269 2b62 8D712B   		leal	43(%rcx), %esi
 11270 2b65 84C9     		testb	%cl, %cl
 11271 2b67 0F45C6   		cmovne	%esi, %eax
 11272              	.LVL436:
1748:src/vm3.c     **** 
 11273              		.loc 1 1748 0
 11274 2b6a 0FB6C0   		movzbl	%al, %eax
 11275 2b6d 48C1E004 		salq	$4, %rax
 11276              	.LVL437:
 11277 2b71 48038414 		addq	58088(%rsp,%rdx), %rax
 11277      E8E20000 
 11278 2b79 488B08   		movq	(%rax), %rcx
 11279 2b7c E9D7E1FF 		jmp	.L269
 11279      FF
 11280              	.LVL438:
 11281              	.L227:
1756:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11282              		.loc 1 1756 0
 11283 2b81 4489C2   		movl	%r8d, %edx
1757:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11284              		.loc 1 1757 0
 11285 2b84 4489C0   		movl	%r8d, %eax
1759:src/vm3.c     **** PC  =  nPC;
 11286              		.loc 1 1759 0
GAS LISTING /tmp/cc15eBE3.s 			page 546


 11287 2b87 450FBFC0 		movswl	%r8w, %r8d
 11288              	.LVL439:
1756:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11289              		.loc 1 1756 0
 11290 2b8b C1EA15   		shrl	$21, %edx
1757:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11291              		.loc 1 1757 0
 11292 2b8e C1E810   		shrl	$16, %eax
 11293              	.LVL440:
1759:src/vm3.c     **** PC  =  nPC;
 11294              		.loc 1 1759 0
 11295 2b91 83E21F   		andl	$31, %edx
 11296 2b94 83E01F   		andl	$31, %eax
 11297 2b97 440B0495 		orl	RF(,%rdx,4), %r8d
 11297      00000000 
 11298              	.LVL441:
 11299 2b9f 44890485 		movl	%r8d, RF(,%rax,4)
 11299      00000000 
1760:src/vm3.c     **** nPC  += 4;
 11300              		.loc 1 1760 0
 11301 2ba7 8B050000 		movl	nPC(%rip), %eax
 11301      0000
1762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11302              		.loc 1 1762 0
 11303 2bad 8D5003   		leal	3(%rax), %edx
1761:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11304              		.loc 1 1761 0
 11305 2bb0 8D4804   		leal	4(%rax), %ecx
1760:src/vm3.c     **** nPC  += 4;
 11306              		.loc 1 1760 0
 11307 2bb3 89050000 		movl	%eax, PC(%rip)
 11307      0000
1762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11308              		.loc 1 1762 0
 11309 2bb9 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11309      00000000 
 11310 2bc1 89C2     		movl	%eax, %edx
1775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11311              		.loc 1 1775 0
 11312 2bc3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11312      000000
 11313              	.LVL442:
1762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11314              		.loc 1 1762 0
 11315 2bca 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11315      000000
1761:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11316              		.loc 1 1761 0
 11317 2bd1 890D0000 		movl	%ecx, nPC(%rip)
 11317      0000
1775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11318              		.loc 1 1775 0
 11319 2bd7 8D4805   		leal	5(%rax), %ecx
 11320 2bda 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11320      000000
1762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11321              		.loc 1 1762 0
GAS LISTING /tmp/cc15eBE3.s 			page 547


 11322 2be1 C1E218   		sall	$24, %edx
 11323 2be4 4109D0   		orl	%edx, %r8d
 11324 2be7 8D5001   		leal	1(%rax), %edx
 11325 2bea 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11325      000000
 11326 2bf1 C1E210   		sall	$16, %edx
 11327 2bf4 4109D0   		orl	%edx, %r8d
 11328 2bf7 8D5002   		leal	2(%rax), %edx
 11329 2bfa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11329      000000
 11330 2c01 C1E208   		sall	$8, %edx
 11331 2c04 4109D0   		orl	%edx, %r8d
 11332              	.LVL443:
1763:src/vm3.c     ****   if (op0 == 0x0) {
 11333              		.loc 1 1763 0
 11334 2c07 4489C6   		movl	%r8d, %esi
1765:src/vm3.c     ****     op0 = op0 + funct;
 11335              		.loc 1 1765 0
 11336 2c0a 4488C2   		movb	%r8b, %dl
1763:src/vm3.c     ****   if (op0 == 0x0) {
 11337              		.loc 1 1763 0
 11338 2c0d C1EE1A   		shrl	$26, %esi
 11339              	.LVL444:
1765:src/vm3.c     ****     op0 = op0 + funct;
 11340              		.loc 1 1765 0
 11341 2c10 83E23F   		andl	$63, %edx
 11342 2c13 8D7E2B   		leal	43(%rsi), %edi
 11343 2c16 4084F6   		testb	%sil, %sil
 11344 2c19 0F45D7   		cmovne	%edi, %edx
 11345              	.LVL445:
1775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11346              		.loc 1 1775 0
 11347 2c1c C1E110   		sall	$16, %ecx
 11348 2c1f C1E318   		sall	$24, %ebx
 11349 2c22 09CB     		orl	%ecx, %ebx
 11350 2c24 8D4807   		leal	7(%rax), %ecx
 11351 2c27 83C006   		addl	$6, %eax
 11352 2c2a 0FB68000 		movzbl	VM_memory(%rax), %eax
 11352      000000
1773:src/vm3.c     **** 
 11353              		.loc 1 1773 0
 11354 2c31 0FB6D2   		movzbl	%dl, %edx
1775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11355              		.loc 1 1775 0
 11356 2c34 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11356      000000
1773:src/vm3.c     **** 
 11357              		.loc 1 1773 0
 11358 2c3b 48C1E204 		salq	$4, %rdx
 11359              	.LVL446:
1775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11360              		.loc 1 1775 0
 11361 2c3f C1E008   		sall	$8, %eax
 11362 2c42 09CB     		orl	%ecx, %ebx
 11363 2c44 09C3     		orl	%eax, %ebx
 11364              	.LVL447:
1776:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 548


 11365              		.loc 1 1776 0
 11366 2c46 89D9     		movl	%ebx, %ecx
1778:src/vm3.c     ****     op1 = op1 + funct;
 11367              		.loc 1 1778 0
 11368 2c48 88D8     		movb	%bl, %al
1776:src/vm3.c     ****   if (op1 == 0x0) {
 11369              		.loc 1 1776 0
 11370 2c4a C1E91A   		shrl	$26, %ecx
 11371              	.LVL448:
1778:src/vm3.c     ****     op1 = op1 + funct;
 11372              		.loc 1 1778 0
 11373 2c4d 83E03F   		andl	$63, %eax
 11374 2c50 8D712B   		leal	43(%rcx), %esi
 11375 2c53 84C9     		testb	%cl, %cl
 11376 2c55 0F45C6   		cmovne	%esi, %eax
 11377              	.LVL449:
1785:src/vm3.c     **** 
 11378              		.loc 1 1785 0
 11379 2c58 0FB6C0   		movzbl	%al, %eax
 11380 2c5b 48C1E004 		salq	$4, %rax
 11381              	.LVL450:
 11382 2c5f 48038414 		addq	58088(%rsp,%rdx), %rax
 11382      E8E20000 
 11383 2c67 488B08   		movq	(%rax), %rcx
 11384 2c6a E9E9E0FF 		jmp	.L269
 11384      FF
 11385              	.LVL451:
 11386              	.L254:
1793:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 11387              		.loc 1 1793 0
 11388 2c6f 4489C2   		movl	%r8d, %edx
1794:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11389              		.loc 1 1794 0
 11390 2c72 4489C0   		movl	%r8d, %eax
1796:src/vm3.c     **** PC  =  nPC;
 11391              		.loc 1 1796 0
 11392 2c75 450FBFC0 		movswl	%r8w, %r8d
 11393              	.LVL452:
1793:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 11394              		.loc 1 1793 0
 11395 2c79 C1EA15   		shrl	$21, %edx
1794:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11396              		.loc 1 1794 0
 11397 2c7c C1E80B   		shrl	$11, %eax
 11398              	.LVL453:
1796:src/vm3.c     **** PC  =  nPC;
 11399              		.loc 1 1796 0
 11400 2c7f 83E21F   		andl	$31, %edx
 11401 2c82 83E01F   		andl	$31, %eax
 11402 2c85 44330495 		xorl	RF(,%rdx,4), %r8d
 11402      00000000 
 11403              	.LVL454:
 11404 2c8d 44890485 		movl	%r8d, RF(,%rax,4)
 11404      00000000 
1797:src/vm3.c     **** nPC  += 4;
 11405              		.loc 1 1797 0
 11406 2c95 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 549


 11406      0000
1799:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11407              		.loc 1 1799 0
 11408 2c9b 8D5003   		leal	3(%rax), %edx
1798:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11409              		.loc 1 1798 0
 11410 2c9e 8D4804   		leal	4(%rax), %ecx
1797:src/vm3.c     **** nPC  += 4;
 11411              		.loc 1 1797 0
 11412 2ca1 89050000 		movl	%eax, PC(%rip)
 11412      0000
1799:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11413              		.loc 1 1799 0
 11414 2ca7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11414      00000000 
 11415 2caf 89C2     		movl	%eax, %edx
1812:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11416              		.loc 1 1812 0
 11417 2cb1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11417      000000
 11418              	.LVL455:
1799:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11419              		.loc 1 1799 0
 11420 2cb8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11420      000000
1798:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11421              		.loc 1 1798 0
 11422 2cbf 890D0000 		movl	%ecx, nPC(%rip)
 11422      0000
1812:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11423              		.loc 1 1812 0
 11424 2cc5 8D4805   		leal	5(%rax), %ecx
 11425 2cc8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11425      000000
1799:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11426              		.loc 1 1799 0
 11427 2ccf C1E218   		sall	$24, %edx
 11428 2cd2 4109D0   		orl	%edx, %r8d
 11429 2cd5 8D5001   		leal	1(%rax), %edx
 11430 2cd8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11430      000000
 11431 2cdf C1E210   		sall	$16, %edx
 11432 2ce2 4109D0   		orl	%edx, %r8d
 11433 2ce5 8D5002   		leal	2(%rax), %edx
 11434 2ce8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11434      000000
 11435 2cef C1E208   		sall	$8, %edx
 11436 2cf2 4109D0   		orl	%edx, %r8d
 11437              	.LVL456:
1800:src/vm3.c     ****   if (op0 == 0x0) {
 11438              		.loc 1 1800 0
 11439 2cf5 4489C6   		movl	%r8d, %esi
1802:src/vm3.c     ****     op0 = op0 + funct;
 11440              		.loc 1 1802 0
 11441 2cf8 4488C2   		movb	%r8b, %dl
1800:src/vm3.c     ****   if (op0 == 0x0) {
 11442              		.loc 1 1800 0
GAS LISTING /tmp/cc15eBE3.s 			page 550


 11443 2cfb C1EE1A   		shrl	$26, %esi
 11444              	.LVL457:
1802:src/vm3.c     ****     op0 = op0 + funct;
 11445              		.loc 1 1802 0
 11446 2cfe 83E23F   		andl	$63, %edx
 11447 2d01 8D7E2B   		leal	43(%rsi), %edi
 11448 2d04 4084F6   		testb	%sil, %sil
 11449 2d07 0F45D7   		cmovne	%edi, %edx
 11450              	.LVL458:
1812:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11451              		.loc 1 1812 0
 11452 2d0a C1E110   		sall	$16, %ecx
 11453 2d0d C1E318   		sall	$24, %ebx
 11454 2d10 09CB     		orl	%ecx, %ebx
 11455 2d12 8D4807   		leal	7(%rax), %ecx
 11456 2d15 83C006   		addl	$6, %eax
 11457 2d18 0FB68000 		movzbl	VM_memory(%rax), %eax
 11457      000000
1810:src/vm3.c     **** 
 11458              		.loc 1 1810 0
 11459 2d1f 0FB6D2   		movzbl	%dl, %edx
1812:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11460              		.loc 1 1812 0
 11461 2d22 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11461      000000
1810:src/vm3.c     **** 
 11462              		.loc 1 1810 0
 11463 2d29 48C1E204 		salq	$4, %rdx
 11464              	.LVL459:
1812:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11465              		.loc 1 1812 0
 11466 2d2d C1E008   		sall	$8, %eax
 11467 2d30 09CB     		orl	%ecx, %ebx
 11468 2d32 09C3     		orl	%eax, %ebx
 11469              	.LVL460:
1813:src/vm3.c     ****   if (op1 == 0x0) {
 11470              		.loc 1 1813 0
 11471 2d34 89D9     		movl	%ebx, %ecx
1815:src/vm3.c     ****     op1 = op1 + funct;
 11472              		.loc 1 1815 0
 11473 2d36 88D8     		movb	%bl, %al
1813:src/vm3.c     ****   if (op1 == 0x0) {
 11474              		.loc 1 1813 0
 11475 2d38 C1E91A   		shrl	$26, %ecx
 11476              	.LVL461:
1815:src/vm3.c     ****     op1 = op1 + funct;
 11477              		.loc 1 1815 0
 11478 2d3b 83E03F   		andl	$63, %eax
 11479 2d3e 8D712B   		leal	43(%rcx), %esi
 11480 2d41 84C9     		testb	%cl, %cl
 11481 2d43 0F45C6   		cmovne	%esi, %eax
 11482              	.LVL462:
1822:src/vm3.c     **** 
 11483              		.loc 1 1822 0
 11484 2d46 0FB6C0   		movzbl	%al, %eax
 11485 2d49 48C1E004 		salq	$4, %rax
 11486              	.LVL463:
GAS LISTING /tmp/cc15eBE3.s 			page 551


 11487 2d4d 48038414 		addq	58088(%rsp,%rdx), %rax
 11487      E8E20000 
 11488 2d55 488B08   		movq	(%rax), %rcx
 11489 2d58 E9FBDFFF 		jmp	.L269
 11489      FF
 11490              	.LVL464:
 11491              	.L1:
1831:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11492              		.loc 1 1831 0
 11493 2d5d 4489C0   		movl	%r8d, %eax
1833:src/vm3.c     **** PC  =  nPC;
 11494              		.loc 1 1833 0
 11495 2d60 41C1E010 		sall	$16, %r8d
 11496              	.LVL465:
1831:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11497              		.loc 1 1831 0
 11498 2d64 C1E810   		shrl	$16, %eax
 11499              	.LVL466:
1833:src/vm3.c     **** PC  =  nPC;
 11500              		.loc 1 1833 0
 11501 2d67 83E01F   		andl	$31, %eax
 11502 2d6a 44890485 		movl	%r8d, RF(,%rax,4)
 11502      00000000 
1834:src/vm3.c     **** nPC  += 4;
 11503              		.loc 1 1834 0
 11504 2d72 8B050000 		movl	nPC(%rip), %eax
 11504      0000
1836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11505              		.loc 1 1836 0
 11506 2d78 8D5003   		leal	3(%rax), %edx
1835:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11507              		.loc 1 1835 0
 11508 2d7b 8D4804   		leal	4(%rax), %ecx
1834:src/vm3.c     **** nPC  += 4;
 11509              		.loc 1 1834 0
 11510 2d7e 89050000 		movl	%eax, PC(%rip)
 11510      0000
1836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11511              		.loc 1 1836 0
 11512 2d84 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11512      00000000 
 11513 2d8c 89C2     		movl	%eax, %edx
1849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11514              		.loc 1 1849 0
 11515 2d8e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11515      000000
 11516              	.LVL467:
1836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11517              		.loc 1 1836 0
 11518 2d95 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11518      000000
1835:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11519              		.loc 1 1835 0
 11520 2d9c 890D0000 		movl	%ecx, nPC(%rip)
 11520      0000
1849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11521              		.loc 1 1849 0
GAS LISTING /tmp/cc15eBE3.s 			page 552


 11522 2da2 8D4805   		leal	5(%rax), %ecx
 11523 2da5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11523      000000
1836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11524              		.loc 1 1836 0
 11525 2dac C1E218   		sall	$24, %edx
 11526 2daf 4109D0   		orl	%edx, %r8d
 11527 2db2 8D5001   		leal	1(%rax), %edx
 11528 2db5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11528      000000
 11529 2dbc C1E210   		sall	$16, %edx
 11530 2dbf 4109D0   		orl	%edx, %r8d
 11531 2dc2 8D5002   		leal	2(%rax), %edx
 11532 2dc5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11532      000000
 11533 2dcc C1E208   		sall	$8, %edx
 11534 2dcf 4109D0   		orl	%edx, %r8d
 11535              	.LVL468:
1837:src/vm3.c     ****   if (op0 == 0x0) {
 11536              		.loc 1 1837 0
 11537 2dd2 4489C6   		movl	%r8d, %esi
1839:src/vm3.c     ****     op0 = op0 + funct;
 11538              		.loc 1 1839 0
 11539 2dd5 4488C2   		movb	%r8b, %dl
1837:src/vm3.c     ****   if (op0 == 0x0) {
 11540              		.loc 1 1837 0
 11541 2dd8 C1EE1A   		shrl	$26, %esi
 11542              	.LVL469:
1839:src/vm3.c     ****     op0 = op0 + funct;
 11543              		.loc 1 1839 0
 11544 2ddb 83E23F   		andl	$63, %edx
 11545 2dde 8D7E2B   		leal	43(%rsi), %edi
 11546 2de1 4084F6   		testb	%sil, %sil
 11547 2de4 0F45D7   		cmovne	%edi, %edx
 11548              	.LVL470:
1849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11549              		.loc 1 1849 0
 11550 2de7 C1E110   		sall	$16, %ecx
 11551 2dea C1E318   		sall	$24, %ebx
 11552 2ded 09CB     		orl	%ecx, %ebx
 11553 2def 8D4807   		leal	7(%rax), %ecx
 11554 2df2 83C006   		addl	$6, %eax
 11555 2df5 0FB68000 		movzbl	VM_memory(%rax), %eax
 11555      000000
1847:src/vm3.c     **** 
 11556              		.loc 1 1847 0
 11557 2dfc 0FB6D2   		movzbl	%dl, %edx
1849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11558              		.loc 1 1849 0
 11559 2dff 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11559      000000
1847:src/vm3.c     **** 
 11560              		.loc 1 1847 0
 11561 2e06 48C1E204 		salq	$4, %rdx
 11562              	.LVL471:
1849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11563              		.loc 1 1849 0
GAS LISTING /tmp/cc15eBE3.s 			page 553


 11564 2e0a C1E008   		sall	$8, %eax
 11565 2e0d 09CB     		orl	%ecx, %ebx
 11566 2e0f 09C3     		orl	%eax, %ebx
 11567              	.LVL472:
1850:src/vm3.c     ****   if (op1 == 0x0) {
 11568              		.loc 1 1850 0
 11569 2e11 89D9     		movl	%ebx, %ecx
1852:src/vm3.c     ****     op1 = op1 + funct;
 11570              		.loc 1 1852 0
 11571 2e13 88D8     		movb	%bl, %al
1850:src/vm3.c     ****   if (op1 == 0x0) {
 11572              		.loc 1 1850 0
 11573 2e15 C1E91A   		shrl	$26, %ecx
 11574              	.LVL473:
1852:src/vm3.c     ****     op1 = op1 + funct;
 11575              		.loc 1 1852 0
 11576 2e18 83E03F   		andl	$63, %eax
 11577 2e1b 8D712B   		leal	43(%rcx), %esi
 11578 2e1e 84C9     		testb	%cl, %cl
 11579 2e20 0F45C6   		cmovne	%esi, %eax
 11580              	.LVL474:
1859:src/vm3.c     **** 
 11581              		.loc 1 1859 0
 11582 2e23 0FB6C0   		movzbl	%al, %eax
 11583 2e26 48C1E004 		salq	$4, %rax
 11584              	.LVL475:
 11585 2e2a 48038414 		addq	58088(%rsp,%rdx), %rax
 11585      E8E20000 
 11586 2e32 488B08   		movq	(%rax), %rcx
 11587 2e35 E91EDFFF 		jmp	.L269
 11587      FF
 11588              	.LVL476:
 11589              	.L256:
1867:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11590              		.loc 1 1867 0
 11591 2e3a 4489C0   		movl	%r8d, %eax
1869:src/vm3.c     **** PC  =  nPC;
 11592              		.loc 1 1869 0
 11593 2e3d 41C1E010 		sall	$16, %r8d
 11594              	.LVL477:
1867:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11595              		.loc 1 1867 0
 11596 2e41 C1E810   		shrl	$16, %eax
 11597              	.LVL478:
1869:src/vm3.c     **** PC  =  nPC;
 11598              		.loc 1 1869 0
 11599 2e44 83E01F   		andl	$31, %eax
 11600 2e47 44890485 		movl	%r8d, RF(,%rax,4)
 11600      00000000 
1870:src/vm3.c     **** nPC  += 4;
 11601              		.loc 1 1870 0
 11602 2e4f 8B050000 		movl	nPC(%rip), %eax
 11602      0000
1872:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11603              		.loc 1 1872 0
 11604 2e55 8D5003   		leal	3(%rax), %edx
1871:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 554


 11605              		.loc 1 1871 0
 11606 2e58 8D4804   		leal	4(%rax), %ecx
1870:src/vm3.c     **** nPC  += 4;
 11607              		.loc 1 1870 0
 11608 2e5b 89050000 		movl	%eax, PC(%rip)
 11608      0000
1872:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11609              		.loc 1 1872 0
 11610 2e61 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11610      00000000 
 11611 2e69 89C2     		movl	%eax, %edx
1885:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11612              		.loc 1 1885 0
 11613 2e6b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11613      000000
 11614              	.LVL479:
1872:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11615              		.loc 1 1872 0
 11616 2e72 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11616      000000
1871:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11617              		.loc 1 1871 0
 11618 2e79 890D0000 		movl	%ecx, nPC(%rip)
 11618      0000
1885:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11619              		.loc 1 1885 0
 11620 2e7f 8D4805   		leal	5(%rax), %ecx
 11621 2e82 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11621      000000
1872:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11622              		.loc 1 1872 0
 11623 2e89 C1E218   		sall	$24, %edx
 11624 2e8c 4109D0   		orl	%edx, %r8d
 11625 2e8f 8D5001   		leal	1(%rax), %edx
 11626 2e92 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11626      000000
 11627 2e99 C1E210   		sall	$16, %edx
 11628 2e9c 4109D0   		orl	%edx, %r8d
 11629 2e9f 8D5002   		leal	2(%rax), %edx
 11630 2ea2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11630      000000
 11631 2ea9 C1E208   		sall	$8, %edx
 11632 2eac 4109D0   		orl	%edx, %r8d
 11633              	.LVL480:
1873:src/vm3.c     ****   if (op0 == 0x0) {
 11634              		.loc 1 1873 0
 11635 2eaf 4489C6   		movl	%r8d, %esi
1875:src/vm3.c     ****     op0 = op0 + funct;
 11636              		.loc 1 1875 0
 11637 2eb2 4488C2   		movb	%r8b, %dl
1873:src/vm3.c     ****   if (op0 == 0x0) {
 11638              		.loc 1 1873 0
 11639 2eb5 C1EE1A   		shrl	$26, %esi
 11640              	.LVL481:
1875:src/vm3.c     ****     op0 = op0 + funct;
 11641              		.loc 1 1875 0
 11642 2eb8 83E23F   		andl	$63, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 555


 11643 2ebb 8D7E2B   		leal	43(%rsi), %edi
 11644 2ebe 4084F6   		testb	%sil, %sil
 11645 2ec1 0F45D7   		cmovne	%edi, %edx
 11646              	.LVL482:
1885:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11647              		.loc 1 1885 0
 11648 2ec4 C1E110   		sall	$16, %ecx
 11649 2ec7 C1E318   		sall	$24, %ebx
 11650 2eca 09CB     		orl	%ecx, %ebx
 11651 2ecc 8D4807   		leal	7(%rax), %ecx
 11652 2ecf 83C006   		addl	$6, %eax
 11653 2ed2 0FB68000 		movzbl	VM_memory(%rax), %eax
 11653      000000
1883:src/vm3.c     **** 
 11654              		.loc 1 1883 0
 11655 2ed9 0FB6D2   		movzbl	%dl, %edx
1885:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11656              		.loc 1 1885 0
 11657 2edc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11657      000000
1883:src/vm3.c     **** 
 11658              		.loc 1 1883 0
 11659 2ee3 48C1E204 		salq	$4, %rdx
 11660              	.LVL483:
1885:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11661              		.loc 1 1885 0
 11662 2ee7 C1E008   		sall	$8, %eax
 11663 2eea 09CB     		orl	%ecx, %ebx
 11664 2eec 09C3     		orl	%eax, %ebx
 11665              	.LVL484:
1886:src/vm3.c     ****   if (op1 == 0x0) {
 11666              		.loc 1 1886 0
 11667 2eee 89D9     		movl	%ebx, %ecx
1888:src/vm3.c     ****     op1 = op1 + funct;
 11668              		.loc 1 1888 0
 11669 2ef0 88D8     		movb	%bl, %al
1886:src/vm3.c     ****   if (op1 == 0x0) {
 11670              		.loc 1 1886 0
 11671 2ef2 C1E91A   		shrl	$26, %ecx
 11672              	.LVL485:
1888:src/vm3.c     ****     op1 = op1 + funct;
 11673              		.loc 1 1888 0
 11674 2ef5 83E03F   		andl	$63, %eax
 11675 2ef8 8D712B   		leal	43(%rcx), %esi
 11676 2efb 84C9     		testb	%cl, %cl
 11677 2efd 0F45C6   		cmovne	%esi, %eax
 11678              	.LVL486:
1895:src/vm3.c     **** 
 11679              		.loc 1 1895 0
 11680 2f00 0FB6C0   		movzbl	%al, %eax
 11681 2f03 48C1E004 		salq	$4, %rax
 11682              	.LVL487:
 11683 2f07 48038414 		addq	58088(%rsp,%rdx), %rax
 11683      E8E20000 
 11684 2f0f 488B08   		movq	(%rax), %rcx
 11685 2f12 E941DEFF 		jmp	.L269
 11685      FF
GAS LISTING /tmp/cc15eBE3.s 			page 556


 11686              	.LVL488:
 11687              	.L255:
1903:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11688              		.loc 1 1903 0
 11689 2f17 4489C0   		movl	%r8d, %eax
1905:src/vm3.c     **** PC  =  nPC;
 11690              		.loc 1 1905 0
 11691 2f1a 450FBFC0 		movswl	%r8w, %r8d
 11692              	.LVL489:
1903:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11693              		.loc 1 1903 0
 11694 2f1e C1E810   		shrl	$16, %eax
 11695              	.LVL490:
1905:src/vm3.c     **** PC  =  nPC;
 11696              		.loc 1 1905 0
 11697 2f21 83E01F   		andl	$31, %eax
 11698 2f24 44890485 		movl	%r8d, RF(,%rax,4)
 11698      00000000 
1906:src/vm3.c     **** nPC  += 4;
 11699              		.loc 1 1906 0
 11700 2f2c 8B050000 		movl	nPC(%rip), %eax
 11700      0000
1908:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11701              		.loc 1 1908 0
 11702 2f32 8D5003   		leal	3(%rax), %edx
1907:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11703              		.loc 1 1907 0
 11704 2f35 8D4804   		leal	4(%rax), %ecx
1906:src/vm3.c     **** nPC  += 4;
 11705              		.loc 1 1906 0
 11706 2f38 89050000 		movl	%eax, PC(%rip)
 11706      0000
1908:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11707              		.loc 1 1908 0
 11708 2f3e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11708      00000000 
 11709              	.LVL491:
 11710 2f46 89C2     		movl	%eax, %edx
1921:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11711              		.loc 1 1921 0
 11712 2f48 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11712      000000
 11713              	.LVL492:
1908:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11714              		.loc 1 1908 0
 11715 2f4f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11715      000000
1907:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11716              		.loc 1 1907 0
 11717 2f56 890D0000 		movl	%ecx, nPC(%rip)
 11717      0000
1921:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11718              		.loc 1 1921 0
 11719 2f5c 8D4805   		leal	5(%rax), %ecx
 11720 2f5f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11720      000000
1908:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 557


 11721              		.loc 1 1908 0
 11722 2f66 C1E218   		sall	$24, %edx
 11723 2f69 4109D0   		orl	%edx, %r8d
 11724 2f6c 8D5001   		leal	1(%rax), %edx
 11725 2f6f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11725      000000
 11726 2f76 C1E210   		sall	$16, %edx
 11727 2f79 4109D0   		orl	%edx, %r8d
 11728 2f7c 8D5002   		leal	2(%rax), %edx
 11729 2f7f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11729      000000
 11730 2f86 C1E208   		sall	$8, %edx
 11731 2f89 4109D0   		orl	%edx, %r8d
 11732              	.LVL493:
1909:src/vm3.c     ****   if (op0 == 0x0) {
 11733              		.loc 1 1909 0
 11734 2f8c 4489C6   		movl	%r8d, %esi
1911:src/vm3.c     ****     op0 = op0 + funct;
 11735              		.loc 1 1911 0
 11736 2f8f 4488C2   		movb	%r8b, %dl
1909:src/vm3.c     ****   if (op0 == 0x0) {
 11737              		.loc 1 1909 0
 11738 2f92 C1EE1A   		shrl	$26, %esi
 11739              	.LVL494:
1911:src/vm3.c     ****     op0 = op0 + funct;
 11740              		.loc 1 1911 0
 11741 2f95 83E23F   		andl	$63, %edx
 11742 2f98 8D7E2B   		leal	43(%rsi), %edi
 11743 2f9b 4084F6   		testb	%sil, %sil
 11744 2f9e 0F45D7   		cmovne	%edi, %edx
 11745              	.LVL495:
1921:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11746              		.loc 1 1921 0
 11747 2fa1 C1E110   		sall	$16, %ecx
 11748 2fa4 C1E318   		sall	$24, %ebx
 11749 2fa7 09CB     		orl	%ecx, %ebx
 11750 2fa9 8D4807   		leal	7(%rax), %ecx
 11751 2fac 83C006   		addl	$6, %eax
 11752 2faf 0FB68000 		movzbl	VM_memory(%rax), %eax
 11752      000000
1919:src/vm3.c     **** 
 11753              		.loc 1 1919 0
 11754 2fb6 0FB6D2   		movzbl	%dl, %edx
1921:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11755              		.loc 1 1921 0
 11756 2fb9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11756      000000
1919:src/vm3.c     **** 
 11757              		.loc 1 1919 0
 11758 2fc0 48C1E204 		salq	$4, %rdx
 11759              	.LVL496:
1921:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11760              		.loc 1 1921 0
 11761 2fc4 C1E008   		sall	$8, %eax
 11762 2fc7 09CB     		orl	%ecx, %ebx
 11763 2fc9 09C3     		orl	%eax, %ebx
 11764              	.LVL497:
GAS LISTING /tmp/cc15eBE3.s 			page 558


1922:src/vm3.c     ****   if (op1 == 0x0) {
 11765              		.loc 1 1922 0
 11766 2fcb 89D9     		movl	%ebx, %ecx
1924:src/vm3.c     ****     op1 = op1 + funct;
 11767              		.loc 1 1924 0
 11768 2fcd 88D8     		movb	%bl, %al
1922:src/vm3.c     ****   if (op1 == 0x0) {
 11769              		.loc 1 1922 0
 11770 2fcf C1E91A   		shrl	$26, %ecx
 11771              	.LVL498:
1924:src/vm3.c     ****     op1 = op1 + funct;
 11772              		.loc 1 1924 0
 11773 2fd2 83E03F   		andl	$63, %eax
 11774 2fd5 8D712B   		leal	43(%rcx), %esi
 11775 2fd8 84C9     		testb	%cl, %cl
 11776 2fda 0F45C6   		cmovne	%esi, %eax
 11777              	.LVL499:
1931:src/vm3.c     **** 
 11778              		.loc 1 1931 0
 11779 2fdd 0FB6C0   		movzbl	%al, %eax
 11780 2fe0 48C1E004 		salq	$4, %rax
 11781              	.LVL500:
 11782 2fe4 48038414 		addq	58088(%rsp,%rdx), %rax
 11782      E8E20000 
 11783 2fec 488B08   		movq	(%rax), %rcx
 11784 2fef E964DDFF 		jmp	.L269
 11784      FF
 11785              	.LVL501:
 11786              	.L168:
1939:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11787              		.loc 1 1939 0
 11788 2ff4 4489C2   		movl	%r8d, %edx
1940:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11789              		.loc 1 1940 0
 11790 2ff7 4489C0   		movl	%r8d, %eax
1942:src/vm3.c     **** PC  =  nPC;
 11791              		.loc 1 1942 0
 11792 2ffa 450FBFC0 		movswl	%r8w, %r8d
 11793              	.LVL502:
1939:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11794              		.loc 1 1939 0
 11795 2ffe C1EA15   		shrl	$21, %edx
1940:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11796              		.loc 1 1940 0
 11797 3001 C1E810   		shrl	$16, %eax
 11798              	.LVL503:
1942:src/vm3.c     **** PC  =  nPC;
 11799              		.loc 1 1942 0
 11800 3004 83E21F   		andl	$31, %edx
 11801 3007 83E01F   		andl	$31, %eax
 11802 300a 44390495 		cmpl	%r8d, RF(,%rdx,4)
 11802      00000000 
 11803 3012 0F92C2   		setb	%dl
 11804 3015 0FB6D2   		movzbl	%dl, %edx
 11805 3018 89148500 		movl	%edx, RF(,%rax,4)
 11805      000000
1943:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 559


 11806              		.loc 1 1943 0
 11807 301f 8B050000 		movl	nPC(%rip), %eax
 11807      0000
1945:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11808              		.loc 1 1945 0
 11809 3025 8D5003   		leal	3(%rax), %edx
1944:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11810              		.loc 1 1944 0
 11811 3028 8D4804   		leal	4(%rax), %ecx
1943:src/vm3.c     **** nPC  += 4;
 11812              		.loc 1 1943 0
 11813 302b 89050000 		movl	%eax, PC(%rip)
 11813      0000
1945:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11814              		.loc 1 1945 0
 11815 3031 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11815      00000000 
 11816              	.LVL504:
 11817 3039 89C2     		movl	%eax, %edx
1958:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11818              		.loc 1 1958 0
 11819 303b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11819      000000
 11820              	.LVL505:
1945:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11821              		.loc 1 1945 0
 11822 3042 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11822      000000
1944:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11823              		.loc 1 1944 0
 11824 3049 890D0000 		movl	%ecx, nPC(%rip)
 11824      0000
1958:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11825              		.loc 1 1958 0
 11826 304f 8D4805   		leal	5(%rax), %ecx
 11827 3052 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11827      000000
1945:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11828              		.loc 1 1945 0
 11829 3059 C1E218   		sall	$24, %edx
 11830 305c 4109D0   		orl	%edx, %r8d
 11831 305f 8D5001   		leal	1(%rax), %edx
 11832 3062 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11832      000000
 11833 3069 C1E210   		sall	$16, %edx
 11834 306c 4109D0   		orl	%edx, %r8d
 11835 306f 8D5002   		leal	2(%rax), %edx
 11836 3072 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11836      000000
 11837 3079 C1E208   		sall	$8, %edx
 11838 307c 4109D0   		orl	%edx, %r8d
 11839              	.LVL506:
1946:src/vm3.c     ****   if (op0 == 0x0) {
 11840              		.loc 1 1946 0
 11841 307f 4489C6   		movl	%r8d, %esi
1948:src/vm3.c     ****     op0 = op0 + funct;
 11842              		.loc 1 1948 0
GAS LISTING /tmp/cc15eBE3.s 			page 560


 11843 3082 4488C2   		movb	%r8b, %dl
1946:src/vm3.c     ****   if (op0 == 0x0) {
 11844              		.loc 1 1946 0
 11845 3085 C1EE1A   		shrl	$26, %esi
 11846              	.LVL507:
1948:src/vm3.c     ****     op0 = op0 + funct;
 11847              		.loc 1 1948 0
 11848 3088 83E23F   		andl	$63, %edx
 11849 308b 8D7E2B   		leal	43(%rsi), %edi
 11850 308e 4084F6   		testb	%sil, %sil
 11851 3091 0F45D7   		cmovne	%edi, %edx
 11852              	.LVL508:
1958:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11853              		.loc 1 1958 0
 11854 3094 C1E110   		sall	$16, %ecx
 11855 3097 C1E318   		sall	$24, %ebx
 11856 309a 09CB     		orl	%ecx, %ebx
 11857 309c 8D4807   		leal	7(%rax), %ecx
 11858 309f 83C006   		addl	$6, %eax
 11859 30a2 0FB68000 		movzbl	VM_memory(%rax), %eax
 11859      000000
1956:src/vm3.c     **** 
 11860              		.loc 1 1956 0
 11861 30a9 0FB6D2   		movzbl	%dl, %edx
1958:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11862              		.loc 1 1958 0
 11863 30ac 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11863      000000
1956:src/vm3.c     **** 
 11864              		.loc 1 1956 0
 11865 30b3 48C1E204 		salq	$4, %rdx
 11866              	.LVL509:
1958:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11867              		.loc 1 1958 0
 11868 30b7 C1E008   		sall	$8, %eax
 11869 30ba 09CB     		orl	%ecx, %ebx
 11870 30bc 09C3     		orl	%eax, %ebx
 11871              	.LVL510:
1959:src/vm3.c     ****   if (op1 == 0x0) {
 11872              		.loc 1 1959 0
 11873 30be 89D9     		movl	%ebx, %ecx
1961:src/vm3.c     ****     op1 = op1 + funct;
 11874              		.loc 1 1961 0
 11875 30c0 88D8     		movb	%bl, %al
1959:src/vm3.c     ****   if (op1 == 0x0) {
 11876              		.loc 1 1959 0
 11877 30c2 C1E91A   		shrl	$26, %ecx
 11878              	.LVL511:
1961:src/vm3.c     ****     op1 = op1 + funct;
 11879              		.loc 1 1961 0
 11880 30c5 83E03F   		andl	$63, %eax
 11881 30c8 8D712B   		leal	43(%rcx), %esi
 11882 30cb 84C9     		testb	%cl, %cl
 11883 30cd 0F45C6   		cmovne	%esi, %eax
 11884              	.LVL512:
1968:src/vm3.c     **** 
 11885              		.loc 1 1968 0
GAS LISTING /tmp/cc15eBE3.s 			page 561


 11886 30d0 0FB6C0   		movzbl	%al, %eax
 11887 30d3 48C1E004 		salq	$4, %rax
 11888              	.LVL513:
 11889 30d7 48038414 		addq	58088(%rsp,%rdx), %rax
 11889      E8E20000 
 11890 30df 488B08   		movq	(%rax), %rcx
 11891 30e2 E971DCFF 		jmp	.L269
 11891      FF
 11892              	.LVL514:
 11893              	.L253:
1976:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11894              		.loc 1 1976 0
 11895 30e7 4489C2   		movl	%r8d, %edx
1977:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11896              		.loc 1 1977 0
 11897 30ea 4489C0   		movl	%r8d, %eax
1979:src/vm3.c     **** PC  =  nPC;
 11898              		.loc 1 1979 0
 11899 30ed 450FBFC0 		movswl	%r8w, %r8d
 11900              	.LVL515:
1976:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 11901              		.loc 1 1976 0
 11902 30f1 C1EA15   		shrl	$21, %edx
1977:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 11903              		.loc 1 1977 0
 11904 30f4 C1E810   		shrl	$16, %eax
 11905              	.LVL516:
1979:src/vm3.c     **** PC  =  nPC;
 11906              		.loc 1 1979 0
 11907 30f7 83E21F   		andl	$31, %edx
 11908 30fa 83E01F   		andl	$31, %eax
 11909 30fd 44390495 		cmpl	%r8d, RF(,%rdx,4)
 11909      00000000 
 11910 3105 0F92C2   		setb	%dl
 11911 3108 0FB6D2   		movzbl	%dl, %edx
 11912 310b 89148500 		movl	%edx, RF(,%rax,4)
 11912      000000
1980:src/vm3.c     **** nPC  += 4;
 11913              		.loc 1 1980 0
 11914 3112 8B050000 		movl	nPC(%rip), %eax
 11914      0000
1982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11915              		.loc 1 1982 0
 11916 3118 8D5003   		leal	3(%rax), %edx
1981:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11917              		.loc 1 1981 0
 11918 311b 8D4804   		leal	4(%rax), %ecx
1980:src/vm3.c     **** nPC  += 4;
 11919              		.loc 1 1980 0
 11920 311e 89050000 		movl	%eax, PC(%rip)
 11920      0000
1982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11921              		.loc 1 1982 0
 11922 3124 440FB682 		movzbl	VM_memory(%rdx), %r8d
 11922      00000000 
 11923              	.LVL517:
 11924 312c 89C2     		movl	%eax, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 562


1995:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11925              		.loc 1 1995 0
 11926 312e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 11926      000000
 11927              	.LVL518:
1982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11928              		.loc 1 1982 0
 11929 3135 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11929      000000
1981:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 11930              		.loc 1 1981 0
 11931 313c 890D0000 		movl	%ecx, nPC(%rip)
 11931      0000
1995:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11932              		.loc 1 1995 0
 11933 3142 8D4805   		leal	5(%rax), %ecx
 11934 3145 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11934      000000
1982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 11935              		.loc 1 1982 0
 11936 314c C1E218   		sall	$24, %edx
 11937 314f 4109D0   		orl	%edx, %r8d
 11938 3152 8D5001   		leal	1(%rax), %edx
 11939 3155 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11939      000000
 11940 315c C1E210   		sall	$16, %edx
 11941 315f 4109D0   		orl	%edx, %r8d
 11942 3162 8D5002   		leal	2(%rax), %edx
 11943 3165 0FB69200 		movzbl	VM_memory(%rdx), %edx
 11943      000000
 11944 316c C1E208   		sall	$8, %edx
 11945 316f 4109D0   		orl	%edx, %r8d
 11946              	.LVL519:
1983:src/vm3.c     ****   if (op0 == 0x0) {
 11947              		.loc 1 1983 0
 11948 3172 4489C6   		movl	%r8d, %esi
1985:src/vm3.c     ****     op0 = op0 + funct;
 11949              		.loc 1 1985 0
 11950 3175 4488C2   		movb	%r8b, %dl
1983:src/vm3.c     ****   if (op0 == 0x0) {
 11951              		.loc 1 1983 0
 11952 3178 C1EE1A   		shrl	$26, %esi
 11953              	.LVL520:
1985:src/vm3.c     ****     op0 = op0 + funct;
 11954              		.loc 1 1985 0
 11955 317b 83E23F   		andl	$63, %edx
 11956 317e 8D7E2B   		leal	43(%rsi), %edi
 11957 3181 4084F6   		testb	%sil, %sil
 11958 3184 0F45D7   		cmovne	%edi, %edx
 11959              	.LVL521:
1995:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11960              		.loc 1 1995 0
 11961 3187 C1E110   		sall	$16, %ecx
 11962 318a C1E318   		sall	$24, %ebx
 11963 318d 09CB     		orl	%ecx, %ebx
 11964 318f 8D4807   		leal	7(%rax), %ecx
 11965 3192 83C006   		addl	$6, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 563


 11966 3195 0FB68000 		movzbl	VM_memory(%rax), %eax
 11966      000000
1993:src/vm3.c     **** 
 11967              		.loc 1 1993 0
 11968 319c 0FB6D2   		movzbl	%dl, %edx
1995:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11969              		.loc 1 1995 0
 11970 319f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 11970      000000
1993:src/vm3.c     **** 
 11971              		.loc 1 1993 0
 11972 31a6 48C1E204 		salq	$4, %rdx
 11973              	.LVL522:
1995:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 11974              		.loc 1 1995 0
 11975 31aa C1E008   		sall	$8, %eax
 11976 31ad 09CB     		orl	%ecx, %ebx
 11977 31af 09C3     		orl	%eax, %ebx
 11978              	.LVL523:
1996:src/vm3.c     ****   if (op1 == 0x0) {
 11979              		.loc 1 1996 0
 11980 31b1 89D9     		movl	%ebx, %ecx
1998:src/vm3.c     ****     op1 = op1 + funct;
 11981              		.loc 1 1998 0
 11982 31b3 88D8     		movb	%bl, %al
1996:src/vm3.c     ****   if (op1 == 0x0) {
 11983              		.loc 1 1996 0
 11984 31b5 C1E91A   		shrl	$26, %ecx
 11985              	.LVL524:
1998:src/vm3.c     ****     op1 = op1 + funct;
 11986              		.loc 1 1998 0
 11987 31b8 83E03F   		andl	$63, %eax
 11988 31bb 8D712B   		leal	43(%rcx), %esi
 11989 31be 84C9     		testb	%cl, %cl
 11990 31c0 0F45C6   		cmovne	%esi, %eax
 11991              	.LVL525:
2005:src/vm3.c     **** 
 11992              		.loc 1 2005 0
 11993 31c3 0FB6C0   		movzbl	%al, %eax
 11994 31c6 48C1E004 		salq	$4, %rax
 11995              	.LVL526:
 11996 31ca 48038414 		addq	58088(%rsp,%rdx), %rax
 11996      E8E20000 
 11997 31d2 488B08   		movq	(%rax), %rcx
 11998 31d5 E97EDBFF 		jmp	.L269
 11998      FF
 11999              	.LVL527:
 12000              	.L251:
2009:src/vm3.c     **** if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
 12001              		.loc 1 2009 0
 12002 31da 4489C0   		movl	%r8d, %eax
 12003 31dd 8B0D0000 		movl	nPC(%rip), %ecx
 12003      0000
 12004 31e3 C1E810   		shrl	$16, %eax
2010:src/vm3.c     **** {
 12005              		.loc 1 2010 0
 12006 31e6 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 564


 12007 31e9 8B048500 		movl	RF(,%rax,4), %eax
 12007      000000
 12008 31f0 83F801   		cmpl	$1, %eax
 12009 31f3 0F85DF00 		jne	.L432
 12009      0000
 12010              	.LVL528:
2016:src/vm3.c     ****   if ((int32_t)RF[rs] >= 0)
 12011              		.loc 1 2016 0
 12012 31f9 4489C0   		movl	%r8d, %eax
2020:src/vm3.c     ****     nPC  += (immediate << 2);
 12013              		.loc 1 2020 0
 12014 31fc 890D0000 		movl	%ecx, PC(%rip)
 12014      0000
2016:src/vm3.c     ****   if ((int32_t)RF[rs] >= 0)
 12015              		.loc 1 2016 0
 12016 3202 C1E815   		shrl	$21, %eax
2017:src/vm3.c     ****   {
 12017              		.loc 1 2017 0
 12018 3205 83E01F   		andl	$31, %eax
 12019 3208 833C8500 		cmpl	$0, RF(,%rax,4)
 12019      00000000 
 12020 3210 0F889D03 		js	.L1554
 12020      0000
 12021              	.LVL529:
2022:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12022              		.loc 1 2022 0
 12023 3216 8D5103   		leal	3(%rcx), %edx
2021:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12024              		.loc 1 2021 0
 12025 3219 450FBFC0 		movswl	%r8w, %r8d
 12026              	.LVL530:
 12027 321d 428D0481 		leal	(%rcx,%r8,4), %eax
2022:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12028              		.loc 1 2022 0
 12029 3221 440FB682 		movzbl	VM_memory(%rdx), %r8d
 12029      00000000 
 12030              	.LVL531:
 12031 3229 89CA     		movl	%ecx, %edx
 12032 322b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12032      000000
2021:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12033              		.loc 1 2021 0
 12034 3232 89050000 		movl	%eax, nPC(%rip)
 12034      0000
2022:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12035              		.loc 1 2022 0
 12036 3238 C1E218   		sall	$24, %edx
 12037 323b 4109D0   		orl	%edx, %r8d
 12038 323e 8D5101   		leal	1(%rcx), %edx
 12039 3241 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12039      000000
 12040 3248 C1E210   		sall	$16, %edx
 12041 324b 4109D0   		orl	%edx, %r8d
 12042 324e 8D5102   		leal	2(%rcx), %edx
 12043 3251 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12043      000000
 12044 3258 C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 565


 12045 325b 4109D0   		orl	%edx, %r8d
 12046              	.LVL532:
2023:src/vm3.c     ****   if (op0 == 0x0) {
 12047              		.loc 1 2023 0
 12048 325e 4489C1   		movl	%r8d, %ecx
2025:src/vm3.c     ****     op0 = op0 + funct;
 12049              		.loc 1 2025 0
 12050 3261 4488C2   		movb	%r8b, %dl
2023:src/vm3.c     ****   if (op0 == 0x0) {
 12051              		.loc 1 2023 0
 12052 3264 C1E91A   		shrl	$26, %ecx
 12053              	.LVL533:
2025:src/vm3.c     ****     op0 = op0 + funct;
 12054              		.loc 1 2025 0
 12055 3267 83E23F   		andl	$63, %edx
 12056 326a 8D712B   		leal	43(%rcx), %esi
 12057 326d 84C9     		testb	%cl, %cl
2035:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12058              		.loc 1 2035 0
 12059 326f 8D4803   		leal	3(%rax), %ecx
 12060              	.LVL534:
 12061 3272 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12061      000000
 12062              	.LVL535:
 12063 3279 89C1     		movl	%eax, %ecx
2025:src/vm3.c     ****     op0 = op0 + funct;
 12064              		.loc 1 2025 0
 12065 327b 0F45D6   		cmovne	%esi, %edx
 12066              	.LVL536:
2035:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12067              		.loc 1 2035 0
 12068 327e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12068      000000
2033:src/vm3.c     **** 
 12069              		.loc 1 2033 0
 12070 3285 0FB6D2   		movzbl	%dl, %edx
 12071 3288 48C1E204 		salq	$4, %rdx
 12072              	.LVL537:
2035:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12073              		.loc 1 2035 0
 12074 328c C1E118   		sall	$24, %ecx
 12075 328f 09CB     		orl	%ecx, %ebx
 12076 3291 8D4801   		leal	1(%rax), %ecx
 12077 3294 83C002   		addl	$2, %eax
 12078 3297 0FB68000 		movzbl	VM_memory(%rax), %eax
 12078      000000
 12079 329e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12079      000000
 12080 32a5 C1E008   		sall	$8, %eax
 12081 32a8 C1E110   		sall	$16, %ecx
 12082 32ab 09CB     		orl	%ecx, %ebx
 12083 32ad 09C3     		orl	%eax, %ebx
 12084              	.LVL538:
2036:src/vm3.c     ****   if (op1 == 0x0) {
 12085              		.loc 1 2036 0
 12086 32af 89D9     		movl	%ebx, %ecx
2038:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 566


 12087              		.loc 1 2038 0
 12088 32b1 88D8     		movb	%bl, %al
2036:src/vm3.c     ****   if (op1 == 0x0) {
 12089              		.loc 1 2036 0
 12090 32b3 C1E91A   		shrl	$26, %ecx
 12091              	.LVL539:
2038:src/vm3.c     ****     op1 = op1 + funct;
 12092              		.loc 1 2038 0
 12093 32b6 83E03F   		andl	$63, %eax
 12094 32b9 8D712B   		leal	43(%rcx), %esi
 12095 32bc 84C9     		testb	%cl, %cl
 12096 32be 0F45C6   		cmovne	%esi, %eax
 12097              	.LVL540:
2045:src/vm3.c     **** 
 12098              		.loc 1 2045 0
 12099 32c1 0FB6C0   		movzbl	%al, %eax
 12100 32c4 48C1E004 		salq	$4, %rax
 12101              	.LVL541:
 12102 32c8 48038414 		addq	58088(%rsp,%rdx), %rax
 12102      E8E20000 
 12103 32d0 488B08   		movq	(%rax), %rcx
 12104 32d3 E980DAFF 		jmp	.L269
 12104      FF
 12105              	.LVL542:
 12106              	.L432:
2055:src/vm3.c     **** {
 12107              		.loc 1 2055 0
 12108 32d8 83F811   		cmpl	$17, %eax
 12109 32db 0F85EE00 		jne	.L439
 12109      0000
 12110              	.LVL543:
2061:src/vm3.c     ****   if ((int32_t)RF[rs] >= 0)
 12111              		.loc 1 2061 0
 12112 32e1 4489C0   		movl	%r8d, %eax
 12113 32e4 C1E815   		shrl	$21, %eax
2062:src/vm3.c     ****   {
 12114              		.loc 1 2062 0
 12115 32e7 83E01F   		andl	$31, %eax
 12116 32ea 833C8500 		cmpl	$0, RF(,%rax,4)
 12116      00000000 
 12117 32f2 0F88B502 		js	.L451
 12117      0000
2064:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
 12118              		.loc 1 2064 0
 12119 32f8 8B050000 		movl	PC(%rip), %eax
 12119      0000
2068:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12120              		.loc 1 2068 0
 12121 32fe 8D5103   		leal	3(%rcx), %edx
2067:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12122              		.loc 1 2067 0
 12123 3301 450FBFC0 		movswl	%r8w, %r8d
 12124              	.LVL544:
2066:src/vm3.c     ****     nPC  += (immediate << 2);
 12125              		.loc 1 2066 0
 12126 3305 890D0000 		movl	%ecx, PC(%rip)
 12126      0000
GAS LISTING /tmp/cc15eBE3.s 			page 567


2064:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
 12127              		.loc 1 2064 0
 12128 330b 83C008   		addl	$8, %eax
 12129 330e 89050000 		movl	%eax, RF+124(%rip)
 12129      0000
2067:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12130              		.loc 1 2067 0
 12131 3314 428D0481 		leal	(%rcx,%r8,4), %eax
2068:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12132              		.loc 1 2068 0
 12133 3318 440FB682 		movzbl	VM_memory(%rdx), %r8d
 12133      00000000 
 12134 3320 89CA     		movl	%ecx, %edx
 12135 3322 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12135      000000
2067:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12136              		.loc 1 2067 0
 12137 3329 89050000 		movl	%eax, nPC(%rip)
 12137      0000
2068:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12138              		.loc 1 2068 0
 12139 332f C1E218   		sall	$24, %edx
 12140 3332 4109D0   		orl	%edx, %r8d
 12141 3335 8D5101   		leal	1(%rcx), %edx
 12142 3338 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12142      000000
 12143 333f C1E210   		sall	$16, %edx
 12144 3342 4109D0   		orl	%edx, %r8d
 12145 3345 8D5102   		leal	2(%rcx), %edx
 12146 3348 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12146      000000
 12147 334f C1E208   		sall	$8, %edx
 12148 3352 4109D0   		orl	%edx, %r8d
 12149              	.LVL545:
2069:src/vm3.c     ****   if (op0 == 0x0) {
 12150              		.loc 1 2069 0
 12151 3355 4489C1   		movl	%r8d, %ecx
2071:src/vm3.c     ****     op0 = op0 + funct;
 12152              		.loc 1 2071 0
 12153 3358 4488C2   		movb	%r8b, %dl
2069:src/vm3.c     ****   if (op0 == 0x0) {
 12154              		.loc 1 2069 0
 12155 335b C1E91A   		shrl	$26, %ecx
 12156              	.LVL546:
2071:src/vm3.c     ****     op0 = op0 + funct;
 12157              		.loc 1 2071 0
 12158 335e 83E23F   		andl	$63, %edx
 12159 3361 8D712B   		leal	43(%rcx), %esi
 12160 3364 84C9     		testb	%cl, %cl
2081:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12161              		.loc 1 2081 0
 12162 3366 8D4803   		leal	3(%rax), %ecx
 12163              	.LVL547:
 12164 3369 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12164      000000
 12165              	.LVL548:
 12166 3370 89C1     		movl	%eax, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 568


2071:src/vm3.c     ****     op0 = op0 + funct;
 12167              		.loc 1 2071 0
 12168 3372 0F45D6   		cmovne	%esi, %edx
 12169              	.LVL549:
2081:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12170              		.loc 1 2081 0
 12171 3375 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12171      000000
2079:src/vm3.c     **** 
 12172              		.loc 1 2079 0
 12173 337c 0FB6D2   		movzbl	%dl, %edx
 12174 337f 48C1E204 		salq	$4, %rdx
 12175              	.LVL550:
2081:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12176              		.loc 1 2081 0
 12177 3383 C1E118   		sall	$24, %ecx
 12178 3386 09CB     		orl	%ecx, %ebx
 12179 3388 8D4801   		leal	1(%rax), %ecx
 12180 338b 83C002   		addl	$2, %eax
 12181 338e 0FB68000 		movzbl	VM_memory(%rax), %eax
 12181      000000
 12182 3395 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12182      000000
 12183 339c C1E008   		sall	$8, %eax
 12184 339f C1E110   		sall	$16, %ecx
 12185 33a2 09CB     		orl	%ecx, %ebx
 12186 33a4 09C3     		orl	%eax, %ebx
 12187              	.LVL551:
2082:src/vm3.c     ****   if (op1 == 0x0) {
 12188              		.loc 1 2082 0
 12189 33a6 89D9     		movl	%ebx, %ecx
2084:src/vm3.c     ****     op1 = op1 + funct;
 12190              		.loc 1 2084 0
 12191 33a8 88D8     		movb	%bl, %al
2082:src/vm3.c     ****   if (op1 == 0x0) {
 12192              		.loc 1 2082 0
 12193 33aa C1E91A   		shrl	$26, %ecx
 12194              	.LVL552:
2084:src/vm3.c     ****     op1 = op1 + funct;
 12195              		.loc 1 2084 0
 12196 33ad 83E03F   		andl	$63, %eax
 12197 33b0 8D712B   		leal	43(%rcx), %esi
 12198 33b3 84C9     		testb	%cl, %cl
 12199 33b5 0F45C6   		cmovne	%esi, %eax
 12200              	.LVL553:
2091:src/vm3.c     **** 
 12201              		.loc 1 2091 0
 12202 33b8 0FB6C0   		movzbl	%al, %eax
 12203 33bb 48C1E004 		salq	$4, %rax
 12204              	.LVL554:
 12205 33bf 48038414 		addq	58088(%rsp,%rdx), %rax
 12205      E8E20000 
 12206 33c7 488B08   		movq	(%rax), %rcx
 12207 33ca E989D9FF 		jmp	.L269
 12207      FF
 12208              	.LVL555:
 12209              	.L439:
GAS LISTING /tmp/cc15eBE3.s 			page 569


2101:src/vm3.c     **** {
 12210              		.loc 1 2101 0
 12211 33cf 85C0     		testl	%eax, %eax
 12212 33d1 0F85DF00 		jne	.L445
 12212      0000
 12213              	.LVL556:
2107:src/vm3.c     ****   if ((int32_t)RF[rs] < 0)
 12214              		.loc 1 2107 0
 12215 33d7 4489C0   		movl	%r8d, %eax
2111:src/vm3.c     ****     nPC  += (immediate << 2);
 12216              		.loc 1 2111 0
 12217 33da 890D0000 		movl	%ecx, PC(%rip)
 12217      0000
2107:src/vm3.c     ****   if ((int32_t)RF[rs] < 0)
 12218              		.loc 1 2107 0
 12219 33e0 C1E815   		shrl	$21, %eax
2108:src/vm3.c     ****   {
 12220              		.loc 1 2108 0
 12221 33e3 83E01F   		andl	$31, %eax
 12222 33e6 833C8500 		cmpl	$0, RF(,%rax,4)
 12222      00000000 
 12223 33ee 0F89BF01 		jns	.L1554
 12223      0000
 12224              	.LVL557:
2113:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12225              		.loc 1 2113 0
 12226 33f4 8D5103   		leal	3(%rcx), %edx
2112:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12227              		.loc 1 2112 0
 12228 33f7 450FBFC0 		movswl	%r8w, %r8d
 12229              	.LVL558:
 12230 33fb 428D0481 		leal	(%rcx,%r8,4), %eax
2113:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12231              		.loc 1 2113 0
 12232 33ff 440FB682 		movzbl	VM_memory(%rdx), %r8d
 12232      00000000 
 12233              	.LVL559:
 12234 3407 89CA     		movl	%ecx, %edx
 12235 3409 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12235      000000
2112:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12236              		.loc 1 2112 0
 12237 3410 89050000 		movl	%eax, nPC(%rip)
 12237      0000
2113:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12238              		.loc 1 2113 0
 12239 3416 C1E218   		sall	$24, %edx
 12240 3419 4109D0   		orl	%edx, %r8d
 12241 341c 8D5101   		leal	1(%rcx), %edx
 12242 341f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12242      000000
 12243 3426 C1E210   		sall	$16, %edx
 12244 3429 4109D0   		orl	%edx, %r8d
 12245 342c 8D5102   		leal	2(%rcx), %edx
 12246 342f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12246      000000
 12247 3436 C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 570


 12248 3439 4109D0   		orl	%edx, %r8d
 12249              	.LVL560:
2114:src/vm3.c     ****   if (op0 == 0x0) {
 12250              		.loc 1 2114 0
 12251 343c 4489C1   		movl	%r8d, %ecx
2116:src/vm3.c     ****     op0 = op0 + funct;
 12252              		.loc 1 2116 0
 12253 343f 4488C2   		movb	%r8b, %dl
2114:src/vm3.c     ****   if (op0 == 0x0) {
 12254              		.loc 1 2114 0
 12255 3442 C1E91A   		shrl	$26, %ecx
 12256              	.LVL561:
2116:src/vm3.c     ****     op0 = op0 + funct;
 12257              		.loc 1 2116 0
 12258 3445 83E23F   		andl	$63, %edx
 12259 3448 8D712B   		leal	43(%rcx), %esi
 12260 344b 84C9     		testb	%cl, %cl
2126:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12261              		.loc 1 2126 0
 12262 344d 8D4803   		leal	3(%rax), %ecx
 12263              	.LVL562:
 12264 3450 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12264      000000
 12265              	.LVL563:
 12266 3457 89C1     		movl	%eax, %ecx
2116:src/vm3.c     ****     op0 = op0 + funct;
 12267              		.loc 1 2116 0
 12268 3459 0F45D6   		cmovne	%esi, %edx
 12269              	.LVL564:
2126:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12270              		.loc 1 2126 0
 12271 345c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12271      000000
2124:src/vm3.c     **** 
 12272              		.loc 1 2124 0
 12273 3463 0FB6D2   		movzbl	%dl, %edx
 12274 3466 48C1E204 		salq	$4, %rdx
 12275              	.LVL565:
2126:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12276              		.loc 1 2126 0
 12277 346a C1E118   		sall	$24, %ecx
 12278 346d 09CB     		orl	%ecx, %ebx
 12279 346f 8D4801   		leal	1(%rax), %ecx
 12280 3472 83C002   		addl	$2, %eax
 12281 3475 0FB68000 		movzbl	VM_memory(%rax), %eax
 12281      000000
 12282 347c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12282      000000
 12283 3483 C1E008   		sall	$8, %eax
 12284 3486 C1E110   		sall	$16, %ecx
 12285 3489 09CB     		orl	%ecx, %ebx
 12286 348b 09C3     		orl	%eax, %ebx
 12287              	.LVL566:
2127:src/vm3.c     ****   if (op1 == 0x0) {
 12288              		.loc 1 2127 0
 12289 348d 89D9     		movl	%ebx, %ecx
2129:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 571


 12290              		.loc 1 2129 0
 12291 348f 88D8     		movb	%bl, %al
2127:src/vm3.c     ****   if (op1 == 0x0) {
 12292              		.loc 1 2127 0
 12293 3491 C1E91A   		shrl	$26, %ecx
 12294              	.LVL567:
2129:src/vm3.c     ****     op1 = op1 + funct;
 12295              		.loc 1 2129 0
 12296 3494 83E03F   		andl	$63, %eax
 12297 3497 8D712B   		leal	43(%rcx), %esi
 12298 349a 84C9     		testb	%cl, %cl
 12299 349c 0F45C6   		cmovne	%esi, %eax
 12300              	.LVL568:
2136:src/vm3.c     **** 
 12301              		.loc 1 2136 0
 12302 349f 0FB6C0   		movzbl	%al, %eax
 12303 34a2 48C1E004 		salq	$4, %rax
 12304              	.LVL569:
 12305 34a6 48038414 		addq	58088(%rsp,%rdx), %rax
 12305      E8E20000 
 12306 34ae 488B08   		movq	(%rax), %rcx
 12307 34b1 E9A2D8FF 		jmp	.L269
 12307      FF
 12308              	.LVL570:
 12309              	.L445:
2146:src/vm3.c     **** {
 12310              		.loc 1 2146 0
 12311 34b6 83F810   		cmpl	$16, %eax
 12312 34b9 0F85FB00 		jne	.L438
 12312      0000
 12313              	.LVL571:
2152:src/vm3.c     ****   if ((int32_t)RF[rs] < 0)
 12314              		.loc 1 2152 0
 12315 34bf 4489C0   		movl	%r8d, %eax
 12316 34c2 C1E815   		shrl	$21, %eax
2153:src/vm3.c     ****   {
 12317              		.loc 1 2153 0
 12318 34c5 83E01F   		andl	$31, %eax
 12319 34c8 833C8500 		cmpl	$0, RF(,%rax,4)
 12319      00000000 
 12320 34d0 0F89D700 		jns	.L451
 12320      0000
2155:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
 12321              		.loc 1 2155 0
 12322 34d6 8B050000 		movl	PC(%rip), %eax
 12322      0000
2159:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12323              		.loc 1 2159 0
 12324 34dc 8D5103   		leal	3(%rcx), %edx
2158:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12325              		.loc 1 2158 0
 12326 34df 450FBFC0 		movswl	%r8w, %r8d
 12327              	.LVL572:
2157:src/vm3.c     ****     nPC  += (immediate << 2);
 12328              		.loc 1 2157 0
 12329 34e3 890D0000 		movl	%ecx, PC(%rip)
 12329      0000
GAS LISTING /tmp/cc15eBE3.s 			page 572


2155:src/vm3.c     ****     immediate = (instr0 >> 0) & 0xFFFF;
 12330              		.loc 1 2155 0
 12331 34e9 83C008   		addl	$8, %eax
 12332 34ec 89050000 		movl	%eax, RF+124(%rip)
 12332      0000
2158:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12333              		.loc 1 2158 0
 12334 34f2 428D0481 		leal	(%rcx,%r8,4), %eax
2159:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12335              		.loc 1 2159 0
 12336 34f6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 12336      00000000 
 12337 34fe 89CA     		movl	%ecx, %edx
 12338 3500 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12338      000000
2158:src/vm3.c     ****       instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_m
 12339              		.loc 1 2158 0
 12340 3507 89050000 		movl	%eax, nPC(%rip)
 12340      0000
2159:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12341              		.loc 1 2159 0
 12342 350d C1E218   		sall	$24, %edx
 12343 3510 4109D0   		orl	%edx, %r8d
 12344 3513 8D5101   		leal	1(%rcx), %edx
 12345 3516 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12345      000000
 12346 351d C1E210   		sall	$16, %edx
 12347 3520 4109D0   		orl	%edx, %r8d
 12348 3523 8D5102   		leal	2(%rcx), %edx
 12349 3526 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12349      000000
 12350 352d C1E208   		sall	$8, %edx
 12351 3530 4109D0   		orl	%edx, %r8d
 12352              	.LVL573:
2160:src/vm3.c     ****   if (op0 == 0x0) {
 12353              		.loc 1 2160 0
 12354 3533 4489C1   		movl	%r8d, %ecx
2162:src/vm3.c     ****     op0 = op0 + funct;
 12355              		.loc 1 2162 0
 12356 3536 4488C2   		movb	%r8b, %dl
2160:src/vm3.c     ****   if (op0 == 0x0) {
 12357              		.loc 1 2160 0
 12358 3539 C1E91A   		shrl	$26, %ecx
 12359              	.LVL574:
2162:src/vm3.c     ****     op0 = op0 + funct;
 12360              		.loc 1 2162 0
 12361 353c 83E23F   		andl	$63, %edx
 12362 353f 8D712B   		leal	43(%rcx), %esi
 12363 3542 84C9     		testb	%cl, %cl
2172:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12364              		.loc 1 2172 0
 12365 3544 8D4803   		leal	3(%rax), %ecx
 12366              	.LVL575:
 12367 3547 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12367      000000
 12368              	.LVL576:
 12369 354e 89C1     		movl	%eax, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 573


2162:src/vm3.c     ****     op0 = op0 + funct;
 12370              		.loc 1 2162 0
 12371 3550 0F45D6   		cmovne	%esi, %edx
 12372              	.LVL577:
2172:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12373              		.loc 1 2172 0
 12374 3553 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12374      000000
2170:src/vm3.c     **** 
 12375              		.loc 1 2170 0
 12376 355a 0FB6D2   		movzbl	%dl, %edx
 12377 355d 48C1E204 		salq	$4, %rdx
 12378              	.LVL578:
2172:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12379              		.loc 1 2172 0
 12380 3561 C1E118   		sall	$24, %ecx
 12381 3564 09CB     		orl	%ecx, %ebx
 12382 3566 8D4801   		leal	1(%rax), %ecx
 12383 3569 83C002   		addl	$2, %eax
 12384 356c 0FB68000 		movzbl	VM_memory(%rax), %eax
 12384      000000
 12385 3573 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12385      000000
 12386 357a C1E008   		sall	$8, %eax
 12387 357d C1E110   		sall	$16, %ecx
 12388 3580 09CB     		orl	%ecx, %ebx
 12389 3582 09C3     		orl	%eax, %ebx
 12390              	.LVL579:
2173:src/vm3.c     ****   if (op1 == 0x0) {
 12391              		.loc 1 2173 0
 12392 3584 89D9     		movl	%ebx, %ecx
2175:src/vm3.c     ****     op1 = op1 + funct;
 12393              		.loc 1 2175 0
 12394 3586 88D8     		movb	%bl, %al
2173:src/vm3.c     ****   if (op1 == 0x0) {
 12395              		.loc 1 2173 0
 12396 3588 C1E91A   		shrl	$26, %ecx
 12397              	.LVL580:
2175:src/vm3.c     ****     op1 = op1 + funct;
 12398              		.loc 1 2175 0
 12399 358b 83E03F   		andl	$63, %eax
 12400 358e 8D712B   		leal	43(%rcx), %esi
 12401 3591 84C9     		testb	%cl, %cl
 12402 3593 0F45C6   		cmovne	%esi, %eax
 12403              	.LVL581:
2182:src/vm3.c     **** 
 12404              		.loc 1 2182 0
 12405 3596 0FB6C0   		movzbl	%al, %eax
 12406 3599 48C1E004 		salq	$4, %rax
 12407              	.LVL582:
 12408 359d 48038414 		addq	58088(%rsp,%rdx), %rax
 12408      E8E20000 
 12409 35a5 488B08   		movq	(%rax), %rcx
 12410 35a8 E9ABD7FF 		jmp	.L269
 12410      FF
 12411              	.LVL583:
 12412              	.L451:
GAS LISTING /tmp/cc15eBE3.s 			page 574


2188:src/vm3.c     ****     nPC  += 4;
 12413              		.loc 1 2188 0
 12414 35ad 890D0000 		movl	%ecx, PC(%rip)
 12414      0000
 12415              	.L1554:
2189:src/vm3.c     ****   }
 12416              		.loc 1 2189 0
 12417 35b3 83050000 		addl	$4, nPC(%rip)
 12417      000004
 12418              	.L438:
2192:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12419              		.loc 1 2192 0
 12420 35ba 8B050000 		movl	PC(%rip), %eax
 12420      0000
 12421 35c0 8D5003   		leal	3(%rax), %edx
 12422 35c3 440FB682 		movzbl	VM_memory(%rdx), %r8d
 12422      00000000 
 12423              	.LVL584:
 12424 35cb 89C2     		movl	%eax, %edx
 12425 35cd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12425      000000
 12426 35d4 C1E218   		sall	$24, %edx
 12427 35d7 4109D0   		orl	%edx, %r8d
 12428 35da 8D5001   		leal	1(%rax), %edx
 12429 35dd 83C002   		addl	$2, %eax
 12430 35e0 0FB68000 		movzbl	VM_memory(%rax), %eax
 12430      000000
 12431 35e7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12431      000000
 12432 35ee C1E008   		sall	$8, %eax
 12433 35f1 C1E210   		sall	$16, %edx
 12434 35f4 4109D0   		orl	%edx, %r8d
 12435 35f7 4109C0   		orl	%eax, %r8d
 12436              	.LVL585:
2193:src/vm3.c     ****   if (op0 == 0x0) {
 12437              		.loc 1 2193 0
 12438 35fa 4489C0   		movl	%r8d, %eax
2195:src/vm3.c     ****     op0 = op0 + funct;
 12439              		.loc 1 2195 0
 12440 35fd 4488C2   		movb	%r8b, %dl
2193:src/vm3.c     ****   if (op0 == 0x0) {
 12441              		.loc 1 2193 0
 12442 3600 C1E81A   		shrl	$26, %eax
 12443              	.LVL586:
2195:src/vm3.c     ****     op0 = op0 + funct;
 12444              		.loc 1 2195 0
 12445 3603 83E23F   		andl	$63, %edx
 12446 3606 8D482B   		leal	43(%rax), %ecx
 12447 3609 84C0     		testb	%al, %al
2205:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12448              		.loc 1 2205 0
 12449 360b 8B050000 		movl	nPC(%rip), %eax
 12449      0000
 12450              	.LVL587:
2195:src/vm3.c     ****     op0 = op0 + funct;
 12451              		.loc 1 2195 0
 12452 3611 0F45D1   		cmovne	%ecx, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 575


 12453              	.LVL588:
2205:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12454              		.loc 1 2205 0
 12455 3614 8D4803   		leal	3(%rax), %ecx
2203:src/vm3.c     **** 
 12456              		.loc 1 2203 0
 12457 3617 0FB6D2   		movzbl	%dl, %edx
 12458 361a 48C1E204 		salq	$4, %rdx
 12459              	.LVL589:
2205:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12460              		.loc 1 2205 0
 12461 361e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12461      000000
 12462              	.LVL590:
 12463 3625 89C1     		movl	%eax, %ecx
 12464 3627 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12464      000000
 12465 362e C1E118   		sall	$24, %ecx
 12466 3631 09CB     		orl	%ecx, %ebx
 12467 3633 8D4801   		leal	1(%rax), %ecx
 12468 3636 83C002   		addl	$2, %eax
 12469 3639 0FB68000 		movzbl	VM_memory(%rax), %eax
 12469      000000
 12470 3640 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12470      000000
 12471 3647 C1E008   		sall	$8, %eax
 12472 364a C1E110   		sall	$16, %ecx
 12473 364d 09CB     		orl	%ecx, %ebx
 12474 364f 09C3     		orl	%eax, %ebx
 12475              	.LVL591:
2206:src/vm3.c     ****   if (op1 == 0x0) {
 12476              		.loc 1 2206 0
 12477 3651 89D9     		movl	%ebx, %ecx
2208:src/vm3.c     ****     op1 = op1 + funct;
 12478              		.loc 1 2208 0
 12479 3653 88D8     		movb	%bl, %al
2206:src/vm3.c     ****   if (op1 == 0x0) {
 12480              		.loc 1 2206 0
 12481 3655 C1E91A   		shrl	$26, %ecx
 12482              	.LVL592:
2208:src/vm3.c     ****     op1 = op1 + funct;
 12483              		.loc 1 2208 0
 12484 3658 83E03F   		andl	$63, %eax
 12485 365b 8D712B   		leal	43(%rcx), %esi
 12486 365e 84C9     		testb	%cl, %cl
 12487 3660 0F45C6   		cmovne	%esi, %eax
 12488              	.LVL593:
2215:src/vm3.c     **** 
 12489              		.loc 1 2215 0
 12490 3663 0FB6C0   		movzbl	%al, %eax
 12491 3666 48C1E004 		salq	$4, %rax
 12492              	.LVL594:
 12493 366a 48038414 		addq	58088(%rsp,%rdx), %rax
 12493      E8E20000 
 12494 3672 488B08   		movq	(%rax), %rcx
 12495 3675 E9DED6FF 		jmp	.L269
 12495      FF
GAS LISTING /tmp/cc15eBE3.s 			page 576


 12496              	.LVL595:
 12497              	.L120:
2223:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 12498              		.loc 1 2223 0
 12499 367a 4489C2   		movl	%r8d, %edx
2224:src/vm3.c     **** if (RF[rs] == RF[rt])
 12500              		.loc 1 2224 0
 12501 367d 4489C0   		movl	%r8d, %eax
2223:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 12502              		.loc 1 2223 0
 12503 3680 C1EA15   		shrl	$21, %edx
2224:src/vm3.c     **** if (RF[rs] == RF[rt])
 12504              		.loc 1 2224 0
 12505 3683 C1E810   		shrl	$16, %eax
2225:src/vm3.c     **** {
 12506              		.loc 1 2225 0
 12507 3686 83E01F   		andl	$31, %eax
 12508 3689 83E21F   		andl	$31, %edx
 12509 368c 8B048500 		movl	RF(,%rax,4), %eax
 12509      000000
 12510 3693 39049500 		cmpl	%eax, RF(,%rdx,4)
 12510      000000
 12511 369a 8B050000 		movl	nPC(%rip), %eax
 12511      0000
2228:src/vm3.c     ****   nPC  += (immediate << 2);
 12512              		.loc 1 2228 0
 12513 36a0 89050000 		movl	%eax, PC(%rip)
 12513      0000
2225:src/vm3.c     **** {
 12514              		.loc 1 2225 0
 12515 36a6 0F85C200 		jne	.L460
 12515      0000
 12516              	.LVL596:
2230:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12517              		.loc 1 2230 0
 12518 36ac 8D4803   		leal	3(%rax), %ecx
2229:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 12519              		.loc 1 2229 0
 12520 36af 450FBFC0 		movswl	%r8w, %r8d
 12521              	.LVL597:
 12522 36b3 428D1480 		leal	(%rax,%r8,4), %edx
2230:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12523              		.loc 1 2230 0
 12524 36b7 440FB681 		movzbl	VM_memory(%rcx), %r8d
 12524      00000000 
 12525              	.LVL598:
 12526 36bf 89C1     		movl	%eax, %ecx
 12527 36c1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12527      000000
2229:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 12528              		.loc 1 2229 0
 12529 36c8 89150000 		movl	%edx, nPC(%rip)
 12529      0000
2230:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12530              		.loc 1 2230 0
 12531 36ce C1E118   		sall	$24, %ecx
 12532 36d1 4109C8   		orl	%ecx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 577


 12533 36d4 8D4801   		leal	1(%rax), %ecx
 12534 36d7 83C002   		addl	$2, %eax
 12535 36da 0FB68000 		movzbl	VM_memory(%rax), %eax
 12535      000000
 12536 36e1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12536      000000
 12537 36e8 C1E008   		sall	$8, %eax
 12538 36eb C1E110   		sall	$16, %ecx
 12539 36ee 4109C8   		orl	%ecx, %r8d
 12540 36f1 4109C0   		orl	%eax, %r8d
 12541              	.LVL599:
2231:src/vm3.c     ****   if (op0 == 0x0) {
 12542              		.loc 1 2231 0
 12543 36f4 4489C0   		movl	%r8d, %eax
2233:src/vm3.c     ****     op0 = op0 + funct;
 12544              		.loc 1 2233 0
 12545 36f7 4488C1   		movb	%r8b, %cl
2231:src/vm3.c     ****   if (op0 == 0x0) {
 12546              		.loc 1 2231 0
 12547 36fa C1E81A   		shrl	$26, %eax
 12548              	.LVL600:
2233:src/vm3.c     ****     op0 = op0 + funct;
 12549              		.loc 1 2233 0
 12550 36fd 83E13F   		andl	$63, %ecx
 12551 3700 8D702B   		leal	43(%rax), %esi
 12552 3703 84C0     		testb	%al, %al
2243:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12553              		.loc 1 2243 0
 12554 3705 8D4203   		leal	3(%rdx), %eax
 12555              	.LVL601:
 12556 3708 0FB69800 		movzbl	VM_memory(%rax), %ebx
 12556      000000
 12557              	.LVL602:
 12558 370f 89D0     		movl	%edx, %eax
2233:src/vm3.c     ****     op0 = op0 + funct;
 12559              		.loc 1 2233 0
 12560 3711 0F45CE   		cmovne	%esi, %ecx
 12561              	.LVL603:
2243:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12562              		.loc 1 2243 0
 12563 3714 0FB68000 		movzbl	VM_memory(%rax), %eax
 12563      000000
2241:src/vm3.c     **** 
 12564              		.loc 1 2241 0
 12565 371b 0FB6C9   		movzbl	%cl, %ecx
 12566 371e 48C1E104 		salq	$4, %rcx
 12567              	.LVL604:
2243:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12568              		.loc 1 2243 0
 12569 3722 C1E018   		sall	$24, %eax
 12570 3725 09C3     		orl	%eax, %ebx
 12571 3727 8D4201   		leal	1(%rdx), %eax
 12572 372a 0FB68000 		movzbl	VM_memory(%rax), %eax
 12572      000000
 12573 3731 C1E010   		sall	$16, %eax
 12574 3734 09C3     		orl	%eax, %ebx
 12575 3736 8D4202   		leal	2(%rdx), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 578


 12576 3739 0FB68000 		movzbl	VM_memory(%rax), %eax
 12576      000000
 12577 3740 C1E008   		sall	$8, %eax
 12578 3743 09C3     		orl	%eax, %ebx
 12579              	.LVL605:
2244:src/vm3.c     ****   if (op1 == 0x0) {
 12580              		.loc 1 2244 0
 12581 3745 89DA     		movl	%ebx, %edx
2246:src/vm3.c     ****     op1 = op1 + funct;
 12582              		.loc 1 2246 0
 12583 3747 88D8     		movb	%bl, %al
2244:src/vm3.c     ****   if (op1 == 0x0) {
 12584              		.loc 1 2244 0
 12585 3749 C1EA1A   		shrl	$26, %edx
 12586              	.LVL606:
2246:src/vm3.c     ****     op1 = op1 + funct;
 12587              		.loc 1 2246 0
 12588 374c 83E03F   		andl	$63, %eax
 12589 374f 8D722B   		leal	43(%rdx), %esi
 12590 3752 84D2     		testb	%dl, %dl
 12591 3754 0F45C6   		cmovne	%esi, %eax
 12592              	.LVL607:
2253:src/vm3.c     **** 
 12593              		.loc 1 2253 0
 12594 3757 0FB6C0   		movzbl	%al, %eax
 12595 375a 48C1E004 		salq	$4, %rax
 12596              	.LVL608:
 12597 375e 4803840C 		addq	58088(%rsp,%rcx), %rax
 12597      E8E20000 
 12598 3766 488B08   		movq	(%rax), %rcx
 12599              	.LVL609:
 12600 3769 E9EAD5FF 		jmp	.L269
 12600      FF
 12601              	.LVL610:
 12602              	.L460:
2262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12603              		.loc 1 2262 0
 12604 376e 8D5003   		leal	3(%rax), %edx
2260:src/vm3.c     **** }
 12605              		.loc 1 2260 0
 12606 3771 8D4804   		leal	4(%rax), %ecx
2262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12607              		.loc 1 2262 0
 12608 3774 440FB682 		movzbl	VM_memory(%rdx), %r8d
 12608      00000000 
 12609              	.LVL611:
 12610 377c 89C2     		movl	%eax, %edx
2275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12611              		.loc 1 2275 0
 12612 377e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12612      000000
 12613              	.LVL612:
2262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12614              		.loc 1 2262 0
 12615 3785 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12615      000000
2260:src/vm3.c     **** }
GAS LISTING /tmp/cc15eBE3.s 			page 579


 12616              		.loc 1 2260 0
 12617 378c 890D0000 		movl	%ecx, nPC(%rip)
 12617      0000
2275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12618              		.loc 1 2275 0
 12619 3792 8D4805   		leal	5(%rax), %ecx
 12620 3795 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12620      000000
2262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12621              		.loc 1 2262 0
 12622 379c C1E218   		sall	$24, %edx
 12623 379f 4109D0   		orl	%edx, %r8d
 12624 37a2 8D5001   		leal	1(%rax), %edx
 12625 37a5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12625      000000
 12626 37ac C1E210   		sall	$16, %edx
 12627 37af 4109D0   		orl	%edx, %r8d
 12628 37b2 8D5002   		leal	2(%rax), %edx
 12629 37b5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12629      000000
 12630 37bc C1E208   		sall	$8, %edx
 12631 37bf 4109D0   		orl	%edx, %r8d
 12632              	.LVL613:
2263:src/vm3.c     ****   if (op0 == 0x0) {
 12633              		.loc 1 2263 0
 12634 37c2 4489C6   		movl	%r8d, %esi
2265:src/vm3.c     ****     op0 = op0 + funct;
 12635              		.loc 1 2265 0
 12636 37c5 4488C2   		movb	%r8b, %dl
2263:src/vm3.c     ****   if (op0 == 0x0) {
 12637              		.loc 1 2263 0
 12638 37c8 C1EE1A   		shrl	$26, %esi
 12639              	.LVL614:
2265:src/vm3.c     ****     op0 = op0 + funct;
 12640              		.loc 1 2265 0
 12641 37cb 83E23F   		andl	$63, %edx
 12642 37ce 8D7E2B   		leal	43(%rsi), %edi
 12643 37d1 4084F6   		testb	%sil, %sil
 12644 37d4 0F45D7   		cmovne	%edi, %edx
 12645              	.LVL615:
2275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12646              		.loc 1 2275 0
 12647 37d7 C1E110   		sall	$16, %ecx
 12648 37da C1E318   		sall	$24, %ebx
 12649 37dd 09CB     		orl	%ecx, %ebx
 12650 37df 8D4807   		leal	7(%rax), %ecx
 12651 37e2 83C006   		addl	$6, %eax
 12652 37e5 0FB68000 		movzbl	VM_memory(%rax), %eax
 12652      000000
2273:src/vm3.c     **** 
 12653              		.loc 1 2273 0
 12654 37ec 0FB6D2   		movzbl	%dl, %edx
2275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12655              		.loc 1 2275 0
 12656 37ef 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12656      000000
2273:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 580


 12657              		.loc 1 2273 0
 12658 37f6 48C1E204 		salq	$4, %rdx
 12659              	.LVL616:
2275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12660              		.loc 1 2275 0
 12661 37fa C1E008   		sall	$8, %eax
 12662 37fd 09CB     		orl	%ecx, %ebx
 12663 37ff 09C3     		orl	%eax, %ebx
 12664              	.LVL617:
2276:src/vm3.c     ****   if (op1 == 0x0) {
 12665              		.loc 1 2276 0
 12666 3801 89D9     		movl	%ebx, %ecx
2278:src/vm3.c     ****     op1 = op1 + funct;
 12667              		.loc 1 2278 0
 12668 3803 88D8     		movb	%bl, %al
2276:src/vm3.c     ****   if (op1 == 0x0) {
 12669              		.loc 1 2276 0
 12670 3805 C1E91A   		shrl	$26, %ecx
 12671              	.LVL618:
2278:src/vm3.c     ****     op1 = op1 + funct;
 12672              		.loc 1 2278 0
 12673 3808 83E03F   		andl	$63, %eax
 12674 380b 8D712B   		leal	43(%rcx), %esi
 12675 380e 84C9     		testb	%cl, %cl
 12676 3810 0F45C6   		cmovne	%esi, %eax
 12677              	.LVL619:
2285:src/vm3.c     **** 
 12678              		.loc 1 2285 0
 12679 3813 0FB6C0   		movzbl	%al, %eax
 12680 3816 48C1E004 		salq	$4, %rax
 12681              	.LVL620:
 12682 381a 48038414 		addq	58088(%rsp,%rdx), %rax
 12682      E8E20000 
 12683 3822 488B08   		movq	(%rax), %rcx
 12684 3825 E92ED5FF 		jmp	.L269
 12684      FF
 12685              	.LVL621:
 12686              	.L234:
2293:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
 12687              		.loc 1 2293 0
 12688 382a 4489C0   		movl	%r8d, %eax
 12689 382d 8B150000 		movl	nPC(%rip), %edx
 12689      0000
 12690 3833 C1E815   		shrl	$21, %eax
2294:src/vm3.c     **** {
 12691              		.loc 1 2294 0
 12692 3836 83E01F   		andl	$31, %eax
 12693 3839 833C8500 		cmpl	$0, RF(,%rax,4)
 12693      00000000 
2297:src/vm3.c     ****   nPC  += (immediate << 2);
 12694              		.loc 1 2297 0
 12695 3841 89150000 		movl	%edx, PC(%rip)
 12695      0000
2294:src/vm3.c     **** {
 12696              		.loc 1 2294 0
 12697 3847 0F8EC200 		jle	.L469
 12697      0000
GAS LISTING /tmp/cc15eBE3.s 			page 581


 12698              	.LVL622:
2299:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12699              		.loc 1 2299 0
 12700 384d 8D4A03   		leal	3(%rdx), %ecx
2298:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 12701              		.loc 1 2298 0
 12702 3850 450FBFC0 		movswl	%r8w, %r8d
 12703              	.LVL623:
 12704 3854 428D0482 		leal	(%rdx,%r8,4), %eax
2299:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12705              		.loc 1 2299 0
 12706 3858 440FB681 		movzbl	VM_memory(%rcx), %r8d
 12706      00000000 
 12707              	.LVL624:
 12708 3860 89D1     		movl	%edx, %ecx
 12709 3862 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12709      000000
2298:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 12710              		.loc 1 2298 0
 12711 3869 89050000 		movl	%eax, nPC(%rip)
 12711      0000
2299:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12712              		.loc 1 2299 0
 12713 386f C1E118   		sall	$24, %ecx
 12714 3872 4109C8   		orl	%ecx, %r8d
 12715 3875 8D4A01   		leal	1(%rdx), %ecx
 12716 3878 83C202   		addl	$2, %edx
 12717 387b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12717      000000
 12718 3882 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12718      000000
 12719 3889 C1E208   		sall	$8, %edx
 12720 388c C1E110   		sall	$16, %ecx
 12721 388f 4109C8   		orl	%ecx, %r8d
 12722 3892 4109D0   		orl	%edx, %r8d
 12723              	.LVL625:
2300:src/vm3.c     ****   if (op0 == 0x0) {
 12724              		.loc 1 2300 0
 12725 3895 4489C1   		movl	%r8d, %ecx
2302:src/vm3.c     ****     op0 = op0 + funct;
 12726              		.loc 1 2302 0
 12727 3898 4488C2   		movb	%r8b, %dl
2300:src/vm3.c     ****   if (op0 == 0x0) {
 12728              		.loc 1 2300 0
 12729 389b C1E91A   		shrl	$26, %ecx
 12730              	.LVL626:
2302:src/vm3.c     ****     op0 = op0 + funct;
 12731              		.loc 1 2302 0
 12732 389e 83E23F   		andl	$63, %edx
 12733 38a1 8D712B   		leal	43(%rcx), %esi
 12734 38a4 84C9     		testb	%cl, %cl
2312:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12735              		.loc 1 2312 0
 12736 38a6 8D4803   		leal	3(%rax), %ecx
 12737              	.LVL627:
 12738 38a9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12738      000000
GAS LISTING /tmp/cc15eBE3.s 			page 582


 12739              	.LVL628:
 12740 38b0 89C1     		movl	%eax, %ecx
2302:src/vm3.c     ****     op0 = op0 + funct;
 12741              		.loc 1 2302 0
 12742 38b2 0F45D6   		cmovne	%esi, %edx
 12743              	.LVL629:
2312:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12744              		.loc 1 2312 0
 12745 38b5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12745      000000
2310:src/vm3.c     **** 
 12746              		.loc 1 2310 0
 12747 38bc 0FB6D2   		movzbl	%dl, %edx
 12748 38bf 48C1E204 		salq	$4, %rdx
 12749              	.LVL630:
2312:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12750              		.loc 1 2312 0
 12751 38c3 C1E118   		sall	$24, %ecx
 12752 38c6 09CB     		orl	%ecx, %ebx
 12753 38c8 8D4801   		leal	1(%rax), %ecx
 12754 38cb 83C002   		addl	$2, %eax
 12755 38ce 0FB68000 		movzbl	VM_memory(%rax), %eax
 12755      000000
 12756 38d5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12756      000000
 12757 38dc C1E008   		sall	$8, %eax
 12758 38df C1E110   		sall	$16, %ecx
 12759 38e2 09CB     		orl	%ecx, %ebx
 12760 38e4 09C3     		orl	%eax, %ebx
 12761              	.LVL631:
2313:src/vm3.c     ****   if (op1 == 0x0) {
 12762              		.loc 1 2313 0
 12763 38e6 89D9     		movl	%ebx, %ecx
2315:src/vm3.c     ****     op1 = op1 + funct;
 12764              		.loc 1 2315 0
 12765 38e8 88D8     		movb	%bl, %al
2313:src/vm3.c     ****   if (op1 == 0x0) {
 12766              		.loc 1 2313 0
 12767 38ea C1E91A   		shrl	$26, %ecx
 12768              	.LVL632:
2315:src/vm3.c     ****     op1 = op1 + funct;
 12769              		.loc 1 2315 0
 12770 38ed 83E03F   		andl	$63, %eax
 12771 38f0 8D712B   		leal	43(%rcx), %esi
 12772 38f3 84C9     		testb	%cl, %cl
 12773 38f5 0F45C6   		cmovne	%esi, %eax
 12774              	.LVL633:
2322:src/vm3.c     **** 
 12775              		.loc 1 2322 0
 12776 38f8 0FB6C0   		movzbl	%al, %eax
 12777 38fb 48C1E004 		salq	$4, %rax
 12778              	.LVL634:
 12779 38ff 48038414 		addq	58088(%rsp,%rdx), %rax
 12779      E8E20000 
 12780 3907 488B08   		movq	(%rax), %rcx
 12781 390a E949D4FF 		jmp	.L269
 12781      FF
GAS LISTING /tmp/cc15eBE3.s 			page 583


 12782              	.LVL635:
 12783              	.L469:
2331:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12784              		.loc 1 2331 0
 12785 390f 8D4203   		leal	3(%rdx), %eax
2329:src/vm3.c     **** }
 12786              		.loc 1 2329 0
 12787 3912 8D7204   		leal	4(%rdx), %esi
2331:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12788              		.loc 1 2331 0
 12789 3915 440FB680 		movzbl	VM_memory(%rax), %r8d
 12789      00000000 
 12790              	.LVL636:
 12791 391d 89D0     		movl	%edx, %eax
2344:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12792              		.loc 1 2344 0
 12793 391f 0FB69E00 		movzbl	VM_memory(%rsi), %ebx
 12793      000000
 12794              	.LVL637:
2331:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12795              		.loc 1 2331 0
 12796 3926 0FB68000 		movzbl	VM_memory(%rax), %eax
 12796      000000
2329:src/vm3.c     **** }
 12797              		.loc 1 2329 0
 12798 392d 89350000 		movl	%esi, nPC(%rip)
 12798      0000
2331:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12799              		.loc 1 2331 0
 12800 3933 C1E018   		sall	$24, %eax
 12801 3936 4109C0   		orl	%eax, %r8d
 12802 3939 8D4201   		leal	1(%rdx), %eax
 12803 393c 0FB68000 		movzbl	VM_memory(%rax), %eax
 12803      000000
 12804 3943 C1E010   		sall	$16, %eax
 12805 3946 4109C0   		orl	%eax, %r8d
 12806 3949 8D4202   		leal	2(%rdx), %eax
 12807 394c 0FB68000 		movzbl	VM_memory(%rax), %eax
 12807      000000
 12808 3953 C1E008   		sall	$8, %eax
 12809 3956 4109C0   		orl	%eax, %r8d
 12810              	.LVL638:
2332:src/vm3.c     ****   if (op0 == 0x0) {
 12811              		.loc 1 2332 0
 12812 3959 4489C0   		movl	%r8d, %eax
2334:src/vm3.c     ****     op0 = op0 + funct;
 12813              		.loc 1 2334 0
 12814 395c 4488C1   		movb	%r8b, %cl
2332:src/vm3.c     ****   if (op0 == 0x0) {
 12815              		.loc 1 2332 0
 12816 395f C1E81A   		shrl	$26, %eax
 12817              	.LVL639:
2334:src/vm3.c     ****     op0 = op0 + funct;
 12818              		.loc 1 2334 0
 12819 3962 83E13F   		andl	$63, %ecx
 12820 3965 8D782B   		leal	43(%rax), %edi
 12821 3968 84C0     		testb	%al, %al
GAS LISTING /tmp/cc15eBE3.s 			page 584


2344:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12822              		.loc 1 2344 0
 12823 396a 8D4205   		leal	5(%rdx), %eax
 12824              	.LVL640:
 12825 396d 0FB68000 		movzbl	VM_memory(%rax), %eax
 12825      000000
2334:src/vm3.c     ****     op0 = op0 + funct;
 12826              		.loc 1 2334 0
 12827 3974 0F45CF   		cmovne	%edi, %ecx
 12828              	.LVL641:
2344:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12829              		.loc 1 2344 0
 12830 3977 C1E318   		sall	$24, %ebx
2342:src/vm3.c     **** 
 12831              		.loc 1 2342 0
 12832 397a 0FB6C9   		movzbl	%cl, %ecx
 12833 397d 48C1E104 		salq	$4, %rcx
 12834              	.LVL642:
2344:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12835              		.loc 1 2344 0
 12836 3981 C1E010   		sall	$16, %eax
 12837 3984 09C3     		orl	%eax, %ebx
 12838 3986 8D4207   		leal	7(%rdx), %eax
 12839 3989 0FB68000 		movzbl	VM_memory(%rax), %eax
 12839      000000
 12840 3990 09C3     		orl	%eax, %ebx
 12841 3992 8D4206   		leal	6(%rdx), %eax
 12842 3995 0FB68000 		movzbl	VM_memory(%rax), %eax
 12842      000000
 12843 399c C1E008   		sall	$8, %eax
 12844 399f 09C3     		orl	%eax, %ebx
 12845              	.LVL643:
2345:src/vm3.c     ****   if (op1 == 0x0) {
 12846              		.loc 1 2345 0
 12847 39a1 89DA     		movl	%ebx, %edx
2347:src/vm3.c     ****     op1 = op1 + funct;
 12848              		.loc 1 2347 0
 12849 39a3 88D8     		movb	%bl, %al
2345:src/vm3.c     ****   if (op1 == 0x0) {
 12850              		.loc 1 2345 0
 12851 39a5 C1EA1A   		shrl	$26, %edx
 12852              	.LVL644:
2347:src/vm3.c     ****     op1 = op1 + funct;
 12853              		.loc 1 2347 0
 12854 39a8 83E03F   		andl	$63, %eax
 12855 39ab 8D722B   		leal	43(%rdx), %esi
 12856 39ae 84D2     		testb	%dl, %dl
 12857 39b0 0F45C6   		cmovne	%esi, %eax
 12858              	.LVL645:
2354:src/vm3.c     **** 
 12859              		.loc 1 2354 0
 12860 39b3 0FB6C0   		movzbl	%al, %eax
 12861 39b6 48C1E004 		salq	$4, %rax
 12862              	.LVL646:
 12863 39ba 4803840C 		addq	58088(%rsp,%rcx), %rax
 12863      E8E20000 
 12864 39c2 488B08   		movq	(%rax), %rcx
GAS LISTING /tmp/cc15eBE3.s 			page 585


 12865              	.LVL647:
 12866 39c5 E98ED3FF 		jmp	.L269
 12866      FF
 12867              	.L117:
 12868              	.LVL648:
2362:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
 12869              		.loc 1 2362 0
 12870 39ca 4489C0   		movl	%r8d, %eax
 12871 39cd 8B150000 		movl	nPC(%rip), %edx
 12871      0000
 12872 39d3 C1E815   		shrl	$21, %eax
2363:src/vm3.c     **** {
 12873              		.loc 1 2363 0
 12874 39d6 83E01F   		andl	$31, %eax
 12875 39d9 833C8500 		cmpl	$0, RF(,%rax,4)
 12875      00000000 
2366:src/vm3.c     ****   nPC  += (immediate << 2);
 12876              		.loc 1 2366 0
 12877 39e1 89150000 		movl	%edx, PC(%rip)
 12877      0000
2363:src/vm3.c     **** {
 12878              		.loc 1 2363 0
 12879 39e7 0F8FC200 		jg	.L478
 12879      0000
 12880              	.LVL649:
2368:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12881              		.loc 1 2368 0
 12882 39ed 8D4A03   		leal	3(%rdx), %ecx
2367:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 12883              		.loc 1 2367 0
 12884 39f0 450FBFC0 		movswl	%r8w, %r8d
 12885              	.LVL650:
 12886 39f4 428D0482 		leal	(%rdx,%r8,4), %eax
2368:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12887              		.loc 1 2368 0
 12888 39f8 440FB681 		movzbl	VM_memory(%rcx), %r8d
 12888      00000000 
 12889              	.LVL651:
 12890 3a00 89D1     		movl	%edx, %ecx
 12891 3a02 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12891      000000
2367:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 12892              		.loc 1 2367 0
 12893 3a09 89050000 		movl	%eax, nPC(%rip)
 12893      0000
2368:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12894              		.loc 1 2368 0
 12895 3a0f C1E118   		sall	$24, %ecx
 12896 3a12 4109C8   		orl	%ecx, %r8d
 12897 3a15 8D4A01   		leal	1(%rdx), %ecx
 12898 3a18 83C202   		addl	$2, %edx
 12899 3a1b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 12899      000000
 12900 3a22 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12900      000000
 12901 3a29 C1E208   		sall	$8, %edx
 12902 3a2c C1E110   		sall	$16, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 586


 12903 3a2f 4109C8   		orl	%ecx, %r8d
 12904 3a32 4109D0   		orl	%edx, %r8d
 12905              	.LVL652:
2369:src/vm3.c     ****   if (op0 == 0x0) {
 12906              		.loc 1 2369 0
 12907 3a35 4489C1   		movl	%r8d, %ecx
2371:src/vm3.c     ****     op0 = op0 + funct;
 12908              		.loc 1 2371 0
 12909 3a38 4488C2   		movb	%r8b, %dl
2369:src/vm3.c     ****   if (op0 == 0x0) {
 12910              		.loc 1 2369 0
 12911 3a3b C1E91A   		shrl	$26, %ecx
 12912              	.LVL653:
2371:src/vm3.c     ****     op0 = op0 + funct;
 12913              		.loc 1 2371 0
 12914 3a3e 83E23F   		andl	$63, %edx
 12915 3a41 8D712B   		leal	43(%rcx), %esi
 12916 3a44 84C9     		testb	%cl, %cl
2381:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12917              		.loc 1 2381 0
 12918 3a46 8D4803   		leal	3(%rax), %ecx
 12919              	.LVL654:
 12920 3a49 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 12920      000000
 12921              	.LVL655:
 12922 3a50 89C1     		movl	%eax, %ecx
2371:src/vm3.c     ****     op0 = op0 + funct;
 12923              		.loc 1 2371 0
 12924 3a52 0F45D6   		cmovne	%esi, %edx
 12925              	.LVL656:
2381:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12926              		.loc 1 2381 0
 12927 3a55 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12927      000000
2379:src/vm3.c     **** 
 12928              		.loc 1 2379 0
 12929 3a5c 0FB6D2   		movzbl	%dl, %edx
 12930 3a5f 48C1E204 		salq	$4, %rdx
 12931              	.LVL657:
2381:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12932              		.loc 1 2381 0
 12933 3a63 C1E118   		sall	$24, %ecx
 12934 3a66 09CB     		orl	%ecx, %ebx
 12935 3a68 8D4801   		leal	1(%rax), %ecx
 12936 3a6b 83C002   		addl	$2, %eax
 12937 3a6e 0FB68000 		movzbl	VM_memory(%rax), %eax
 12937      000000
 12938 3a75 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 12938      000000
 12939 3a7c C1E008   		sall	$8, %eax
 12940 3a7f C1E110   		sall	$16, %ecx
 12941 3a82 09CB     		orl	%ecx, %ebx
 12942 3a84 09C3     		orl	%eax, %ebx
 12943              	.LVL658:
2382:src/vm3.c     ****   if (op1 == 0x0) {
 12944              		.loc 1 2382 0
 12945 3a86 89D9     		movl	%ebx, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 587


2384:src/vm3.c     ****     op1 = op1 + funct;
 12946              		.loc 1 2384 0
 12947 3a88 88D8     		movb	%bl, %al
2382:src/vm3.c     ****   if (op1 == 0x0) {
 12948              		.loc 1 2382 0
 12949 3a8a C1E91A   		shrl	$26, %ecx
 12950              	.LVL659:
2384:src/vm3.c     ****     op1 = op1 + funct;
 12951              		.loc 1 2384 0
 12952 3a8d 83E03F   		andl	$63, %eax
 12953 3a90 8D712B   		leal	43(%rcx), %esi
 12954 3a93 84C9     		testb	%cl, %cl
 12955 3a95 0F45C6   		cmovne	%esi, %eax
 12956              	.LVL660:
2391:src/vm3.c     **** 
 12957              		.loc 1 2391 0
 12958 3a98 0FB6C0   		movzbl	%al, %eax
 12959 3a9b 48C1E004 		salq	$4, %rax
 12960              	.LVL661:
 12961 3a9f 48038414 		addq	58088(%rsp,%rdx), %rax
 12961      E8E20000 
 12962 3aa7 488B08   		movq	(%rax), %rcx
 12963 3aaa E9A9D2FF 		jmp	.L269
 12963      FF
 12964              	.LVL662:
 12965              	.L478:
2400:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12966              		.loc 1 2400 0
 12967 3aaf 8D4203   		leal	3(%rdx), %eax
2398:src/vm3.c     **** }
 12968              		.loc 1 2398 0
 12969 3ab2 8D7204   		leal	4(%rdx), %esi
2400:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12970              		.loc 1 2400 0
 12971 3ab5 440FB680 		movzbl	VM_memory(%rax), %r8d
 12971      00000000 
 12972              	.LVL663:
 12973 3abd 89D0     		movl	%edx, %eax
2413:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 12974              		.loc 1 2413 0
 12975 3abf 0FB69E00 		movzbl	VM_memory(%rsi), %ebx
 12975      000000
 12976              	.LVL664:
2400:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12977              		.loc 1 2400 0
 12978 3ac6 0FB68000 		movzbl	VM_memory(%rax), %eax
 12978      000000
2398:src/vm3.c     **** }
 12979              		.loc 1 2398 0
 12980 3acd 89350000 		movl	%esi, nPC(%rip)
 12980      0000
2400:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 12981              		.loc 1 2400 0
 12982 3ad3 C1E018   		sall	$24, %eax
 12983 3ad6 4109C0   		orl	%eax, %r8d
 12984 3ad9 8D4201   		leal	1(%rdx), %eax
 12985 3adc 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 588


 12985      000000
 12986 3ae3 C1E010   		sall	$16, %eax
 12987 3ae6 4109C0   		orl	%eax, %r8d
 12988 3ae9 8D4202   		leal	2(%rdx), %eax
 12989 3aec 0FB68000 		movzbl	VM_memory(%rax), %eax
 12989      000000
 12990 3af3 C1E008   		sall	$8, %eax
 12991 3af6 4109C0   		orl	%eax, %r8d
 12992              	.LVL665:
2401:src/vm3.c     ****   if (op0 == 0x0) {
 12993              		.loc 1 2401 0
 12994 3af9 4489C0   		movl	%r8d, %eax
2403:src/vm3.c     ****     op0 = op0 + funct;
 12995              		.loc 1 2403 0
 12996 3afc 4488C1   		movb	%r8b, %cl
2401:src/vm3.c     ****   if (op0 == 0x0) {
 12997              		.loc 1 2401 0
 12998 3aff C1E81A   		shrl	$26, %eax
 12999              	.LVL666:
2403:src/vm3.c     ****     op0 = op0 + funct;
 13000              		.loc 1 2403 0
 13001 3b02 83E13F   		andl	$63, %ecx
 13002 3b05 8D782B   		leal	43(%rax), %edi
 13003 3b08 84C0     		testb	%al, %al
2413:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13004              		.loc 1 2413 0
 13005 3b0a 8D4205   		leal	5(%rdx), %eax
 13006              	.LVL667:
 13007 3b0d 0FB68000 		movzbl	VM_memory(%rax), %eax
 13007      000000
2403:src/vm3.c     ****     op0 = op0 + funct;
 13008              		.loc 1 2403 0
 13009 3b14 0F45CF   		cmovne	%edi, %ecx
 13010              	.LVL668:
2413:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13011              		.loc 1 2413 0
 13012 3b17 C1E318   		sall	$24, %ebx
2411:src/vm3.c     **** 
 13013              		.loc 1 2411 0
 13014 3b1a 0FB6C9   		movzbl	%cl, %ecx
 13015 3b1d 48C1E104 		salq	$4, %rcx
 13016              	.LVL669:
2413:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13017              		.loc 1 2413 0
 13018 3b21 C1E010   		sall	$16, %eax
 13019 3b24 09C3     		orl	%eax, %ebx
 13020 3b26 8D4207   		leal	7(%rdx), %eax
 13021 3b29 0FB68000 		movzbl	VM_memory(%rax), %eax
 13021      000000
 13022 3b30 09C3     		orl	%eax, %ebx
 13023 3b32 8D4206   		leal	6(%rdx), %eax
 13024 3b35 0FB68000 		movzbl	VM_memory(%rax), %eax
 13024      000000
 13025 3b3c C1E008   		sall	$8, %eax
 13026 3b3f 09C3     		orl	%eax, %ebx
 13027              	.LVL670:
2414:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 589


 13028              		.loc 1 2414 0
 13029 3b41 89DA     		movl	%ebx, %edx
2416:src/vm3.c     ****     op1 = op1 + funct;
 13030              		.loc 1 2416 0
 13031 3b43 88D8     		movb	%bl, %al
2414:src/vm3.c     ****   if (op1 == 0x0) {
 13032              		.loc 1 2414 0
 13033 3b45 C1EA1A   		shrl	$26, %edx
 13034              	.LVL671:
2416:src/vm3.c     ****     op1 = op1 + funct;
 13035              		.loc 1 2416 0
 13036 3b48 83E03F   		andl	$63, %eax
 13037 3b4b 8D722B   		leal	43(%rdx), %esi
 13038 3b4e 84D2     		testb	%dl, %dl
 13039 3b50 0F45C6   		cmovne	%esi, %eax
 13040              	.LVL672:
2423:src/vm3.c     **** 
 13041              		.loc 1 2423 0
 13042 3b53 0FB6C0   		movzbl	%al, %eax
 13043 3b56 48C1E004 		salq	$4, %rax
 13044              	.LVL673:
 13045 3b5a 4803840C 		addq	58088(%rsp,%rcx), %rax
 13045      E8E20000 
 13046 3b62 488B08   		movq	(%rax), %rcx
 13047              	.LVL674:
 13048 3b65 E9EED1FF 		jmp	.L269
 13048      FF
 13049              	.L190:
 13050              	.LVL675:
2431:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13051              		.loc 1 2431 0
 13052 3b6a 4489C2   		movl	%r8d, %edx
2432:src/vm3.c     **** if (RF[rs] != RF[rt])
 13053              		.loc 1 2432 0
 13054 3b6d 4489C0   		movl	%r8d, %eax
2431:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13055              		.loc 1 2431 0
 13056 3b70 C1EA15   		shrl	$21, %edx
2432:src/vm3.c     **** if (RF[rs] != RF[rt])
 13057              		.loc 1 2432 0
 13058 3b73 C1E810   		shrl	$16, %eax
2433:src/vm3.c     **** {
 13059              		.loc 1 2433 0
 13060 3b76 83E21F   		andl	$31, %edx
 13061 3b79 83E01F   		andl	$31, %eax
 13062 3b7c 8B048500 		movl	RF(,%rax,4), %eax
 13062      000000
 13063 3b83 39049500 		cmpl	%eax, RF(,%rdx,4)
 13063      000000
 13064 3b8a 8B150000 		movl	nPC(%rip), %edx
 13064      0000
2436:src/vm3.c     ****   nPC  += (immediate << 2);
 13065              		.loc 1 2436 0
 13066 3b90 89150000 		movl	%edx, PC(%rip)
 13066      0000
2433:src/vm3.c     **** {
 13067              		.loc 1 2433 0
GAS LISTING /tmp/cc15eBE3.s 			page 590


 13068 3b96 0F84C200 		je	.L487
 13068      0000
 13069              	.LVL676:
2438:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13070              		.loc 1 2438 0
 13071 3b9c 8D4A03   		leal	3(%rdx), %ecx
2437:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 13072              		.loc 1 2437 0
 13073 3b9f 450FBFC0 		movswl	%r8w, %r8d
 13074              	.LVL677:
 13075 3ba3 428D0482 		leal	(%rdx,%r8,4), %eax
2438:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13076              		.loc 1 2438 0
 13077 3ba7 440FB681 		movzbl	VM_memory(%rcx), %r8d
 13077      00000000 
 13078              	.LVL678:
 13079 3baf 89D1     		movl	%edx, %ecx
 13080 3bb1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13080      000000
2437:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 13081              		.loc 1 2437 0
 13082 3bb8 89050000 		movl	%eax, nPC(%rip)
 13082      0000
2438:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13083              		.loc 1 2438 0
 13084 3bbe C1E118   		sall	$24, %ecx
 13085 3bc1 4109C8   		orl	%ecx, %r8d
 13086 3bc4 8D4A01   		leal	1(%rdx), %ecx
 13087 3bc7 83C202   		addl	$2, %edx
 13088 3bca 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13088      000000
 13089 3bd1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13089      000000
 13090 3bd8 C1E208   		sall	$8, %edx
 13091 3bdb C1E110   		sall	$16, %ecx
 13092 3bde 4109C8   		orl	%ecx, %r8d
 13093 3be1 4109D0   		orl	%edx, %r8d
 13094              	.LVL679:
2439:src/vm3.c     ****   if (op0 == 0x0) {
 13095              		.loc 1 2439 0
 13096 3be4 4489C1   		movl	%r8d, %ecx
2441:src/vm3.c     ****     op0 = op0 + funct;
 13097              		.loc 1 2441 0
 13098 3be7 4488C2   		movb	%r8b, %dl
2439:src/vm3.c     ****   if (op0 == 0x0) {
 13099              		.loc 1 2439 0
 13100 3bea C1E91A   		shrl	$26, %ecx
 13101              	.LVL680:
2441:src/vm3.c     ****     op0 = op0 + funct;
 13102              		.loc 1 2441 0
 13103 3bed 83E23F   		andl	$63, %edx
 13104 3bf0 8D712B   		leal	43(%rcx), %esi
 13105 3bf3 84C9     		testb	%cl, %cl
2451:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13106              		.loc 1 2451 0
 13107 3bf5 8D4803   		leal	3(%rax), %ecx
 13108              	.LVL681:
GAS LISTING /tmp/cc15eBE3.s 			page 591


 13109 3bf8 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13109      000000
 13110              	.LVL682:
 13111 3bff 89C1     		movl	%eax, %ecx
2441:src/vm3.c     ****     op0 = op0 + funct;
 13112              		.loc 1 2441 0
 13113 3c01 0F45D6   		cmovne	%esi, %edx
 13114              	.LVL683:
2451:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13115              		.loc 1 2451 0
 13116 3c04 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13116      000000
2449:src/vm3.c     **** 
 13117              		.loc 1 2449 0
 13118 3c0b 0FB6D2   		movzbl	%dl, %edx
 13119 3c0e 48C1E204 		salq	$4, %rdx
 13120              	.LVL684:
2451:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13121              		.loc 1 2451 0
 13122 3c12 C1E118   		sall	$24, %ecx
 13123 3c15 09CB     		orl	%ecx, %ebx
 13124 3c17 8D4801   		leal	1(%rax), %ecx
 13125 3c1a 83C002   		addl	$2, %eax
 13126 3c1d 0FB68000 		movzbl	VM_memory(%rax), %eax
 13126      000000
 13127 3c24 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13127      000000
 13128 3c2b C1E008   		sall	$8, %eax
 13129 3c2e C1E110   		sall	$16, %ecx
 13130 3c31 09CB     		orl	%ecx, %ebx
 13131 3c33 09C3     		orl	%eax, %ebx
 13132              	.LVL685:
2452:src/vm3.c     ****   if (op1 == 0x0) {
 13133              		.loc 1 2452 0
 13134 3c35 89D9     		movl	%ebx, %ecx
2454:src/vm3.c     ****     op1 = op1 + funct;
 13135              		.loc 1 2454 0
 13136 3c37 88D8     		movb	%bl, %al
2452:src/vm3.c     ****   if (op1 == 0x0) {
 13137              		.loc 1 2452 0
 13138 3c39 C1E91A   		shrl	$26, %ecx
 13139              	.LVL686:
2454:src/vm3.c     ****     op1 = op1 + funct;
 13140              		.loc 1 2454 0
 13141 3c3c 83E03F   		andl	$63, %eax
 13142 3c3f 8D712B   		leal	43(%rcx), %esi
 13143 3c42 84C9     		testb	%cl, %cl
 13144 3c44 0F45C6   		cmovne	%esi, %eax
 13145              	.LVL687:
2461:src/vm3.c     **** 
 13146              		.loc 1 2461 0
 13147 3c47 0FB6C0   		movzbl	%al, %eax
 13148 3c4a 48C1E004 		salq	$4, %rax
 13149              	.LVL688:
 13150 3c4e 48038414 		addq	58088(%rsp,%rdx), %rax
 13150      E8E20000 
 13151 3c56 488B08   		movq	(%rax), %rcx
GAS LISTING /tmp/cc15eBE3.s 			page 592


 13152 3c59 E9FAD0FF 		jmp	.L269
 13152      FF
 13153              	.LVL689:
 13154              	.L487:
2470:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13155              		.loc 1 2470 0
 13156 3c5e 8D4203   		leal	3(%rdx), %eax
2468:src/vm3.c     **** }
 13157              		.loc 1 2468 0
 13158 3c61 8D7204   		leal	4(%rdx), %esi
2470:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13159              		.loc 1 2470 0
 13160 3c64 440FB680 		movzbl	VM_memory(%rax), %r8d
 13160      00000000 
 13161              	.LVL690:
 13162 3c6c 89D0     		movl	%edx, %eax
2483:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13163              		.loc 1 2483 0
 13164 3c6e 0FB69E00 		movzbl	VM_memory(%rsi), %ebx
 13164      000000
 13165              	.LVL691:
2470:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13166              		.loc 1 2470 0
 13167 3c75 0FB68000 		movzbl	VM_memory(%rax), %eax
 13167      000000
2468:src/vm3.c     **** }
 13168              		.loc 1 2468 0
 13169 3c7c 89350000 		movl	%esi, nPC(%rip)
 13169      0000
2470:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13170              		.loc 1 2470 0
 13171 3c82 C1E018   		sall	$24, %eax
 13172 3c85 4109C0   		orl	%eax, %r8d
 13173 3c88 8D4201   		leal	1(%rdx), %eax
 13174 3c8b 0FB68000 		movzbl	VM_memory(%rax), %eax
 13174      000000
 13175 3c92 C1E010   		sall	$16, %eax
 13176 3c95 4109C0   		orl	%eax, %r8d
 13177 3c98 8D4202   		leal	2(%rdx), %eax
 13178 3c9b 0FB68000 		movzbl	VM_memory(%rax), %eax
 13178      000000
 13179 3ca2 C1E008   		sall	$8, %eax
 13180 3ca5 4109C0   		orl	%eax, %r8d
 13181              	.LVL692:
2471:src/vm3.c     ****   if (op0 == 0x0) {
 13182              		.loc 1 2471 0
 13183 3ca8 4489C0   		movl	%r8d, %eax
2473:src/vm3.c     ****     op0 = op0 + funct;
 13184              		.loc 1 2473 0
 13185 3cab 4488C1   		movb	%r8b, %cl
2471:src/vm3.c     ****   if (op0 == 0x0) {
 13186              		.loc 1 2471 0
 13187 3cae C1E81A   		shrl	$26, %eax
 13188              	.LVL693:
2473:src/vm3.c     ****     op0 = op0 + funct;
 13189              		.loc 1 2473 0
 13190 3cb1 83E13F   		andl	$63, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 593


 13191 3cb4 8D782B   		leal	43(%rax), %edi
 13192 3cb7 84C0     		testb	%al, %al
2483:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13193              		.loc 1 2483 0
 13194 3cb9 8D4205   		leal	5(%rdx), %eax
 13195              	.LVL694:
 13196 3cbc 0FB68000 		movzbl	VM_memory(%rax), %eax
 13196      000000
2473:src/vm3.c     ****     op0 = op0 + funct;
 13197              		.loc 1 2473 0
 13198 3cc3 0F45CF   		cmovne	%edi, %ecx
 13199              	.LVL695:
2483:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13200              		.loc 1 2483 0
 13201 3cc6 C1E318   		sall	$24, %ebx
2481:src/vm3.c     **** 
 13202              		.loc 1 2481 0
 13203 3cc9 0FB6C9   		movzbl	%cl, %ecx
 13204 3ccc 48C1E104 		salq	$4, %rcx
 13205              	.LVL696:
2483:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13206              		.loc 1 2483 0
 13207 3cd0 C1E010   		sall	$16, %eax
 13208 3cd3 09C3     		orl	%eax, %ebx
 13209 3cd5 8D4207   		leal	7(%rdx), %eax
 13210 3cd8 0FB68000 		movzbl	VM_memory(%rax), %eax
 13210      000000
 13211 3cdf 09C3     		orl	%eax, %ebx
 13212 3ce1 8D4206   		leal	6(%rdx), %eax
 13213 3ce4 0FB68000 		movzbl	VM_memory(%rax), %eax
 13213      000000
 13214 3ceb C1E008   		sall	$8, %eax
 13215 3cee 09C3     		orl	%eax, %ebx
 13216              	.LVL697:
2484:src/vm3.c     ****   if (op1 == 0x0) {
 13217              		.loc 1 2484 0
 13218 3cf0 89DA     		movl	%ebx, %edx
2486:src/vm3.c     ****     op1 = op1 + funct;
 13219              		.loc 1 2486 0
 13220 3cf2 88D8     		movb	%bl, %al
2484:src/vm3.c     ****   if (op1 == 0x0) {
 13221              		.loc 1 2484 0
 13222 3cf4 C1EA1A   		shrl	$26, %edx
 13223              	.LVL698:
2486:src/vm3.c     ****     op1 = op1 + funct;
 13224              		.loc 1 2486 0
 13225 3cf7 83E03F   		andl	$63, %eax
 13226 3cfa 8D722B   		leal	43(%rdx), %esi
 13227 3cfd 84D2     		testb	%dl, %dl
 13228 3cff 0F45C6   		cmovne	%esi, %eax
 13229              	.LVL699:
2493:src/vm3.c     **** 
 13230              		.loc 1 2493 0
 13231 3d02 0FB6C0   		movzbl	%al, %eax
 13232 3d05 48C1E004 		salq	$4, %rax
 13233              	.LVL700:
 13234 3d09 4803840C 		addq	58088(%rsp,%rcx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 594


 13234      E8E20000 
 13235 3d11 488B08   		movq	(%rax), %rcx
 13236              	.LVL701:
 13237 3d14 E93FD0FF 		jmp	.L269
 13237      FF
 13238              	.L258:
 13239              	.LVL702:
2501:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13240              		.loc 1 2501 0
 13241 3d19 4489C2   		movl	%r8d, %edx
2504:src/vm3.c     **** PC  =  nPC;
 13242              		.loc 1 2504 0
 13243 3d1c 410FBFC0 		movswl	%r8w, %eax
2502:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13244              		.loc 1 2502 0
 13245 3d20 41C1E810 		shrl	$16, %r8d
 13246              	.LVL703:
2501:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13247              		.loc 1 2501 0
 13248 3d24 C1EA15   		shrl	$21, %edx
 13249              	.LVL704:
2504:src/vm3.c     **** PC  =  nPC;
 13250              		.loc 1 2504 0
 13251 3d27 4183E01F 		andl	$31, %r8d
 13252 3d2b 83E21F   		andl	$31, %edx
 13253 3d2e 03049500 		addl	RF(,%rdx,4), %eax
 13253      000000
 13254              	.LVL705:
 13255 3d35 8A900000 		movb	VM_memory(%rax), %dl
 13255      0000
 13256 3d3b 88D0     		movb	%dl, %al
 13257 3d3d 83E27F   		andl	$127, %edx
 13258 3d40 83E080   		andl	$-128, %eax
 13259 3d43 0FB6C0   		movzbl	%al, %eax
 13260 3d46 C1E018   		sall	$24, %eax
 13261 3d49 09D0     		orl	%edx, %eax
 13262 3d4b 42890485 		movl	%eax, RF(,%r8,4)
 13262      00000000 
2505:src/vm3.c     **** nPC  += 4;
 13263              		.loc 1 2505 0
 13264 3d53 8B050000 		movl	nPC(%rip), %eax
 13264      0000
2507:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13265              		.loc 1 2507 0
 13266 3d59 8D5003   		leal	3(%rax), %edx
2506:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13267              		.loc 1 2506 0
 13268 3d5c 8D4804   		leal	4(%rax), %ecx
2505:src/vm3.c     **** nPC  += 4;
 13269              		.loc 1 2505 0
 13270 3d5f 89050000 		movl	%eax, PC(%rip)
 13270      0000
2507:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13271              		.loc 1 2507 0
 13272 3d65 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13272      00000000 
 13273 3d6d 89C2     		movl	%eax, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 595


2520:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13274              		.loc 1 2520 0
 13275 3d6f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13275      000000
 13276              	.LVL706:
2507:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13277              		.loc 1 2507 0
 13278 3d76 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13278      000000
2506:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13279              		.loc 1 2506 0
 13280 3d7d 890D0000 		movl	%ecx, nPC(%rip)
 13280      0000
2520:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13281              		.loc 1 2520 0
 13282 3d83 8D4805   		leal	5(%rax), %ecx
 13283 3d86 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13283      000000
2507:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13284              		.loc 1 2507 0
 13285 3d8d C1E218   		sall	$24, %edx
 13286 3d90 4109D0   		orl	%edx, %r8d
 13287 3d93 8D5001   		leal	1(%rax), %edx
 13288 3d96 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13288      000000
 13289 3d9d C1E210   		sall	$16, %edx
 13290 3da0 4109D0   		orl	%edx, %r8d
 13291 3da3 8D5002   		leal	2(%rax), %edx
 13292 3da6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13292      000000
 13293 3dad C1E208   		sall	$8, %edx
 13294 3db0 4109D0   		orl	%edx, %r8d
 13295              	.LVL707:
2508:src/vm3.c     ****   if (op0 == 0x0) {
 13296              		.loc 1 2508 0
 13297 3db3 4489C6   		movl	%r8d, %esi
2510:src/vm3.c     ****     op0 = op0 + funct;
 13298              		.loc 1 2510 0
 13299 3db6 4488C2   		movb	%r8b, %dl
2508:src/vm3.c     ****   if (op0 == 0x0) {
 13300              		.loc 1 2508 0
 13301 3db9 C1EE1A   		shrl	$26, %esi
 13302              	.LVL708:
2510:src/vm3.c     ****     op0 = op0 + funct;
 13303              		.loc 1 2510 0
 13304 3dbc 83E23F   		andl	$63, %edx
 13305 3dbf 8D7E2B   		leal	43(%rsi), %edi
 13306 3dc2 4084F6   		testb	%sil, %sil
 13307 3dc5 0F45D7   		cmovne	%edi, %edx
 13308              	.LVL709:
2520:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13309              		.loc 1 2520 0
 13310 3dc8 C1E110   		sall	$16, %ecx
 13311 3dcb C1E318   		sall	$24, %ebx
 13312 3dce 09CB     		orl	%ecx, %ebx
 13313 3dd0 8D4807   		leal	7(%rax), %ecx
 13314 3dd3 83C006   		addl	$6, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 596


 13315 3dd6 0FB68000 		movzbl	VM_memory(%rax), %eax
 13315      000000
2518:src/vm3.c     **** 
 13316              		.loc 1 2518 0
 13317 3ddd 0FB6D2   		movzbl	%dl, %edx
2520:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13318              		.loc 1 2520 0
 13319 3de0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13319      000000
2518:src/vm3.c     **** 
 13320              		.loc 1 2518 0
 13321 3de7 48C1E204 		salq	$4, %rdx
 13322              	.LVL710:
2520:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13323              		.loc 1 2520 0
 13324 3deb C1E008   		sall	$8, %eax
 13325 3dee 09CB     		orl	%ecx, %ebx
 13326 3df0 09C3     		orl	%eax, %ebx
 13327              	.LVL711:
2521:src/vm3.c     ****   if (op1 == 0x0) {
 13328              		.loc 1 2521 0
 13329 3df2 89D9     		movl	%ebx, %ecx
2523:src/vm3.c     ****     op1 = op1 + funct;
 13330              		.loc 1 2523 0
 13331 3df4 88D8     		movb	%bl, %al
2521:src/vm3.c     ****   if (op1 == 0x0) {
 13332              		.loc 1 2521 0
 13333 3df6 C1E91A   		shrl	$26, %ecx
 13334              	.LVL712:
2523:src/vm3.c     ****     op1 = op1 + funct;
 13335              		.loc 1 2523 0
 13336 3df9 83E03F   		andl	$63, %eax
 13337 3dfc 8D712B   		leal	43(%rcx), %esi
 13338 3dff 84C9     		testb	%cl, %cl
 13339 3e01 0F45C6   		cmovne	%esi, %eax
 13340              	.LVL713:
2530:src/vm3.c     **** 
 13341              		.loc 1 2530 0
 13342 3e04 0FB6C0   		movzbl	%al, %eax
 13343 3e07 48C1E004 		salq	$4, %rax
 13344              	.LVL714:
 13345 3e0b 48038414 		addq	58088(%rsp,%rdx), %rax
 13345      E8E20000 
 13346 3e13 488B08   		movq	(%rax), %rcx
 13347 3e16 E93DCFFF 		jmp	.L269
 13347      FF
 13348              	.LVL715:
 13349              	.L173:
2538:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13350              		.loc 1 2538 0
 13351 3e1b 4489C2   		movl	%r8d, %edx
2539:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13352              		.loc 1 2539 0
 13353 3e1e 4489C0   		movl	%r8d, %eax
2541:src/vm3.c     **** PC  =  nPC;
 13354              		.loc 1 2541 0
 13355 3e21 450FBFC0 		movswl	%r8w, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 597


 13356              	.LVL716:
2538:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13357              		.loc 1 2538 0
 13358 3e25 C1EA15   		shrl	$21, %edx
2539:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13359              		.loc 1 2539 0
 13360 3e28 C1E810   		shrl	$16, %eax
 13361              	.LVL717:
2541:src/vm3.c     **** PC  =  nPC;
 13362              		.loc 1 2541 0
 13363 3e2b 83E21F   		andl	$31, %edx
 13364 3e2e 83E01F   		andl	$31, %eax
 13365 3e31 44030495 		addl	RF(,%rdx,4), %r8d
 13365      00000000 
 13366              	.LVL718:
 13367 3e39 410FB690 		movzbl	VM_memory(%r8), %edx
 13367      00000000 
 13368 3e41 89148500 		movl	%edx, RF(,%rax,4)
 13368      000000
2542:src/vm3.c     **** nPC  += 4;
 13369              		.loc 1 2542 0
 13370 3e48 8B050000 		movl	nPC(%rip), %eax
 13370      0000
2544:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13371              		.loc 1 2544 0
 13372 3e4e 8D5003   		leal	3(%rax), %edx
2543:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13373              		.loc 1 2543 0
 13374 3e51 8D4804   		leal	4(%rax), %ecx
2542:src/vm3.c     **** nPC  += 4;
 13375              		.loc 1 2542 0
 13376 3e54 89050000 		movl	%eax, PC(%rip)
 13376      0000
2544:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13377              		.loc 1 2544 0
 13378 3e5a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13378      00000000 
 13379 3e62 89C2     		movl	%eax, %edx
2557:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13380              		.loc 1 2557 0
 13381 3e64 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13381      000000
 13382              	.LVL719:
2544:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13383              		.loc 1 2544 0
 13384 3e6b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13384      000000
2543:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13385              		.loc 1 2543 0
 13386 3e72 890D0000 		movl	%ecx, nPC(%rip)
 13386      0000
2557:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13387              		.loc 1 2557 0
 13388 3e78 8D4805   		leal	5(%rax), %ecx
 13389 3e7b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13389      000000
2544:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 598


 13390              		.loc 1 2544 0
 13391 3e82 C1E218   		sall	$24, %edx
 13392 3e85 4109D0   		orl	%edx, %r8d
 13393 3e88 8D5001   		leal	1(%rax), %edx
 13394 3e8b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13394      000000
 13395 3e92 C1E210   		sall	$16, %edx
 13396 3e95 4109D0   		orl	%edx, %r8d
 13397 3e98 8D5002   		leal	2(%rax), %edx
 13398 3e9b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13398      000000
 13399 3ea2 C1E208   		sall	$8, %edx
 13400 3ea5 4109D0   		orl	%edx, %r8d
 13401              	.LVL720:
2545:src/vm3.c     ****   if (op0 == 0x0) {
 13402              		.loc 1 2545 0
 13403 3ea8 4489C6   		movl	%r8d, %esi
2547:src/vm3.c     ****     op0 = op0 + funct;
 13404              		.loc 1 2547 0
 13405 3eab 4488C2   		movb	%r8b, %dl
2545:src/vm3.c     ****   if (op0 == 0x0) {
 13406              		.loc 1 2545 0
 13407 3eae C1EE1A   		shrl	$26, %esi
 13408              	.LVL721:
2547:src/vm3.c     ****     op0 = op0 + funct;
 13409              		.loc 1 2547 0
 13410 3eb1 83E23F   		andl	$63, %edx
 13411 3eb4 8D7E2B   		leal	43(%rsi), %edi
 13412 3eb7 4084F6   		testb	%sil, %sil
 13413 3eba 0F45D7   		cmovne	%edi, %edx
 13414              	.LVL722:
2557:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13415              		.loc 1 2557 0
 13416 3ebd C1E110   		sall	$16, %ecx
 13417 3ec0 C1E318   		sall	$24, %ebx
 13418 3ec3 09CB     		orl	%ecx, %ebx
 13419 3ec5 8D4807   		leal	7(%rax), %ecx
 13420 3ec8 83C006   		addl	$6, %eax
 13421 3ecb 0FB68000 		movzbl	VM_memory(%rax), %eax
 13421      000000
2555:src/vm3.c     **** 
 13422              		.loc 1 2555 0
 13423 3ed2 0FB6D2   		movzbl	%dl, %edx
2557:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13424              		.loc 1 2557 0
 13425 3ed5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13425      000000
2555:src/vm3.c     **** 
 13426              		.loc 1 2555 0
 13427 3edc 48C1E204 		salq	$4, %rdx
 13428              	.LVL723:
2557:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13429              		.loc 1 2557 0
 13430 3ee0 C1E008   		sall	$8, %eax
 13431 3ee3 09CB     		orl	%ecx, %ebx
 13432 3ee5 09C3     		orl	%eax, %ebx
 13433              	.LVL724:
GAS LISTING /tmp/cc15eBE3.s 			page 599


2558:src/vm3.c     ****   if (op1 == 0x0) {
 13434              		.loc 1 2558 0
 13435 3ee7 89D9     		movl	%ebx, %ecx
2560:src/vm3.c     ****     op1 = op1 + funct;
 13436              		.loc 1 2560 0
 13437 3ee9 88D8     		movb	%bl, %al
2558:src/vm3.c     ****   if (op1 == 0x0) {
 13438              		.loc 1 2558 0
 13439 3eeb C1E91A   		shrl	$26, %ecx
 13440              	.LVL725:
2560:src/vm3.c     ****     op1 = op1 + funct;
 13441              		.loc 1 2560 0
 13442 3eee 83E03F   		andl	$63, %eax
 13443 3ef1 8D712B   		leal	43(%rcx), %esi
 13444 3ef4 84C9     		testb	%cl, %cl
 13445 3ef6 0F45C6   		cmovne	%esi, %eax
 13446              	.LVL726:
2567:src/vm3.c     **** 
 13447              		.loc 1 2567 0
 13448 3ef9 0FB6C0   		movzbl	%al, %eax
 13449 3efc 48C1E004 		salq	$4, %rax
 13450              	.LVL727:
 13451 3f00 48038414 		addq	58088(%rsp,%rdx), %rax
 13451      E8E20000 
 13452 3f08 488B08   		movq	(%rax), %rcx
 13453 3f0b E948CEFF 		jmp	.L269
 13453      FF
 13454              	.LVL728:
 13455              	.L259:
2575:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13456              		.loc 1 2575 0
 13457 3f10 4489C2   		movl	%r8d, %edx
2578:src/vm3.c     **** PC  =  nPC;
 13458              		.loc 1 2578 0
 13459 3f13 410FBFC0 		movswl	%r8w, %eax
2576:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13460              		.loc 1 2576 0
 13461 3f17 41C1E810 		shrl	$16, %r8d
 13462              	.LVL729:
2575:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13463              		.loc 1 2575 0
 13464 3f1b C1EA15   		shrl	$21, %edx
 13465              	.LVL730:
2578:src/vm3.c     **** PC  =  nPC;
 13466              		.loc 1 2578 0
 13467 3f1e 4183E01F 		andl	$31, %r8d
 13468 3f22 83E21F   		andl	$31, %edx
 13469 3f25 03049500 		addl	RF(,%rdx,4), %eax
 13469      000000
 13470              	.LVL731:
 13471 3f2c FFC0     		incl	%eax
 13472 3f2e 0FB68000 		movzbl	VM_memory(%rax), %eax
 13472      000000
 13473 3f35 42890485 		movl	%eax, RF(,%r8,4)
 13473      00000000 
2579:src/vm3.c     **** nPC  += 4;
 13474              		.loc 1 2579 0
GAS LISTING /tmp/cc15eBE3.s 			page 600


 13475 3f3d 8B050000 		movl	nPC(%rip), %eax
 13475      0000
2581:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13476              		.loc 1 2581 0
 13477 3f43 8D5003   		leal	3(%rax), %edx
2580:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13478              		.loc 1 2580 0
 13479 3f46 8D4804   		leal	4(%rax), %ecx
2579:src/vm3.c     **** nPC  += 4;
 13480              		.loc 1 2579 0
 13481 3f49 89050000 		movl	%eax, PC(%rip)
 13481      0000
2581:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13482              		.loc 1 2581 0
 13483 3f4f 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13483      00000000 
 13484 3f57 89C2     		movl	%eax, %edx
2594:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13485              		.loc 1 2594 0
 13486 3f59 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13486      000000
 13487              	.LVL732:
2581:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13488              		.loc 1 2581 0
 13489 3f60 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13489      000000
2580:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13490              		.loc 1 2580 0
 13491 3f67 890D0000 		movl	%ecx, nPC(%rip)
 13491      0000
2594:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13492              		.loc 1 2594 0
 13493 3f6d 8D4805   		leal	5(%rax), %ecx
 13494 3f70 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13494      000000
2581:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13495              		.loc 1 2581 0
 13496 3f77 C1E218   		sall	$24, %edx
 13497 3f7a 4109D0   		orl	%edx, %r8d
 13498 3f7d 8D5001   		leal	1(%rax), %edx
 13499 3f80 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13499      000000
 13500 3f87 C1E210   		sall	$16, %edx
 13501 3f8a 4109D0   		orl	%edx, %r8d
 13502 3f8d 8D5002   		leal	2(%rax), %edx
 13503 3f90 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13503      000000
 13504 3f97 C1E208   		sall	$8, %edx
 13505 3f9a 4109D0   		orl	%edx, %r8d
 13506              	.LVL733:
2582:src/vm3.c     ****   if (op0 == 0x0) {
 13507              		.loc 1 2582 0
 13508 3f9d 4489C6   		movl	%r8d, %esi
2584:src/vm3.c     ****     op0 = op0 + funct;
 13509              		.loc 1 2584 0
 13510 3fa0 4488C2   		movb	%r8b, %dl
2582:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 601


 13511              		.loc 1 2582 0
 13512 3fa3 C1EE1A   		shrl	$26, %esi
 13513              	.LVL734:
2584:src/vm3.c     ****     op0 = op0 + funct;
 13514              		.loc 1 2584 0
 13515 3fa6 83E23F   		andl	$63, %edx
 13516 3fa9 8D7E2B   		leal	43(%rsi), %edi
 13517 3fac 4084F6   		testb	%sil, %sil
 13518 3faf 0F45D7   		cmovne	%edi, %edx
 13519              	.LVL735:
2594:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13520              		.loc 1 2594 0
 13521 3fb2 C1E110   		sall	$16, %ecx
 13522 3fb5 C1E318   		sall	$24, %ebx
 13523 3fb8 09CB     		orl	%ecx, %ebx
 13524 3fba 8D4807   		leal	7(%rax), %ecx
 13525 3fbd 83C006   		addl	$6, %eax
 13526 3fc0 0FB68000 		movzbl	VM_memory(%rax), %eax
 13526      000000
2592:src/vm3.c     **** 
 13527              		.loc 1 2592 0
 13528 3fc7 0FB6D2   		movzbl	%dl, %edx
2594:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13529              		.loc 1 2594 0
 13530 3fca 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13530      000000
2592:src/vm3.c     **** 
 13531              		.loc 1 2592 0
 13532 3fd1 48C1E204 		salq	$4, %rdx
 13533              	.LVL736:
2594:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13534              		.loc 1 2594 0
 13535 3fd5 C1E008   		sall	$8, %eax
 13536 3fd8 09CB     		orl	%ecx, %ebx
 13537 3fda 09C3     		orl	%eax, %ebx
 13538              	.LVL737:
2595:src/vm3.c     ****   if (op1 == 0x0) {
 13539              		.loc 1 2595 0
 13540 3fdc 89D9     		movl	%ebx, %ecx
2597:src/vm3.c     ****     op1 = op1 + funct;
 13541              		.loc 1 2597 0
 13542 3fde 88D8     		movb	%bl, %al
2595:src/vm3.c     ****   if (op1 == 0x0) {
 13543              		.loc 1 2595 0
 13544 3fe0 C1E91A   		shrl	$26, %ecx
 13545              	.LVL738:
2597:src/vm3.c     ****     op1 = op1 + funct;
 13546              		.loc 1 2597 0
 13547 3fe3 83E03F   		andl	$63, %eax
 13548 3fe6 8D712B   		leal	43(%rcx), %esi
 13549 3fe9 84C9     		testb	%cl, %cl
 13550 3feb 0F45C6   		cmovne	%esi, %eax
 13551              	.LVL739:
2604:src/vm3.c     **** 
 13552              		.loc 1 2604 0
 13553 3fee 0FB6C0   		movzbl	%al, %eax
 13554 3ff1 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 602


 13555              	.LVL740:
 13556 3ff5 48038414 		addq	58088(%rsp,%rdx), %rax
 13556      E8E20000 
 13557 3ffd 488B08   		movq	(%rax), %rcx
 13558 4000 E953CDFF 		jmp	.L269
 13558      FF
 13559              	.LVL741:
 13560              	.L261:
2612:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13561              		.loc 1 2612 0
 13562 4005 4489C2   		movl	%r8d, %edx
2615:src/vm3.c     **** PC  =  nPC;
 13563              		.loc 1 2615 0
 13564 4008 410FBFC0 		movswl	%r8w, %eax
2613:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13565              		.loc 1 2613 0
 13566 400c 41C1E810 		shrl	$16, %r8d
 13567              	.LVL742:
2612:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13568              		.loc 1 2612 0
 13569 4010 C1EA15   		shrl	$21, %edx
 13570              	.LVL743:
2615:src/vm3.c     **** PC  =  nPC;
 13571              		.loc 1 2615 0
 13572 4013 4183E01F 		andl	$31, %r8d
 13573 4017 83E21F   		andl	$31, %edx
 13574 401a 03049500 		addl	RF(,%rdx,4), %eax
 13574      000000
 13575              	.LVL744:
 13576 4021 FFC0     		incl	%eax
 13577 4023 0FB68000 		movzbl	VM_memory(%rax), %eax
 13577      000000
 13578 402a 42890485 		movl	%eax, RF(,%r8,4)
 13578      00000000 
2616:src/vm3.c     **** nPC  += 4;
 13579              		.loc 1 2616 0
 13580 4032 8B050000 		movl	nPC(%rip), %eax
 13580      0000
2618:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13581              		.loc 1 2618 0
 13582 4038 8D5003   		leal	3(%rax), %edx
2617:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13583              		.loc 1 2617 0
 13584 403b 8D4804   		leal	4(%rax), %ecx
2616:src/vm3.c     **** nPC  += 4;
 13585              		.loc 1 2616 0
 13586 403e 89050000 		movl	%eax, PC(%rip)
 13586      0000
2618:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13587              		.loc 1 2618 0
 13588 4044 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13588      00000000 
 13589 404c 89C2     		movl	%eax, %edx
2631:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13590              		.loc 1 2631 0
 13591 404e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13591      000000
GAS LISTING /tmp/cc15eBE3.s 			page 603


 13592              	.LVL745:
2618:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13593              		.loc 1 2618 0
 13594 4055 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13594      000000
2617:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13595              		.loc 1 2617 0
 13596 405c 890D0000 		movl	%ecx, nPC(%rip)
 13596      0000
2631:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13597              		.loc 1 2631 0
 13598 4062 8D4805   		leal	5(%rax), %ecx
 13599 4065 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13599      000000
2618:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13600              		.loc 1 2618 0
 13601 406c C1E218   		sall	$24, %edx
 13602 406f 4109D0   		orl	%edx, %r8d
 13603 4072 8D5001   		leal	1(%rax), %edx
 13604 4075 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13604      000000
 13605 407c C1E210   		sall	$16, %edx
 13606 407f 4109D0   		orl	%edx, %r8d
 13607 4082 8D5002   		leal	2(%rax), %edx
 13608 4085 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13608      000000
 13609 408c C1E208   		sall	$8, %edx
 13610 408f 4109D0   		orl	%edx, %r8d
 13611              	.LVL746:
2619:src/vm3.c     ****   if (op0 == 0x0) {
 13612              		.loc 1 2619 0
 13613 4092 4489C6   		movl	%r8d, %esi
2621:src/vm3.c     ****     op0 = op0 + funct;
 13614              		.loc 1 2621 0
 13615 4095 4488C2   		movb	%r8b, %dl
2619:src/vm3.c     ****   if (op0 == 0x0) {
 13616              		.loc 1 2619 0
 13617 4098 C1EE1A   		shrl	$26, %esi
 13618              	.LVL747:
2621:src/vm3.c     ****     op0 = op0 + funct;
 13619              		.loc 1 2621 0
 13620 409b 83E23F   		andl	$63, %edx
 13621 409e 8D7E2B   		leal	43(%rsi), %edi
 13622 40a1 4084F6   		testb	%sil, %sil
 13623 40a4 0F45D7   		cmovne	%edi, %edx
 13624              	.LVL748:
2631:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13625              		.loc 1 2631 0
 13626 40a7 C1E110   		sall	$16, %ecx
 13627 40aa C1E318   		sall	$24, %ebx
 13628 40ad 09CB     		orl	%ecx, %ebx
 13629 40af 8D4807   		leal	7(%rax), %ecx
 13630 40b2 83C006   		addl	$6, %eax
 13631 40b5 0FB68000 		movzbl	VM_memory(%rax), %eax
 13631      000000
2629:src/vm3.c     **** 
 13632              		.loc 1 2629 0
GAS LISTING /tmp/cc15eBE3.s 			page 604


 13633 40bc 0FB6D2   		movzbl	%dl, %edx
2631:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13634              		.loc 1 2631 0
 13635 40bf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13635      000000
2629:src/vm3.c     **** 
 13636              		.loc 1 2629 0
 13637 40c6 48C1E204 		salq	$4, %rdx
 13638              	.LVL749:
2631:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13639              		.loc 1 2631 0
 13640 40ca C1E008   		sall	$8, %eax
 13641 40cd 09CB     		orl	%ecx, %ebx
 13642 40cf 09C3     		orl	%eax, %ebx
 13643              	.LVL750:
2632:src/vm3.c     ****   if (op1 == 0x0) {
 13644              		.loc 1 2632 0
 13645 40d1 89D9     		movl	%ebx, %ecx
2634:src/vm3.c     ****     op1 = op1 + funct;
 13646              		.loc 1 2634 0
 13647 40d3 88D8     		movb	%bl, %al
2632:src/vm3.c     ****   if (op1 == 0x0) {
 13648              		.loc 1 2632 0
 13649 40d5 C1E91A   		shrl	$26, %ecx
 13650              	.LVL751:
2634:src/vm3.c     ****     op1 = op1 + funct;
 13651              		.loc 1 2634 0
 13652 40d8 83E03F   		andl	$63, %eax
 13653 40db 8D712B   		leal	43(%rcx), %esi
 13654 40de 84C9     		testb	%cl, %cl
 13655 40e0 0F45C6   		cmovne	%esi, %eax
 13656              	.LVL752:
2641:src/vm3.c     **** 
 13657              		.loc 1 2641 0
 13658 40e3 0FB6C0   		movzbl	%al, %eax
 13659 40e6 48C1E004 		salq	$4, %rax
 13660              	.LVL753:
 13661 40ea 48038414 		addq	58088(%rsp,%rdx), %rax
 13661      E8E20000 
 13662 40f2 488B08   		movq	(%rax), %rcx
 13663 40f5 E95ECCFF 		jmp	.L269
 13663      FF
 13664              	.LVL754:
 13665              	.L89:
2649:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13666              		.loc 1 2649 0
 13667 40fa 4489C0   		movl	%r8d, %eax
2652:src/vm3.c     **** PC  =  nPC;
 13668              		.loc 1 2652 0
 13669 40fd 410FBFD0 		movswl	%r8w, %edx
2650:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13670              		.loc 1 2650 0
 13671 4101 41C1E810 		shrl	$16, %r8d
 13672              	.LVL755:
2649:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13673              		.loc 1 2649 0
 13674 4105 C1E815   		shrl	$21, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 605


 13675              	.LVL756:
2652:src/vm3.c     **** PC  =  nPC;
 13676              		.loc 1 2652 0
 13677 4108 4183E01F 		andl	$31, %r8d
 13678 410c 83E01F   		andl	$31, %eax
 13679 410f 03148500 		addl	RF(,%rax,4), %edx
 13679      000000
 13680              	.LVL757:
 13681 4116 8D4203   		leal	3(%rdx), %eax
 13682 4119 89D1     		movl	%edx, %ecx
 13683 411b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13683      000000
 13684 4122 0FB68000 		movzbl	VM_memory(%rax), %eax
 13684      000000
 13685 4129 C1E118   		sall	$24, %ecx
 13686 412c 09C8     		orl	%ecx, %eax
 13687 412e 8D4A01   		leal	1(%rdx), %ecx
 13688 4131 83C202   		addl	$2, %edx
 13689 4134 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13689      000000
 13690 413b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13690      000000
 13691 4142 C1E208   		sall	$8, %edx
 13692 4145 C1E110   		sall	$16, %ecx
 13693 4148 09C8     		orl	%ecx, %eax
 13694 414a 09D0     		orl	%edx, %eax
 13695 414c 42890485 		movl	%eax, RF(,%r8,4)
 13695      00000000 
2653:src/vm3.c     **** nPC  += 4;
 13696              		.loc 1 2653 0
 13697 4154 8B050000 		movl	nPC(%rip), %eax
 13697      0000
2655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13698              		.loc 1 2655 0
 13699 415a 8D5003   		leal	3(%rax), %edx
2654:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13700              		.loc 1 2654 0
 13701 415d 8D4804   		leal	4(%rax), %ecx
2653:src/vm3.c     **** nPC  += 4;
 13702              		.loc 1 2653 0
 13703 4160 89050000 		movl	%eax, PC(%rip)
 13703      0000
2655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13704              		.loc 1 2655 0
 13705 4166 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13705      00000000 
 13706 416e 89C2     		movl	%eax, %edx
2668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13707              		.loc 1 2668 0
 13708 4170 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13708      000000
 13709              	.LVL758:
2655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13710              		.loc 1 2655 0
 13711 4177 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13711      000000
2654:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 606


 13712              		.loc 1 2654 0
 13713 417e 890D0000 		movl	%ecx, nPC(%rip)
 13713      0000
2668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13714              		.loc 1 2668 0
 13715 4184 8D4805   		leal	5(%rax), %ecx
 13716 4187 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13716      000000
2655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13717              		.loc 1 2655 0
 13718 418e C1E218   		sall	$24, %edx
 13719 4191 4109D0   		orl	%edx, %r8d
 13720 4194 8D5001   		leal	1(%rax), %edx
 13721 4197 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13721      000000
 13722 419e C1E210   		sall	$16, %edx
 13723 41a1 4109D0   		orl	%edx, %r8d
 13724 41a4 8D5002   		leal	2(%rax), %edx
 13725 41a7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13725      000000
 13726 41ae C1E208   		sall	$8, %edx
 13727 41b1 4109D0   		orl	%edx, %r8d
 13728              	.LVL759:
2656:src/vm3.c     ****   if (op0 == 0x0) {
 13729              		.loc 1 2656 0
 13730 41b4 4489C6   		movl	%r8d, %esi
2658:src/vm3.c     ****     op0 = op0 + funct;
 13731              		.loc 1 2658 0
 13732 41b7 4488C2   		movb	%r8b, %dl
2656:src/vm3.c     ****   if (op0 == 0x0) {
 13733              		.loc 1 2656 0
 13734 41ba C1EE1A   		shrl	$26, %esi
 13735              	.LVL760:
2658:src/vm3.c     ****     op0 = op0 + funct;
 13736              		.loc 1 2658 0
 13737 41bd 83E23F   		andl	$63, %edx
 13738 41c0 8D7E2B   		leal	43(%rsi), %edi
 13739 41c3 4084F6   		testb	%sil, %sil
 13740 41c6 0F45D7   		cmovne	%edi, %edx
 13741              	.LVL761:
2668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13742              		.loc 1 2668 0
 13743 41c9 C1E110   		sall	$16, %ecx
 13744 41cc C1E318   		sall	$24, %ebx
 13745 41cf 09CB     		orl	%ecx, %ebx
 13746 41d1 8D4807   		leal	7(%rax), %ecx
 13747 41d4 83C006   		addl	$6, %eax
 13748 41d7 0FB68000 		movzbl	VM_memory(%rax), %eax
 13748      000000
2666:src/vm3.c     **** 
 13749              		.loc 1 2666 0
 13750 41de 0FB6D2   		movzbl	%dl, %edx
2668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13751              		.loc 1 2668 0
 13752 41e1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13752      000000
2666:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 607


 13753              		.loc 1 2666 0
 13754 41e8 48C1E204 		salq	$4, %rdx
 13755              	.LVL762:
2668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13756              		.loc 1 2668 0
 13757 41ec C1E008   		sall	$8, %eax
 13758 41ef 09CB     		orl	%ecx, %ebx
 13759 41f1 09C3     		orl	%eax, %ebx
 13760              	.LVL763:
2669:src/vm3.c     ****   if (op1 == 0x0) {
 13761              		.loc 1 2669 0
 13762 41f3 89D9     		movl	%ebx, %ecx
2671:src/vm3.c     ****     op1 = op1 + funct;
 13763              		.loc 1 2671 0
 13764 41f5 88D8     		movb	%bl, %al
2669:src/vm3.c     ****   if (op1 == 0x0) {
 13765              		.loc 1 2669 0
 13766 41f7 C1E91A   		shrl	$26, %ecx
 13767              	.LVL764:
2671:src/vm3.c     ****     op1 = op1 + funct;
 13768              		.loc 1 2671 0
 13769 41fa 83E03F   		andl	$63, %eax
 13770 41fd 8D712B   		leal	43(%rcx), %esi
 13771 4200 84C9     		testb	%cl, %cl
 13772 4202 0F45C6   		cmovne	%esi, %eax
 13773              	.LVL765:
2678:src/vm3.c     **** 
 13774              		.loc 1 2678 0
 13775 4205 0FB6C0   		movzbl	%al, %eax
 13776 4208 48C1E004 		salq	$4, %rax
 13777              	.LVL766:
 13778 420c 48038414 		addq	58088(%rsp,%rdx), %rax
 13778      E8E20000 
 13779 4214 488B08   		movq	(%rax), %rcx
 13780 4217 E93CCBFF 		jmp	.L269
 13780      FF
 13781              	.LVL767:
 13782              	.L74:
2686:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13783              		.loc 1 2686 0
 13784 421c 4489C2   		movl	%r8d, %edx
2689:src/vm3.c     **** PC  =  nPC;
 13785              		.loc 1 2689 0
 13786 421f 410FBFC0 		movswl	%r8w, %eax
2687:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13787              		.loc 1 2687 0
 13788 4223 41C1E810 		shrl	$16, %r8d
 13789              	.LVL768:
2686:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13790              		.loc 1 2686 0
 13791 4227 C1EA15   		shrl	$21, %edx
 13792              	.LVL769:
2689:src/vm3.c     **** PC  =  nPC;
 13793              		.loc 1 2689 0
 13794 422a 4183E01F 		andl	$31, %r8d
 13795 422e 83E21F   		andl	$31, %edx
 13796 4231 03049500 		addl	RF(,%rdx,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 608


 13796      000000
 13797              	.LVL770:
 13798 4238 428B1485 		movl	RF(,%r8,4), %edx
 13798      00000000 
 13799 4240 88900000 		movb	%dl, VM_memory(%rax)
 13799      0000
2690:src/vm3.c     **** nPC  += 4;
 13800              		.loc 1 2690 0
 13801 4246 8B050000 		movl	nPC(%rip), %eax
 13801      0000
2692:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13802              		.loc 1 2692 0
 13803 424c 8D5003   		leal	3(%rax), %edx
2691:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13804              		.loc 1 2691 0
 13805 424f 8D4804   		leal	4(%rax), %ecx
2690:src/vm3.c     **** nPC  += 4;
 13806              		.loc 1 2690 0
 13807 4252 89050000 		movl	%eax, PC(%rip)
 13807      0000
2692:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13808              		.loc 1 2692 0
 13809 4258 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13809      00000000 
 13810 4260 89C2     		movl	%eax, %edx
2705:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13811              		.loc 1 2705 0
 13812 4262 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13812      000000
 13813              	.LVL771:
2692:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13814              		.loc 1 2692 0
 13815 4269 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13815      000000
2691:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13816              		.loc 1 2691 0
 13817 4270 890D0000 		movl	%ecx, nPC(%rip)
 13817      0000
2705:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13818              		.loc 1 2705 0
 13819 4276 8D4805   		leal	5(%rax), %ecx
 13820 4279 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13820      000000
2692:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13821              		.loc 1 2692 0
 13822 4280 C1E218   		sall	$24, %edx
 13823 4283 4109D0   		orl	%edx, %r8d
 13824 4286 8D5001   		leal	1(%rax), %edx
 13825 4289 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13825      000000
 13826 4290 C1E210   		sall	$16, %edx
 13827 4293 4109D0   		orl	%edx, %r8d
 13828 4296 8D5002   		leal	2(%rax), %edx
 13829 4299 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13829      000000
 13830 42a0 C1E208   		sall	$8, %edx
 13831 42a3 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 609


 13832              	.LVL772:
2693:src/vm3.c     ****   if (op0 == 0x0) {
 13833              		.loc 1 2693 0
 13834 42a6 4489C6   		movl	%r8d, %esi
2695:src/vm3.c     ****     op0 = op0 + funct;
 13835              		.loc 1 2695 0
 13836 42a9 4488C2   		movb	%r8b, %dl
2693:src/vm3.c     ****   if (op0 == 0x0) {
 13837              		.loc 1 2693 0
 13838 42ac C1EE1A   		shrl	$26, %esi
 13839              	.LVL773:
2695:src/vm3.c     ****     op0 = op0 + funct;
 13840              		.loc 1 2695 0
 13841 42af 83E23F   		andl	$63, %edx
 13842 42b2 8D7E2B   		leal	43(%rsi), %edi
 13843 42b5 4084F6   		testb	%sil, %sil
 13844 42b8 0F45D7   		cmovne	%edi, %edx
 13845              	.LVL774:
2705:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13846              		.loc 1 2705 0
 13847 42bb C1E110   		sall	$16, %ecx
 13848 42be C1E318   		sall	$24, %ebx
 13849 42c1 09CB     		orl	%ecx, %ebx
 13850 42c3 8D4807   		leal	7(%rax), %ecx
 13851 42c6 83C006   		addl	$6, %eax
 13852 42c9 0FB68000 		movzbl	VM_memory(%rax), %eax
 13852      000000
2703:src/vm3.c     **** 
 13853              		.loc 1 2703 0
 13854 42d0 0FB6D2   		movzbl	%dl, %edx
2705:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13855              		.loc 1 2705 0
 13856 42d3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13856      000000
2703:src/vm3.c     **** 
 13857              		.loc 1 2703 0
 13858 42da 48C1E204 		salq	$4, %rdx
 13859              	.LVL775:
2705:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13860              		.loc 1 2705 0
 13861 42de C1E008   		sall	$8, %eax
 13862 42e1 09CB     		orl	%ecx, %ebx
 13863 42e3 09C3     		orl	%eax, %ebx
 13864              	.LVL776:
2706:src/vm3.c     ****   if (op1 == 0x0) {
 13865              		.loc 1 2706 0
 13866 42e5 89D9     		movl	%ebx, %ecx
2708:src/vm3.c     ****     op1 = op1 + funct;
 13867              		.loc 1 2708 0
 13868 42e7 88D8     		movb	%bl, %al
2706:src/vm3.c     ****   if (op1 == 0x0) {
 13869              		.loc 1 2706 0
 13870 42e9 C1E91A   		shrl	$26, %ecx
 13871              	.LVL777:
2708:src/vm3.c     ****     op1 = op1 + funct;
 13872              		.loc 1 2708 0
 13873 42ec 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 610


 13874 42ef 8D712B   		leal	43(%rcx), %esi
 13875 42f2 84C9     		testb	%cl, %cl
 13876 42f4 0F45C6   		cmovne	%esi, %eax
 13877              	.LVL778:
2715:src/vm3.c     **** 
 13878              		.loc 1 2715 0
 13879 42f7 0FB6C0   		movzbl	%al, %eax
 13880 42fa 48C1E004 		salq	$4, %rax
 13881              	.LVL779:
 13882 42fe 48038414 		addq	58088(%rsp,%rdx), %rax
 13882      E8E20000 
 13883 4306 488B08   		movq	(%rax), %rcx
 13884 4309 E94ACAFF 		jmp	.L269
 13884      FF
 13885              	.LVL780:
 13886              	.L224:
2723:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13887              		.loc 1 2723 0
 13888 430e 4489C0   		movl	%r8d, %eax
2726:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 13889              		.loc 1 2726 0
 13890 4311 410FBFC8 		movswl	%r8w, %ecx
2724:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 13891              		.loc 1 2724 0
 13892 4315 41C1E810 		shrl	$16, %r8d
 13893              	.LVL781:
2723:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13894              		.loc 1 2723 0
 13895 4319 C1E815   		shrl	$21, %eax
 13896              	.LVL782:
2726:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 13897              		.loc 1 2726 0
 13898 431c 4183E01F 		andl	$31, %r8d
 13899 4320 83E01F   		andl	$31, %eax
 13900 4323 8B148500 		movl	RF(,%rax,4), %edx
 13900      000000
 13901 432a 428B0485 		movl	RF(,%r8,4), %eax
 13901      00000000 
 13902 4332 8D3411   		leal	(%rcx,%rdx), %esi
2727:src/vm3.c     **** PC  =  nPC;
 13903              		.loc 1 2727 0
 13904 4335 8D541101 		leal	1(%rcx,%rdx), %edx
2726:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 13905              		.loc 1 2726 0
 13906 4339 0FB6FC   		movzbl	%ah, %edi
 13907 433c 4088BE00 		movb	%dil, VM_memory(%rsi)
 13907      000000
2727:src/vm3.c     **** PC  =  nPC;
 13908              		.loc 1 2727 0
 13909 4343 88820000 		movb	%al, VM_memory(%rdx)
 13909      0000
2728:src/vm3.c     **** nPC  += 4;
 13910              		.loc 1 2728 0
 13911 4349 8B050000 		movl	nPC(%rip), %eax
 13911      0000
2730:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13912              		.loc 1 2730 0
GAS LISTING /tmp/cc15eBE3.s 			page 611


 13913 434f 8D5003   		leal	3(%rax), %edx
2729:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13914              		.loc 1 2729 0
 13915 4352 8D4804   		leal	4(%rax), %ecx
 13916              	.LVL783:
2728:src/vm3.c     **** nPC  += 4;
 13917              		.loc 1 2728 0
 13918 4355 89050000 		movl	%eax, PC(%rip)
 13918      0000
2730:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13919              		.loc 1 2730 0
 13920 435b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 13920      00000000 
 13921 4363 89C2     		movl	%eax, %edx
2743:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13922              		.loc 1 2743 0
 13923 4365 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 13923      000000
 13924              	.LVL784:
2730:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13925              		.loc 1 2730 0
 13926 436c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13926      000000
2729:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 13927              		.loc 1 2729 0
 13928 4373 890D0000 		movl	%ecx, nPC(%rip)
 13928      0000
2743:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13929              		.loc 1 2743 0
 13930 4379 8D4805   		leal	5(%rax), %ecx
 13931 437c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13931      000000
2730:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 13932              		.loc 1 2730 0
 13933 4383 C1E218   		sall	$24, %edx
 13934 4386 4109D0   		orl	%edx, %r8d
 13935 4389 8D5001   		leal	1(%rax), %edx
 13936 438c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13936      000000
 13937 4393 C1E210   		sall	$16, %edx
 13938 4396 4109D0   		orl	%edx, %r8d
 13939 4399 8D5002   		leal	2(%rax), %edx
 13940 439c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 13940      000000
 13941 43a3 C1E208   		sall	$8, %edx
 13942 43a6 4109D0   		orl	%edx, %r8d
 13943              	.LVL785:
2731:src/vm3.c     ****   if (op0 == 0x0) {
 13944              		.loc 1 2731 0
 13945 43a9 4489C6   		movl	%r8d, %esi
2733:src/vm3.c     ****     op0 = op0 + funct;
 13946              		.loc 1 2733 0
 13947 43ac 4488C2   		movb	%r8b, %dl
2731:src/vm3.c     ****   if (op0 == 0x0) {
 13948              		.loc 1 2731 0
 13949 43af C1EE1A   		shrl	$26, %esi
 13950              	.LVL786:
GAS LISTING /tmp/cc15eBE3.s 			page 612


2733:src/vm3.c     ****     op0 = op0 + funct;
 13951              		.loc 1 2733 0
 13952 43b2 83E23F   		andl	$63, %edx
 13953 43b5 8D7E2B   		leal	43(%rsi), %edi
 13954 43b8 4084F6   		testb	%sil, %sil
 13955 43bb 0F45D7   		cmovne	%edi, %edx
 13956              	.LVL787:
2743:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13957              		.loc 1 2743 0
 13958 43be C1E110   		sall	$16, %ecx
 13959 43c1 C1E318   		sall	$24, %ebx
 13960 43c4 09CB     		orl	%ecx, %ebx
 13961 43c6 8D4807   		leal	7(%rax), %ecx
 13962 43c9 83C006   		addl	$6, %eax
 13963 43cc 0FB68000 		movzbl	VM_memory(%rax), %eax
 13963      000000
2741:src/vm3.c     **** 
 13964              		.loc 1 2741 0
 13965 43d3 0FB6D2   		movzbl	%dl, %edx
2743:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13966              		.loc 1 2743 0
 13967 43d6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 13967      000000
2741:src/vm3.c     **** 
 13968              		.loc 1 2741 0
 13969 43dd 48C1E204 		salq	$4, %rdx
 13970              	.LVL788:
2743:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 13971              		.loc 1 2743 0
 13972 43e1 C1E008   		sall	$8, %eax
 13973 43e4 09CB     		orl	%ecx, %ebx
 13974 43e6 09C3     		orl	%eax, %ebx
 13975              	.LVL789:
2744:src/vm3.c     ****   if (op1 == 0x0) {
 13976              		.loc 1 2744 0
 13977 43e8 89D9     		movl	%ebx, %ecx
2746:src/vm3.c     ****     op1 = op1 + funct;
 13978              		.loc 1 2746 0
 13979 43ea 88D8     		movb	%bl, %al
2744:src/vm3.c     ****   if (op1 == 0x0) {
 13980              		.loc 1 2744 0
 13981 43ec C1E91A   		shrl	$26, %ecx
 13982              	.LVL790:
2746:src/vm3.c     ****     op1 = op1 + funct;
 13983              		.loc 1 2746 0
 13984 43ef 83E03F   		andl	$63, %eax
 13985 43f2 8D712B   		leal	43(%rcx), %esi
 13986 43f5 84C9     		testb	%cl, %cl
 13987 43f7 0F45C6   		cmovne	%esi, %eax
 13988              	.LVL791:
2753:src/vm3.c     **** 
 13989              		.loc 1 2753 0
 13990 43fa 0FB6C0   		movzbl	%al, %eax
 13991 43fd 48C1E004 		salq	$4, %rax
 13992              	.LVL792:
 13993 4401 48038414 		addq	58088(%rsp,%rdx), %rax
 13993      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 613


 13994 4409 488B08   		movq	(%rax), %rcx
 13995 440c E947C9FF 		jmp	.L269
 13995      FF
 13996              	.LVL793:
 13997              	.L179:
2761:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 13998              		.loc 1 2761 0
 13999 4411 4489C0   		movl	%r8d, %eax
2764:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 14000              		.loc 1 2764 0
 14001 4414 410FBFC8 		movswl	%r8w, %ecx
2762:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14002              		.loc 1 2762 0
 14003 4418 41C1E810 		shrl	$16, %r8d
 14004              	.LVL794:
2761:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14005              		.loc 1 2761 0
 14006 441c C1E815   		shrl	$21, %eax
 14007              	.LVL795:
2764:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 14008              		.loc 1 2764 0
 14009 441f 4183E01F 		andl	$31, %r8d
 14010 4423 83E01F   		andl	$31, %eax
 14011 4426 8B148500 		movl	RF(,%rax,4), %edx
 14011      000000
 14012 442d 428B0485 		movl	RF(,%r8,4), %eax
 14012      00000000 
 14013 4435 8D3411   		leal	(%rcx,%rdx), %esi
 14014 4438 89C7     		movl	%eax, %edi
 14015 443a C1EF18   		shrl	$24, %edi
 14016 443d 4088BE00 		movb	%dil, VM_memory(%rsi)
 14016      000000
2765:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 14017              		.loc 1 2765 0
 14018 4444 8D741101 		leal	1(%rcx,%rdx), %esi
 14019 4448 89C7     		movl	%eax, %edi
 14020 444a C1EF10   		shrl	$16, %edi
 14021 444d 4088BE00 		movb	%dil, VM_memory(%rsi)
 14021      000000
2766:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 14022              		.loc 1 2766 0
 14023 4454 8D741102 		leal	2(%rcx,%rdx), %esi
2767:src/vm3.c     **** PC  =  nPC;
 14024              		.loc 1 2767 0
 14025 4458 8D541103 		leal	3(%rcx,%rdx), %edx
2766:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 14026              		.loc 1 2766 0
 14027 445c 0FB6FC   		movzbl	%ah, %edi
 14028 445f 4088BE00 		movb	%dil, VM_memory(%rsi)
 14028      000000
2767:src/vm3.c     **** PC  =  nPC;
 14029              		.loc 1 2767 0
 14030 4466 88820000 		movb	%al, VM_memory(%rdx)
 14030      0000
2768:src/vm3.c     **** nPC  += 4;
 14031              		.loc 1 2768 0
 14032 446c 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 614


 14032      0000
2770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14033              		.loc 1 2770 0
 14034 4472 8D5003   		leal	3(%rax), %edx
2769:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14035              		.loc 1 2769 0
 14036 4475 8D4804   		leal	4(%rax), %ecx
 14037              	.LVL796:
2768:src/vm3.c     **** nPC  += 4;
 14038              		.loc 1 2768 0
 14039 4478 89050000 		movl	%eax, PC(%rip)
 14039      0000
2770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14040              		.loc 1 2770 0
 14041 447e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14041      00000000 
 14042 4486 89C2     		movl	%eax, %edx
2783:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14043              		.loc 1 2783 0
 14044 4488 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14044      000000
 14045              	.LVL797:
2770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14046              		.loc 1 2770 0
 14047 448f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14047      000000
2769:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14048              		.loc 1 2769 0
 14049 4496 890D0000 		movl	%ecx, nPC(%rip)
 14049      0000
2783:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14050              		.loc 1 2783 0
 14051 449c 8D4805   		leal	5(%rax), %ecx
 14052 449f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14052      000000
2770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14053              		.loc 1 2770 0
 14054 44a6 C1E218   		sall	$24, %edx
 14055 44a9 4109D0   		orl	%edx, %r8d
 14056 44ac 8D5001   		leal	1(%rax), %edx
 14057 44af 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14057      000000
 14058 44b6 C1E210   		sall	$16, %edx
 14059 44b9 4109D0   		orl	%edx, %r8d
 14060 44bc 8D5002   		leal	2(%rax), %edx
 14061 44bf 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14061      000000
 14062 44c6 C1E208   		sall	$8, %edx
 14063 44c9 4109D0   		orl	%edx, %r8d
 14064              	.LVL798:
2771:src/vm3.c     ****   if (op0 == 0x0) {
 14065              		.loc 1 2771 0
 14066 44cc 4489C6   		movl	%r8d, %esi
2773:src/vm3.c     ****     op0 = op0 + funct;
 14067              		.loc 1 2773 0
 14068 44cf 4488C2   		movb	%r8b, %dl
2771:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 615


 14069              		.loc 1 2771 0
 14070 44d2 C1EE1A   		shrl	$26, %esi
 14071              	.LVL799:
2773:src/vm3.c     ****     op0 = op0 + funct;
 14072              		.loc 1 2773 0
 14073 44d5 83E23F   		andl	$63, %edx
 14074 44d8 8D7E2B   		leal	43(%rsi), %edi
 14075 44db 4084F6   		testb	%sil, %sil
 14076 44de 0F45D7   		cmovne	%edi, %edx
 14077              	.LVL800:
2783:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14078              		.loc 1 2783 0
 14079 44e1 C1E110   		sall	$16, %ecx
 14080 44e4 C1E318   		sall	$24, %ebx
 14081 44e7 09CB     		orl	%ecx, %ebx
 14082 44e9 8D4807   		leal	7(%rax), %ecx
 14083 44ec 83C006   		addl	$6, %eax
 14084 44ef 0FB68000 		movzbl	VM_memory(%rax), %eax
 14084      000000
2781:src/vm3.c     **** 
 14085              		.loc 1 2781 0
 14086 44f6 0FB6D2   		movzbl	%dl, %edx
2783:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14087              		.loc 1 2783 0
 14088 44f9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14088      000000
2781:src/vm3.c     **** 
 14089              		.loc 1 2781 0
 14090 4500 48C1E204 		salq	$4, %rdx
 14091              	.LVL801:
2783:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14092              		.loc 1 2783 0
 14093 4504 C1E008   		sall	$8, %eax
 14094 4507 09CB     		orl	%ecx, %ebx
 14095 4509 09C3     		orl	%eax, %ebx
 14096              	.LVL802:
2784:src/vm3.c     ****   if (op1 == 0x0) {
 14097              		.loc 1 2784 0
 14098 450b 89D9     		movl	%ebx, %ecx
2786:src/vm3.c     ****     op1 = op1 + funct;
 14099              		.loc 1 2786 0
 14100 450d 88D8     		movb	%bl, %al
2784:src/vm3.c     ****   if (op1 == 0x0) {
 14101              		.loc 1 2784 0
 14102 450f C1E91A   		shrl	$26, %ecx
 14103              	.LVL803:
2786:src/vm3.c     ****     op1 = op1 + funct;
 14104              		.loc 1 2786 0
 14105 4512 83E03F   		andl	$63, %eax
 14106 4515 8D712B   		leal	43(%rcx), %esi
 14107 4518 84C9     		testb	%cl, %cl
 14108 451a 0F45C6   		cmovne	%esi, %eax
 14109              	.LVL804:
2793:src/vm3.c     **** 
 14110              		.loc 1 2793 0
 14111 451d 0FB6C0   		movzbl	%al, %eax
 14112 4520 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 616


 14113              	.LVL805:
 14114 4524 48038414 		addq	58088(%rsp,%rdx), %rax
 14114      E8E20000 
 14115 452c 488B08   		movq	(%rax), %rcx
 14116 452f E924C8FF 		jmp	.L269
 14116      FF
 14117              	.LVL806:
 14118              	.L196:
2801:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 14119              		.loc 1 2801 0
 14120 4534 8B150000 		movl	nPC(%rip), %edx
 14120      0000
2802:src/vm3.c     **** nPC = address << 2;
 14121              		.loc 1 2802 0
 14122 453a 4181E0FF 		andl	$67108863, %r8d
 14122      FFFF03
 14123              	.LVL807:
2803:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14124              		.loc 1 2803 0
 14125 4541 428D0485 		leal	0(,%r8,4), %eax
 14125      00000000 
2804:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14126              		.loc 1 2804 0
 14127 4549 8D4A03   		leal	3(%rdx), %ecx
2801:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 14128              		.loc 1 2801 0
 14129 454c 89150000 		movl	%edx, PC(%rip)
 14129      0000
2803:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14130              		.loc 1 2803 0
 14131 4552 89050000 		movl	%eax, nPC(%rip)
 14131      0000
2804:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14132              		.loc 1 2804 0
 14133 4558 440FB681 		movzbl	VM_memory(%rcx), %r8d
 14133      00000000 
 14134 4560 89D1     		movl	%edx, %ecx
 14135 4562 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14135      000000
 14136 4569 C1E118   		sall	$24, %ecx
 14137 456c 4109C8   		orl	%ecx, %r8d
 14138 456f 8D4A01   		leal	1(%rdx), %ecx
 14139 4572 83C202   		addl	$2, %edx
 14140 4575 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14140      000000
 14141 457c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14141      000000
 14142 4583 C1E208   		sall	$8, %edx
 14143 4586 C1E110   		sall	$16, %ecx
 14144 4589 4109C8   		orl	%ecx, %r8d
 14145 458c 4109D0   		orl	%edx, %r8d
 14146              	.LVL808:
2805:src/vm3.c     ****   if (op0 == 0x0) {
 14147              		.loc 1 2805 0
 14148 458f 4489C1   		movl	%r8d, %ecx
2807:src/vm3.c     ****     op0 = op0 + funct;
 14149              		.loc 1 2807 0
GAS LISTING /tmp/cc15eBE3.s 			page 617


 14150 4592 4488C2   		movb	%r8b, %dl
2805:src/vm3.c     ****   if (op0 == 0x0) {
 14151              		.loc 1 2805 0
 14152 4595 C1E91A   		shrl	$26, %ecx
 14153              	.LVL809:
2807:src/vm3.c     ****     op0 = op0 + funct;
 14154              		.loc 1 2807 0
 14155 4598 83E23F   		andl	$63, %edx
 14156 459b 8D712B   		leal	43(%rcx), %esi
 14157 459e 84C9     		testb	%cl, %cl
2817:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14158              		.loc 1 2817 0
 14159 45a0 8D4803   		leal	3(%rax), %ecx
 14160              	.LVL810:
 14161 45a3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14161      000000
 14162              	.LVL811:
 14163 45aa 89C1     		movl	%eax, %ecx
2807:src/vm3.c     ****     op0 = op0 + funct;
 14164              		.loc 1 2807 0
 14165 45ac 0F45D6   		cmovne	%esi, %edx
 14166              	.LVL812:
2817:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14167              		.loc 1 2817 0
 14168 45af 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14168      000000
2815:src/vm3.c     **** 
 14169              		.loc 1 2815 0
 14170 45b6 0FB6D2   		movzbl	%dl, %edx
 14171 45b9 48C1E204 		salq	$4, %rdx
 14172              	.LVL813:
2817:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14173              		.loc 1 2817 0
 14174 45bd C1E118   		sall	$24, %ecx
 14175 45c0 09CB     		orl	%ecx, %ebx
 14176 45c2 8D4801   		leal	1(%rax), %ecx
 14177 45c5 83C002   		addl	$2, %eax
 14178 45c8 0FB68000 		movzbl	VM_memory(%rax), %eax
 14178      000000
 14179 45cf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14179      000000
 14180 45d6 C1E008   		sall	$8, %eax
 14181 45d9 C1E110   		sall	$16, %ecx
 14182 45dc 09CB     		orl	%ecx, %ebx
 14183 45de 09C3     		orl	%eax, %ebx
 14184              	.LVL814:
2818:src/vm3.c     ****   if (op1 == 0x0) {
 14185              		.loc 1 2818 0
 14186 45e0 89D9     		movl	%ebx, %ecx
2820:src/vm3.c     ****     op1 = op1 + funct;
 14187              		.loc 1 2820 0
 14188 45e2 88D8     		movb	%bl, %al
2818:src/vm3.c     ****   if (op1 == 0x0) {
 14189              		.loc 1 2818 0
 14190 45e4 C1E91A   		shrl	$26, %ecx
 14191              	.LVL815:
2820:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 618


 14192              		.loc 1 2820 0
 14193 45e7 83E03F   		andl	$63, %eax
 14194 45ea 8D712B   		leal	43(%rcx), %esi
 14195 45ed 84C9     		testb	%cl, %cl
 14196 45ef 0F45C6   		cmovne	%esi, %eax
 14197              	.LVL816:
2827:src/vm3.c     **** 
 14198              		.loc 1 2827 0
 14199 45f2 0FB6C0   		movzbl	%al, %eax
 14200 45f5 48C1E004 		salq	$4, %rax
 14201              	.LVL817:
 14202 45f9 48038414 		addq	58088(%rsp,%rdx), %rax
 14202      E8E20000 
 14203 4601 488B08   		movq	(%rax), %rcx
 14204 4604 E94FC7FF 		jmp	.L269
 14204      FF
 14205              	.LVL818:
 14206              	.L201:
2862:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 14207              		.loc 1 2862 0
 14208 4609 8B150000 		movl	nPC(%rip), %edx
 14208      0000
2861:src/vm3.c     **** PC = nPC;
 14209              		.loc 1 2861 0
 14210 460f 8B050000 		movl	PC(%rip), %eax
 14210      0000
2863:src/vm3.c     **** nPC = address << 2;
 14211              		.loc 1 2863 0
 14212 4615 4181E0FF 		andl	$67108863, %r8d
 14212      FFFF03
 14213              	.LVL819:
2865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14214              		.loc 1 2865 0
 14215 461c 8D4A03   		leal	3(%rdx), %ecx
2861:src/vm3.c     **** PC = nPC;
 14216              		.loc 1 2861 0
 14217 461f 83C008   		addl	$8, %eax
2862:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 14218              		.loc 1 2862 0
 14219 4622 89150000 		movl	%edx, PC(%rip)
 14219      0000
2861:src/vm3.c     **** PC = nPC;
 14220              		.loc 1 2861 0
 14221 4628 89050000 		movl	%eax, RF+124(%rip)
 14221      0000
2864:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14222              		.loc 1 2864 0
 14223 462e 428D0485 		leal	0(,%r8,4), %eax
 14223      00000000 
2865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14224              		.loc 1 2865 0
 14225 4636 440FB681 		movzbl	VM_memory(%rcx), %r8d
 14225      00000000 
 14226 463e 89D1     		movl	%edx, %ecx
 14227 4640 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14227      000000
2864:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 619


 14228              		.loc 1 2864 0
 14229 4647 89050000 		movl	%eax, nPC(%rip)
 14229      0000
2865:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14230              		.loc 1 2865 0
 14231 464d C1E118   		sall	$24, %ecx
 14232 4650 4109C8   		orl	%ecx, %r8d
 14233 4653 8D4A01   		leal	1(%rdx), %ecx
 14234 4656 83C202   		addl	$2, %edx
 14235 4659 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14235      000000
 14236 4660 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14236      000000
 14237 4667 C1E208   		sall	$8, %edx
 14238 466a C1E110   		sall	$16, %ecx
 14239 466d 4109C8   		orl	%ecx, %r8d
 14240 4670 4109D0   		orl	%edx, %r8d
 14241              	.LVL820:
2866:src/vm3.c     ****   if (op0 == 0x0) {
 14242              		.loc 1 2866 0
 14243 4673 4489C1   		movl	%r8d, %ecx
2868:src/vm3.c     ****     op0 = op0 + funct;
 14244              		.loc 1 2868 0
 14245 4676 4488C2   		movb	%r8b, %dl
2866:src/vm3.c     ****   if (op0 == 0x0) {
 14246              		.loc 1 2866 0
 14247 4679 C1E91A   		shrl	$26, %ecx
 14248              	.LVL821:
2868:src/vm3.c     ****     op0 = op0 + funct;
 14249              		.loc 1 2868 0
 14250 467c 83E23F   		andl	$63, %edx
 14251 467f 8D712B   		leal	43(%rcx), %esi
 14252 4682 84C9     		testb	%cl, %cl
2878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14253              		.loc 1 2878 0
 14254 4684 8D4803   		leal	3(%rax), %ecx
 14255              	.LVL822:
 14256 4687 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14256      000000
 14257              	.LVL823:
 14258 468e 89C1     		movl	%eax, %ecx
2868:src/vm3.c     ****     op0 = op0 + funct;
 14259              		.loc 1 2868 0
 14260 4690 0F45D6   		cmovne	%esi, %edx
 14261              	.LVL824:
2878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14262              		.loc 1 2878 0
 14263 4693 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14263      000000
2876:src/vm3.c     **** 
 14264              		.loc 1 2876 0
 14265 469a 0FB6D2   		movzbl	%dl, %edx
 14266 469d 48C1E204 		salq	$4, %rdx
 14267              	.LVL825:
2878:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14268              		.loc 1 2878 0
 14269 46a1 C1E118   		sall	$24, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 620


 14270 46a4 09CB     		orl	%ecx, %ebx
 14271 46a6 8D4801   		leal	1(%rax), %ecx
 14272 46a9 83C002   		addl	$2, %eax
 14273 46ac 0FB68000 		movzbl	VM_memory(%rax), %eax
 14273      000000
 14274 46b3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14274      000000
 14275 46ba C1E008   		sall	$8, %eax
 14276 46bd C1E110   		sall	$16, %ecx
 14277 46c0 09CB     		orl	%ecx, %ebx
 14278 46c2 09C3     		orl	%eax, %ebx
 14279              	.LVL826:
2879:src/vm3.c     ****   if (op1 == 0x0) {
 14280              		.loc 1 2879 0
 14281 46c4 89D9     		movl	%ebx, %ecx
2881:src/vm3.c     ****     op1 = op1 + funct;
 14282              		.loc 1 2881 0
 14283 46c6 88D8     		movb	%bl, %al
2879:src/vm3.c     ****   if (op1 == 0x0) {
 14284              		.loc 1 2879 0
 14285 46c8 C1E91A   		shrl	$26, %ecx
 14286              	.LVL827:
2881:src/vm3.c     ****     op1 = op1 + funct;
 14287              		.loc 1 2881 0
 14288 46cb 83E03F   		andl	$63, %eax
 14289 46ce 8D712B   		leal	43(%rcx), %esi
 14290 46d1 84C9     		testb	%cl, %cl
 14291 46d3 0F45C6   		cmovne	%esi, %eax
 14292              	.LVL828:
2888:src/vm3.c     **** 
 14293              		.loc 1 2888 0
 14294 46d6 0FB6C0   		movzbl	%al, %eax
 14295 46d9 48C1E004 		salq	$4, %rax
 14296              	.LVL829:
 14297 46dd 48038414 		addq	58088(%rsp,%rdx), %rax
 14297      E8E20000 
 14298 46e5 488B08   		movq	(%rax), %rcx
 14299 46e8 E96BC6FF 		jmp	.L269
 14299      FF
 14300              	.LVL830:
 14301              	.L257:
 14302 46ed 410FB6F8 		movzbl	%r8b, %edi
2923:src/vm3.c     **** PC  =  nPC;
 14303              		.loc 1 2923 0
 14304 46f1 E8000000 		call	syscall
 14304      00
 14305              	.LVL831:
2924:src/vm3.c     **** nPC  += 4;
 14306              		.loc 1 2924 0
 14307 46f6 8B050000 		movl	nPC(%rip), %eax
 14307      0000
2926:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14308              		.loc 1 2926 0
 14309 46fc 8D5003   		leal	3(%rax), %edx
2925:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14310              		.loc 1 2925 0
 14311 46ff 8D4804   		leal	4(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 621


2924:src/vm3.c     **** nPC  += 4;
 14312              		.loc 1 2924 0
 14313 4702 89050000 		movl	%eax, PC(%rip)
 14313      0000
2926:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14314              		.loc 1 2926 0
 14315 4708 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14315      00000000 
 14316 4710 89C2     		movl	%eax, %edx
2939:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14317              		.loc 1 2939 0
 14318 4712 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14318      000000
 14319              	.LVL832:
2926:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14320              		.loc 1 2926 0
 14321 4719 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14321      000000
2925:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14322              		.loc 1 2925 0
 14323 4720 890D0000 		movl	%ecx, nPC(%rip)
 14323      0000
2939:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14324              		.loc 1 2939 0
 14325 4726 8D4805   		leal	5(%rax), %ecx
 14326 4729 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14326      000000
2926:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14327              		.loc 1 2926 0
 14328 4730 C1E218   		sall	$24, %edx
 14329 4733 4109D0   		orl	%edx, %r8d
 14330 4736 8D5001   		leal	1(%rax), %edx
 14331 4739 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14331      000000
 14332 4740 C1E210   		sall	$16, %edx
 14333 4743 4109D0   		orl	%edx, %r8d
 14334 4746 8D5002   		leal	2(%rax), %edx
 14335 4749 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14335      000000
 14336 4750 C1E208   		sall	$8, %edx
 14337 4753 4109D0   		orl	%edx, %r8d
 14338              	.LVL833:
2927:src/vm3.c     ****   if (op0 == 0x0) {
 14339              		.loc 1 2927 0
 14340 4756 4489C6   		movl	%r8d, %esi
2929:src/vm3.c     ****     op0 = op0 + funct;
 14341              		.loc 1 2929 0
 14342 4759 4488C2   		movb	%r8b, %dl
2927:src/vm3.c     ****   if (op0 == 0x0) {
 14343              		.loc 1 2927 0
 14344 475c C1EE1A   		shrl	$26, %esi
 14345              	.LVL834:
2929:src/vm3.c     ****     op0 = op0 + funct;
 14346              		.loc 1 2929 0
 14347 475f 83E23F   		andl	$63, %edx
 14348 4762 8D7E2B   		leal	43(%rsi), %edi
 14349 4765 4084F6   		testb	%sil, %sil
GAS LISTING /tmp/cc15eBE3.s 			page 622


 14350 4768 0F45D7   		cmovne	%edi, %edx
 14351              	.LVL835:
2939:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14352              		.loc 1 2939 0
 14353 476b C1E110   		sall	$16, %ecx
 14354 476e C1E318   		sall	$24, %ebx
 14355 4771 09CB     		orl	%ecx, %ebx
 14356 4773 8D4807   		leal	7(%rax), %ecx
 14357 4776 83C006   		addl	$6, %eax
 14358 4779 0FB68000 		movzbl	VM_memory(%rax), %eax
 14358      000000
2937:src/vm3.c     **** 
 14359              		.loc 1 2937 0
 14360 4780 0FB6D2   		movzbl	%dl, %edx
2939:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14361              		.loc 1 2939 0
 14362 4783 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14362      000000
2937:src/vm3.c     **** 
 14363              		.loc 1 2937 0
 14364 478a 48C1E204 		salq	$4, %rdx
 14365              	.LVL836:
2939:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14366              		.loc 1 2939 0
 14367 478e C1E008   		sall	$8, %eax
 14368 4791 09CB     		orl	%ecx, %ebx
 14369 4793 09C3     		orl	%eax, %ebx
 14370              	.LVL837:
2940:src/vm3.c     ****   if (op1 == 0x0) {
 14371              		.loc 1 2940 0
 14372 4795 89D9     		movl	%ebx, %ecx
2942:src/vm3.c     ****     op1 = op1 + funct;
 14373              		.loc 1 2942 0
 14374 4797 88D8     		movb	%bl, %al
2940:src/vm3.c     ****   if (op1 == 0x0) {
 14375              		.loc 1 2940 0
 14376 4799 C1E91A   		shrl	$26, %ecx
 14377              	.LVL838:
2942:src/vm3.c     ****     op1 = op1 + funct;
 14378              		.loc 1 2942 0
 14379 479c 83E03F   		andl	$63, %eax
 14380 479f 8D712B   		leal	43(%rcx), %esi
 14381 47a2 84C9     		testb	%cl, %cl
 14382 47a4 0F45C6   		cmovne	%esi, %eax
 14383              	.LVL839:
2949:src/vm3.c     **** 
 14384              		.loc 1 2949 0
 14385 47a7 0FB6C0   		movzbl	%al, %eax
 14386 47aa 48C1E004 		salq	$4, %rax
 14387              	.LVL840:
 14388 47ae 48038414 		addq	58088(%rsp,%rdx), %rax
 14388      E8E20000 
 14389 47b6 488B08   		movq	(%rax), %rcx
 14390 47b9 E99AC5FF 		jmp	.L269
 14390      FF
 14391              	.LVL841:
 14392              	.L263:
GAS LISTING /tmp/cc15eBE3.s 			page 623


2957:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14393              		.loc 1 2957 0
 14394 47be 4489C0   		movl	%r8d, %eax
2960:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 14395              		.loc 1 2960 0
 14396 47c1 410FBFC8 		movswl	%r8w, %ecx
2958:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14397              		.loc 1 2958 0
 14398 47c5 41C1E810 		shrl	$16, %r8d
 14399              	.LVL842:
2957:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14400              		.loc 1 2957 0
 14401 47c9 C1E815   		shrl	$21, %eax
 14402              	.LVL843:
2960:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 14403              		.loc 1 2960 0
 14404 47cc 4183E01F 		andl	$31, %r8d
 14405 47d0 83E01F   		andl	$31, %eax
 14406 47d3 8B148500 		movl	RF(,%rax,4), %edx
 14406      000000
 14407 47da 428B0485 		movl	RF(,%r8,4), %eax
 14407      00000000 
 14408 47e2 8D3411   		leal	(%rcx,%rdx), %esi
 14409 47e5 89C7     		movl	%eax, %edi
2961:src/vm3.c     **** PC  =  nPC;
 14410              		.loc 1 2961 0
 14411 47e7 8D541101 		leal	1(%rcx,%rdx), %edx
2960:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 14412              		.loc 1 2960 0
 14413 47eb C1EF18   		shrl	$24, %edi
2961:src/vm3.c     **** PC  =  nPC;
 14414              		.loc 1 2961 0
 14415 47ee C1E810   		shrl	$16, %eax
2960:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 14416              		.loc 1 2960 0
 14417 47f1 4088BE00 		movb	%dil, VM_memory(%rsi)
 14417      000000
2961:src/vm3.c     **** PC  =  nPC;
 14418              		.loc 1 2961 0
 14419 47f8 88820000 		movb	%al, VM_memory(%rdx)
 14419      0000
2962:src/vm3.c     **** nPC  += 4;  instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_
 14420              		.loc 1 2962 0
 14421 47fe 8B050000 		movl	nPC(%rip), %eax
 14421      0000
2963:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14422              		.loc 1 2963 0
 14423 4804 8D5003   		leal	3(%rax), %edx
 14424 4807 8D4804   		leal	4(%rax), %ecx
 14425              	.LVL844:
2962:src/vm3.c     **** nPC  += 4;  instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_
 14426              		.loc 1 2962 0
 14427 480a 89050000 		movl	%eax, PC(%rip)
 14427      0000
2963:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14428              		.loc 1 2963 0
 14429 4810 440FB682 		movzbl	VM_memory(%rdx), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 624


 14429      00000000 
 14430 4818 89C2     		movl	%eax, %edx
2976:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14431              		.loc 1 2976 0
 14432 481a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14432      000000
 14433              	.LVL845:
2963:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14434              		.loc 1 2963 0
 14435 4821 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14435      000000
 14436 4828 890D0000 		movl	%ecx, nPC(%rip)
 14436      0000
2976:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14437              		.loc 1 2976 0
 14438 482e 8D4805   		leal	5(%rax), %ecx
 14439 4831 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14439      000000
2963:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14440              		.loc 1 2963 0
 14441 4838 C1E218   		sall	$24, %edx
 14442 483b 4109D0   		orl	%edx, %r8d
 14443 483e 8D5001   		leal	1(%rax), %edx
 14444 4841 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14444      000000
 14445 4848 C1E210   		sall	$16, %edx
 14446 484b 4109D0   		orl	%edx, %r8d
 14447 484e 8D5002   		leal	2(%rax), %edx
 14448 4851 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14448      000000
 14449 4858 C1E208   		sall	$8, %edx
 14450 485b 4109D0   		orl	%edx, %r8d
 14451              	.LVL846:
2964:src/vm3.c     ****   if (op0 == 0x0) {
 14452              		.loc 1 2964 0
 14453 485e 4489C6   		movl	%r8d, %esi
2966:src/vm3.c     ****     op0 = op0 + funct;
 14454              		.loc 1 2966 0
 14455 4861 4488C2   		movb	%r8b, %dl
2964:src/vm3.c     ****   if (op0 == 0x0) {
 14456              		.loc 1 2964 0
 14457 4864 C1EE1A   		shrl	$26, %esi
 14458              	.LVL847:
2966:src/vm3.c     ****     op0 = op0 + funct;
 14459              		.loc 1 2966 0
 14460 4867 83E23F   		andl	$63, %edx
 14461 486a 8D7E2B   		leal	43(%rsi), %edi
 14462 486d 4084F6   		testb	%sil, %sil
 14463 4870 0F45D7   		cmovne	%edi, %edx
 14464              	.LVL848:
2976:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14465              		.loc 1 2976 0
 14466 4873 C1E110   		sall	$16, %ecx
 14467 4876 C1E318   		sall	$24, %ebx
 14468 4879 09CB     		orl	%ecx, %ebx
 14469 487b 8D4807   		leal	7(%rax), %ecx
 14470 487e 83C006   		addl	$6, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 625


 14471 4881 0FB68000 		movzbl	VM_memory(%rax), %eax
 14471      000000
2974:src/vm3.c     **** 
 14472              		.loc 1 2974 0
 14473 4888 0FB6D2   		movzbl	%dl, %edx
2976:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14474              		.loc 1 2976 0
 14475 488b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14475      000000
2974:src/vm3.c     **** 
 14476              		.loc 1 2974 0
 14477 4892 48C1E204 		salq	$4, %rdx
 14478              	.LVL849:
2976:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14479              		.loc 1 2976 0
 14480 4896 C1E008   		sall	$8, %eax
 14481 4899 09CB     		orl	%ecx, %ebx
 14482 489b 09C3     		orl	%eax, %ebx
 14483              	.LVL850:
2977:src/vm3.c     ****   if (op1 == 0x0) {
 14484              		.loc 1 2977 0
 14485 489d 89D9     		movl	%ebx, %ecx
2979:src/vm3.c     ****     op1 = op1 + funct;
 14486              		.loc 1 2979 0
 14487 489f 88D8     		movb	%bl, %al
2977:src/vm3.c     ****   if (op1 == 0x0) {
 14488              		.loc 1 2977 0
 14489 48a1 C1E91A   		shrl	$26, %ecx
 14490              	.LVL851:
2979:src/vm3.c     ****     op1 = op1 + funct;
 14491              		.loc 1 2979 0
 14492 48a4 83E03F   		andl	$63, %eax
 14493 48a7 8D712B   		leal	43(%rcx), %esi
 14494 48aa 84C9     		testb	%cl, %cl
 14495 48ac 0F45C6   		cmovne	%esi, %eax
 14496              	.LVL852:
2986:src/vm3.c     **** 
 14497              		.loc 1 2986 0
 14498 48af 0FB6C0   		movzbl	%al, %eax
 14499 48b2 48C1E004 		salq	$4, %rax
 14500              	.LVL853:
 14501 48b6 48038414 		addq	58088(%rsp,%rdx), %rax
 14501      E8E20000 
 14502 48be 488B08   		movq	(%rax), %rcx
 14503 48c1 E992C4FF 		jmp	.L269
 14503      FF
 14504              	.LVL854:
 14505              	.L264:
2994:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14506              		.loc 1 2994 0
 14507 48c6 4489C0   		movl	%r8d, %eax
2997:src/vm3.c     **** VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 14508              		.loc 1 2997 0
 14509 48c9 410FBFD0 		movswl	%r8w, %edx
2995:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14510              		.loc 1 2995 0
 14511 48cd 41C1E810 		shrl	$16, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 626


 14512              	.LVL855:
2994:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14513              		.loc 1 2994 0
 14514 48d1 C1E815   		shrl	$21, %eax
 14515              	.LVL856:
2997:src/vm3.c     **** VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 14516              		.loc 1 2997 0
 14517 48d4 4183E01F 		andl	$31, %r8d
 14518 48d8 83E01F   		andl	$31, %eax
 14519 48db 428B3485 		movl	RF(,%r8,4), %esi
 14519      00000000 
 14520 48e3 8B048500 		movl	RF(,%rax,4), %eax
 14520      000000
 14521 48ea 8D0C02   		leal	(%rdx,%rax), %ecx
2998:src/vm3.c     **** PC  =  nPC;
 14522              		.loc 1 2998 0
 14523 48ed 8D4402FF 		leal	-1(%rdx,%rax), %eax
2997:src/vm3.c     **** VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 14524              		.loc 1 2997 0
 14525 48f1 4088B100 		movb	%sil, VM_memory(%rcx)
 14525      000000
2998:src/vm3.c     **** PC  =  nPC;
 14526              		.loc 1 2998 0
 14527 48f8 C6800000 		movb	$0, VM_memory(%rax)
 14527      000000
2999:src/vm3.c     **** nPC  += 4;
 14528              		.loc 1 2999 0
 14529 48ff 8B050000 		movl	nPC(%rip), %eax
 14529      0000
3001:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14530              		.loc 1 3001 0
 14531 4905 8D5003   		leal	3(%rax), %edx
 14532              	.LVL857:
3000:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14533              		.loc 1 3000 0
 14534 4908 8D4804   		leal	4(%rax), %ecx
2999:src/vm3.c     **** nPC  += 4;
 14535              		.loc 1 2999 0
 14536 490b 89050000 		movl	%eax, PC(%rip)
 14536      0000
3001:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14537              		.loc 1 3001 0
 14538 4911 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14538      00000000 
 14539 4919 89C2     		movl	%eax, %edx
3014:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14540              		.loc 1 3014 0
 14541 491b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14541      000000
 14542              	.LVL858:
3001:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14543              		.loc 1 3001 0
 14544 4922 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14544      000000
3000:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14545              		.loc 1 3000 0
 14546 4929 890D0000 		movl	%ecx, nPC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 627


 14546      0000
3014:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14547              		.loc 1 3014 0
 14548 492f 8D4805   		leal	5(%rax), %ecx
 14549 4932 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14549      000000
3001:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14550              		.loc 1 3001 0
 14551 4939 C1E218   		sall	$24, %edx
 14552 493c 4109D0   		orl	%edx, %r8d
 14553 493f 8D5001   		leal	1(%rax), %edx
 14554 4942 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14554      000000
 14555 4949 C1E210   		sall	$16, %edx
 14556 494c 4109D0   		orl	%edx, %r8d
 14557 494f 8D5002   		leal	2(%rax), %edx
 14558 4952 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14558      000000
 14559 4959 C1E208   		sall	$8, %edx
 14560 495c 4109D0   		orl	%edx, %r8d
 14561              	.LVL859:
3002:src/vm3.c     ****   if (op0 == 0x0) {
 14562              		.loc 1 3002 0
 14563 495f 4489C6   		movl	%r8d, %esi
3004:src/vm3.c     ****     op0 = op0 + funct;
 14564              		.loc 1 3004 0
 14565 4962 4488C2   		movb	%r8b, %dl
3002:src/vm3.c     ****   if (op0 == 0x0) {
 14566              		.loc 1 3002 0
 14567 4965 C1EE1A   		shrl	$26, %esi
 14568              	.LVL860:
3004:src/vm3.c     ****     op0 = op0 + funct;
 14569              		.loc 1 3004 0
 14570 4968 83E23F   		andl	$63, %edx
 14571 496b 8D7E2B   		leal	43(%rsi), %edi
 14572 496e 4084F6   		testb	%sil, %sil
 14573 4971 0F45D7   		cmovne	%edi, %edx
 14574              	.LVL861:
3014:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14575              		.loc 1 3014 0
 14576 4974 C1E110   		sall	$16, %ecx
 14577 4977 C1E318   		sall	$24, %ebx
 14578 497a 09CB     		orl	%ecx, %ebx
 14579 497c 8D4807   		leal	7(%rax), %ecx
 14580 497f 83C006   		addl	$6, %eax
 14581 4982 0FB68000 		movzbl	VM_memory(%rax), %eax
 14581      000000
3012:src/vm3.c     **** 
 14582              		.loc 1 3012 0
 14583 4989 0FB6D2   		movzbl	%dl, %edx
3014:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14584              		.loc 1 3014 0
 14585 498c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14585      000000
3012:src/vm3.c     **** 
 14586              		.loc 1 3012 0
 14587 4993 48C1E204 		salq	$4, %rdx
GAS LISTING /tmp/cc15eBE3.s 			page 628


 14588              	.LVL862:
3014:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14589              		.loc 1 3014 0
 14590 4997 C1E008   		sall	$8, %eax
 14591 499a 09CB     		orl	%ecx, %ebx
 14592 499c 09C3     		orl	%eax, %ebx
 14593              	.LVL863:
3015:src/vm3.c     ****   if (op1 == 0x0) {
 14594              		.loc 1 3015 0
 14595 499e 89D9     		movl	%ebx, %ecx
3017:src/vm3.c     ****     op1 = op1 + funct;
 14596              		.loc 1 3017 0
 14597 49a0 88D8     		movb	%bl, %al
3015:src/vm3.c     ****   if (op1 == 0x0) {
 14598              		.loc 1 3015 0
 14599 49a2 C1E91A   		shrl	$26, %ecx
 14600              	.LVL864:
3017:src/vm3.c     ****     op1 = op1 + funct;
 14601              		.loc 1 3017 0
 14602 49a5 83E03F   		andl	$63, %eax
 14603 49a8 8D712B   		leal	43(%rcx), %esi
 14604 49ab 84C9     		testb	%cl, %cl
 14605 49ad 0F45C6   		cmovne	%esi, %eax
 14606              	.LVL865:
3024:src/vm3.c     **** 
 14607              		.loc 1 3024 0
 14608 49b0 0FB6C0   		movzbl	%al, %eax
 14609 49b3 48C1E004 		salq	$4, %rax
 14610              	.LVL866:
 14611 49b7 48038414 		addq	58088(%rsp,%rdx), %rax
 14611      E8E20000 
 14612 49bf 488B08   		movq	(%rax), %rcx
 14613 49c2 E991C3FF 		jmp	.L269
 14613      FF
 14614              	.LVL867:
 14615              	.L260:
3032:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14616              		.loc 1 3032 0
 14617 49c7 4489C0   		movl	%r8d, %eax
3035:src/vm3.c     **** PC  =  nPC;
 14618              		.loc 1 3035 0
 14619 49ca 410FBFD0 		movswl	%r8w, %edx
3033:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14620              		.loc 1 3033 0
 14621 49ce 41C1E810 		shrl	$16, %r8d
 14622              	.LVL868:
3032:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14623              		.loc 1 3032 0
 14624 49d2 C1E815   		shrl	$21, %eax
 14625              	.LVL869:
3035:src/vm3.c     **** PC  =  nPC;
 14626              		.loc 1 3035 0
 14627 49d5 4183E01F 		andl	$31, %r8d
 14628 49d9 83E01F   		andl	$31, %eax
 14629 49dc 03148500 		addl	RF(,%rax,4), %edx
 14629      000000
 14630              	.LVL870:
GAS LISTING /tmp/cc15eBE3.s 			page 629


 14631 49e3 8D4201   		leal	1(%rdx), %eax
 14632 49e6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14632      000000
 14633 49ed 0FB68000 		movzbl	VM_memory(%rax), %eax
 14633      000000
 14634 49f4 C1E218   		sall	$24, %edx
 14635 49f7 C1E010   		sall	$16, %eax
 14636 49fa 09D0     		orl	%edx, %eax
 14637 49fc 42890485 		movl	%eax, RF(,%r8,4)
 14637      00000000 
3036:src/vm3.c     **** nPC  += 4;
 14638              		.loc 1 3036 0
 14639 4a04 8B050000 		movl	nPC(%rip), %eax
 14639      0000
3038:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14640              		.loc 1 3038 0
 14641 4a0a 8D5003   		leal	3(%rax), %edx
3037:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14642              		.loc 1 3037 0
 14643 4a0d 8D4804   		leal	4(%rax), %ecx
3036:src/vm3.c     **** nPC  += 4;
 14644              		.loc 1 3036 0
 14645 4a10 89050000 		movl	%eax, PC(%rip)
 14645      0000
3038:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14646              		.loc 1 3038 0
 14647 4a16 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14647      00000000 
 14648 4a1e 89C2     		movl	%eax, %edx
3051:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14649              		.loc 1 3051 0
 14650 4a20 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14650      000000
 14651              	.LVL871:
3038:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14652              		.loc 1 3038 0
 14653 4a27 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14653      000000
3037:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14654              		.loc 1 3037 0
 14655 4a2e 890D0000 		movl	%ecx, nPC(%rip)
 14655      0000
3051:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14656              		.loc 1 3051 0
 14657 4a34 8D4805   		leal	5(%rax), %ecx
 14658 4a37 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14658      000000
3038:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14659              		.loc 1 3038 0
 14660 4a3e C1E218   		sall	$24, %edx
 14661 4a41 4109D0   		orl	%edx, %r8d
 14662 4a44 8D5001   		leal	1(%rax), %edx
 14663 4a47 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14663      000000
 14664 4a4e C1E210   		sall	$16, %edx
 14665 4a51 4109D0   		orl	%edx, %r8d
 14666 4a54 8D5002   		leal	2(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 630


 14667 4a57 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14667      000000
 14668 4a5e C1E208   		sall	$8, %edx
 14669 4a61 4109D0   		orl	%edx, %r8d
 14670              	.LVL872:
3039:src/vm3.c     ****   if (op0 == 0x0) {
 14671              		.loc 1 3039 0
 14672 4a64 4489C6   		movl	%r8d, %esi
3041:src/vm3.c     ****     op0 = op0 + funct;
 14673              		.loc 1 3041 0
 14674 4a67 4488C2   		movb	%r8b, %dl
3039:src/vm3.c     ****   if (op0 == 0x0) {
 14675              		.loc 1 3039 0
 14676 4a6a C1EE1A   		shrl	$26, %esi
 14677              	.LVL873:
3041:src/vm3.c     ****     op0 = op0 + funct;
 14678              		.loc 1 3041 0
 14679 4a6d 83E23F   		andl	$63, %edx
 14680 4a70 8D7E2B   		leal	43(%rsi), %edi
 14681 4a73 4084F6   		testb	%sil, %sil
 14682 4a76 0F45D7   		cmovne	%edi, %edx
 14683              	.LVL874:
3051:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14684              		.loc 1 3051 0
 14685 4a79 C1E110   		sall	$16, %ecx
 14686 4a7c C1E318   		sall	$24, %ebx
 14687 4a7f 09CB     		orl	%ecx, %ebx
 14688 4a81 8D4807   		leal	7(%rax), %ecx
 14689 4a84 83C006   		addl	$6, %eax
 14690 4a87 0FB68000 		movzbl	VM_memory(%rax), %eax
 14690      000000
3049:src/vm3.c     **** 
 14691              		.loc 1 3049 0
 14692 4a8e 0FB6D2   		movzbl	%dl, %edx
3051:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14693              		.loc 1 3051 0
 14694 4a91 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14694      000000
3049:src/vm3.c     **** 
 14695              		.loc 1 3049 0
 14696 4a98 48C1E204 		salq	$4, %rdx
 14697              	.LVL875:
3051:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14698              		.loc 1 3051 0
 14699 4a9c C1E008   		sall	$8, %eax
 14700 4a9f 09CB     		orl	%ecx, %ebx
 14701 4aa1 09C3     		orl	%eax, %ebx
 14702              	.LVL876:
3052:src/vm3.c     ****   if (op1 == 0x0) {
 14703              		.loc 1 3052 0
 14704 4aa3 89D9     		movl	%ebx, %ecx
3054:src/vm3.c     ****     op1 = op1 + funct;
 14705              		.loc 1 3054 0
 14706 4aa5 88D8     		movb	%bl, %al
3052:src/vm3.c     ****   if (op1 == 0x0) {
 14707              		.loc 1 3052 0
 14708 4aa7 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 631


 14709              	.LVL877:
3054:src/vm3.c     ****     op1 = op1 + funct;
 14710              		.loc 1 3054 0
 14711 4aaa 83E03F   		andl	$63, %eax
 14712 4aad 8D712B   		leal	43(%rcx), %esi
 14713 4ab0 84C9     		testb	%cl, %cl
 14714 4ab2 0F45C6   		cmovne	%esi, %eax
 14715              	.LVL878:
3061:src/vm3.c     **** 
 14716              		.loc 1 3061 0
 14717 4ab5 0FB6C0   		movzbl	%al, %eax
 14718 4ab8 48C1E004 		salq	$4, %rax
 14719              	.LVL879:
 14720 4abc 48038414 		addq	58088(%rsp,%rdx), %rax
 14720      E8E20000 
 14721 4ac4 488B08   		movq	(%rax), %rcx
 14722 4ac7 E98CC2FF 		jmp	.L269
 14722      FF
 14723              	.LVL880:
 14724              	.L262:
3069:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14725              		.loc 1 3069 0
 14726 4acc 4489C0   		movl	%r8d, %eax
3072:src/vm3.c     **** PC  =  nPC;
 14727              		.loc 1 3072 0
 14728 4acf 410FBFD0 		movswl	%r8w, %edx
3070:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14729              		.loc 1 3070 0
 14730 4ad3 41C1E810 		shrl	$16, %r8d
 14731              	.LVL881:
3069:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 14732              		.loc 1 3069 0
 14733 4ad7 C1E815   		shrl	$21, %eax
 14734              	.LVL882:
3072:src/vm3.c     **** PC  =  nPC;
 14735              		.loc 1 3072 0
 14736 4ada 4183E01F 		andl	$31, %r8d
 14737 4ade 83E01F   		andl	$31, %eax
 14738 4ae1 03148500 		addl	RF(,%rax,4), %edx
 14738      000000
 14739              	.LVL883:
 14740 4ae8 8D42FF   		leal	-1(%rdx), %eax
 14741 4aeb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14741      000000
 14742 4af2 0FB68000 		movzbl	VM_memory(%rax), %eax
 14742      000000
 14743 4af9 C1E008   		sall	$8, %eax
 14744 4afc 09D0     		orl	%edx, %eax
 14745 4afe 42890485 		movl	%eax, RF(,%r8,4)
 14745      00000000 
3073:src/vm3.c     **** nPC  += 4;
 14746              		.loc 1 3073 0
 14747 4b06 8B050000 		movl	nPC(%rip), %eax
 14747      0000
3075:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14748              		.loc 1 3075 0
 14749 4b0c 8D5003   		leal	3(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 632


3074:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14750              		.loc 1 3074 0
 14751 4b0f 8D4804   		leal	4(%rax), %ecx
3073:src/vm3.c     **** nPC  += 4;
 14752              		.loc 1 3073 0
 14753 4b12 89050000 		movl	%eax, PC(%rip)
 14753      0000
3075:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14754              		.loc 1 3075 0
 14755 4b18 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14755      00000000 
 14756 4b20 89C2     		movl	%eax, %edx
3088:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14757              		.loc 1 3088 0
 14758 4b22 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14758      000000
 14759              	.LVL884:
3075:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14760              		.loc 1 3075 0
 14761 4b29 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14761      000000
3074:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14762              		.loc 1 3074 0
 14763 4b30 890D0000 		movl	%ecx, nPC(%rip)
 14763      0000
3088:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14764              		.loc 1 3088 0
 14765 4b36 8D4805   		leal	5(%rax), %ecx
 14766 4b39 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14766      000000
3075:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14767              		.loc 1 3075 0
 14768 4b40 C1E218   		sall	$24, %edx
 14769 4b43 4109D0   		orl	%edx, %r8d
 14770 4b46 8D5001   		leal	1(%rax), %edx
 14771 4b49 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14771      000000
 14772 4b50 C1E210   		sall	$16, %edx
 14773 4b53 4109D0   		orl	%edx, %r8d
 14774 4b56 8D5002   		leal	2(%rax), %edx
 14775 4b59 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14775      000000
 14776 4b60 C1E208   		sall	$8, %edx
 14777 4b63 4109D0   		orl	%edx, %r8d
 14778              	.LVL885:
3076:src/vm3.c     ****   if (op0 == 0x0) {
 14779              		.loc 1 3076 0
 14780 4b66 4489C6   		movl	%r8d, %esi
3078:src/vm3.c     ****     op0 = op0 + funct;
 14781              		.loc 1 3078 0
 14782 4b69 4488C2   		movb	%r8b, %dl
3076:src/vm3.c     ****   if (op0 == 0x0) {
 14783              		.loc 1 3076 0
 14784 4b6c C1EE1A   		shrl	$26, %esi
 14785              	.LVL886:
3078:src/vm3.c     ****     op0 = op0 + funct;
 14786              		.loc 1 3078 0
GAS LISTING /tmp/cc15eBE3.s 			page 633


 14787 4b6f 83E23F   		andl	$63, %edx
 14788 4b72 8D7E2B   		leal	43(%rsi), %edi
 14789 4b75 4084F6   		testb	%sil, %sil
 14790 4b78 0F45D7   		cmovne	%edi, %edx
 14791              	.LVL887:
3088:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14792              		.loc 1 3088 0
 14793 4b7b C1E110   		sall	$16, %ecx
 14794 4b7e C1E318   		sall	$24, %ebx
 14795 4b81 09CB     		orl	%ecx, %ebx
 14796 4b83 8D4807   		leal	7(%rax), %ecx
 14797 4b86 83C006   		addl	$6, %eax
 14798 4b89 0FB68000 		movzbl	VM_memory(%rax), %eax
 14798      000000
3086:src/vm3.c     **** 
 14799              		.loc 1 3086 0
 14800 4b90 0FB6D2   		movzbl	%dl, %edx
3088:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14801              		.loc 1 3088 0
 14802 4b93 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14802      000000
3086:src/vm3.c     **** 
 14803              		.loc 1 3086 0
 14804 4b9a 48C1E204 		salq	$4, %rdx
 14805              	.LVL888:
3088:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14806              		.loc 1 3088 0
 14807 4b9e C1E008   		sall	$8, %eax
 14808 4ba1 09CB     		orl	%ecx, %ebx
 14809 4ba3 09C3     		orl	%eax, %ebx
 14810              	.LVL889:
3089:src/vm3.c     ****   if (op1 == 0x0) {
 14811              		.loc 1 3089 0
 14812 4ba5 89D9     		movl	%ebx, %ecx
3091:src/vm3.c     ****     op1 = op1 + funct;
 14813              		.loc 1 3091 0
 14814 4ba7 88D8     		movb	%bl, %al
3089:src/vm3.c     ****   if (op1 == 0x0) {
 14815              		.loc 1 3089 0
 14816 4ba9 C1E91A   		shrl	$26, %ecx
 14817              	.LVL890:
3091:src/vm3.c     ****     op1 = op1 + funct;
 14818              		.loc 1 3091 0
 14819 4bac 83E03F   		andl	$63, %eax
 14820 4baf 8D712B   		leal	43(%rcx), %esi
 14821 4bb2 84C9     		testb	%cl, %cl
 14822 4bb4 0F45C6   		cmovne	%esi, %eax
 14823              	.LVL891:
3098:src/vm3.c     **** 
 14824              		.loc 1 3098 0
 14825 4bb7 0FB6C0   		movzbl	%al, %eax
 14826 4bba 48C1E004 		salq	$4, %rax
 14827              	.LVL892:
 14828 4bbe 48038414 		addq	58088(%rsp,%rdx), %rax
 14828      E8E20000 
 14829 4bc6 488B08   		movq	(%rax), %rcx
 14830 4bc9 E98AC1FF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 634


 14830      FF
 14831              	.LVL893:
 14832              	.L159:
3105:src/vm3.c     **** nPC  += 4;
 14833              		.loc 1 3105 0
 14834 4bce 8B050000 		movl	nPC(%rip), %eax
 14834      0000
3107:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14835              		.loc 1 3107 0
 14836 4bd4 8D5003   		leal	3(%rax), %edx
3106:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14837              		.loc 1 3106 0
 14838 4bd7 8D4804   		leal	4(%rax), %ecx
3105:src/vm3.c     **** nPC  += 4;
 14839              		.loc 1 3105 0
 14840 4bda 89050000 		movl	%eax, PC(%rip)
 14840      0000
3107:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14841              		.loc 1 3107 0
 14842 4be0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14842      00000000 
 14843              	.LVL894:
 14844 4be8 89C2     		movl	%eax, %edx
3120:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14845              		.loc 1 3120 0
 14846 4bea 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14846      000000
 14847              	.LVL895:
3107:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14848              		.loc 1 3107 0
 14849 4bf1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14849      000000
3106:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14850              		.loc 1 3106 0
 14851 4bf8 890D0000 		movl	%ecx, nPC(%rip)
 14851      0000
3120:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14852              		.loc 1 3120 0
 14853 4bfe 8D4805   		leal	5(%rax), %ecx
 14854 4c01 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14854      000000
3107:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14855              		.loc 1 3107 0
 14856 4c08 C1E218   		sall	$24, %edx
 14857 4c0b 4109D0   		orl	%edx, %r8d
 14858 4c0e 8D5001   		leal	1(%rax), %edx
 14859 4c11 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14859      000000
 14860 4c18 C1E210   		sall	$16, %edx
 14861 4c1b 4109D0   		orl	%edx, %r8d
 14862 4c1e 8D5002   		leal	2(%rax), %edx
 14863 4c21 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14863      000000
 14864 4c28 C1E208   		sall	$8, %edx
 14865 4c2b 4109D0   		orl	%edx, %r8d
 14866              	.LVL896:
3108:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 635


 14867              		.loc 1 3108 0
 14868 4c2e 4489C6   		movl	%r8d, %esi
3110:src/vm3.c     ****     op0 = op0 + funct;
 14869              		.loc 1 3110 0
 14870 4c31 4488C2   		movb	%r8b, %dl
3108:src/vm3.c     ****   if (op0 == 0x0) {
 14871              		.loc 1 3108 0
 14872 4c34 C1EE1A   		shrl	$26, %esi
 14873              	.LVL897:
3110:src/vm3.c     ****     op0 = op0 + funct;
 14874              		.loc 1 3110 0
 14875 4c37 83E23F   		andl	$63, %edx
 14876 4c3a 8D7E2B   		leal	43(%rsi), %edi
 14877 4c3d 4084F6   		testb	%sil, %sil
 14878 4c40 0F45D7   		cmovne	%edi, %edx
 14879              	.LVL898:
3120:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14880              		.loc 1 3120 0
 14881 4c43 C1E110   		sall	$16, %ecx
 14882 4c46 C1E318   		sall	$24, %ebx
 14883 4c49 09CB     		orl	%ecx, %ebx
 14884 4c4b 8D4807   		leal	7(%rax), %ecx
 14885 4c4e 83C006   		addl	$6, %eax
 14886 4c51 0FB68000 		movzbl	VM_memory(%rax), %eax
 14886      000000
3118:src/vm3.c     **** 
 14887              		.loc 1 3118 0
 14888 4c58 0FB6D2   		movzbl	%dl, %edx
3120:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14889              		.loc 1 3120 0
 14890 4c5b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14890      000000
3118:src/vm3.c     **** 
 14891              		.loc 1 3118 0
 14892 4c62 48C1E204 		salq	$4, %rdx
 14893              	.LVL899:
3120:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14894              		.loc 1 3120 0
 14895 4c66 C1E008   		sall	$8, %eax
 14896 4c69 09CB     		orl	%ecx, %ebx
 14897 4c6b 09C3     		orl	%eax, %ebx
 14898              	.LVL900:
3121:src/vm3.c     ****   if (op1 == 0x0) {
 14899              		.loc 1 3121 0
 14900 4c6d 89D9     		movl	%ebx, %ecx
3123:src/vm3.c     ****     op1 = op1 + funct;
 14901              		.loc 1 3123 0
 14902 4c6f 88D8     		movb	%bl, %al
3121:src/vm3.c     ****   if (op1 == 0x0) {
 14903              		.loc 1 3121 0
 14904 4c71 C1E91A   		shrl	$26, %ecx
 14905              	.LVL901:
3123:src/vm3.c     ****     op1 = op1 + funct;
 14906              		.loc 1 3123 0
 14907 4c74 83E03F   		andl	$63, %eax
 14908 4c77 8D712B   		leal	43(%rcx), %esi
 14909 4c7a 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 636


 14910 4c7c 0F45C6   		cmovne	%esi, %eax
 14911              	.LVL902:
3130:src/vm3.c     **** 
 14912              		.loc 1 3130 0
 14913 4c7f 0FB6C0   		movzbl	%al, %eax
 14914 4c82 48C1E004 		salq	$4, %rax
 14915              	.LVL903:
 14916 4c86 48038414 		addq	58088(%rsp,%rdx), %rax
 14916      E8E20000 
 14917 4c8e 488B08   		movq	(%rax), %rcx
 14918 4c91 E9C2C0FF 		jmp	.L269
 14918      FF
 14919              	.LVL904:
 14920              	.L6:
3139:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14921              		.loc 1 3139 0
 14922 4c96 4489C0   		movl	%r8d, %eax
3141:src/vm3.c     **** PC  =  nPC;
 14923              		.loc 1 3141 0
 14924 4c99 41C1E010 		sall	$16, %r8d
 14925              	.LVL905:
3143:src/vm3.c     **** 
 14926              		.loc 1 3143 0
 14927 4c9d 83050000 		addl	$4, nPC(%rip)
 14927      000004
 14928              	.LVL906:
3139:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 14929              		.loc 1 3139 0
 14930 4ca4 C1E810   		shrl	$16, %eax
 14931              	.LVL907:
3141:src/vm3.c     **** PC  =  nPC;
 14932              		.loc 1 3141 0
 14933 4ca7 83E01F   		andl	$31, %eax
 14934 4caa 44890485 		movl	%r8d, RF(,%rax,4)
 14934      00000000 
3150:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 14935              		.loc 1 3150 0
 14936 4cb2 89D8     		movl	%ebx, %eax
3152:src/vm3.c     **** PC  =  nPC;
 14937              		.loc 1 3152 0
 14938 4cb4 C1E310   		sall	$16, %ebx
 14939              	.LVL908:
3150:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 14940              		.loc 1 3150 0
 14941 4cb7 C1E810   		shrl	$16, %eax
 14942              	.LVL909:
3152:src/vm3.c     **** PC  =  nPC;
 14943              		.loc 1 3152 0
 14944 4cba 83E01F   		andl	$31, %eax
 14945 4cbd 891C8500 		movl	%ebx, RF(,%rax,4)
 14945      000000
3153:src/vm3.c     **** nPC  += 4;
 14946              		.loc 1 3153 0
 14947 4cc4 8B050000 		movl	nPC(%rip), %eax
 14947      0000
3155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14948              		.loc 1 3155 0
GAS LISTING /tmp/cc15eBE3.s 			page 637


 14949 4cca 8D5003   		leal	3(%rax), %edx
3154:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14950              		.loc 1 3154 0
 14951 4ccd 8D4804   		leal	4(%rax), %ecx
3153:src/vm3.c     **** nPC  += 4;
 14952              		.loc 1 3153 0
 14953 4cd0 89050000 		movl	%eax, PC(%rip)
 14953      0000
3155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14954              		.loc 1 3155 0
 14955 4cd6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 14955      00000000 
 14956 4cde 89C2     		movl	%eax, %edx
3168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14957              		.loc 1 3168 0
 14958 4ce0 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 14958      000000
3155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14959              		.loc 1 3155 0
 14960 4ce7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14960      000000
3154:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 14961              		.loc 1 3154 0
 14962 4cee 890D0000 		movl	%ecx, nPC(%rip)
 14962      0000
3168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14963              		.loc 1 3168 0
 14964 4cf4 8D4805   		leal	5(%rax), %ecx
 14965 4cf7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 14965      000000
3155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 14966              		.loc 1 3155 0
 14967 4cfe C1E218   		sall	$24, %edx
 14968 4d01 4109D0   		orl	%edx, %r8d
 14969 4d04 8D5001   		leal	1(%rax), %edx
 14970 4d07 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14970      000000
 14971 4d0e C1E210   		sall	$16, %edx
 14972 4d11 4109D0   		orl	%edx, %r8d
 14973 4d14 8D5002   		leal	2(%rax), %edx
 14974 4d17 0FB69200 		movzbl	VM_memory(%rdx), %edx
 14974      000000
 14975 4d1e C1E208   		sall	$8, %edx
 14976 4d21 4109D0   		orl	%edx, %r8d
 14977              	.LVL910:
3156:src/vm3.c     ****   if (op0 == 0x0) {
 14978              		.loc 1 3156 0
 14979 4d24 4489C6   		movl	%r8d, %esi
3158:src/vm3.c     ****     op0 = op0 + funct;
 14980              		.loc 1 3158 0
 14981 4d27 4488C2   		movb	%r8b, %dl
3156:src/vm3.c     ****   if (op0 == 0x0) {
 14982              		.loc 1 3156 0
 14983 4d2a C1EE1A   		shrl	$26, %esi
 14984              	.LVL911:
3158:src/vm3.c     ****     op0 = op0 + funct;
 14985              		.loc 1 3158 0
GAS LISTING /tmp/cc15eBE3.s 			page 638


 14986 4d2d 83E23F   		andl	$63, %edx
 14987 4d30 8D7E2B   		leal	43(%rsi), %edi
 14988 4d33 4084F6   		testb	%sil, %sil
 14989 4d36 0F45D7   		cmovne	%edi, %edx
 14990              	.LVL912:
3168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 14991              		.loc 1 3168 0
 14992 4d39 C1E110   		sall	$16, %ecx
 14993 4d3c C1E318   		sall	$24, %ebx
 14994 4d3f 09CB     		orl	%ecx, %ebx
 14995 4d41 8D4807   		leal	7(%rax), %ecx
 14996 4d44 83C006   		addl	$6, %eax
 14997 4d47 0FB68000 		movzbl	VM_memory(%rax), %eax
 14997      000000
3166:src/vm3.c     **** 
 14998              		.loc 1 3166 0
 14999 4d4e 0FB6D2   		movzbl	%dl, %edx
3168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15000              		.loc 1 3168 0
 15001 4d51 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15001      000000
3166:src/vm3.c     **** 
 15002              		.loc 1 3166 0
 15003 4d58 48C1E204 		salq	$4, %rdx
 15004              	.LVL913:
3168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15005              		.loc 1 3168 0
 15006 4d5c C1E008   		sall	$8, %eax
 15007 4d5f 09CB     		orl	%ecx, %ebx
 15008 4d61 09C3     		orl	%eax, %ebx
 15009              	.LVL914:
3169:src/vm3.c     ****   if (op1 == 0x0) {
 15010              		.loc 1 3169 0
 15011 4d63 89D9     		movl	%ebx, %ecx
3171:src/vm3.c     ****     op1 = op1 + funct;
 15012              		.loc 1 3171 0
 15013 4d65 88D8     		movb	%bl, %al
3169:src/vm3.c     ****   if (op1 == 0x0) {
 15014              		.loc 1 3169 0
 15015 4d67 C1E91A   		shrl	$26, %ecx
 15016              	.LVL915:
3171:src/vm3.c     ****     op1 = op1 + funct;
 15017              		.loc 1 3171 0
 15018 4d6a 83E03F   		andl	$63, %eax
 15019 4d6d 8D712B   		leal	43(%rcx), %esi
 15020 4d70 84C9     		testb	%cl, %cl
 15021 4d72 0F45C6   		cmovne	%esi, %eax
 15022              	.LVL916:
3178:src/vm3.c     **** 
 15023              		.loc 1 3178 0
 15024 4d75 0FB6C0   		movzbl	%al, %eax
 15025 4d78 48C1E004 		salq	$4, %rax
 15026              	.LVL917:
 15027 4d7c 48038414 		addq	58088(%rsp,%rdx), %rax
 15027      E8E20000 
 15028 4d84 488B08   		movq	(%rax), %rcx
 15029 4d87 E9CCBFFF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 639


 15029      FF
 15030              	.LVL918:
 15031              	.L13:
3188:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15032              		.loc 1 3188 0
 15033 4d8c 4489C0   		movl	%r8d, %eax
 15034 4d8f C1E810   		shrl	$16, %eax
3190:src/vm3.c     **** PC  =  nPC;
 15035              		.loc 1 3190 0
 15036 4d92 83E01F   		andl	$31, %eax
 15037 4d95 833C8500 		cmpl	$0, RF(,%rax,4)
 15037      00000000 
 15038 4d9d 7420     		je	.L564
3187:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15039              		.loc 1 3187 0 discriminator 1
 15040 4d9f 4489C0   		movl	%r8d, %eax
3189:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 15041              		.loc 1 3189 0 discriminator 1
 15042 4da2 41C1E80B 		shrl	$11, %r8d
 15043              	.LVL919:
3187:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15044              		.loc 1 3187 0 discriminator 1
 15045 4da6 C1E815   		shrl	$21, %eax
 15046              	.LVL920:
3190:src/vm3.c     **** PC  =  nPC;
 15047              		.loc 1 3190 0 discriminator 1
 15048 4da9 4183E01F 		andl	$31, %r8d
 15049              	.LVL921:
 15050 4dad 83E01F   		andl	$31, %eax
 15051              	.LVL922:
 15052 4db0 8B048500 		movl	RF(,%rax,4), %eax
 15052      000000
 15053 4db7 42890485 		movl	%eax, RF(,%r8,4)
 15053      00000000 
 15054              	.L564:
3198:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15055              		.loc 1 3198 0
 15056 4dbf 89DA     		movl	%ebx, %edx
3199:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 15057              		.loc 1 3199 0
 15058 4dc1 89D8     		movl	%ebx, %eax
3201:src/vm3.c     **** PC  =  nPC;
 15059              		.loc 1 3201 0
 15060 4dc3 0FBFDB   		movswl	%bx, %ebx
 15061              	.LVL923:
3198:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15062              		.loc 1 3198 0
 15063 4dc6 C1EA15   		shrl	$21, %edx
3199:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 15064              		.loc 1 3199 0
 15065 4dc9 C1E810   		shrl	$16, %eax
 15066              	.LVL924:
3192:src/vm3.c     **** 
 15067              		.loc 1 3192 0
 15068 4dcc 83050000 		addl	$4, nPC(%rip)
 15068      000004
3201:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 640


 15069              		.loc 1 3201 0
 15070 4dd3 83E21F   		andl	$31, %edx
 15071 4dd6 83E01F   		andl	$31, %eax
 15072 4dd9 031C9500 		addl	RF(,%rdx,4), %ebx
 15072      000000
 15073 4de0 891C8500 		movl	%ebx, RF(,%rax,4)
 15073      000000
3202:src/vm3.c     **** nPC  += 4;
 15074              		.loc 1 3202 0
 15075 4de7 8B050000 		movl	nPC(%rip), %eax
 15075      0000
3204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15076              		.loc 1 3204 0
 15077 4ded 8D5003   		leal	3(%rax), %edx
3203:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15078              		.loc 1 3203 0
 15079 4df0 8D4804   		leal	4(%rax), %ecx
3202:src/vm3.c     **** nPC  += 4;
 15080              		.loc 1 3202 0
 15081 4df3 89050000 		movl	%eax, PC(%rip)
 15081      0000
3204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15082              		.loc 1 3204 0
 15083 4df9 440FB682 		movzbl	VM_memory(%rdx), %r8d
 15083      00000000 
 15084 4e01 89C2     		movl	%eax, %edx
3217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15085              		.loc 1 3217 0
 15086 4e03 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15086      000000
3204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15087              		.loc 1 3204 0
 15088 4e0a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15088      000000
3203:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15089              		.loc 1 3203 0
 15090 4e11 890D0000 		movl	%ecx, nPC(%rip)
 15090      0000
3217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15091              		.loc 1 3217 0
 15092 4e17 8D4805   		leal	5(%rax), %ecx
 15093 4e1a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15093      000000
3204:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15094              		.loc 1 3204 0
 15095 4e21 C1E218   		sall	$24, %edx
 15096 4e24 4109D0   		orl	%edx, %r8d
 15097 4e27 8D5001   		leal	1(%rax), %edx
 15098 4e2a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15098      000000
 15099 4e31 C1E210   		sall	$16, %edx
 15100 4e34 4109D0   		orl	%edx, %r8d
 15101 4e37 8D5002   		leal	2(%rax), %edx
 15102 4e3a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15102      000000
 15103 4e41 C1E208   		sall	$8, %edx
 15104 4e44 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 641


 15105              	.LVL925:
3205:src/vm3.c     ****   if (op0 == 0x0) {
 15106              		.loc 1 3205 0
 15107 4e47 4489C6   		movl	%r8d, %esi
3207:src/vm3.c     ****     op0 = op0 + funct;
 15108              		.loc 1 3207 0
 15109 4e4a 4488C2   		movb	%r8b, %dl
3205:src/vm3.c     ****   if (op0 == 0x0) {
 15110              		.loc 1 3205 0
 15111 4e4d C1EE1A   		shrl	$26, %esi
 15112              	.LVL926:
3207:src/vm3.c     ****     op0 = op0 + funct;
 15113              		.loc 1 3207 0
 15114 4e50 83E23F   		andl	$63, %edx
 15115 4e53 8D7E2B   		leal	43(%rsi), %edi
 15116 4e56 4084F6   		testb	%sil, %sil
 15117 4e59 0F45D7   		cmovne	%edi, %edx
 15118              	.LVL927:
3217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15119              		.loc 1 3217 0
 15120 4e5c C1E110   		sall	$16, %ecx
 15121 4e5f C1E318   		sall	$24, %ebx
 15122 4e62 09CB     		orl	%ecx, %ebx
 15123 4e64 8D4807   		leal	7(%rax), %ecx
 15124 4e67 83C006   		addl	$6, %eax
 15125 4e6a 0FB68000 		movzbl	VM_memory(%rax), %eax
 15125      000000
3215:src/vm3.c     **** 
 15126              		.loc 1 3215 0
 15127 4e71 0FB6D2   		movzbl	%dl, %edx
3217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15128              		.loc 1 3217 0
 15129 4e74 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15129      000000
3215:src/vm3.c     **** 
 15130              		.loc 1 3215 0
 15131 4e7b 48C1E204 		salq	$4, %rdx
 15132              	.LVL928:
3217:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15133              		.loc 1 3217 0
 15134 4e7f C1E008   		sall	$8, %eax
 15135 4e82 09CB     		orl	%ecx, %ebx
 15136 4e84 09C3     		orl	%eax, %ebx
 15137              	.LVL929:
3218:src/vm3.c     ****   if (op1 == 0x0) {
 15138              		.loc 1 3218 0
 15139 4e86 89D9     		movl	%ebx, %ecx
3220:src/vm3.c     ****     op1 = op1 + funct;
 15140              		.loc 1 3220 0
 15141 4e88 88D8     		movb	%bl, %al
3218:src/vm3.c     ****   if (op1 == 0x0) {
 15142              		.loc 1 3218 0
 15143 4e8a C1E91A   		shrl	$26, %ecx
 15144              	.LVL930:
3220:src/vm3.c     ****     op1 = op1 + funct;
 15145              		.loc 1 3220 0
 15146 4e8d 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 642


 15147 4e90 8D712B   		leal	43(%rcx), %esi
 15148 4e93 84C9     		testb	%cl, %cl
 15149 4e95 0F45C6   		cmovne	%esi, %eax
 15150              	.LVL931:
3227:src/vm3.c     **** 
 15151              		.loc 1 3227 0
 15152 4e98 0FB6C0   		movzbl	%al, %eax
 15153 4e9b 48C1E004 		salq	$4, %rax
 15154              	.LVL932:
 15155 4e9f 48038414 		addq	58088(%rsp,%rdx), %rax
 15155      E8E20000 
 15156 4ea7 488B08   		movq	(%rax), %rcx
 15157 4eaa E9A9BEFF 		jmp	.L269
 15157      FF
 15158              	.LVL933:
 15159              	.L18:
3236:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15160              		.loc 1 3236 0
 15161 4eaf 4489C0   		movl	%r8d, %eax
3237:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 15162              		.loc 1 3237 0
 15163 4eb2 4489C2   		movl	%r8d, %edx
3235:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15164              		.loc 1 3235 0
 15165 4eb5 41C1E806 		shrl	$6, %r8d
 15166              	.LVL934:
3236:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15167              		.loc 1 3236 0
 15168 4eb9 C1E810   		shrl	$16, %eax
 15169              	.LVL935:
3235:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15170              		.loc 1 3235 0
 15171 4ebc 4488C1   		movb	%r8b, %cl
3237:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 15172              		.loc 1 3237 0
 15173 4ebf C1EA0B   		shrl	$11, %edx
 15174              	.LVL936:
3238:src/vm3.c     **** PC  =  nPC;
 15175              		.loc 1 3238 0
 15176 4ec2 83E01F   		andl	$31, %eax
3235:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15177              		.loc 1 3235 0
 15178 4ec5 83E11F   		andl	$31, %ecx
3238:src/vm3.c     **** PC  =  nPC;
 15179              		.loc 1 3238 0
 15180 4ec8 83E21F   		andl	$31, %edx
 15181 4ecb 8B048500 		movl	RF(,%rax,4), %eax
 15181      000000
 15182 4ed2 D3E0     		sall	%cl, %eax
3247:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 15183              		.loc 1 3247 0
 15184 4ed4 89D9     		movl	%ebx, %ecx
3246:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15185              		.loc 1 3246 0
 15186 4ed6 C1EB15   		shrl	$21, %ebx
 15187              	.LVL937:
3238:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 643


 15188              		.loc 1 3238 0
 15189 4ed9 89049500 		movl	%eax, RF(,%rdx,4)
 15189      000000
3240:src/vm3.c     **** 
 15190              		.loc 1 3240 0
 15191 4ee0 8B050000 		movl	nPC(%rip), %eax
 15191      0000
3247:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 15192              		.loc 1 3247 0
 15193 4ee6 C1E910   		shrl	$16, %ecx
 15194              	.LVL938:
3248:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 15195              		.loc 1 3248 0
 15196 4ee9 83E11F   		andl	$31, %ecx
 15197 4eec 83E31F   		andl	$31, %ebx
 15198 4eef 448B348D 		movl	RF(,%rcx,4), %r14d
 15198      00000000 
 15199              	.LVL939:
 15200 4ef7 8B0C9D00 		movl	RF(,%rbx,4), %ecx
 15200      000000
3240:src/vm3.c     **** 
 15201              		.loc 1 3240 0
 15202 4efe 8D5004   		leal	4(%rax), %edx
3253:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15203              		.loc 1 3253 0
 15204 4f01 8D7007   		leal	7(%rax), %esi
3251:src/vm3.c     **** nPC  += 4;
 15205              		.loc 1 3251 0
 15206 4f04 89150000 		movl	%edx, PC(%rip)
 15206      0000
3253:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15207              		.loc 1 3253 0
 15208 4f0a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15208      000000
 15209 4f11 440FB686 		movzbl	VM_memory(%rsi), %r8d
 15209      00000000 
3248:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 15210              		.loc 1 3248 0
 15211 4f19 4C0FAFF1 		imulq	%rcx, %r14
 15212              	.LVL940:
3252:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15213              		.loc 1 3252 0
 15214 4f1d 8D4808   		leal	8(%rax), %ecx
3253:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15215              		.loc 1 3253 0
 15216 4f20 C1E218   		sall	$24, %edx
3266:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15217              		.loc 1 3266 0
 15218 4f23 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15218      000000
3252:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15219              		.loc 1 3252 0
 15220 4f2a 890D0000 		movl	%ecx, nPC(%rip)
 15220      0000
3253:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15221              		.loc 1 3253 0
 15222 4f30 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 644


 15223 4f33 8D5005   		leal	5(%rax), %edx
3266:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15224              		.loc 1 3266 0
 15225 4f36 8D4809   		leal	9(%rax), %ecx
3249:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 15226              		.loc 1 3249 0
 15227 4f39 4C89F7   		movq	%r14, %rdi
3253:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15228              		.loc 1 3253 0
 15229 4f3c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15229      000000
3266:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15230              		.loc 1 3266 0
 15231 4f43 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15231      000000
3249:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 15232              		.loc 1 3249 0
 15233 4f4a 48C1EF20 		shrq	$32, %rdi
 15234 4f4e 4989FD   		movq	%rdi, %r13
 15235              	.LVL941:
3253:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15236              		.loc 1 3253 0
 15237 4f51 C1E210   		sall	$16, %edx
 15238 4f54 4109D0   		orl	%edx, %r8d
 15239 4f57 8D5006   		leal	6(%rax), %edx
 15240 4f5a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15240      000000
 15241 4f61 C1E208   		sall	$8, %edx
 15242 4f64 4109D0   		orl	%edx, %r8d
 15243              	.LVL942:
3254:src/vm3.c     ****   if (op0 == 0x0) {
 15244              		.loc 1 3254 0
 15245 4f67 4489C6   		movl	%r8d, %esi
3256:src/vm3.c     ****     op0 = op0 + funct;
 15246              		.loc 1 3256 0
 15247 4f6a 4488C2   		movb	%r8b, %dl
3254:src/vm3.c     ****   if (op0 == 0x0) {
 15248              		.loc 1 3254 0
 15249 4f6d C1EE1A   		shrl	$26, %esi
 15250              	.LVL943:
3256:src/vm3.c     ****     op0 = op0 + funct;
 15251              		.loc 1 3256 0
 15252 4f70 83E23F   		andl	$63, %edx
 15253 4f73 8D7E2B   		leal	43(%rsi), %edi
 15254              	.LVL944:
 15255 4f76 4084F6   		testb	%sil, %sil
 15256 4f79 0F45D7   		cmovne	%edi, %edx
 15257              	.LVL945:
3266:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15258              		.loc 1 3266 0
 15259 4f7c C1E110   		sall	$16, %ecx
 15260 4f7f C1E318   		sall	$24, %ebx
 15261 4f82 09CB     		orl	%ecx, %ebx
 15262 4f84 8D480B   		leal	11(%rax), %ecx
 15263 4f87 83C00A   		addl	$10, %eax
 15264 4f8a 0FB68000 		movzbl	VM_memory(%rax), %eax
 15264      000000
GAS LISTING /tmp/cc15eBE3.s 			page 645


3264:src/vm3.c     **** 
 15265              		.loc 1 3264 0
 15266 4f91 0FB6D2   		movzbl	%dl, %edx
3266:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15267              		.loc 1 3266 0
 15268 4f94 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15268      000000
3264:src/vm3.c     **** 
 15269              		.loc 1 3264 0
 15270 4f9b 48C1E204 		salq	$4, %rdx
 15271              	.LVL946:
3266:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15272              		.loc 1 3266 0
 15273 4f9f C1E008   		sall	$8, %eax
 15274 4fa2 09CB     		orl	%ecx, %ebx
 15275 4fa4 09C3     		orl	%eax, %ebx
 15276              	.LVL947:
3267:src/vm3.c     ****   if (op1 == 0x0) {
 15277              		.loc 1 3267 0
 15278 4fa6 89D9     		movl	%ebx, %ecx
3269:src/vm3.c     ****     op1 = op1 + funct;
 15279              		.loc 1 3269 0
 15280 4fa8 88D8     		movb	%bl, %al
3267:src/vm3.c     ****   if (op1 == 0x0) {
 15281              		.loc 1 3267 0
 15282 4faa C1E91A   		shrl	$26, %ecx
 15283              	.LVL948:
3269:src/vm3.c     ****     op1 = op1 + funct;
 15284              		.loc 1 3269 0
 15285 4fad 83E03F   		andl	$63, %eax
 15286 4fb0 8D712B   		leal	43(%rcx), %esi
 15287 4fb3 84C9     		testb	%cl, %cl
 15288 4fb5 0F45C6   		cmovne	%esi, %eax
 15289              	.LVL949:
3276:src/vm3.c     **** 
 15290              		.loc 1 3276 0
 15291 4fb8 0FB6C0   		movzbl	%al, %eax
 15292 4fbb 48C1E004 		salq	$4, %rax
 15293              	.LVL950:
 15294 4fbf 48038414 		addq	58088(%rsp,%rdx), %rax
 15294      E8E20000 
 15295 4fc7 488B08   		movq	(%rax), %rcx
 15296 4fca E989BDFF 		jmp	.L269
 15296      FF
 15297              	.LVL951:
 15298              	.L12:
3286:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15299              		.loc 1 3286 0
 15300 4fcf 4489C0   		movl	%r8d, %eax
 15301 4fd2 C1E810   		shrl	$16, %eax
3288:src/vm3.c     **** PC  =  nPC;
 15302              		.loc 1 3288 0
 15303 4fd5 83E01F   		andl	$31, %eax
 15304 4fd8 833C8500 		cmpl	$0, RF(,%rax,4)
 15304      00000000 
 15305 4fe0 7420     		je	.L573
3285:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 646


 15306              		.loc 1 3285 0 discriminator 1
 15307 4fe2 4489C0   		movl	%r8d, %eax
3287:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 15308              		.loc 1 3287 0 discriminator 1
 15309 4fe5 41C1E80B 		shrl	$11, %r8d
 15310              	.LVL952:
3285:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15311              		.loc 1 3285 0 discriminator 1
 15312 4fe9 C1E815   		shrl	$21, %eax
 15313              	.LVL953:
3288:src/vm3.c     **** PC  =  nPC;
 15314              		.loc 1 3288 0 discriminator 1
 15315 4fec 4183E01F 		andl	$31, %r8d
 15316              	.LVL954:
 15317 4ff0 83E01F   		andl	$31, %eax
 15318              	.LVL955:
 15319 4ff3 8B048500 		movl	RF(,%rax,4), %eax
 15319      000000
 15320 4ffa 42890485 		movl	%eax, RF(,%r8,4)
 15320      00000000 
 15321              	.L573:
3296:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15322              		.loc 1 3296 0
 15323 5002 89DE     		movl	%ebx, %esi
3297:src/vm3.c     **** if (RF[rs] != RF[rt])
 15324              		.loc 1 3297 0
 15325 5004 89D9     		movl	%ebx, %ecx
3289:src/vm3.c     **** nPC  += 4;
 15326              		.loc 1 3289 0
 15327 5006 8B050000 		movl	nPC(%rip), %eax
 15327      0000
3296:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15328              		.loc 1 3296 0
 15329 500c C1EE15   		shrl	$21, %esi
3297:src/vm3.c     **** if (RF[rs] != RF[rt])
 15330              		.loc 1 3297 0
 15331 500f C1E910   		shrl	$16, %ecx
3298:src/vm3.c     **** {
 15332              		.loc 1 3298 0
 15333 5012 83E61F   		andl	$31, %esi
 15334 5015 83E11F   		andl	$31, %ecx
 15335 5018 8B3C8D00 		movl	RF(,%rcx,4), %edi
 15335      000000
 15336 501f 393CB500 		cmpl	%edi, RF(,%rsi,4)
 15336      000000
3290:src/vm3.c     **** 
 15337              		.loc 1 3290 0
 15338 5026 8D5004   		leal	4(%rax), %edx
 15339              	.LVL956:
 15340 5029 448D4007 		leal	7(%rax), %r8d
 15341 502d 8D7805   		leal	5(%rax), %edi
 15342 5030 8D7006   		leal	6(%rax), %esi
 15343 5033 4189D1   		movl	%edx, %r9d
3301:src/vm3.c     ****   nPC  += (immediate << 2);
 15344              		.loc 1 3301 0
 15345 5036 89150000 		movl	%edx, PC(%rip)
 15345      0000
GAS LISTING /tmp/cc15eBE3.s 			page 647


3298:src/vm3.c     **** {
 15346              		.loc 1 3298 0
 15347 503c 0F84B600 		je	.L574
 15347      0000
 15348              	.LVL957:
3302:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 15349              		.loc 1 3302 0
 15350 5042 0FBFDB   		movswl	%bx, %ebx
 15351              	.LVL958:
3303:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15352              		.loc 1 3303 0
 15353 5045 450FB680 		movzbl	VM_memory(%r8), %r8d
 15353      00000000 
3302:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 15354              		.loc 1 3302 0
 15355 504d 8D049A   		leal	(%rdx,%rbx,4), %eax
3303:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15356              		.loc 1 3303 0
 15357 5050 410FB691 		movzbl	VM_memory(%r9), %edx
 15357      00000000 
3302:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 15358              		.loc 1 3302 0
 15359 5058 89050000 		movl	%eax, nPC(%rip)
 15359      0000
3303:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15360              		.loc 1 3303 0
 15361 505e C1E218   		sall	$24, %edx
 15362 5061 4109D0   		orl	%edx, %r8d
 15363 5064 0FB69700 		movzbl	VM_memory(%rdi), %edx
 15363      000000
 15364 506b C1E210   		sall	$16, %edx
 15365 506e 4109D0   		orl	%edx, %r8d
 15366 5071 0FB69600 		movzbl	VM_memory(%rsi), %edx
 15366      000000
 15367 5078 C1E208   		sall	$8, %edx
 15368 507b 4109D0   		orl	%edx, %r8d
 15369              	.LVL959:
3304:src/vm3.c     ****   if (op0 == 0x0) {
 15370              		.loc 1 3304 0
 15371 507e 4489C1   		movl	%r8d, %ecx
3306:src/vm3.c     ****     op0 = op0 + funct;
 15372              		.loc 1 3306 0
 15373 5081 4488C2   		movb	%r8b, %dl
3304:src/vm3.c     ****   if (op0 == 0x0) {
 15374              		.loc 1 3304 0
 15375 5084 C1E91A   		shrl	$26, %ecx
 15376              	.LVL960:
3306:src/vm3.c     ****     op0 = op0 + funct;
 15377              		.loc 1 3306 0
 15378 5087 83E23F   		andl	$63, %edx
 15379 508a 8D712B   		leal	43(%rcx), %esi
 15380 508d 84C9     		testb	%cl, %cl
3316:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15381              		.loc 1 3316 0
 15382 508f 8D4803   		leal	3(%rax), %ecx
 15383              	.LVL961:
 15384 5092 0FB69900 		movzbl	VM_memory(%rcx), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 648


 15384      000000
 15385              	.LVL962:
 15386 5099 89C1     		movl	%eax, %ecx
3306:src/vm3.c     ****     op0 = op0 + funct;
 15387              		.loc 1 3306 0
 15388 509b 0F45D6   		cmovne	%esi, %edx
 15389              	.LVL963:
3316:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15390              		.loc 1 3316 0
 15391 509e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15391      000000
3314:src/vm3.c     **** 
 15392              		.loc 1 3314 0
 15393 50a5 0FB6D2   		movzbl	%dl, %edx
 15394 50a8 48C1E204 		salq	$4, %rdx
 15395              	.LVL964:
3316:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15396              		.loc 1 3316 0
 15397 50ac C1E118   		sall	$24, %ecx
 15398 50af 09CB     		orl	%ecx, %ebx
 15399 50b1 8D4801   		leal	1(%rax), %ecx
 15400 50b4 83C002   		addl	$2, %eax
 15401 50b7 0FB68000 		movzbl	VM_memory(%rax), %eax
 15401      000000
 15402 50be 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15402      000000
 15403 50c5 C1E008   		sall	$8, %eax
 15404 50c8 C1E110   		sall	$16, %ecx
 15405 50cb 09CB     		orl	%ecx, %ebx
 15406 50cd 09C3     		orl	%eax, %ebx
 15407              	.LVL965:
3317:src/vm3.c     ****   if (op1 == 0x0) {
 15408              		.loc 1 3317 0
 15409 50cf 89D9     		movl	%ebx, %ecx
3319:src/vm3.c     ****     op1 = op1 + funct;
 15410              		.loc 1 3319 0
 15411 50d1 88D8     		movb	%bl, %al
3317:src/vm3.c     ****   if (op1 == 0x0) {
 15412              		.loc 1 3317 0
 15413 50d3 C1E91A   		shrl	$26, %ecx
 15414              	.LVL966:
3319:src/vm3.c     ****     op1 = op1 + funct;
 15415              		.loc 1 3319 0
 15416 50d6 83E03F   		andl	$63, %eax
 15417 50d9 8D712B   		leal	43(%rcx), %esi
 15418 50dc 84C9     		testb	%cl, %cl
 15419 50de 0F45C6   		cmovne	%esi, %eax
 15420              	.LVL967:
3326:src/vm3.c     **** 
 15421              		.loc 1 3326 0
 15422 50e1 0FB6C0   		movzbl	%al, %eax
 15423 50e4 48C1E004 		salq	$4, %rax
 15424              	.LVL968:
 15425 50e8 48038414 		addq	58088(%rsp,%rdx), %rax
 15425      E8E20000 
 15426 50f0 488B08   		movq	(%rax), %rcx
 15427 50f3 E960BCFF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 649


 15427      FF
 15428              	.LVL969:
 15429              	.L574:
3335:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15430              		.loc 1 3335 0
 15431 50f8 410FB691 		movzbl	VM_memory(%r9), %edx
 15431      00000000 
 15432 5100 450FB680 		movzbl	VM_memory(%r8), %r8d
 15432      00000000 
3333:src/vm3.c     **** }
 15433              		.loc 1 3333 0
 15434 5108 8D4808   		leal	8(%rax), %ecx
3348:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15435              		.loc 1 3348 0
 15436 510b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15436      000000
 15437              	.LVL970:
3333:src/vm3.c     **** }
 15438              		.loc 1 3333 0
 15439 5112 890D0000 		movl	%ecx, nPC(%rip)
 15439      0000
3348:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15440              		.loc 1 3348 0
 15441 5118 8D4809   		leal	9(%rax), %ecx
3335:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15442              		.loc 1 3335 0
 15443 511b C1E218   		sall	$24, %edx
3348:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15444              		.loc 1 3348 0
 15445 511e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15445      000000
3335:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15446              		.loc 1 3335 0
 15447 5125 4109D0   		orl	%edx, %r8d
 15448 5128 0FB69700 		movzbl	VM_memory(%rdi), %edx
 15448      000000
 15449 512f C1E210   		sall	$16, %edx
 15450 5132 4109D0   		orl	%edx, %r8d
 15451 5135 0FB69600 		movzbl	VM_memory(%rsi), %edx
 15451      000000
 15452 513c C1E208   		sall	$8, %edx
 15453 513f 4109D0   		orl	%edx, %r8d
 15454              	.LVL971:
3336:src/vm3.c     ****   if (op0 == 0x0) {
 15455              		.loc 1 3336 0
 15456 5142 4489C6   		movl	%r8d, %esi
3338:src/vm3.c     ****     op0 = op0 + funct;
 15457              		.loc 1 3338 0
 15458 5145 4488C2   		movb	%r8b, %dl
3336:src/vm3.c     ****   if (op0 == 0x0) {
 15459              		.loc 1 3336 0
 15460 5148 C1EE1A   		shrl	$26, %esi
 15461              	.LVL972:
3338:src/vm3.c     ****     op0 = op0 + funct;
 15462              		.loc 1 3338 0
 15463 514b 83E23F   		andl	$63, %edx
 15464 514e 8D7E2B   		leal	43(%rsi), %edi
GAS LISTING /tmp/cc15eBE3.s 			page 650


 15465 5151 4084F6   		testb	%sil, %sil
 15466 5154 0F45D7   		cmovne	%edi, %edx
 15467              	.LVL973:
3348:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15468              		.loc 1 3348 0
 15469 5157 C1E110   		sall	$16, %ecx
 15470 515a C1E318   		sall	$24, %ebx
 15471 515d 09CB     		orl	%ecx, %ebx
 15472 515f 8D480B   		leal	11(%rax), %ecx
 15473 5162 83C00A   		addl	$10, %eax
 15474 5165 0FB68000 		movzbl	VM_memory(%rax), %eax
 15474      000000
3346:src/vm3.c     **** 
 15475              		.loc 1 3346 0
 15476 516c 0FB6D2   		movzbl	%dl, %edx
3348:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15477              		.loc 1 3348 0
 15478 516f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15478      000000
3346:src/vm3.c     **** 
 15479              		.loc 1 3346 0
 15480 5176 48C1E204 		salq	$4, %rdx
 15481              	.LVL974:
3348:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15482              		.loc 1 3348 0
 15483 517a C1E008   		sall	$8, %eax
 15484 517d 09CB     		orl	%ecx, %ebx
 15485 517f 09C3     		orl	%eax, %ebx
 15486              	.LVL975:
3349:src/vm3.c     ****   if (op1 == 0x0) {
 15487              		.loc 1 3349 0
 15488 5181 89D9     		movl	%ebx, %ecx
3351:src/vm3.c     ****     op1 = op1 + funct;
 15489              		.loc 1 3351 0
 15490 5183 88D8     		movb	%bl, %al
3349:src/vm3.c     ****   if (op1 == 0x0) {
 15491              		.loc 1 3349 0
 15492 5185 C1E91A   		shrl	$26, %ecx
 15493              	.LVL976:
3351:src/vm3.c     ****     op1 = op1 + funct;
 15494              		.loc 1 3351 0
 15495 5188 83E03F   		andl	$63, %eax
 15496 518b 8D712B   		leal	43(%rcx), %esi
 15497 518e 84C9     		testb	%cl, %cl
 15498 5190 0F45C6   		cmovne	%esi, %eax
 15499              	.LVL977:
3358:src/vm3.c     **** 
 15500              		.loc 1 3358 0
 15501 5193 0FB6C0   		movzbl	%al, %eax
 15502 5196 48C1E004 		salq	$4, %rax
 15503              	.LVL978:
 15504 519a 48038414 		addq	58088(%rsp,%rdx), %rax
 15504      E8E20000 
 15505 51a2 488B08   		movq	(%rax), %rcx
 15506 51a5 E9AEBBFF 		jmp	.L269
 15506      FF
 15507              	.LVL979:
GAS LISTING /tmp/cc15eBE3.s 			page 651


 15508              	.L39:
3376:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 15509              		.loc 1 3376 0
 15510 51aa 89D8     		movl	%ebx, %eax
3366:src/vm3.c     **** RF[rd] = HI;
 15511              		.loc 1 3366 0
 15512 51ac 41C1E80B 		shrl	$11, %r8d
 15513              	.LVL980:
3377:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 15514              		.loc 1 3377 0
 15515 51b0 89DA     		movl	%ebx, %edx
3376:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 15516              		.loc 1 3376 0
 15517 51b2 C1E810   		shrl	$16, %eax
3367:src/vm3.c     **** PC  =  nPC;
 15518              		.loc 1 3367 0
 15519 51b5 4183E01F 		andl	$31, %r8d
3375:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15520              		.loc 1 3375 0
 15521 51b9 C1EB06   		shrl	$6, %ebx
 15522              	.LVL981:
3378:src/vm3.c     **** PC  =  nPC;
 15523              		.loc 1 3378 0
 15524 51bc 83E01F   		andl	$31, %eax
3367:src/vm3.c     **** PC  =  nPC;
 15525              		.loc 1 3367 0
 15526 51bf 46892C85 		movl	%r13d, RF(,%r8,4)
 15526      00000000 
3375:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15527              		.loc 1 3375 0
 15528 51c7 88D9     		movb	%bl, %cl
3378:src/vm3.c     **** PC  =  nPC;
 15529              		.loc 1 3378 0
 15530 51c9 8B048500 		movl	RF(,%rax,4), %eax
 15530      000000
3375:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15531              		.loc 1 3375 0
 15532 51d0 83E11F   		andl	$31, %ecx
3377:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 15533              		.loc 1 3377 0
 15534 51d3 C1EA0B   		shrl	$11, %edx
 15535              	.LVL982:
3369:src/vm3.c     **** 
 15536              		.loc 1 3369 0
 15537 51d6 83050000 		addl	$4, nPC(%rip)
 15537      000004
3378:src/vm3.c     **** PC  =  nPC;
 15538              		.loc 1 3378 0
 15539 51dd 83E21F   		andl	$31, %edx
 15540 51e0 D3E8     		shrl	%cl, %eax
 15541 51e2 89049500 		movl	%eax, RF(,%rdx,4)
 15541      000000
3379:src/vm3.c     **** nPC  += 4;
 15542              		.loc 1 3379 0
 15543 51e9 8B050000 		movl	nPC(%rip), %eax
 15543      0000
3381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 652


 15544              		.loc 1 3381 0
 15545 51ef 8D5003   		leal	3(%rax), %edx
3380:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15546              		.loc 1 3380 0
 15547 51f2 8D4804   		leal	4(%rax), %ecx
3379:src/vm3.c     **** nPC  += 4;
 15548              		.loc 1 3379 0
 15549 51f5 89050000 		movl	%eax, PC(%rip)
 15549      0000
3381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15550              		.loc 1 3381 0
 15551 51fb 440FB682 		movzbl	VM_memory(%rdx), %r8d
 15551      00000000 
 15552 5203 89C2     		movl	%eax, %edx
3394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15553              		.loc 1 3394 0
 15554 5205 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15554      000000
3381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15555              		.loc 1 3381 0
 15556 520c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15556      000000
3380:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15557              		.loc 1 3380 0
 15558 5213 890D0000 		movl	%ecx, nPC(%rip)
 15558      0000
3394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15559              		.loc 1 3394 0
 15560 5219 8D4805   		leal	5(%rax), %ecx
 15561 521c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15561      000000
3381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15562              		.loc 1 3381 0
 15563 5223 C1E218   		sall	$24, %edx
 15564 5226 4109D0   		orl	%edx, %r8d
 15565 5229 8D5001   		leal	1(%rax), %edx
 15566 522c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15566      000000
 15567 5233 C1E210   		sall	$16, %edx
 15568 5236 4109D0   		orl	%edx, %r8d
 15569 5239 8D5002   		leal	2(%rax), %edx
 15570 523c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15570      000000
 15571 5243 C1E208   		sall	$8, %edx
 15572 5246 4109D0   		orl	%edx, %r8d
 15573              	.LVL983:
3382:src/vm3.c     ****   if (op0 == 0x0) {
 15574              		.loc 1 3382 0
 15575 5249 4489C6   		movl	%r8d, %esi
3384:src/vm3.c     ****     op0 = op0 + funct;
 15576              		.loc 1 3384 0
 15577 524c 4488C2   		movb	%r8b, %dl
3382:src/vm3.c     ****   if (op0 == 0x0) {
 15578              		.loc 1 3382 0
 15579 524f C1EE1A   		shrl	$26, %esi
 15580              	.LVL984:
3384:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 653


 15581              		.loc 1 3384 0
 15582 5252 83E23F   		andl	$63, %edx
 15583 5255 8D7E2B   		leal	43(%rsi), %edi
 15584 5258 4084F6   		testb	%sil, %sil
 15585 525b 0F45D7   		cmovne	%edi, %edx
 15586              	.LVL985:
3394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15587              		.loc 1 3394 0
 15588 525e C1E110   		sall	$16, %ecx
 15589 5261 C1E318   		sall	$24, %ebx
 15590 5264 09CB     		orl	%ecx, %ebx
 15591 5266 8D4807   		leal	7(%rax), %ecx
 15592 5269 83C006   		addl	$6, %eax
 15593 526c 0FB68000 		movzbl	VM_memory(%rax), %eax
 15593      000000
3392:src/vm3.c     **** 
 15594              		.loc 1 3392 0
 15595 5273 0FB6D2   		movzbl	%dl, %edx
3394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15596              		.loc 1 3394 0
 15597 5276 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15597      000000
3392:src/vm3.c     **** 
 15598              		.loc 1 3392 0
 15599 527d 48C1E204 		salq	$4, %rdx
 15600              	.LVL986:
3394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15601              		.loc 1 3394 0
 15602 5281 C1E008   		sall	$8, %eax
 15603 5284 09CB     		orl	%ecx, %ebx
 15604 5286 09C3     		orl	%eax, %ebx
 15605              	.LVL987:
3395:src/vm3.c     ****   if (op1 == 0x0) {
 15606              		.loc 1 3395 0
 15607 5288 89D9     		movl	%ebx, %ecx
3397:src/vm3.c     ****     op1 = op1 + funct;
 15608              		.loc 1 3397 0
 15609 528a 88D8     		movb	%bl, %al
3395:src/vm3.c     ****   if (op1 == 0x0) {
 15610              		.loc 1 3395 0
 15611 528c C1E91A   		shrl	$26, %ecx
 15612              	.LVL988:
3397:src/vm3.c     ****     op1 = op1 + funct;
 15613              		.loc 1 3397 0
 15614 528f 83E03F   		andl	$63, %eax
 15615 5292 8D712B   		leal	43(%rcx), %esi
 15616 5295 84C9     		testb	%cl, %cl
 15617 5297 0F45C6   		cmovne	%esi, %eax
 15618              	.LVL989:
3404:src/vm3.c     **** 
 15619              		.loc 1 3404 0
 15620 529a 0FB6C0   		movzbl	%al, %eax
 15621 529d 48C1E004 		salq	$4, %rax
 15622              	.LVL990:
 15623 52a1 48038414 		addq	58088(%rsp,%rdx), %rax
 15623      E8E20000 
 15624 52a9 488B08   		movq	(%rax), %rcx
GAS LISTING /tmp/cc15eBE3.s 			page 654


 15625 52ac E9A7BAFF 		jmp	.L269
 15625      FF
 15626              	.LVL991:
 15627              	.L44:
3413:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15628              		.loc 1 3413 0
 15629 52b1 4489C0   		movl	%r8d, %eax
3414:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 15630              		.loc 1 3414 0
 15631 52b4 4489C2   		movl	%r8d, %edx
3412:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15632              		.loc 1 3412 0
 15633 52b7 41C1E815 		shrl	$21, %r8d
 15634              	.LVL992:
3413:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15635              		.loc 1 3413 0
 15636 52bb C1E810   		shrl	$16, %eax
 15637              	.LVL993:
3415:src/vm3.c     **** PC  =  nPC;
 15638              		.loc 1 3415 0
 15639 52be 4183E01F 		andl	$31, %r8d
3414:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 15640              		.loc 1 3414 0
 15641 52c2 C1EA0B   		shrl	$11, %edx
 15642              	.LVL994:
3415:src/vm3.c     **** PC  =  nPC;
 15643              		.loc 1 3415 0
 15644 52c5 83E01F   		andl	$31, %eax
 15645 52c8 83E21F   		andl	$31, %edx
3417:src/vm3.c     **** 
 15646              		.loc 1 3417 0
 15647 52cb 83050000 		addl	$4, nPC(%rip)
 15647      000004
 15648              	.LVL995:
3415:src/vm3.c     **** PC  =  nPC;
 15649              		.loc 1 3415 0
 15650 52d2 8B048500 		movl	RF(,%rax,4), %eax
 15650      000000
 15651 52d9 420B0485 		orl	RF(,%r8,4), %eax
 15651      00000000 
 15652 52e1 89049500 		movl	%eax, RF(,%rdx,4)
 15652      000000
3424:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 15653              		.loc 1 3424 0
 15654 52e8 89D8     		movl	%ebx, %eax
3425:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 15655              		.loc 1 3425 0
 15656 52ea 89DA     		movl	%ebx, %edx
3424:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 15657              		.loc 1 3424 0
 15658 52ec C1E810   		shrl	$16, %eax
3423:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15659              		.loc 1 3423 0
 15660 52ef C1EB06   		shrl	$6, %ebx
 15661              	.LVL996:
3425:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 15662              		.loc 1 3425 0
GAS LISTING /tmp/cc15eBE3.s 			page 655


 15663 52f2 C1EA0B   		shrl	$11, %edx
 15664              	.LVL997:
3426:src/vm3.c     **** PC  =  nPC;
 15665              		.loc 1 3426 0
 15666 52f5 83E01F   		andl	$31, %eax
3423:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15667              		.loc 1 3423 0
 15668 52f8 88D9     		movb	%bl, %cl
3426:src/vm3.c     **** PC  =  nPC;
 15669              		.loc 1 3426 0
 15670 52fa 83E21F   		andl	$31, %edx
 15671 52fd 8B048500 		movl	RF(,%rax,4), %eax
 15671      000000
3423:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15672              		.loc 1 3423 0
 15673 5304 83E11F   		andl	$31, %ecx
3426:src/vm3.c     **** PC  =  nPC;
 15674              		.loc 1 3426 0
 15675 5307 D3E8     		shrl	%cl, %eax
 15676 5309 89049500 		movl	%eax, RF(,%rdx,4)
 15676      000000
3427:src/vm3.c     **** nPC  += 4;
 15677              		.loc 1 3427 0
 15678 5310 8B050000 		movl	nPC(%rip), %eax
 15678      0000
3429:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15679              		.loc 1 3429 0
 15680 5316 8D5003   		leal	3(%rax), %edx
3428:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15681              		.loc 1 3428 0
 15682 5319 8D4804   		leal	4(%rax), %ecx
3427:src/vm3.c     **** nPC  += 4;
 15683              		.loc 1 3427 0
 15684 531c 89050000 		movl	%eax, PC(%rip)
 15684      0000
3429:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15685              		.loc 1 3429 0
 15686 5322 440FB682 		movzbl	VM_memory(%rdx), %r8d
 15686      00000000 
 15687 532a 89C2     		movl	%eax, %edx
3442:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15688              		.loc 1 3442 0
 15689 532c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15689      000000
3429:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15690              		.loc 1 3429 0
 15691 5333 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15691      000000
3428:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15692              		.loc 1 3428 0
 15693 533a 890D0000 		movl	%ecx, nPC(%rip)
 15693      0000
3442:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15694              		.loc 1 3442 0
 15695 5340 8D4805   		leal	5(%rax), %ecx
 15696 5343 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15696      000000
GAS LISTING /tmp/cc15eBE3.s 			page 656


3429:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15697              		.loc 1 3429 0
 15698 534a C1E218   		sall	$24, %edx
 15699 534d 4109D0   		orl	%edx, %r8d
 15700 5350 8D5001   		leal	1(%rax), %edx
 15701 5353 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15701      000000
 15702 535a C1E210   		sall	$16, %edx
 15703 535d 4109D0   		orl	%edx, %r8d
 15704 5360 8D5002   		leal	2(%rax), %edx
 15705 5363 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15705      000000
 15706 536a C1E208   		sall	$8, %edx
 15707 536d 4109D0   		orl	%edx, %r8d
 15708              	.LVL998:
3430:src/vm3.c     ****   if (op0 == 0x0) {
 15709              		.loc 1 3430 0
 15710 5370 4489C6   		movl	%r8d, %esi
3432:src/vm3.c     ****     op0 = op0 + funct;
 15711              		.loc 1 3432 0
 15712 5373 4488C2   		movb	%r8b, %dl
3430:src/vm3.c     ****   if (op0 == 0x0) {
 15713              		.loc 1 3430 0
 15714 5376 C1EE1A   		shrl	$26, %esi
 15715              	.LVL999:
3432:src/vm3.c     ****     op0 = op0 + funct;
 15716              		.loc 1 3432 0
 15717 5379 83E23F   		andl	$63, %edx
 15718 537c 8D7E2B   		leal	43(%rsi), %edi
 15719 537f 4084F6   		testb	%sil, %sil
 15720 5382 0F45D7   		cmovne	%edi, %edx
 15721              	.LVL1000:
3442:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15722              		.loc 1 3442 0
 15723 5385 C1E110   		sall	$16, %ecx
 15724 5388 C1E318   		sall	$24, %ebx
 15725 538b 09CB     		orl	%ecx, %ebx
 15726 538d 8D4807   		leal	7(%rax), %ecx
 15727 5390 83C006   		addl	$6, %eax
 15728 5393 0FB68000 		movzbl	VM_memory(%rax), %eax
 15728      000000
3440:src/vm3.c     **** 
 15729              		.loc 1 3440 0
 15730 539a 0FB6D2   		movzbl	%dl, %edx
3442:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15731              		.loc 1 3442 0
 15732 539d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15732      000000
3440:src/vm3.c     **** 
 15733              		.loc 1 3440 0
 15734 53a4 48C1E204 		salq	$4, %rdx
 15735              	.LVL1001:
3442:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15736              		.loc 1 3442 0
 15737 53a8 C1E008   		sall	$8, %eax
 15738 53ab 09CB     		orl	%ecx, %ebx
 15739 53ad 09C3     		orl	%eax, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 657


 15740              	.LVL1002:
3443:src/vm3.c     ****   if (op1 == 0x0) {
 15741              		.loc 1 3443 0
 15742 53af 89D9     		movl	%ebx, %ecx
3445:src/vm3.c     ****     op1 = op1 + funct;
 15743              		.loc 1 3445 0
 15744 53b1 88D8     		movb	%bl, %al
3443:src/vm3.c     ****   if (op1 == 0x0) {
 15745              		.loc 1 3443 0
 15746 53b3 C1E91A   		shrl	$26, %ecx
 15747              	.LVL1003:
3445:src/vm3.c     ****     op1 = op1 + funct;
 15748              		.loc 1 3445 0
 15749 53b6 83E03F   		andl	$63, %eax
 15750 53b9 8D712B   		leal	43(%rcx), %esi
 15751 53bc 84C9     		testb	%cl, %cl
 15752 53be 0F45C6   		cmovne	%esi, %eax
 15753              	.LVL1004:
3452:src/vm3.c     **** 
 15754              		.loc 1 3452 0
 15755 53c1 0FB6C0   		movzbl	%al, %eax
 15756 53c4 48C1E004 		salq	$4, %rax
 15757              	.LVL1005:
 15758 53c8 48038414 		addq	58088(%rsp,%rdx), %rax
 15758      E8E20000 
 15759 53d0 488B08   		movq	(%rax), %rcx
 15760 53d3 E980B9FF 		jmp	.L269
 15760      FF
 15761              	.LVL1006:
 15762              	.L56:
3461:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15763              		.loc 1 3461 0
 15764 53d8 4489C0   		movl	%r8d, %eax
3462:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 15765              		.loc 1 3462 0
 15766 53db 4489C2   		movl	%r8d, %edx
3460:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15767              		.loc 1 3460 0
 15768 53de 41C1E815 		shrl	$21, %r8d
 15769              	.LVL1007:
3461:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15770              		.loc 1 3461 0
 15771 53e2 C1E810   		shrl	$16, %eax
 15772              	.LVL1008:
3463:src/vm3.c     **** PC  =  nPC;
 15773              		.loc 1 3463 0
 15774 53e5 4183E01F 		andl	$31, %r8d
3462:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 15775              		.loc 1 3462 0
 15776 53e9 C1EA0B   		shrl	$11, %edx
 15777              	.LVL1009:
3463:src/vm3.c     **** PC  =  nPC;
 15778              		.loc 1 3463 0
 15779 53ec 83E01F   		andl	$31, %eax
 15780 53ef 83E21F   		andl	$31, %edx
3465:src/vm3.c     **** 
 15781              		.loc 1 3465 0
GAS LISTING /tmp/cc15eBE3.s 			page 658


 15782 53f2 83050000 		addl	$4, nPC(%rip)
 15782      000004
 15783              	.LVL1010:
3463:src/vm3.c     **** PC  =  nPC;
 15784              		.loc 1 3463 0
 15785 53f9 8B048500 		movl	RF(,%rax,4), %eax
 15785      000000
 15786 5400 42030485 		addl	RF(,%r8,4), %eax
 15786      00000000 
 15787 5408 89049500 		movl	%eax, RF(,%rdx,4)
 15787      000000
3471:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15788              		.loc 1 3471 0
 15789 540f 89D8     		movl	%ebx, %eax
3473:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 15790              		.loc 1 3473 0
 15791 5411 89DA     		movl	%ebx, %edx
3471:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15792              		.loc 1 3471 0
 15793 5413 C1E815   		shrl	$21, %eax
3472:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 15794              		.loc 1 3472 0
 15795 5416 C1EB10   		shrl	$16, %ebx
 15796              	.LVL1011:
3473:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 15797              		.loc 1 3473 0
 15798 5419 C1EA0B   		shrl	$11, %edx
 15799              	.LVL1012:
3474:src/vm3.c     **** PC  =  nPC;
 15800              		.loc 1 3474 0
 15801 541c 83E31F   		andl	$31, %ebx
 15802 541f 83E01F   		andl	$31, %eax
 15803 5422 83E21F   		andl	$31, %edx
 15804 5425 8B048500 		movl	RF(,%rax,4), %eax
 15804      000000
 15805 542c 2B049D00 		subl	RF(,%rbx,4), %eax
 15805      000000
 15806 5433 89049500 		movl	%eax, RF(,%rdx,4)
 15806      000000
3475:src/vm3.c     **** nPC  += 4;
 15807              		.loc 1 3475 0
 15808 543a 8B050000 		movl	nPC(%rip), %eax
 15808      0000
3477:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15809              		.loc 1 3477 0
 15810 5440 8D5003   		leal	3(%rax), %edx
3476:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15811              		.loc 1 3476 0
 15812 5443 8D4804   		leal	4(%rax), %ecx
3475:src/vm3.c     **** nPC  += 4;
 15813              		.loc 1 3475 0
 15814 5446 89050000 		movl	%eax, PC(%rip)
 15814      0000
3477:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15815              		.loc 1 3477 0
 15816 544c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 15816      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 659


 15817 5454 89C2     		movl	%eax, %edx
3490:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15818              		.loc 1 3490 0
 15819 5456 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15819      000000
3477:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15820              		.loc 1 3477 0
 15821 545d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15821      000000
3476:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15822              		.loc 1 3476 0
 15823 5464 890D0000 		movl	%ecx, nPC(%rip)
 15823      0000
3490:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15824              		.loc 1 3490 0
 15825 546a 8D4805   		leal	5(%rax), %ecx
 15826 546d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15826      000000
3477:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15827              		.loc 1 3477 0
 15828 5474 C1E218   		sall	$24, %edx
 15829 5477 4109D0   		orl	%edx, %r8d
 15830 547a 8D5001   		leal	1(%rax), %edx
 15831 547d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15831      000000
 15832 5484 C1E210   		sall	$16, %edx
 15833 5487 4109D0   		orl	%edx, %r8d
 15834 548a 8D5002   		leal	2(%rax), %edx
 15835 548d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15835      000000
 15836 5494 C1E208   		sall	$8, %edx
 15837 5497 4109D0   		orl	%edx, %r8d
 15838              	.LVL1013:
3478:src/vm3.c     ****   if (op0 == 0x0) {
 15839              		.loc 1 3478 0
 15840 549a 4489C6   		movl	%r8d, %esi
3480:src/vm3.c     ****     op0 = op0 + funct;
 15841              		.loc 1 3480 0
 15842 549d 4488C2   		movb	%r8b, %dl
3478:src/vm3.c     ****   if (op0 == 0x0) {
 15843              		.loc 1 3478 0
 15844 54a0 C1EE1A   		shrl	$26, %esi
 15845              	.LVL1014:
3480:src/vm3.c     ****     op0 = op0 + funct;
 15846              		.loc 1 3480 0
 15847 54a3 83E23F   		andl	$63, %edx
 15848 54a6 8D7E2B   		leal	43(%rsi), %edi
 15849 54a9 4084F6   		testb	%sil, %sil
 15850 54ac 0F45D7   		cmovne	%edi, %edx
 15851              	.LVL1015:
3490:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15852              		.loc 1 3490 0
 15853 54af C1E110   		sall	$16, %ecx
 15854 54b2 C1E318   		sall	$24, %ebx
 15855 54b5 09CB     		orl	%ecx, %ebx
 15856 54b7 8D4807   		leal	7(%rax), %ecx
 15857 54ba 83C006   		addl	$6, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 660


 15858 54bd 0FB68000 		movzbl	VM_memory(%rax), %eax
 15858      000000
3488:src/vm3.c     **** 
 15859              		.loc 1 3488 0
 15860 54c4 0FB6D2   		movzbl	%dl, %edx
3490:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15861              		.loc 1 3490 0
 15862 54c7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15862      000000
3488:src/vm3.c     **** 
 15863              		.loc 1 3488 0
 15864 54ce 48C1E204 		salq	$4, %rdx
 15865              	.LVL1016:
3490:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15866              		.loc 1 3490 0
 15867 54d2 C1E008   		sall	$8, %eax
 15868 54d5 09CB     		orl	%ecx, %ebx
 15869 54d7 09C3     		orl	%eax, %ebx
 15870              	.LVL1017:
3491:src/vm3.c     ****   if (op1 == 0x0) {
 15871              		.loc 1 3491 0
 15872 54d9 89D9     		movl	%ebx, %ecx
3493:src/vm3.c     ****     op1 = op1 + funct;
 15873              		.loc 1 3493 0
 15874 54db 88D8     		movb	%bl, %al
3491:src/vm3.c     ****   if (op1 == 0x0) {
 15875              		.loc 1 3491 0
 15876 54dd C1E91A   		shrl	$26, %ecx
 15877              	.LVL1018:
3493:src/vm3.c     ****     op1 = op1 + funct;
 15878              		.loc 1 3493 0
 15879 54e0 83E03F   		andl	$63, %eax
 15880 54e3 8D712B   		leal	43(%rcx), %esi
 15881 54e6 84C9     		testb	%cl, %cl
 15882 54e8 0F45C6   		cmovne	%esi, %eax
 15883              	.LVL1019:
3500:src/vm3.c     **** 
 15884              		.loc 1 3500 0
 15885 54eb 0FB6C0   		movzbl	%al, %eax
 15886 54ee 48C1E004 		salq	$4, %rax
 15887              	.LVL1020:
 15888 54f2 48038414 		addq	58088(%rsp,%rdx), %rax
 15888      E8E20000 
 15889 54fa 488B08   		movq	(%rax), %rcx
 15890 54fd E956B8FF 		jmp	.L269
 15890      FF
 15891              	.LVL1021:
 15892              	.L70:
3508:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15893              		.loc 1 3508 0
 15894 5502 4489C2   		movl	%r8d, %edx
3510:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 15895              		.loc 1 3510 0
 15896 5505 4489C0   		movl	%r8d, %eax
3509:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 15897              		.loc 1 3509 0
 15898 5508 41C1E810 		shrl	$16, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 661


 15899              	.LVL1022:
3508:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 15900              		.loc 1 3508 0
 15901 550c C1EA15   		shrl	$21, %edx
3510:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 15902              		.loc 1 3510 0
 15903 550f C1E80B   		shrl	$11, %eax
 15904              	.LVL1023:
3511:src/vm3.c     **** PC  =  nPC;
 15905              		.loc 1 3511 0
 15906 5512 4183E01F 		andl	$31, %r8d
 15907 5516 83E21F   		andl	$31, %edx
 15908 5519 83E01F   		andl	$31, %eax
 15909 551c 428B3C85 		movl	RF(,%r8,4), %edi
 15909      00000000 
 15910 5524 393C9500 		cmpl	%edi, RF(,%rdx,4)
 15910      000000
 15911 552b 0F92C2   		setb	%dl
3513:src/vm3.c     **** 
 15912              		.loc 1 3513 0
 15913 552e 83050000 		addl	$4, nPC(%rip)
 15913      000004
 15914              	.LVL1024:
3511:src/vm3.c     **** PC  =  nPC;
 15915              		.loc 1 3511 0
 15916 5535 0FB6D2   		movzbl	%dl, %edx
 15917 5538 89148500 		movl	%edx, RF(,%rax,4)
 15917      000000
3521:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 15918              		.loc 1 3521 0
 15919 553f 89D8     		movl	%ebx, %eax
 15920 5541 C1E810   		shrl	$16, %eax
3523:src/vm3.c     **** PC  =  nPC;
 15921              		.loc 1 3523 0
 15922 5544 83E01F   		andl	$31, %eax
 15923 5547 833C8500 		cmpl	$0, RF(,%rax,4)
 15923      00000000 
 15924 554f 741C     		je	.L595
3520:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15925              		.loc 1 3520 0 discriminator 1
 15926 5551 89D8     		movl	%ebx, %eax
3522:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 15927              		.loc 1 3522 0 discriminator 1
 15928 5553 C1EB0B   		shrl	$11, %ebx
 15929              	.LVL1025:
3520:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 15930              		.loc 1 3520 0 discriminator 1
 15931 5556 C1E815   		shrl	$21, %eax
 15932              	.LVL1026:
3523:src/vm3.c     **** PC  =  nPC;
 15933              		.loc 1 3523 0 discriminator 1
 15934 5559 83E31F   		andl	$31, %ebx
 15935              	.LVL1027:
 15936 555c 83E01F   		andl	$31, %eax
 15937              	.LVL1028:
 15938 555f 8B048500 		movl	RF(,%rax,4), %eax
 15938      000000
GAS LISTING /tmp/cc15eBE3.s 			page 662


 15939 5566 89049D00 		movl	%eax, RF(,%rbx,4)
 15939      000000
 15940              	.L595:
3524:src/vm3.c     **** nPC  += 4;
 15941              		.loc 1 3524 0
 15942 556d 8B050000 		movl	nPC(%rip), %eax
 15942      0000
3526:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15943              		.loc 1 3526 0
 15944 5573 8D5003   		leal	3(%rax), %edx
3525:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15945              		.loc 1 3525 0
 15946 5576 8D4804   		leal	4(%rax), %ecx
3524:src/vm3.c     **** nPC  += 4;
 15947              		.loc 1 3524 0
 15948 5579 89050000 		movl	%eax, PC(%rip)
 15948      0000
3526:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15949              		.loc 1 3526 0
 15950 557f 440FB682 		movzbl	VM_memory(%rdx), %r8d
 15950      00000000 
 15951 5587 89C2     		movl	%eax, %edx
3539:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15952              		.loc 1 3539 0
 15953 5589 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 15953      000000
3526:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15954              		.loc 1 3526 0
 15955 5590 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15955      000000
3525:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 15956              		.loc 1 3525 0
 15957 5597 890D0000 		movl	%ecx, nPC(%rip)
 15957      0000
3539:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15958              		.loc 1 3539 0
 15959 559d 8D4805   		leal	5(%rax), %ecx
 15960 55a0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15960      000000
3526:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 15961              		.loc 1 3526 0
 15962 55a7 C1E218   		sall	$24, %edx
 15963 55aa 4109D0   		orl	%edx, %r8d
 15964 55ad 8D5001   		leal	1(%rax), %edx
 15965 55b0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15965      000000
 15966 55b7 C1E210   		sall	$16, %edx
 15967 55ba 4109D0   		orl	%edx, %r8d
 15968 55bd 8D5002   		leal	2(%rax), %edx
 15969 55c0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 15969      000000
 15970 55c7 C1E208   		sall	$8, %edx
 15971 55ca 4109D0   		orl	%edx, %r8d
 15972              	.LVL1029:
3527:src/vm3.c     ****   if (op0 == 0x0) {
 15973              		.loc 1 3527 0
 15974 55cd 4489C6   		movl	%r8d, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 663


3529:src/vm3.c     ****     op0 = op0 + funct;
 15975              		.loc 1 3529 0
 15976 55d0 4488C2   		movb	%r8b, %dl
3527:src/vm3.c     ****   if (op0 == 0x0) {
 15977              		.loc 1 3527 0
 15978 55d3 C1EE1A   		shrl	$26, %esi
 15979              	.LVL1030:
3529:src/vm3.c     ****     op0 = op0 + funct;
 15980              		.loc 1 3529 0
 15981 55d6 83E23F   		andl	$63, %edx
 15982 55d9 8D7E2B   		leal	43(%rsi), %edi
 15983 55dc 4084F6   		testb	%sil, %sil
 15984 55df 0F45D7   		cmovne	%edi, %edx
 15985              	.LVL1031:
3539:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15986              		.loc 1 3539 0
 15987 55e2 C1E110   		sall	$16, %ecx
 15988 55e5 C1E318   		sall	$24, %ebx
 15989 55e8 09CB     		orl	%ecx, %ebx
 15990 55ea 8D4807   		leal	7(%rax), %ecx
 15991 55ed 83C006   		addl	$6, %eax
 15992 55f0 0FB68000 		movzbl	VM_memory(%rax), %eax
 15992      000000
3537:src/vm3.c     **** 
 15993              		.loc 1 3537 0
 15994 55f7 0FB6D2   		movzbl	%dl, %edx
3539:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 15995              		.loc 1 3539 0
 15996 55fa 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 15996      000000
3537:src/vm3.c     **** 
 15997              		.loc 1 3537 0
 15998 5601 48C1E204 		salq	$4, %rdx
 15999              	.LVL1032:
3539:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16000              		.loc 1 3539 0
 16001 5605 C1E008   		sall	$8, %eax
 16002 5608 09CB     		orl	%ecx, %ebx
 16003 560a 09C3     		orl	%eax, %ebx
 16004              	.LVL1033:
3540:src/vm3.c     ****   if (op1 == 0x0) {
 16005              		.loc 1 3540 0
 16006 560c 89D9     		movl	%ebx, %ecx
3542:src/vm3.c     ****     op1 = op1 + funct;
 16007              		.loc 1 3542 0
 16008 560e 88D8     		movb	%bl, %al
3540:src/vm3.c     ****   if (op1 == 0x0) {
 16009              		.loc 1 3540 0
 16010 5610 C1E91A   		shrl	$26, %ecx
 16011              	.LVL1034:
3542:src/vm3.c     ****     op1 = op1 + funct;
 16012              		.loc 1 3542 0
 16013 5613 83E03F   		andl	$63, %eax
 16014 5616 8D712B   		leal	43(%rcx), %esi
 16015 5619 84C9     		testb	%cl, %cl
 16016 561b 0F45C6   		cmovne	%esi, %eax
 16017              	.LVL1035:
GAS LISTING /tmp/cc15eBE3.s 			page 664


3549:src/vm3.c     **** 
 16018              		.loc 1 3549 0
 16019 561e 0FB6C0   		movzbl	%al, %eax
 16020 5621 48C1E004 		salq	$4, %rax
 16021              	.LVL1036:
 16022 5625 48038414 		addq	58088(%rsp,%rdx), %rax
 16022      E8E20000 
 16023 562d 488B08   		movq	(%rax), %rcx
 16024 5630 E923B7FF 		jmp	.L269
 16024      FF
 16025              	.LVL1037:
 16026              	.L71:
3557:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16027              		.loc 1 3557 0
 16028 5635 4489C2   		movl	%r8d, %edx
3559:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 16029              		.loc 1 3559 0
 16030 5638 4489C0   		movl	%r8d, %eax
3558:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 16031              		.loc 1 3558 0
 16032 563b 41C1E810 		shrl	$16, %r8d
 16033              	.LVL1038:
3557:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16034              		.loc 1 3557 0
 16035 563f C1EA15   		shrl	$21, %edx
3560:src/vm3.c     **** PC  =  nPC;
 16036              		.loc 1 3560 0
 16037 5642 4183E01F 		andl	$31, %r8d
3559:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 16038              		.loc 1 3559 0
 16039 5646 C1E80B   		shrl	$11, %eax
 16040              	.LVL1039:
3560:src/vm3.c     **** PC  =  nPC;
 16041              		.loc 1 3560 0
 16042 5649 83E21F   		andl	$31, %edx
 16043 564c 428B3C85 		movl	RF(,%r8,4), %edi
 16043      00000000 
 16044 5654 83E01F   		andl	$31, %eax
 16045 5657 393C9500 		cmpl	%edi, RF(,%rdx,4)
 16045      000000
3568:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16046              		.loc 1 3568 0
 16047 565e 89DE     		movl	%ebx, %esi
3569:src/vm3.c     **** if (RF[rs] == RF[rt])
 16048              		.loc 1 3569 0
 16049 5660 89D9     		movl	%ebx, %ecx
3560:src/vm3.c     **** PC  =  nPC;
 16050              		.loc 1 3560 0
 16051 5662 0F92C2   		setb	%dl
3568:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16052              		.loc 1 3568 0
 16053 5665 C1EE15   		shrl	$21, %esi
3569:src/vm3.c     **** if (RF[rs] == RF[rt])
 16054              		.loc 1 3569 0
 16055 5668 C1E910   		shrl	$16, %ecx
3560:src/vm3.c     **** PC  =  nPC;
 16056              		.loc 1 3560 0
GAS LISTING /tmp/cc15eBE3.s 			page 665


 16057 566b 0FB6D2   		movzbl	%dl, %edx
3570:src/vm3.c     **** {
 16058              		.loc 1 3570 0
 16059 566e 83E61F   		andl	$31, %esi
 16060 5671 83E11F   		andl	$31, %ecx
3560:src/vm3.c     **** PC  =  nPC;
 16061              		.loc 1 3560 0
 16062 5674 89148500 		movl	%edx, RF(,%rax,4)
 16062      000000
3561:src/vm3.c     **** nPC  += 4;
 16063              		.loc 1 3561 0
 16064 567b 8B050000 		movl	nPC(%rip), %eax
 16064      0000
3570:src/vm3.c     **** {
 16065              		.loc 1 3570 0
 16066 5681 8B3C8D00 		movl	RF(,%rcx,4), %edi
 16066      000000
 16067 5688 393CB500 		cmpl	%edi, RF(,%rsi,4)
 16067      000000
3562:src/vm3.c     **** 
 16068              		.loc 1 3562 0
 16069 568f 8D5004   		leal	4(%rax), %edx
 16070              	.LVL1040:
 16071 5692 448D4007 		leal	7(%rax), %r8d
 16072 5696 8D7805   		leal	5(%rax), %edi
 16073 5699 8D7006   		leal	6(%rax), %esi
 16074 569c 4189D1   		movl	%edx, %r9d
3573:src/vm3.c     ****   nPC  += (immediate << 2);
 16075              		.loc 1 3573 0
 16076 569f 89150000 		movl	%edx, PC(%rip)
 16076      0000
3570:src/vm3.c     **** {
 16077              		.loc 1 3570 0
 16078 56a5 0F85B600 		jne	.L600
 16078      0000
 16079              	.LVL1041:
3574:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 16080              		.loc 1 3574 0
 16081 56ab 0FBFDB   		movswl	%bx, %ebx
 16082              	.LVL1042:
3575:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16083              		.loc 1 3575 0
 16084 56ae 450FB680 		movzbl	VM_memory(%r8), %r8d
 16084      00000000 
3574:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 16085              		.loc 1 3574 0
 16086 56b6 8D049A   		leal	(%rdx,%rbx,4), %eax
3575:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16087              		.loc 1 3575 0
 16088 56b9 410FB691 		movzbl	VM_memory(%r9), %edx
 16088      00000000 
3574:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 16089              		.loc 1 3574 0
 16090 56c1 89050000 		movl	%eax, nPC(%rip)
 16090      0000
3575:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16091              		.loc 1 3575 0
GAS LISTING /tmp/cc15eBE3.s 			page 666


 16092 56c7 C1E218   		sall	$24, %edx
 16093 56ca 4109D0   		orl	%edx, %r8d
 16094 56cd 0FB69700 		movzbl	VM_memory(%rdi), %edx
 16094      000000
 16095 56d4 C1E210   		sall	$16, %edx
 16096 56d7 4109D0   		orl	%edx, %r8d
 16097 56da 0FB69600 		movzbl	VM_memory(%rsi), %edx
 16097      000000
 16098 56e1 C1E208   		sall	$8, %edx
 16099 56e4 4109D0   		orl	%edx, %r8d
 16100              	.LVL1043:
3576:src/vm3.c     ****   if (op0 == 0x0) {
 16101              		.loc 1 3576 0
 16102 56e7 4489C1   		movl	%r8d, %ecx
3578:src/vm3.c     ****     op0 = op0 + funct;
 16103              		.loc 1 3578 0
 16104 56ea 4488C2   		movb	%r8b, %dl
3576:src/vm3.c     ****   if (op0 == 0x0) {
 16105              		.loc 1 3576 0
 16106 56ed C1E91A   		shrl	$26, %ecx
 16107              	.LVL1044:
3578:src/vm3.c     ****     op0 = op0 + funct;
 16108              		.loc 1 3578 0
 16109 56f0 83E23F   		andl	$63, %edx
 16110 56f3 8D712B   		leal	43(%rcx), %esi
 16111 56f6 84C9     		testb	%cl, %cl
3588:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16112              		.loc 1 3588 0
 16113 56f8 8D4803   		leal	3(%rax), %ecx
 16114              	.LVL1045:
 16115 56fb 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16115      000000
 16116              	.LVL1046:
 16117 5702 89C1     		movl	%eax, %ecx
3578:src/vm3.c     ****     op0 = op0 + funct;
 16118              		.loc 1 3578 0
 16119 5704 0F45D6   		cmovne	%esi, %edx
 16120              	.LVL1047:
3588:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16121              		.loc 1 3588 0
 16122 5707 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16122      000000
3586:src/vm3.c     **** 
 16123              		.loc 1 3586 0
 16124 570e 0FB6D2   		movzbl	%dl, %edx
 16125 5711 48C1E204 		salq	$4, %rdx
 16126              	.LVL1048:
3588:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16127              		.loc 1 3588 0
 16128 5715 C1E118   		sall	$24, %ecx
 16129 5718 09CB     		orl	%ecx, %ebx
 16130 571a 8D4801   		leal	1(%rax), %ecx
 16131 571d 83C002   		addl	$2, %eax
 16132 5720 0FB68000 		movzbl	VM_memory(%rax), %eax
 16132      000000
 16133 5727 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16133      000000
GAS LISTING /tmp/cc15eBE3.s 			page 667


 16134 572e C1E008   		sall	$8, %eax
 16135 5731 C1E110   		sall	$16, %ecx
 16136 5734 09CB     		orl	%ecx, %ebx
 16137 5736 09C3     		orl	%eax, %ebx
 16138              	.LVL1049:
3589:src/vm3.c     ****   if (op1 == 0x0) {
 16139              		.loc 1 3589 0
 16140 5738 89D9     		movl	%ebx, %ecx
3591:src/vm3.c     ****     op1 = op1 + funct;
 16141              		.loc 1 3591 0
 16142 573a 88D8     		movb	%bl, %al
3589:src/vm3.c     ****   if (op1 == 0x0) {
 16143              		.loc 1 3589 0
 16144 573c C1E91A   		shrl	$26, %ecx
 16145              	.LVL1050:
3591:src/vm3.c     ****     op1 = op1 + funct;
 16146              		.loc 1 3591 0
 16147 573f 83E03F   		andl	$63, %eax
 16148 5742 8D712B   		leal	43(%rcx), %esi
 16149 5745 84C9     		testb	%cl, %cl
 16150 5747 0F45C6   		cmovne	%esi, %eax
 16151              	.LVL1051:
3598:src/vm3.c     **** 
 16152              		.loc 1 3598 0
 16153 574a 0FB6C0   		movzbl	%al, %eax
 16154 574d 48C1E004 		salq	$4, %rax
 16155              	.LVL1052:
 16156 5751 48038414 		addq	58088(%rsp,%rdx), %rax
 16156      E8E20000 
 16157 5759 488B08   		movq	(%rax), %rcx
 16158 575c E9F7B5FF 		jmp	.L269
 16158      FF
 16159              	.LVL1053:
 16160              	.L600:
3607:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16161              		.loc 1 3607 0
 16162 5761 410FB691 		movzbl	VM_memory(%r9), %edx
 16162      00000000 
 16163 5769 450FB680 		movzbl	VM_memory(%r8), %r8d
 16163      00000000 
3605:src/vm3.c     **** }
 16164              		.loc 1 3605 0
 16165 5771 8D4808   		leal	8(%rax), %ecx
3620:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16166              		.loc 1 3620 0
 16167 5774 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16167      000000
 16168              	.LVL1054:
3605:src/vm3.c     **** }
 16169              		.loc 1 3605 0
 16170 577b 890D0000 		movl	%ecx, nPC(%rip)
 16170      0000
3620:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16171              		.loc 1 3620 0
 16172 5781 8D4809   		leal	9(%rax), %ecx
3607:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16173              		.loc 1 3607 0
GAS LISTING /tmp/cc15eBE3.s 			page 668


 16174 5784 C1E218   		sall	$24, %edx
3620:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16175              		.loc 1 3620 0
 16176 5787 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16176      000000
3607:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16177              		.loc 1 3607 0
 16178 578e 4109D0   		orl	%edx, %r8d
 16179 5791 0FB69700 		movzbl	VM_memory(%rdi), %edx
 16179      000000
 16180 5798 C1E210   		sall	$16, %edx
 16181 579b 4109D0   		orl	%edx, %r8d
 16182 579e 0FB69600 		movzbl	VM_memory(%rsi), %edx
 16182      000000
 16183 57a5 C1E208   		sall	$8, %edx
 16184 57a8 4109D0   		orl	%edx, %r8d
 16185              	.LVL1055:
3608:src/vm3.c     ****   if (op0 == 0x0) {
 16186              		.loc 1 3608 0
 16187 57ab 4489C6   		movl	%r8d, %esi
3610:src/vm3.c     ****     op0 = op0 + funct;
 16188              		.loc 1 3610 0
 16189 57ae 4488C2   		movb	%r8b, %dl
3608:src/vm3.c     ****   if (op0 == 0x0) {
 16190              		.loc 1 3608 0
 16191 57b1 C1EE1A   		shrl	$26, %esi
 16192              	.LVL1056:
3610:src/vm3.c     ****     op0 = op0 + funct;
 16193              		.loc 1 3610 0
 16194 57b4 83E23F   		andl	$63, %edx
 16195 57b7 8D7E2B   		leal	43(%rsi), %edi
 16196 57ba 4084F6   		testb	%sil, %sil
 16197 57bd 0F45D7   		cmovne	%edi, %edx
 16198              	.LVL1057:
3620:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16199              		.loc 1 3620 0
 16200 57c0 C1E110   		sall	$16, %ecx
 16201 57c3 C1E318   		sall	$24, %ebx
 16202 57c6 09CB     		orl	%ecx, %ebx
 16203 57c8 8D480B   		leal	11(%rax), %ecx
 16204 57cb 83C00A   		addl	$10, %eax
 16205 57ce 0FB68000 		movzbl	VM_memory(%rax), %eax
 16205      000000
3618:src/vm3.c     **** 
 16206              		.loc 1 3618 0
 16207 57d5 0FB6D2   		movzbl	%dl, %edx
3620:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16208              		.loc 1 3620 0
 16209 57d8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16209      000000
3618:src/vm3.c     **** 
 16210              		.loc 1 3618 0
 16211 57df 48C1E204 		salq	$4, %rdx
 16212              	.LVL1058:
3620:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16213              		.loc 1 3620 0
 16214 57e3 C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 669


 16215 57e6 09CB     		orl	%ecx, %ebx
 16216 57e8 09C3     		orl	%eax, %ebx
 16217              	.LVL1059:
3621:src/vm3.c     ****   if (op1 == 0x0) {
 16218              		.loc 1 3621 0
 16219 57ea 89D9     		movl	%ebx, %ecx
3623:src/vm3.c     ****     op1 = op1 + funct;
 16220              		.loc 1 3623 0
 16221 57ec 88D8     		movb	%bl, %al
3621:src/vm3.c     ****   if (op1 == 0x0) {
 16222              		.loc 1 3621 0
 16223 57ee C1E91A   		shrl	$26, %ecx
 16224              	.LVL1060:
3623:src/vm3.c     ****     op1 = op1 + funct;
 16225              		.loc 1 3623 0
 16226 57f1 83E03F   		andl	$63, %eax
 16227 57f4 8D712B   		leal	43(%rcx), %esi
 16228 57f7 84C9     		testb	%cl, %cl
 16229 57f9 0F45C6   		cmovne	%esi, %eax
 16230              	.LVL1061:
3630:src/vm3.c     **** 
 16231              		.loc 1 3630 0
 16232 57fc 0FB6C0   		movzbl	%al, %eax
 16233 57ff 48C1E004 		salq	$4, %rax
 16234              	.LVL1062:
 16235 5803 48038414 		addq	58088(%rsp,%rdx), %rax
 16235      E8E20000 
 16236 580b 488B08   		movq	(%rax), %rcx
 16237 580e E945B5FF 		jmp	.L269
 16237      FF
 16238              	.LVL1063:
 16239              	.L76:
3638:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16240              		.loc 1 3638 0
 16241 5813 4489C2   		movl	%r8d, %edx
3641:src/vm3.c     **** PC  =  nPC;
 16242              		.loc 1 3641 0
 16243 5816 410FBFC0 		movswl	%r8w, %eax
3639:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 16244              		.loc 1 3639 0
 16245 581a 41C1E810 		shrl	$16, %r8d
 16246              	.LVL1064:
3638:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16247              		.loc 1 3638 0
 16248 581e C1EA15   		shrl	$21, %edx
 16249              	.LVL1065:
3641:src/vm3.c     **** PC  =  nPC;
 16250              		.loc 1 3641 0
 16251 5821 4183E01F 		andl	$31, %r8d
3652:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 16252              		.loc 1 3652 0
 16253 5825 0FBFCB   		movswl	%bx, %ecx
3641:src/vm3.c     **** PC  =  nPC;
 16254              		.loc 1 3641 0
 16255 5828 83E21F   		andl	$31, %edx
3643:src/vm3.c     **** 
 16256              		.loc 1 3643 0
GAS LISTING /tmp/cc15eBE3.s 			page 670


 16257 582b 83050000 		addl	$4, nPC(%rip)
 16257      000004
 16258              	.LVL1066:
3641:src/vm3.c     **** PC  =  nPC;
 16259              		.loc 1 3641 0
 16260 5832 03049500 		addl	RF(,%rdx,4), %eax
 16260      000000
 16261 5839 428B1485 		movl	RF(,%r8,4), %edx
 16261      00000000 
 16262 5841 88900000 		movb	%dl, VM_memory(%rax)
 16262      0000
3649:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16263              		.loc 1 3649 0
 16264 5847 89D8     		movl	%ebx, %eax
3650:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 16265              		.loc 1 3650 0
 16266 5849 C1EB10   		shrl	$16, %ebx
 16267              	.LVL1067:
3649:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16268              		.loc 1 3649 0
 16269 584c C1E815   		shrl	$21, %eax
 16270              	.LVL1068:
3652:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 16271              		.loc 1 3652 0
 16272 584f 83E31F   		andl	$31, %ebx
 16273 5852 83E01F   		andl	$31, %eax
 16274 5855 8B148500 		movl	RF(,%rax,4), %edx
 16274      000000
 16275 585c 8B049D00 		movl	RF(,%rbx,4), %eax
 16275      000000
 16276 5863 8D3411   		leal	(%rcx,%rdx), %esi
3653:src/vm3.c     **** PC  =  nPC;
 16277              		.loc 1 3653 0
 16278 5866 8D541101 		leal	1(%rcx,%rdx), %edx
3652:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 16279              		.loc 1 3652 0
 16280 586a 0FB6FC   		movzbl	%ah, %edi
 16281 586d 4088BE00 		movb	%dil, VM_memory(%rsi)
 16281      000000
3653:src/vm3.c     **** PC  =  nPC;
 16282              		.loc 1 3653 0
 16283 5874 88820000 		movb	%al, VM_memory(%rdx)
 16283      0000
3654:src/vm3.c     **** nPC  += 4;
 16284              		.loc 1 3654 0
 16285 587a 8B050000 		movl	nPC(%rip), %eax
 16285      0000
3656:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16286              		.loc 1 3656 0
 16287 5880 8D5003   		leal	3(%rax), %edx
3655:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16288              		.loc 1 3655 0
 16289 5883 8D4804   		leal	4(%rax), %ecx
 16290              	.LVL1069:
3654:src/vm3.c     **** nPC  += 4;
 16291              		.loc 1 3654 0
 16292 5886 89050000 		movl	%eax, PC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 671


 16292      0000
3656:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16293              		.loc 1 3656 0
 16294 588c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 16294      00000000 
 16295 5894 89C2     		movl	%eax, %edx
3669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16296              		.loc 1 3669 0
 16297 5896 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16297      000000
3656:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16298              		.loc 1 3656 0
 16299 589d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16299      000000
3655:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16300              		.loc 1 3655 0
 16301 58a4 890D0000 		movl	%ecx, nPC(%rip)
 16301      0000
3669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16302              		.loc 1 3669 0
 16303 58aa 8D4805   		leal	5(%rax), %ecx
 16304 58ad 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16304      000000
3656:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16305              		.loc 1 3656 0
 16306 58b4 C1E218   		sall	$24, %edx
 16307 58b7 4109D0   		orl	%edx, %r8d
 16308 58ba 8D5001   		leal	1(%rax), %edx
 16309 58bd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16309      000000
 16310 58c4 C1E210   		sall	$16, %edx
 16311 58c7 4109D0   		orl	%edx, %r8d
 16312 58ca 8D5002   		leal	2(%rax), %edx
 16313 58cd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16313      000000
 16314 58d4 C1E208   		sall	$8, %edx
 16315 58d7 4109D0   		orl	%edx, %r8d
 16316              	.LVL1070:
3657:src/vm3.c     ****   if (op0 == 0x0) {
 16317              		.loc 1 3657 0
 16318 58da 4489C6   		movl	%r8d, %esi
3659:src/vm3.c     ****     op0 = op0 + funct;
 16319              		.loc 1 3659 0
 16320 58dd 4488C2   		movb	%r8b, %dl
3657:src/vm3.c     ****   if (op0 == 0x0) {
 16321              		.loc 1 3657 0
 16322 58e0 C1EE1A   		shrl	$26, %esi
 16323              	.LVL1071:
3659:src/vm3.c     ****     op0 = op0 + funct;
 16324              		.loc 1 3659 0
 16325 58e3 83E23F   		andl	$63, %edx
 16326 58e6 8D7E2B   		leal	43(%rsi), %edi
 16327 58e9 4084F6   		testb	%sil, %sil
 16328 58ec 0F45D7   		cmovne	%edi, %edx
 16329              	.LVL1072:
3669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16330              		.loc 1 3669 0
GAS LISTING /tmp/cc15eBE3.s 			page 672


 16331 58ef C1E110   		sall	$16, %ecx
 16332 58f2 C1E318   		sall	$24, %ebx
 16333 58f5 09CB     		orl	%ecx, %ebx
 16334 58f7 8D4807   		leal	7(%rax), %ecx
 16335 58fa 83C006   		addl	$6, %eax
 16336 58fd 0FB68000 		movzbl	VM_memory(%rax), %eax
 16336      000000
3667:src/vm3.c     **** 
 16337              		.loc 1 3667 0
 16338 5904 0FB6D2   		movzbl	%dl, %edx
3669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16339              		.loc 1 3669 0
 16340 5907 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16340      000000
3667:src/vm3.c     **** 
 16341              		.loc 1 3667 0
 16342 590e 48C1E204 		salq	$4, %rdx
 16343              	.LVL1073:
3669:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16344              		.loc 1 3669 0
 16345 5912 C1E008   		sall	$8, %eax
 16346 5915 09CB     		orl	%ecx, %ebx
 16347 5917 09C3     		orl	%eax, %ebx
 16348              	.LVL1074:
3670:src/vm3.c     ****   if (op1 == 0x0) {
 16349              		.loc 1 3670 0
 16350 5919 89D9     		movl	%ebx, %ecx
3672:src/vm3.c     ****     op1 = op1 + funct;
 16351              		.loc 1 3672 0
 16352 591b 88D8     		movb	%bl, %al
3670:src/vm3.c     ****   if (op1 == 0x0) {
 16353              		.loc 1 3670 0
 16354 591d C1E91A   		shrl	$26, %ecx
 16355              	.LVL1075:
3672:src/vm3.c     ****     op1 = op1 + funct;
 16356              		.loc 1 3672 0
 16357 5920 83E03F   		andl	$63, %eax
 16358 5923 8D712B   		leal	43(%rcx), %esi
 16359 5926 84C9     		testb	%cl, %cl
 16360 5928 0F45C6   		cmovne	%esi, %eax
 16361              	.LVL1076:
3679:src/vm3.c     **** 
 16362              		.loc 1 3679 0
 16363 592b 0FB6C0   		movzbl	%al, %eax
 16364 592e 48C1E004 		salq	$4, %rax
 16365              	.LVL1077:
 16366 5932 48038414 		addq	58088(%rsp,%rdx), %rax
 16366      E8E20000 
 16367 593a 488B08   		movq	(%rax), %rcx
 16368 593d E916B4FF 		jmp	.L269
 16368      FF
 16369              	.LVL1078:
 16370              	.L41:
3696:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16371              		.loc 1 3696 0
 16372 5942 89DA     		movl	%ebx, %edx
3687:src/vm3.c     **** RF[rd] = HI;
GAS LISTING /tmp/cc15eBE3.s 			page 673


 16373              		.loc 1 3687 0
 16374 5944 41C1E80B 		shrl	$11, %r8d
 16375              	.LVL1079:
3697:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 16376              		.loc 1 3697 0
 16377 5948 89D8     		movl	%ebx, %eax
3696:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16378              		.loc 1 3696 0
 16379 594a C1EA15   		shrl	$21, %edx
3688:src/vm3.c     **** PC  =  nPC;
 16380              		.loc 1 3688 0
 16381 594d 4183E01F 		andl	$31, %r8d
3699:src/vm3.c     **** PC  =  nPC;
 16382              		.loc 1 3699 0
 16383 5951 0FBFDB   		movswl	%bx, %ebx
 16384              	.LVL1080:
 16385 5954 83E21F   		andl	$31, %edx
3688:src/vm3.c     **** PC  =  nPC;
 16386              		.loc 1 3688 0
 16387 5957 46892C85 		movl	%r13d, RF(,%r8,4)
 16387      00000000 
3697:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 16388              		.loc 1 3697 0
 16389 595f C1E810   		shrl	$16, %eax
 16390              	.LVL1081:
3699:src/vm3.c     **** PC  =  nPC;
 16391              		.loc 1 3699 0
 16392 5962 031C9500 		addl	RF(,%rdx,4), %ebx
 16392      000000
3690:src/vm3.c     **** 
 16393              		.loc 1 3690 0
 16394 5969 83050000 		addl	$4, nPC(%rip)
 16394      000004
3699:src/vm3.c     **** PC  =  nPC;
 16395              		.loc 1 3699 0
 16396 5970 83E01F   		andl	$31, %eax
 16397 5973 891C8500 		movl	%ebx, RF(,%rax,4)
 16397      000000
3700:src/vm3.c     **** nPC  += 4;
 16398              		.loc 1 3700 0
 16399 597a 8B050000 		movl	nPC(%rip), %eax
 16399      0000
3702:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16400              		.loc 1 3702 0
 16401 5980 8D5003   		leal	3(%rax), %edx
3701:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16402              		.loc 1 3701 0
 16403 5983 8D4804   		leal	4(%rax), %ecx
3700:src/vm3.c     **** nPC  += 4;
 16404              		.loc 1 3700 0
 16405 5986 89050000 		movl	%eax, PC(%rip)
 16405      0000
3702:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16406              		.loc 1 3702 0
 16407 598c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 16407      00000000 
 16408 5994 89C2     		movl	%eax, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 674


3715:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16409              		.loc 1 3715 0
 16410 5996 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16410      000000
3702:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16411              		.loc 1 3702 0
 16412 599d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16412      000000
3701:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16413              		.loc 1 3701 0
 16414 59a4 890D0000 		movl	%ecx, nPC(%rip)
 16414      0000
3715:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16415              		.loc 1 3715 0
 16416 59aa 8D4805   		leal	5(%rax), %ecx
 16417 59ad 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16417      000000
3702:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16418              		.loc 1 3702 0
 16419 59b4 C1E218   		sall	$24, %edx
 16420 59b7 4109D0   		orl	%edx, %r8d
 16421 59ba 8D5001   		leal	1(%rax), %edx
 16422 59bd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16422      000000
 16423 59c4 C1E210   		sall	$16, %edx
 16424 59c7 4109D0   		orl	%edx, %r8d
 16425 59ca 8D5002   		leal	2(%rax), %edx
 16426 59cd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16426      000000
 16427 59d4 C1E208   		sall	$8, %edx
 16428 59d7 4109D0   		orl	%edx, %r8d
 16429              	.LVL1082:
3703:src/vm3.c     ****   if (op0 == 0x0) {
 16430              		.loc 1 3703 0
 16431 59da 4489C6   		movl	%r8d, %esi
3705:src/vm3.c     ****     op0 = op0 + funct;
 16432              		.loc 1 3705 0
 16433 59dd 4488C2   		movb	%r8b, %dl
3703:src/vm3.c     ****   if (op0 == 0x0) {
 16434              		.loc 1 3703 0
 16435 59e0 C1EE1A   		shrl	$26, %esi
 16436              	.LVL1083:
3705:src/vm3.c     ****     op0 = op0 + funct;
 16437              		.loc 1 3705 0
 16438 59e3 83E23F   		andl	$63, %edx
 16439 59e6 8D7E2B   		leal	43(%rsi), %edi
 16440 59e9 4084F6   		testb	%sil, %sil
 16441 59ec 0F45D7   		cmovne	%edi, %edx
 16442              	.LVL1084:
3715:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16443              		.loc 1 3715 0
 16444 59ef C1E110   		sall	$16, %ecx
 16445 59f2 C1E318   		sall	$24, %ebx
 16446 59f5 09CB     		orl	%ecx, %ebx
 16447 59f7 8D4807   		leal	7(%rax), %ecx
 16448 59fa 83C006   		addl	$6, %eax
 16449 59fd 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 675


 16449      000000
3713:src/vm3.c     **** 
 16450              		.loc 1 3713 0
 16451 5a04 0FB6D2   		movzbl	%dl, %edx
3715:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16452              		.loc 1 3715 0
 16453 5a07 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16453      000000
3713:src/vm3.c     **** 
 16454              		.loc 1 3713 0
 16455 5a0e 48C1E204 		salq	$4, %rdx
 16456              	.LVL1085:
3715:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16457              		.loc 1 3715 0
 16458 5a12 C1E008   		sall	$8, %eax
 16459 5a15 09CB     		orl	%ecx, %ebx
 16460 5a17 09C3     		orl	%eax, %ebx
 16461              	.LVL1086:
3716:src/vm3.c     ****   if (op1 == 0x0) {
 16462              		.loc 1 3716 0
 16463 5a19 89D9     		movl	%ebx, %ecx
3718:src/vm3.c     ****     op1 = op1 + funct;
 16464              		.loc 1 3718 0
 16465 5a1b 88D8     		movb	%bl, %al
3716:src/vm3.c     ****   if (op1 == 0x0) {
 16466              		.loc 1 3716 0
 16467 5a1d C1E91A   		shrl	$26, %ecx
 16468              	.LVL1087:
3718:src/vm3.c     ****     op1 = op1 + funct;
 16469              		.loc 1 3718 0
 16470 5a20 83E03F   		andl	$63, %eax
 16471 5a23 8D712B   		leal	43(%rcx), %esi
 16472 5a26 84C9     		testb	%cl, %cl
 16473 5a28 0F45C6   		cmovne	%esi, %eax
 16474              	.LVL1088:
3725:src/vm3.c     **** 
 16475              		.loc 1 3725 0
 16476 5a2b 0FB6C0   		movzbl	%al, %eax
 16477 5a2e 48C1E004 		salq	$4, %rax
 16478              	.LVL1089:
 16479 5a32 48038414 		addq	58088(%rsp,%rdx), %rax
 16479      E8E20000 
 16480 5a3a 488B08   		movq	(%rax), %rcx
 16481 5a3d E916B3FF 		jmp	.L269
 16481      FF
 16482              	.LVL1090:
 16483              	.L77:
3734:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 16484              		.loc 1 3734 0
 16485 5a42 4489C0   		movl	%r8d, %eax
3735:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 16486              		.loc 1 3735 0
 16487 5a45 4489C2   		movl	%r8d, %edx
3733:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16488              		.loc 1 3733 0
 16489 5a48 41C1E815 		shrl	$21, %r8d
 16490              	.LVL1091:
GAS LISTING /tmp/cc15eBE3.s 			page 676


3734:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 16491              		.loc 1 3734 0
 16492 5a4c C1E810   		shrl	$16, %eax
 16493              	.LVL1092:
3736:src/vm3.c     **** PC  =  nPC;
 16494              		.loc 1 3736 0
 16495 5a4f 4183E01F 		andl	$31, %r8d
3735:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 16496              		.loc 1 3735 0
 16497 5a53 C1EA0B   		shrl	$11, %edx
 16498              	.LVL1093:
3736:src/vm3.c     **** PC  =  nPC;
 16499              		.loc 1 3736 0
 16500 5a56 83E01F   		andl	$31, %eax
 16501 5a59 83E21F   		andl	$31, %edx
3738:src/vm3.c     **** 
 16502              		.loc 1 3738 0
 16503 5a5c 83050000 		addl	$4, nPC(%rip)
 16503      000004
 16504              	.LVL1094:
3736:src/vm3.c     **** PC  =  nPC;
 16505              		.loc 1 3736 0
 16506 5a63 8B048500 		movl	RF(,%rax,4), %eax
 16506      000000
 16507 5a6a 42330485 		xorl	RF(,%r8,4), %eax
 16507      00000000 
 16508 5a72 89049500 		movl	%eax, RF(,%rdx,4)
 16508      000000
3745:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16509              		.loc 1 3745 0
 16510 5a79 89D8     		movl	%ebx, %eax
3746:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 16511              		.loc 1 3746 0
 16512 5a7b 89DA     		movl	%ebx, %edx
3745:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16513              		.loc 1 3745 0
 16514 5a7d C1E810   		shrl	$16, %eax
3744:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16515              		.loc 1 3744 0
 16516 5a80 C1EB06   		shrl	$6, %ebx
 16517              	.LVL1095:
3746:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 16518              		.loc 1 3746 0
 16519 5a83 C1EA0B   		shrl	$11, %edx
 16520              	.LVL1096:
3747:src/vm3.c     **** PC  =  nPC;
 16521              		.loc 1 3747 0
 16522 5a86 83E01F   		andl	$31, %eax
3744:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16523              		.loc 1 3744 0
 16524 5a89 88D9     		movb	%bl, %cl
3747:src/vm3.c     **** PC  =  nPC;
 16525              		.loc 1 3747 0
 16526 5a8b 83E21F   		andl	$31, %edx
 16527 5a8e 8B048500 		movl	RF(,%rax,4), %eax
 16527      000000
3744:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 677


 16528              		.loc 1 3744 0
 16529 5a95 83E11F   		andl	$31, %ecx
3747:src/vm3.c     **** PC  =  nPC;
 16530              		.loc 1 3747 0
 16531 5a98 D3E0     		sall	%cl, %eax
 16532 5a9a 89049500 		movl	%eax, RF(,%rdx,4)
 16532      000000
3748:src/vm3.c     **** nPC  += 4;
 16533              		.loc 1 3748 0
 16534 5aa1 8B050000 		movl	nPC(%rip), %eax
 16534      0000
3750:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16535              		.loc 1 3750 0
 16536 5aa7 8D5003   		leal	3(%rax), %edx
3749:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16537              		.loc 1 3749 0
 16538 5aaa 8D4804   		leal	4(%rax), %ecx
3748:src/vm3.c     **** nPC  += 4;
 16539              		.loc 1 3748 0
 16540 5aad 89050000 		movl	%eax, PC(%rip)
 16540      0000
3750:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16541              		.loc 1 3750 0
 16542 5ab3 440FB682 		movzbl	VM_memory(%rdx), %r8d
 16542      00000000 
 16543 5abb 89C2     		movl	%eax, %edx
3763:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16544              		.loc 1 3763 0
 16545 5abd 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16545      000000
3750:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16546              		.loc 1 3750 0
 16547 5ac4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16547      000000
3749:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16548              		.loc 1 3749 0
 16549 5acb 890D0000 		movl	%ecx, nPC(%rip)
 16549      0000
3763:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16550              		.loc 1 3763 0
 16551 5ad1 8D4805   		leal	5(%rax), %ecx
 16552 5ad4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16552      000000
3750:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16553              		.loc 1 3750 0
 16554 5adb C1E218   		sall	$24, %edx
 16555 5ade 4109D0   		orl	%edx, %r8d
 16556 5ae1 8D5001   		leal	1(%rax), %edx
 16557 5ae4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16557      000000
 16558 5aeb C1E210   		sall	$16, %edx
 16559 5aee 4109D0   		orl	%edx, %r8d
 16560 5af1 8D5002   		leal	2(%rax), %edx
 16561 5af4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16561      000000
 16562 5afb C1E208   		sall	$8, %edx
 16563 5afe 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 678


 16564              	.LVL1097:
3751:src/vm3.c     ****   if (op0 == 0x0) {
 16565              		.loc 1 3751 0
 16566 5b01 4489C6   		movl	%r8d, %esi
3753:src/vm3.c     ****     op0 = op0 + funct;
 16567              		.loc 1 3753 0
 16568 5b04 4488C2   		movb	%r8b, %dl
3751:src/vm3.c     ****   if (op0 == 0x0) {
 16569              		.loc 1 3751 0
 16570 5b07 C1EE1A   		shrl	$26, %esi
 16571              	.LVL1098:
3753:src/vm3.c     ****     op0 = op0 + funct;
 16572              		.loc 1 3753 0
 16573 5b0a 83E23F   		andl	$63, %edx
 16574 5b0d 8D7E2B   		leal	43(%rsi), %edi
 16575 5b10 4084F6   		testb	%sil, %sil
 16576 5b13 0F45D7   		cmovne	%edi, %edx
 16577              	.LVL1099:
3763:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16578              		.loc 1 3763 0
 16579 5b16 C1E110   		sall	$16, %ecx
 16580 5b19 C1E318   		sall	$24, %ebx
 16581 5b1c 09CB     		orl	%ecx, %ebx
 16582 5b1e 8D4807   		leal	7(%rax), %ecx
 16583 5b21 83C006   		addl	$6, %eax
 16584 5b24 0FB68000 		movzbl	VM_memory(%rax), %eax
 16584      000000
3761:src/vm3.c     **** 
 16585              		.loc 1 3761 0
 16586 5b2b 0FB6D2   		movzbl	%dl, %edx
3763:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16587              		.loc 1 3763 0
 16588 5b2e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16588      000000
3761:src/vm3.c     **** 
 16589              		.loc 1 3761 0
 16590 5b35 48C1E204 		salq	$4, %rdx
 16591              	.LVL1100:
3763:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16592              		.loc 1 3763 0
 16593 5b39 C1E008   		sall	$8, %eax
 16594 5b3c 09CB     		orl	%ecx, %ebx
 16595 5b3e 09C3     		orl	%eax, %ebx
 16596              	.LVL1101:
3764:src/vm3.c     ****   if (op1 == 0x0) {
 16597              		.loc 1 3764 0
 16598 5b40 89D9     		movl	%ebx, %ecx
3766:src/vm3.c     ****     op1 = op1 + funct;
 16599              		.loc 1 3766 0
 16600 5b42 88D8     		movb	%bl, %al
3764:src/vm3.c     ****   if (op1 == 0x0) {
 16601              		.loc 1 3764 0
 16602 5b44 C1E91A   		shrl	$26, %ecx
 16603              	.LVL1102:
3766:src/vm3.c     ****     op1 = op1 + funct;
 16604              		.loc 1 3766 0
 16605 5b47 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 679


 16606 5b4a 8D712B   		leal	43(%rcx), %esi
 16607 5b4d 84C9     		testb	%cl, %cl
 16608 5b4f 0F45C6   		cmovne	%esi, %eax
 16609              	.LVL1103:
3773:src/vm3.c     **** 
 16610              		.loc 1 3773 0
 16611 5b52 0FB6C0   		movzbl	%al, %eax
 16612 5b55 48C1E004 		salq	$4, %rax
 16613              	.LVL1104:
 16614 5b59 48038414 		addq	58088(%rsp,%rdx), %rax
 16614      E8E20000 
 16615 5b61 488B08   		movq	(%rax), %rcx
 16616 5b64 E9EFB1FF 		jmp	.L269
 16616      FF
 16617              	.LVL1105:
 16618              	.L91:
3781:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16619              		.loc 1 3781 0
 16620 5b69 4489C0   		movl	%r8d, %eax
3784:src/vm3.c     **** PC  =  nPC;
 16621              		.loc 1 3784 0
 16622 5b6c 410FBFD0 		movswl	%r8w, %edx
3782:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 16623              		.loc 1 3782 0
 16624 5b70 41C1E810 		shrl	$16, %r8d
 16625              	.LVL1106:
3781:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16626              		.loc 1 3781 0
 16627 5b74 C1E815   		shrl	$21, %eax
 16628              	.LVL1107:
3784:src/vm3.c     **** PC  =  nPC;
 16629              		.loc 1 3784 0
 16630 5b77 4183E01F 		andl	$31, %r8d
3786:src/vm3.c     **** 
 16631              		.loc 1 3786 0
 16632 5b7b 83050000 		addl	$4, nPC(%rip)
 16632      000004
 16633              	.LVL1108:
3784:src/vm3.c     **** PC  =  nPC;
 16634              		.loc 1 3784 0
 16635 5b82 83E01F   		andl	$31, %eax
 16636 5b85 03148500 		addl	RF(,%rax,4), %edx
 16636      000000
 16637              	.LVL1109:
 16638 5b8c 8D4203   		leal	3(%rdx), %eax
 16639 5b8f 89D1     		movl	%edx, %ecx
 16640 5b91 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16640      000000
 16641 5b98 0FB68000 		movzbl	VM_memory(%rax), %eax
 16641      000000
 16642 5b9f C1E118   		sall	$24, %ecx
 16643 5ba2 09C8     		orl	%ecx, %eax
 16644 5ba4 8D4A01   		leal	1(%rdx), %ecx
 16645 5ba7 83C202   		addl	$2, %edx
 16646 5baa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16646      000000
 16647 5bb1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 680


 16647      000000
 16648 5bb8 C1E208   		sall	$8, %edx
 16649 5bbb C1E110   		sall	$16, %ecx
 16650 5bbe 09C8     		orl	%ecx, %eax
 16651 5bc0 09D0     		orl	%edx, %eax
3794:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 16652              		.loc 1 3794 0
 16653 5bc2 89DA     		movl	%ebx, %edx
3784:src/vm3.c     **** PC  =  nPC;
 16654              		.loc 1 3784 0
 16655 5bc4 42890485 		movl	%eax, RF(,%r8,4)
 16655      00000000 
3793:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16656              		.loc 1 3793 0
 16657 5bcc 89D8     		movl	%ebx, %eax
3792:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16658              		.loc 1 3792 0
 16659 5bce C1EB15   		shrl	$21, %ebx
 16660              	.LVL1110:
3793:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16661              		.loc 1 3793 0
 16662 5bd1 C1E810   		shrl	$16, %eax
 16663              	.LVL1111:
3795:src/vm3.c     **** PC  =  nPC;
 16664              		.loc 1 3795 0
 16665 5bd4 83E31F   		andl	$31, %ebx
3794:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 16666              		.loc 1 3794 0
 16667 5bd7 C1EA0B   		shrl	$11, %edx
 16668              	.LVL1112:
3795:src/vm3.c     **** PC  =  nPC;
 16669              		.loc 1 3795 0
 16670 5bda 83E01F   		andl	$31, %eax
 16671 5bdd 83E21F   		andl	$31, %edx
 16672 5be0 8B048500 		movl	RF(,%rax,4), %eax
 16672      000000
 16673 5be7 03049D00 		addl	RF(,%rbx,4), %eax
 16673      000000
 16674 5bee 89049500 		movl	%eax, RF(,%rdx,4)
 16674      000000
3796:src/vm3.c     **** nPC  += 4;
 16675              		.loc 1 3796 0
 16676 5bf5 8B050000 		movl	nPC(%rip), %eax
 16676      0000
3798:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16677              		.loc 1 3798 0
 16678 5bfb 8D5003   		leal	3(%rax), %edx
3797:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16679              		.loc 1 3797 0
 16680 5bfe 8D4804   		leal	4(%rax), %ecx
3796:src/vm3.c     **** nPC  += 4;
 16681              		.loc 1 3796 0
 16682 5c01 89050000 		movl	%eax, PC(%rip)
 16682      0000
3798:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16683              		.loc 1 3798 0
 16684 5c07 440FB682 		movzbl	VM_memory(%rdx), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 681


 16684      00000000 
 16685 5c0f 89C2     		movl	%eax, %edx
3811:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16686              		.loc 1 3811 0
 16687 5c11 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16687      000000
3798:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16688              		.loc 1 3798 0
 16689 5c18 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16689      000000
3797:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16690              		.loc 1 3797 0
 16691 5c1f 890D0000 		movl	%ecx, nPC(%rip)
 16691      0000
3811:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16692              		.loc 1 3811 0
 16693 5c25 8D4805   		leal	5(%rax), %ecx
 16694 5c28 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16694      000000
3798:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16695              		.loc 1 3798 0
 16696 5c2f C1E218   		sall	$24, %edx
 16697 5c32 4109D0   		orl	%edx, %r8d
 16698 5c35 8D5001   		leal	1(%rax), %edx
 16699 5c38 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16699      000000
 16700 5c3f C1E210   		sall	$16, %edx
 16701 5c42 4109D0   		orl	%edx, %r8d
 16702 5c45 8D5002   		leal	2(%rax), %edx
 16703 5c48 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16703      000000
 16704 5c4f C1E208   		sall	$8, %edx
 16705 5c52 4109D0   		orl	%edx, %r8d
 16706              	.LVL1113:
3799:src/vm3.c     ****   if (op0 == 0x0) {
 16707              		.loc 1 3799 0
 16708 5c55 4489C6   		movl	%r8d, %esi
3801:src/vm3.c     ****     op0 = op0 + funct;
 16709              		.loc 1 3801 0
 16710 5c58 4488C2   		movb	%r8b, %dl
3799:src/vm3.c     ****   if (op0 == 0x0) {
 16711              		.loc 1 3799 0
 16712 5c5b C1EE1A   		shrl	$26, %esi
 16713              	.LVL1114:
3801:src/vm3.c     ****     op0 = op0 + funct;
 16714              		.loc 1 3801 0
 16715 5c5e 83E23F   		andl	$63, %edx
 16716 5c61 8D7E2B   		leal	43(%rsi), %edi
 16717 5c64 4084F6   		testb	%sil, %sil
 16718 5c67 0F45D7   		cmovne	%edi, %edx
 16719              	.LVL1115:
3811:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16720              		.loc 1 3811 0
 16721 5c6a C1E110   		sall	$16, %ecx
 16722 5c6d C1E318   		sall	$24, %ebx
 16723 5c70 09CB     		orl	%ecx, %ebx
 16724 5c72 8D4807   		leal	7(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 682


 16725 5c75 83C006   		addl	$6, %eax
 16726 5c78 0FB68000 		movzbl	VM_memory(%rax), %eax
 16726      000000
3809:src/vm3.c     **** 
 16727              		.loc 1 3809 0
 16728 5c7f 0FB6D2   		movzbl	%dl, %edx
3811:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16729              		.loc 1 3811 0
 16730 5c82 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16730      000000
3809:src/vm3.c     **** 
 16731              		.loc 1 3809 0
 16732 5c89 48C1E204 		salq	$4, %rdx
 16733              	.LVL1116:
3811:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16734              		.loc 1 3811 0
 16735 5c8d C1E008   		sall	$8, %eax
 16736 5c90 09CB     		orl	%ecx, %ebx
 16737 5c92 09C3     		orl	%eax, %ebx
 16738              	.LVL1117:
3812:src/vm3.c     ****   if (op1 == 0x0) {
 16739              		.loc 1 3812 0
 16740 5c94 89D9     		movl	%ebx, %ecx
3814:src/vm3.c     ****     op1 = op1 + funct;
 16741              		.loc 1 3814 0
 16742 5c96 88D8     		movb	%bl, %al
3812:src/vm3.c     ****   if (op1 == 0x0) {
 16743              		.loc 1 3812 0
 16744 5c98 C1E91A   		shrl	$26, %ecx
 16745              	.LVL1118:
3814:src/vm3.c     ****     op1 = op1 + funct;
 16746              		.loc 1 3814 0
 16747 5c9b 83E03F   		andl	$63, %eax
 16748 5c9e 8D712B   		leal	43(%rcx), %esi
 16749 5ca1 84C9     		testb	%cl, %cl
 16750 5ca3 0F45C6   		cmovne	%esi, %eax
 16751              	.LVL1119:
3821:src/vm3.c     **** 
 16752              		.loc 1 3821 0
 16753 5ca6 0FB6C0   		movzbl	%al, %eax
 16754 5ca9 48C1E004 		salq	$4, %rax
 16755              	.LVL1120:
 16756 5cad 48038414 		addq	58088(%rsp,%rdx), %rax
 16756      E8E20000 
 16757 5cb5 488B08   		movq	(%rax), %rcx
 16758 5cb8 E99BB0FF 		jmp	.L269
 16758      FF
 16759              	.LVL1121:
 16760              	.L109:
3829:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16761              		.loc 1 3829 0
 16762 5cbd 4489C2   		movl	%r8d, %edx
3830:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 16763              		.loc 1 3830 0
 16764 5cc0 4489C0   		movl	%r8d, %eax
3832:src/vm3.c     **** PC  =  nPC;
 16765              		.loc 1 3832 0
GAS LISTING /tmp/cc15eBE3.s 			page 683


 16766 5cc3 450FBFC0 		movswl	%r8w, %r8d
 16767              	.LVL1122:
3829:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16768              		.loc 1 3829 0
 16769 5cc7 C1EA15   		shrl	$21, %edx
3830:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 16770              		.loc 1 3830 0
 16771 5cca C1E810   		shrl	$16, %eax
 16772              	.LVL1123:
3834:src/vm3.c     **** 
 16773              		.loc 1 3834 0
 16774 5ccd 83050000 		addl	$4, nPC(%rip)
 16774      000004
 16775              	.LVL1124:
3832:src/vm3.c     **** PC  =  nPC;
 16776              		.loc 1 3832 0
 16777 5cd4 83E21F   		andl	$31, %edx
 16778 5cd7 83E01F   		andl	$31, %eax
 16779 5cda 44230495 		andl	RF(,%rdx,4), %r8d
 16779      00000000 
 16780              	.LVL1125:
3842:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 16781              		.loc 1 3842 0
 16782 5ce2 89DA     		movl	%ebx, %edx
 16783 5ce4 C1EA0B   		shrl	$11, %edx
3843:src/vm3.c     **** PC  =  nPC;
 16784              		.loc 1 3843 0
 16785 5ce7 83E21F   		andl	$31, %edx
3832:src/vm3.c     **** PC  =  nPC;
 16786              		.loc 1 3832 0
 16787 5cea 44890485 		movl	%r8d, RF(,%rax,4)
 16787      00000000 
3841:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16788              		.loc 1 3841 0
 16789 5cf2 89D8     		movl	%ebx, %eax
3840:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16790              		.loc 1 3840 0
 16791 5cf4 C1EB15   		shrl	$21, %ebx
 16792              	.LVL1126:
3841:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16793              		.loc 1 3841 0
 16794 5cf7 C1E810   		shrl	$16, %eax
 16795              	.LVL1127:
3843:src/vm3.c     **** PC  =  nPC;
 16796              		.loc 1 3843 0
 16797 5cfa 83E31F   		andl	$31, %ebx
 16798 5cfd 83E01F   		andl	$31, %eax
 16799 5d00 8B048500 		movl	RF(,%rax,4), %eax
 16799      000000
 16800 5d07 0B049D00 		orl	RF(,%rbx,4), %eax
 16800      000000
 16801 5d0e 89049500 		movl	%eax, RF(,%rdx,4)
 16801      000000
3844:src/vm3.c     **** nPC  += 4;
 16802              		.loc 1 3844 0
 16803 5d15 8B050000 		movl	nPC(%rip), %eax
 16803      0000
GAS LISTING /tmp/cc15eBE3.s 			page 684


3846:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16804              		.loc 1 3846 0
 16805 5d1b 8D5003   		leal	3(%rax), %edx
3845:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16806              		.loc 1 3845 0
 16807 5d1e 8D4804   		leal	4(%rax), %ecx
3844:src/vm3.c     **** nPC  += 4;
 16808              		.loc 1 3844 0
 16809 5d21 89050000 		movl	%eax, PC(%rip)
 16809      0000
3846:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16810              		.loc 1 3846 0
 16811 5d27 440FB682 		movzbl	VM_memory(%rdx), %r8d
 16811      00000000 
 16812 5d2f 89C2     		movl	%eax, %edx
3859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16813              		.loc 1 3859 0
 16814 5d31 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16814      000000
3846:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16815              		.loc 1 3846 0
 16816 5d38 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16816      000000
3845:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16817              		.loc 1 3845 0
 16818 5d3f 890D0000 		movl	%ecx, nPC(%rip)
 16818      0000
3859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16819              		.loc 1 3859 0
 16820 5d45 8D4805   		leal	5(%rax), %ecx
 16821 5d48 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16821      000000
3846:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16822              		.loc 1 3846 0
 16823 5d4f C1E218   		sall	$24, %edx
 16824 5d52 4109D0   		orl	%edx, %r8d
 16825 5d55 8D5001   		leal	1(%rax), %edx
 16826 5d58 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16826      000000
 16827 5d5f C1E210   		sall	$16, %edx
 16828 5d62 4109D0   		orl	%edx, %r8d
 16829 5d65 8D5002   		leal	2(%rax), %edx
 16830 5d68 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16830      000000
 16831 5d6f C1E208   		sall	$8, %edx
 16832 5d72 4109D0   		orl	%edx, %r8d
 16833              	.LVL1128:
3847:src/vm3.c     ****   if (op0 == 0x0) {
 16834              		.loc 1 3847 0
 16835 5d75 4489C6   		movl	%r8d, %esi
3849:src/vm3.c     ****     op0 = op0 + funct;
 16836              		.loc 1 3849 0
 16837 5d78 4488C2   		movb	%r8b, %dl
3847:src/vm3.c     ****   if (op0 == 0x0) {
 16838              		.loc 1 3847 0
 16839 5d7b C1EE1A   		shrl	$26, %esi
 16840              	.LVL1129:
GAS LISTING /tmp/cc15eBE3.s 			page 685


3849:src/vm3.c     ****     op0 = op0 + funct;
 16841              		.loc 1 3849 0
 16842 5d7e 83E23F   		andl	$63, %edx
 16843 5d81 8D7E2B   		leal	43(%rsi), %edi
 16844 5d84 4084F6   		testb	%sil, %sil
 16845 5d87 0F45D7   		cmovne	%edi, %edx
 16846              	.LVL1130:
3859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16847              		.loc 1 3859 0
 16848 5d8a C1E110   		sall	$16, %ecx
 16849 5d8d C1E318   		sall	$24, %ebx
 16850 5d90 09CB     		orl	%ecx, %ebx
 16851 5d92 8D4807   		leal	7(%rax), %ecx
 16852 5d95 83C006   		addl	$6, %eax
 16853 5d98 0FB68000 		movzbl	VM_memory(%rax), %eax
 16853      000000
3857:src/vm3.c     **** 
 16854              		.loc 1 3857 0
 16855 5d9f 0FB6D2   		movzbl	%dl, %edx
3859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16856              		.loc 1 3859 0
 16857 5da2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16857      000000
3857:src/vm3.c     **** 
 16858              		.loc 1 3857 0
 16859 5da9 48C1E204 		salq	$4, %rdx
 16860              	.LVL1131:
3859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16861              		.loc 1 3859 0
 16862 5dad C1E008   		sall	$8, %eax
 16863 5db0 09CB     		orl	%ecx, %ebx
 16864 5db2 09C3     		orl	%eax, %ebx
 16865              	.LVL1132:
3860:src/vm3.c     ****   if (op1 == 0x0) {
 16866              		.loc 1 3860 0
 16867 5db4 89D9     		movl	%ebx, %ecx
3862:src/vm3.c     ****     op1 = op1 + funct;
 16868              		.loc 1 3862 0
 16869 5db6 88D8     		movb	%bl, %al
3860:src/vm3.c     ****   if (op1 == 0x0) {
 16870              		.loc 1 3860 0
 16871 5db8 C1E91A   		shrl	$26, %ecx
 16872              	.LVL1133:
3862:src/vm3.c     ****     op1 = op1 + funct;
 16873              		.loc 1 3862 0
 16874 5dbb 83E03F   		andl	$63, %eax
 16875 5dbe 8D712B   		leal	43(%rcx), %esi
 16876 5dc1 84C9     		testb	%cl, %cl
 16877 5dc3 0F45C6   		cmovne	%esi, %eax
 16878              	.LVL1134:
3869:src/vm3.c     **** 
 16879              		.loc 1 3869 0
 16880 5dc6 0FB6C0   		movzbl	%al, %eax
 16881 5dc9 48C1E004 		salq	$4, %rax
 16882              	.LVL1135:
 16883 5dcd 48038414 		addq	58088(%rsp,%rdx), %rax
 16883      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 686


 16884 5dd5 488B08   		movq	(%rax), %rcx
 16885 5dd8 E97BAFFF 		jmp	.L269
 16885      FF
 16886              	.LVL1136:
 16887              	.L108:
3877:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16888              		.loc 1 3877 0
 16889 5ddd 4489C2   		movl	%r8d, %edx
3878:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 16890              		.loc 1 3878 0
 16891 5de0 4489C0   		movl	%r8d, %eax
3880:src/vm3.c     **** PC  =  nPC;
 16892              		.loc 1 3880 0
 16893 5de3 450FBFC0 		movswl	%r8w, %r8d
 16894              	.LVL1137:
3877:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 16895              		.loc 1 3877 0
 16896 5de7 C1EA15   		shrl	$21, %edx
3878:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 16897              		.loc 1 3878 0
 16898 5dea C1E810   		shrl	$16, %eax
 16899              	.LVL1138:
3882:src/vm3.c     **** 
 16900              		.loc 1 3882 0
 16901 5ded 83050000 		addl	$4, nPC(%rip)
 16901      000004
 16902              	.LVL1139:
3880:src/vm3.c     **** PC  =  nPC;
 16903              		.loc 1 3880 0
 16904 5df4 83E21F   		andl	$31, %edx
 16905 5df7 83E01F   		andl	$31, %eax
 16906 5dfa 44230495 		andl	RF(,%rdx,4), %r8d
 16906      00000000 
 16907              	.LVL1140:
3890:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 16908              		.loc 1 3890 0
 16909 5e02 89DA     		movl	%ebx, %edx
 16910 5e04 C1EA0B   		shrl	$11, %edx
3891:src/vm3.c     **** PC  =  nPC;
 16911              		.loc 1 3891 0
 16912 5e07 83E21F   		andl	$31, %edx
3880:src/vm3.c     **** PC  =  nPC;
 16913              		.loc 1 3880 0
 16914 5e0a 44890485 		movl	%r8d, RF(,%rax,4)
 16914      00000000 
3888:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16915              		.loc 1 3888 0
 16916 5e12 89D8     		movl	%ebx, %eax
3889:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 16917              		.loc 1 3889 0
 16918 5e14 C1EB10   		shrl	$16, %ebx
 16919              	.LVL1141:
3888:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 16920              		.loc 1 3888 0
 16921 5e17 C1E815   		shrl	$21, %eax
 16922              	.LVL1142:
3891:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 687


 16923              		.loc 1 3891 0
 16924 5e1a 83E31F   		andl	$31, %ebx
 16925 5e1d 83E01F   		andl	$31, %eax
 16926 5e20 8B048500 		movl	RF(,%rax,4), %eax
 16926      000000
 16927 5e27 2B049D00 		subl	RF(,%rbx,4), %eax
 16927      000000
 16928 5e2e 89049500 		movl	%eax, RF(,%rdx,4)
 16928      000000
3892:src/vm3.c     **** nPC  += 4;
 16929              		.loc 1 3892 0
 16930 5e35 8B050000 		movl	nPC(%rip), %eax
 16930      0000
3894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16931              		.loc 1 3894 0
 16932 5e3b 8D5003   		leal	3(%rax), %edx
3893:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16933              		.loc 1 3893 0
 16934 5e3e 8D4804   		leal	4(%rax), %ecx
3892:src/vm3.c     **** nPC  += 4;
 16935              		.loc 1 3892 0
 16936 5e41 89050000 		movl	%eax, PC(%rip)
 16936      0000
3894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16937              		.loc 1 3894 0
 16938 5e47 440FB682 		movzbl	VM_memory(%rdx), %r8d
 16938      00000000 
 16939 5e4f 89C2     		movl	%eax, %edx
3907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16940              		.loc 1 3907 0
 16941 5e51 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 16941      000000
3894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16942              		.loc 1 3894 0
 16943 5e58 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16943      000000
3893:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 16944              		.loc 1 3893 0
 16945 5e5f 890D0000 		movl	%ecx, nPC(%rip)
 16945      0000
3907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16946              		.loc 1 3907 0
 16947 5e65 8D4805   		leal	5(%rax), %ecx
 16948 5e68 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16948      000000
3894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 16949              		.loc 1 3894 0
 16950 5e6f C1E218   		sall	$24, %edx
 16951 5e72 4109D0   		orl	%edx, %r8d
 16952 5e75 8D5001   		leal	1(%rax), %edx
 16953 5e78 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16953      000000
 16954 5e7f C1E210   		sall	$16, %edx
 16955 5e82 4109D0   		orl	%edx, %r8d
 16956 5e85 8D5002   		leal	2(%rax), %edx
 16957 5e88 0FB69200 		movzbl	VM_memory(%rdx), %edx
 16957      000000
GAS LISTING /tmp/cc15eBE3.s 			page 688


 16958 5e8f C1E208   		sall	$8, %edx
 16959 5e92 4109D0   		orl	%edx, %r8d
 16960              	.LVL1143:
3895:src/vm3.c     ****   if (op0 == 0x0) {
 16961              		.loc 1 3895 0
 16962 5e95 4489C6   		movl	%r8d, %esi
3897:src/vm3.c     ****     op0 = op0 + funct;
 16963              		.loc 1 3897 0
 16964 5e98 4488C2   		movb	%r8b, %dl
3895:src/vm3.c     ****   if (op0 == 0x0) {
 16965              		.loc 1 3895 0
 16966 5e9b C1EE1A   		shrl	$26, %esi
 16967              	.LVL1144:
3897:src/vm3.c     ****     op0 = op0 + funct;
 16968              		.loc 1 3897 0
 16969 5e9e 83E23F   		andl	$63, %edx
 16970 5ea1 8D7E2B   		leal	43(%rsi), %edi
 16971 5ea4 4084F6   		testb	%sil, %sil
 16972 5ea7 0F45D7   		cmovne	%edi, %edx
 16973              	.LVL1145:
3907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16974              		.loc 1 3907 0
 16975 5eaa C1E110   		sall	$16, %ecx
 16976 5ead C1E318   		sall	$24, %ebx
 16977 5eb0 09CB     		orl	%ecx, %ebx
 16978 5eb2 8D4807   		leal	7(%rax), %ecx
 16979 5eb5 83C006   		addl	$6, %eax
 16980 5eb8 0FB68000 		movzbl	VM_memory(%rax), %eax
 16980      000000
3905:src/vm3.c     **** 
 16981              		.loc 1 3905 0
 16982 5ebf 0FB6D2   		movzbl	%dl, %edx
3907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16983              		.loc 1 3907 0
 16984 5ec2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 16984      000000
3905:src/vm3.c     **** 
 16985              		.loc 1 3905 0
 16986 5ec9 48C1E204 		salq	$4, %rdx
 16987              	.LVL1146:
3907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 16988              		.loc 1 3907 0
 16989 5ecd C1E008   		sall	$8, %eax
 16990 5ed0 09CB     		orl	%ecx, %ebx
 16991 5ed2 09C3     		orl	%eax, %ebx
 16992              	.LVL1147:
3908:src/vm3.c     ****   if (op1 == 0x0) {
 16993              		.loc 1 3908 0
 16994 5ed4 89D9     		movl	%ebx, %ecx
3910:src/vm3.c     ****     op1 = op1 + funct;
 16995              		.loc 1 3910 0
 16996 5ed6 88D8     		movb	%bl, %al
3908:src/vm3.c     ****   if (op1 == 0x0) {
 16997              		.loc 1 3908 0
 16998 5ed8 C1E91A   		shrl	$26, %ecx
 16999              	.LVL1148:
3910:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 689


 17000              		.loc 1 3910 0
 17001 5edb 83E03F   		andl	$63, %eax
 17002 5ede 8D712B   		leal	43(%rcx), %esi
 17003 5ee1 84C9     		testb	%cl, %cl
 17004 5ee3 0F45C6   		cmovne	%esi, %eax
 17005              	.LVL1149:
3917:src/vm3.c     **** 
 17006              		.loc 1 3917 0
 17007 5ee6 0FB6C0   		movzbl	%al, %eax
 17008 5ee9 48C1E004 		salq	$4, %rax
 17009              	.LVL1150:
 17010 5eed 48038414 		addq	58088(%rsp,%rdx), %rax
 17010      E8E20000 
 17011 5ef5 488B08   		movq	(%rax), %rcx
 17012 5ef8 E95BAEFF 		jmp	.L269
 17012      FF
 17013              	.LVL1151:
 17014              	.L115:
3925:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17015              		.loc 1 3925 0
 17016 5efd 4489C2   		movl	%r8d, %edx
3927:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 17017              		.loc 1 3927 0
 17018 5f00 4489C0   		movl	%r8d, %eax
3926:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 17019              		.loc 1 3926 0
 17020 5f03 41C1E810 		shrl	$16, %r8d
 17021              	.LVL1152:
3925:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17022              		.loc 1 3925 0
 17023 5f07 C1EA15   		shrl	$21, %edx
3928:src/vm3.c     **** PC  =  nPC;
 17024              		.loc 1 3928 0
 17025 5f0a 4183E01F 		andl	$31, %r8d
3927:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 17026              		.loc 1 3927 0
 17027 5f0e C1E80B   		shrl	$11, %eax
 17028              	.LVL1153:
3928:src/vm3.c     **** PC  =  nPC;
 17029              		.loc 1 3928 0
 17030 5f11 83E21F   		andl	$31, %edx
 17031 5f14 428B3C85 		movl	RF(,%r8,4), %edi
 17031      00000000 
 17032 5f1c 83E01F   		andl	$31, %eax
 17033 5f1f 393C9500 		cmpl	%edi, RF(,%rdx,4)
 17033      000000
 17034 5f26 0F92C2   		setb	%dl
3930:src/vm3.c     **** 
 17035              		.loc 1 3930 0
 17036 5f29 83050000 		addl	$4, nPC(%rip)
 17036      000004
 17037              	.LVL1154:
3928:src/vm3.c     **** PC  =  nPC;
 17038              		.loc 1 3928 0
 17039 5f30 0FB6D2   		movzbl	%dl, %edx
 17040 5f33 89148500 		movl	%edx, RF(,%rax,4)
 17040      000000
GAS LISTING /tmp/cc15eBE3.s 			page 690


3936:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17041              		.loc 1 3936 0
 17042 5f3a 89D8     		movl	%ebx, %eax
3939:src/vm3.c     **** PC  =  nPC;
 17043              		.loc 1 3939 0
 17044 5f3c 0FBFD3   		movswl	%bx, %edx
3936:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17045              		.loc 1 3936 0
 17046 5f3f C1E815   		shrl	$21, %eax
3937:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 17047              		.loc 1 3937 0
 17048 5f42 C1EB10   		shrl	$16, %ebx
 17049              	.LVL1155:
3939:src/vm3.c     **** PC  =  nPC;
 17050              		.loc 1 3939 0
 17051 5f45 83E01F   		andl	$31, %eax
 17052 5f48 83E31F   		andl	$31, %ebx
 17053 5f4b 03148500 		addl	RF(,%rax,4), %edx
 17053      000000
 17054              	.LVL1156:
 17055 5f52 8D4203   		leal	3(%rdx), %eax
 17056 5f55 89D1     		movl	%edx, %ecx
 17057 5f57 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17057      000000
 17058 5f5e 0FB68000 		movzbl	VM_memory(%rax), %eax
 17058      000000
 17059 5f65 C1E118   		sall	$24, %ecx
 17060 5f68 09C8     		orl	%ecx, %eax
 17061 5f6a 8D4A01   		leal	1(%rdx), %ecx
 17062 5f6d 83C202   		addl	$2, %edx
 17063 5f70 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17063      000000
 17064 5f77 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17064      000000
 17065 5f7e C1E208   		sall	$8, %edx
 17066 5f81 C1E110   		sall	$16, %ecx
 17067 5f84 09C8     		orl	%ecx, %eax
 17068 5f86 09D0     		orl	%edx, %eax
 17069 5f88 89049D00 		movl	%eax, RF(,%rbx,4)
 17069      000000
3940:src/vm3.c     **** nPC  += 4;
 17070              		.loc 1 3940 0
 17071 5f8f 8B050000 		movl	nPC(%rip), %eax
 17071      0000
3942:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17072              		.loc 1 3942 0
 17073 5f95 8D5003   		leal	3(%rax), %edx
3941:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17074              		.loc 1 3941 0
 17075 5f98 8D4804   		leal	4(%rax), %ecx
3940:src/vm3.c     **** nPC  += 4;
 17076              		.loc 1 3940 0
 17077 5f9b 89050000 		movl	%eax, PC(%rip)
 17077      0000
3942:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17078              		.loc 1 3942 0
 17079 5fa1 440FB682 		movzbl	VM_memory(%rdx), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 691


 17079      00000000 
 17080 5fa9 89C2     		movl	%eax, %edx
3955:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17081              		.loc 1 3955 0
 17082 5fab 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17082      000000
3942:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17083              		.loc 1 3942 0
 17084 5fb2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17084      000000
3941:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17085              		.loc 1 3941 0
 17086 5fb9 890D0000 		movl	%ecx, nPC(%rip)
 17086      0000
3955:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17087              		.loc 1 3955 0
 17088 5fbf 8D4805   		leal	5(%rax), %ecx
 17089 5fc2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17089      000000
3942:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17090              		.loc 1 3942 0
 17091 5fc9 C1E218   		sall	$24, %edx
 17092 5fcc 4109D0   		orl	%edx, %r8d
 17093 5fcf 8D5001   		leal	1(%rax), %edx
 17094 5fd2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17094      000000
 17095 5fd9 C1E210   		sall	$16, %edx
 17096 5fdc 4109D0   		orl	%edx, %r8d
 17097 5fdf 8D5002   		leal	2(%rax), %edx
 17098 5fe2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17098      000000
 17099 5fe9 C1E208   		sall	$8, %edx
 17100 5fec 4109D0   		orl	%edx, %r8d
 17101              	.LVL1157:
3943:src/vm3.c     ****   if (op0 == 0x0) {
 17102              		.loc 1 3943 0
 17103 5fef 4489C6   		movl	%r8d, %esi
3945:src/vm3.c     ****     op0 = op0 + funct;
 17104              		.loc 1 3945 0
 17105 5ff2 4488C2   		movb	%r8b, %dl
3943:src/vm3.c     ****   if (op0 == 0x0) {
 17106              		.loc 1 3943 0
 17107 5ff5 C1EE1A   		shrl	$26, %esi
 17108              	.LVL1158:
3945:src/vm3.c     ****     op0 = op0 + funct;
 17109              		.loc 1 3945 0
 17110 5ff8 83E23F   		andl	$63, %edx
 17111 5ffb 8D7E2B   		leal	43(%rsi), %edi
 17112 5ffe 4084F6   		testb	%sil, %sil
 17113 6001 0F45D7   		cmovne	%edi, %edx
 17114              	.LVL1159:
3955:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17115              		.loc 1 3955 0
 17116 6004 C1E110   		sall	$16, %ecx
 17117 6007 C1E318   		sall	$24, %ebx
 17118 600a 09CB     		orl	%ecx, %ebx
 17119 600c 8D4807   		leal	7(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 692


 17120 600f 83C006   		addl	$6, %eax
 17121 6012 0FB68000 		movzbl	VM_memory(%rax), %eax
 17121      000000
3953:src/vm3.c     **** 
 17122              		.loc 1 3953 0
 17123 6019 0FB6D2   		movzbl	%dl, %edx
3955:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17124              		.loc 1 3955 0
 17125 601c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17125      000000
3953:src/vm3.c     **** 
 17126              		.loc 1 3953 0
 17127 6023 48C1E204 		salq	$4, %rdx
 17128              	.LVL1160:
3955:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17129              		.loc 1 3955 0
 17130 6027 C1E008   		sall	$8, %eax
 17131 602a 09CB     		orl	%ecx, %ebx
 17132 602c 09C3     		orl	%eax, %ebx
 17133              	.LVL1161:
3956:src/vm3.c     ****   if (op1 == 0x0) {
 17134              		.loc 1 3956 0
 17135 602e 89D9     		movl	%ebx, %ecx
3958:src/vm3.c     ****     op1 = op1 + funct;
 17136              		.loc 1 3958 0
 17137 6030 88D8     		movb	%bl, %al
3956:src/vm3.c     ****   if (op1 == 0x0) {
 17138              		.loc 1 3956 0
 17139 6032 C1E91A   		shrl	$26, %ecx
 17140              	.LVL1162:
3958:src/vm3.c     ****     op1 = op1 + funct;
 17141              		.loc 1 3958 0
 17142 6035 83E03F   		andl	$63, %eax
 17143 6038 8D712B   		leal	43(%rcx), %esi
 17144 603b 84C9     		testb	%cl, %cl
 17145 603d 0F45C6   		cmovne	%esi, %eax
 17146              	.LVL1163:
3965:src/vm3.c     **** 
 17147              		.loc 1 3965 0
 17148 6040 0FB6C0   		movzbl	%al, %eax
 17149 6043 48C1E004 		salq	$4, %rax
 17150              	.LVL1164:
 17151 6047 48038414 		addq	58088(%rsp,%rdx), %rax
 17151      E8E20000 
 17152 604f 488B08   		movq	(%rax), %rcx
 17153 6052 E901ADFF 		jmp	.L269
 17153      FF
 17154              	.LVL1165:
 17155              	.L94:
3973:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17156              		.loc 1 3973 0
 17157 6057 4489C0   		movl	%r8d, %eax
3976:src/vm3.c     **** PC  =  nPC;
 17158              		.loc 1 3976 0
 17159 605a 410FBFD0 		movswl	%r8w, %edx
3974:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 17160              		.loc 1 3974 0
GAS LISTING /tmp/cc15eBE3.s 			page 693


 17161 605e 41C1E810 		shrl	$16, %r8d
 17162              	.LVL1166:
3973:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17163              		.loc 1 3973 0
 17164 6062 C1E815   		shrl	$21, %eax
 17165              	.LVL1167:
3976:src/vm3.c     **** PC  =  nPC;
 17166              		.loc 1 3976 0
 17167 6065 4183E01F 		andl	$31, %r8d
3985:src/vm3.c     **** nPC = address << 2;
 17168              		.loc 1 3985 0
 17169 6069 81E3FFFF 		andl	$67108863, %ebx
 17169      FF03
 17170              	.LVL1168:
3976:src/vm3.c     **** PC  =  nPC;
 17171              		.loc 1 3976 0
 17172 606f 83E01F   		andl	$31, %eax
 17173 6072 03148500 		addl	RF(,%rax,4), %edx
 17173      000000
 17174              	.LVL1169:
 17175 6079 8D4203   		leal	3(%rdx), %eax
 17176 607c 89D1     		movl	%edx, %ecx
 17177 607e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17177      000000
 17178 6085 0FB68000 		movzbl	VM_memory(%rax), %eax
 17178      000000
 17179 608c C1E118   		sall	$24, %ecx
 17180 608f 09C8     		orl	%ecx, %eax
 17181 6091 8D4A01   		leal	1(%rdx), %ecx
 17182 6094 83C202   		addl	$2, %edx
 17183 6097 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17183      000000
 17184 609e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17184      000000
 17185 60a5 C1E208   		sall	$8, %edx
 17186 60a8 C1E110   		sall	$16, %ecx
 17187 60ab 09C8     		orl	%ecx, %eax
 17188 60ad 09D0     		orl	%edx, %eax
3978:src/vm3.c     **** 
 17189              		.loc 1 3978 0
 17190 60af 8B150000 		movl	nPC(%rip), %edx
 17190      0000
3976:src/vm3.c     **** PC  =  nPC;
 17191              		.loc 1 3976 0
 17192 60b5 42890485 		movl	%eax, RF(,%r8,4)
 17192      00000000 
3986:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17193              		.loc 1 3986 0
 17194 60bd 8D049D00 		leal	0(,%rbx,4), %eax
 17194      000000
3978:src/vm3.c     **** 
 17195              		.loc 1 3978 0
 17196 60c4 8D4A04   		leal	4(%rdx), %ecx
3987:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17197              		.loc 1 3987 0
 17198 60c7 8D7207   		leal	7(%rdx), %esi
3986:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 694


 17199              		.loc 1 3986 0
 17200 60ca 89050000 		movl	%eax, nPC(%rip)
 17200      0000
3984:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 17201              		.loc 1 3984 0
 17202 60d0 890D0000 		movl	%ecx, PC(%rip)
 17202      0000
3987:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17203              		.loc 1 3987 0
 17204 60d6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17204      000000
 17205 60dd 440FB686 		movzbl	VM_memory(%rsi), %r8d
 17205      00000000 
 17206 60e5 C1E118   		sall	$24, %ecx
 17207 60e8 4109C8   		orl	%ecx, %r8d
 17208 60eb 8D4A05   		leal	5(%rdx), %ecx
 17209 60ee 83C206   		addl	$6, %edx
 17210 60f1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17210      000000
 17211 60f8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17211      000000
 17212 60ff C1E208   		sall	$8, %edx
 17213 6102 C1E110   		sall	$16, %ecx
 17214 6105 4109C8   		orl	%ecx, %r8d
 17215 6108 4109D0   		orl	%edx, %r8d
 17216              	.LVL1170:
3988:src/vm3.c     ****   if (op0 == 0x0) {
 17217              		.loc 1 3988 0
 17218 610b 4489C1   		movl	%r8d, %ecx
3990:src/vm3.c     ****     op0 = op0 + funct;
 17219              		.loc 1 3990 0
 17220 610e 4488C2   		movb	%r8b, %dl
3988:src/vm3.c     ****   if (op0 == 0x0) {
 17221              		.loc 1 3988 0
 17222 6111 C1E91A   		shrl	$26, %ecx
 17223              	.LVL1171:
3990:src/vm3.c     ****     op0 = op0 + funct;
 17224              		.loc 1 3990 0
 17225 6114 83E23F   		andl	$63, %edx
 17226 6117 8D712B   		leal	43(%rcx), %esi
 17227 611a 84C9     		testb	%cl, %cl
4000:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17228              		.loc 1 4000 0
 17229 611c 8D4803   		leal	3(%rax), %ecx
 17230              	.LVL1172:
 17231 611f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17231      000000
 17232 6126 89C1     		movl	%eax, %ecx
3990:src/vm3.c     ****     op0 = op0 + funct;
 17233              		.loc 1 3990 0
 17234 6128 0F45D6   		cmovne	%esi, %edx
 17235              	.LVL1173:
4000:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17236              		.loc 1 4000 0
 17237 612b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17237      000000
3998:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 695


 17238              		.loc 1 3998 0
 17239 6132 0FB6D2   		movzbl	%dl, %edx
 17240 6135 48C1E204 		salq	$4, %rdx
 17241              	.LVL1174:
4000:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17242              		.loc 1 4000 0
 17243 6139 C1E118   		sall	$24, %ecx
 17244 613c 09CB     		orl	%ecx, %ebx
 17245 613e 8D4801   		leal	1(%rax), %ecx
 17246 6141 83C002   		addl	$2, %eax
 17247 6144 0FB68000 		movzbl	VM_memory(%rax), %eax
 17247      000000
 17248 614b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17248      000000
 17249 6152 C1E008   		sall	$8, %eax
 17250 6155 C1E110   		sall	$16, %ecx
 17251 6158 09CB     		orl	%ecx, %ebx
 17252 615a 09C3     		orl	%eax, %ebx
 17253              	.LVL1175:
4001:src/vm3.c     ****   if (op1 == 0x0) {
 17254              		.loc 1 4001 0
 17255 615c 89D9     		movl	%ebx, %ecx
4003:src/vm3.c     ****     op1 = op1 + funct;
 17256              		.loc 1 4003 0
 17257 615e 88D8     		movb	%bl, %al
4001:src/vm3.c     ****   if (op1 == 0x0) {
 17258              		.loc 1 4001 0
 17259 6160 C1E91A   		shrl	$26, %ecx
 17260              	.LVL1176:
4003:src/vm3.c     ****     op1 = op1 + funct;
 17261              		.loc 1 4003 0
 17262 6163 83E03F   		andl	$63, %eax
 17263 6166 8D712B   		leal	43(%rcx), %esi
 17264 6169 84C9     		testb	%cl, %cl
 17265 616b 0F45C6   		cmovne	%esi, %eax
 17266              	.LVL1177:
4010:src/vm3.c     **** 
 17267              		.loc 1 4010 0
 17268 616e 0FB6C0   		movzbl	%al, %eax
 17269 6171 48C1E004 		salq	$4, %rax
 17270              	.LVL1178:
 17271 6175 48038414 		addq	58088(%rsp,%rdx), %rax
 17271      E8E20000 
 17272 617d 488B08   		movq	(%rax), %rcx
 17273 6180 E9D3ABFF 		jmp	.L269
 17273      FF
 17274              	.LVL1179:
 17275              	.L116:
4044:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
 17276              		.loc 1 4044 0
 17277 6185 4489C0   		movl	%r8d, %eax
 17278 6188 C1E815   		shrl	$21, %eax
4045:src/vm3.c     **** {
 17279              		.loc 1 4045 0
 17280 618b 83E01F   		andl	$31, %eax
 17281 618e 833C8500 		cmpl	$0, RF(,%rax,4)
 17281      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 696


 17282 6196 0F8FCE00 		jg	.L641
 17282      0000
 17283              	.LVL1180:
4048:src/vm3.c     ****   nPC  += (immediate << 2);
 17284              		.loc 1 4048 0
 17285 619c 8B050000 		movl	nPC(%rip), %eax
 17285      0000
4049:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17286              		.loc 1 4049 0
 17287 61a2 450FBFC0 		movswl	%r8w, %r8d
 17288              	.LVL1181:
4050:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17289              		.loc 1 4050 0
 17290 61a6 8D4803   		leal	3(%rax), %ecx
4049:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17291              		.loc 1 4049 0
 17292 61a9 428D1480 		leal	(%rax,%r8,4), %edx
4048:src/vm3.c     ****   nPC  += (immediate << 2);
 17293              		.loc 1 4048 0
 17294 61ad 89050000 		movl	%eax, PC(%rip)
 17294      0000
4050:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17295              		.loc 1 4050 0
 17296 61b3 440FB681 		movzbl	VM_memory(%rcx), %r8d
 17296      00000000 
 17297              	.LVL1182:
 17298 61bb 89C1     		movl	%eax, %ecx
4049:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17299              		.loc 1 4049 0
 17300 61bd 89150000 		movl	%edx, nPC(%rip)
 17300      0000
4050:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17301              		.loc 1 4050 0
 17302 61c3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17302      000000
 17303 61ca C1E118   		sall	$24, %ecx
 17304 61cd 4109C8   		orl	%ecx, %r8d
 17305 61d0 8D4801   		leal	1(%rax), %ecx
 17306 61d3 83C002   		addl	$2, %eax
 17307 61d6 0FB68000 		movzbl	VM_memory(%rax), %eax
 17307      000000
 17308 61dd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17308      000000
 17309 61e4 C1E008   		sall	$8, %eax
 17310 61e7 C1E110   		sall	$16, %ecx
 17311 61ea 4109C8   		orl	%ecx, %r8d
 17312 61ed 4109C0   		orl	%eax, %r8d
 17313              	.LVL1183:
4051:src/vm3.c     ****   if (op0 == 0x0) {
 17314              		.loc 1 4051 0
 17315 61f0 4489C0   		movl	%r8d, %eax
4053:src/vm3.c     ****     op0 = op0 + funct;
 17316              		.loc 1 4053 0
 17317 61f3 4488C1   		movb	%r8b, %cl
4051:src/vm3.c     ****   if (op0 == 0x0) {
 17318              		.loc 1 4051 0
 17319 61f6 C1E81A   		shrl	$26, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 697


 17320              	.LVL1184:
4053:src/vm3.c     ****     op0 = op0 + funct;
 17321              		.loc 1 4053 0
 17322 61f9 83E13F   		andl	$63, %ecx
 17323 61fc 8D702B   		leal	43(%rax), %esi
 17324 61ff 84C0     		testb	%al, %al
4063:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17325              		.loc 1 4063 0
 17326 6201 8D4203   		leal	3(%rdx), %eax
 17327              	.LVL1185:
 17328 6204 0FB69800 		movzbl	VM_memory(%rax), %ebx
 17328      000000
 17329              	.LVL1186:
 17330 620b 89D0     		movl	%edx, %eax
4053:src/vm3.c     ****     op0 = op0 + funct;
 17331              		.loc 1 4053 0
 17332 620d 0F45CE   		cmovne	%esi, %ecx
 17333              	.LVL1187:
4063:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17334              		.loc 1 4063 0
 17335 6210 0FB68000 		movzbl	VM_memory(%rax), %eax
 17335      000000
4061:src/vm3.c     **** 
 17336              		.loc 1 4061 0
 17337 6217 0FB6C9   		movzbl	%cl, %ecx
 17338 621a 48C1E104 		salq	$4, %rcx
 17339              	.LVL1188:
4063:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17340              		.loc 1 4063 0
 17341 621e C1E018   		sall	$24, %eax
 17342 6221 09C3     		orl	%eax, %ebx
 17343 6223 8D4201   		leal	1(%rdx), %eax
 17344 6226 0FB68000 		movzbl	VM_memory(%rax), %eax
 17344      000000
 17345 622d C1E010   		sall	$16, %eax
 17346 6230 09C3     		orl	%eax, %ebx
 17347 6232 8D4202   		leal	2(%rdx), %eax
 17348 6235 0FB68000 		movzbl	VM_memory(%rax), %eax
 17348      000000
 17349 623c C1E008   		sall	$8, %eax
 17350 623f 09C3     		orl	%eax, %ebx
 17351              	.LVL1189:
4064:src/vm3.c     ****   if (op1 == 0x0) {
 17352              		.loc 1 4064 0
 17353 6241 89DA     		movl	%ebx, %edx
4066:src/vm3.c     ****     op1 = op1 + funct;
 17354              		.loc 1 4066 0
 17355 6243 88D8     		movb	%bl, %al
4064:src/vm3.c     ****   if (op1 == 0x0) {
 17356              		.loc 1 4064 0
 17357 6245 C1EA1A   		shrl	$26, %edx
 17358              	.LVL1190:
4066:src/vm3.c     ****     op1 = op1 + funct;
 17359              		.loc 1 4066 0
 17360 6248 83E03F   		andl	$63, %eax
 17361 624b 8D722B   		leal	43(%rdx), %esi
 17362 624e 84D2     		testb	%dl, %dl
GAS LISTING /tmp/cc15eBE3.s 			page 698


 17363 6250 0F45C6   		cmovne	%esi, %eax
 17364              	.LVL1191:
4073:src/vm3.c     **** 
 17365              		.loc 1 4073 0
 17366 6253 0FB6C0   		movzbl	%al, %eax
 17367 6256 48C1E004 		salq	$4, %rax
 17368              	.LVL1192:
 17369 625a 4803840C 		addq	58088(%rsp,%rcx), %rax
 17369      E8E20000 
 17370 6262 488B08   		movq	(%rax), %rcx
 17371              	.LVL1193:
 17372 6265 E9EEAAFF 		jmp	.L269
 17372      FF
 17373              	.LVL1194:
 17374              	.L641:
4088:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 17375              		.loc 1 4088 0
 17376 626a 89D8     		movl	%ebx, %eax
4089:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 17377              		.loc 1 4089 0
 17378 626c 89DA     		movl	%ebx, %edx
4087:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17379              		.loc 1 4087 0
 17380 626e C1EB06   		shrl	$6, %ebx
 17381              	.LVL1195:
4088:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 17382              		.loc 1 4088 0
 17383 6271 C1E810   		shrl	$16, %eax
 17384              	.LVL1196:
4087:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17385              		.loc 1 4087 0
 17386 6274 88D9     		movb	%bl, %cl
4089:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 17387              		.loc 1 4089 0
 17388 6276 C1EA0B   		shrl	$11, %edx
 17389              	.LVL1197:
4090:src/vm3.c     **** PC  =  nPC;
 17390              		.loc 1 4090 0
 17391 6279 83E01F   		andl	$31, %eax
4087:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17392              		.loc 1 4087 0
 17393 627c 83E11F   		andl	$31, %ecx
4080:src/vm3.c     **** }
 17394              		.loc 1 4080 0
 17395 627f 83050000 		addl	$4, nPC(%rip)
 17395      000004
4090:src/vm3.c     **** PC  =  nPC;
 17396              		.loc 1 4090 0
 17397 6286 8B048500 		movl	RF(,%rax,4), %eax
 17397      000000
 17398 628d 83E21F   		andl	$31, %edx
 17399 6290 D3E0     		sall	%cl, %eax
 17400 6292 89049500 		movl	%eax, RF(,%rdx,4)
 17400      000000
4091:src/vm3.c     **** nPC  += 4;
 17401              		.loc 1 4091 0
 17402 6299 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 699


 17402      0000
4093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17403              		.loc 1 4093 0
 17404 629f 8D5003   		leal	3(%rax), %edx
4092:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17405              		.loc 1 4092 0
 17406 62a2 8D4804   		leal	4(%rax), %ecx
4091:src/vm3.c     **** nPC  += 4;
 17407              		.loc 1 4091 0
 17408 62a5 89050000 		movl	%eax, PC(%rip)
 17408      0000
4093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17409              		.loc 1 4093 0
 17410 62ab 440FB682 		movzbl	VM_memory(%rdx), %r8d
 17410      00000000 
 17411              	.LVL1198:
 17412 62b3 89C2     		movl	%eax, %edx
4106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17413              		.loc 1 4106 0
 17414 62b5 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17414      000000
4093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17415              		.loc 1 4093 0
 17416 62bc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17416      000000
4092:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17417              		.loc 1 4092 0
 17418 62c3 890D0000 		movl	%ecx, nPC(%rip)
 17418      0000
4106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17419              		.loc 1 4106 0
 17420 62c9 8D4805   		leal	5(%rax), %ecx
 17421 62cc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17421      000000
4093:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17422              		.loc 1 4093 0
 17423 62d3 C1E218   		sall	$24, %edx
 17424 62d6 4109D0   		orl	%edx, %r8d
 17425 62d9 8D5001   		leal	1(%rax), %edx
 17426 62dc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17426      000000
 17427 62e3 C1E210   		sall	$16, %edx
 17428 62e6 4109D0   		orl	%edx, %r8d
 17429 62e9 8D5002   		leal	2(%rax), %edx
 17430 62ec 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17430      000000
 17431 62f3 C1E208   		sall	$8, %edx
 17432 62f6 4109D0   		orl	%edx, %r8d
 17433              	.LVL1199:
4094:src/vm3.c     ****   if (op0 == 0x0) {
 17434              		.loc 1 4094 0
 17435 62f9 4489C6   		movl	%r8d, %esi
4096:src/vm3.c     ****     op0 = op0 + funct;
 17436              		.loc 1 4096 0
 17437 62fc 4488C2   		movb	%r8b, %dl
4094:src/vm3.c     ****   if (op0 == 0x0) {
 17438              		.loc 1 4094 0
GAS LISTING /tmp/cc15eBE3.s 			page 700


 17439 62ff C1EE1A   		shrl	$26, %esi
 17440              	.LVL1200:
4096:src/vm3.c     ****     op0 = op0 + funct;
 17441              		.loc 1 4096 0
 17442 6302 83E23F   		andl	$63, %edx
 17443 6305 8D7E2B   		leal	43(%rsi), %edi
 17444 6308 4084F6   		testb	%sil, %sil
 17445 630b 0F45D7   		cmovne	%edi, %edx
 17446              	.LVL1201:
4106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17447              		.loc 1 4106 0
 17448 630e C1E110   		sall	$16, %ecx
 17449 6311 C1E318   		sall	$24, %ebx
 17450 6314 09CB     		orl	%ecx, %ebx
 17451 6316 8D4807   		leal	7(%rax), %ecx
 17452 6319 83C006   		addl	$6, %eax
 17453 631c 0FB68000 		movzbl	VM_memory(%rax), %eax
 17453      000000
4104:src/vm3.c     **** 
 17454              		.loc 1 4104 0
 17455 6323 0FB6D2   		movzbl	%dl, %edx
4106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17456              		.loc 1 4106 0
 17457 6326 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17457      000000
4104:src/vm3.c     **** 
 17458              		.loc 1 4104 0
 17459 632d 48C1E204 		salq	$4, %rdx
 17460              	.LVL1202:
4106:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17461              		.loc 1 4106 0
 17462 6331 C1E008   		sall	$8, %eax
 17463 6334 09CB     		orl	%ecx, %ebx
 17464 6336 09C3     		orl	%eax, %ebx
 17465              	.LVL1203:
4107:src/vm3.c     ****   if (op1 == 0x0) {
 17466              		.loc 1 4107 0
 17467 6338 89D9     		movl	%ebx, %ecx
4109:src/vm3.c     ****     op1 = op1 + funct;
 17468              		.loc 1 4109 0
 17469 633a 88D8     		movb	%bl, %al
4107:src/vm3.c     ****   if (op1 == 0x0) {
 17470              		.loc 1 4107 0
 17471 633c C1E91A   		shrl	$26, %ecx
 17472              	.LVL1204:
4109:src/vm3.c     ****     op1 = op1 + funct;
 17473              		.loc 1 4109 0
 17474 633f 83E03F   		andl	$63, %eax
 17475 6342 8D712B   		leal	43(%rcx), %esi
 17476 6345 84C9     		testb	%cl, %cl
 17477 6347 0F45C6   		cmovne	%esi, %eax
 17478              	.LVL1205:
4116:src/vm3.c     **** 
 17479              		.loc 1 4116 0
 17480 634a 0FB6C0   		movzbl	%al, %eax
 17481 634d 48C1E004 		salq	$4, %rax
 17482              	.LVL1206:
GAS LISTING /tmp/cc15eBE3.s 			page 701


 17483 6351 48038414 		addq	58088(%rsp,%rdx), %rax
 17483      E8E20000 
 17484 6359 488B08   		movq	(%rax), %rcx
 17485 635c E9F7A9FF 		jmp	.L269
 17485      FF
 17486              	.LVL1207:
 17487              	.L36:
4125:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 17488              		.loc 1 4125 0
 17489 6361 4489C0   		movl	%r8d, %eax
4126:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 17490              		.loc 1 4126 0
 17491 6364 4489C2   		movl	%r8d, %edx
4124:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17492              		.loc 1 4124 0
 17493 6367 41C1E806 		shrl	$6, %r8d
 17494              	.LVL1208:
4125:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 17495              		.loc 1 4125 0
 17496 636b C1E810   		shrl	$16, %eax
 17497              	.LVL1209:
4124:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17498              		.loc 1 4124 0
 17499 636e 4488C1   		movb	%r8b, %cl
4126:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 17500              		.loc 1 4126 0
 17501 6371 C1EA0B   		shrl	$11, %edx
 17502              	.LVL1210:
4127:src/vm3.c     **** PC  =  nPC;
 17503              		.loc 1 4127 0
 17504 6374 83E01F   		andl	$31, %eax
4124:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17505              		.loc 1 4124 0
 17506 6377 83E11F   		andl	$31, %ecx
4127:src/vm3.c     **** PC  =  nPC;
 17507              		.loc 1 4127 0
 17508 637a 83E21F   		andl	$31, %edx
 17509 637d 8B048500 		movl	RF(,%rax,4), %eax
 17509      000000
4129:src/vm3.c     **** 
 17510              		.loc 1 4129 0
 17511 6384 83050000 		addl	$4, nPC(%rip)
 17511      000004
 17512              	.LVL1211:
4127:src/vm3.c     **** PC  =  nPC;
 17513              		.loc 1 4127 0
 17514 638b D3E0     		sall	%cl, %eax
4138:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 17515              		.loc 1 4138 0
 17516 638d 0FBFCB   		movswl	%bx, %ecx
4127:src/vm3.c     **** PC  =  nPC;
 17517              		.loc 1 4127 0
 17518 6390 89049500 		movl	%eax, RF(,%rdx,4)
 17518      000000
4135:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17519              		.loc 1 4135 0
 17520 6397 89D8     		movl	%ebx, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 702


4136:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 17521              		.loc 1 4136 0
 17522 6399 C1EB10   		shrl	$16, %ebx
 17523              	.LVL1212:
4135:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17524              		.loc 1 4135 0
 17525 639c C1E815   		shrl	$21, %eax
 17526              	.LVL1213:
4138:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 17527              		.loc 1 4138 0
 17528 639f 83E31F   		andl	$31, %ebx
 17529 63a2 83E01F   		andl	$31, %eax
 17530 63a5 8B148500 		movl	RF(,%rax,4), %edx
 17530      000000
 17531 63ac 8B049D00 		movl	RF(,%rbx,4), %eax
 17531      000000
 17532 63b3 8D3411   		leal	(%rcx,%rdx), %esi
 17533 63b6 89C7     		movl	%eax, %edi
 17534 63b8 C1EF18   		shrl	$24, %edi
 17535 63bb 4088BE00 		movb	%dil, VM_memory(%rsi)
 17535      000000
4139:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 17536              		.loc 1 4139 0
 17537 63c2 8D741101 		leal	1(%rcx,%rdx), %esi
 17538 63c6 89C7     		movl	%eax, %edi
 17539 63c8 C1EF10   		shrl	$16, %edi
 17540 63cb 4088BE00 		movb	%dil, VM_memory(%rsi)
 17540      000000
4140:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 17541              		.loc 1 4140 0
 17542 63d2 8D741102 		leal	2(%rcx,%rdx), %esi
4141:src/vm3.c     **** PC  =  nPC;
 17543              		.loc 1 4141 0
 17544 63d6 8D541103 		leal	3(%rcx,%rdx), %edx
4140:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 17545              		.loc 1 4140 0
 17546 63da 0FB6FC   		movzbl	%ah, %edi
 17547 63dd 4088BE00 		movb	%dil, VM_memory(%rsi)
 17547      000000
4141:src/vm3.c     **** PC  =  nPC;
 17548              		.loc 1 4141 0
 17549 63e4 88820000 		movb	%al, VM_memory(%rdx)
 17549      0000
4142:src/vm3.c     **** nPC  += 4;
 17550              		.loc 1 4142 0
 17551 63ea 8B050000 		movl	nPC(%rip), %eax
 17551      0000
4144:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17552              		.loc 1 4144 0
 17553 63f0 8D5003   		leal	3(%rax), %edx
4143:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17554              		.loc 1 4143 0
 17555 63f3 8D4804   		leal	4(%rax), %ecx
 17556              	.LVL1214:
4142:src/vm3.c     **** nPC  += 4;
 17557              		.loc 1 4142 0
 17558 63f6 89050000 		movl	%eax, PC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 703


 17558      0000
4144:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17559              		.loc 1 4144 0
 17560 63fc 440FB682 		movzbl	VM_memory(%rdx), %r8d
 17560      00000000 
 17561 6404 89C2     		movl	%eax, %edx
4157:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17562              		.loc 1 4157 0
 17563 6406 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17563      000000
4144:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17564              		.loc 1 4144 0
 17565 640d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17565      000000
4143:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17566              		.loc 1 4143 0
 17567 6414 890D0000 		movl	%ecx, nPC(%rip)
 17567      0000
4157:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17568              		.loc 1 4157 0
 17569 641a 8D4805   		leal	5(%rax), %ecx
 17570 641d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17570      000000
4144:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17571              		.loc 1 4144 0
 17572 6424 C1E218   		sall	$24, %edx
 17573 6427 4109D0   		orl	%edx, %r8d
 17574 642a 8D5001   		leal	1(%rax), %edx
 17575 642d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17575      000000
 17576 6434 C1E210   		sall	$16, %edx
 17577 6437 4109D0   		orl	%edx, %r8d
 17578 643a 8D5002   		leal	2(%rax), %edx
 17579 643d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17579      000000
 17580 6444 C1E208   		sall	$8, %edx
 17581 6447 4109D0   		orl	%edx, %r8d
 17582              	.LVL1215:
4145:src/vm3.c     ****   if (op0 == 0x0) {
 17583              		.loc 1 4145 0
 17584 644a 4489C6   		movl	%r8d, %esi
4147:src/vm3.c     ****     op0 = op0 + funct;
 17585              		.loc 1 4147 0
 17586 644d 4488C2   		movb	%r8b, %dl
4145:src/vm3.c     ****   if (op0 == 0x0) {
 17587              		.loc 1 4145 0
 17588 6450 C1EE1A   		shrl	$26, %esi
 17589              	.LVL1216:
4147:src/vm3.c     ****     op0 = op0 + funct;
 17590              		.loc 1 4147 0
 17591 6453 83E23F   		andl	$63, %edx
 17592 6456 8D7E2B   		leal	43(%rsi), %edi
 17593 6459 4084F6   		testb	%sil, %sil
 17594 645c 0F45D7   		cmovne	%edi, %edx
 17595              	.LVL1217:
4157:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17596              		.loc 1 4157 0
GAS LISTING /tmp/cc15eBE3.s 			page 704


 17597 645f C1E110   		sall	$16, %ecx
 17598 6462 C1E318   		sall	$24, %ebx
 17599 6465 09CB     		orl	%ecx, %ebx
 17600 6467 8D4807   		leal	7(%rax), %ecx
 17601 646a 83C006   		addl	$6, %eax
 17602 646d 0FB68000 		movzbl	VM_memory(%rax), %eax
 17602      000000
4155:src/vm3.c     **** 
 17603              		.loc 1 4155 0
 17604 6474 0FB6D2   		movzbl	%dl, %edx
4157:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17605              		.loc 1 4157 0
 17606 6477 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17606      000000
4155:src/vm3.c     **** 
 17607              		.loc 1 4155 0
 17608 647e 48C1E204 		salq	$4, %rdx
 17609              	.LVL1218:
4157:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17610              		.loc 1 4157 0
 17611 6482 C1E008   		sall	$8, %eax
 17612 6485 09CB     		orl	%ecx, %ebx
 17613 6487 09C3     		orl	%eax, %ebx
 17614              	.LVL1219:
4158:src/vm3.c     ****   if (op1 == 0x0) {
 17615              		.loc 1 4158 0
 17616 6489 89D9     		movl	%ebx, %ecx
4160:src/vm3.c     ****     op1 = op1 + funct;
 17617              		.loc 1 4160 0
 17618 648b 88D8     		movb	%bl, %al
4158:src/vm3.c     ****   if (op1 == 0x0) {
 17619              		.loc 1 4158 0
 17620 648d C1E91A   		shrl	$26, %ecx
 17621              	.LVL1220:
4160:src/vm3.c     ****     op1 = op1 + funct;
 17622              		.loc 1 4160 0
 17623 6490 83E03F   		andl	$63, %eax
 17624 6493 8D712B   		leal	43(%rcx), %esi
 17625 6496 84C9     		testb	%cl, %cl
 17626 6498 0F45C6   		cmovne	%esi, %eax
 17627              	.LVL1221:
4167:src/vm3.c     **** 
 17628              		.loc 1 4167 0
 17629 649b 0FB6C0   		movzbl	%al, %eax
 17630 649e 48C1E004 		salq	$4, %rax
 17631              	.LVL1222:
 17632 64a2 48038414 		addq	58088(%rsp,%rdx), %rax
 17632      E8E20000 
 17633 64aa 488B08   		movq	(%rax), %rcx
 17634 64ad E9A6A8FF 		jmp	.L269
 17634      FF
 17635              	.LVL1223:
 17636              	.L122:
4175:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17637              		.loc 1 4175 0
 17638 64b2 4489C2   		movl	%r8d, %edx
4176:src/vm3.c     **** if (RF[rs] == RF[rt])
GAS LISTING /tmp/cc15eBE3.s 			page 705


 17639              		.loc 1 4176 0
 17640 64b5 4489C0   		movl	%r8d, %eax
4175:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17641              		.loc 1 4175 0
 17642 64b8 C1EA15   		shrl	$21, %edx
4176:src/vm3.c     **** if (RF[rs] == RF[rt])
 17643              		.loc 1 4176 0
 17644 64bb C1E810   		shrl	$16, %eax
4177:src/vm3.c     **** {
 17645              		.loc 1 4177 0
 17646 64be 83E01F   		andl	$31, %eax
 17647 64c1 83E21F   		andl	$31, %edx
 17648 64c4 8B048500 		movl	RF(,%rax,4), %eax
 17648      000000
 17649 64cb 39049500 		cmpl	%eax, RF(,%rdx,4)
 17649      000000
 17650 64d2 0F85CE00 		jne	.L654
 17650      0000
 17651              	.LVL1224:
4180:src/vm3.c     ****   nPC  += (immediate << 2);
 17652              		.loc 1 4180 0
 17653 64d8 8B050000 		movl	nPC(%rip), %eax
 17653      0000
4181:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17654              		.loc 1 4181 0
 17655 64de 450FBFC0 		movswl	%r8w, %r8d
 17656              	.LVL1225:
4182:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17657              		.loc 1 4182 0
 17658 64e2 8D4803   		leal	3(%rax), %ecx
4181:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17659              		.loc 1 4181 0
 17660 64e5 428D1480 		leal	(%rax,%r8,4), %edx
4180:src/vm3.c     ****   nPC  += (immediate << 2);
 17661              		.loc 1 4180 0
 17662 64e9 89050000 		movl	%eax, PC(%rip)
 17662      0000
4182:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17663              		.loc 1 4182 0
 17664 64ef 440FB681 		movzbl	VM_memory(%rcx), %r8d
 17664      00000000 
 17665              	.LVL1226:
 17666 64f7 89C1     		movl	%eax, %ecx
4181:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17667              		.loc 1 4181 0
 17668 64f9 89150000 		movl	%edx, nPC(%rip)
 17668      0000
4182:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17669              		.loc 1 4182 0
 17670 64ff 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17670      000000
 17671 6506 C1E118   		sall	$24, %ecx
 17672 6509 4109C8   		orl	%ecx, %r8d
 17673 650c 8D4801   		leal	1(%rax), %ecx
 17674 650f 83C002   		addl	$2, %eax
 17675 6512 0FB68000 		movzbl	VM_memory(%rax), %eax
 17675      000000
GAS LISTING /tmp/cc15eBE3.s 			page 706


 17676 6519 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17676      000000
 17677 6520 C1E008   		sall	$8, %eax
 17678 6523 C1E110   		sall	$16, %ecx
 17679 6526 4109C8   		orl	%ecx, %r8d
 17680 6529 4109C0   		orl	%eax, %r8d
 17681              	.LVL1227:
4183:src/vm3.c     ****   if (op0 == 0x0) {
 17682              		.loc 1 4183 0
 17683 652c 4489C0   		movl	%r8d, %eax
4185:src/vm3.c     ****     op0 = op0 + funct;
 17684              		.loc 1 4185 0
 17685 652f 4488C1   		movb	%r8b, %cl
4183:src/vm3.c     ****   if (op0 == 0x0) {
 17686              		.loc 1 4183 0
 17687 6532 C1E81A   		shrl	$26, %eax
 17688              	.LVL1228:
4185:src/vm3.c     ****     op0 = op0 + funct;
 17689              		.loc 1 4185 0
 17690 6535 83E13F   		andl	$63, %ecx
 17691 6538 8D702B   		leal	43(%rax), %esi
 17692 653b 84C0     		testb	%al, %al
4195:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17693              		.loc 1 4195 0
 17694 653d 8D4203   		leal	3(%rdx), %eax
 17695              	.LVL1229:
 17696 6540 0FB69800 		movzbl	VM_memory(%rax), %ebx
 17696      000000
 17697              	.LVL1230:
 17698 6547 89D0     		movl	%edx, %eax
4185:src/vm3.c     ****     op0 = op0 + funct;
 17699              		.loc 1 4185 0
 17700 6549 0F45CE   		cmovne	%esi, %ecx
 17701              	.LVL1231:
4195:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17702              		.loc 1 4195 0
 17703 654c 0FB68000 		movzbl	VM_memory(%rax), %eax
 17703      000000
4193:src/vm3.c     **** 
 17704              		.loc 1 4193 0
 17705 6553 0FB6C9   		movzbl	%cl, %ecx
 17706 6556 48C1E104 		salq	$4, %rcx
 17707              	.LVL1232:
4195:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17708              		.loc 1 4195 0
 17709 655a C1E018   		sall	$24, %eax
 17710 655d 09C3     		orl	%eax, %ebx
 17711 655f 8D4201   		leal	1(%rdx), %eax
 17712 6562 0FB68000 		movzbl	VM_memory(%rax), %eax
 17712      000000
 17713 6569 C1E010   		sall	$16, %eax
 17714 656c 09C3     		orl	%eax, %ebx
 17715 656e 8D4202   		leal	2(%rdx), %eax
 17716 6571 0FB68000 		movzbl	VM_memory(%rax), %eax
 17716      000000
 17717 6578 C1E008   		sall	$8, %eax
 17718 657b 09C3     		orl	%eax, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 707


 17719              	.LVL1233:
4196:src/vm3.c     ****   if (op1 == 0x0) {
 17720              		.loc 1 4196 0
 17721 657d 89DA     		movl	%ebx, %edx
4198:src/vm3.c     ****     op1 = op1 + funct;
 17722              		.loc 1 4198 0
 17723 657f 88D8     		movb	%bl, %al
4196:src/vm3.c     ****   if (op1 == 0x0) {
 17724              		.loc 1 4196 0
 17725 6581 C1EA1A   		shrl	$26, %edx
 17726              	.LVL1234:
4198:src/vm3.c     ****     op1 = op1 + funct;
 17727              		.loc 1 4198 0
 17728 6584 83E03F   		andl	$63, %eax
 17729 6587 8D722B   		leal	43(%rdx), %esi
 17730 658a 84D2     		testb	%dl, %dl
 17731 658c 0F45C6   		cmovne	%esi, %eax
 17732              	.LVL1235:
4205:src/vm3.c     **** 
 17733              		.loc 1 4205 0
 17734 658f 0FB6C0   		movzbl	%al, %eax
 17735 6592 48C1E004 		salq	$4, %rax
 17736              	.LVL1236:
 17737 6596 4803840C 		addq	58088(%rsp,%rcx), %rax
 17737      E8E20000 
 17738 659e 488B08   		movq	(%rax), %rcx
 17739              	.LVL1237:
 17740 65a1 E9B2A7FF 		jmp	.L269
 17740      FF
 17741              	.LVL1238:
 17742              	.L654:
4219:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17743              		.loc 1 4219 0
 17744 65a6 89DA     		movl	%ebx, %edx
4220:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 17745              		.loc 1 4220 0
 17746 65a8 89D8     		movl	%ebx, %eax
4222:src/vm3.c     **** PC  =  nPC;
 17747              		.loc 1 4222 0
 17748 65aa 0FBFDB   		movswl	%bx, %ebx
 17749              	.LVL1239:
4219:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17750              		.loc 1 4219 0
 17751 65ad C1EA15   		shrl	$21, %edx
4220:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 17752              		.loc 1 4220 0
 17753 65b0 C1E810   		shrl	$16, %eax
 17754              	.LVL1240:
4212:src/vm3.c     **** }
 17755              		.loc 1 4212 0
 17756 65b3 83050000 		addl	$4, nPC(%rip)
 17756      000004
 17757              	.LVL1241:
4222:src/vm3.c     **** PC  =  nPC;
 17758              		.loc 1 4222 0
 17759 65ba 83E21F   		andl	$31, %edx
 17760 65bd 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 708


 17761 65c0 031C9500 		addl	RF(,%rdx,4), %ebx
 17761      000000
 17762 65c7 891C8500 		movl	%ebx, RF(,%rax,4)
 17762      000000
4223:src/vm3.c     **** nPC  += 4;
 17763              		.loc 1 4223 0
 17764 65ce 8B050000 		movl	nPC(%rip), %eax
 17764      0000
4225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17765              		.loc 1 4225 0
 17766 65d4 8D5003   		leal	3(%rax), %edx
4224:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17767              		.loc 1 4224 0
 17768 65d7 8D4804   		leal	4(%rax), %ecx
4223:src/vm3.c     **** nPC  += 4;
 17769              		.loc 1 4223 0
 17770 65da 89050000 		movl	%eax, PC(%rip)
 17770      0000
4225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17771              		.loc 1 4225 0
 17772 65e0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 17772      00000000 
 17773              	.LVL1242:
 17774 65e8 89C2     		movl	%eax, %edx
4238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17775              		.loc 1 4238 0
 17776 65ea 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17776      000000
4225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17777              		.loc 1 4225 0
 17778 65f1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17778      000000
4224:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 17779              		.loc 1 4224 0
 17780 65f8 890D0000 		movl	%ecx, nPC(%rip)
 17780      0000
4238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17781              		.loc 1 4238 0
 17782 65fe 8D4805   		leal	5(%rax), %ecx
 17783 6601 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17783      000000
4225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17784              		.loc 1 4225 0
 17785 6608 C1E218   		sall	$24, %edx
 17786 660b 4109D0   		orl	%edx, %r8d
 17787 660e 8D5001   		leal	1(%rax), %edx
 17788 6611 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17788      000000
 17789 6618 C1E210   		sall	$16, %edx
 17790 661b 4109D0   		orl	%edx, %r8d
 17791 661e 8D5002   		leal	2(%rax), %edx
 17792 6621 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17792      000000
 17793 6628 C1E208   		sall	$8, %edx
 17794 662b 4109D0   		orl	%edx, %r8d
 17795              	.LVL1243:
4226:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 709


 17796              		.loc 1 4226 0
 17797 662e 4489C6   		movl	%r8d, %esi
4228:src/vm3.c     ****     op0 = op0 + funct;
 17798              		.loc 1 4228 0
 17799 6631 4488C2   		movb	%r8b, %dl
4226:src/vm3.c     ****   if (op0 == 0x0) {
 17800              		.loc 1 4226 0
 17801 6634 C1EE1A   		shrl	$26, %esi
 17802              	.LVL1244:
4228:src/vm3.c     ****     op0 = op0 + funct;
 17803              		.loc 1 4228 0
 17804 6637 83E23F   		andl	$63, %edx
 17805 663a 8D7E2B   		leal	43(%rsi), %edi
 17806 663d 4084F6   		testb	%sil, %sil
 17807 6640 0F45D7   		cmovne	%edi, %edx
 17808              	.LVL1245:
4238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17809              		.loc 1 4238 0
 17810 6643 C1E110   		sall	$16, %ecx
 17811 6646 C1E318   		sall	$24, %ebx
 17812 6649 09CB     		orl	%ecx, %ebx
 17813 664b 8D4807   		leal	7(%rax), %ecx
 17814 664e 83C006   		addl	$6, %eax
 17815 6651 0FB68000 		movzbl	VM_memory(%rax), %eax
 17815      000000
4236:src/vm3.c     **** 
 17816              		.loc 1 4236 0
 17817 6658 0FB6D2   		movzbl	%dl, %edx
4238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17818              		.loc 1 4238 0
 17819 665b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17819      000000
4236:src/vm3.c     **** 
 17820              		.loc 1 4236 0
 17821 6662 48C1E204 		salq	$4, %rdx
 17822              	.LVL1246:
4238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17823              		.loc 1 4238 0
 17824 6666 C1E008   		sall	$8, %eax
 17825 6669 09CB     		orl	%ecx, %ebx
 17826 666b 09C3     		orl	%eax, %ebx
 17827              	.LVL1247:
4239:src/vm3.c     ****   if (op1 == 0x0) {
 17828              		.loc 1 4239 0
 17829 666d 89D9     		movl	%ebx, %ecx
4241:src/vm3.c     ****     op1 = op1 + funct;
 17830              		.loc 1 4241 0
 17831 666f 88D8     		movb	%bl, %al
4239:src/vm3.c     ****   if (op1 == 0x0) {
 17832              		.loc 1 4239 0
 17833 6671 C1E91A   		shrl	$26, %ecx
 17834              	.LVL1248:
4241:src/vm3.c     ****     op1 = op1 + funct;
 17835              		.loc 1 4241 0
 17836 6674 83E03F   		andl	$63, %eax
 17837 6677 8D712B   		leal	43(%rcx), %esi
 17838 667a 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 710


 17839 667c 0F45C6   		cmovne	%esi, %eax
 17840              	.LVL1249:
4248:src/vm3.c     **** 
 17841              		.loc 1 4248 0
 17842 667f 0FB6C0   		movzbl	%al, %eax
 17843 6682 48C1E004 		salq	$4, %rax
 17844              	.LVL1250:
 17845 6686 48038414 		addq	58088(%rsp,%rdx), %rax
 17845      E8E20000 
 17846 668e 488B08   		movq	(%rax), %rcx
 17847 6691 E9C2A6FF 		jmp	.L269
 17847      FF
 17848              	.LVL1251:
 17849              	.L96:
4256:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17850              		.loc 1 4256 0
 17851 6696 4489C0   		movl	%r8d, %eax
4259:src/vm3.c     **** PC  =  nPC;
 17852              		.loc 1 4259 0
 17853 6699 410FBFD0 		movswl	%r8w, %edx
4267:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17854              		.loc 1 4267 0
 17855 669d 89DE     		movl	%ebx, %esi
4256:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 17856              		.loc 1 4256 0
 17857 669f C1E815   		shrl	$21, %eax
4257:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 17858              		.loc 1 4257 0
 17859 66a2 41C1E810 		shrl	$16, %r8d
 17860              	.LVL1252:
4267:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 17861              		.loc 1 4267 0
 17862 66a6 C1EE15   		shrl	$21, %esi
4259:src/vm3.c     **** PC  =  nPC;
 17863              		.loc 1 4259 0
 17864 66a9 83E01F   		andl	$31, %eax
 17865 66ac 4183E01F 		andl	$31, %r8d
4269:src/vm3.c     **** {
 17866              		.loc 1 4269 0
 17867 66b0 83E61F   		andl	$31, %esi
4259:src/vm3.c     **** PC  =  nPC;
 17868              		.loc 1 4259 0
 17869 66b3 03148500 		addl	RF(,%rax,4), %edx
 17869      000000
 17870              	.LVL1253:
 17871 66ba 8D4203   		leal	3(%rdx), %eax
 17872 66bd 89D1     		movl	%edx, %ecx
 17873 66bf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17873      000000
 17874 66c6 0FB68000 		movzbl	VM_memory(%rax), %eax
 17874      000000
 17875 66cd C1E118   		sall	$24, %ecx
 17876 66d0 09C8     		orl	%ecx, %eax
 17877 66d2 8D4A01   		leal	1(%rdx), %ecx
 17878 66d5 83C202   		addl	$2, %edx
 17879 66d8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 17879      000000
GAS LISTING /tmp/cc15eBE3.s 			page 711


 17880 66df 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17880      000000
 17881 66e6 C1E208   		sall	$8, %edx
 17882 66e9 C1E110   		sall	$16, %ecx
 17883 66ec 09C8     		orl	%ecx, %eax
4268:src/vm3.c     **** if (RF[rs] == RF[rt])
 17884              		.loc 1 4268 0
 17885 66ee 89D9     		movl	%ebx, %ecx
4259:src/vm3.c     **** PC  =  nPC;
 17886              		.loc 1 4259 0
 17887 66f0 09D0     		orl	%edx, %eax
4268:src/vm3.c     **** if (RF[rs] == RF[rt])
 17888              		.loc 1 4268 0
 17889 66f2 C1E910   		shrl	$16, %ecx
4259:src/vm3.c     **** PC  =  nPC;
 17890              		.loc 1 4259 0
 17891 66f5 42890485 		movl	%eax, RF(,%r8,4)
 17891      00000000 
4269:src/vm3.c     **** {
 17892              		.loc 1 4269 0
 17893 66fd 83E11F   		andl	$31, %ecx
4260:src/vm3.c     **** nPC  += 4;
 17894              		.loc 1 4260 0
 17895 6700 8B050000 		movl	nPC(%rip), %eax
 17895      0000
4269:src/vm3.c     **** {
 17896              		.loc 1 4269 0
 17897 6706 8B3C8D00 		movl	RF(,%rcx,4), %edi
 17897      000000
 17898 670d 393CB500 		cmpl	%edi, RF(,%rsi,4)
 17898      000000
4261:src/vm3.c     **** 
 17899              		.loc 1 4261 0
 17900 6714 8D5004   		leal	4(%rax), %edx
 17901              	.LVL1254:
 17902 6717 448D4007 		leal	7(%rax), %r8d
 17903 671b 8D7805   		leal	5(%rax), %edi
 17904 671e 8D7006   		leal	6(%rax), %esi
 17905 6721 4189D1   		movl	%edx, %r9d
4272:src/vm3.c     ****   nPC  += (immediate << 2);
 17906              		.loc 1 4272 0
 17907 6724 89150000 		movl	%edx, PC(%rip)
 17907      0000
4269:src/vm3.c     **** {
 17908              		.loc 1 4269 0
 17909 672a 0F85B600 		jne	.L663
 17909      0000
 17910              	.LVL1255:
4273:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17911              		.loc 1 4273 0
 17912 6730 0FBFDB   		movswl	%bx, %ebx
 17913              	.LVL1256:
4274:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17914              		.loc 1 4274 0
 17915 6733 450FB680 		movzbl	VM_memory(%r8), %r8d
 17915      00000000 
4273:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 712


 17916              		.loc 1 4273 0
 17917 673b 8D049A   		leal	(%rdx,%rbx,4), %eax
4274:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17918              		.loc 1 4274 0
 17919 673e 410FB691 		movzbl	VM_memory(%r9), %edx
 17919      00000000 
4273:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 17920              		.loc 1 4273 0
 17921 6746 89050000 		movl	%eax, nPC(%rip)
 17921      0000
4274:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17922              		.loc 1 4274 0
 17923 674c C1E218   		sall	$24, %edx
 17924 674f 4109D0   		orl	%edx, %r8d
 17925 6752 0FB69700 		movzbl	VM_memory(%rdi), %edx
 17925      000000
 17926 6759 C1E210   		sall	$16, %edx
 17927 675c 4109D0   		orl	%edx, %r8d
 17928 675f 0FB69600 		movzbl	VM_memory(%rsi), %edx
 17928      000000
 17929 6766 C1E208   		sall	$8, %edx
 17930 6769 4109D0   		orl	%edx, %r8d
 17931              	.LVL1257:
4275:src/vm3.c     ****   if (op0 == 0x0) {
 17932              		.loc 1 4275 0
 17933 676c 4489C1   		movl	%r8d, %ecx
4277:src/vm3.c     ****     op0 = op0 + funct;
 17934              		.loc 1 4277 0
 17935 676f 4488C2   		movb	%r8b, %dl
4275:src/vm3.c     ****   if (op0 == 0x0) {
 17936              		.loc 1 4275 0
 17937 6772 C1E91A   		shrl	$26, %ecx
 17938              	.LVL1258:
4277:src/vm3.c     ****     op0 = op0 + funct;
 17939              		.loc 1 4277 0
 17940 6775 83E23F   		andl	$63, %edx
 17941 6778 8D712B   		leal	43(%rcx), %esi
 17942 677b 84C9     		testb	%cl, %cl
4287:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17943              		.loc 1 4287 0
 17944 677d 8D4803   		leal	3(%rax), %ecx
 17945              	.LVL1259:
 17946 6780 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17946      000000
 17947              	.LVL1260:
 17948 6787 89C1     		movl	%eax, %ecx
4277:src/vm3.c     ****     op0 = op0 + funct;
 17949              		.loc 1 4277 0
 17950 6789 0F45D6   		cmovne	%esi, %edx
 17951              	.LVL1261:
4287:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17952              		.loc 1 4287 0
 17953 678c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17953      000000
4285:src/vm3.c     **** 
 17954              		.loc 1 4285 0
 17955 6793 0FB6D2   		movzbl	%dl, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 713


 17956 6796 48C1E204 		salq	$4, %rdx
 17957              	.LVL1262:
4287:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17958              		.loc 1 4287 0
 17959 679a C1E118   		sall	$24, %ecx
 17960 679d 09CB     		orl	%ecx, %ebx
 17961 679f 8D4801   		leal	1(%rax), %ecx
 17962 67a2 83C002   		addl	$2, %eax
 17963 67a5 0FB68000 		movzbl	VM_memory(%rax), %eax
 17963      000000
 17964 67ac 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 17964      000000
 17965 67b3 C1E008   		sall	$8, %eax
 17966 67b6 C1E110   		sall	$16, %ecx
 17967 67b9 09CB     		orl	%ecx, %ebx
 17968 67bb 09C3     		orl	%eax, %ebx
 17969              	.LVL1263:
4288:src/vm3.c     ****   if (op1 == 0x0) {
 17970              		.loc 1 4288 0
 17971 67bd 89D9     		movl	%ebx, %ecx
4290:src/vm3.c     ****     op1 = op1 + funct;
 17972              		.loc 1 4290 0
 17973 67bf 88D8     		movb	%bl, %al
4288:src/vm3.c     ****   if (op1 == 0x0) {
 17974              		.loc 1 4288 0
 17975 67c1 C1E91A   		shrl	$26, %ecx
 17976              	.LVL1264:
4290:src/vm3.c     ****     op1 = op1 + funct;
 17977              		.loc 1 4290 0
 17978 67c4 83E03F   		andl	$63, %eax
 17979 67c7 8D712B   		leal	43(%rcx), %esi
 17980 67ca 84C9     		testb	%cl, %cl
 17981 67cc 0F45C6   		cmovne	%esi, %eax
 17982              	.LVL1265:
4297:src/vm3.c     **** 
 17983              		.loc 1 4297 0
 17984 67cf 0FB6C0   		movzbl	%al, %eax
 17985 67d2 48C1E004 		salq	$4, %rax
 17986              	.LVL1266:
 17987 67d6 48038414 		addq	58088(%rsp,%rdx), %rax
 17987      E8E20000 
 17988 67de 488B08   		movq	(%rax), %rcx
 17989 67e1 E972A5FF 		jmp	.L269
 17989      FF
 17990              	.LVL1267:
 17991              	.L663:
4306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 17992              		.loc 1 4306 0
 17993 67e6 410FB691 		movzbl	VM_memory(%r9), %edx
 17993      00000000 
 17994 67ee 450FB680 		movzbl	VM_memory(%r8), %r8d
 17994      00000000 
4304:src/vm3.c     **** }
 17995              		.loc 1 4304 0
 17996 67f6 8D4808   		leal	8(%rax), %ecx
4319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 17997              		.loc 1 4319 0
GAS LISTING /tmp/cc15eBE3.s 			page 714


 17998 67f9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 17998      000000
 17999              	.LVL1268:
4304:src/vm3.c     **** }
 18000              		.loc 1 4304 0
 18001 6800 890D0000 		movl	%ecx, nPC(%rip)
 18001      0000
4319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18002              		.loc 1 4319 0
 18003 6806 8D4809   		leal	9(%rax), %ecx
4306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18004              		.loc 1 4306 0
 18005 6809 C1E218   		sall	$24, %edx
4319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18006              		.loc 1 4319 0
 18007 680c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18007      000000
4306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18008              		.loc 1 4306 0
 18009 6813 4109D0   		orl	%edx, %r8d
 18010 6816 0FB69700 		movzbl	VM_memory(%rdi), %edx
 18010      000000
 18011 681d C1E210   		sall	$16, %edx
 18012 6820 4109D0   		orl	%edx, %r8d
 18013 6823 0FB69600 		movzbl	VM_memory(%rsi), %edx
 18013      000000
 18014 682a C1E208   		sall	$8, %edx
 18015 682d 4109D0   		orl	%edx, %r8d
 18016              	.LVL1269:
4307:src/vm3.c     ****   if (op0 == 0x0) {
 18017              		.loc 1 4307 0
 18018 6830 4489C6   		movl	%r8d, %esi
4309:src/vm3.c     ****     op0 = op0 + funct;
 18019              		.loc 1 4309 0
 18020 6833 4488C2   		movb	%r8b, %dl
4307:src/vm3.c     ****   if (op0 == 0x0) {
 18021              		.loc 1 4307 0
 18022 6836 C1EE1A   		shrl	$26, %esi
 18023              	.LVL1270:
4309:src/vm3.c     ****     op0 = op0 + funct;
 18024              		.loc 1 4309 0
 18025 6839 83E23F   		andl	$63, %edx
 18026 683c 8D7E2B   		leal	43(%rsi), %edi
 18027 683f 4084F6   		testb	%sil, %sil
 18028 6842 0F45D7   		cmovne	%edi, %edx
 18029              	.LVL1271:
4319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18030              		.loc 1 4319 0
 18031 6845 C1E110   		sall	$16, %ecx
 18032 6848 C1E318   		sall	$24, %ebx
 18033 684b 09CB     		orl	%ecx, %ebx
 18034 684d 8D480B   		leal	11(%rax), %ecx
 18035 6850 83C00A   		addl	$10, %eax
 18036 6853 0FB68000 		movzbl	VM_memory(%rax), %eax
 18036      000000
4317:src/vm3.c     **** 
 18037              		.loc 1 4317 0
GAS LISTING /tmp/cc15eBE3.s 			page 715


 18038 685a 0FB6D2   		movzbl	%dl, %edx
4319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18039              		.loc 1 4319 0
 18040 685d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18040      000000
4317:src/vm3.c     **** 
 18041              		.loc 1 4317 0
 18042 6864 48C1E204 		salq	$4, %rdx
 18043              	.LVL1272:
4319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18044              		.loc 1 4319 0
 18045 6868 C1E008   		sall	$8, %eax
 18046 686b 09CB     		orl	%ecx, %ebx
 18047 686d 09C3     		orl	%eax, %ebx
 18048              	.LVL1273:
4320:src/vm3.c     ****   if (op1 == 0x0) {
 18049              		.loc 1 4320 0
 18050 686f 89D9     		movl	%ebx, %ecx
4322:src/vm3.c     ****     op1 = op1 + funct;
 18051              		.loc 1 4322 0
 18052 6871 88D8     		movb	%bl, %al
4320:src/vm3.c     ****   if (op1 == 0x0) {
 18053              		.loc 1 4320 0
 18054 6873 C1E91A   		shrl	$26, %ecx
 18055              	.LVL1274:
4322:src/vm3.c     ****     op1 = op1 + funct;
 18056              		.loc 1 4322 0
 18057 6876 83E03F   		andl	$63, %eax
 18058 6879 8D712B   		leal	43(%rcx), %esi
 18059 687c 84C9     		testb	%cl, %cl
 18060 687e 0F45C6   		cmovne	%esi, %eax
 18061              	.LVL1275:
4329:src/vm3.c     **** 
 18062              		.loc 1 4329 0
 18063 6881 0FB6C0   		movzbl	%al, %eax
 18064 6884 48C1E004 		salq	$4, %rax
 18065              	.LVL1276:
 18066 6888 48038414 		addq	58088(%rsp,%rdx), %rax
 18066      E8E20000 
 18067 6890 488B08   		movq	(%rax), %rcx
 18068 6893 E9C0A4FF 		jmp	.L269
 18068      FF
 18069              	.LVL1277:
 18070              	.L129:
4338:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18071              		.loc 1 4338 0
 18072 6898 4489C0   		movl	%r8d, %eax
4339:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 18073              		.loc 1 4339 0
 18074 689b 4489C2   		movl	%r8d, %edx
4337:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18075              		.loc 1 4337 0
 18076 689e 41C1E815 		shrl	$21, %r8d
 18077              	.LVL1278:
4338:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18078              		.loc 1 4338 0
 18079 68a2 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 716


 18080              	.LVL1279:
4340:src/vm3.c     **** PC  =  nPC;
 18081              		.loc 1 4340 0
 18082 68a5 4183E01F 		andl	$31, %r8d
4339:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 18083              		.loc 1 4339 0
 18084 68a9 C1EA0B   		shrl	$11, %edx
 18085              	.LVL1280:
4340:src/vm3.c     **** PC  =  nPC;
 18086              		.loc 1 4340 0
 18087 68ac 83E01F   		andl	$31, %eax
 18088 68af 83E21F   		andl	$31, %edx
4342:src/vm3.c     **** 
 18089              		.loc 1 4342 0
 18090 68b2 83050000 		addl	$4, nPC(%rip)
 18090      000004
 18091              	.LVL1281:
4340:src/vm3.c     **** PC  =  nPC;
 18092              		.loc 1 4340 0
 18093 68b9 8B048500 		movl	RF(,%rax,4), %eax
 18093      000000
 18094 68c0 42230485 		andl	RF(,%r8,4), %eax
 18094      00000000 
 18095 68c8 89049500 		movl	%eax, RF(,%rdx,4)
 18095      000000
4348:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18096              		.loc 1 4348 0
 18097 68cf 89DA     		movl	%ebx, %edx
4349:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 18098              		.loc 1 4349 0
 18099 68d1 89D8     		movl	%ebx, %eax
4348:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18100              		.loc 1 4348 0
 18101 68d3 C1EA15   		shrl	$21, %edx
4351:src/vm3.c     **** PC  =  nPC;
 18102              		.loc 1 4351 0
 18103 68d6 0FBFDB   		movswl	%bx, %ebx
 18104              	.LVL1282:
4349:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 18105              		.loc 1 4349 0
 18106 68d9 C1E810   		shrl	$16, %eax
 18107              	.LVL1283:
4351:src/vm3.c     **** PC  =  nPC;
 18108              		.loc 1 4351 0
 18109 68dc 83E21F   		andl	$31, %edx
 18110 68df 83E01F   		andl	$31, %eax
 18111 68e2 231C9500 		andl	RF(,%rdx,4), %ebx
 18111      000000
 18112              	.LVL1284:
 18113 68e9 891C8500 		movl	%ebx, RF(,%rax,4)
 18113      000000
4352:src/vm3.c     **** nPC  += 4;
 18114              		.loc 1 4352 0
 18115 68f0 8B050000 		movl	nPC(%rip), %eax
 18115      0000
4354:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18116              		.loc 1 4354 0
GAS LISTING /tmp/cc15eBE3.s 			page 717


 18117 68f6 8D5003   		leal	3(%rax), %edx
4353:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18118              		.loc 1 4353 0
 18119 68f9 8D4804   		leal	4(%rax), %ecx
4352:src/vm3.c     **** nPC  += 4;
 18120              		.loc 1 4352 0
 18121 68fc 89050000 		movl	%eax, PC(%rip)
 18121      0000
4354:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18122              		.loc 1 4354 0
 18123 6902 440FB682 		movzbl	VM_memory(%rdx), %r8d
 18123      00000000 
 18124 690a 89C2     		movl	%eax, %edx
4367:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18125              		.loc 1 4367 0
 18126 690c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18126      000000
4354:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18127              		.loc 1 4354 0
 18128 6913 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18128      000000
4353:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18129              		.loc 1 4353 0
 18130 691a 890D0000 		movl	%ecx, nPC(%rip)
 18130      0000
4367:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18131              		.loc 1 4367 0
 18132 6920 8D4805   		leal	5(%rax), %ecx
 18133 6923 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18133      000000
4354:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18134              		.loc 1 4354 0
 18135 692a C1E218   		sall	$24, %edx
 18136 692d 4109D0   		orl	%edx, %r8d
 18137 6930 8D5001   		leal	1(%rax), %edx
 18138 6933 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18138      000000
 18139 693a C1E210   		sall	$16, %edx
 18140 693d 4109D0   		orl	%edx, %r8d
 18141 6940 8D5002   		leal	2(%rax), %edx
 18142 6943 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18142      000000
 18143 694a C1E208   		sall	$8, %edx
 18144 694d 4109D0   		orl	%edx, %r8d
 18145              	.LVL1285:
4355:src/vm3.c     ****   if (op0 == 0x0) {
 18146              		.loc 1 4355 0
 18147 6950 4489C6   		movl	%r8d, %esi
4357:src/vm3.c     ****     op0 = op0 + funct;
 18148              		.loc 1 4357 0
 18149 6953 4488C2   		movb	%r8b, %dl
4355:src/vm3.c     ****   if (op0 == 0x0) {
 18150              		.loc 1 4355 0
 18151 6956 C1EE1A   		shrl	$26, %esi
 18152              	.LVL1286:
4357:src/vm3.c     ****     op0 = op0 + funct;
 18153              		.loc 1 4357 0
GAS LISTING /tmp/cc15eBE3.s 			page 718


 18154 6959 83E23F   		andl	$63, %edx
 18155 695c 8D7E2B   		leal	43(%rsi), %edi
 18156 695f 4084F6   		testb	%sil, %sil
 18157 6962 0F45D7   		cmovne	%edi, %edx
 18158              	.LVL1287:
4367:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18159              		.loc 1 4367 0
 18160 6965 C1E110   		sall	$16, %ecx
 18161 6968 C1E318   		sall	$24, %ebx
 18162 696b 09CB     		orl	%ecx, %ebx
 18163 696d 8D4807   		leal	7(%rax), %ecx
 18164 6970 83C006   		addl	$6, %eax
 18165 6973 0FB68000 		movzbl	VM_memory(%rax), %eax
 18165      000000
4365:src/vm3.c     **** 
 18166              		.loc 1 4365 0
 18167 697a 0FB6D2   		movzbl	%dl, %edx
4367:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18168              		.loc 1 4367 0
 18169 697d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18169      000000
4365:src/vm3.c     **** 
 18170              		.loc 1 4365 0
 18171 6984 48C1E204 		salq	$4, %rdx
 18172              	.LVL1288:
4367:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18173              		.loc 1 4367 0
 18174 6988 C1E008   		sall	$8, %eax
 18175 698b 09CB     		orl	%ecx, %ebx
 18176 698d 09C3     		orl	%eax, %ebx
 18177              	.LVL1289:
4368:src/vm3.c     ****   if (op1 == 0x0) {
 18178              		.loc 1 4368 0
 18179 698f 89D9     		movl	%ebx, %ecx
4370:src/vm3.c     ****     op1 = op1 + funct;
 18180              		.loc 1 4370 0
 18181 6991 88D8     		movb	%bl, %al
4368:src/vm3.c     ****   if (op1 == 0x0) {
 18182              		.loc 1 4368 0
 18183 6993 C1E91A   		shrl	$26, %ecx
 18184              	.LVL1290:
4370:src/vm3.c     ****     op1 = op1 + funct;
 18185              		.loc 1 4370 0
 18186 6996 83E03F   		andl	$63, %eax
 18187 6999 8D712B   		leal	43(%rcx), %esi
 18188 699c 84C9     		testb	%cl, %cl
 18189 699e 0F45C6   		cmovne	%esi, %eax
 18190              	.LVL1291:
4377:src/vm3.c     **** 
 18191              		.loc 1 4377 0
 18192 69a1 0FB6C0   		movzbl	%al, %eax
 18193 69a4 48C1E004 		salq	$4, %rax
 18194              	.LVL1292:
 18195 69a8 48038414 		addq	58088(%rsp,%rdx), %rax
 18195      E8E20000 
 18196 69b0 488B08   		movq	(%rax), %rcx
 18197 69b3 E9A0A3FF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 719


 18197      FF
 18198              	.LVL1293:
 18199              	.L140:
4385:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18200              		.loc 1 4385 0
 18201 69b8 4489C2   		movl	%r8d, %edx
4386:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 18202              		.loc 1 4386 0
 18203 69bb 4489C0   		movl	%r8d, %eax
4388:src/vm3.c     **** PC  =  nPC;
 18204              		.loc 1 4388 0
 18205 69be 450FBFC0 		movswl	%r8w, %r8d
 18206              	.LVL1294:
4385:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18207              		.loc 1 4385 0
 18208 69c2 C1EA15   		shrl	$21, %edx
4386:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 18209              		.loc 1 4386 0
 18210 69c5 C1E810   		shrl	$16, %eax
 18211              	.LVL1295:
4390:src/vm3.c     **** 
 18212              		.loc 1 4390 0
 18213 69c8 83050000 		addl	$4, nPC(%rip)
 18213      000004
 18214              	.LVL1296:
4388:src/vm3.c     **** PC  =  nPC;
 18215              		.loc 1 4388 0
 18216 69cf 83E21F   		andl	$31, %edx
 18217 69d2 83E01F   		andl	$31, %eax
 18218 69d5 44030495 		addl	RF(,%rdx,4), %r8d
 18218      00000000 
 18219              	.LVL1297:
4396:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18220              		.loc 1 4396 0
 18221 69dd 89DA     		movl	%ebx, %edx
 18222 69df C1EA15   		shrl	$21, %edx
4399:src/vm3.c     **** PC  =  nPC;
 18223              		.loc 1 4399 0
 18224 69e2 83E21F   		andl	$31, %edx
4388:src/vm3.c     **** PC  =  nPC;
 18225              		.loc 1 4388 0
 18226 69e5 44890485 		movl	%r8d, RF(,%rax,4)
 18226      00000000 
4398:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 18227              		.loc 1 4398 0
 18228 69ed 89D8     		movl	%ebx, %eax
4397:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 18229              		.loc 1 4397 0
 18230 69ef C1EB10   		shrl	$16, %ebx
 18231              	.LVL1298:
4399:src/vm3.c     **** PC  =  nPC;
 18232              		.loc 1 4399 0
 18233 69f2 83E31F   		andl	$31, %ebx
4398:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 18234              		.loc 1 4398 0
 18235 69f5 C1E80B   		shrl	$11, %eax
 18236              	.LVL1299:
GAS LISTING /tmp/cc15eBE3.s 			page 720


4399:src/vm3.c     **** PC  =  nPC;
 18237              		.loc 1 4399 0
 18238 69f8 8B3C9D00 		movl	RF(,%rbx,4), %edi
 18238      000000
 18239 69ff 83E01F   		andl	$31, %eax
 18240 6a02 393C9500 		cmpl	%edi, RF(,%rdx,4)
 18240      000000
 18241 6a09 0F92C2   		setb	%dl
 18242 6a0c 0FB6D2   		movzbl	%dl, %edx
 18243 6a0f 89148500 		movl	%edx, RF(,%rax,4)
 18243      000000
4400:src/vm3.c     **** nPC  += 4;
 18244              		.loc 1 4400 0
 18245 6a16 8B050000 		movl	nPC(%rip), %eax
 18245      0000
4402:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18246              		.loc 1 4402 0
 18247 6a1c 8D5003   		leal	3(%rax), %edx
4401:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18248              		.loc 1 4401 0
 18249 6a1f 8D4804   		leal	4(%rax), %ecx
4400:src/vm3.c     **** nPC  += 4;
 18250              		.loc 1 4400 0
 18251 6a22 89050000 		movl	%eax, PC(%rip)
 18251      0000
4402:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18252              		.loc 1 4402 0
 18253 6a28 440FB682 		movzbl	VM_memory(%rdx), %r8d
 18253      00000000 
 18254 6a30 89C2     		movl	%eax, %edx
4415:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18255              		.loc 1 4415 0
 18256 6a32 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18256      000000
4402:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18257              		.loc 1 4402 0
 18258 6a39 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18258      000000
4401:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18259              		.loc 1 4401 0
 18260 6a40 890D0000 		movl	%ecx, nPC(%rip)
 18260      0000
4415:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18261              		.loc 1 4415 0
 18262 6a46 8D4805   		leal	5(%rax), %ecx
 18263 6a49 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18263      000000
4402:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18264              		.loc 1 4402 0
 18265 6a50 C1E218   		sall	$24, %edx
 18266 6a53 4109D0   		orl	%edx, %r8d
 18267 6a56 8D5001   		leal	1(%rax), %edx
 18268 6a59 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18268      000000
 18269 6a60 C1E210   		sall	$16, %edx
 18270 6a63 4109D0   		orl	%edx, %r8d
 18271 6a66 8D5002   		leal	2(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 721


 18272 6a69 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18272      000000
 18273 6a70 C1E208   		sall	$8, %edx
 18274 6a73 4109D0   		orl	%edx, %r8d
 18275              	.LVL1300:
4403:src/vm3.c     ****   if (op0 == 0x0) {
 18276              		.loc 1 4403 0
 18277 6a76 4489C6   		movl	%r8d, %esi
4405:src/vm3.c     ****     op0 = op0 + funct;
 18278              		.loc 1 4405 0
 18279 6a79 4488C2   		movb	%r8b, %dl
4403:src/vm3.c     ****   if (op0 == 0x0) {
 18280              		.loc 1 4403 0
 18281 6a7c C1EE1A   		shrl	$26, %esi
 18282              	.LVL1301:
4405:src/vm3.c     ****     op0 = op0 + funct;
 18283              		.loc 1 4405 0
 18284 6a7f 83E23F   		andl	$63, %edx
 18285 6a82 8D7E2B   		leal	43(%rsi), %edi
 18286 6a85 4084F6   		testb	%sil, %sil
 18287 6a88 0F45D7   		cmovne	%edi, %edx
 18288              	.LVL1302:
4415:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18289              		.loc 1 4415 0
 18290 6a8b C1E110   		sall	$16, %ecx
 18291 6a8e C1E318   		sall	$24, %ebx
 18292 6a91 09CB     		orl	%ecx, %ebx
 18293 6a93 8D4807   		leal	7(%rax), %ecx
 18294 6a96 83C006   		addl	$6, %eax
 18295 6a99 0FB68000 		movzbl	VM_memory(%rax), %eax
 18295      000000
4413:src/vm3.c     **** 
 18296              		.loc 1 4413 0
 18297 6aa0 0FB6D2   		movzbl	%dl, %edx
4415:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18298              		.loc 1 4415 0
 18299 6aa3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18299      000000
4413:src/vm3.c     **** 
 18300              		.loc 1 4413 0
 18301 6aaa 48C1E204 		salq	$4, %rdx
 18302              	.LVL1303:
4415:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18303              		.loc 1 4415 0
 18304 6aae C1E008   		sall	$8, %eax
 18305 6ab1 09CB     		orl	%ecx, %ebx
 18306 6ab3 09C3     		orl	%eax, %ebx
 18307              	.LVL1304:
4416:src/vm3.c     ****   if (op1 == 0x0) {
 18308              		.loc 1 4416 0
 18309 6ab5 89D9     		movl	%ebx, %ecx
4418:src/vm3.c     ****     op1 = op1 + funct;
 18310              		.loc 1 4418 0
 18311 6ab7 88D8     		movb	%bl, %al
4416:src/vm3.c     ****   if (op1 == 0x0) {
 18312              		.loc 1 4416 0
 18313 6ab9 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 722


 18314              	.LVL1305:
4418:src/vm3.c     ****     op1 = op1 + funct;
 18315              		.loc 1 4418 0
 18316 6abc 83E03F   		andl	$63, %eax
 18317 6abf 8D712B   		leal	43(%rcx), %esi
 18318 6ac2 84C9     		testb	%cl, %cl
 18319 6ac4 0F45C6   		cmovne	%esi, %eax
 18320              	.LVL1306:
4425:src/vm3.c     **** 
 18321              		.loc 1 4425 0
 18322 6ac7 0FB6C0   		movzbl	%al, %eax
 18323 6aca 48C1E004 		salq	$4, %rax
 18324              	.LVL1307:
 18325 6ace 48038414 		addq	58088(%rsp,%rdx), %rax
 18325      E8E20000 
 18326 6ad6 488B08   		movq	(%rax), %rcx
 18327 6ad9 E97AA2FF 		jmp	.L269
 18327      FF
 18328              	.LVL1308:
 18329              	.L155:
4434:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 18330              		.loc 1 4434 0
 18331 6ade 4489C0   		movl	%r8d, %eax
4433:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18332              		.loc 1 4433 0
 18333 6ae1 41C1E815 		shrl	$21, %r8d
 18334              	.LVL1309:
4445:src/vm3.c     **** RF[rd] = HI;
 18335              		.loc 1 4445 0
 18336 6ae5 C1EB0B   		shrl	$11, %ebx
 18337              	.LVL1310:
4434:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 18338              		.loc 1 4434 0
 18339 6ae8 C1E810   		shrl	$16, %eax
 18340              	.LVL1311:
4435:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 18341              		.loc 1 4435 0
 18342 6aeb 4183E01F 		andl	$31, %r8d
4439:src/vm3.c     **** 
 18343              		.loc 1 4439 0
 18344 6aef 83050000 		addl	$4, nPC(%rip)
 18344      000004
4435:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 18345              		.loc 1 4435 0
 18346 6af6 83E01F   		andl	$31, %eax
4446:src/vm3.c     **** PC  =  nPC;
 18347              		.loc 1 4446 0
 18348 6af9 83E31F   		andl	$31, %ebx
4435:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 18349              		.loc 1 4435 0
 18350 6afc 448B3485 		movl	RF(,%rax,4), %r14d
 18350      00000000 
 18351              	.LVL1312:
 18352 6b04 428B0485 		movl	RF(,%r8,4), %eax
 18352      00000000 
 18353 6b0c 4C0FAFF0 		imulq	%rax, %r14
 18354              	.LVL1313:
GAS LISTING /tmp/cc15eBE3.s 			page 723


4436:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 18355              		.loc 1 4436 0
 18356 6b10 4C89F0   		movq	%r14, %rax
 18357 6b13 48C1E820 		shrq	$32, %rax
4446:src/vm3.c     **** PC  =  nPC;
 18358              		.loc 1 4446 0
 18359 6b17 89049D00 		movl	%eax, RF(,%rbx,4)
 18359      000000
4436:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 18360              		.loc 1 4436 0
 18361 6b1e 4189C5   		movl	%eax, %r13d
 18362              	.LVL1314:
4447:src/vm3.c     **** nPC  += 4;
 18363              		.loc 1 4447 0
 18364 6b21 8B050000 		movl	nPC(%rip), %eax
 18364      0000
 18365              	.LVL1315:
4449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18366              		.loc 1 4449 0
 18367 6b27 8D5003   		leal	3(%rax), %edx
4448:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18368              		.loc 1 4448 0
 18369 6b2a 8D4804   		leal	4(%rax), %ecx
4447:src/vm3.c     **** nPC  += 4;
 18370              		.loc 1 4447 0
 18371 6b2d 89050000 		movl	%eax, PC(%rip)
 18371      0000
4449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18372              		.loc 1 4449 0
 18373 6b33 440FB682 		movzbl	VM_memory(%rdx), %r8d
 18373      00000000 
 18374 6b3b 89C2     		movl	%eax, %edx
4462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18375              		.loc 1 4462 0
 18376 6b3d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18376      000000
4449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18377              		.loc 1 4449 0
 18378 6b44 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18378      000000
4448:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18379              		.loc 1 4448 0
 18380 6b4b 890D0000 		movl	%ecx, nPC(%rip)
 18380      0000
4462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18381              		.loc 1 4462 0
 18382 6b51 8D4805   		leal	5(%rax), %ecx
 18383 6b54 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18383      000000
4449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18384              		.loc 1 4449 0
 18385 6b5b C1E218   		sall	$24, %edx
 18386 6b5e 4109D0   		orl	%edx, %r8d
 18387 6b61 8D5001   		leal	1(%rax), %edx
 18388 6b64 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18388      000000
 18389 6b6b C1E210   		sall	$16, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 724


 18390 6b6e 4109D0   		orl	%edx, %r8d
 18391 6b71 8D5002   		leal	2(%rax), %edx
 18392 6b74 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18392      000000
 18393 6b7b C1E208   		sall	$8, %edx
 18394 6b7e 4109D0   		orl	%edx, %r8d
 18395              	.LVL1316:
4450:src/vm3.c     ****   if (op0 == 0x0) {
 18396              		.loc 1 4450 0
 18397 6b81 4489C6   		movl	%r8d, %esi
4452:src/vm3.c     ****     op0 = op0 + funct;
 18398              		.loc 1 4452 0
 18399 6b84 4488C2   		movb	%r8b, %dl
4450:src/vm3.c     ****   if (op0 == 0x0) {
 18400              		.loc 1 4450 0
 18401 6b87 C1EE1A   		shrl	$26, %esi
 18402              	.LVL1317:
4452:src/vm3.c     ****     op0 = op0 + funct;
 18403              		.loc 1 4452 0
 18404 6b8a 83E23F   		andl	$63, %edx
 18405 6b8d 8D7E2B   		leal	43(%rsi), %edi
 18406 6b90 4084F6   		testb	%sil, %sil
 18407 6b93 0F45D7   		cmovne	%edi, %edx
 18408              	.LVL1318:
4462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18409              		.loc 1 4462 0
 18410 6b96 C1E110   		sall	$16, %ecx
 18411 6b99 C1E318   		sall	$24, %ebx
 18412 6b9c 09CB     		orl	%ecx, %ebx
 18413 6b9e 8D4807   		leal	7(%rax), %ecx
 18414 6ba1 83C006   		addl	$6, %eax
 18415 6ba4 0FB68000 		movzbl	VM_memory(%rax), %eax
 18415      000000
4460:src/vm3.c     **** 
 18416              		.loc 1 4460 0
 18417 6bab 0FB6D2   		movzbl	%dl, %edx
4462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18418              		.loc 1 4462 0
 18419 6bae 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18419      000000
4460:src/vm3.c     **** 
 18420              		.loc 1 4460 0
 18421 6bb5 48C1E204 		salq	$4, %rdx
 18422              	.LVL1319:
4462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18423              		.loc 1 4462 0
 18424 6bb9 C1E008   		sall	$8, %eax
 18425 6bbc 09CB     		orl	%ecx, %ebx
 18426 6bbe 09C3     		orl	%eax, %ebx
 18427              	.LVL1320:
4463:src/vm3.c     ****   if (op1 == 0x0) {
 18428              		.loc 1 4463 0
 18429 6bc0 89D9     		movl	%ebx, %ecx
4465:src/vm3.c     ****     op1 = op1 + funct;
 18430              		.loc 1 4465 0
 18431 6bc2 88D8     		movb	%bl, %al
4463:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 725


 18432              		.loc 1 4463 0
 18433 6bc4 C1E91A   		shrl	$26, %ecx
 18434              	.LVL1321:
4465:src/vm3.c     ****     op1 = op1 + funct;
 18435              		.loc 1 4465 0
 18436 6bc7 83E03F   		andl	$63, %eax
 18437 6bca 8D712B   		leal	43(%rcx), %esi
 18438 6bcd 84C9     		testb	%cl, %cl
 18439 6bcf 0F45C6   		cmovne	%esi, %eax
 18440              	.LVL1322:
4472:src/vm3.c     **** 
 18441              		.loc 1 4472 0
 18442 6bd2 0FB6C0   		movzbl	%al, %eax
 18443 6bd5 48C1E004 		salq	$4, %rax
 18444              	.LVL1323:
 18445 6bd9 48038414 		addq	58088(%rsp,%rdx), %rax
 18445      E8E20000 
 18446 6be1 488B08   		movq	(%rax), %rcx
 18447 6be4 E96FA1FF 		jmp	.L269
 18447      FF
 18448              	.LVL1324:
 18449              	.L35:
4481:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18450              		.loc 1 4481 0
 18451 6be9 4489C0   		movl	%r8d, %eax
4482:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18452              		.loc 1 4482 0
 18453 6bec 4489C2   		movl	%r8d, %edx
4480:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18454              		.loc 1 4480 0
 18455 6bef 41C1E806 		shrl	$6, %r8d
 18456              	.LVL1325:
4481:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18457              		.loc 1 4481 0
 18458 6bf3 C1E810   		shrl	$16, %eax
 18459              	.LVL1326:
4480:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18460              		.loc 1 4480 0
 18461 6bf6 4488C1   		movb	%r8b, %cl
4482:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18462              		.loc 1 4482 0
 18463 6bf9 C1EA0B   		shrl	$11, %edx
 18464              	.LVL1327:
4483:src/vm3.c     **** PC  =  nPC;
 18465              		.loc 1 4483 0
 18466 6bfc 83E01F   		andl	$31, %eax
4480:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18467              		.loc 1 4480 0
 18468 6bff 83E11F   		andl	$31, %ecx
4483:src/vm3.c     **** PC  =  nPC;
 18469              		.loc 1 4483 0
 18470 6c02 83E21F   		andl	$31, %edx
 18471 6c05 8B048500 		movl	RF(,%rax,4), %eax
 18471      000000
4485:src/vm3.c     **** 
 18472              		.loc 1 4485 0
 18473 6c0c 83050000 		addl	$4, nPC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 726


 18473      000004
 18474              	.LVL1328:
4483:src/vm3.c     **** PC  =  nPC;
 18475              		.loc 1 4483 0
 18476 6c13 D3E0     		sall	%cl, %eax
 18477 6c15 89049500 		movl	%eax, RF(,%rdx,4)
 18477      000000
4491:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18478              		.loc 1 4491 0
 18479 6c1c 89DA     		movl	%ebx, %edx
4494:src/vm3.c     **** PC  =  nPC;
 18480              		.loc 1 4494 0
 18481 6c1e 0FBFC3   		movswl	%bx, %eax
4491:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18482              		.loc 1 4491 0
 18483 6c21 C1EA15   		shrl	$21, %edx
4492:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 18484              		.loc 1 4492 0
 18485 6c24 C1EB10   		shrl	$16, %ebx
 18486              	.LVL1329:
4494:src/vm3.c     **** PC  =  nPC;
 18487              		.loc 1 4494 0
 18488 6c27 83E21F   		andl	$31, %edx
 18489 6c2a 83E31F   		andl	$31, %ebx
 18490 6c2d 03049500 		addl	RF(,%rdx,4), %eax
 18490      000000
 18491              	.LVL1330:
 18492 6c34 8B149D00 		movl	RF(,%rbx,4), %edx
 18492      000000
 18493 6c3b 88900000 		movb	%dl, VM_memory(%rax)
 18493      0000
4495:src/vm3.c     **** nPC  += 4;
 18494              		.loc 1 4495 0
 18495 6c41 8B050000 		movl	nPC(%rip), %eax
 18495      0000
4497:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18496              		.loc 1 4497 0
 18497 6c47 8D5003   		leal	3(%rax), %edx
4496:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18498              		.loc 1 4496 0
 18499 6c4a 8D4804   		leal	4(%rax), %ecx
4495:src/vm3.c     **** nPC  += 4;
 18500              		.loc 1 4495 0
 18501 6c4d 89050000 		movl	%eax, PC(%rip)
 18501      0000
4497:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18502              		.loc 1 4497 0
 18503 6c53 440FB682 		movzbl	VM_memory(%rdx), %r8d
 18503      00000000 
 18504 6c5b 89C2     		movl	%eax, %edx
4510:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18505              		.loc 1 4510 0
 18506 6c5d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18506      000000
4497:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18507              		.loc 1 4497 0
 18508 6c64 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 727


 18508      000000
4496:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18509              		.loc 1 4496 0
 18510 6c6b 890D0000 		movl	%ecx, nPC(%rip)
 18510      0000
4510:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18511              		.loc 1 4510 0
 18512 6c71 8D4805   		leal	5(%rax), %ecx
 18513 6c74 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18513      000000
4497:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18514              		.loc 1 4497 0
 18515 6c7b C1E218   		sall	$24, %edx
 18516 6c7e 4109D0   		orl	%edx, %r8d
 18517 6c81 8D5001   		leal	1(%rax), %edx
 18518 6c84 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18518      000000
 18519 6c8b C1E210   		sall	$16, %edx
 18520 6c8e 4109D0   		orl	%edx, %r8d
 18521 6c91 8D5002   		leal	2(%rax), %edx
 18522 6c94 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18522      000000
 18523 6c9b C1E208   		sall	$8, %edx
 18524 6c9e 4109D0   		orl	%edx, %r8d
 18525              	.LVL1331:
4498:src/vm3.c     ****   if (op0 == 0x0) {
 18526              		.loc 1 4498 0
 18527 6ca1 4489C6   		movl	%r8d, %esi
4500:src/vm3.c     ****     op0 = op0 + funct;
 18528              		.loc 1 4500 0
 18529 6ca4 4488C2   		movb	%r8b, %dl
4498:src/vm3.c     ****   if (op0 == 0x0) {
 18530              		.loc 1 4498 0
 18531 6ca7 C1EE1A   		shrl	$26, %esi
 18532              	.LVL1332:
4500:src/vm3.c     ****     op0 = op0 + funct;
 18533              		.loc 1 4500 0
 18534 6caa 83E23F   		andl	$63, %edx
 18535 6cad 8D7E2B   		leal	43(%rsi), %edi
 18536 6cb0 4084F6   		testb	%sil, %sil
 18537 6cb3 0F45D7   		cmovne	%edi, %edx
 18538              	.LVL1333:
4510:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18539              		.loc 1 4510 0
 18540 6cb6 C1E110   		sall	$16, %ecx
 18541 6cb9 C1E318   		sall	$24, %ebx
 18542 6cbc 09CB     		orl	%ecx, %ebx
 18543 6cbe 8D4807   		leal	7(%rax), %ecx
 18544 6cc1 83C006   		addl	$6, %eax
 18545 6cc4 0FB68000 		movzbl	VM_memory(%rax), %eax
 18545      000000
4508:src/vm3.c     **** 
 18546              		.loc 1 4508 0
 18547 6ccb 0FB6D2   		movzbl	%dl, %edx
4510:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18548              		.loc 1 4510 0
 18549 6cce 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 728


 18549      000000
4508:src/vm3.c     **** 
 18550              		.loc 1 4508 0
 18551 6cd5 48C1E204 		salq	$4, %rdx
 18552              	.LVL1334:
4510:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18553              		.loc 1 4510 0
 18554 6cd9 C1E008   		sall	$8, %eax
 18555 6cdc 09CB     		orl	%ecx, %ebx
 18556 6cde 09C3     		orl	%eax, %ebx
 18557              	.LVL1335:
4511:src/vm3.c     ****   if (op1 == 0x0) {
 18558              		.loc 1 4511 0
 18559 6ce0 89D9     		movl	%ebx, %ecx
4513:src/vm3.c     ****     op1 = op1 + funct;
 18560              		.loc 1 4513 0
 18561 6ce2 88D8     		movb	%bl, %al
4511:src/vm3.c     ****   if (op1 == 0x0) {
 18562              		.loc 1 4511 0
 18563 6ce4 C1E91A   		shrl	$26, %ecx
 18564              	.LVL1336:
4513:src/vm3.c     ****     op1 = op1 + funct;
 18565              		.loc 1 4513 0
 18566 6ce7 83E03F   		andl	$63, %eax
 18567 6cea 8D712B   		leal	43(%rcx), %esi
 18568 6ced 84C9     		testb	%cl, %cl
 18569 6cef 0F45C6   		cmovne	%esi, %eax
 18570              	.LVL1337:
4520:src/vm3.c     **** 
 18571              		.loc 1 4520 0
 18572 6cf2 0FB6C0   		movzbl	%al, %eax
 18573 6cf5 48C1E004 		salq	$4, %rax
 18574              	.LVL1338:
 18575 6cf9 48038414 		addq	58088(%rsp,%rdx), %rax
 18575      E8E20000 
 18576 6d01 488B08   		movq	(%rax), %rcx
 18577 6d04 E94FA0FF 		jmp	.L269
 18577      FF
 18578              	.LVL1339:
 18579              	.L34:
4529:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18580              		.loc 1 4529 0
 18581 6d09 4489C0   		movl	%r8d, %eax
4530:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18582              		.loc 1 4530 0
 18583 6d0c 4489C2   		movl	%r8d, %edx
4528:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18584              		.loc 1 4528 0
 18585 6d0f 41C1E806 		shrl	$6, %r8d
 18586              	.LVL1340:
4529:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18587              		.loc 1 4529 0
 18588 6d13 C1E810   		shrl	$16, %eax
 18589              	.LVL1341:
4528:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18590              		.loc 1 4528 0
 18591 6d16 4488C1   		movb	%r8b, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 729


4530:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18592              		.loc 1 4530 0
 18593 6d19 C1EA0B   		shrl	$11, %edx
 18594              	.LVL1342:
4531:src/vm3.c     **** PC  =  nPC;
 18595              		.loc 1 4531 0
 18596 6d1c 83E01F   		andl	$31, %eax
4528:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18597              		.loc 1 4528 0
 18598 6d1f 83E11F   		andl	$31, %ecx
4531:src/vm3.c     **** PC  =  nPC;
 18599              		.loc 1 4531 0
 18600 6d22 83E21F   		andl	$31, %edx
 18601 6d25 8B048500 		movl	RF(,%rax,4), %eax
 18601      000000
4533:src/vm3.c     **** 
 18602              		.loc 1 4533 0
 18603 6d2c 83050000 		addl	$4, nPC(%rip)
 18603      000004
 18604              	.LVL1343:
4531:src/vm3.c     **** PC  =  nPC;
 18605              		.loc 1 4531 0
 18606 6d33 D3E0     		sall	%cl, %eax
 18607 6d35 89049500 		movl	%eax, RF(,%rdx,4)
 18607      000000
4539:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18608              		.loc 1 4539 0
 18609 6d3c 89DA     		movl	%ebx, %edx
4540:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 18610              		.loc 1 4540 0
 18611 6d3e 89D8     		movl	%ebx, %eax
4539:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18612              		.loc 1 4539 0
 18613 6d40 C1EA15   		shrl	$21, %edx
4542:src/vm3.c     **** PC  =  nPC;
 18614              		.loc 1 4542 0
 18615 6d43 0FBFDB   		movswl	%bx, %ebx
 18616              	.LVL1344:
4540:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 18617              		.loc 1 4540 0
 18618 6d46 C1E810   		shrl	$16, %eax
 18619              	.LVL1345:
4542:src/vm3.c     **** PC  =  nPC;
 18620              		.loc 1 4542 0
 18621 6d49 83E21F   		andl	$31, %edx
 18622 6d4c 83E01F   		andl	$31, %eax
 18623 6d4f 031C9500 		addl	RF(,%rdx,4), %ebx
 18623      000000
 18624              	.LVL1346:
 18625 6d56 0FB69300 		movzbl	VM_memory(%rbx), %edx
 18625      000000
 18626 6d5d 89148500 		movl	%edx, RF(,%rax,4)
 18626      000000
4543:src/vm3.c     **** nPC  += 4;
 18627              		.loc 1 4543 0
 18628 6d64 8B050000 		movl	nPC(%rip), %eax
 18628      0000
GAS LISTING /tmp/cc15eBE3.s 			page 730


4545:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18629              		.loc 1 4545 0
 18630 6d6a 8D5003   		leal	3(%rax), %edx
4544:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18631              		.loc 1 4544 0
 18632 6d6d 8D4804   		leal	4(%rax), %ecx
4543:src/vm3.c     **** nPC  += 4;
 18633              		.loc 1 4543 0
 18634 6d70 89050000 		movl	%eax, PC(%rip)
 18634      0000
4545:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18635              		.loc 1 4545 0
 18636 6d76 440FB682 		movzbl	VM_memory(%rdx), %r8d
 18636      00000000 
 18637 6d7e 89C2     		movl	%eax, %edx
4558:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18638              		.loc 1 4558 0
 18639 6d80 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18639      000000
4545:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18640              		.loc 1 4545 0
 18641 6d87 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18641      000000
4544:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18642              		.loc 1 4544 0
 18643 6d8e 890D0000 		movl	%ecx, nPC(%rip)
 18643      0000
4558:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18644              		.loc 1 4558 0
 18645 6d94 8D4805   		leal	5(%rax), %ecx
 18646 6d97 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18646      000000
4545:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18647              		.loc 1 4545 0
 18648 6d9e C1E218   		sall	$24, %edx
 18649 6da1 4109D0   		orl	%edx, %r8d
 18650 6da4 8D5001   		leal	1(%rax), %edx
 18651 6da7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18651      000000
 18652 6dae C1E210   		sall	$16, %edx
 18653 6db1 4109D0   		orl	%edx, %r8d
 18654 6db4 8D5002   		leal	2(%rax), %edx
 18655 6db7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18655      000000
 18656 6dbe C1E208   		sall	$8, %edx
 18657 6dc1 4109D0   		orl	%edx, %r8d
 18658              	.LVL1347:
4546:src/vm3.c     ****   if (op0 == 0x0) {
 18659              		.loc 1 4546 0
 18660 6dc4 4489C6   		movl	%r8d, %esi
4548:src/vm3.c     ****     op0 = op0 + funct;
 18661              		.loc 1 4548 0
 18662 6dc7 4488C2   		movb	%r8b, %dl
4546:src/vm3.c     ****   if (op0 == 0x0) {
 18663              		.loc 1 4546 0
 18664 6dca C1EE1A   		shrl	$26, %esi
 18665              	.LVL1348:
GAS LISTING /tmp/cc15eBE3.s 			page 731


4548:src/vm3.c     ****     op0 = op0 + funct;
 18666              		.loc 1 4548 0
 18667 6dcd 83E23F   		andl	$63, %edx
 18668 6dd0 8D7E2B   		leal	43(%rsi), %edi
 18669 6dd3 4084F6   		testb	%sil, %sil
 18670 6dd6 0F45D7   		cmovne	%edi, %edx
 18671              	.LVL1349:
4558:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18672              		.loc 1 4558 0
 18673 6dd9 C1E110   		sall	$16, %ecx
 18674 6ddc C1E318   		sall	$24, %ebx
 18675 6ddf 09CB     		orl	%ecx, %ebx
 18676 6de1 8D4807   		leal	7(%rax), %ecx
 18677 6de4 83C006   		addl	$6, %eax
 18678 6de7 0FB68000 		movzbl	VM_memory(%rax), %eax
 18678      000000
4556:src/vm3.c     **** 
 18679              		.loc 1 4556 0
 18680 6dee 0FB6D2   		movzbl	%dl, %edx
4558:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18681              		.loc 1 4558 0
 18682 6df1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18682      000000
4556:src/vm3.c     **** 
 18683              		.loc 1 4556 0
 18684 6df8 48C1E204 		salq	$4, %rdx
 18685              	.LVL1350:
4558:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18686              		.loc 1 4558 0
 18687 6dfc C1E008   		sall	$8, %eax
 18688 6dff 09CB     		orl	%ecx, %ebx
 18689 6e01 09C3     		orl	%eax, %ebx
 18690              	.LVL1351:
4559:src/vm3.c     ****   if (op1 == 0x0) {
 18691              		.loc 1 4559 0
 18692 6e03 89D9     		movl	%ebx, %ecx
4561:src/vm3.c     ****     op1 = op1 + funct;
 18693              		.loc 1 4561 0
 18694 6e05 88D8     		movb	%bl, %al
4559:src/vm3.c     ****   if (op1 == 0x0) {
 18695              		.loc 1 4559 0
 18696 6e07 C1E91A   		shrl	$26, %ecx
 18697              	.LVL1352:
4561:src/vm3.c     ****     op1 = op1 + funct;
 18698              		.loc 1 4561 0
 18699 6e0a 83E03F   		andl	$63, %eax
 18700 6e0d 8D712B   		leal	43(%rcx), %esi
 18701 6e10 84C9     		testb	%cl, %cl
 18702 6e12 0F45C6   		cmovne	%esi, %eax
 18703              	.LVL1353:
4568:src/vm3.c     **** 
 18704              		.loc 1 4568 0
 18705 6e15 0FB6C0   		movzbl	%al, %eax
 18706 6e18 48C1E004 		salq	$4, %rax
 18707              	.LVL1354:
 18708 6e1c 48038414 		addq	58088(%rsp,%rdx), %rax
 18708      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 732


 18709 6e24 488B08   		movq	(%rax), %rcx
 18710 6e27 E92C9FFF 		jmp	.L269
 18710      FF
 18711              	.LVL1355:
 18712              	.L130:
4576:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18713              		.loc 1 4576 0
 18714 6e2c 4489C2   		movl	%r8d, %edx
4577:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 18715              		.loc 1 4577 0
 18716 6e2f 4489C0   		movl	%r8d, %eax
4579:src/vm3.c     **** PC  =  nPC;
 18717              		.loc 1 4579 0
 18718 6e32 450FBFC0 		movswl	%r8w, %r8d
 18719              	.LVL1356:
4576:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18720              		.loc 1 4576 0
 18721 6e36 C1EA15   		shrl	$21, %edx
4577:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 18722              		.loc 1 4577 0
 18723 6e39 C1E810   		shrl	$16, %eax
 18724              	.LVL1357:
4581:src/vm3.c     **** 
 18725              		.loc 1 4581 0
 18726 6e3c 83050000 		addl	$4, nPC(%rip)
 18726      000004
 18727              	.LVL1358:
4579:src/vm3.c     **** PC  =  nPC;
 18728              		.loc 1 4579 0
 18729 6e43 83E21F   		andl	$31, %edx
 18730 6e46 83E01F   		andl	$31, %eax
 18731 6e49 44030495 		addl	RF(,%rdx,4), %r8d
 18731      00000000 
 18732              	.LVL1359:
4589:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18733              		.loc 1 4589 0
 18734 6e51 89DA     		movl	%ebx, %edx
 18735 6e53 C1EA0B   		shrl	$11, %edx
4590:src/vm3.c     **** PC  =  nPC;
 18736              		.loc 1 4590 0
 18737 6e56 83E21F   		andl	$31, %edx
4579:src/vm3.c     **** PC  =  nPC;
 18738              		.loc 1 4579 0
 18739 6e59 44890485 		movl	%r8d, RF(,%rax,4)
 18739      00000000 
4588:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 18740              		.loc 1 4588 0
 18741 6e61 89D8     		movl	%ebx, %eax
4587:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18742              		.loc 1 4587 0
 18743 6e63 C1EB06   		shrl	$6, %ebx
 18744              	.LVL1360:
4588:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 18745              		.loc 1 4588 0
 18746 6e66 C1E810   		shrl	$16, %eax
 18747              	.LVL1361:
4587:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 733


 18748              		.loc 1 4587 0
 18749 6e69 88D9     		movb	%bl, %cl
4590:src/vm3.c     **** PC  =  nPC;
 18750              		.loc 1 4590 0
 18751 6e6b 83E01F   		andl	$31, %eax
4587:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18752              		.loc 1 4587 0
 18753 6e6e 83E11F   		andl	$31, %ecx
4590:src/vm3.c     **** PC  =  nPC;
 18754              		.loc 1 4590 0
 18755 6e71 8B048500 		movl	RF(,%rax,4), %eax
 18755      000000
 18756 6e78 D3E0     		sall	%cl, %eax
 18757 6e7a 89049500 		movl	%eax, RF(,%rdx,4)
 18757      000000
4591:src/vm3.c     **** nPC  += 4;
 18758              		.loc 1 4591 0
 18759 6e81 8B050000 		movl	nPC(%rip), %eax
 18759      0000
4593:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18760              		.loc 1 4593 0
 18761 6e87 8D5003   		leal	3(%rax), %edx
4592:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18762              		.loc 1 4592 0
 18763 6e8a 8D4804   		leal	4(%rax), %ecx
4591:src/vm3.c     **** nPC  += 4;
 18764              		.loc 1 4591 0
 18765 6e8d 89050000 		movl	%eax, PC(%rip)
 18765      0000
4593:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18766              		.loc 1 4593 0
 18767 6e93 440FB682 		movzbl	VM_memory(%rdx), %r8d
 18767      00000000 
 18768 6e9b 89C2     		movl	%eax, %edx
4606:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18769              		.loc 1 4606 0
 18770 6e9d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18770      000000
4593:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18771              		.loc 1 4593 0
 18772 6ea4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18772      000000
4592:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18773              		.loc 1 4592 0
 18774 6eab 890D0000 		movl	%ecx, nPC(%rip)
 18774      0000
4606:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18775              		.loc 1 4606 0
 18776 6eb1 8D4805   		leal	5(%rax), %ecx
 18777 6eb4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18777      000000
4593:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18778              		.loc 1 4593 0
 18779 6ebb C1E218   		sall	$24, %edx
 18780 6ebe 4109D0   		orl	%edx, %r8d
 18781 6ec1 8D5001   		leal	1(%rax), %edx
 18782 6ec4 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 734


 18782      000000
 18783 6ecb C1E210   		sall	$16, %edx
 18784 6ece 4109D0   		orl	%edx, %r8d
 18785 6ed1 8D5002   		leal	2(%rax), %edx
 18786 6ed4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18786      000000
 18787 6edb C1E208   		sall	$8, %edx
 18788 6ede 4109D0   		orl	%edx, %r8d
 18789              	.LVL1362:
4594:src/vm3.c     ****   if (op0 == 0x0) {
 18790              		.loc 1 4594 0
 18791 6ee1 4489C6   		movl	%r8d, %esi
4596:src/vm3.c     ****     op0 = op0 + funct;
 18792              		.loc 1 4596 0
 18793 6ee4 4488C2   		movb	%r8b, %dl
4594:src/vm3.c     ****   if (op0 == 0x0) {
 18794              		.loc 1 4594 0
 18795 6ee7 C1EE1A   		shrl	$26, %esi
 18796              	.LVL1363:
4596:src/vm3.c     ****     op0 = op0 + funct;
 18797              		.loc 1 4596 0
 18798 6eea 83E23F   		andl	$63, %edx
 18799 6eed 8D7E2B   		leal	43(%rsi), %edi
 18800 6ef0 4084F6   		testb	%sil, %sil
 18801 6ef3 0F45D7   		cmovne	%edi, %edx
 18802              	.LVL1364:
4606:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18803              		.loc 1 4606 0
 18804 6ef6 C1E110   		sall	$16, %ecx
 18805 6ef9 C1E318   		sall	$24, %ebx
 18806 6efc 09CB     		orl	%ecx, %ebx
 18807 6efe 8D4807   		leal	7(%rax), %ecx
 18808 6f01 83C006   		addl	$6, %eax
 18809 6f04 0FB68000 		movzbl	VM_memory(%rax), %eax
 18809      000000
4604:src/vm3.c     **** 
 18810              		.loc 1 4604 0
 18811 6f0b 0FB6D2   		movzbl	%dl, %edx
4606:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18812              		.loc 1 4606 0
 18813 6f0e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18813      000000
4604:src/vm3.c     **** 
 18814              		.loc 1 4604 0
 18815 6f15 48C1E204 		salq	$4, %rdx
 18816              	.LVL1365:
4606:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18817              		.loc 1 4606 0
 18818 6f19 C1E008   		sall	$8, %eax
 18819 6f1c 09CB     		orl	%ecx, %ebx
 18820 6f1e 09C3     		orl	%eax, %ebx
 18821              	.LVL1366:
4607:src/vm3.c     ****   if (op1 == 0x0) {
 18822              		.loc 1 4607 0
 18823 6f20 89D9     		movl	%ebx, %ecx
4609:src/vm3.c     ****     op1 = op1 + funct;
 18824              		.loc 1 4609 0
GAS LISTING /tmp/cc15eBE3.s 			page 735


 18825 6f22 88D8     		movb	%bl, %al
4607:src/vm3.c     ****   if (op1 == 0x0) {
 18826              		.loc 1 4607 0
 18827 6f24 C1E91A   		shrl	$26, %ecx
 18828              	.LVL1367:
4609:src/vm3.c     ****     op1 = op1 + funct;
 18829              		.loc 1 4609 0
 18830 6f27 83E03F   		andl	$63, %eax
 18831 6f2a 8D712B   		leal	43(%rcx), %esi
 18832 6f2d 84C9     		testb	%cl, %cl
 18833 6f2f 0F45C6   		cmovne	%esi, %eax
 18834              	.LVL1368:
4616:src/vm3.c     **** 
 18835              		.loc 1 4616 0
 18836 6f32 0FB6C0   		movzbl	%al, %eax
 18837 6f35 48C1E004 		salq	$4, %rax
 18838              	.LVL1369:
 18839 6f39 48038414 		addq	58088(%rsp,%rdx), %rax
 18839      E8E20000 
 18840 6f41 488B08   		movq	(%rax), %rcx
 18841 6f44 E90F9EFF 		jmp	.L269
 18841      FF
 18842              	.LVL1370:
 18843              	.L40:
4627:src/vm3.c     **** 
 18844              		.loc 1 4627 0
 18845 6f49 8B050000 		movl	nPC(%rip), %eax
 18845      0000
4624:src/vm3.c     **** RF[rd] = HI;
 18846              		.loc 1 4624 0
 18847 6f4f 41C1E80B 		shrl	$11, %r8d
 18848              	.LVL1371:
4634:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 18849              		.loc 1 4634 0
 18850 6f53 89D9     		movl	%ebx, %ecx
4625:src/vm3.c     **** PC  =  nPC;
 18851              		.loc 1 4625 0
 18852 6f55 4183E01F 		andl	$31, %r8d
4634:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 18853              		.loc 1 4634 0
 18854 6f59 C1E910   		shrl	$16, %ecx
4633:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18855              		.loc 1 4633 0
 18856 6f5c C1EB15   		shrl	$21, %ebx
 18857              	.LVL1372:
4625:src/vm3.c     **** PC  =  nPC;
 18858              		.loc 1 4625 0
 18859 6f5f 46892C85 		movl	%r13d, RF(,%r8,4)
 18859      00000000 
4635:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 18860              		.loc 1 4635 0
 18861 6f67 83E11F   		andl	$31, %ecx
 18862 6f6a 83E31F   		andl	$31, %ebx
4627:src/vm3.c     **** 
 18863              		.loc 1 4627 0
 18864 6f6d 8D5004   		leal	4(%rax), %edx
4640:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 736


 18865              		.loc 1 4640 0
 18866 6f70 8D7007   		leal	7(%rax), %esi
4635:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 18867              		.loc 1 4635 0
 18868 6f73 448B348D 		movl	RF(,%rcx,4), %r14d
 18868      00000000 
 18869              	.LVL1373:
 18870 6f7b 8B0C9D00 		movl	RF(,%rbx,4), %ecx
 18870      000000
4638:src/vm3.c     **** nPC  += 4;
 18871              		.loc 1 4638 0
 18872 6f82 89150000 		movl	%edx, PC(%rip)
 18872      0000
4640:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18873              		.loc 1 4640 0
 18874 6f88 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18874      000000
 18875 6f8f 440FB686 		movzbl	VM_memory(%rsi), %r8d
 18875      00000000 
4635:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 18876              		.loc 1 4635 0
 18877 6f97 4C0FAFF1 		imulq	%rcx, %r14
 18878              	.LVL1374:
4639:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18879              		.loc 1 4639 0
 18880 6f9b 8D4808   		leal	8(%rax), %ecx
4640:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18881              		.loc 1 4640 0
 18882 6f9e C1E218   		sall	$24, %edx
 18883 6fa1 4109D0   		orl	%edx, %r8d
 18884 6fa4 8D5005   		leal	5(%rax), %edx
4653:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18885              		.loc 1 4653 0
 18886 6fa7 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 18886      000000
4639:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 18887              		.loc 1 4639 0
 18888 6fae 890D0000 		movl	%ecx, nPC(%rip)
 18888      0000
4653:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18889              		.loc 1 4653 0
 18890 6fb4 8D4809   		leal	9(%rax), %ecx
4640:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18891              		.loc 1 4640 0
 18892 6fb7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18892      000000
4636:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 18893              		.loc 1 4636 0
 18894 6fbe 4C89F7   		movq	%r14, %rdi
4653:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18895              		.loc 1 4653 0
 18896 6fc1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18896      000000
4636:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 18897              		.loc 1 4636 0
 18898 6fc8 48C1EF20 		shrq	$32, %rdi
 18899 6fcc 4989FD   		movq	%rdi, %r13
GAS LISTING /tmp/cc15eBE3.s 			page 737


 18900              	.LVL1375:
4640:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 18901              		.loc 1 4640 0
 18902 6fcf C1E210   		sall	$16, %edx
 18903 6fd2 4109D0   		orl	%edx, %r8d
 18904 6fd5 8D5006   		leal	6(%rax), %edx
 18905 6fd8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 18905      000000
 18906 6fdf C1E208   		sall	$8, %edx
 18907 6fe2 4109D0   		orl	%edx, %r8d
 18908              	.LVL1376:
4641:src/vm3.c     ****   if (op0 == 0x0) {
 18909              		.loc 1 4641 0
 18910 6fe5 4489C6   		movl	%r8d, %esi
4643:src/vm3.c     ****     op0 = op0 + funct;
 18911              		.loc 1 4643 0
 18912 6fe8 4488C2   		movb	%r8b, %dl
4641:src/vm3.c     ****   if (op0 == 0x0) {
 18913              		.loc 1 4641 0
 18914 6feb C1EE1A   		shrl	$26, %esi
 18915              	.LVL1377:
4643:src/vm3.c     ****     op0 = op0 + funct;
 18916              		.loc 1 4643 0
 18917 6fee 83E23F   		andl	$63, %edx
 18918 6ff1 8D7E2B   		leal	43(%rsi), %edi
 18919              	.LVL1378:
 18920 6ff4 4084F6   		testb	%sil, %sil
 18921 6ff7 0F45D7   		cmovne	%edi, %edx
 18922              	.LVL1379:
4653:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18923              		.loc 1 4653 0
 18924 6ffa C1E110   		sall	$16, %ecx
 18925 6ffd C1E318   		sall	$24, %ebx
 18926 7000 09CB     		orl	%ecx, %ebx
 18927 7002 8D480B   		leal	11(%rax), %ecx
 18928 7005 83C00A   		addl	$10, %eax
 18929 7008 0FB68000 		movzbl	VM_memory(%rax), %eax
 18929      000000
4651:src/vm3.c     **** 
 18930              		.loc 1 4651 0
 18931 700f 0FB6D2   		movzbl	%dl, %edx
4653:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18932              		.loc 1 4653 0
 18933 7012 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 18933      000000
4651:src/vm3.c     **** 
 18934              		.loc 1 4651 0
 18935 7019 48C1E204 		salq	$4, %rdx
 18936              	.LVL1380:
4653:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 18937              		.loc 1 4653 0
 18938 701d C1E008   		sall	$8, %eax
 18939 7020 09CB     		orl	%ecx, %ebx
 18940 7022 09C3     		orl	%eax, %ebx
 18941              	.LVL1381:
4654:src/vm3.c     ****   if (op1 == 0x0) {
 18942              		.loc 1 4654 0
GAS LISTING /tmp/cc15eBE3.s 			page 738


 18943 7024 89D9     		movl	%ebx, %ecx
4656:src/vm3.c     ****     op1 = op1 + funct;
 18944              		.loc 1 4656 0
 18945 7026 88D8     		movb	%bl, %al
4654:src/vm3.c     ****   if (op1 == 0x0) {
 18946              		.loc 1 4654 0
 18947 7028 C1E91A   		shrl	$26, %ecx
 18948              	.LVL1382:
4656:src/vm3.c     ****     op1 = op1 + funct;
 18949              		.loc 1 4656 0
 18950 702b 83E03F   		andl	$63, %eax
 18951 702e 8D712B   		leal	43(%rcx), %esi
 18952 7031 84C9     		testb	%cl, %cl
 18953 7033 0F45C6   		cmovne	%esi, %eax
 18954              	.LVL1383:
4663:src/vm3.c     **** 
 18955              		.loc 1 4663 0
 18956 7036 0FB6C0   		movzbl	%al, %eax
 18957 7039 48C1E004 		salq	$4, %rax
 18958              	.LVL1384:
 18959 703d 48038414 		addq	58088(%rsp,%rdx), %rax
 18959      E8E20000 
 18960 7045 488B08   		movq	(%rax), %rcx
 18961 7048 E90B9DFF 		jmp	.L269
 18961      FF
 18962              	.LVL1385:
 18963              	.L26:
4672:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18964              		.loc 1 4672 0
 18965 704d 4489C0   		movl	%r8d, %eax
4673:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18966              		.loc 1 4673 0
 18967 7050 4489C2   		movl	%r8d, %edx
4671:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18968              		.loc 1 4671 0
 18969 7053 41C1E806 		shrl	$6, %r8d
 18970              	.LVL1386:
4672:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 18971              		.loc 1 4672 0
 18972 7057 C1E810   		shrl	$16, %eax
 18973              	.LVL1387:
4671:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18974              		.loc 1 4671 0
 18975 705a 4488C1   		movb	%r8b, %cl
4673:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 18976              		.loc 1 4673 0
 18977 705d C1EA0B   		shrl	$11, %edx
 18978              	.LVL1388:
4674:src/vm3.c     **** PC  =  nPC;
 18979              		.loc 1 4674 0
 18980 7060 83E01F   		andl	$31, %eax
4671:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 18981              		.loc 1 4671 0
 18982 7063 83E11F   		andl	$31, %ecx
4682:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18983              		.loc 1 4682 0
 18984 7066 89DE     		movl	%ebx, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 739


4674:src/vm3.c     **** PC  =  nPC;
 18985              		.loc 1 4674 0
 18986 7068 8B048500 		movl	RF(,%rax,4), %eax
 18986      000000
 18987 706f 83E21F   		andl	$31, %edx
4682:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 18988              		.loc 1 4682 0
 18989 7072 C1EE15   		shrl	$21, %esi
4684:src/vm3.c     **** {
 18990              		.loc 1 4684 0
 18991 7075 83E61F   		andl	$31, %esi
4674:src/vm3.c     **** PC  =  nPC;
 18992              		.loc 1 4674 0
 18993 7078 D3E0     		sall	%cl, %eax
4683:src/vm3.c     **** if (RF[rs] != RF[rt])
 18994              		.loc 1 4683 0
 18995 707a 89D9     		movl	%ebx, %ecx
 18996 707c C1E910   		shrl	$16, %ecx
4674:src/vm3.c     **** PC  =  nPC;
 18997              		.loc 1 4674 0
 18998 707f 89049500 		movl	%eax, RF(,%rdx,4)
 18998      000000
4675:src/vm3.c     **** nPC  += 4;
 18999              		.loc 1 4675 0
 19000 7086 8B050000 		movl	nPC(%rip), %eax
 19000      0000
4684:src/vm3.c     **** {
 19001              		.loc 1 4684 0
 19002 708c 83E11F   		andl	$31, %ecx
 19003 708f 8B3C8D00 		movl	RF(,%rcx,4), %edi
 19003      000000
 19004 7096 393CB500 		cmpl	%edi, RF(,%rsi,4)
 19004      000000
4676:src/vm3.c     **** 
 19005              		.loc 1 4676 0
 19006 709d 8D5004   		leal	4(%rax), %edx
 19007              	.LVL1389:
 19008 70a0 448D4007 		leal	7(%rax), %r8d
 19009 70a4 8D7805   		leal	5(%rax), %edi
 19010 70a7 8D7006   		leal	6(%rax), %esi
 19011 70aa 4189D1   		movl	%edx, %r9d
4687:src/vm3.c     ****   nPC  += (immediate << 2);
 19012              		.loc 1 4687 0
 19013 70ad 89150000 		movl	%edx, PC(%rip)
 19013      0000
4684:src/vm3.c     **** {
 19014              		.loc 1 4684 0
 19015 70b3 0F84B600 		je	.L700
 19015      0000
 19016              	.LVL1390:
4688:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 19017              		.loc 1 4688 0
 19018 70b9 0FBFDB   		movswl	%bx, %ebx
 19019              	.LVL1391:
4689:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19020              		.loc 1 4689 0
 19021 70bc 450FB680 		movzbl	VM_memory(%r8), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 740


 19021      00000000 
4688:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 19022              		.loc 1 4688 0
 19023 70c4 8D049A   		leal	(%rdx,%rbx,4), %eax
4689:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19024              		.loc 1 4689 0
 19025 70c7 410FB691 		movzbl	VM_memory(%r9), %edx
 19025      00000000 
4688:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 19026              		.loc 1 4688 0
 19027 70cf 89050000 		movl	%eax, nPC(%rip)
 19027      0000
4689:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19028              		.loc 1 4689 0
 19029 70d5 C1E218   		sall	$24, %edx
 19030 70d8 4109D0   		orl	%edx, %r8d
 19031 70db 0FB69700 		movzbl	VM_memory(%rdi), %edx
 19031      000000
 19032 70e2 C1E210   		sall	$16, %edx
 19033 70e5 4109D0   		orl	%edx, %r8d
 19034 70e8 0FB69600 		movzbl	VM_memory(%rsi), %edx
 19034      000000
 19035 70ef C1E208   		sall	$8, %edx
 19036 70f2 4109D0   		orl	%edx, %r8d
 19037              	.LVL1392:
4690:src/vm3.c     ****   if (op0 == 0x0) {
 19038              		.loc 1 4690 0
 19039 70f5 4489C1   		movl	%r8d, %ecx
4692:src/vm3.c     ****     op0 = op0 + funct;
 19040              		.loc 1 4692 0
 19041 70f8 4488C2   		movb	%r8b, %dl
4690:src/vm3.c     ****   if (op0 == 0x0) {
 19042              		.loc 1 4690 0
 19043 70fb C1E91A   		shrl	$26, %ecx
 19044              	.LVL1393:
4692:src/vm3.c     ****     op0 = op0 + funct;
 19045              		.loc 1 4692 0
 19046 70fe 83E23F   		andl	$63, %edx
 19047 7101 8D712B   		leal	43(%rcx), %esi
 19048 7104 84C9     		testb	%cl, %cl
4702:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19049              		.loc 1 4702 0
 19050 7106 8D4803   		leal	3(%rax), %ecx
 19051              	.LVL1394:
 19052 7109 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19052      000000
 19053              	.LVL1395:
 19054 7110 89C1     		movl	%eax, %ecx
4692:src/vm3.c     ****     op0 = op0 + funct;
 19055              		.loc 1 4692 0
 19056 7112 0F45D6   		cmovne	%esi, %edx
 19057              	.LVL1396:
4702:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19058              		.loc 1 4702 0
 19059 7115 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19059      000000
4700:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 741


 19060              		.loc 1 4700 0
 19061 711c 0FB6D2   		movzbl	%dl, %edx
 19062 711f 48C1E204 		salq	$4, %rdx
 19063              	.LVL1397:
4702:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19064              		.loc 1 4702 0
 19065 7123 C1E118   		sall	$24, %ecx
 19066 7126 09CB     		orl	%ecx, %ebx
 19067 7128 8D4801   		leal	1(%rax), %ecx
 19068 712b 83C002   		addl	$2, %eax
 19069 712e 0FB68000 		movzbl	VM_memory(%rax), %eax
 19069      000000
 19070 7135 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19070      000000
 19071 713c C1E008   		sall	$8, %eax
 19072 713f C1E110   		sall	$16, %ecx
 19073 7142 09CB     		orl	%ecx, %ebx
 19074 7144 09C3     		orl	%eax, %ebx
 19075              	.LVL1398:
4703:src/vm3.c     ****   if (op1 == 0x0) {
 19076              		.loc 1 4703 0
 19077 7146 89D9     		movl	%ebx, %ecx
4705:src/vm3.c     ****     op1 = op1 + funct;
 19078              		.loc 1 4705 0
 19079 7148 88D8     		movb	%bl, %al
4703:src/vm3.c     ****   if (op1 == 0x0) {
 19080              		.loc 1 4703 0
 19081 714a C1E91A   		shrl	$26, %ecx
 19082              	.LVL1399:
4705:src/vm3.c     ****     op1 = op1 + funct;
 19083              		.loc 1 4705 0
 19084 714d 83E03F   		andl	$63, %eax
 19085 7150 8D712B   		leal	43(%rcx), %esi
 19086 7153 84C9     		testb	%cl, %cl
 19087 7155 0F45C6   		cmovne	%esi, %eax
 19088              	.LVL1400:
4712:src/vm3.c     **** 
 19089              		.loc 1 4712 0
 19090 7158 0FB6C0   		movzbl	%al, %eax
 19091 715b 48C1E004 		salq	$4, %rax
 19092              	.LVL1401:
 19093 715f 48038414 		addq	58088(%rsp,%rdx), %rax
 19093      E8E20000 
 19094 7167 488B08   		movq	(%rax), %rcx
 19095 716a E9E99BFF 		jmp	.L269
 19095      FF
 19096              	.LVL1402:
 19097              	.L700:
4721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19098              		.loc 1 4721 0
 19099 716f 410FB691 		movzbl	VM_memory(%r9), %edx
 19099      00000000 
 19100 7177 450FB680 		movzbl	VM_memory(%r8), %r8d
 19100      00000000 
4719:src/vm3.c     **** }
 19101              		.loc 1 4719 0
 19102 717f 8D4808   		leal	8(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 742


4734:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19103              		.loc 1 4734 0
 19104 7182 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19104      000000
 19105              	.LVL1403:
4719:src/vm3.c     **** }
 19106              		.loc 1 4719 0
 19107 7189 890D0000 		movl	%ecx, nPC(%rip)
 19107      0000
4734:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19108              		.loc 1 4734 0
 19109 718f 8D4809   		leal	9(%rax), %ecx
4721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19110              		.loc 1 4721 0
 19111 7192 C1E218   		sall	$24, %edx
4734:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19112              		.loc 1 4734 0
 19113 7195 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19113      000000
4721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19114              		.loc 1 4721 0
 19115 719c 4109D0   		orl	%edx, %r8d
 19116 719f 0FB69700 		movzbl	VM_memory(%rdi), %edx
 19116      000000
 19117 71a6 C1E210   		sall	$16, %edx
 19118 71a9 4109D0   		orl	%edx, %r8d
 19119 71ac 0FB69600 		movzbl	VM_memory(%rsi), %edx
 19119      000000
 19120 71b3 C1E208   		sall	$8, %edx
 19121 71b6 4109D0   		orl	%edx, %r8d
 19122              	.LVL1404:
4722:src/vm3.c     ****   if (op0 == 0x0) {
 19123              		.loc 1 4722 0
 19124 71b9 4489C6   		movl	%r8d, %esi
4724:src/vm3.c     ****     op0 = op0 + funct;
 19125              		.loc 1 4724 0
 19126 71bc 4488C2   		movb	%r8b, %dl
4722:src/vm3.c     ****   if (op0 == 0x0) {
 19127              		.loc 1 4722 0
 19128 71bf C1EE1A   		shrl	$26, %esi
 19129              	.LVL1405:
4724:src/vm3.c     ****     op0 = op0 + funct;
 19130              		.loc 1 4724 0
 19131 71c2 83E23F   		andl	$63, %edx
 19132 71c5 8D7E2B   		leal	43(%rsi), %edi
 19133 71c8 4084F6   		testb	%sil, %sil
 19134 71cb 0F45D7   		cmovne	%edi, %edx
 19135              	.LVL1406:
4734:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19136              		.loc 1 4734 0
 19137 71ce C1E110   		sall	$16, %ecx
 19138 71d1 C1E318   		sall	$24, %ebx
 19139 71d4 09CB     		orl	%ecx, %ebx
 19140 71d6 8D480B   		leal	11(%rax), %ecx
 19141 71d9 83C00A   		addl	$10, %eax
 19142 71dc 0FB68000 		movzbl	VM_memory(%rax), %eax
 19142      000000
GAS LISTING /tmp/cc15eBE3.s 			page 743


4732:src/vm3.c     **** 
 19143              		.loc 1 4732 0
 19144 71e3 0FB6D2   		movzbl	%dl, %edx
4734:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19145              		.loc 1 4734 0
 19146 71e6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19146      000000
4732:src/vm3.c     **** 
 19147              		.loc 1 4732 0
 19148 71ed 48C1E204 		salq	$4, %rdx
 19149              	.LVL1407:
4734:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19150              		.loc 1 4734 0
 19151 71f1 C1E008   		sall	$8, %eax
 19152 71f4 09CB     		orl	%ecx, %ebx
 19153 71f6 09C3     		orl	%eax, %ebx
 19154              	.LVL1408:
4735:src/vm3.c     ****   if (op1 == 0x0) {
 19155              		.loc 1 4735 0
 19156 71f8 89D9     		movl	%ebx, %ecx
4737:src/vm3.c     ****     op1 = op1 + funct;
 19157              		.loc 1 4737 0
 19158 71fa 88D8     		movb	%bl, %al
4735:src/vm3.c     ****   if (op1 == 0x0) {
 19159              		.loc 1 4735 0
 19160 71fc C1E91A   		shrl	$26, %ecx
 19161              	.LVL1409:
4737:src/vm3.c     ****     op1 = op1 + funct;
 19162              		.loc 1 4737 0
 19163 71ff 83E03F   		andl	$63, %eax
 19164 7202 8D712B   		leal	43(%rcx), %esi
 19165 7205 84C9     		testb	%cl, %cl
 19166 7207 0F45C6   		cmovne	%esi, %eax
 19167              	.LVL1410:
4744:src/vm3.c     **** 
 19168              		.loc 1 4744 0
 19169 720a 0FB6C0   		movzbl	%al, %eax
 19170 720d 48C1E004 		salq	$4, %rax
 19171              	.LVL1411:
 19172 7211 48038414 		addq	58088(%rsp,%rdx), %rax
 19172      E8E20000 
 19173 7219 488B08   		movq	(%rax), %rcx
 19174 721c E9379BFF 		jmp	.L269
 19174      FF
 19175              	.LVL1412:
 19176              	.L157:
 19177 7221 0FB63D00 		movzbl	RF+8(%rip), %edi
 19177      000000
4752:src/vm3.c     **** {
 19178              		.loc 1 4752 0
 19179 7228 E8000000 		call	syscall
 19179      00
 19180              	.LVL1413:
 19181 722d 84C0     		testb	%al, %al
 19182 722f 0F858AD8 		jne	.L387
 19182      0000
 19183              	.LVL1414:
GAS LISTING /tmp/cc15eBE3.s 			page 744


4758:src/vm3.c     **** 
 19184              		.loc 1 4758 0
 19185 7235 8B150000 		movl	nPC(%rip), %edx
 19185      0000
4764:src/vm3.c     **** PC = nPC;
 19186              		.loc 1 4764 0
 19187 723b C1EB15   		shrl	$21, %ebx
 19188              	.LVL1415:
4766:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19189              		.loc 1 4766 0
 19190 723e 83E31F   		andl	$31, %ebx
 19191 7241 8B049D00 		movl	RF(,%rbx,4), %eax
 19191      000000
4758:src/vm3.c     **** 
 19192              		.loc 1 4758 0
 19193 7248 8D4A04   		leal	4(%rdx), %ecx
4767:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19194              		.loc 1 4767 0
 19195 724b 8D7207   		leal	7(%rdx), %esi
4765:src/vm3.c     **** nPC = RF[rs];
 19196              		.loc 1 4765 0
 19197 724e 890D0000 		movl	%ecx, PC(%rip)
 19197      0000
4767:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19198              		.loc 1 4767 0
 19199 7254 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19199      000000
 19200 725b 440FB686 		movzbl	VM_memory(%rsi), %r8d
 19200      00000000 
4766:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19201              		.loc 1 4766 0
 19202 7263 89050000 		movl	%eax, nPC(%rip)
 19202      0000
4767:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19203              		.loc 1 4767 0
 19204 7269 C1E118   		sall	$24, %ecx
 19205 726c 4109C8   		orl	%ecx, %r8d
 19206 726f 8D4A05   		leal	5(%rdx), %ecx
 19207 7272 83C206   		addl	$6, %edx
 19208 7275 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19208      000000
 19209 727c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19209      000000
 19210 7283 C1E208   		sall	$8, %edx
 19211 7286 C1E110   		sall	$16, %ecx
 19212 7289 4109C8   		orl	%ecx, %r8d
 19213 728c 4109D0   		orl	%edx, %r8d
 19214              	.LVL1416:
4768:src/vm3.c     ****   if (op0 == 0x0) {
 19215              		.loc 1 4768 0
 19216 728f 4489C1   		movl	%r8d, %ecx
4770:src/vm3.c     ****     op0 = op0 + funct;
 19217              		.loc 1 4770 0
 19218 7292 4488C2   		movb	%r8b, %dl
4768:src/vm3.c     ****   if (op0 == 0x0) {
 19219              		.loc 1 4768 0
 19220 7295 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 745


 19221              	.LVL1417:
4770:src/vm3.c     ****     op0 = op0 + funct;
 19222              		.loc 1 4770 0
 19223 7298 83E23F   		andl	$63, %edx
 19224 729b 8D712B   		leal	43(%rcx), %esi
 19225 729e 84C9     		testb	%cl, %cl
4780:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19226              		.loc 1 4780 0
 19227 72a0 8D4803   		leal	3(%rax), %ecx
 19228              	.LVL1418:
 19229 72a3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19229      000000
 19230 72aa 89C1     		movl	%eax, %ecx
4770:src/vm3.c     ****     op0 = op0 + funct;
 19231              		.loc 1 4770 0
 19232 72ac 0F45D6   		cmovne	%esi, %edx
 19233              	.LVL1419:
4780:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19234              		.loc 1 4780 0
 19235 72af 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19235      000000
4778:src/vm3.c     **** 
 19236              		.loc 1 4778 0
 19237 72b6 0FB6D2   		movzbl	%dl, %edx
 19238 72b9 48C1E204 		salq	$4, %rdx
 19239              	.LVL1420:
4780:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19240              		.loc 1 4780 0
 19241 72bd C1E118   		sall	$24, %ecx
 19242 72c0 09CB     		orl	%ecx, %ebx
 19243 72c2 8D4801   		leal	1(%rax), %ecx
 19244 72c5 83C002   		addl	$2, %eax
 19245 72c8 0FB68000 		movzbl	VM_memory(%rax), %eax
 19245      000000
 19246 72cf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19246      000000
 19247 72d6 C1E008   		sall	$8, %eax
 19248 72d9 C1E110   		sall	$16, %ecx
 19249 72dc 09CB     		orl	%ecx, %ebx
 19250 72de 09C3     		orl	%eax, %ebx
 19251              	.LVL1421:
4781:src/vm3.c     ****   if (op1 == 0x0) {
 19252              		.loc 1 4781 0
 19253 72e0 89D9     		movl	%ebx, %ecx
4783:src/vm3.c     ****     op1 = op1 + funct;
 19254              		.loc 1 4783 0
 19255 72e2 88D8     		movb	%bl, %al
4781:src/vm3.c     ****   if (op1 == 0x0) {
 19256              		.loc 1 4781 0
 19257 72e4 C1E91A   		shrl	$26, %ecx
 19258              	.LVL1422:
4783:src/vm3.c     ****     op1 = op1 + funct;
 19259              		.loc 1 4783 0
 19260 72e7 83E03F   		andl	$63, %eax
 19261 72ea 8D712B   		leal	43(%rcx), %esi
 19262 72ed 84C9     		testb	%cl, %cl
 19263 72ef 0F45C6   		cmovne	%esi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 746


 19264              	.LVL1423:
4790:src/vm3.c     **** 
 19265              		.loc 1 4790 0
 19266 72f2 0FB6C0   		movzbl	%al, %eax
 19267 72f5 48C1E004 		salq	$4, %rax
 19268              	.LVL1424:
 19269 72f9 48038414 		addq	58088(%rsp,%rdx), %rax
 19269      E8E20000 
 19270 7301 488B08   		movq	(%rax), %rcx
 19271 7304 E94F9AFF 		jmp	.L269
 19271      FF
 19272              	.LVL1425:
 19273              	.L163:
4830:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19274              		.loc 1 4830 0
 19275 7309 89DA     		movl	%ebx, %edx
4831:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 19276              		.loc 1 4831 0
 19277 730b 89D8     		movl	%ebx, %eax
4833:src/vm3.c     **** PC  =  nPC;
 19278              		.loc 1 4833 0
 19279 730d 0FBFDB   		movswl	%bx, %ebx
 19280              	.LVL1426:
4830:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19281              		.loc 1 4830 0
 19282 7310 C1EA15   		shrl	$21, %edx
4831:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 19283              		.loc 1 4831 0
 19284 7313 C1E810   		shrl	$16, %eax
 19285              	.LVL1427:
4824:src/vm3.c     **** 
 19286              		.loc 1 4824 0
 19287 7316 83050000 		addl	$4, nPC(%rip)
 19287      000004
4833:src/vm3.c     **** PC  =  nPC;
 19288              		.loc 1 4833 0
 19289 731d 83E21F   		andl	$31, %edx
 19290 7320 83E01F   		andl	$31, %eax
 19291 7323 031C9500 		addl	RF(,%rdx,4), %ebx
 19291      000000
 19292 732a 891C8500 		movl	%ebx, RF(,%rax,4)
 19292      000000
4834:src/vm3.c     **** nPC  += 4;
 19293              		.loc 1 4834 0
 19294 7331 8B050000 		movl	nPC(%rip), %eax
 19294      0000
4836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19295              		.loc 1 4836 0
 19296 7337 8D5003   		leal	3(%rax), %edx
4835:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19297              		.loc 1 4835 0
 19298 733a 8D4804   		leal	4(%rax), %ecx
4834:src/vm3.c     **** nPC  += 4;
 19299              		.loc 1 4834 0
 19300 733d 89050000 		movl	%eax, PC(%rip)
 19300      0000
4836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 747


 19301              		.loc 1 4836 0
 19302 7343 440FB682 		movzbl	VM_memory(%rdx), %r8d
 19302      00000000 
 19303              	.LVL1428:
 19304 734b 89C2     		movl	%eax, %edx
4849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19305              		.loc 1 4849 0
 19306 734d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19306      000000
4836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19307              		.loc 1 4836 0
 19308 7354 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19308      000000
4835:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19309              		.loc 1 4835 0
 19310 735b 890D0000 		movl	%ecx, nPC(%rip)
 19310      0000
4849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19311              		.loc 1 4849 0
 19312 7361 8D4805   		leal	5(%rax), %ecx
 19313 7364 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19313      000000
4836:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19314              		.loc 1 4836 0
 19315 736b C1E218   		sall	$24, %edx
 19316 736e 4109D0   		orl	%edx, %r8d
 19317 7371 8D5001   		leal	1(%rax), %edx
 19318 7374 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19318      000000
 19319 737b C1E210   		sall	$16, %edx
 19320 737e 4109D0   		orl	%edx, %r8d
 19321 7381 8D5002   		leal	2(%rax), %edx
 19322 7384 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19322      000000
 19323 738b C1E208   		sall	$8, %edx
 19324 738e 4109D0   		orl	%edx, %r8d
 19325              	.LVL1429:
4837:src/vm3.c     ****   if (op0 == 0x0) {
 19326              		.loc 1 4837 0
 19327 7391 4489C6   		movl	%r8d, %esi
4839:src/vm3.c     ****     op0 = op0 + funct;
 19328              		.loc 1 4839 0
 19329 7394 4488C2   		movb	%r8b, %dl
4837:src/vm3.c     ****   if (op0 == 0x0) {
 19330              		.loc 1 4837 0
 19331 7397 C1EE1A   		shrl	$26, %esi
 19332              	.LVL1430:
4839:src/vm3.c     ****     op0 = op0 + funct;
 19333              		.loc 1 4839 0
 19334 739a 83E23F   		andl	$63, %edx
 19335 739d 8D7E2B   		leal	43(%rsi), %edi
 19336 73a0 4084F6   		testb	%sil, %sil
 19337 73a3 0F45D7   		cmovne	%edi, %edx
 19338              	.LVL1431:
4849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19339              		.loc 1 4849 0
 19340 73a6 C1E110   		sall	$16, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 748


 19341 73a9 C1E318   		sall	$24, %ebx
 19342 73ac 09CB     		orl	%ecx, %ebx
 19343 73ae 8D4807   		leal	7(%rax), %ecx
 19344 73b1 83C006   		addl	$6, %eax
 19345 73b4 0FB68000 		movzbl	VM_memory(%rax), %eax
 19345      000000
4847:src/vm3.c     **** 
 19346              		.loc 1 4847 0
 19347 73bb 0FB6D2   		movzbl	%dl, %edx
4849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19348              		.loc 1 4849 0
 19349 73be 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19349      000000
4847:src/vm3.c     **** 
 19350              		.loc 1 4847 0
 19351 73c5 48C1E204 		salq	$4, %rdx
 19352              	.LVL1432:
4849:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19353              		.loc 1 4849 0
 19354 73c9 C1E008   		sall	$8, %eax
 19355 73cc 09CB     		orl	%ecx, %ebx
 19356 73ce 09C3     		orl	%eax, %ebx
 19357              	.LVL1433:
4850:src/vm3.c     ****   if (op1 == 0x0) {
 19358              		.loc 1 4850 0
 19359 73d0 89D9     		movl	%ebx, %ecx
4852:src/vm3.c     ****     op1 = op1 + funct;
 19360              		.loc 1 4852 0
 19361 73d2 88D8     		movb	%bl, %al
4850:src/vm3.c     ****   if (op1 == 0x0) {
 19362              		.loc 1 4850 0
 19363 73d4 C1E91A   		shrl	$26, %ecx
 19364              	.LVL1434:
4852:src/vm3.c     ****     op1 = op1 + funct;
 19365              		.loc 1 4852 0
 19366 73d7 83E03F   		andl	$63, %eax
 19367 73da 8D712B   		leal	43(%rcx), %esi
 19368 73dd 84C9     		testb	%cl, %cl
 19369 73df 0F45C6   		cmovne	%esi, %eax
 19370              	.LVL1435:
4859:src/vm3.c     **** 
 19371              		.loc 1 4859 0
 19372 73e2 0FB6C0   		movzbl	%al, %eax
 19373 73e5 48C1E004 		salq	$4, %rax
 19374              	.LVL1436:
 19375 73e9 48038414 		addq	58088(%rsp,%rdx), %rax
 19375      E8E20000 
 19376 73f1 488B08   		movq	(%rax), %rcx
 19377 73f4 E95F99FF 		jmp	.L269
 19377      FF
 19378              	.LVL1437:
 19379              	.L7:
4868:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 19380              		.loc 1 4868 0
 19381 73f9 4489C0   		movl	%r8d, %eax
4870:src/vm3.c     **** PC  =  nPC;
 19382              		.loc 1 4870 0
GAS LISTING /tmp/cc15eBE3.s 			page 749


 19383 73fc 41C1E010 		sall	$16, %r8d
 19384              	.LVL1438:
4881:src/vm3.c     **** PC  =  nPC;
 19385              		.loc 1 4881 0
 19386 7400 0FBFD3   		movswl	%bx, %edx
4868:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 19387              		.loc 1 4868 0
 19388 7403 C1E810   		shrl	$16, %eax
 19389              	.LVL1439:
4872:src/vm3.c     **** 
 19390              		.loc 1 4872 0
 19391 7406 83050000 		addl	$4, nPC(%rip)
 19391      000004
 19392              	.LVL1440:
4870:src/vm3.c     **** PC  =  nPC;
 19393              		.loc 1 4870 0
 19394 740d 83E01F   		andl	$31, %eax
 19395 7410 44890485 		movl	%r8d, RF(,%rax,4)
 19395      00000000 
4878:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19396              		.loc 1 4878 0
 19397 7418 89D8     		movl	%ebx, %eax
4879:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 19398              		.loc 1 4879 0
 19399 741a C1EB10   		shrl	$16, %ebx
 19400              	.LVL1441:
4878:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19401              		.loc 1 4878 0
 19402 741d C1E815   		shrl	$21, %eax
 19403              	.LVL1442:
4881:src/vm3.c     **** PC  =  nPC;
 19404              		.loc 1 4881 0
 19405 7420 83E31F   		andl	$31, %ebx
 19406 7423 83E01F   		andl	$31, %eax
 19407 7426 03148500 		addl	RF(,%rax,4), %edx
 19407      000000
 19408              	.LVL1443:
 19409 742d 8D4203   		leal	3(%rdx), %eax
 19410 7430 89D1     		movl	%edx, %ecx
 19411 7432 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19411      000000
 19412 7439 0FB68000 		movzbl	VM_memory(%rax), %eax
 19412      000000
 19413 7440 C1E118   		sall	$24, %ecx
 19414 7443 09C8     		orl	%ecx, %eax
 19415 7445 8D4A01   		leal	1(%rdx), %ecx
 19416 7448 83C202   		addl	$2, %edx
 19417 744b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19417      000000
 19418 7452 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19418      000000
 19419 7459 C1E208   		sall	$8, %edx
 19420 745c C1E110   		sall	$16, %ecx
 19421 745f 09C8     		orl	%ecx, %eax
 19422 7461 09D0     		orl	%edx, %eax
 19423 7463 89049D00 		movl	%eax, RF(,%rbx,4)
 19423      000000
GAS LISTING /tmp/cc15eBE3.s 			page 750


4882:src/vm3.c     **** nPC  += 4;
 19424              		.loc 1 4882 0
 19425 746a 8B050000 		movl	nPC(%rip), %eax
 19425      0000
4884:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19426              		.loc 1 4884 0
 19427 7470 8D5003   		leal	3(%rax), %edx
4883:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19428              		.loc 1 4883 0
 19429 7473 8D4804   		leal	4(%rax), %ecx
4882:src/vm3.c     **** nPC  += 4;
 19430              		.loc 1 4882 0
 19431 7476 89050000 		movl	%eax, PC(%rip)
 19431      0000
4884:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19432              		.loc 1 4884 0
 19433 747c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 19433      00000000 
 19434 7484 89C2     		movl	%eax, %edx
4897:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19435              		.loc 1 4897 0
 19436 7486 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19436      000000
4884:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19437              		.loc 1 4884 0
 19438 748d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19438      000000
4883:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19439              		.loc 1 4883 0
 19440 7494 890D0000 		movl	%ecx, nPC(%rip)
 19440      0000
4897:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19441              		.loc 1 4897 0
 19442 749a 8D4805   		leal	5(%rax), %ecx
 19443 749d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19443      000000
4884:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19444              		.loc 1 4884 0
 19445 74a4 C1E218   		sall	$24, %edx
 19446 74a7 4109D0   		orl	%edx, %r8d
 19447 74aa 8D5001   		leal	1(%rax), %edx
 19448 74ad 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19448      000000
 19449 74b4 C1E210   		sall	$16, %edx
 19450 74b7 4109D0   		orl	%edx, %r8d
 19451 74ba 8D5002   		leal	2(%rax), %edx
 19452 74bd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19452      000000
 19453 74c4 C1E208   		sall	$8, %edx
 19454 74c7 4109D0   		orl	%edx, %r8d
 19455              	.LVL1444:
4885:src/vm3.c     ****   if (op0 == 0x0) {
 19456              		.loc 1 4885 0
 19457 74ca 4489C6   		movl	%r8d, %esi
4887:src/vm3.c     ****     op0 = op0 + funct;
 19458              		.loc 1 4887 0
 19459 74cd 4488C2   		movb	%r8b, %dl
GAS LISTING /tmp/cc15eBE3.s 			page 751


4885:src/vm3.c     ****   if (op0 == 0x0) {
 19460              		.loc 1 4885 0
 19461 74d0 C1EE1A   		shrl	$26, %esi
 19462              	.LVL1445:
4887:src/vm3.c     ****     op0 = op0 + funct;
 19463              		.loc 1 4887 0
 19464 74d3 83E23F   		andl	$63, %edx
 19465 74d6 8D7E2B   		leal	43(%rsi), %edi
 19466 74d9 4084F6   		testb	%sil, %sil
 19467 74dc 0F45D7   		cmovne	%edi, %edx
 19468              	.LVL1446:
4897:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19469              		.loc 1 4897 0
 19470 74df C1E110   		sall	$16, %ecx
 19471 74e2 C1E318   		sall	$24, %ebx
 19472 74e5 09CB     		orl	%ecx, %ebx
 19473 74e7 8D4807   		leal	7(%rax), %ecx
 19474 74ea 83C006   		addl	$6, %eax
 19475 74ed 0FB68000 		movzbl	VM_memory(%rax), %eax
 19475      000000
4895:src/vm3.c     **** 
 19476              		.loc 1 4895 0
 19477 74f4 0FB6D2   		movzbl	%dl, %edx
4897:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19478              		.loc 1 4897 0
 19479 74f7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19479      000000
4895:src/vm3.c     **** 
 19480              		.loc 1 4895 0
 19481 74fe 48C1E204 		salq	$4, %rdx
 19482              	.LVL1447:
4897:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19483              		.loc 1 4897 0
 19484 7502 C1E008   		sall	$8, %eax
 19485 7505 09CB     		orl	%ecx, %ebx
 19486 7507 09C3     		orl	%eax, %ebx
 19487              	.LVL1448:
4898:src/vm3.c     ****   if (op1 == 0x0) {
 19488              		.loc 1 4898 0
 19489 7509 89D9     		movl	%ebx, %ecx
4900:src/vm3.c     ****     op1 = op1 + funct;
 19490              		.loc 1 4900 0
 19491 750b 88D8     		movb	%bl, %al
4898:src/vm3.c     ****   if (op1 == 0x0) {
 19492              		.loc 1 4898 0
 19493 750d C1E91A   		shrl	$26, %ecx
 19494              	.LVL1449:
4900:src/vm3.c     ****     op1 = op1 + funct;
 19495              		.loc 1 4900 0
 19496 7510 83E03F   		andl	$63, %eax
 19497 7513 8D712B   		leal	43(%rcx), %esi
 19498 7516 84C9     		testb	%cl, %cl
 19499 7518 0F45C6   		cmovne	%esi, %eax
 19500              	.LVL1450:
4907:src/vm3.c     **** 
 19501              		.loc 1 4907 0
 19502 751b 0FB6C0   		movzbl	%al, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 752


 19503 751e 48C1E004 		salq	$4, %rax
 19504              	.LVL1451:
 19505 7522 48038414 		addq	58088(%rsp,%rdx), %rax
 19505      E8E20000 
 19506 752a 488B08   		movq	(%rax), %rcx
 19507 752d E92698FF 		jmp	.L269
 19507      FF
 19508              	.LVL1452:
 19509              	.L135:
4915:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 19510              		.loc 1 4915 0
 19511 7532 4489C2   		movl	%r8d, %edx
4916:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 19512              		.loc 1 4916 0
 19513 7535 4489C0   		movl	%r8d, %eax
4918:src/vm3.c     **** PC  =  nPC;
 19514              		.loc 1 4918 0
 19515 7538 450FBFC0 		movswl	%r8w, %r8d
 19516              	.LVL1453:
4915:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 19517              		.loc 1 4915 0
 19518 753c C1EA15   		shrl	$21, %edx
4916:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 19519              		.loc 1 4916 0
 19520 753f C1E810   		shrl	$16, %eax
 19521              	.LVL1454:
4918:src/vm3.c     **** PC  =  nPC;
 19522              		.loc 1 4918 0
 19523 7542 83E21F   		andl	$31, %edx
 19524 7545 83E01F   		andl	$31, %eax
 19525 7548 44030495 		addl	RF(,%rdx,4), %r8d
 19525      00000000 
 19526              	.LVL1455:
 19527 7550 44890485 		movl	%r8d, RF(,%rax,4)
 19527      00000000 
 19528 7558 0FB63D00 		movzbl	RF+8(%rip), %edi
 19528      000000
4919:src/vm3.c     **** nPC  += 4;
 19529              		.loc 1 4919 0
 19530 755f 8B050000 		movl	nPC(%rip), %eax
 19530      0000
4920:src/vm3.c     **** 
 19531              		.loc 1 4920 0
 19532 7565 83050000 		addl	$4, nPC(%rip)
 19532      000004
4919:src/vm3.c     **** nPC  += 4;
 19533              		.loc 1 4919 0
 19534 756c 89050000 		movl	%eax, PC(%rip)
 19534      0000
4926:src/vm3.c     **** {
 19535              		.loc 1 4926 0
 19536 7572 E8000000 		call	syscall
 19536      00
 19537              	.LVL1456:
 19538 7577 84C0     		testb	%al, %al
 19539 7579 0F8540D5 		jne	.L387
 19539      0000
GAS LISTING /tmp/cc15eBE3.s 			page 753


4931:src/vm3.c     **** nPC  += 4;
 19540              		.loc 1 4931 0
 19541 757f 8B050000 		movl	nPC(%rip), %eax
 19541      0000
4933:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19542              		.loc 1 4933 0
 19543 7585 8D5003   		leal	3(%rax), %edx
4932:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19544              		.loc 1 4932 0
 19545 7588 8D4804   		leal	4(%rax), %ecx
4931:src/vm3.c     **** nPC  += 4;
 19546              		.loc 1 4931 0
 19547 758b 89050000 		movl	%eax, PC(%rip)
 19547      0000
4933:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19548              		.loc 1 4933 0
 19549 7591 440FB682 		movzbl	VM_memory(%rdx), %r8d
 19549      00000000 
 19550 7599 89C2     		movl	%eax, %edx
4946:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19551              		.loc 1 4946 0
 19552 759b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19552      000000
 19553              	.LVL1457:
4933:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19554              		.loc 1 4933 0
 19555 75a2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19555      000000
4932:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19556              		.loc 1 4932 0
 19557 75a9 890D0000 		movl	%ecx, nPC(%rip)
 19557      0000
4946:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19558              		.loc 1 4946 0
 19559 75af 8D4805   		leal	5(%rax), %ecx
 19560 75b2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19560      000000
4933:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19561              		.loc 1 4933 0
 19562 75b9 C1E218   		sall	$24, %edx
 19563 75bc 4109D0   		orl	%edx, %r8d
 19564 75bf 8D5001   		leal	1(%rax), %edx
 19565 75c2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19565      000000
 19566 75c9 C1E210   		sall	$16, %edx
 19567 75cc 4109D0   		orl	%edx, %r8d
 19568 75cf 8D5002   		leal	2(%rax), %edx
 19569 75d2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19569      000000
 19570 75d9 C1E208   		sall	$8, %edx
 19571 75dc 4109D0   		orl	%edx, %r8d
 19572              	.LVL1458:
4934:src/vm3.c     ****   if (op0 == 0x0) {
 19573              		.loc 1 4934 0
 19574 75df 4489C6   		movl	%r8d, %esi
4936:src/vm3.c     ****     op0 = op0 + funct;
 19575              		.loc 1 4936 0
GAS LISTING /tmp/cc15eBE3.s 			page 754


 19576 75e2 4488C2   		movb	%r8b, %dl
4934:src/vm3.c     ****   if (op0 == 0x0) {
 19577              		.loc 1 4934 0
 19578 75e5 C1EE1A   		shrl	$26, %esi
 19579              	.LVL1459:
4936:src/vm3.c     ****     op0 = op0 + funct;
 19580              		.loc 1 4936 0
 19581 75e8 83E23F   		andl	$63, %edx
 19582 75eb 8D7E2B   		leal	43(%rsi), %edi
 19583 75ee 4084F6   		testb	%sil, %sil
 19584 75f1 0F45D7   		cmovne	%edi, %edx
 19585              	.LVL1460:
4946:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19586              		.loc 1 4946 0
 19587 75f4 C1E110   		sall	$16, %ecx
 19588 75f7 C1E318   		sall	$24, %ebx
 19589 75fa 09CB     		orl	%ecx, %ebx
 19590 75fc 8D4807   		leal	7(%rax), %ecx
 19591 75ff 83C006   		addl	$6, %eax
 19592 7602 0FB68000 		movzbl	VM_memory(%rax), %eax
 19592      000000
4944:src/vm3.c     **** 
 19593              		.loc 1 4944 0
 19594 7609 0FB6D2   		movzbl	%dl, %edx
4946:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19595              		.loc 1 4946 0
 19596 760c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19596      000000
4944:src/vm3.c     **** 
 19597              		.loc 1 4944 0
 19598 7613 48C1E204 		salq	$4, %rdx
 19599              	.LVL1461:
4946:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19600              		.loc 1 4946 0
 19601 7617 C1E008   		sall	$8, %eax
 19602 761a 09CB     		orl	%ecx, %ebx
 19603 761c 09C3     		orl	%eax, %ebx
 19604              	.LVL1462:
4947:src/vm3.c     ****   if (op1 == 0x0) {
 19605              		.loc 1 4947 0
 19606 761e 89D9     		movl	%ebx, %ecx
4949:src/vm3.c     ****     op1 = op1 + funct;
 19607              		.loc 1 4949 0
 19608 7620 88D8     		movb	%bl, %al
4947:src/vm3.c     ****   if (op1 == 0x0) {
 19609              		.loc 1 4947 0
 19610 7622 C1E91A   		shrl	$26, %ecx
 19611              	.LVL1463:
4949:src/vm3.c     ****     op1 = op1 + funct;
 19612              		.loc 1 4949 0
 19613 7625 83E03F   		andl	$63, %eax
 19614 7628 8D712B   		leal	43(%rcx), %esi
 19615 762b 84C9     		testb	%cl, %cl
 19616 762d 0F45C6   		cmovne	%esi, %eax
 19617              	.LVL1464:
4956:src/vm3.c     **** 
 19618              		.loc 1 4956 0
GAS LISTING /tmp/cc15eBE3.s 			page 755


 19619 7630 0FB6C0   		movzbl	%al, %eax
 19620 7633 48C1E004 		salq	$4, %rax
 19621              	.LVL1465:
 19622 7637 48038414 		addq	58088(%rsp,%rdx), %rax
 19622      E8E20000 
 19623 763f 488B08   		movq	(%rax), %rcx
 19624 7642 E91197FF 		jmp	.L269
 19624      FF
 19625              	.LVL1466:
 19626              	.L166:
4965:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 19627              		.loc 1 4965 0
 19628 7647 4489C0   		movl	%r8d, %eax
4966:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 19629              		.loc 1 4966 0
 19630 764a 4489C2   		movl	%r8d, %edx
4964:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 19631              		.loc 1 4964 0
 19632 764d 41C1E815 		shrl	$21, %r8d
 19633              	.LVL1467:
4965:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 19634              		.loc 1 4965 0
 19635 7651 C1E810   		shrl	$16, %eax
 19636              	.LVL1468:
4967:src/vm3.c     **** PC  =  nPC;
 19637              		.loc 1 4967 0
 19638 7654 4183E01F 		andl	$31, %r8d
4966:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 19639              		.loc 1 4966 0
 19640 7658 C1EA0B   		shrl	$11, %edx
 19641              	.LVL1469:
4967:src/vm3.c     **** PC  =  nPC;
 19642              		.loc 1 4967 0
 19643 765b 83E01F   		andl	$31, %eax
 19644 765e 83E21F   		andl	$31, %edx
4969:src/vm3.c     **** 
 19645              		.loc 1 4969 0
 19646 7661 83050000 		addl	$4, nPC(%rip)
 19646      000004
 19647              	.LVL1470:
4967:src/vm3.c     **** PC  =  nPC;
 19648              		.loc 1 4967 0
 19649 7668 8B048500 		movl	RF(,%rax,4), %eax
 19649      000000
 19650 766f 420B0485 		orl	RF(,%r8,4), %eax
 19650      00000000 
 19651 7677 F7D0     		notl	%eax
 19652 7679 89049500 		movl	%eax, RF(,%rdx,4)
 19652      000000
4976:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 19653              		.loc 1 4976 0
 19654 7680 89D8     		movl	%ebx, %eax
4977:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 19655              		.loc 1 4977 0
 19656 7682 89DA     		movl	%ebx, %edx
4976:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 19657              		.loc 1 4976 0
GAS LISTING /tmp/cc15eBE3.s 			page 756


 19658 7684 C1E810   		shrl	$16, %eax
4975:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19659              		.loc 1 4975 0
 19660 7687 C1EB06   		shrl	$6, %ebx
 19661              	.LVL1471:
4977:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 19662              		.loc 1 4977 0
 19663 768a C1EA0B   		shrl	$11, %edx
 19664              	.LVL1472:
4978:src/vm3.c     **** PC  =  nPC;
 19665              		.loc 1 4978 0
 19666 768d 83E01F   		andl	$31, %eax
4975:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19667              		.loc 1 4975 0
 19668 7690 88D9     		movb	%bl, %cl
4978:src/vm3.c     **** PC  =  nPC;
 19669              		.loc 1 4978 0
 19670 7692 83E21F   		andl	$31, %edx
 19671 7695 8B048500 		movl	RF(,%rax,4), %eax
 19671      000000
4975:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19672              		.loc 1 4975 0
 19673 769c 83E11F   		andl	$31, %ecx
4978:src/vm3.c     **** PC  =  nPC;
 19674              		.loc 1 4978 0
 19675 769f D3E8     		shrl	%cl, %eax
 19676 76a1 89049500 		movl	%eax, RF(,%rdx,4)
 19676      000000
4979:src/vm3.c     **** nPC  += 4;
 19677              		.loc 1 4979 0
 19678 76a8 8B050000 		movl	nPC(%rip), %eax
 19678      0000
4981:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19679              		.loc 1 4981 0
 19680 76ae 8D5003   		leal	3(%rax), %edx
4980:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19681              		.loc 1 4980 0
 19682 76b1 8D4804   		leal	4(%rax), %ecx
4979:src/vm3.c     **** nPC  += 4;
 19683              		.loc 1 4979 0
 19684 76b4 89050000 		movl	%eax, PC(%rip)
 19684      0000
4981:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19685              		.loc 1 4981 0
 19686 76ba 440FB682 		movzbl	VM_memory(%rdx), %r8d
 19686      00000000 
 19687 76c2 89C2     		movl	%eax, %edx
4994:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19688              		.loc 1 4994 0
 19689 76c4 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19689      000000
4981:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19690              		.loc 1 4981 0
 19691 76cb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19691      000000
4980:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19692              		.loc 1 4980 0
GAS LISTING /tmp/cc15eBE3.s 			page 757


 19693 76d2 890D0000 		movl	%ecx, nPC(%rip)
 19693      0000
4994:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19694              		.loc 1 4994 0
 19695 76d8 8D4805   		leal	5(%rax), %ecx
 19696 76db 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19696      000000
4981:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19697              		.loc 1 4981 0
 19698 76e2 C1E218   		sall	$24, %edx
 19699 76e5 4109D0   		orl	%edx, %r8d
 19700 76e8 8D5001   		leal	1(%rax), %edx
 19701 76eb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19701      000000
 19702 76f2 C1E210   		sall	$16, %edx
 19703 76f5 4109D0   		orl	%edx, %r8d
 19704 76f8 8D5002   		leal	2(%rax), %edx
 19705 76fb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19705      000000
 19706 7702 C1E208   		sall	$8, %edx
 19707 7705 4109D0   		orl	%edx, %r8d
 19708              	.LVL1473:
4982:src/vm3.c     ****   if (op0 == 0x0) {
 19709              		.loc 1 4982 0
 19710 7708 4489C6   		movl	%r8d, %esi
4984:src/vm3.c     ****     op0 = op0 + funct;
 19711              		.loc 1 4984 0
 19712 770b 4488C2   		movb	%r8b, %dl
4982:src/vm3.c     ****   if (op0 == 0x0) {
 19713              		.loc 1 4982 0
 19714 770e C1EE1A   		shrl	$26, %esi
 19715              	.LVL1474:
4984:src/vm3.c     ****     op0 = op0 + funct;
 19716              		.loc 1 4984 0
 19717 7711 83E23F   		andl	$63, %edx
 19718 7714 8D7E2B   		leal	43(%rsi), %edi
 19719 7717 4084F6   		testb	%sil, %sil
 19720 771a 0F45D7   		cmovne	%edi, %edx
 19721              	.LVL1475:
4994:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19722              		.loc 1 4994 0
 19723 771d C1E110   		sall	$16, %ecx
 19724 7720 C1E318   		sall	$24, %ebx
 19725 7723 09CB     		orl	%ecx, %ebx
 19726 7725 8D4807   		leal	7(%rax), %ecx
 19727 7728 83C006   		addl	$6, %eax
 19728 772b 0FB68000 		movzbl	VM_memory(%rax), %eax
 19728      000000
4992:src/vm3.c     **** 
 19729              		.loc 1 4992 0
 19730 7732 0FB6D2   		movzbl	%dl, %edx
4994:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19731              		.loc 1 4994 0
 19732 7735 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19732      000000
4992:src/vm3.c     **** 
 19733              		.loc 1 4992 0
GAS LISTING /tmp/cc15eBE3.s 			page 758


 19734 773c 48C1E204 		salq	$4, %rdx
 19735              	.LVL1476:
4994:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19736              		.loc 1 4994 0
 19737 7740 C1E008   		sall	$8, %eax
 19738 7743 09CB     		orl	%ecx, %ebx
 19739 7745 09C3     		orl	%eax, %ebx
 19740              	.LVL1477:
4995:src/vm3.c     ****   if (op1 == 0x0) {
 19741              		.loc 1 4995 0
 19742 7747 89D9     		movl	%ebx, %ecx
4997:src/vm3.c     ****     op1 = op1 + funct;
 19743              		.loc 1 4997 0
 19744 7749 88D8     		movb	%bl, %al
4995:src/vm3.c     ****   if (op1 == 0x0) {
 19745              		.loc 1 4995 0
 19746 774b C1E91A   		shrl	$26, %ecx
 19747              	.LVL1478:
4997:src/vm3.c     ****     op1 = op1 + funct;
 19748              		.loc 1 4997 0
 19749 774e 83E03F   		andl	$63, %eax
 19750 7751 8D712B   		leal	43(%rcx), %esi
 19751 7754 84C9     		testb	%cl, %cl
 19752 7756 0F45C6   		cmovne	%esi, %eax
 19753              	.LVL1479:
5004:src/vm3.c     **** 
 19754              		.loc 1 5004 0
 19755 7759 0FB6C0   		movzbl	%al, %eax
 19756 775c 48C1E004 		salq	$4, %rax
 19757              	.LVL1480:
 19758 7760 48038414 		addq	58088(%rsp,%rdx), %rax
 19758      E8E20000 
 19759 7768 488B08   		movq	(%rax), %rcx
 19760 776b E9E895FF 		jmp	.L269
 19760      FF
 19761              	.LVL1481:
 19762              	.L142:
5012:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 19763              		.loc 1 5012 0
 19764 7770 4489C2   		movl	%r8d, %edx
5013:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 19765              		.loc 1 5013 0
 19766 7773 4489C0   		movl	%r8d, %eax
5015:src/vm3.c     **** PC  =  nPC;
 19767              		.loc 1 5015 0
 19768 7776 450FBFC0 		movswl	%r8w, %r8d
 19769              	.LVL1482:
5012:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 19770              		.loc 1 5012 0
 19771 777a C1EA15   		shrl	$21, %edx
5013:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 19772              		.loc 1 5013 0
 19773 777d C1E810   		shrl	$16, %eax
 19774              	.LVL1483:
5024:src/vm3.c     **** nPC = address << 2;
 19775              		.loc 1 5024 0
 19776 7780 81E3FFFF 		andl	$67108863, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 759


 19776      FF03
 19777              	.LVL1484:
5015:src/vm3.c     **** PC  =  nPC;
 19778              		.loc 1 5015 0
 19779 7786 83E21F   		andl	$31, %edx
 19780 7789 83E01F   		andl	$31, %eax
 19781 778c 44030495 		addl	RF(,%rdx,4), %r8d
 19781      00000000 
 19782              	.LVL1485:
5017:src/vm3.c     **** 
 19783              		.loc 1 5017 0
 19784 7794 8B150000 		movl	nPC(%rip), %edx
 19784      0000
 19785 779a 8D4A04   		leal	4(%rdx), %ecx
5026:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19786              		.loc 1 5026 0
 19787 779d 8D7207   		leal	7(%rdx), %esi
5015:src/vm3.c     **** PC  =  nPC;
 19788              		.loc 1 5015 0
 19789 77a0 44890485 		movl	%r8d, RF(,%rax,4)
 19789      00000000 
5025:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19790              		.loc 1 5025 0
 19791 77a8 8D049D00 		leal	0(,%rbx,4), %eax
 19791      000000
5023:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 19792              		.loc 1 5023 0
 19793 77af 890D0000 		movl	%ecx, PC(%rip)
 19793      0000
5026:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19794              		.loc 1 5026 0
 19795 77b5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19795      000000
 19796 77bc 440FB686 		movzbl	VM_memory(%rsi), %r8d
 19796      00000000 
5025:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19797              		.loc 1 5025 0
 19798 77c4 89050000 		movl	%eax, nPC(%rip)
 19798      0000
5026:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19799              		.loc 1 5026 0
 19800 77ca C1E118   		sall	$24, %ecx
 19801 77cd 4109C8   		orl	%ecx, %r8d
 19802 77d0 8D4A05   		leal	5(%rdx), %ecx
 19803 77d3 83C206   		addl	$6, %edx
 19804 77d6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19804      000000
 19805 77dd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19805      000000
 19806 77e4 C1E208   		sall	$8, %edx
 19807 77e7 C1E110   		sall	$16, %ecx
 19808 77ea 4109C8   		orl	%ecx, %r8d
 19809 77ed 4109D0   		orl	%edx, %r8d
 19810              	.LVL1486:
5027:src/vm3.c     ****   if (op0 == 0x0) {
 19811              		.loc 1 5027 0
 19812 77f0 4489C1   		movl	%r8d, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 760


5029:src/vm3.c     ****     op0 = op0 + funct;
 19813              		.loc 1 5029 0
 19814 77f3 4488C2   		movb	%r8b, %dl
5027:src/vm3.c     ****   if (op0 == 0x0) {
 19815              		.loc 1 5027 0
 19816 77f6 C1E91A   		shrl	$26, %ecx
 19817              	.LVL1487:
5029:src/vm3.c     ****     op0 = op0 + funct;
 19818              		.loc 1 5029 0
 19819 77f9 83E23F   		andl	$63, %edx
 19820 77fc 8D712B   		leal	43(%rcx), %esi
 19821 77ff 84C9     		testb	%cl, %cl
5039:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19822              		.loc 1 5039 0
 19823 7801 8D4803   		leal	3(%rax), %ecx
 19824              	.LVL1488:
 19825 7804 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19825      000000
 19826 780b 89C1     		movl	%eax, %ecx
5029:src/vm3.c     ****     op0 = op0 + funct;
 19827              		.loc 1 5029 0
 19828 780d 0F45D6   		cmovne	%esi, %edx
 19829              	.LVL1489:
5039:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19830              		.loc 1 5039 0
 19831 7810 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19831      000000
5037:src/vm3.c     **** 
 19832              		.loc 1 5037 0
 19833 7817 0FB6D2   		movzbl	%dl, %edx
 19834 781a 48C1E204 		salq	$4, %rdx
 19835              	.LVL1490:
5039:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19836              		.loc 1 5039 0
 19837 781e C1E118   		sall	$24, %ecx
 19838 7821 09CB     		orl	%ecx, %ebx
 19839 7823 8D4801   		leal	1(%rax), %ecx
 19840 7826 83C002   		addl	$2, %eax
 19841 7829 0FB68000 		movzbl	VM_memory(%rax), %eax
 19841      000000
 19842 7830 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19842      000000
 19843 7837 C1E008   		sall	$8, %eax
 19844 783a C1E110   		sall	$16, %ecx
 19845 783d 09CB     		orl	%ecx, %ebx
 19846 783f 09C3     		orl	%eax, %ebx
 19847              	.LVL1491:
5040:src/vm3.c     ****   if (op1 == 0x0) {
 19848              		.loc 1 5040 0
 19849 7841 89D9     		movl	%ebx, %ecx
5042:src/vm3.c     ****     op1 = op1 + funct;
 19850              		.loc 1 5042 0
 19851 7843 88D8     		movb	%bl, %al
5040:src/vm3.c     ****   if (op1 == 0x0) {
 19852              		.loc 1 5040 0
 19853 7845 C1E91A   		shrl	$26, %ecx
 19854              	.LVL1492:
GAS LISTING /tmp/cc15eBE3.s 			page 761


5042:src/vm3.c     ****     op1 = op1 + funct;
 19855              		.loc 1 5042 0
 19856 7848 83E03F   		andl	$63, %eax
 19857 784b 8D712B   		leal	43(%rcx), %esi
 19858 784e 84C9     		testb	%cl, %cl
 19859 7850 0F45C6   		cmovne	%esi, %eax
 19860              	.LVL1493:
5049:src/vm3.c     **** 
 19861              		.loc 1 5049 0
 19862 7853 0FB6C0   		movzbl	%al, %eax
 19863 7856 48C1E004 		salq	$4, %rax
 19864              	.LVL1494:
 19865 785a 48038414 		addq	58088(%rsp,%rdx), %rax
 19865      E8E20000 
 19866 7862 488B08   		movq	(%rax), %rcx
 19867 7865 E9EE94FF 		jmp	.L269
 19867      FF
 19868              	.LVL1495:
 19869              	.L85:
5084:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 19870              		.loc 1 5084 0
 19871 786a 4489C0   		movl	%r8d, %eax
5085:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 19872              		.loc 1 5085 0
 19873 786d 4489C2   		movl	%r8d, %edx
5083:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 19874              		.loc 1 5083 0
 19875 7870 41C1E815 		shrl	$21, %r8d
 19876              	.LVL1496:
5084:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 19877              		.loc 1 5084 0
 19878 7874 C1E810   		shrl	$16, %eax
 19879              	.LVL1497:
5086:src/vm3.c     **** PC  =  nPC;
 19880              		.loc 1 5086 0
 19881 7877 4183E01F 		andl	$31, %r8d
5085:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 19882              		.loc 1 5085 0
 19883 787b C1EA0B   		shrl	$11, %edx
 19884              	.LVL1498:
5086:src/vm3.c     **** PC  =  nPC;
 19885              		.loc 1 5086 0
 19886 787e 83E01F   		andl	$31, %eax
 19887 7881 83E21F   		andl	$31, %edx
5088:src/vm3.c     **** 
 19888              		.loc 1 5088 0
 19889 7884 83050000 		addl	$4, nPC(%rip)
 19889      000004
 19890              	.LVL1499:
5086:src/vm3.c     **** PC  =  nPC;
 19891              		.loc 1 5086 0
 19892 788b 8B048500 		movl	RF(,%rax,4), %eax
 19892      000000
 19893 7892 42330485 		xorl	RF(,%r8,4), %eax
 19893      00000000 
 19894 789a 89049500 		movl	%eax, RF(,%rdx,4)
 19894      000000
GAS LISTING /tmp/cc15eBE3.s 			page 762


5094:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19895              		.loc 1 5094 0
 19896 78a1 89DA     		movl	%ebx, %edx
5095:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 19897              		.loc 1 5095 0
 19898 78a3 89D8     		movl	%ebx, %eax
5094:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 19899              		.loc 1 5094 0
 19900 78a5 C1EA15   		shrl	$21, %edx
5097:src/vm3.c     **** PC  =  nPC;
 19901              		.loc 1 5097 0
 19902 78a8 0FBFDB   		movswl	%bx, %ebx
 19903              	.LVL1500:
5095:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 19904              		.loc 1 5095 0
 19905 78ab C1E810   		shrl	$16, %eax
 19906              	.LVL1501:
5097:src/vm3.c     **** PC  =  nPC;
 19907              		.loc 1 5097 0
 19908 78ae 83E21F   		andl	$31, %edx
 19909 78b1 83E01F   		andl	$31, %eax
 19910 78b4 231C9500 		andl	RF(,%rdx,4), %ebx
 19910      000000
 19911              	.LVL1502:
 19912 78bb 891C8500 		movl	%ebx, RF(,%rax,4)
 19912      000000
5098:src/vm3.c     **** nPC  += 4;
 19913              		.loc 1 5098 0
 19914 78c2 8B050000 		movl	nPC(%rip), %eax
 19914      0000
5100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19915              		.loc 1 5100 0
 19916 78c8 8D5003   		leal	3(%rax), %edx
5099:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19917              		.loc 1 5099 0
 19918 78cb 8D4804   		leal	4(%rax), %ecx
5098:src/vm3.c     **** nPC  += 4;
 19919              		.loc 1 5098 0
 19920 78ce 89050000 		movl	%eax, PC(%rip)
 19920      0000
5100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19921              		.loc 1 5100 0
 19922 78d4 440FB682 		movzbl	VM_memory(%rdx), %r8d
 19922      00000000 
 19923 78dc 89C2     		movl	%eax, %edx
5113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19924              		.loc 1 5113 0
 19925 78de 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 19925      000000
5100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19926              		.loc 1 5100 0
 19927 78e5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19927      000000
5099:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 19928              		.loc 1 5099 0
 19929 78ec 890D0000 		movl	%ecx, nPC(%rip)
 19929      0000
GAS LISTING /tmp/cc15eBE3.s 			page 763


5113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19930              		.loc 1 5113 0
 19931 78f2 8D4805   		leal	5(%rax), %ecx
 19932 78f5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19932      000000
5100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 19933              		.loc 1 5100 0
 19934 78fc C1E218   		sall	$24, %edx
 19935 78ff 4109D0   		orl	%edx, %r8d
 19936 7902 8D5001   		leal	1(%rax), %edx
 19937 7905 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19937      000000
 19938 790c C1E210   		sall	$16, %edx
 19939 790f 4109D0   		orl	%edx, %r8d
 19940 7912 8D5002   		leal	2(%rax), %edx
 19941 7915 0FB69200 		movzbl	VM_memory(%rdx), %edx
 19941      000000
 19942 791c C1E208   		sall	$8, %edx
 19943 791f 4109D0   		orl	%edx, %r8d
 19944              	.LVL1503:
5101:src/vm3.c     ****   if (op0 == 0x0) {
 19945              		.loc 1 5101 0
 19946 7922 4489C6   		movl	%r8d, %esi
5103:src/vm3.c     ****     op0 = op0 + funct;
 19947              		.loc 1 5103 0
 19948 7925 4488C2   		movb	%r8b, %dl
5101:src/vm3.c     ****   if (op0 == 0x0) {
 19949              		.loc 1 5101 0
 19950 7928 C1EE1A   		shrl	$26, %esi
 19951              	.LVL1504:
5103:src/vm3.c     ****     op0 = op0 + funct;
 19952              		.loc 1 5103 0
 19953 792b 83E23F   		andl	$63, %edx
 19954 792e 8D7E2B   		leal	43(%rsi), %edi
 19955 7931 4084F6   		testb	%sil, %sil
 19956 7934 0F45D7   		cmovne	%edi, %edx
 19957              	.LVL1505:
5113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19958              		.loc 1 5113 0
 19959 7937 C1E110   		sall	$16, %ecx
 19960 793a C1E318   		sall	$24, %ebx
 19961 793d 09CB     		orl	%ecx, %ebx
 19962 793f 8D4807   		leal	7(%rax), %ecx
 19963 7942 83C006   		addl	$6, %eax
 19964 7945 0FB68000 		movzbl	VM_memory(%rax), %eax
 19964      000000
5111:src/vm3.c     **** 
 19965              		.loc 1 5111 0
 19966 794c 0FB6D2   		movzbl	%dl, %edx
5113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19967              		.loc 1 5113 0
 19968 794f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 19968      000000
5111:src/vm3.c     **** 
 19969              		.loc 1 5111 0
 19970 7956 48C1E204 		salq	$4, %rdx
 19971              	.LVL1506:
GAS LISTING /tmp/cc15eBE3.s 			page 764


5113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 19972              		.loc 1 5113 0
 19973 795a C1E008   		sall	$8, %eax
 19974 795d 09CB     		orl	%ecx, %ebx
 19975 795f 09C3     		orl	%eax, %ebx
 19976              	.LVL1507:
5114:src/vm3.c     ****   if (op1 == 0x0) {
 19977              		.loc 1 5114 0
 19978 7961 89D9     		movl	%ebx, %ecx
5116:src/vm3.c     ****     op1 = op1 + funct;
 19979              		.loc 1 5116 0
 19980 7963 88D8     		movb	%bl, %al
5114:src/vm3.c     ****   if (op1 == 0x0) {
 19981              		.loc 1 5114 0
 19982 7965 C1E91A   		shrl	$26, %ecx
 19983              	.LVL1508:
5116:src/vm3.c     ****     op1 = op1 + funct;
 19984              		.loc 1 5116 0
 19985 7968 83E03F   		andl	$63, %eax
 19986 796b 8D712B   		leal	43(%rcx), %esi
 19987 796e 84C9     		testb	%cl, %cl
 19988 7970 0F45C6   		cmovne	%esi, %eax
 19989              	.LVL1509:
5123:src/vm3.c     **** 
 19990              		.loc 1 5123 0
 19991 7973 0FB6C0   		movzbl	%al, %eax
 19992 7976 48C1E004 		salq	$4, %rax
 19993              	.LVL1510:
 19994 797a 48038414 		addq	58088(%rsp,%rdx), %rax
 19994      E8E20000 
 19995 7982 488B08   		movq	(%rax), %rcx
 19996 7985 E9CE93FF 		jmp	.L269
 19996      FF
 19997              	.LVL1511:
 19998              	.L61:
5132:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 19999              		.loc 1 5132 0
 20000 798a 4489C0   		movl	%r8d, %eax
5133:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 20001              		.loc 1 5133 0
 20002 798d 4489C2   		movl	%r8d, %edx
5131:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20003              		.loc 1 5131 0
 20004 7990 41C1E815 		shrl	$21, %r8d
 20005              	.LVL1512:
5132:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 20006              		.loc 1 5132 0
 20007 7994 C1E810   		shrl	$16, %eax
 20008              	.LVL1513:
5134:src/vm3.c     **** PC  =  nPC;
 20009              		.loc 1 5134 0
 20010 7997 4183E01F 		andl	$31, %r8d
5133:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 20011              		.loc 1 5133 0
 20012 799b C1EA0B   		shrl	$11, %edx
 20013              	.LVL1514:
5134:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 765


 20014              		.loc 1 5134 0
 20015 799e 83E01F   		andl	$31, %eax
5142:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20016              		.loc 1 5142 0
 20017 79a1 89DE     		movl	%ebx, %esi
5143:src/vm3.c     **** if (RF[rs] != RF[rt])
 20018              		.loc 1 5143 0
 20019 79a3 89D9     		movl	%ebx, %ecx
5134:src/vm3.c     **** PC  =  nPC;
 20020              		.loc 1 5134 0
 20021 79a5 8B048500 		movl	RF(,%rax,4), %eax
 20021      000000
 20022 79ac 42030485 		addl	RF(,%r8,4), %eax
 20022      00000000 
 20023 79b4 83E21F   		andl	$31, %edx
5142:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20024              		.loc 1 5142 0
 20025 79b7 C1EE15   		shrl	$21, %esi
5143:src/vm3.c     **** if (RF[rs] != RF[rt])
 20026              		.loc 1 5143 0
 20027 79ba C1E910   		shrl	$16, %ecx
5144:src/vm3.c     **** {
 20028              		.loc 1 5144 0
 20029 79bd 83E61F   		andl	$31, %esi
 20030 79c0 83E11F   		andl	$31, %ecx
5134:src/vm3.c     **** PC  =  nPC;
 20031              		.loc 1 5134 0
 20032 79c3 89049500 		movl	%eax, RF(,%rdx,4)
 20032      000000
5135:src/vm3.c     **** nPC  += 4;
 20033              		.loc 1 5135 0
 20034 79ca 8B050000 		movl	nPC(%rip), %eax
 20034      0000
5144:src/vm3.c     **** {
 20035              		.loc 1 5144 0
 20036 79d0 8B3C8D00 		movl	RF(,%rcx,4), %edi
 20036      000000
 20037 79d7 393CB500 		cmpl	%edi, RF(,%rsi,4)
 20037      000000
5136:src/vm3.c     **** 
 20038              		.loc 1 5136 0
 20039 79de 8D5004   		leal	4(%rax), %edx
 20040              	.LVL1515:
 20041 79e1 448D4007 		leal	7(%rax), %r8d
 20042 79e5 8D7805   		leal	5(%rax), %edi
 20043 79e8 8D7006   		leal	6(%rax), %esi
 20044 79eb 4189D1   		movl	%edx, %r9d
5147:src/vm3.c     ****   nPC  += (immediate << 2);
 20045              		.loc 1 5147 0
 20046 79ee 89150000 		movl	%edx, PC(%rip)
 20046      0000
5144:src/vm3.c     **** {
 20047              		.loc 1 5144 0
 20048 79f4 0F84B600 		je	.L737
 20048      0000
 20049              	.LVL1516:
5148:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 766


 20050              		.loc 1 5148 0
 20051 79fa 0FBFDB   		movswl	%bx, %ebx
 20052              	.LVL1517:
5149:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20053              		.loc 1 5149 0
 20054 79fd 450FB680 		movzbl	VM_memory(%r8), %r8d
 20054      00000000 
5148:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 20055              		.loc 1 5148 0
 20056 7a05 8D049A   		leal	(%rdx,%rbx,4), %eax
5149:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20057              		.loc 1 5149 0
 20058 7a08 410FB691 		movzbl	VM_memory(%r9), %edx
 20058      00000000 
5148:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 20059              		.loc 1 5148 0
 20060 7a10 89050000 		movl	%eax, nPC(%rip)
 20060      0000
5149:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20061              		.loc 1 5149 0
 20062 7a16 C1E218   		sall	$24, %edx
 20063 7a19 4109D0   		orl	%edx, %r8d
 20064 7a1c 0FB69700 		movzbl	VM_memory(%rdi), %edx
 20064      000000
 20065 7a23 C1E210   		sall	$16, %edx
 20066 7a26 4109D0   		orl	%edx, %r8d
 20067 7a29 0FB69600 		movzbl	VM_memory(%rsi), %edx
 20067      000000
 20068 7a30 C1E208   		sall	$8, %edx
 20069 7a33 4109D0   		orl	%edx, %r8d
 20070              	.LVL1518:
5150:src/vm3.c     ****   if (op0 == 0x0) {
 20071              		.loc 1 5150 0
 20072 7a36 4489C1   		movl	%r8d, %ecx
5152:src/vm3.c     ****     op0 = op0 + funct;
 20073              		.loc 1 5152 0
 20074 7a39 4488C2   		movb	%r8b, %dl
5150:src/vm3.c     ****   if (op0 == 0x0) {
 20075              		.loc 1 5150 0
 20076 7a3c C1E91A   		shrl	$26, %ecx
 20077              	.LVL1519:
5152:src/vm3.c     ****     op0 = op0 + funct;
 20078              		.loc 1 5152 0
 20079 7a3f 83E23F   		andl	$63, %edx
 20080 7a42 8D712B   		leal	43(%rcx), %esi
 20081 7a45 84C9     		testb	%cl, %cl
5162:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20082              		.loc 1 5162 0
 20083 7a47 8D4803   		leal	3(%rax), %ecx
 20084              	.LVL1520:
 20085 7a4a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20085      000000
 20086              	.LVL1521:
 20087 7a51 89C1     		movl	%eax, %ecx
5152:src/vm3.c     ****     op0 = op0 + funct;
 20088              		.loc 1 5152 0
 20089 7a53 0F45D6   		cmovne	%esi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 767


 20090              	.LVL1522:
5162:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20091              		.loc 1 5162 0
 20092 7a56 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20092      000000
5160:src/vm3.c     **** 
 20093              		.loc 1 5160 0
 20094 7a5d 0FB6D2   		movzbl	%dl, %edx
 20095 7a60 48C1E204 		salq	$4, %rdx
 20096              	.LVL1523:
5162:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20097              		.loc 1 5162 0
 20098 7a64 C1E118   		sall	$24, %ecx
 20099 7a67 09CB     		orl	%ecx, %ebx
 20100 7a69 8D4801   		leal	1(%rax), %ecx
 20101 7a6c 83C002   		addl	$2, %eax
 20102 7a6f 0FB68000 		movzbl	VM_memory(%rax), %eax
 20102      000000
 20103 7a76 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20103      000000
 20104 7a7d C1E008   		sall	$8, %eax
 20105 7a80 C1E110   		sall	$16, %ecx
 20106 7a83 09CB     		orl	%ecx, %ebx
 20107 7a85 09C3     		orl	%eax, %ebx
 20108              	.LVL1524:
5163:src/vm3.c     ****   if (op1 == 0x0) {
 20109              		.loc 1 5163 0
 20110 7a87 89D9     		movl	%ebx, %ecx
5165:src/vm3.c     ****     op1 = op1 + funct;
 20111              		.loc 1 5165 0
 20112 7a89 88D8     		movb	%bl, %al
5163:src/vm3.c     ****   if (op1 == 0x0) {
 20113              		.loc 1 5163 0
 20114 7a8b C1E91A   		shrl	$26, %ecx
 20115              	.LVL1525:
5165:src/vm3.c     ****     op1 = op1 + funct;
 20116              		.loc 1 5165 0
 20117 7a8e 83E03F   		andl	$63, %eax
 20118 7a91 8D712B   		leal	43(%rcx), %esi
 20119 7a94 84C9     		testb	%cl, %cl
 20120 7a96 0F45C6   		cmovne	%esi, %eax
 20121              	.LVL1526:
5172:src/vm3.c     **** 
 20122              		.loc 1 5172 0
 20123 7a99 0FB6C0   		movzbl	%al, %eax
 20124 7a9c 48C1E004 		salq	$4, %rax
 20125              	.LVL1527:
 20126 7aa0 48038414 		addq	58088(%rsp,%rdx), %rax
 20126      E8E20000 
 20127 7aa8 488B08   		movq	(%rax), %rcx
 20128 7aab E9A892FF 		jmp	.L269
 20128      FF
 20129              	.LVL1528:
 20130              	.L737:
5181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20131              		.loc 1 5181 0
 20132 7ab0 410FB691 		movzbl	VM_memory(%r9), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 768


 20132      00000000 
 20133 7ab8 450FB680 		movzbl	VM_memory(%r8), %r8d
 20133      00000000 
5179:src/vm3.c     **** }
 20134              		.loc 1 5179 0
 20135 7ac0 8D4808   		leal	8(%rax), %ecx
5194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20136              		.loc 1 5194 0
 20137 7ac3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20137      000000
 20138              	.LVL1529:
5179:src/vm3.c     **** }
 20139              		.loc 1 5179 0
 20140 7aca 890D0000 		movl	%ecx, nPC(%rip)
 20140      0000
5194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20141              		.loc 1 5194 0
 20142 7ad0 8D4809   		leal	9(%rax), %ecx
5181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20143              		.loc 1 5181 0
 20144 7ad3 C1E218   		sall	$24, %edx
5194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20145              		.loc 1 5194 0
 20146 7ad6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20146      000000
5181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20147              		.loc 1 5181 0
 20148 7add 4109D0   		orl	%edx, %r8d
 20149 7ae0 0FB69700 		movzbl	VM_memory(%rdi), %edx
 20149      000000
 20150 7ae7 C1E210   		sall	$16, %edx
 20151 7aea 4109D0   		orl	%edx, %r8d
 20152 7aed 0FB69600 		movzbl	VM_memory(%rsi), %edx
 20152      000000
 20153 7af4 C1E208   		sall	$8, %edx
 20154 7af7 4109D0   		orl	%edx, %r8d
 20155              	.LVL1530:
5182:src/vm3.c     ****   if (op0 == 0x0) {
 20156              		.loc 1 5182 0
 20157 7afa 4489C6   		movl	%r8d, %esi
5184:src/vm3.c     ****     op0 = op0 + funct;
 20158              		.loc 1 5184 0
 20159 7afd 4488C2   		movb	%r8b, %dl
5182:src/vm3.c     ****   if (op0 == 0x0) {
 20160              		.loc 1 5182 0
 20161 7b00 C1EE1A   		shrl	$26, %esi
 20162              	.LVL1531:
5184:src/vm3.c     ****     op0 = op0 + funct;
 20163              		.loc 1 5184 0
 20164 7b03 83E23F   		andl	$63, %edx
 20165 7b06 8D7E2B   		leal	43(%rsi), %edi
 20166 7b09 4084F6   		testb	%sil, %sil
 20167 7b0c 0F45D7   		cmovne	%edi, %edx
 20168              	.LVL1532:
5194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20169              		.loc 1 5194 0
 20170 7b0f C1E110   		sall	$16, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 769


 20171 7b12 C1E318   		sall	$24, %ebx
 20172 7b15 09CB     		orl	%ecx, %ebx
 20173 7b17 8D480B   		leal	11(%rax), %ecx
 20174 7b1a 83C00A   		addl	$10, %eax
 20175 7b1d 0FB68000 		movzbl	VM_memory(%rax), %eax
 20175      000000
5192:src/vm3.c     **** 
 20176              		.loc 1 5192 0
 20177 7b24 0FB6D2   		movzbl	%dl, %edx
5194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20178              		.loc 1 5194 0
 20179 7b27 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20179      000000
5192:src/vm3.c     **** 
 20180              		.loc 1 5192 0
 20181 7b2e 48C1E204 		salq	$4, %rdx
 20182              	.LVL1533:
5194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20183              		.loc 1 5194 0
 20184 7b32 C1E008   		sall	$8, %eax
 20185 7b35 09CB     		orl	%ecx, %ebx
 20186 7b37 09C3     		orl	%eax, %ebx
 20187              	.LVL1534:
5195:src/vm3.c     ****   if (op1 == 0x0) {
 20188              		.loc 1 5195 0
 20189 7b39 89D9     		movl	%ebx, %ecx
5197:src/vm3.c     ****     op1 = op1 + funct;
 20190              		.loc 1 5197 0
 20191 7b3b 88D8     		movb	%bl, %al
5195:src/vm3.c     ****   if (op1 == 0x0) {
 20192              		.loc 1 5195 0
 20193 7b3d C1E91A   		shrl	$26, %ecx
 20194              	.LVL1535:
5197:src/vm3.c     ****     op1 = op1 + funct;
 20195              		.loc 1 5197 0
 20196 7b40 83E03F   		andl	$63, %eax
 20197 7b43 8D712B   		leal	43(%rcx), %esi
 20198 7b46 84C9     		testb	%cl, %cl
 20199 7b48 0F45C6   		cmovne	%esi, %eax
 20200              	.LVL1536:
5204:src/vm3.c     **** 
 20201              		.loc 1 5204 0
 20202 7b4b 0FB6C0   		movzbl	%al, %eax
 20203 7b4e 48C1E004 		salq	$4, %rax
 20204              	.LVL1537:
 20205 7b52 48038414 		addq	58088(%rsp,%rdx), %rax
 20205      E8E20000 
 20206 7b5a 488B08   		movq	(%rax), %rcx
 20207 7b5d E9F691FF 		jmp	.L269
 20207      FF
 20208              	.LVL1538:
 20209              	.L164:
5218:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20210              		.loc 1 5218 0
 20211 7b62 89D8     		movl	%ebx, %eax
5221:src/vm3.c     **** PC  =  nPC;
 20212              		.loc 1 5221 0
GAS LISTING /tmp/cc15eBE3.s 			page 770


 20213 7b64 0FBFD3   		movswl	%bx, %edx
5219:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 20214              		.loc 1 5219 0
 20215 7b67 C1EB10   		shrl	$16, %ebx
 20216              	.LVL1539:
5218:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20217              		.loc 1 5218 0
 20218 7b6a C1E815   		shrl	$21, %eax
 20219              	.LVL1540:
5212:src/vm3.c     **** 
 20220              		.loc 1 5212 0
 20221 7b6d 83050000 		addl	$4, nPC(%rip)
 20221      000004
5221:src/vm3.c     **** PC  =  nPC;
 20222              		.loc 1 5221 0
 20223 7b74 83E31F   		andl	$31, %ebx
 20224 7b77 83E01F   		andl	$31, %eax
 20225 7b7a 03148500 		addl	RF(,%rax,4), %edx
 20225      000000
 20226 7b81 8D4203   		leal	3(%rdx), %eax
 20227 7b84 89D1     		movl	%edx, %ecx
 20228 7b86 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20228      000000
 20229 7b8d 0FB68000 		movzbl	VM_memory(%rax), %eax
 20229      000000
 20230 7b94 C1E118   		sall	$24, %ecx
 20231 7b97 09C8     		orl	%ecx, %eax
 20232 7b99 8D4A01   		leal	1(%rdx), %ecx
 20233 7b9c 83C202   		addl	$2, %edx
 20234 7b9f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20234      000000
 20235 7ba6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20235      000000
 20236 7bad C1E208   		sall	$8, %edx
 20237 7bb0 C1E110   		sall	$16, %ecx
 20238 7bb3 09C8     		orl	%ecx, %eax
 20239 7bb5 09D0     		orl	%edx, %eax
 20240 7bb7 89049D00 		movl	%eax, RF(,%rbx,4)
 20240      000000
5222:src/vm3.c     **** nPC  += 4;
 20241              		.loc 1 5222 0
 20242 7bbe 8B050000 		movl	nPC(%rip), %eax
 20242      0000
5224:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20243              		.loc 1 5224 0
 20244 7bc4 8D5003   		leal	3(%rax), %edx
5223:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20245              		.loc 1 5223 0
 20246 7bc7 8D4804   		leal	4(%rax), %ecx
5222:src/vm3.c     **** nPC  += 4;
 20247              		.loc 1 5222 0
 20248 7bca 89050000 		movl	%eax, PC(%rip)
 20248      0000
5224:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20249              		.loc 1 5224 0
 20250 7bd0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 20250      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 771


 20251              	.LVL1541:
 20252 7bd8 89C2     		movl	%eax, %edx
5237:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20253              		.loc 1 5237 0
 20254 7bda 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20254      000000
5224:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20255              		.loc 1 5224 0
 20256 7be1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20256      000000
5223:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20257              		.loc 1 5223 0
 20258 7be8 890D0000 		movl	%ecx, nPC(%rip)
 20258      0000
5237:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20259              		.loc 1 5237 0
 20260 7bee 8D4805   		leal	5(%rax), %ecx
 20261 7bf1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20261      000000
5224:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20262              		.loc 1 5224 0
 20263 7bf8 C1E218   		sall	$24, %edx
 20264 7bfb 4109D0   		orl	%edx, %r8d
 20265 7bfe 8D5001   		leal	1(%rax), %edx
 20266 7c01 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20266      000000
 20267 7c08 C1E210   		sall	$16, %edx
 20268 7c0b 4109D0   		orl	%edx, %r8d
 20269 7c0e 8D5002   		leal	2(%rax), %edx
 20270 7c11 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20270      000000
 20271 7c18 C1E208   		sall	$8, %edx
 20272 7c1b 4109D0   		orl	%edx, %r8d
 20273              	.LVL1542:
5225:src/vm3.c     ****   if (op0 == 0x0) {
 20274              		.loc 1 5225 0
 20275 7c1e 4489C6   		movl	%r8d, %esi
5227:src/vm3.c     ****     op0 = op0 + funct;
 20276              		.loc 1 5227 0
 20277 7c21 4488C2   		movb	%r8b, %dl
5225:src/vm3.c     ****   if (op0 == 0x0) {
 20278              		.loc 1 5225 0
 20279 7c24 C1EE1A   		shrl	$26, %esi
 20280              	.LVL1543:
5227:src/vm3.c     ****     op0 = op0 + funct;
 20281              		.loc 1 5227 0
 20282 7c27 83E23F   		andl	$63, %edx
 20283 7c2a 8D7E2B   		leal	43(%rsi), %edi
 20284 7c2d 4084F6   		testb	%sil, %sil
 20285 7c30 0F45D7   		cmovne	%edi, %edx
 20286              	.LVL1544:
5237:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20287              		.loc 1 5237 0
 20288 7c33 C1E110   		sall	$16, %ecx
 20289 7c36 C1E318   		sall	$24, %ebx
 20290 7c39 09CB     		orl	%ecx, %ebx
 20291 7c3b 8D4807   		leal	7(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 772


 20292 7c3e 83C006   		addl	$6, %eax
 20293 7c41 0FB68000 		movzbl	VM_memory(%rax), %eax
 20293      000000
5235:src/vm3.c     **** 
 20294              		.loc 1 5235 0
 20295 7c48 0FB6D2   		movzbl	%dl, %edx
5237:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20296              		.loc 1 5237 0
 20297 7c4b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20297      000000
5235:src/vm3.c     **** 
 20298              		.loc 1 5235 0
 20299 7c52 48C1E204 		salq	$4, %rdx
 20300              	.LVL1545:
5237:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20301              		.loc 1 5237 0
 20302 7c56 C1E008   		sall	$8, %eax
 20303 7c59 09CB     		orl	%ecx, %ebx
 20304 7c5b 09C3     		orl	%eax, %ebx
 20305              	.LVL1546:
5238:src/vm3.c     ****   if (op1 == 0x0) {
 20306              		.loc 1 5238 0
 20307 7c5d 89D9     		movl	%ebx, %ecx
5240:src/vm3.c     ****     op1 = op1 + funct;
 20308              		.loc 1 5240 0
 20309 7c5f 88D8     		movb	%bl, %al
5238:src/vm3.c     ****   if (op1 == 0x0) {
 20310              		.loc 1 5238 0
 20311 7c61 C1E91A   		shrl	$26, %ecx
 20312              	.LVL1547:
5240:src/vm3.c     ****     op1 = op1 + funct;
 20313              		.loc 1 5240 0
 20314 7c64 83E03F   		andl	$63, %eax
 20315 7c67 8D712B   		leal	43(%rcx), %esi
 20316 7c6a 84C9     		testb	%cl, %cl
 20317 7c6c 0F45C6   		cmovne	%esi, %eax
 20318              	.LVL1548:
5247:src/vm3.c     **** 
 20319              		.loc 1 5247 0
 20320 7c6f 0FB6C0   		movzbl	%al, %eax
 20321 7c72 48C1E004 		salq	$4, %rax
 20322              	.LVL1549:
 20323 7c76 48038414 		addq	58088(%rsp,%rdx), %rax
 20323      E8E20000 
 20324 7c7e 488B08   		movq	(%rax), %rcx
 20325 7c81 E9D290FF 		jmp	.L269
 20325      FF
 20326              	.LVL1550:
 20327              	.L169:
5255:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20328              		.loc 1 5255 0
 20329 7c86 4489C2   		movl	%r8d, %edx
5256:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 20330              		.loc 1 5256 0
 20331 7c89 4489C0   		movl	%r8d, %eax
5258:src/vm3.c     **** PC  =  nPC;
 20332              		.loc 1 5258 0
GAS LISTING /tmp/cc15eBE3.s 			page 773


 20333 7c8c 450FBFC0 		movswl	%r8w, %r8d
 20334              	.LVL1551:
5255:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20335              		.loc 1 5255 0
 20336 7c90 C1EA15   		shrl	$21, %edx
5256:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 20337              		.loc 1 5256 0
 20338 7c93 C1E810   		shrl	$16, %eax
 20339              	.LVL1552:
5258:src/vm3.c     **** PC  =  nPC;
 20340              		.loc 1 5258 0
 20341 7c96 83E21F   		andl	$31, %edx
 20342 7c99 83E01F   		andl	$31, %eax
 20343 7c9c 44390495 		cmpl	%r8d, RF(,%rdx,4)
 20343      00000000 
 20344 7ca4 0F92C2   		setb	%dl
5260:src/vm3.c     **** 
 20345              		.loc 1 5260 0
 20346 7ca7 83050000 		addl	$4, nPC(%rip)
 20346      000004
 20347              	.LVL1553:
5258:src/vm3.c     **** PC  =  nPC;
 20348              		.loc 1 5258 0
 20349 7cae 0FB6D2   		movzbl	%dl, %edx
 20350 7cb1 89148500 		movl	%edx, RF(,%rax,4)
 20350      000000
5268:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 20351              		.loc 1 5268 0
 20352 7cb8 89D8     		movl	%ebx, %eax
 20353 7cba C1E810   		shrl	$16, %eax
5270:src/vm3.c     **** PC  =  nPC;
 20354              		.loc 1 5270 0
 20355 7cbd 83E01F   		andl	$31, %eax
 20356 7cc0 833C8500 		cmpl	$0, RF(,%rax,4)
 20356      00000000 
 20357 7cc8 741C     		je	.L750
5267:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20358              		.loc 1 5267 0 discriminator 1
 20359 7cca 89D8     		movl	%ebx, %eax
5269:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 20360              		.loc 1 5269 0 discriminator 1
 20361 7ccc C1EB0B   		shrl	$11, %ebx
 20362              	.LVL1554:
5267:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20363              		.loc 1 5267 0 discriminator 1
 20364 7ccf C1E815   		shrl	$21, %eax
 20365              	.LVL1555:
5270:src/vm3.c     **** PC  =  nPC;
 20366              		.loc 1 5270 0 discriminator 1
 20367 7cd2 83E31F   		andl	$31, %ebx
 20368              	.LVL1556:
 20369 7cd5 83E01F   		andl	$31, %eax
 20370              	.LVL1557:
 20371 7cd8 8B048500 		movl	RF(,%rax,4), %eax
 20371      000000
 20372 7cdf 89049D00 		movl	%eax, RF(,%rbx,4)
 20372      000000
GAS LISTING /tmp/cc15eBE3.s 			page 774


 20373              	.L750:
5271:src/vm3.c     **** nPC  += 4;
 20374              		.loc 1 5271 0
 20375 7ce6 8B050000 		movl	nPC(%rip), %eax
 20375      0000
5273:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20376              		.loc 1 5273 0
 20377 7cec 8D5003   		leal	3(%rax), %edx
5272:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20378              		.loc 1 5272 0
 20379 7cef 8D4804   		leal	4(%rax), %ecx
5271:src/vm3.c     **** nPC  += 4;
 20380              		.loc 1 5271 0
 20381 7cf2 89050000 		movl	%eax, PC(%rip)
 20381      0000
5273:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20382              		.loc 1 5273 0
 20383 7cf8 440FB682 		movzbl	VM_memory(%rdx), %r8d
 20383      00000000 
 20384              	.LVL1558:
 20385 7d00 89C2     		movl	%eax, %edx
5286:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20386              		.loc 1 5286 0
 20387 7d02 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20387      000000
5273:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20388              		.loc 1 5273 0
 20389 7d09 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20389      000000
5272:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20390              		.loc 1 5272 0
 20391 7d10 890D0000 		movl	%ecx, nPC(%rip)
 20391      0000
5286:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20392              		.loc 1 5286 0
 20393 7d16 8D4805   		leal	5(%rax), %ecx
 20394 7d19 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20394      000000
5273:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20395              		.loc 1 5273 0
 20396 7d20 C1E218   		sall	$24, %edx
 20397 7d23 4109D0   		orl	%edx, %r8d
 20398 7d26 8D5001   		leal	1(%rax), %edx
 20399 7d29 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20399      000000
 20400 7d30 C1E210   		sall	$16, %edx
 20401 7d33 4109D0   		orl	%edx, %r8d
 20402 7d36 8D5002   		leal	2(%rax), %edx
 20403 7d39 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20403      000000
 20404 7d40 C1E208   		sall	$8, %edx
 20405 7d43 4109D0   		orl	%edx, %r8d
 20406              	.LVL1559:
5274:src/vm3.c     ****   if (op0 == 0x0) {
 20407              		.loc 1 5274 0
 20408 7d46 4489C6   		movl	%r8d, %esi
5276:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 775


 20409              		.loc 1 5276 0
 20410 7d49 4488C2   		movb	%r8b, %dl
5274:src/vm3.c     ****   if (op0 == 0x0) {
 20411              		.loc 1 5274 0
 20412 7d4c C1EE1A   		shrl	$26, %esi
 20413              	.LVL1560:
5276:src/vm3.c     ****     op0 = op0 + funct;
 20414              		.loc 1 5276 0
 20415 7d4f 83E23F   		andl	$63, %edx
 20416 7d52 8D7E2B   		leal	43(%rsi), %edi
 20417 7d55 4084F6   		testb	%sil, %sil
 20418 7d58 0F45D7   		cmovne	%edi, %edx
 20419              	.LVL1561:
5286:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20420              		.loc 1 5286 0
 20421 7d5b C1E110   		sall	$16, %ecx
 20422 7d5e C1E318   		sall	$24, %ebx
 20423 7d61 09CB     		orl	%ecx, %ebx
 20424 7d63 8D4807   		leal	7(%rax), %ecx
 20425 7d66 83C006   		addl	$6, %eax
 20426 7d69 0FB68000 		movzbl	VM_memory(%rax), %eax
 20426      000000
5284:src/vm3.c     **** 
 20427              		.loc 1 5284 0
 20428 7d70 0FB6D2   		movzbl	%dl, %edx
5286:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20429              		.loc 1 5286 0
 20430 7d73 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20430      000000
5284:src/vm3.c     **** 
 20431              		.loc 1 5284 0
 20432 7d7a 48C1E204 		salq	$4, %rdx
 20433              	.LVL1562:
5286:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20434              		.loc 1 5286 0
 20435 7d7e C1E008   		sall	$8, %eax
 20436 7d81 09CB     		orl	%ecx, %ebx
 20437 7d83 09C3     		orl	%eax, %ebx
 20438              	.LVL1563:
5287:src/vm3.c     ****   if (op1 == 0x0) {
 20439              		.loc 1 5287 0
 20440 7d85 89D9     		movl	%ebx, %ecx
5289:src/vm3.c     ****     op1 = op1 + funct;
 20441              		.loc 1 5289 0
 20442 7d87 88D8     		movb	%bl, %al
5287:src/vm3.c     ****   if (op1 == 0x0) {
 20443              		.loc 1 5287 0
 20444 7d89 C1E91A   		shrl	$26, %ecx
 20445              	.LVL1564:
5289:src/vm3.c     ****     op1 = op1 + funct;
 20446              		.loc 1 5289 0
 20447 7d8c 83E03F   		andl	$63, %eax
 20448 7d8f 8D712B   		leal	43(%rcx), %esi
 20449 7d92 84C9     		testb	%cl, %cl
 20450 7d94 0F45C6   		cmovne	%esi, %eax
 20451              	.LVL1565:
5296:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 776


 20452              		.loc 1 5296 0
 20453 7d97 0FB6C0   		movzbl	%al, %eax
 20454 7d9a 48C1E004 		salq	$4, %rax
 20455              	.LVL1566:
 20456 7d9e 48038414 		addq	58088(%rsp,%rdx), %rax
 20456      E8E20000 
 20457 7da6 488B08   		movq	(%rax), %rcx
 20458 7da9 E9AA8FFF 		jmp	.L269
 20458      FF
 20459              	.LVL1567:
 20460              	.L174:
5304:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20461              		.loc 1 5304 0
 20462 7dae 4489C2   		movl	%r8d, %edx
5305:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 20463              		.loc 1 5305 0
 20464 7db1 4489C0   		movl	%r8d, %eax
5307:src/vm3.c     **** PC  =  nPC;
 20465              		.loc 1 5307 0
 20466 7db4 450FBFC0 		movswl	%r8w, %r8d
 20467              	.LVL1568:
5304:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20468              		.loc 1 5304 0
 20469 7db8 C1EA15   		shrl	$21, %edx
5305:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 20470              		.loc 1 5305 0
 20471 7dbb C1E810   		shrl	$16, %eax
 20472              	.LVL1569:
5309:src/vm3.c     **** 
 20473              		.loc 1 5309 0
 20474 7dbe 83050000 		addl	$4, nPC(%rip)
 20474      000004
 20475              	.LVL1570:
5307:src/vm3.c     **** PC  =  nPC;
 20476              		.loc 1 5307 0
 20477 7dc5 83E21F   		andl	$31, %edx
 20478 7dc8 83E01F   		andl	$31, %eax
 20479 7dcb 44030495 		addl	RF(,%rdx,4), %r8d
 20479      00000000 
 20480              	.LVL1571:
 20481 7dd3 410FB690 		movzbl	VM_memory(%r8), %edx
 20481      00000000 
 20482 7ddb 89148500 		movl	%edx, RF(,%rax,4)
 20482      000000
5315:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20483              		.loc 1 5315 0
 20484 7de2 89D8     		movl	%ebx, %eax
5317:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 20485              		.loc 1 5317 0
 20486 7de4 89DA     		movl	%ebx, %edx
5315:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20487              		.loc 1 5315 0
 20488 7de6 C1E815   		shrl	$21, %eax
5316:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 20489              		.loc 1 5316 0
 20490 7de9 C1EB10   		shrl	$16, %ebx
 20491              	.LVL1572:
GAS LISTING /tmp/cc15eBE3.s 			page 777


5317:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 20492              		.loc 1 5317 0
 20493 7dec C1EA0B   		shrl	$11, %edx
 20494              	.LVL1573:
5318:src/vm3.c     **** PC  =  nPC;
 20495              		.loc 1 5318 0
 20496 7def 83E31F   		andl	$31, %ebx
 20497 7df2 83E01F   		andl	$31, %eax
 20498 7df5 83E21F   		andl	$31, %edx
 20499 7df8 8B048500 		movl	RF(,%rax,4), %eax
 20499      000000
 20500 7dff 2B049D00 		subl	RF(,%rbx,4), %eax
 20500      000000
 20501 7e06 89049500 		movl	%eax, RF(,%rdx,4)
 20501      000000
5319:src/vm3.c     **** nPC  += 4;
 20502              		.loc 1 5319 0
 20503 7e0d 8B050000 		movl	nPC(%rip), %eax
 20503      0000
5321:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20504              		.loc 1 5321 0
 20505 7e13 8D5003   		leal	3(%rax), %edx
5320:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20506              		.loc 1 5320 0
 20507 7e16 8D4804   		leal	4(%rax), %ecx
5319:src/vm3.c     **** nPC  += 4;
 20508              		.loc 1 5319 0
 20509 7e19 89050000 		movl	%eax, PC(%rip)
 20509      0000
5321:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20510              		.loc 1 5321 0
 20511 7e1f 440FB682 		movzbl	VM_memory(%rdx), %r8d
 20511      00000000 
 20512 7e27 89C2     		movl	%eax, %edx
5334:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20513              		.loc 1 5334 0
 20514 7e29 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20514      000000
5321:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20515              		.loc 1 5321 0
 20516 7e30 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20516      000000
5320:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20517              		.loc 1 5320 0
 20518 7e37 890D0000 		movl	%ecx, nPC(%rip)
 20518      0000
5334:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20519              		.loc 1 5334 0
 20520 7e3d 8D4805   		leal	5(%rax), %ecx
 20521 7e40 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20521      000000
5321:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20522              		.loc 1 5321 0
 20523 7e47 C1E218   		sall	$24, %edx
 20524 7e4a 4109D0   		orl	%edx, %r8d
 20525 7e4d 8D5001   		leal	1(%rax), %edx
 20526 7e50 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 778


 20526      000000
 20527 7e57 C1E210   		sall	$16, %edx
 20528 7e5a 4109D0   		orl	%edx, %r8d
 20529 7e5d 8D5002   		leal	2(%rax), %edx
 20530 7e60 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20530      000000
 20531 7e67 C1E208   		sall	$8, %edx
 20532 7e6a 4109D0   		orl	%edx, %r8d
 20533              	.LVL1574:
5322:src/vm3.c     ****   if (op0 == 0x0) {
 20534              		.loc 1 5322 0
 20535 7e6d 4489C6   		movl	%r8d, %esi
5324:src/vm3.c     ****     op0 = op0 + funct;
 20536              		.loc 1 5324 0
 20537 7e70 4488C2   		movb	%r8b, %dl
5322:src/vm3.c     ****   if (op0 == 0x0) {
 20538              		.loc 1 5322 0
 20539 7e73 C1EE1A   		shrl	$26, %esi
 20540              	.LVL1575:
5324:src/vm3.c     ****     op0 = op0 + funct;
 20541              		.loc 1 5324 0
 20542 7e76 83E23F   		andl	$63, %edx
 20543 7e79 8D7E2B   		leal	43(%rsi), %edi
 20544 7e7c 4084F6   		testb	%sil, %sil
 20545 7e7f 0F45D7   		cmovne	%edi, %edx
 20546              	.LVL1576:
5334:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20547              		.loc 1 5334 0
 20548 7e82 C1E110   		sall	$16, %ecx
 20549 7e85 C1E318   		sall	$24, %ebx
 20550 7e88 09CB     		orl	%ecx, %ebx
 20551 7e8a 8D4807   		leal	7(%rax), %ecx
 20552 7e8d 83C006   		addl	$6, %eax
 20553 7e90 0FB68000 		movzbl	VM_memory(%rax), %eax
 20553      000000
5332:src/vm3.c     **** 
 20554              		.loc 1 5332 0
 20555 7e97 0FB6D2   		movzbl	%dl, %edx
5334:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20556              		.loc 1 5334 0
 20557 7e9a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20557      000000
5332:src/vm3.c     **** 
 20558              		.loc 1 5332 0
 20559 7ea1 48C1E204 		salq	$4, %rdx
 20560              	.LVL1577:
5334:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20561              		.loc 1 5334 0
 20562 7ea5 C1E008   		sall	$8, %eax
 20563 7ea8 09CB     		orl	%ecx, %ebx
 20564 7eaa 09C3     		orl	%eax, %ebx
 20565              	.LVL1578:
5335:src/vm3.c     ****   if (op1 == 0x0) {
 20566              		.loc 1 5335 0
 20567 7eac 89D9     		movl	%ebx, %ecx
5337:src/vm3.c     ****     op1 = op1 + funct;
 20568              		.loc 1 5337 0
GAS LISTING /tmp/cc15eBE3.s 			page 779


 20569 7eae 88D8     		movb	%bl, %al
5335:src/vm3.c     ****   if (op1 == 0x0) {
 20570              		.loc 1 5335 0
 20571 7eb0 C1E91A   		shrl	$26, %ecx
 20572              	.LVL1579:
5337:src/vm3.c     ****     op1 = op1 + funct;
 20573              		.loc 1 5337 0
 20574 7eb3 83E03F   		andl	$63, %eax
 20575 7eb6 8D712B   		leal	43(%rcx), %esi
 20576 7eb9 84C9     		testb	%cl, %cl
 20577 7ebb 0F45C6   		cmovne	%esi, %eax
 20578              	.LVL1580:
5344:src/vm3.c     **** 
 20579              		.loc 1 5344 0
 20580 7ebe 0FB6C0   		movzbl	%al, %eax
 20581 7ec1 48C1E004 		salq	$4, %rax
 20582              	.LVL1581:
 20583 7ec5 48038414 		addq	58088(%rsp,%rdx), %rax
 20583      E8E20000 
 20584 7ecd 488B08   		movq	(%rax), %rcx
 20585 7ed0 E9838EFF 		jmp	.L269
 20585      FF
 20586              	.LVL1582:
 20587              	.L124:
5353:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 20588              		.loc 1 5353 0
 20589 7ed5 4489C0   		movl	%r8d, %eax
5354:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 20590              		.loc 1 5354 0
 20591 7ed8 4489C2   		movl	%r8d, %edx
5352:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20592              		.loc 1 5352 0
 20593 7edb 41C1E815 		shrl	$21, %r8d
 20594              	.LVL1583:
5353:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 20595              		.loc 1 5353 0
 20596 7edf C1E810   		shrl	$16, %eax
 20597              	.LVL1584:
5355:src/vm3.c     **** PC  =  nPC;
 20598              		.loc 1 5355 0
 20599 7ee2 4183E01F 		andl	$31, %r8d
5354:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 20600              		.loc 1 5354 0
 20601 7ee6 C1EA0B   		shrl	$11, %edx
 20602              	.LVL1585:
5355:src/vm3.c     **** PC  =  nPC;
 20603              		.loc 1 5355 0
 20604 7ee9 83E01F   		andl	$31, %eax
 20605 7eec 83E21F   		andl	$31, %edx
5357:src/vm3.c     **** 
 20606              		.loc 1 5357 0
 20607 7eef 83050000 		addl	$4, nPC(%rip)
 20607      000004
 20608              	.LVL1586:
5355:src/vm3.c     **** PC  =  nPC;
 20609              		.loc 1 5355 0
 20610 7ef6 8B048500 		movl	RF(,%rax,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 780


 20610      000000
 20611 7efd 42230485 		andl	RF(,%r8,4), %eax
 20611      00000000 
 20612 7f05 89049500 		movl	%eax, RF(,%rdx,4)
 20612      000000
5364:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 20613              		.loc 1 5364 0
 20614 7f0c 89D8     		movl	%ebx, %eax
5365:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 20615              		.loc 1 5365 0
 20616 7f0e 89DA     		movl	%ebx, %edx
5364:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 20617              		.loc 1 5364 0
 20618 7f10 C1E810   		shrl	$16, %eax
5363:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20619              		.loc 1 5363 0
 20620 7f13 C1EB06   		shrl	$6, %ebx
 20621              	.LVL1587:
5365:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 20622              		.loc 1 5365 0
 20623 7f16 C1EA0B   		shrl	$11, %edx
 20624              	.LVL1588:
5366:src/vm3.c     **** PC  =  nPC;
 20625              		.loc 1 5366 0
 20626 7f19 83E01F   		andl	$31, %eax
5363:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20627              		.loc 1 5363 0
 20628 7f1c 88D9     		movb	%bl, %cl
5366:src/vm3.c     **** PC  =  nPC;
 20629              		.loc 1 5366 0
 20630 7f1e 83E21F   		andl	$31, %edx
 20631 7f21 8B048500 		movl	RF(,%rax,4), %eax
 20631      000000
5363:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20632              		.loc 1 5363 0
 20633 7f28 83E11F   		andl	$31, %ecx
5366:src/vm3.c     **** PC  =  nPC;
 20634              		.loc 1 5366 0
 20635 7f2b D3E0     		sall	%cl, %eax
 20636 7f2d 89049500 		movl	%eax, RF(,%rdx,4)
 20636      000000
5367:src/vm3.c     **** nPC  += 4;
 20637              		.loc 1 5367 0
 20638 7f34 8B050000 		movl	nPC(%rip), %eax
 20638      0000
5369:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20639              		.loc 1 5369 0
 20640 7f3a 8D5003   		leal	3(%rax), %edx
5368:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20641              		.loc 1 5368 0
 20642 7f3d 8D4804   		leal	4(%rax), %ecx
5367:src/vm3.c     **** nPC  += 4;
 20643              		.loc 1 5367 0
 20644 7f40 89050000 		movl	%eax, PC(%rip)
 20644      0000
5369:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20645              		.loc 1 5369 0
GAS LISTING /tmp/cc15eBE3.s 			page 781


 20646 7f46 440FB682 		movzbl	VM_memory(%rdx), %r8d
 20646      00000000 
 20647 7f4e 89C2     		movl	%eax, %edx
5382:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20648              		.loc 1 5382 0
 20649 7f50 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20649      000000
5369:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20650              		.loc 1 5369 0
 20651 7f57 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20651      000000
5368:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20652              		.loc 1 5368 0
 20653 7f5e 890D0000 		movl	%ecx, nPC(%rip)
 20653      0000
5382:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20654              		.loc 1 5382 0
 20655 7f64 8D4805   		leal	5(%rax), %ecx
 20656 7f67 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20656      000000
5369:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20657              		.loc 1 5369 0
 20658 7f6e C1E218   		sall	$24, %edx
 20659 7f71 4109D0   		orl	%edx, %r8d
 20660 7f74 8D5001   		leal	1(%rax), %edx
 20661 7f77 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20661      000000
 20662 7f7e C1E210   		sall	$16, %edx
 20663 7f81 4109D0   		orl	%edx, %r8d
 20664 7f84 8D5002   		leal	2(%rax), %edx
 20665 7f87 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20665      000000
 20666 7f8e C1E208   		sall	$8, %edx
 20667 7f91 4109D0   		orl	%edx, %r8d
 20668              	.LVL1589:
5370:src/vm3.c     ****   if (op0 == 0x0) {
 20669              		.loc 1 5370 0
 20670 7f94 4489C6   		movl	%r8d, %esi
5372:src/vm3.c     ****     op0 = op0 + funct;
 20671              		.loc 1 5372 0
 20672 7f97 4488C2   		movb	%r8b, %dl
5370:src/vm3.c     ****   if (op0 == 0x0) {
 20673              		.loc 1 5370 0
 20674 7f9a C1EE1A   		shrl	$26, %esi
 20675              	.LVL1590:
5372:src/vm3.c     ****     op0 = op0 + funct;
 20676              		.loc 1 5372 0
 20677 7f9d 83E23F   		andl	$63, %edx
 20678 7fa0 8D7E2B   		leal	43(%rsi), %edi
 20679 7fa3 4084F6   		testb	%sil, %sil
 20680 7fa6 0F45D7   		cmovne	%edi, %edx
 20681              	.LVL1591:
5382:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20682              		.loc 1 5382 0
 20683 7fa9 C1E110   		sall	$16, %ecx
 20684 7fac C1E318   		sall	$24, %ebx
 20685 7faf 09CB     		orl	%ecx, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 782


 20686 7fb1 8D4807   		leal	7(%rax), %ecx
 20687 7fb4 83C006   		addl	$6, %eax
 20688 7fb7 0FB68000 		movzbl	VM_memory(%rax), %eax
 20688      000000
5380:src/vm3.c     **** 
 20689              		.loc 1 5380 0
 20690 7fbe 0FB6D2   		movzbl	%dl, %edx
5382:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20691              		.loc 1 5382 0
 20692 7fc1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20692      000000
5380:src/vm3.c     **** 
 20693              		.loc 1 5380 0
 20694 7fc8 48C1E204 		salq	$4, %rdx
 20695              	.LVL1592:
5382:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20696              		.loc 1 5382 0
 20697 7fcc C1E008   		sall	$8, %eax
 20698 7fcf 09CB     		orl	%ecx, %ebx
 20699 7fd1 09C3     		orl	%eax, %ebx
 20700              	.LVL1593:
5383:src/vm3.c     ****   if (op1 == 0x0) {
 20701              		.loc 1 5383 0
 20702 7fd3 89D9     		movl	%ebx, %ecx
5385:src/vm3.c     ****     op1 = op1 + funct;
 20703              		.loc 1 5385 0
 20704 7fd5 88D8     		movb	%bl, %al
5383:src/vm3.c     ****   if (op1 == 0x0) {
 20705              		.loc 1 5383 0
 20706 7fd7 C1E91A   		shrl	$26, %ecx
 20707              	.LVL1594:
5385:src/vm3.c     ****     op1 = op1 + funct;
 20708              		.loc 1 5385 0
 20709 7fda 83E03F   		andl	$63, %eax
 20710 7fdd 8D712B   		leal	43(%rcx), %esi
 20711 7fe0 84C9     		testb	%cl, %cl
 20712 7fe2 0F45C6   		cmovne	%esi, %eax
 20713              	.LVL1595:
5392:src/vm3.c     **** 
 20714              		.loc 1 5392 0
 20715 7fe5 0FB6C0   		movzbl	%al, %eax
 20716 7fe8 48C1E004 		salq	$4, %rax
 20717              	.LVL1596:
 20718 7fec 48038414 		addq	58088(%rsp,%rdx), %rax
 20718      E8E20000 
 20719 7ff4 488B08   		movq	(%rax), %rcx
 20720 7ff7 E95C8DFF 		jmp	.L269
 20720      FF
 20721              	.LVL1597:
 20722              	.L187:
5400:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20723              		.loc 1 5400 0
 20724 7ffc 4489C0   		movl	%r8d, %eax
5403:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 20725              		.loc 1 5403 0
 20726 7fff 410FBFC8 		movswl	%r8w, %ecx
5401:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 783


 20727              		.loc 1 5401 0
 20728 8003 41C1E810 		shrl	$16, %r8d
 20729              	.LVL1598:
5400:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20730              		.loc 1 5400 0
 20731 8007 C1E815   		shrl	$21, %eax
 20732              	.LVL1599:
5403:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 20733              		.loc 1 5403 0
 20734 800a 4183E01F 		andl	$31, %r8d
5408:src/vm3.c     **** 
 20735              		.loc 1 5408 0
 20736 800e 83050000 		addl	$4, nPC(%rip)
 20736      000004
 20737              	.LVL1600:
5403:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 20738              		.loc 1 5403 0
 20739 8015 83E01F   		andl	$31, %eax
 20740 8018 8B148500 		movl	RF(,%rax,4), %edx
 20740      000000
 20741 801f 428B0485 		movl	RF(,%r8,4), %eax
 20741      00000000 
 20742 8027 8D3411   		leal	(%rcx,%rdx), %esi
 20743 802a 89C7     		movl	%eax, %edi
 20744 802c C1EF18   		shrl	$24, %edi
 20745 802f 4088BE00 		movb	%dil, VM_memory(%rsi)
 20745      000000
5404:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 20746              		.loc 1 5404 0
 20747 8036 8D741101 		leal	1(%rcx,%rdx), %esi
 20748 803a 89C7     		movl	%eax, %edi
 20749 803c C1EF10   		shrl	$16, %edi
 20750 803f 4088BE00 		movb	%dil, VM_memory(%rsi)
 20750      000000
5405:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 20751              		.loc 1 5405 0
 20752 8046 8D741102 		leal	2(%rcx,%rdx), %esi
5406:src/vm3.c     **** PC  =  nPC;
 20753              		.loc 1 5406 0
 20754 804a 8D541103 		leal	3(%rcx,%rdx), %edx
5405:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 20755              		.loc 1 5405 0
 20756 804e 0FB6FC   		movzbl	%ah, %edi
 20757 8051 4088BE00 		movb	%dil, VM_memory(%rsi)
 20757      000000
5406:src/vm3.c     **** PC  =  nPC;
 20758              		.loc 1 5406 0
 20759 8058 88820000 		movb	%al, VM_memory(%rdx)
 20759      0000
5414:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20760              		.loc 1 5414 0
 20761 805e 89DA     		movl	%ebx, %edx
 20762 8060 C1EA15   		shrl	$21, %edx
5417:src/vm3.c     **** PC  =  nPC;
 20763              		.loc 1 5417 0
 20764 8063 0FBFC3   		movswl	%bx, %eax
5415:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 784


 20765              		.loc 1 5415 0
 20766 8066 C1EB10   		shrl	$16, %ebx
 20767              	.LVL1601:
5417:src/vm3.c     **** PC  =  nPC;
 20768              		.loc 1 5417 0
 20769 8069 83E21F   		andl	$31, %edx
 20770 806c 83E31F   		andl	$31, %ebx
 20771 806f 03049500 		addl	RF(,%rdx,4), %eax
 20771      000000
 20772              	.LVL1602:
 20773 8076 8B149D00 		movl	RF(,%rbx,4), %edx
 20773      000000
 20774 807d 88900000 		movb	%dl, VM_memory(%rax)
 20774      0000
5418:src/vm3.c     **** nPC  += 4;
 20775              		.loc 1 5418 0
 20776 8083 8B050000 		movl	nPC(%rip), %eax
 20776      0000
5420:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20777              		.loc 1 5420 0
 20778 8089 8D5003   		leal	3(%rax), %edx
5419:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20779              		.loc 1 5419 0
 20780 808c 8D4804   		leal	4(%rax), %ecx
5418:src/vm3.c     **** nPC  += 4;
 20781              		.loc 1 5418 0
 20782 808f 89050000 		movl	%eax, PC(%rip)
 20782      0000
5420:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20783              		.loc 1 5420 0
 20784 8095 440FB682 		movzbl	VM_memory(%rdx), %r8d
 20784      00000000 
 20785 809d 89C2     		movl	%eax, %edx
5433:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20786              		.loc 1 5433 0
 20787 809f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20787      000000
5420:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20788              		.loc 1 5420 0
 20789 80a6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20789      000000
5419:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20790              		.loc 1 5419 0
 20791 80ad 890D0000 		movl	%ecx, nPC(%rip)
 20791      0000
5433:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20792              		.loc 1 5433 0
 20793 80b3 8D4805   		leal	5(%rax), %ecx
 20794 80b6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20794      000000
5420:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20795              		.loc 1 5420 0
 20796 80bd C1E218   		sall	$24, %edx
 20797 80c0 4109D0   		orl	%edx, %r8d
 20798 80c3 8D5001   		leal	1(%rax), %edx
 20799 80c6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20799      000000
GAS LISTING /tmp/cc15eBE3.s 			page 785


 20800 80cd C1E210   		sall	$16, %edx
 20801 80d0 4109D0   		orl	%edx, %r8d
 20802 80d3 8D5002   		leal	2(%rax), %edx
 20803 80d6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20803      000000
 20804 80dd C1E208   		sall	$8, %edx
 20805 80e0 4109D0   		orl	%edx, %r8d
 20806              	.LVL1603:
5421:src/vm3.c     ****   if (op0 == 0x0) {
 20807              		.loc 1 5421 0
 20808 80e3 4489C6   		movl	%r8d, %esi
5423:src/vm3.c     ****     op0 = op0 + funct;
 20809              		.loc 1 5423 0
 20810 80e6 4488C2   		movb	%r8b, %dl
5421:src/vm3.c     ****   if (op0 == 0x0) {
 20811              		.loc 1 5421 0
 20812 80e9 C1EE1A   		shrl	$26, %esi
 20813              	.LVL1604:
5423:src/vm3.c     ****     op0 = op0 + funct;
 20814              		.loc 1 5423 0
 20815 80ec 83E23F   		andl	$63, %edx
 20816 80ef 8D7E2B   		leal	43(%rsi), %edi
 20817 80f2 4084F6   		testb	%sil, %sil
 20818 80f5 0F45D7   		cmovne	%edi, %edx
 20819              	.LVL1605:
5433:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20820              		.loc 1 5433 0
 20821 80f8 C1E110   		sall	$16, %ecx
 20822 80fb C1E318   		sall	$24, %ebx
 20823 80fe 09CB     		orl	%ecx, %ebx
 20824 8100 8D4807   		leal	7(%rax), %ecx
 20825 8103 83C006   		addl	$6, %eax
 20826 8106 0FB68000 		movzbl	VM_memory(%rax), %eax
 20826      000000
5431:src/vm3.c     **** 
 20827              		.loc 1 5431 0
 20828 810d 0FB6D2   		movzbl	%dl, %edx
5433:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20829              		.loc 1 5433 0
 20830 8110 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20830      000000
5431:src/vm3.c     **** 
 20831              		.loc 1 5431 0
 20832 8117 48C1E204 		salq	$4, %rdx
 20833              	.LVL1606:
5433:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20834              		.loc 1 5433 0
 20835 811b C1E008   		sall	$8, %eax
 20836 811e 09CB     		orl	%ecx, %ebx
 20837 8120 09C3     		orl	%eax, %ebx
 20838              	.LVL1607:
5434:src/vm3.c     ****   if (op1 == 0x0) {
 20839              		.loc 1 5434 0
 20840 8122 89D9     		movl	%ebx, %ecx
5436:src/vm3.c     ****     op1 = op1 + funct;
 20841              		.loc 1 5436 0
 20842 8124 88D8     		movb	%bl, %al
GAS LISTING /tmp/cc15eBE3.s 			page 786


5434:src/vm3.c     ****   if (op1 == 0x0) {
 20843              		.loc 1 5434 0
 20844 8126 C1E91A   		shrl	$26, %ecx
 20845              	.LVL1608:
5436:src/vm3.c     ****     op1 = op1 + funct;
 20846              		.loc 1 5436 0
 20847 8129 83E03F   		andl	$63, %eax
 20848 812c 8D712B   		leal	43(%rcx), %esi
 20849 812f 84C9     		testb	%cl, %cl
 20850 8131 0F45C6   		cmovne	%esi, %eax
 20851              	.LVL1609:
5443:src/vm3.c     **** 
 20852              		.loc 1 5443 0
 20853 8134 0FB6C0   		movzbl	%al, %eax
 20854 8137 48C1E004 		salq	$4, %rax
 20855              	.LVL1610:
 20856 813b 48038414 		addq	58088(%rsp,%rdx), %rax
 20856      E8E20000 
 20857 8143 488B08   		movq	(%rax), %rcx
 20858 8146 E90D8CFF 		jmp	.L269
 20858      FF
 20859              	.LVL1611:
 20860              	.L184:
5451:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20861              		.loc 1 5451 0
 20862 814b 4489C0   		movl	%r8d, %eax
5454:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 20863              		.loc 1 5454 0
 20864 814e 410FBFC8 		movswl	%r8w, %ecx
5452:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 20865              		.loc 1 5452 0
 20866 8152 41C1E810 		shrl	$16, %r8d
 20867              	.LVL1612:
5451:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 20868              		.loc 1 5451 0
 20869 8156 C1E815   		shrl	$21, %eax
 20870              	.LVL1613:
5454:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 20871              		.loc 1 5454 0
 20872 8159 4183E01F 		andl	$31, %r8d
5459:src/vm3.c     **** 
 20873              		.loc 1 5459 0
 20874 815d 83050000 		addl	$4, nPC(%rip)
 20874      000004
 20875              	.LVL1614:
5454:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 20876              		.loc 1 5454 0
 20877 8164 83E01F   		andl	$31, %eax
 20878 8167 8B148500 		movl	RF(,%rax,4), %edx
 20878      000000
 20879 816e 428B0485 		movl	RF(,%r8,4), %eax
 20879      00000000 
 20880 8176 8D3411   		leal	(%rcx,%rdx), %esi
 20881 8179 89C7     		movl	%eax, %edi
 20882 817b C1EF18   		shrl	$24, %edi
 20883 817e 4088BE00 		movb	%dil, VM_memory(%rsi)
 20883      000000
GAS LISTING /tmp/cc15eBE3.s 			page 787


5455:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 20884              		.loc 1 5455 0
 20885 8185 8D741101 		leal	1(%rcx,%rdx), %esi
 20886 8189 89C7     		movl	%eax, %edi
 20887 818b C1EF10   		shrl	$16, %edi
 20888 818e 4088BE00 		movb	%dil, VM_memory(%rsi)
 20888      000000
5456:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 20889              		.loc 1 5456 0
 20890 8195 8D741102 		leal	2(%rcx,%rdx), %esi
5457:src/vm3.c     **** PC  =  nPC;
 20891              		.loc 1 5457 0
 20892 8199 8D541103 		leal	3(%rcx,%rdx), %edx
5456:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 20893              		.loc 1 5456 0
 20894 819d 0FB6FC   		movzbl	%ah, %edi
 20895 81a0 4088BE00 		movb	%dil, VM_memory(%rsi)
 20895      000000
5457:src/vm3.c     **** PC  =  nPC;
 20896              		.loc 1 5457 0
 20897 81a7 88820000 		movb	%al, VM_memory(%rdx)
 20897      0000
5465:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20898              		.loc 1 5465 0
 20899 81ad 89DA     		movl	%ebx, %edx
5466:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 20900              		.loc 1 5466 0
 20901 81af 89D8     		movl	%ebx, %eax
5465:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 20902              		.loc 1 5465 0
 20903 81b1 C1EA15   		shrl	$21, %edx
5468:src/vm3.c     **** PC  =  nPC;
 20904              		.loc 1 5468 0
 20905 81b4 0FBFDB   		movswl	%bx, %ebx
 20906              	.LVL1615:
5466:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 20907              		.loc 1 5466 0
 20908 81b7 C1E810   		shrl	$16, %eax
 20909              	.LVL1616:
5468:src/vm3.c     **** PC  =  nPC;
 20910              		.loc 1 5468 0
 20911 81ba 83E21F   		andl	$31, %edx
 20912 81bd 83E01F   		andl	$31, %eax
 20913 81c0 391C9500 		cmpl	%ebx, RF(,%rdx,4)
 20913      000000
 20914 81c7 0F92C2   		setb	%dl
 20915 81ca 0FB6D2   		movzbl	%dl, %edx
 20916 81cd 89148500 		movl	%edx, RF(,%rax,4)
 20916      000000
5469:src/vm3.c     **** nPC  += 4;
 20917              		.loc 1 5469 0
 20918 81d4 8B050000 		movl	nPC(%rip), %eax
 20918      0000
5471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20919              		.loc 1 5471 0
 20920 81da 8D5003   		leal	3(%rax), %edx
5470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 788


 20921              		.loc 1 5470 0
 20922 81dd 8D4804   		leal	4(%rax), %ecx
5469:src/vm3.c     **** nPC  += 4;
 20923              		.loc 1 5469 0
 20924 81e0 89050000 		movl	%eax, PC(%rip)
 20924      0000
5471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20925              		.loc 1 5471 0
 20926 81e6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 20926      00000000 
 20927 81ee 89C2     		movl	%eax, %edx
5484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20928              		.loc 1 5484 0
 20929 81f0 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 20929      000000
 20930              	.LVL1617:
5471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20931              		.loc 1 5471 0
 20932 81f7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20932      000000
5470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 20933              		.loc 1 5470 0
 20934 81fe 890D0000 		movl	%ecx, nPC(%rip)
 20934      0000
5484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20935              		.loc 1 5484 0
 20936 8204 8D4805   		leal	5(%rax), %ecx
 20937 8207 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20937      000000
5471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 20938              		.loc 1 5471 0
 20939 820e C1E218   		sall	$24, %edx
 20940 8211 4109D0   		orl	%edx, %r8d
 20941 8214 8D5001   		leal	1(%rax), %edx
 20942 8217 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20942      000000
 20943 821e C1E210   		sall	$16, %edx
 20944 8221 4109D0   		orl	%edx, %r8d
 20945 8224 8D5002   		leal	2(%rax), %edx
 20946 8227 0FB69200 		movzbl	VM_memory(%rdx), %edx
 20946      000000
 20947 822e C1E208   		sall	$8, %edx
 20948 8231 4109D0   		orl	%edx, %r8d
 20949              	.LVL1618:
5472:src/vm3.c     ****   if (op0 == 0x0) {
 20950              		.loc 1 5472 0
 20951 8234 4489C6   		movl	%r8d, %esi
5474:src/vm3.c     ****     op0 = op0 + funct;
 20952              		.loc 1 5474 0
 20953 8237 4488C2   		movb	%r8b, %dl
5472:src/vm3.c     ****   if (op0 == 0x0) {
 20954              		.loc 1 5472 0
 20955 823a C1EE1A   		shrl	$26, %esi
 20956              	.LVL1619:
5474:src/vm3.c     ****     op0 = op0 + funct;
 20957              		.loc 1 5474 0
 20958 823d 83E23F   		andl	$63, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 789


 20959 8240 8D7E2B   		leal	43(%rsi), %edi
 20960 8243 4084F6   		testb	%sil, %sil
 20961 8246 0F45D7   		cmovne	%edi, %edx
 20962              	.LVL1620:
5484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20963              		.loc 1 5484 0
 20964 8249 C1E110   		sall	$16, %ecx
 20965 824c C1E318   		sall	$24, %ebx
 20966 824f 09CB     		orl	%ecx, %ebx
 20967 8251 8D4807   		leal	7(%rax), %ecx
 20968 8254 83C006   		addl	$6, %eax
 20969 8257 0FB68000 		movzbl	VM_memory(%rax), %eax
 20969      000000
5482:src/vm3.c     **** 
 20970              		.loc 1 5482 0
 20971 825e 0FB6D2   		movzbl	%dl, %edx
5484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20972              		.loc 1 5484 0
 20973 8261 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 20973      000000
5482:src/vm3.c     **** 
 20974              		.loc 1 5482 0
 20975 8268 48C1E204 		salq	$4, %rdx
 20976              	.LVL1621:
5484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 20977              		.loc 1 5484 0
 20978 826c C1E008   		sall	$8, %eax
 20979 826f 09CB     		orl	%ecx, %ebx
 20980 8271 09C3     		orl	%eax, %ebx
 20981              	.LVL1622:
5485:src/vm3.c     ****   if (op1 == 0x0) {
 20982              		.loc 1 5485 0
 20983 8273 89D9     		movl	%ebx, %ecx
5487:src/vm3.c     ****     op1 = op1 + funct;
 20984              		.loc 1 5487 0
 20985 8275 88D8     		movb	%bl, %al
5485:src/vm3.c     ****   if (op1 == 0x0) {
 20986              		.loc 1 5485 0
 20987 8277 C1E91A   		shrl	$26, %ecx
 20988              	.LVL1623:
5487:src/vm3.c     ****     op1 = op1 + funct;
 20989              		.loc 1 5487 0
 20990 827a 83E03F   		andl	$63, %eax
 20991 827d 8D712B   		leal	43(%rcx), %esi
 20992 8280 84C9     		testb	%cl, %cl
 20993 8282 0F45C6   		cmovne	%esi, %eax
 20994              	.LVL1624:
5494:src/vm3.c     **** 
 20995              		.loc 1 5494 0
 20996 8285 0FB6C0   		movzbl	%al, %eax
 20997 8288 48C1E004 		salq	$4, %rax
 20998              	.LVL1625:
 20999 828c 48038414 		addq	58088(%rsp,%rdx), %rax
 20999      E8E20000 
 21000 8294 488B08   		movq	(%rax), %rcx
 21001 8297 E9BC8AFF 		jmp	.L269
 21001      FF
GAS LISTING /tmp/cc15eBE3.s 			page 790


 21002              	.LVL1626:
 21003              	.L19:
5503:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21004              		.loc 1 5503 0
 21005 829c 4489C0   		movl	%r8d, %eax
5504:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 21006              		.loc 1 5504 0
 21007 829f 4489C2   		movl	%r8d, %edx
5502:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21008              		.loc 1 5502 0
 21009 82a2 41C1E806 		shrl	$6, %r8d
 21010              	.LVL1627:
5503:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21011              		.loc 1 5503 0
 21012 82a6 C1E810   		shrl	$16, %eax
 21013              	.LVL1628:
5502:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21014              		.loc 1 5502 0
 21015 82a9 4488C1   		movb	%r8b, %cl
5504:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 21016              		.loc 1 5504 0
 21017 82ac C1EA0B   		shrl	$11, %edx
 21018              	.LVL1629:
5505:src/vm3.c     **** PC  =  nPC;
 21019              		.loc 1 5505 0
 21020 82af 83E01F   		andl	$31, %eax
5502:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21021              		.loc 1 5502 0
 21022 82b2 83E11F   		andl	$31, %ecx
5505:src/vm3.c     **** PC  =  nPC;
 21023              		.loc 1 5505 0
 21024 82b5 83E21F   		andl	$31, %edx
 21025 82b8 8B048500 		movl	RF(,%rax,4), %eax
 21025      000000
5507:src/vm3.c     **** 
 21026              		.loc 1 5507 0
 21027 82bf 83050000 		addl	$4, nPC(%rip)
 21027      000004
 21028              	.LVL1630:
5505:src/vm3.c     **** PC  =  nPC;
 21029              		.loc 1 5505 0
 21030 82c6 D3E0     		sall	%cl, %eax
 21031 82c8 89049500 		movl	%eax, RF(,%rdx,4)
 21031      000000
5514:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 21032              		.loc 1 5514 0
 21033 82cf 89D8     		movl	%ebx, %eax
5515:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 21034              		.loc 1 5515 0
 21035 82d1 89DA     		movl	%ebx, %edx
5514:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 21036              		.loc 1 5514 0
 21037 82d3 C1E810   		shrl	$16, %eax
5513:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 21038              		.loc 1 5513 0
 21039 82d6 C1EB15   		shrl	$21, %ebx
 21040              	.LVL1631:
GAS LISTING /tmp/cc15eBE3.s 			page 791


5515:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 21041              		.loc 1 5515 0
 21042 82d9 C1EA0B   		shrl	$11, %edx
 21043              	.LVL1632:
5516:src/vm3.c     **** PC  =  nPC;
 21044              		.loc 1 5516 0
 21045 82dc 83E31F   		andl	$31, %ebx
 21046 82df 83E01F   		andl	$31, %eax
 21047 82e2 83E21F   		andl	$31, %edx
 21048 82e5 8B048500 		movl	RF(,%rax,4), %eax
 21048      000000
 21049 82ec 03049D00 		addl	RF(,%rbx,4), %eax
 21049      000000
 21050 82f3 89049500 		movl	%eax, RF(,%rdx,4)
 21050      000000
5517:src/vm3.c     **** nPC  += 4;
 21051              		.loc 1 5517 0
 21052 82fa 8B050000 		movl	nPC(%rip), %eax
 21052      0000
5519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21053              		.loc 1 5519 0
 21054 8300 8D5003   		leal	3(%rax), %edx
5518:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21055              		.loc 1 5518 0
 21056 8303 8D4804   		leal	4(%rax), %ecx
5517:src/vm3.c     **** nPC  += 4;
 21057              		.loc 1 5517 0
 21058 8306 89050000 		movl	%eax, PC(%rip)
 21058      0000
5519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21059              		.loc 1 5519 0
 21060 830c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 21060      00000000 
 21061 8314 89C2     		movl	%eax, %edx
5532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21062              		.loc 1 5532 0
 21063 8316 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 21063      000000
5519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21064              		.loc 1 5519 0
 21065 831d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21065      000000
5518:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21066              		.loc 1 5518 0
 21067 8324 890D0000 		movl	%ecx, nPC(%rip)
 21067      0000
5532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21068              		.loc 1 5532 0
 21069 832a 8D4805   		leal	5(%rax), %ecx
 21070 832d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21070      000000
5519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21071              		.loc 1 5519 0
 21072 8334 C1E218   		sall	$24, %edx
 21073 8337 4109D0   		orl	%edx, %r8d
 21074 833a 8D5001   		leal	1(%rax), %edx
 21075 833d 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 792


 21075      000000
 21076 8344 C1E210   		sall	$16, %edx
 21077 8347 4109D0   		orl	%edx, %r8d
 21078 834a 8D5002   		leal	2(%rax), %edx
 21079 834d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21079      000000
 21080 8354 C1E208   		sall	$8, %edx
 21081 8357 4109D0   		orl	%edx, %r8d
 21082              	.LVL1633:
5520:src/vm3.c     ****   if (op0 == 0x0) {
 21083              		.loc 1 5520 0
 21084 835a 4489C6   		movl	%r8d, %esi
5522:src/vm3.c     ****     op0 = op0 + funct;
 21085              		.loc 1 5522 0
 21086 835d 4488C2   		movb	%r8b, %dl
5520:src/vm3.c     ****   if (op0 == 0x0) {
 21087              		.loc 1 5520 0
 21088 8360 C1EE1A   		shrl	$26, %esi
 21089              	.LVL1634:
5522:src/vm3.c     ****     op0 = op0 + funct;
 21090              		.loc 1 5522 0
 21091 8363 83E23F   		andl	$63, %edx
 21092 8366 8D7E2B   		leal	43(%rsi), %edi
 21093 8369 4084F6   		testb	%sil, %sil
 21094 836c 0F45D7   		cmovne	%edi, %edx
 21095              	.LVL1635:
5532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21096              		.loc 1 5532 0
 21097 836f C1E110   		sall	$16, %ecx
 21098 8372 C1E318   		sall	$24, %ebx
 21099 8375 09CB     		orl	%ecx, %ebx
 21100 8377 8D4807   		leal	7(%rax), %ecx
 21101 837a 83C006   		addl	$6, %eax
 21102 837d 0FB68000 		movzbl	VM_memory(%rax), %eax
 21102      000000
5530:src/vm3.c     **** 
 21103              		.loc 1 5530 0
 21104 8384 0FB6D2   		movzbl	%dl, %edx
5532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21105              		.loc 1 5532 0
 21106 8387 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21106      000000
5530:src/vm3.c     **** 
 21107              		.loc 1 5530 0
 21108 838e 48C1E204 		salq	$4, %rdx
 21109              	.LVL1636:
5532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21110              		.loc 1 5532 0
 21111 8392 C1E008   		sall	$8, %eax
 21112 8395 09CB     		orl	%ecx, %ebx
 21113 8397 09C3     		orl	%eax, %ebx
 21114              	.LVL1637:
5533:src/vm3.c     ****   if (op1 == 0x0) {
 21115              		.loc 1 5533 0
 21116 8399 89D9     		movl	%ebx, %ecx
5535:src/vm3.c     ****     op1 = op1 + funct;
 21117              		.loc 1 5535 0
GAS LISTING /tmp/cc15eBE3.s 			page 793


 21118 839b 88D8     		movb	%bl, %al
5533:src/vm3.c     ****   if (op1 == 0x0) {
 21119              		.loc 1 5533 0
 21120 839d C1E91A   		shrl	$26, %ecx
 21121              	.LVL1638:
5535:src/vm3.c     ****     op1 = op1 + funct;
 21122              		.loc 1 5535 0
 21123 83a0 83E03F   		andl	$63, %eax
 21124 83a3 8D712B   		leal	43(%rcx), %esi
 21125 83a6 84C9     		testb	%cl, %cl
 21126 83a8 0F45C6   		cmovne	%esi, %eax
 21127              	.LVL1639:
5542:src/vm3.c     **** 
 21128              		.loc 1 5542 0
 21129 83ab 0FB6C0   		movzbl	%al, %eax
 21130 83ae 48C1E004 		salq	$4, %rax
 21131              	.LVL1640:
 21132 83b2 48038414 		addq	58088(%rsp,%rdx), %rax
 21132      E8E20000 
 21133 83ba 488B08   		movq	(%rax), %rcx
 21134 83bd E99689FF 		jmp	.L269
 21134      FF
 21135              	.LVL1641:
 21136              	.L54:
5551:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21137              		.loc 1 5551 0
 21138 83c2 4489C0   		movl	%r8d, %eax
5552:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 21139              		.loc 1 5552 0
 21140 83c5 4489C2   		movl	%r8d, %edx
5550:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21141              		.loc 1 5550 0
 21142 83c8 41C1E815 		shrl	$21, %r8d
 21143              	.LVL1642:
5551:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21144              		.loc 1 5551 0
 21145 83cc C1E810   		shrl	$16, %eax
 21146              	.LVL1643:
5553:src/vm3.c     **** PC  =  nPC;
 21147              		.loc 1 5553 0
 21148 83cf 4183E01F 		andl	$31, %r8d
5552:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 21149              		.loc 1 5552 0
 21150 83d3 C1EA0B   		shrl	$11, %edx
 21151              	.LVL1644:
5553:src/vm3.c     **** PC  =  nPC;
 21152              		.loc 1 5553 0
 21153 83d6 83E01F   		andl	$31, %eax
 21154 83d9 83E21F   		andl	$31, %edx
5562:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 21155              		.loc 1 5562 0
 21156 83dc 89D9     		movl	%ebx, %ecx
5553:src/vm3.c     **** PC  =  nPC;
 21157              		.loc 1 5553 0
 21158 83de 8B048500 		movl	RF(,%rax,4), %eax
 21158      000000
 21159 83e5 42030485 		addl	RF(,%r8,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 794


 21159      00000000 
5562:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 21160              		.loc 1 5562 0
 21161 83ed C1E910   		shrl	$16, %ecx
5561:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 21162              		.loc 1 5561 0
 21163 83f0 C1EB15   		shrl	$21, %ebx
 21164              	.LVL1645:
5563:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 21165              		.loc 1 5563 0
 21166 83f3 83E11F   		andl	$31, %ecx
 21167 83f6 83E31F   		andl	$31, %ebx
5553:src/vm3.c     **** PC  =  nPC;
 21168              		.loc 1 5553 0
 21169 83f9 89049500 		movl	%eax, RF(,%rdx,4)
 21169      000000
5555:src/vm3.c     **** 
 21170              		.loc 1 5555 0
 21171 8400 8B050000 		movl	nPC(%rip), %eax
 21171      0000
5563:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 21172              		.loc 1 5563 0
 21173 8406 448B348D 		movl	RF(,%rcx,4), %r14d
 21173      00000000 
 21174              	.LVL1646:
 21175 840e 8B0C9D00 		movl	RF(,%rbx,4), %ecx
 21175      000000
5555:src/vm3.c     **** 
 21176              		.loc 1 5555 0
 21177 8415 8D5004   		leal	4(%rax), %edx
5568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21178              		.loc 1 5568 0
 21179 8418 8D7007   		leal	7(%rax), %esi
5566:src/vm3.c     **** nPC  += 4;
 21180              		.loc 1 5566 0
 21181 841b 89150000 		movl	%edx, PC(%rip)
 21181      0000
5568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21182              		.loc 1 5568 0
 21183 8421 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21183      000000
 21184 8428 440FB686 		movzbl	VM_memory(%rsi), %r8d
 21184      00000000 
5563:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 21185              		.loc 1 5563 0
 21186 8430 4C0FAFF1 		imulq	%rcx, %r14
 21187              	.LVL1647:
5567:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21188              		.loc 1 5567 0
 21189 8434 8D4808   		leal	8(%rax), %ecx
5568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21190              		.loc 1 5568 0
 21191 8437 C1E218   		sall	$24, %edx
5581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21192              		.loc 1 5581 0
 21193 843a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 21193      000000
GAS LISTING /tmp/cc15eBE3.s 			page 795


5567:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21194              		.loc 1 5567 0
 21195 8441 890D0000 		movl	%ecx, nPC(%rip)
 21195      0000
5568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21196              		.loc 1 5568 0
 21197 8447 4109D0   		orl	%edx, %r8d
 21198 844a 8D5005   		leal	5(%rax), %edx
5581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21199              		.loc 1 5581 0
 21200 844d 8D4809   		leal	9(%rax), %ecx
5564:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 21201              		.loc 1 5564 0
 21202 8450 4C89F7   		movq	%r14, %rdi
5568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21203              		.loc 1 5568 0
 21204 8453 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21204      000000
5581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21205              		.loc 1 5581 0
 21206 845a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21206      000000
5564:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 21207              		.loc 1 5564 0
 21208 8461 48C1EF20 		shrq	$32, %rdi
 21209 8465 4989FD   		movq	%rdi, %r13
 21210              	.LVL1648:
5568:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21211              		.loc 1 5568 0
 21212 8468 C1E210   		sall	$16, %edx
 21213 846b 4109D0   		orl	%edx, %r8d
 21214 846e 8D5006   		leal	6(%rax), %edx
 21215 8471 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21215      000000
 21216 8478 C1E208   		sall	$8, %edx
 21217 847b 4109D0   		orl	%edx, %r8d
 21218              	.LVL1649:
5569:src/vm3.c     ****   if (op0 == 0x0) {
 21219              		.loc 1 5569 0
 21220 847e 4489C6   		movl	%r8d, %esi
5571:src/vm3.c     ****     op0 = op0 + funct;
 21221              		.loc 1 5571 0
 21222 8481 4488C2   		movb	%r8b, %dl
5569:src/vm3.c     ****   if (op0 == 0x0) {
 21223              		.loc 1 5569 0
 21224 8484 C1EE1A   		shrl	$26, %esi
 21225              	.LVL1650:
5571:src/vm3.c     ****     op0 = op0 + funct;
 21226              		.loc 1 5571 0
 21227 8487 83E23F   		andl	$63, %edx
 21228 848a 8D7E2B   		leal	43(%rsi), %edi
 21229              	.LVL1651:
 21230 848d 4084F6   		testb	%sil, %sil
 21231 8490 0F45D7   		cmovne	%edi, %edx
 21232              	.LVL1652:
5581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21233              		.loc 1 5581 0
GAS LISTING /tmp/cc15eBE3.s 			page 796


 21234 8493 C1E110   		sall	$16, %ecx
 21235 8496 C1E318   		sall	$24, %ebx
 21236 8499 09CB     		orl	%ecx, %ebx
 21237 849b 8D480B   		leal	11(%rax), %ecx
 21238 849e 83C00A   		addl	$10, %eax
 21239 84a1 0FB68000 		movzbl	VM_memory(%rax), %eax
 21239      000000
5579:src/vm3.c     **** 
 21240              		.loc 1 5579 0
 21241 84a8 0FB6D2   		movzbl	%dl, %edx
5581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21242              		.loc 1 5581 0
 21243 84ab 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21243      000000
5579:src/vm3.c     **** 
 21244              		.loc 1 5579 0
 21245 84b2 48C1E204 		salq	$4, %rdx
 21246              	.LVL1653:
5581:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21247              		.loc 1 5581 0
 21248 84b6 C1E008   		sall	$8, %eax
 21249 84b9 09CB     		orl	%ecx, %ebx
 21250 84bb 09C3     		orl	%eax, %ebx
 21251              	.LVL1654:
5582:src/vm3.c     ****   if (op1 == 0x0) {
 21252              		.loc 1 5582 0
 21253 84bd 89D9     		movl	%ebx, %ecx
5584:src/vm3.c     ****     op1 = op1 + funct;
 21254              		.loc 1 5584 0
 21255 84bf 88D8     		movb	%bl, %al
5582:src/vm3.c     ****   if (op1 == 0x0) {
 21256              		.loc 1 5582 0
 21257 84c1 C1E91A   		shrl	$26, %ecx
 21258              	.LVL1655:
5584:src/vm3.c     ****     op1 = op1 + funct;
 21259              		.loc 1 5584 0
 21260 84c4 83E03F   		andl	$63, %eax
 21261 84c7 8D712B   		leal	43(%rcx), %esi
 21262 84ca 84C9     		testb	%cl, %cl
 21263 84cc 0F45C6   		cmovne	%esi, %eax
 21264              	.LVL1656:
5591:src/vm3.c     **** 
 21265              		.loc 1 5591 0
 21266 84cf 0FB6C0   		movzbl	%al, %eax
 21267 84d2 48C1E004 		salq	$4, %rax
 21268              	.LVL1657:
 21269 84d6 48038414 		addq	58088(%rsp,%rdx), %rax
 21269      E8E20000 
 21270 84de 488B08   		movq	(%rax), %rcx
 21271 84e1 E97288FF 		jmp	.L269
 21271      FF
 21272              	.LVL1658:
 21273              	.L32:
5600:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21274              		.loc 1 5600 0
 21275 84e6 4489C0   		movl	%r8d, %eax
5601:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
GAS LISTING /tmp/cc15eBE3.s 			page 797


 21276              		.loc 1 5601 0
 21277 84e9 4489C2   		movl	%r8d, %edx
5599:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21278              		.loc 1 5599 0
 21279 84ec 41C1E806 		shrl	$6, %r8d
 21280              	.LVL1659:
5600:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21281              		.loc 1 5600 0
 21282 84f0 C1E810   		shrl	$16, %eax
 21283              	.LVL1660:
5599:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21284              		.loc 1 5599 0
 21285 84f3 4488C1   		movb	%r8b, %cl
5601:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 21286              		.loc 1 5601 0
 21287 84f6 C1EA0B   		shrl	$11, %edx
 21288              	.LVL1661:
5602:src/vm3.c     **** PC  =  nPC;
 21289              		.loc 1 5602 0
 21290 84f9 83E01F   		andl	$31, %eax
5599:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21291              		.loc 1 5599 0
 21292 84fc 83E11F   		andl	$31, %ecx
5602:src/vm3.c     **** PC  =  nPC;
 21293              		.loc 1 5602 0
 21294 84ff 83E21F   		andl	$31, %edx
 21295 8502 8B048500 		movl	RF(,%rax,4), %eax
 21295      000000
5604:src/vm3.c     **** 
 21296              		.loc 1 5604 0
 21297 8509 83050000 		addl	$4, nPC(%rip)
 21297      000004
 21298              	.LVL1662:
5602:src/vm3.c     **** PC  =  nPC;
 21299              		.loc 1 5602 0
 21300 8510 D3E0     		sall	%cl, %eax
 21301 8512 89049500 		movl	%eax, RF(,%rdx,4)
 21301      000000
5611:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 21302              		.loc 1 5611 0
 21303 8519 89D8     		movl	%ebx, %eax
5613:src/vm3.c     **** PC  =  nPC;
 21304              		.loc 1 5613 0
 21305 851b C1E310   		sall	$16, %ebx
 21306              	.LVL1663:
5611:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 21307              		.loc 1 5611 0
 21308 851e C1E810   		shrl	$16, %eax
 21309              	.LVL1664:
5613:src/vm3.c     **** PC  =  nPC;
 21310              		.loc 1 5613 0
 21311 8521 83E01F   		andl	$31, %eax
 21312 8524 891C8500 		movl	%ebx, RF(,%rax,4)
 21312      000000
5614:src/vm3.c     **** nPC  += 4;
 21313              		.loc 1 5614 0
 21314 852b 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 798


 21314      0000
5616:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21315              		.loc 1 5616 0
 21316 8531 8D5003   		leal	3(%rax), %edx
5615:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21317              		.loc 1 5615 0
 21318 8534 8D4804   		leal	4(%rax), %ecx
5614:src/vm3.c     **** nPC  += 4;
 21319              		.loc 1 5614 0
 21320 8537 89050000 		movl	%eax, PC(%rip)
 21320      0000
5616:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21321              		.loc 1 5616 0
 21322 853d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 21322      00000000 
 21323 8545 89C2     		movl	%eax, %edx
5629:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21324              		.loc 1 5629 0
 21325 8547 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 21325      000000
5616:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21326              		.loc 1 5616 0
 21327 854e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21327      000000
5615:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21328              		.loc 1 5615 0
 21329 8555 890D0000 		movl	%ecx, nPC(%rip)
 21329      0000
5629:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21330              		.loc 1 5629 0
 21331 855b 8D4805   		leal	5(%rax), %ecx
 21332 855e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21332      000000
5616:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21333              		.loc 1 5616 0
 21334 8565 C1E218   		sall	$24, %edx
 21335 8568 4109D0   		orl	%edx, %r8d
 21336 856b 8D5001   		leal	1(%rax), %edx
 21337 856e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21337      000000
 21338 8575 C1E210   		sall	$16, %edx
 21339 8578 4109D0   		orl	%edx, %r8d
 21340 857b 8D5002   		leal	2(%rax), %edx
 21341 857e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21341      000000
 21342 8585 C1E208   		sall	$8, %edx
 21343 8588 4109D0   		orl	%edx, %r8d
 21344              	.LVL1665:
5617:src/vm3.c     ****   if (op0 == 0x0) {
 21345              		.loc 1 5617 0
 21346 858b 4489C6   		movl	%r8d, %esi
5619:src/vm3.c     ****     op0 = op0 + funct;
 21347              		.loc 1 5619 0
 21348 858e 4488C2   		movb	%r8b, %dl
5617:src/vm3.c     ****   if (op0 == 0x0) {
 21349              		.loc 1 5617 0
 21350 8591 C1EE1A   		shrl	$26, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 799


 21351              	.LVL1666:
5619:src/vm3.c     ****     op0 = op0 + funct;
 21352              		.loc 1 5619 0
 21353 8594 83E23F   		andl	$63, %edx
 21354 8597 8D7E2B   		leal	43(%rsi), %edi
 21355 859a 4084F6   		testb	%sil, %sil
 21356 859d 0F45D7   		cmovne	%edi, %edx
 21357              	.LVL1667:
5629:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21358              		.loc 1 5629 0
 21359 85a0 C1E110   		sall	$16, %ecx
 21360 85a3 C1E318   		sall	$24, %ebx
 21361 85a6 09CB     		orl	%ecx, %ebx
 21362 85a8 8D4807   		leal	7(%rax), %ecx
 21363 85ab 83C006   		addl	$6, %eax
 21364 85ae 0FB68000 		movzbl	VM_memory(%rax), %eax
 21364      000000
5627:src/vm3.c     **** 
 21365              		.loc 1 5627 0
 21366 85b5 0FB6D2   		movzbl	%dl, %edx
5629:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21367              		.loc 1 5629 0
 21368 85b8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21368      000000
5627:src/vm3.c     **** 
 21369              		.loc 1 5627 0
 21370 85bf 48C1E204 		salq	$4, %rdx
 21371              	.LVL1668:
5629:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21372              		.loc 1 5629 0
 21373 85c3 C1E008   		sall	$8, %eax
 21374 85c6 09CB     		orl	%ecx, %ebx
 21375 85c8 09C3     		orl	%eax, %ebx
 21376              	.LVL1669:
5630:src/vm3.c     ****   if (op1 == 0x0) {
 21377              		.loc 1 5630 0
 21378 85ca 89D9     		movl	%ebx, %ecx
5632:src/vm3.c     ****     op1 = op1 + funct;
 21379              		.loc 1 5632 0
 21380 85cc 88D8     		movb	%bl, %al
5630:src/vm3.c     ****   if (op1 == 0x0) {
 21381              		.loc 1 5630 0
 21382 85ce C1E91A   		shrl	$26, %ecx
 21383              	.LVL1670:
5632:src/vm3.c     ****     op1 = op1 + funct;
 21384              		.loc 1 5632 0
 21385 85d1 83E03F   		andl	$63, %eax
 21386 85d4 8D712B   		leal	43(%rcx), %esi
 21387 85d7 84C9     		testb	%cl, %cl
 21388 85d9 0F45C6   		cmovne	%esi, %eax
 21389              	.LVL1671:
5639:src/vm3.c     **** 
 21390              		.loc 1 5639 0
 21391 85dc 0FB6C0   		movzbl	%al, %eax
 21392 85df 48C1E004 		salq	$4, %rax
 21393              	.LVL1672:
 21394 85e3 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 800


 21394      E8E20000 
 21395 85eb 488B08   		movq	(%rax), %rcx
 21396 85ee E96587FF 		jmp	.L269
 21396      FF
 21397              	.LVL1673:
 21398              	.L52:
5648:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21399              		.loc 1 5648 0
 21400 85f3 4489C0   		movl	%r8d, %eax
5649:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 21401              		.loc 1 5649 0
 21402 85f6 4489C2   		movl	%r8d, %edx
5647:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21403              		.loc 1 5647 0
 21404 85f9 41C1E815 		shrl	$21, %r8d
 21405              	.LVL1674:
5648:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21406              		.loc 1 5648 0
 21407 85fd C1E810   		shrl	$16, %eax
 21408              	.LVL1675:
5650:src/vm3.c     **** PC  =  nPC;
 21409              		.loc 1 5650 0
 21410 8600 4183E01F 		andl	$31, %r8d
5649:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 21411              		.loc 1 5649 0
 21412 8604 C1EA0B   		shrl	$11, %edx
 21413              	.LVL1676:
5650:src/vm3.c     **** PC  =  nPC;
 21414              		.loc 1 5650 0
 21415 8607 83E01F   		andl	$31, %eax
 21416 860a 83E21F   		andl	$31, %edx
5652:src/vm3.c     **** 
 21417              		.loc 1 5652 0
 21418 860d 83050000 		addl	$4, nPC(%rip)
 21418      000004
 21419              	.LVL1677:
5650:src/vm3.c     **** PC  =  nPC;
 21420              		.loc 1 5650 0
 21421 8614 8B048500 		movl	RF(,%rax,4), %eax
 21421      000000
 21422 861b 42030485 		addl	RF(,%r8,4), %eax
 21422      00000000 
 21423 8623 89049500 		movl	%eax, RF(,%rdx,4)
 21423      000000
5659:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 21424              		.loc 1 5659 0
 21425 862a 89D8     		movl	%ebx, %eax
5660:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 21426              		.loc 1 5660 0
 21427 862c 89DA     		movl	%ebx, %edx
5659:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 21428              		.loc 1 5659 0
 21429 862e C1E810   		shrl	$16, %eax
5658:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 21430              		.loc 1 5658 0
 21431 8631 C1EB06   		shrl	$6, %ebx
 21432              	.LVL1678:
GAS LISTING /tmp/cc15eBE3.s 			page 801


5660:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 21433              		.loc 1 5660 0
 21434 8634 C1EA0B   		shrl	$11, %edx
 21435              	.LVL1679:
5661:src/vm3.c     **** PC  =  nPC;
 21436              		.loc 1 5661 0
 21437 8637 83E01F   		andl	$31, %eax
5658:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 21438              		.loc 1 5658 0
 21439 863a 88D9     		movb	%bl, %cl
5661:src/vm3.c     **** PC  =  nPC;
 21440              		.loc 1 5661 0
 21441 863c 83E21F   		andl	$31, %edx
 21442 863f 8B048500 		movl	RF(,%rax,4), %eax
 21442      000000
5658:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 21443              		.loc 1 5658 0
 21444 8646 83E11F   		andl	$31, %ecx
5661:src/vm3.c     **** PC  =  nPC;
 21445              		.loc 1 5661 0
 21446 8649 D3E8     		shrl	%cl, %eax
 21447 864b 89049500 		movl	%eax, RF(,%rdx,4)
 21447      000000
5662:src/vm3.c     **** nPC  += 4;
 21448              		.loc 1 5662 0
 21449 8652 8B050000 		movl	nPC(%rip), %eax
 21449      0000
5664:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21450              		.loc 1 5664 0
 21451 8658 8D5003   		leal	3(%rax), %edx
5663:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21452              		.loc 1 5663 0
 21453 865b 8D4804   		leal	4(%rax), %ecx
5662:src/vm3.c     **** nPC  += 4;
 21454              		.loc 1 5662 0
 21455 865e 89050000 		movl	%eax, PC(%rip)
 21455      0000
5664:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21456              		.loc 1 5664 0
 21457 8664 440FB682 		movzbl	VM_memory(%rdx), %r8d
 21457      00000000 
 21458 866c 89C2     		movl	%eax, %edx
5677:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21459              		.loc 1 5677 0
 21460 866e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 21460      000000
5664:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21461              		.loc 1 5664 0
 21462 8675 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21462      000000
5663:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21463              		.loc 1 5663 0
 21464 867c 890D0000 		movl	%ecx, nPC(%rip)
 21464      0000
5677:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21465              		.loc 1 5677 0
 21466 8682 8D4805   		leal	5(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 802


 21467 8685 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21467      000000
5664:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21468              		.loc 1 5664 0
 21469 868c C1E218   		sall	$24, %edx
 21470 868f 4109D0   		orl	%edx, %r8d
 21471 8692 8D5001   		leal	1(%rax), %edx
 21472 8695 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21472      000000
 21473 869c C1E210   		sall	$16, %edx
 21474 869f 4109D0   		orl	%edx, %r8d
 21475 86a2 8D5002   		leal	2(%rax), %edx
 21476 86a5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21476      000000
 21477 86ac C1E208   		sall	$8, %edx
 21478 86af 4109D0   		orl	%edx, %r8d
 21479              	.LVL1680:
5665:src/vm3.c     ****   if (op0 == 0x0) {
 21480              		.loc 1 5665 0
 21481 86b2 4489C6   		movl	%r8d, %esi
5667:src/vm3.c     ****     op0 = op0 + funct;
 21482              		.loc 1 5667 0
 21483 86b5 4488C2   		movb	%r8b, %dl
5665:src/vm3.c     ****   if (op0 == 0x0) {
 21484              		.loc 1 5665 0
 21485 86b8 C1EE1A   		shrl	$26, %esi
 21486              	.LVL1681:
5667:src/vm3.c     ****     op0 = op0 + funct;
 21487              		.loc 1 5667 0
 21488 86bb 83E23F   		andl	$63, %edx
 21489 86be 8D7E2B   		leal	43(%rsi), %edi
 21490 86c1 4084F6   		testb	%sil, %sil
 21491 86c4 0F45D7   		cmovne	%edi, %edx
 21492              	.LVL1682:
5677:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21493              		.loc 1 5677 0
 21494 86c7 C1E110   		sall	$16, %ecx
 21495 86ca C1E318   		sall	$24, %ebx
 21496 86cd 09CB     		orl	%ecx, %ebx
 21497 86cf 8D4807   		leal	7(%rax), %ecx
 21498 86d2 83C006   		addl	$6, %eax
 21499 86d5 0FB68000 		movzbl	VM_memory(%rax), %eax
 21499      000000
5675:src/vm3.c     **** 
 21500              		.loc 1 5675 0
 21501 86dc 0FB6D2   		movzbl	%dl, %edx
5677:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21502              		.loc 1 5677 0
 21503 86df 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21503      000000
5675:src/vm3.c     **** 
 21504              		.loc 1 5675 0
 21505 86e6 48C1E204 		salq	$4, %rdx
 21506              	.LVL1683:
5677:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21507              		.loc 1 5677 0
 21508 86ea C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 803


 21509 86ed 09CB     		orl	%ecx, %ebx
 21510 86ef 09C3     		orl	%eax, %ebx
 21511              	.LVL1684:
5678:src/vm3.c     ****   if (op1 == 0x0) {
 21512              		.loc 1 5678 0
 21513 86f1 89D9     		movl	%ebx, %ecx
5680:src/vm3.c     ****     op1 = op1 + funct;
 21514              		.loc 1 5680 0
 21515 86f3 88D8     		movb	%bl, %al
5678:src/vm3.c     ****   if (op1 == 0x0) {
 21516              		.loc 1 5678 0
 21517 86f5 C1E91A   		shrl	$26, %ecx
 21518              	.LVL1685:
5680:src/vm3.c     ****     op1 = op1 + funct;
 21519              		.loc 1 5680 0
 21520 86f8 83E03F   		andl	$63, %eax
 21521 86fb 8D712B   		leal	43(%rcx), %esi
 21522 86fe 84C9     		testb	%cl, %cl
 21523 8700 0F45C6   		cmovne	%esi, %eax
 21524              	.LVL1686:
5687:src/vm3.c     **** 
 21525              		.loc 1 5687 0
 21526 8703 0FB6C0   		movzbl	%al, %eax
 21527 8706 48C1E004 		salq	$4, %rax
 21528              	.LVL1687:
 21529 870a 48038414 		addq	58088(%rsp,%rdx), %rax
 21529      E8E20000 
 21530 8712 488B08   		movq	(%rax), %rcx
 21531 8715 E93E86FF 		jmp	.L269
 21531      FF
 21532              	.LVL1688:
 21533              	.L25:
5696:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21534              		.loc 1 5696 0
 21535 871a 4489C0   		movl	%r8d, %eax
5697:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 21536              		.loc 1 5697 0
 21537 871d 4489C2   		movl	%r8d, %edx
5695:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21538              		.loc 1 5695 0
 21539 8720 41C1E806 		shrl	$6, %r8d
 21540              	.LVL1689:
5696:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21541              		.loc 1 5696 0
 21542 8724 C1E810   		shrl	$16, %eax
 21543              	.LVL1690:
5695:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21544              		.loc 1 5695 0
 21545 8727 4488C1   		movb	%r8b, %cl
5697:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 21546              		.loc 1 5697 0
 21547 872a C1EA0B   		shrl	$11, %edx
 21548              	.LVL1691:
5698:src/vm3.c     **** PC  =  nPC;
 21549              		.loc 1 5698 0
 21550 872d 83E01F   		andl	$31, %eax
5695:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 804


 21551              		.loc 1 5695 0
 21552 8730 83E11F   		andl	$31, %ecx
5698:src/vm3.c     **** PC  =  nPC;
 21553              		.loc 1 5698 0
 21554 8733 83E21F   		andl	$31, %edx
 21555 8736 8B048500 		movl	RF(,%rax,4), %eax
 21555      000000
5708:src/vm3.c     **** nPC = address << 2;
 21556              		.loc 1 5708 0
 21557 873d 81E3FFFF 		andl	$67108863, %ebx
 21557      FF03
 21558              	.LVL1692:
5698:src/vm3.c     **** PC  =  nPC;
 21559              		.loc 1 5698 0
 21560 8743 D3E0     		sall	%cl, %eax
 21561 8745 89049500 		movl	%eax, RF(,%rdx,4)
 21561      000000
5699:src/vm3.c     **** nPC  += 4;
 21562              		.loc 1 5699 0
 21563 874c 8B050000 		movl	nPC(%rip), %eax
 21563      0000
5700:src/vm3.c     **** 
 21564              		.loc 1 5700 0
 21565 8752 83050000 		addl	$4, nPC(%rip)
 21565      000004
5707:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 21566              		.loc 1 5707 0
 21567 8759 8B150000 		movl	nPC(%rip), %edx
 21567      0000
5706:src/vm3.c     **** PC = nPC;
 21568              		.loc 1 5706 0
 21569 875f 83C008   		addl	$8, %eax
 21570 8762 89050000 		movl	%eax, RF+124(%rip)
 21570      0000
5709:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21571              		.loc 1 5709 0
 21572 8768 8D049D00 		leal	0(,%rbx,4), %eax
 21572      000000
5710:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21573              		.loc 1 5710 0
 21574 876f 8D4A03   		leal	3(%rdx), %ecx
5707:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 21575              		.loc 1 5707 0
 21576 8772 89150000 		movl	%edx, PC(%rip)
 21576      0000
5709:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21577              		.loc 1 5709 0
 21578 8778 89050000 		movl	%eax, nPC(%rip)
 21578      0000
5710:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21579              		.loc 1 5710 0
 21580 877e 440FB681 		movzbl	VM_memory(%rcx), %r8d
 21580      00000000 
 21581 8786 89D1     		movl	%edx, %ecx
 21582 8788 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21582      000000
 21583 878f C1E118   		sall	$24, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 805


 21584 8792 4109C8   		orl	%ecx, %r8d
 21585 8795 8D4A01   		leal	1(%rdx), %ecx
 21586 8798 83C202   		addl	$2, %edx
 21587 879b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21587      000000
 21588 87a2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21588      000000
 21589 87a9 C1E208   		sall	$8, %edx
 21590 87ac C1E110   		sall	$16, %ecx
 21591 87af 4109C8   		orl	%ecx, %r8d
 21592 87b2 4109D0   		orl	%edx, %r8d
 21593              	.LVL1693:
5711:src/vm3.c     ****   if (op0 == 0x0) {
 21594              		.loc 1 5711 0
 21595 87b5 4489C1   		movl	%r8d, %ecx
5713:src/vm3.c     ****     op0 = op0 + funct;
 21596              		.loc 1 5713 0
 21597 87b8 4488C2   		movb	%r8b, %dl
5711:src/vm3.c     ****   if (op0 == 0x0) {
 21598              		.loc 1 5711 0
 21599 87bb C1E91A   		shrl	$26, %ecx
 21600              	.LVL1694:
5713:src/vm3.c     ****     op0 = op0 + funct;
 21601              		.loc 1 5713 0
 21602 87be 83E23F   		andl	$63, %edx
 21603 87c1 8D712B   		leal	43(%rcx), %esi
 21604 87c4 84C9     		testb	%cl, %cl
5723:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21605              		.loc 1 5723 0
 21606 87c6 8D4803   		leal	3(%rax), %ecx
 21607              	.LVL1695:
 21608 87c9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 21608      000000
 21609 87d0 89C1     		movl	%eax, %ecx
5713:src/vm3.c     ****     op0 = op0 + funct;
 21610              		.loc 1 5713 0
 21611 87d2 0F45D6   		cmovne	%esi, %edx
 21612              	.LVL1696:
5723:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21613              		.loc 1 5723 0
 21614 87d5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21614      000000
5721:src/vm3.c     **** 
 21615              		.loc 1 5721 0
 21616 87dc 0FB6D2   		movzbl	%dl, %edx
 21617 87df 48C1E204 		salq	$4, %rdx
 21618              	.LVL1697:
5723:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21619              		.loc 1 5723 0
 21620 87e3 C1E118   		sall	$24, %ecx
 21621 87e6 09CB     		orl	%ecx, %ebx
 21622 87e8 8D4801   		leal	1(%rax), %ecx
 21623 87eb 83C002   		addl	$2, %eax
 21624 87ee 0FB68000 		movzbl	VM_memory(%rax), %eax
 21624      000000
 21625 87f5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21625      000000
GAS LISTING /tmp/cc15eBE3.s 			page 806


 21626 87fc C1E008   		sall	$8, %eax
 21627 87ff C1E110   		sall	$16, %ecx
 21628 8802 09CB     		orl	%ecx, %ebx
 21629 8804 09C3     		orl	%eax, %ebx
 21630              	.LVL1698:
5724:src/vm3.c     ****   if (op1 == 0x0) {
 21631              		.loc 1 5724 0
 21632 8806 89D9     		movl	%ebx, %ecx
5726:src/vm3.c     ****     op1 = op1 + funct;
 21633              		.loc 1 5726 0
 21634 8808 88D8     		movb	%bl, %al
5724:src/vm3.c     ****   if (op1 == 0x0) {
 21635              		.loc 1 5724 0
 21636 880a C1E91A   		shrl	$26, %ecx
 21637              	.LVL1699:
5726:src/vm3.c     ****     op1 = op1 + funct;
 21638              		.loc 1 5726 0
 21639 880d 83E03F   		andl	$63, %eax
 21640 8810 8D712B   		leal	43(%rcx), %esi
 21641 8813 84C9     		testb	%cl, %cl
 21642 8815 0F45C6   		cmovne	%esi, %eax
 21643              	.LVL1700:
5733:src/vm3.c     **** 
 21644              		.loc 1 5733 0
 21645 8818 0FB6C0   		movzbl	%al, %eax
 21646 881b 48C1E004 		salq	$4, %rax
 21647              	.LVL1701:
 21648 881f 48038414 		addq	58088(%rsp,%rdx), %rax
 21648      E8E20000 
 21649 8827 488B08   		movq	(%rax), %rcx
 21650 882a E92985FF 		jmp	.L269
 21650      FF
 21651              	.LVL1702:
 21652              	.L75:
5767:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21653              		.loc 1 5767 0
 21654 882f 4489C2   		movl	%r8d, %edx
5770:src/vm3.c     **** PC  =  nPC;
 21655              		.loc 1 5770 0
 21656 8832 410FBFC0 		movswl	%r8w, %eax
5768:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 21657              		.loc 1 5768 0
 21658 8836 41C1E810 		shrl	$16, %r8d
 21659              	.LVL1703:
5767:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21660              		.loc 1 5767 0
 21661 883a C1EA15   		shrl	$21, %edx
 21662              	.LVL1704:
5770:src/vm3.c     **** PC  =  nPC;
 21663              		.loc 1 5770 0
 21664 883d 4183E01F 		andl	$31, %r8d
5780:src/vm3.c     **** nPC = address << 2;
 21665              		.loc 1 5780 0
 21666 8841 81E3FFFF 		andl	$67108863, %ebx
 21666      FF03
 21667              	.LVL1705:
5770:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 807


 21668              		.loc 1 5770 0
 21669 8847 83E21F   		andl	$31, %edx
 21670 884a 03049500 		addl	RF(,%rdx,4), %eax
 21670      000000
 21671              	.LVL1706:
 21672 8851 428B1485 		movl	RF(,%r8,4), %edx
 21672      00000000 
 21673 8859 88900000 		movb	%dl, VM_memory(%rax)
 21673      0000
5771:src/vm3.c     **** nPC  += 4;
 21674              		.loc 1 5771 0
 21675 885f 8B050000 		movl	nPC(%rip), %eax
 21675      0000
5772:src/vm3.c     **** 
 21676              		.loc 1 5772 0
 21677 8865 83050000 		addl	$4, nPC(%rip)
 21677      000004
5779:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 21678              		.loc 1 5779 0
 21679 886c 8B150000 		movl	nPC(%rip), %edx
 21679      0000
5778:src/vm3.c     **** PC = nPC;
 21680              		.loc 1 5778 0
 21681 8872 83C008   		addl	$8, %eax
 21682 8875 89050000 		movl	%eax, RF+124(%rip)
 21682      0000
5781:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21683              		.loc 1 5781 0
 21684 887b 8D049D00 		leal	0(,%rbx,4), %eax
 21684      000000
5782:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21685              		.loc 1 5782 0
 21686 8882 8D4A03   		leal	3(%rdx), %ecx
5779:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 21687              		.loc 1 5779 0
 21688 8885 89150000 		movl	%edx, PC(%rip)
 21688      0000
5781:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21689              		.loc 1 5781 0
 21690 888b 89050000 		movl	%eax, nPC(%rip)
 21690      0000
5782:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21691              		.loc 1 5782 0
 21692 8891 440FB681 		movzbl	VM_memory(%rcx), %r8d
 21692      00000000 
 21693 8899 89D1     		movl	%edx, %ecx
 21694 889b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21694      000000
 21695 88a2 C1E118   		sall	$24, %ecx
 21696 88a5 4109C8   		orl	%ecx, %r8d
 21697 88a8 8D4A01   		leal	1(%rdx), %ecx
 21698 88ab 83C202   		addl	$2, %edx
 21699 88ae 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21699      000000
 21700 88b5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21700      000000
 21701 88bc C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 808


 21702 88bf C1E110   		sall	$16, %ecx
 21703 88c2 4109C8   		orl	%ecx, %r8d
 21704 88c5 4109D0   		orl	%edx, %r8d
 21705              	.LVL1707:
5783:src/vm3.c     ****   if (op0 == 0x0) {
 21706              		.loc 1 5783 0
 21707 88c8 4489C1   		movl	%r8d, %ecx
5785:src/vm3.c     ****     op0 = op0 + funct;
 21708              		.loc 1 5785 0
 21709 88cb 4488C2   		movb	%r8b, %dl
5783:src/vm3.c     ****   if (op0 == 0x0) {
 21710              		.loc 1 5783 0
 21711 88ce C1E91A   		shrl	$26, %ecx
 21712              	.LVL1708:
5785:src/vm3.c     ****     op0 = op0 + funct;
 21713              		.loc 1 5785 0
 21714 88d1 83E23F   		andl	$63, %edx
 21715 88d4 8D712B   		leal	43(%rcx), %esi
 21716 88d7 84C9     		testb	%cl, %cl
5795:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21717              		.loc 1 5795 0
 21718 88d9 8D4803   		leal	3(%rax), %ecx
 21719              	.LVL1709:
 21720 88dc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 21720      000000
 21721 88e3 89C1     		movl	%eax, %ecx
5785:src/vm3.c     ****     op0 = op0 + funct;
 21722              		.loc 1 5785 0
 21723 88e5 0F45D6   		cmovne	%esi, %edx
 21724              	.LVL1710:
5795:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21725              		.loc 1 5795 0
 21726 88e8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21726      000000
5793:src/vm3.c     **** 
 21727              		.loc 1 5793 0
 21728 88ef 0FB6D2   		movzbl	%dl, %edx
 21729 88f2 48C1E204 		salq	$4, %rdx
 21730              	.LVL1711:
5795:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21731              		.loc 1 5795 0
 21732 88f6 C1E118   		sall	$24, %ecx
 21733 88f9 09CB     		orl	%ecx, %ebx
 21734 88fb 8D4801   		leal	1(%rax), %ecx
 21735 88fe 83C002   		addl	$2, %eax
 21736 8901 0FB68000 		movzbl	VM_memory(%rax), %eax
 21736      000000
 21737 8908 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21737      000000
 21738 890f C1E008   		sall	$8, %eax
 21739 8912 C1E110   		sall	$16, %ecx
 21740 8915 09CB     		orl	%ecx, %ebx
 21741 8917 09C3     		orl	%eax, %ebx
 21742              	.LVL1712:
5796:src/vm3.c     ****   if (op1 == 0x0) {
 21743              		.loc 1 5796 0
 21744 8919 89D9     		movl	%ebx, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 809


5798:src/vm3.c     ****     op1 = op1 + funct;
 21745              		.loc 1 5798 0
 21746 891b 88D8     		movb	%bl, %al
5796:src/vm3.c     ****   if (op1 == 0x0) {
 21747              		.loc 1 5796 0
 21748 891d C1E91A   		shrl	$26, %ecx
 21749              	.LVL1713:
5798:src/vm3.c     ****     op1 = op1 + funct;
 21750              		.loc 1 5798 0
 21751 8920 83E03F   		andl	$63, %eax
 21752 8923 8D712B   		leal	43(%rcx), %esi
 21753 8926 84C9     		testb	%cl, %cl
 21754 8928 0F45C6   		cmovne	%esi, %eax
 21755              	.LVL1714:
5805:src/vm3.c     **** 
 21756              		.loc 1 5805 0
 21757 892b 0FB6C0   		movzbl	%al, %eax
 21758 892e 48C1E004 		salq	$4, %rax
 21759              	.LVL1715:
 21760 8932 48038414 		addq	58088(%rsp,%rdx), %rax
 21760      E8E20000 
 21761 893a 488B08   		movq	(%rax), %rcx
 21762 893d E91684FF 		jmp	.L269
 21762      FF
 21763              	.LVL1716:
 21764              	.L127:
5840:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21765              		.loc 1 5840 0
 21766 8942 4489C0   		movl	%r8d, %eax
5841:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 21767              		.loc 1 5841 0
 21768 8945 4489C2   		movl	%r8d, %edx
5839:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21769              		.loc 1 5839 0
 21770 8948 41C1E815 		shrl	$21, %r8d
 21771              	.LVL1717:
5840:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 21772              		.loc 1 5840 0
 21773 894c C1E810   		shrl	$16, %eax
 21774              	.LVL1718:
5842:src/vm3.c     **** PC  =  nPC;
 21775              		.loc 1 5842 0
 21776 894f 4183E01F 		andl	$31, %r8d
5841:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 21777              		.loc 1 5841 0
 21778 8953 C1EA0B   		shrl	$11, %edx
 21779              	.LVL1719:
5842:src/vm3.c     **** PC  =  nPC;
 21780              		.loc 1 5842 0
 21781 8956 83E01F   		andl	$31, %eax
 21782 8959 83E21F   		andl	$31, %edx
5844:src/vm3.c     **** 
 21783              		.loc 1 5844 0
 21784 895c 83050000 		addl	$4, nPC(%rip)
 21784      000004
 21785              	.LVL1720:
5842:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 810


 21786              		.loc 1 5842 0
 21787 8963 8B048500 		movl	RF(,%rax,4), %eax
 21787      000000
 21788 896a 42230485 		andl	RF(,%r8,4), %eax
 21788      00000000 
 21789 8972 89049500 		movl	%eax, RF(,%rdx,4)
 21789      000000
5851:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 21790              		.loc 1 5851 0
 21791 8979 89D8     		movl	%ebx, %eax
5852:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 21792              		.loc 1 5852 0
 21793 897b 89DA     		movl	%ebx, %edx
5851:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 21794              		.loc 1 5851 0
 21795 897d C1E810   		shrl	$16, %eax
5850:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 21796              		.loc 1 5850 0
 21797 8980 C1EB15   		shrl	$21, %ebx
 21798              	.LVL1721:
5852:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 21799              		.loc 1 5852 0
 21800 8983 C1EA0B   		shrl	$11, %edx
 21801              	.LVL1722:
5853:src/vm3.c     **** PC  =  nPC;
 21802              		.loc 1 5853 0
 21803 8986 83E31F   		andl	$31, %ebx
 21804 8989 83E01F   		andl	$31, %eax
 21805 898c 83E21F   		andl	$31, %edx
 21806 898f 8B048500 		movl	RF(,%rax,4), %eax
 21806      000000
 21807 8996 0B049D00 		orl	RF(,%rbx,4), %eax
 21807      000000
 21808 899d 89049500 		movl	%eax, RF(,%rdx,4)
 21808      000000
5854:src/vm3.c     **** nPC  += 4;
 21809              		.loc 1 5854 0
 21810 89a4 8B050000 		movl	nPC(%rip), %eax
 21810      0000
5856:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21811              		.loc 1 5856 0
 21812 89aa 8D5003   		leal	3(%rax), %edx
5855:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21813              		.loc 1 5855 0
 21814 89ad 8D4804   		leal	4(%rax), %ecx
5854:src/vm3.c     **** nPC  += 4;
 21815              		.loc 1 5854 0
 21816 89b0 89050000 		movl	%eax, PC(%rip)
 21816      0000
5856:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21817              		.loc 1 5856 0
 21818 89b6 440FB682 		movzbl	VM_memory(%rdx), %r8d
 21818      00000000 
 21819 89be 89C2     		movl	%eax, %edx
5869:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21820              		.loc 1 5869 0
 21821 89c0 0FB69900 		movzbl	VM_memory(%rcx), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 811


 21821      000000
5856:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21822              		.loc 1 5856 0
 21823 89c7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21823      000000
5855:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 21824              		.loc 1 5855 0
 21825 89ce 890D0000 		movl	%ecx, nPC(%rip)
 21825      0000
5869:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21826              		.loc 1 5869 0
 21827 89d4 8D4805   		leal	5(%rax), %ecx
 21828 89d7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21828      000000
5856:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21829              		.loc 1 5856 0
 21830 89de C1E218   		sall	$24, %edx
 21831 89e1 4109D0   		orl	%edx, %r8d
 21832 89e4 8D5001   		leal	1(%rax), %edx
 21833 89e7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21833      000000
 21834 89ee C1E210   		sall	$16, %edx
 21835 89f1 4109D0   		orl	%edx, %r8d
 21836 89f4 8D5002   		leal	2(%rax), %edx
 21837 89f7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 21837      000000
 21838 89fe C1E208   		sall	$8, %edx
 21839 8a01 4109D0   		orl	%edx, %r8d
 21840              	.LVL1723:
5857:src/vm3.c     ****   if (op0 == 0x0) {
 21841              		.loc 1 5857 0
 21842 8a04 4489C6   		movl	%r8d, %esi
5859:src/vm3.c     ****     op0 = op0 + funct;
 21843              		.loc 1 5859 0
 21844 8a07 4488C2   		movb	%r8b, %dl
5857:src/vm3.c     ****   if (op0 == 0x0) {
 21845              		.loc 1 5857 0
 21846 8a0a C1EE1A   		shrl	$26, %esi
 21847              	.LVL1724:
5859:src/vm3.c     ****     op0 = op0 + funct;
 21848              		.loc 1 5859 0
 21849 8a0d 83E23F   		andl	$63, %edx
 21850 8a10 8D7E2B   		leal	43(%rsi), %edi
 21851 8a13 4084F6   		testb	%sil, %sil
 21852 8a16 0F45D7   		cmovne	%edi, %edx
 21853              	.LVL1725:
5869:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21854              		.loc 1 5869 0
 21855 8a19 C1E110   		sall	$16, %ecx
 21856 8a1c C1E318   		sall	$24, %ebx
 21857 8a1f 09CB     		orl	%ecx, %ebx
 21858 8a21 8D4807   		leal	7(%rax), %ecx
 21859 8a24 83C006   		addl	$6, %eax
 21860 8a27 0FB68000 		movzbl	VM_memory(%rax), %eax
 21860      000000
5867:src/vm3.c     **** 
 21861              		.loc 1 5867 0
GAS LISTING /tmp/cc15eBE3.s 			page 812


 21862 8a2e 0FB6D2   		movzbl	%dl, %edx
5869:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21863              		.loc 1 5869 0
 21864 8a31 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21864      000000
5867:src/vm3.c     **** 
 21865              		.loc 1 5867 0
 21866 8a38 48C1E204 		salq	$4, %rdx
 21867              	.LVL1726:
5869:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21868              		.loc 1 5869 0
 21869 8a3c C1E008   		sall	$8, %eax
 21870 8a3f 09CB     		orl	%ecx, %ebx
 21871 8a41 09C3     		orl	%eax, %ebx
 21872              	.LVL1727:
5870:src/vm3.c     ****   if (op1 == 0x0) {
 21873              		.loc 1 5870 0
 21874 8a43 89D9     		movl	%ebx, %ecx
5872:src/vm3.c     ****     op1 = op1 + funct;
 21875              		.loc 1 5872 0
 21876 8a45 88D8     		movb	%bl, %al
5870:src/vm3.c     ****   if (op1 == 0x0) {
 21877              		.loc 1 5870 0
 21878 8a47 C1E91A   		shrl	$26, %ecx
 21879              	.LVL1728:
5872:src/vm3.c     ****     op1 = op1 + funct;
 21880              		.loc 1 5872 0
 21881 8a4a 83E03F   		andl	$63, %eax
 21882 8a4d 8D712B   		leal	43(%rcx), %esi
 21883 8a50 84C9     		testb	%cl, %cl
 21884 8a52 0F45C6   		cmovne	%esi, %eax
 21885              	.LVL1729:
5879:src/vm3.c     **** 
 21886              		.loc 1 5879 0
 21887 8a55 0FB6C0   		movzbl	%al, %eax
 21888 8a58 48C1E004 		salq	$4, %rax
 21889              	.LVL1730:
 21890 8a5c 48038414 		addq	58088(%rsp,%rdx), %rax
 21890      E8E20000 
 21891 8a64 488B08   		movq	(%rax), %rcx
 21892 8a67 E9EC82FF 		jmp	.L269
 21892      FF
 21893              	.LVL1731:
 21894              	.L189:
5887:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21895              		.loc 1 5887 0
 21896 8a6c 4489C2   		movl	%r8d, %edx
5888:src/vm3.c     **** if (RF[rs] != RF[rt])
 21897              		.loc 1 5888 0
 21898 8a6f 4489C0   		movl	%r8d, %eax
5887:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 21899              		.loc 1 5887 0
 21900 8a72 C1EA15   		shrl	$21, %edx
5888:src/vm3.c     **** if (RF[rs] != RF[rt])
 21901              		.loc 1 5888 0
 21902 8a75 C1E810   		shrl	$16, %eax
5889:src/vm3.c     **** {
GAS LISTING /tmp/cc15eBE3.s 			page 813


 21903              		.loc 1 5889 0
 21904 8a78 83E01F   		andl	$31, %eax
 21905 8a7b 83E21F   		andl	$31, %edx
 21906 8a7e 8B048500 		movl	RF(,%rax,4), %eax
 21906      000000
 21907 8a85 39049500 		cmpl	%eax, RF(,%rdx,4)
 21907      000000
 21908 8a8c 0F84CE00 		je	.L799
 21908      0000
 21909              	.LVL1732:
5892:src/vm3.c     ****   nPC  += (immediate << 2);
 21910              		.loc 1 5892 0
 21911 8a92 8B050000 		movl	nPC(%rip), %eax
 21911      0000
5893:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 21912              		.loc 1 5893 0
 21913 8a98 450FBFC0 		movswl	%r8w, %r8d
 21914              	.LVL1733:
5894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21915              		.loc 1 5894 0
 21916 8a9c 8D4803   		leal	3(%rax), %ecx
5893:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 21917              		.loc 1 5893 0
 21918 8a9f 428D1480 		leal	(%rax,%r8,4), %edx
5892:src/vm3.c     ****   nPC  += (immediate << 2);
 21919              		.loc 1 5892 0
 21920 8aa3 89050000 		movl	%eax, PC(%rip)
 21920      0000
5894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21921              		.loc 1 5894 0
 21922 8aa9 440FB681 		movzbl	VM_memory(%rcx), %r8d
 21922      00000000 
 21923              	.LVL1734:
 21924 8ab1 89C1     		movl	%eax, %ecx
5893:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 21925              		.loc 1 5893 0
 21926 8ab3 89150000 		movl	%edx, nPC(%rip)
 21926      0000
5894:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 21927              		.loc 1 5894 0
 21928 8ab9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21928      000000
 21929 8ac0 C1E118   		sall	$24, %ecx
 21930 8ac3 4109C8   		orl	%ecx, %r8d
 21931 8ac6 8D4801   		leal	1(%rax), %ecx
 21932 8ac9 83C002   		addl	$2, %eax
 21933 8acc 0FB68000 		movzbl	VM_memory(%rax), %eax
 21933      000000
 21934 8ad3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 21934      000000
 21935 8ada C1E008   		sall	$8, %eax
 21936 8add C1E110   		sall	$16, %ecx
 21937 8ae0 4109C8   		orl	%ecx, %r8d
 21938 8ae3 4109C0   		orl	%eax, %r8d
 21939              	.LVL1735:
5895:src/vm3.c     ****   if (op0 == 0x0) {
 21940              		.loc 1 5895 0
GAS LISTING /tmp/cc15eBE3.s 			page 814


 21941 8ae6 4489C0   		movl	%r8d, %eax
5897:src/vm3.c     ****     op0 = op0 + funct;
 21942              		.loc 1 5897 0
 21943 8ae9 4488C1   		movb	%r8b, %cl
5895:src/vm3.c     ****   if (op0 == 0x0) {
 21944              		.loc 1 5895 0
 21945 8aec C1E81A   		shrl	$26, %eax
 21946              	.LVL1736:
5897:src/vm3.c     ****     op0 = op0 + funct;
 21947              		.loc 1 5897 0
 21948 8aef 83E13F   		andl	$63, %ecx
 21949 8af2 8D702B   		leal	43(%rax), %esi
 21950 8af5 84C0     		testb	%al, %al
5907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21951              		.loc 1 5907 0
 21952 8af7 8D4203   		leal	3(%rdx), %eax
 21953              	.LVL1737:
 21954 8afa 0FB69800 		movzbl	VM_memory(%rax), %ebx
 21954      000000
 21955              	.LVL1738:
 21956 8b01 89D0     		movl	%edx, %eax
5897:src/vm3.c     ****     op0 = op0 + funct;
 21957              		.loc 1 5897 0
 21958 8b03 0F45CE   		cmovne	%esi, %ecx
 21959              	.LVL1739:
5907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21960              		.loc 1 5907 0
 21961 8b06 0FB68000 		movzbl	VM_memory(%rax), %eax
 21961      000000
5905:src/vm3.c     **** 
 21962              		.loc 1 5905 0
 21963 8b0d 0FB6C9   		movzbl	%cl, %ecx
 21964 8b10 48C1E104 		salq	$4, %rcx
 21965              	.LVL1740:
5907:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 21966              		.loc 1 5907 0
 21967 8b14 C1E018   		sall	$24, %eax
 21968 8b17 09C3     		orl	%eax, %ebx
 21969 8b19 8D4201   		leal	1(%rdx), %eax
 21970 8b1c 0FB68000 		movzbl	VM_memory(%rax), %eax
 21970      000000
 21971 8b23 C1E010   		sall	$16, %eax
 21972 8b26 09C3     		orl	%eax, %ebx
 21973 8b28 8D4202   		leal	2(%rdx), %eax
 21974 8b2b 0FB68000 		movzbl	VM_memory(%rax), %eax
 21974      000000
 21975 8b32 C1E008   		sall	$8, %eax
 21976 8b35 09C3     		orl	%eax, %ebx
 21977              	.LVL1741:
5908:src/vm3.c     ****   if (op1 == 0x0) {
 21978              		.loc 1 5908 0
 21979 8b37 89DA     		movl	%ebx, %edx
5910:src/vm3.c     ****     op1 = op1 + funct;
 21980              		.loc 1 5910 0
 21981 8b39 88D8     		movb	%bl, %al
5908:src/vm3.c     ****   if (op1 == 0x0) {
 21982              		.loc 1 5908 0
GAS LISTING /tmp/cc15eBE3.s 			page 815


 21983 8b3b C1EA1A   		shrl	$26, %edx
 21984              	.LVL1742:
5910:src/vm3.c     ****     op1 = op1 + funct;
 21985              		.loc 1 5910 0
 21986 8b3e 83E03F   		andl	$63, %eax
 21987 8b41 8D722B   		leal	43(%rdx), %esi
 21988 8b44 84D2     		testb	%dl, %dl
 21989 8b46 0F45C6   		cmovne	%esi, %eax
 21990              	.LVL1743:
5917:src/vm3.c     **** 
 21991              		.loc 1 5917 0
 21992 8b49 0FB6C0   		movzbl	%al, %eax
 21993 8b4c 48C1E004 		salq	$4, %rax
 21994              	.LVL1744:
 21995 8b50 4803840C 		addq	58088(%rsp,%rcx), %rax
 21995      E8E20000 
 21996 8b58 488B08   		movq	(%rax), %rcx
 21997              	.LVL1745:
 21998 8b5b E9F881FF 		jmp	.L269
 21998      FF
 21999              	.LVL1746:
 22000              	.L799:
5932:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 22001              		.loc 1 5932 0
 22002 8b60 89D8     		movl	%ebx, %eax
5933:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 22003              		.loc 1 5933 0
 22004 8b62 89DA     		movl	%ebx, %edx
5931:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22005              		.loc 1 5931 0
 22006 8b64 C1EB06   		shrl	$6, %ebx
 22007              	.LVL1747:
5932:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 22008              		.loc 1 5932 0
 22009 8b67 C1E810   		shrl	$16, %eax
 22010              	.LVL1748:
5931:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22011              		.loc 1 5931 0
 22012 8b6a 88D9     		movb	%bl, %cl
5933:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 22013              		.loc 1 5933 0
 22014 8b6c C1EA0B   		shrl	$11, %edx
 22015              	.LVL1749:
5934:src/vm3.c     **** PC  =  nPC;
 22016              		.loc 1 5934 0
 22017 8b6f 83E01F   		andl	$31, %eax
5931:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22018              		.loc 1 5931 0
 22019 8b72 83E11F   		andl	$31, %ecx
5924:src/vm3.c     **** }
 22020              		.loc 1 5924 0
 22021 8b75 83050000 		addl	$4, nPC(%rip)
 22021      000004
 22022              	.LVL1750:
5934:src/vm3.c     **** PC  =  nPC;
 22023              		.loc 1 5934 0
 22024 8b7c 8B048500 		movl	RF(,%rax,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 816


 22024      000000
 22025 8b83 83E21F   		andl	$31, %edx
 22026 8b86 D3E0     		sall	%cl, %eax
 22027 8b88 89049500 		movl	%eax, RF(,%rdx,4)
 22027      000000
5935:src/vm3.c     **** nPC  += 4;
 22028              		.loc 1 5935 0
 22029 8b8f 8B050000 		movl	nPC(%rip), %eax
 22029      0000
5937:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22030              		.loc 1 5937 0
 22031 8b95 8D5003   		leal	3(%rax), %edx
5936:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22032              		.loc 1 5936 0
 22033 8b98 8D4804   		leal	4(%rax), %ecx
5935:src/vm3.c     **** nPC  += 4;
 22034              		.loc 1 5935 0
 22035 8b9b 89050000 		movl	%eax, PC(%rip)
 22035      0000
5937:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22036              		.loc 1 5937 0
 22037 8ba1 440FB682 		movzbl	VM_memory(%rdx), %r8d
 22037      00000000 
 22038              	.LVL1751:
 22039 8ba9 89C2     		movl	%eax, %edx
5950:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22040              		.loc 1 5950 0
 22041 8bab 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22041      000000
5937:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22042              		.loc 1 5937 0
 22043 8bb2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22043      000000
5936:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22044              		.loc 1 5936 0
 22045 8bb9 890D0000 		movl	%ecx, nPC(%rip)
 22045      0000
5950:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22046              		.loc 1 5950 0
 22047 8bbf 8D4805   		leal	5(%rax), %ecx
 22048 8bc2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22048      000000
5937:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22049              		.loc 1 5937 0
 22050 8bc9 C1E218   		sall	$24, %edx
 22051 8bcc 4109D0   		orl	%edx, %r8d
 22052 8bcf 8D5001   		leal	1(%rax), %edx
 22053 8bd2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22053      000000
 22054 8bd9 C1E210   		sall	$16, %edx
 22055 8bdc 4109D0   		orl	%edx, %r8d
 22056 8bdf 8D5002   		leal	2(%rax), %edx
 22057 8be2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22057      000000
 22058 8be9 C1E208   		sall	$8, %edx
 22059 8bec 4109D0   		orl	%edx, %r8d
 22060              	.LVL1752:
GAS LISTING /tmp/cc15eBE3.s 			page 817


5938:src/vm3.c     ****   if (op0 == 0x0) {
 22061              		.loc 1 5938 0
 22062 8bef 4489C6   		movl	%r8d, %esi
5940:src/vm3.c     ****     op0 = op0 + funct;
 22063              		.loc 1 5940 0
 22064 8bf2 4488C2   		movb	%r8b, %dl
5938:src/vm3.c     ****   if (op0 == 0x0) {
 22065              		.loc 1 5938 0
 22066 8bf5 C1EE1A   		shrl	$26, %esi
 22067              	.LVL1753:
5940:src/vm3.c     ****     op0 = op0 + funct;
 22068              		.loc 1 5940 0
 22069 8bf8 83E23F   		andl	$63, %edx
 22070 8bfb 8D7E2B   		leal	43(%rsi), %edi
 22071 8bfe 4084F6   		testb	%sil, %sil
 22072 8c01 0F45D7   		cmovne	%edi, %edx
 22073              	.LVL1754:
5950:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22074              		.loc 1 5950 0
 22075 8c04 C1E110   		sall	$16, %ecx
 22076 8c07 C1E318   		sall	$24, %ebx
 22077 8c0a 09CB     		orl	%ecx, %ebx
 22078 8c0c 8D4807   		leal	7(%rax), %ecx
 22079 8c0f 83C006   		addl	$6, %eax
 22080 8c12 0FB68000 		movzbl	VM_memory(%rax), %eax
 22080      000000
5948:src/vm3.c     **** 
 22081              		.loc 1 5948 0
 22082 8c19 0FB6D2   		movzbl	%dl, %edx
5950:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22083              		.loc 1 5950 0
 22084 8c1c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22084      000000
5948:src/vm3.c     **** 
 22085              		.loc 1 5948 0
 22086 8c23 48C1E204 		salq	$4, %rdx
 22087              	.LVL1755:
5950:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22088              		.loc 1 5950 0
 22089 8c27 C1E008   		sall	$8, %eax
 22090 8c2a 09CB     		orl	%ecx, %ebx
 22091 8c2c 09C3     		orl	%eax, %ebx
 22092              	.LVL1756:
5951:src/vm3.c     ****   if (op1 == 0x0) {
 22093              		.loc 1 5951 0
 22094 8c2e 89D9     		movl	%ebx, %ecx
5953:src/vm3.c     ****     op1 = op1 + funct;
 22095              		.loc 1 5953 0
 22096 8c30 88D8     		movb	%bl, %al
5951:src/vm3.c     ****   if (op1 == 0x0) {
 22097              		.loc 1 5951 0
 22098 8c32 C1E91A   		shrl	$26, %ecx
 22099              	.LVL1757:
5953:src/vm3.c     ****     op1 = op1 + funct;
 22100              		.loc 1 5953 0
 22101 8c35 83E03F   		andl	$63, %eax
 22102 8c38 8D712B   		leal	43(%rcx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 818


 22103 8c3b 84C9     		testb	%cl, %cl
 22104 8c3d 0F45C6   		cmovne	%esi, %eax
 22105              	.LVL1758:
5960:src/vm3.c     **** 
 22106              		.loc 1 5960 0
 22107 8c40 0FB6C0   		movzbl	%al, %eax
 22108 8c43 48C1E004 		salq	$4, %rax
 22109              	.LVL1759:
 22110 8c47 48038414 		addq	58088(%rsp,%rdx), %rax
 22110      E8E20000 
 22111 8c4f 488B08   		movq	(%rax), %rcx
 22112 8c52 E90181FF 		jmp	.L269
 22112      FF
 22113              	.LVL1760:
 22114              	.L198:
5968:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 22115              		.loc 1 5968 0
 22116 8c57 8B150000 		movl	nPC(%rip), %edx
 22116      0000
5969:src/vm3.c     **** nPC = address << 2;
 22117              		.loc 1 5969 0
 22118 8c5d 4181E0FF 		andl	$67108863, %r8d
 22118      FFFF03
 22119              	.LVL1761:
5970:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22120              		.loc 1 5970 0
 22121 8c64 428D0485 		leal	0(,%r8,4), %eax
 22121      00000000 
5971:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22122              		.loc 1 5971 0
 22123 8c6c 8D4A03   		leal	3(%rdx), %ecx
5968:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 22124              		.loc 1 5968 0
 22125 8c6f 89150000 		movl	%edx, PC(%rip)
 22125      0000
5970:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22126              		.loc 1 5970 0
 22127 8c75 89050000 		movl	%eax, nPC(%rip)
 22127      0000
5971:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22128              		.loc 1 5971 0
 22129 8c7b 440FB681 		movzbl	VM_memory(%rcx), %r8d
 22129      00000000 
 22130 8c83 89D1     		movl	%edx, %ecx
 22131 8c85 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22131      000000
 22132 8c8c C1E118   		sall	$24, %ecx
 22133 8c8f 4109C8   		orl	%ecx, %r8d
 22134 8c92 8D4A01   		leal	1(%rdx), %ecx
 22135 8c95 83C202   		addl	$2, %edx
 22136 8c98 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22136      000000
 22137 8c9f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22137      000000
 22138 8ca6 C1E208   		sall	$8, %edx
 22139 8ca9 C1E110   		sall	$16, %ecx
 22140 8cac 4109C8   		orl	%ecx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 819


 22141 8caf 4109D0   		orl	%edx, %r8d
 22142              	.LVL1762:
5972:src/vm3.c     ****   if (op0 == 0x0) {
 22143              		.loc 1 5972 0
 22144 8cb2 4489C1   		movl	%r8d, %ecx
5974:src/vm3.c     ****     op0 = op0 + funct;
 22145              		.loc 1 5974 0
 22146 8cb5 4488C2   		movb	%r8b, %dl
5972:src/vm3.c     ****   if (op0 == 0x0) {
 22147              		.loc 1 5972 0
 22148 8cb8 C1E91A   		shrl	$26, %ecx
 22149              	.LVL1763:
5974:src/vm3.c     ****     op0 = op0 + funct;
 22150              		.loc 1 5974 0
 22151 8cbb 83E23F   		andl	$63, %edx
 22152 8cbe 8D712B   		leal	43(%rcx), %esi
 22153 8cc1 84C9     		testb	%cl, %cl
5984:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22154              		.loc 1 5984 0
 22155 8cc3 8D4803   		leal	3(%rax), %ecx
 22156              	.LVL1764:
 22157 8cc6 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22157      000000
 22158              	.LVL1765:
 22159 8ccd 89C1     		movl	%eax, %ecx
5974:src/vm3.c     ****     op0 = op0 + funct;
 22160              		.loc 1 5974 0
 22161 8ccf 0F45D6   		cmovne	%esi, %edx
 22162              	.LVL1766:
5984:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22163              		.loc 1 5984 0
 22164 8cd2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22164      000000
5982:src/vm3.c     **** 
 22165              		.loc 1 5982 0
 22166 8cd9 0FB6D2   		movzbl	%dl, %edx
 22167 8cdc 48C1E204 		salq	$4, %rdx
 22168              	.LVL1767:
5984:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22169              		.loc 1 5984 0
 22170 8ce0 C1E118   		sall	$24, %ecx
 22171 8ce3 09CB     		orl	%ecx, %ebx
 22172 8ce5 8D4801   		leal	1(%rax), %ecx
 22173 8ce8 83C002   		addl	$2, %eax
 22174 8ceb 0FB68000 		movzbl	VM_memory(%rax), %eax
 22174      000000
 22175 8cf2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22175      000000
 22176 8cf9 C1E008   		sall	$8, %eax
 22177 8cfc C1E110   		sall	$16, %ecx
 22178 8cff 09CB     		orl	%ecx, %ebx
 22179 8d01 09C3     		orl	%eax, %ebx
 22180              	.LVL1768:
5985:src/vm3.c     ****   if (op1 == 0x0) {
 22181              		.loc 1 5985 0
 22182 8d03 89D9     		movl	%ebx, %ecx
5987:src/vm3.c     ****     op1 = op1 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 820


 22183              		.loc 1 5987 0
 22184 8d05 88D8     		movb	%bl, %al
5985:src/vm3.c     ****   if (op1 == 0x0) {
 22185              		.loc 1 5985 0
 22186 8d07 C1E91A   		shrl	$26, %ecx
 22187              	.LVL1769:
5987:src/vm3.c     ****     op1 = op1 + funct;
 22188              		.loc 1 5987 0
 22189 8d0a 83E03F   		andl	$63, %eax
 22190 8d0d 8D712B   		leal	43(%rcx), %esi
 22191 8d10 84C9     		testb	%cl, %cl
 22192 8d12 0F45C6   		cmovne	%esi, %eax
 22193              	.LVL1770:
5994:src/vm3.c     **** 
 22194              		.loc 1 5994 0
 22195 8d15 0FB6C0   		movzbl	%al, %eax
 22196 8d18 48C1E004 		salq	$4, %rax
 22197              	.LVL1771:
 22198 8d1c 48038414 		addq	58088(%rsp,%rdx), %rax
 22198      E8E20000 
 22199 8d24 488B08   		movq	(%rax), %rcx
 22200 8d27 E92C80FF 		jmp	.L269
 22200      FF
 22201              	.LVL1772:
 22202              	.L200:
6040:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 22203              		.loc 1 6040 0
 22204 8d2c 8B150000 		movl	nPC(%rip), %edx
 22204      0000
6039:src/vm3.c     **** PC = nPC;
 22205              		.loc 1 6039 0
 22206 8d32 8B050000 		movl	PC(%rip), %eax
 22206      0000
6041:src/vm3.c     **** nPC = address << 2;
 22207              		.loc 1 6041 0
 22208 8d38 4181E0FF 		andl	$67108863, %r8d
 22208      FFFF03
 22209              	.LVL1773:
6043:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22210              		.loc 1 6043 0
 22211 8d3f 8D4A03   		leal	3(%rdx), %ecx
6039:src/vm3.c     **** PC = nPC;
 22212              		.loc 1 6039 0
 22213 8d42 83C008   		addl	$8, %eax
6040:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 22214              		.loc 1 6040 0
 22215 8d45 89150000 		movl	%edx, PC(%rip)
 22215      0000
6039:src/vm3.c     **** PC = nPC;
 22216              		.loc 1 6039 0
 22217 8d4b 89050000 		movl	%eax, RF+124(%rip)
 22217      0000
6042:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22218              		.loc 1 6042 0
 22219 8d51 428D0485 		leal	0(,%r8,4), %eax
 22219      00000000 
6043:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 821


 22220              		.loc 1 6043 0
 22221 8d59 440FB681 		movzbl	VM_memory(%rcx), %r8d
 22221      00000000 
 22222 8d61 89D1     		movl	%edx, %ecx
 22223 8d63 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22223      000000
6042:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22224              		.loc 1 6042 0
 22225 8d6a 89050000 		movl	%eax, nPC(%rip)
 22225      0000
6043:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22226              		.loc 1 6043 0
 22227 8d70 C1E118   		sall	$24, %ecx
 22228 8d73 4109C8   		orl	%ecx, %r8d
 22229 8d76 8D4A01   		leal	1(%rdx), %ecx
 22230 8d79 83C202   		addl	$2, %edx
 22231 8d7c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22231      000000
 22232 8d83 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22232      000000
 22233 8d8a C1E208   		sall	$8, %edx
 22234 8d8d C1E110   		sall	$16, %ecx
 22235 8d90 4109C8   		orl	%ecx, %r8d
 22236 8d93 4109D0   		orl	%edx, %r8d
 22237              	.LVL1774:
6044:src/vm3.c     ****   if (op0 == 0x0) {
 22238              		.loc 1 6044 0
 22239 8d96 4489C1   		movl	%r8d, %ecx
6046:src/vm3.c     ****     op0 = op0 + funct;
 22240              		.loc 1 6046 0
 22241 8d99 4488C2   		movb	%r8b, %dl
6044:src/vm3.c     ****   if (op0 == 0x0) {
 22242              		.loc 1 6044 0
 22243 8d9c C1E91A   		shrl	$26, %ecx
 22244              	.LVL1775:
6046:src/vm3.c     ****     op0 = op0 + funct;
 22245              		.loc 1 6046 0
 22246 8d9f 83E23F   		andl	$63, %edx
 22247 8da2 8D712B   		leal	43(%rcx), %esi
 22248 8da5 84C9     		testb	%cl, %cl
6056:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22249              		.loc 1 6056 0
 22250 8da7 8D4803   		leal	3(%rax), %ecx
 22251              	.LVL1776:
 22252 8daa 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22252      000000
 22253              	.LVL1777:
 22254 8db1 89C1     		movl	%eax, %ecx
6046:src/vm3.c     ****     op0 = op0 + funct;
 22255              		.loc 1 6046 0
 22256 8db3 0F45D6   		cmovne	%esi, %edx
 22257              	.LVL1778:
6056:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22258              		.loc 1 6056 0
 22259 8db6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22259      000000
6054:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 822


 22260              		.loc 1 6054 0
 22261 8dbd 0FB6D2   		movzbl	%dl, %edx
 22262 8dc0 48C1E204 		salq	$4, %rdx
 22263              	.LVL1779:
6056:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22264              		.loc 1 6056 0
 22265 8dc4 C1E118   		sall	$24, %ecx
 22266 8dc7 09CB     		orl	%ecx, %ebx
 22267 8dc9 8D4801   		leal	1(%rax), %ecx
 22268 8dcc 83C002   		addl	$2, %eax
 22269 8dcf 0FB68000 		movzbl	VM_memory(%rax), %eax
 22269      000000
 22270 8dd6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22270      000000
 22271 8ddd C1E008   		sall	$8, %eax
 22272 8de0 C1E110   		sall	$16, %ecx
 22273 8de3 09CB     		orl	%ecx, %ebx
 22274 8de5 09C3     		orl	%eax, %ebx
 22275              	.LVL1780:
6057:src/vm3.c     ****   if (op1 == 0x0) {
 22276              		.loc 1 6057 0
 22277 8de7 89D9     		movl	%ebx, %ecx
6059:src/vm3.c     ****     op1 = op1 + funct;
 22278              		.loc 1 6059 0
 22279 8de9 88D8     		movb	%bl, %al
6057:src/vm3.c     ****   if (op1 == 0x0) {
 22280              		.loc 1 6057 0
 22281 8deb C1E91A   		shrl	$26, %ecx
 22282              	.LVL1781:
6059:src/vm3.c     ****     op1 = op1 + funct;
 22283              		.loc 1 6059 0
 22284 8dee 83E03F   		andl	$63, %eax
 22285 8df1 8D712B   		leal	43(%rcx), %esi
 22286 8df4 84C9     		testb	%cl, %cl
 22287 8df6 0F45C6   		cmovne	%esi, %eax
 22288              	.LVL1782:
6066:src/vm3.c     **** 
 22289              		.loc 1 6066 0
 22290 8df9 0FB6C0   		movzbl	%al, %eax
 22291 8dfc 48C1E004 		salq	$4, %rax
 22292              	.LVL1783:
 22293 8e00 48038414 		addq	58088(%rsp,%rdx), %rax
 22293      E8E20000 
 22294 8e08 488B08   		movq	(%rax), %rcx
 22295 8e0b E9487FFF 		jmp	.L269
 22295      FF
 22296              	.LVL1784:
 22297              	.L83:
6112:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 22298              		.loc 1 6112 0
 22299 8e10 4489C0   		movl	%r8d, %eax
6113:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 22300              		.loc 1 6113 0
 22301 8e13 4489C2   		movl	%r8d, %edx
6111:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22302              		.loc 1 6111 0
 22303 8e16 41C1E815 		shrl	$21, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 823


 22304              	.LVL1785:
6112:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 22305              		.loc 1 6112 0
 22306 8e1a C1E810   		shrl	$16, %eax
 22307              	.LVL1786:
6114:src/vm3.c     **** PC  =  nPC;
 22308              		.loc 1 6114 0
 22309 8e1d 4183E01F 		andl	$31, %r8d
6113:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 22310              		.loc 1 6113 0
 22311 8e21 C1EA0B   		shrl	$11, %edx
 22312              	.LVL1787:
6114:src/vm3.c     **** PC  =  nPC;
 22313              		.loc 1 6114 0
 22314 8e24 83E01F   		andl	$31, %eax
6122:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22315              		.loc 1 6122 0
 22316 8e27 89DE     		movl	%ebx, %esi
6123:src/vm3.c     **** if (RF[rs] != RF[rt])
 22317              		.loc 1 6123 0
 22318 8e29 89D9     		movl	%ebx, %ecx
6114:src/vm3.c     **** PC  =  nPC;
 22319              		.loc 1 6114 0
 22320 8e2b 8B048500 		movl	RF(,%rax,4), %eax
 22320      000000
 22321 8e32 42330485 		xorl	RF(,%r8,4), %eax
 22321      00000000 
 22322 8e3a 83E21F   		andl	$31, %edx
6122:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22323              		.loc 1 6122 0
 22324 8e3d C1EE15   		shrl	$21, %esi
6123:src/vm3.c     **** if (RF[rs] != RF[rt])
 22325              		.loc 1 6123 0
 22326 8e40 C1E910   		shrl	$16, %ecx
6124:src/vm3.c     **** {
 22327              		.loc 1 6124 0
 22328 8e43 83E61F   		andl	$31, %esi
 22329 8e46 83E11F   		andl	$31, %ecx
6114:src/vm3.c     **** PC  =  nPC;
 22330              		.loc 1 6114 0
 22331 8e49 89049500 		movl	%eax, RF(,%rdx,4)
 22331      000000
6115:src/vm3.c     **** nPC  += 4;
 22332              		.loc 1 6115 0
 22333 8e50 8B050000 		movl	nPC(%rip), %eax
 22333      0000
6124:src/vm3.c     **** {
 22334              		.loc 1 6124 0
 22335 8e56 8B3C8D00 		movl	RF(,%rcx,4), %edi
 22335      000000
 22336 8e5d 393CB500 		cmpl	%edi, RF(,%rsi,4)
 22336      000000
6116:src/vm3.c     **** 
 22337              		.loc 1 6116 0
 22338 8e64 8D5004   		leal	4(%rax), %edx
 22339              	.LVL1788:
 22340 8e67 448D4007 		leal	7(%rax), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 824


 22341 8e6b 8D7805   		leal	5(%rax), %edi
 22342 8e6e 8D7006   		leal	6(%rax), %esi
 22343 8e71 4189D1   		movl	%edx, %r9d
6127:src/vm3.c     ****   nPC  += (immediate << 2);
 22344              		.loc 1 6127 0
 22345 8e74 89150000 		movl	%edx, PC(%rip)
 22345      0000
6124:src/vm3.c     **** {
 22346              		.loc 1 6124 0
 22347 8e7a 0F84B600 		je	.L816
 22347      0000
 22348              	.LVL1789:
6128:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 22349              		.loc 1 6128 0
 22350 8e80 0FBFDB   		movswl	%bx, %ebx
 22351              	.LVL1790:
6129:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22352              		.loc 1 6129 0
 22353 8e83 450FB680 		movzbl	VM_memory(%r8), %r8d
 22353      00000000 
6128:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 22354              		.loc 1 6128 0
 22355 8e8b 8D049A   		leal	(%rdx,%rbx,4), %eax
6129:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22356              		.loc 1 6129 0
 22357 8e8e 410FB691 		movzbl	VM_memory(%r9), %edx
 22357      00000000 
6128:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 22358              		.loc 1 6128 0
 22359 8e96 89050000 		movl	%eax, nPC(%rip)
 22359      0000
6129:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22360              		.loc 1 6129 0
 22361 8e9c C1E218   		sall	$24, %edx
 22362 8e9f 4109D0   		orl	%edx, %r8d
 22363 8ea2 0FB69700 		movzbl	VM_memory(%rdi), %edx
 22363      000000
 22364 8ea9 C1E210   		sall	$16, %edx
 22365 8eac 4109D0   		orl	%edx, %r8d
 22366 8eaf 0FB69600 		movzbl	VM_memory(%rsi), %edx
 22366      000000
 22367 8eb6 C1E208   		sall	$8, %edx
 22368 8eb9 4109D0   		orl	%edx, %r8d
 22369              	.LVL1791:
6130:src/vm3.c     ****   if (op0 == 0x0) {
 22370              		.loc 1 6130 0
 22371 8ebc 4489C1   		movl	%r8d, %ecx
6132:src/vm3.c     ****     op0 = op0 + funct;
 22372              		.loc 1 6132 0
 22373 8ebf 4488C2   		movb	%r8b, %dl
6130:src/vm3.c     ****   if (op0 == 0x0) {
 22374              		.loc 1 6130 0
 22375 8ec2 C1E91A   		shrl	$26, %ecx
 22376              	.LVL1792:
6132:src/vm3.c     ****     op0 = op0 + funct;
 22377              		.loc 1 6132 0
 22378 8ec5 83E23F   		andl	$63, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 825


 22379 8ec8 8D712B   		leal	43(%rcx), %esi
 22380 8ecb 84C9     		testb	%cl, %cl
6142:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22381              		.loc 1 6142 0
 22382 8ecd 8D4803   		leal	3(%rax), %ecx
 22383              	.LVL1793:
 22384 8ed0 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22384      000000
 22385              	.LVL1794:
 22386 8ed7 89C1     		movl	%eax, %ecx
6132:src/vm3.c     ****     op0 = op0 + funct;
 22387              		.loc 1 6132 0
 22388 8ed9 0F45D6   		cmovne	%esi, %edx
 22389              	.LVL1795:
6142:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22390              		.loc 1 6142 0
 22391 8edc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22391      000000
6140:src/vm3.c     **** 
 22392              		.loc 1 6140 0
 22393 8ee3 0FB6D2   		movzbl	%dl, %edx
 22394 8ee6 48C1E204 		salq	$4, %rdx
 22395              	.LVL1796:
6142:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22396              		.loc 1 6142 0
 22397 8eea C1E118   		sall	$24, %ecx
 22398 8eed 09CB     		orl	%ecx, %ebx
 22399 8eef 8D4801   		leal	1(%rax), %ecx
 22400 8ef2 83C002   		addl	$2, %eax
 22401 8ef5 0FB68000 		movzbl	VM_memory(%rax), %eax
 22401      000000
 22402 8efc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22402      000000
 22403 8f03 C1E008   		sall	$8, %eax
 22404 8f06 C1E110   		sall	$16, %ecx
 22405 8f09 09CB     		orl	%ecx, %ebx
 22406 8f0b 09C3     		orl	%eax, %ebx
 22407              	.LVL1797:
6143:src/vm3.c     ****   if (op1 == 0x0) {
 22408              		.loc 1 6143 0
 22409 8f0d 89D9     		movl	%ebx, %ecx
6145:src/vm3.c     ****     op1 = op1 + funct;
 22410              		.loc 1 6145 0
 22411 8f0f 88D8     		movb	%bl, %al
6143:src/vm3.c     ****   if (op1 == 0x0) {
 22412              		.loc 1 6143 0
 22413 8f11 C1E91A   		shrl	$26, %ecx
 22414              	.LVL1798:
6145:src/vm3.c     ****     op1 = op1 + funct;
 22415              		.loc 1 6145 0
 22416 8f14 83E03F   		andl	$63, %eax
 22417 8f17 8D712B   		leal	43(%rcx), %esi
 22418 8f1a 84C9     		testb	%cl, %cl
 22419 8f1c 0F45C6   		cmovne	%esi, %eax
 22420              	.LVL1799:
6152:src/vm3.c     **** 
 22421              		.loc 1 6152 0
GAS LISTING /tmp/cc15eBE3.s 			page 826


 22422 8f1f 0FB6C0   		movzbl	%al, %eax
 22423 8f22 48C1E004 		salq	$4, %rax
 22424              	.LVL1800:
 22425 8f26 48038414 		addq	58088(%rsp,%rdx), %rax
 22425      E8E20000 
 22426 8f2e 488B08   		movq	(%rax), %rcx
 22427 8f31 E9227EFF 		jmp	.L269
 22427      FF
 22428              	.LVL1801:
 22429              	.L816:
6161:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22430              		.loc 1 6161 0
 22431 8f36 410FB691 		movzbl	VM_memory(%r9), %edx
 22431      00000000 
 22432 8f3e 450FB680 		movzbl	VM_memory(%r8), %r8d
 22432      00000000 
6159:src/vm3.c     **** }
 22433              		.loc 1 6159 0
 22434 8f46 8D4808   		leal	8(%rax), %ecx
6174:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22435              		.loc 1 6174 0
 22436 8f49 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22436      000000
 22437              	.LVL1802:
6159:src/vm3.c     **** }
 22438              		.loc 1 6159 0
 22439 8f50 890D0000 		movl	%ecx, nPC(%rip)
 22439      0000
6174:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22440              		.loc 1 6174 0
 22441 8f56 8D4809   		leal	9(%rax), %ecx
6161:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22442              		.loc 1 6161 0
 22443 8f59 C1E218   		sall	$24, %edx
6174:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22444              		.loc 1 6174 0
 22445 8f5c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22445      000000
6161:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22446              		.loc 1 6161 0
 22447 8f63 4109D0   		orl	%edx, %r8d
 22448 8f66 0FB69700 		movzbl	VM_memory(%rdi), %edx
 22448      000000
 22449 8f6d C1E210   		sall	$16, %edx
 22450 8f70 4109D0   		orl	%edx, %r8d
 22451 8f73 0FB69600 		movzbl	VM_memory(%rsi), %edx
 22451      000000
 22452 8f7a C1E208   		sall	$8, %edx
 22453 8f7d 4109D0   		orl	%edx, %r8d
 22454              	.LVL1803:
6162:src/vm3.c     ****   if (op0 == 0x0) {
 22455              		.loc 1 6162 0
 22456 8f80 4489C6   		movl	%r8d, %esi
6164:src/vm3.c     ****     op0 = op0 + funct;
 22457              		.loc 1 6164 0
 22458 8f83 4488C2   		movb	%r8b, %dl
6162:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 827


 22459              		.loc 1 6162 0
 22460 8f86 C1EE1A   		shrl	$26, %esi
 22461              	.LVL1804:
6164:src/vm3.c     ****     op0 = op0 + funct;
 22462              		.loc 1 6164 0
 22463 8f89 83E23F   		andl	$63, %edx
 22464 8f8c 8D7E2B   		leal	43(%rsi), %edi
 22465 8f8f 4084F6   		testb	%sil, %sil
 22466 8f92 0F45D7   		cmovne	%edi, %edx
 22467              	.LVL1805:
6174:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22468              		.loc 1 6174 0
 22469 8f95 C1E110   		sall	$16, %ecx
 22470 8f98 C1E318   		sall	$24, %ebx
 22471 8f9b 09CB     		orl	%ecx, %ebx
 22472 8f9d 8D480B   		leal	11(%rax), %ecx
 22473 8fa0 83C00A   		addl	$10, %eax
 22474 8fa3 0FB68000 		movzbl	VM_memory(%rax), %eax
 22474      000000
6172:src/vm3.c     **** 
 22475              		.loc 1 6172 0
 22476 8faa 0FB6D2   		movzbl	%dl, %edx
6174:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22477              		.loc 1 6174 0
 22478 8fad 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22478      000000
6172:src/vm3.c     **** 
 22479              		.loc 1 6172 0
 22480 8fb4 48C1E204 		salq	$4, %rdx
 22481              	.LVL1806:
6174:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22482              		.loc 1 6174 0
 22483 8fb8 C1E008   		sall	$8, %eax
 22484 8fbb 09CB     		orl	%ecx, %ebx
 22485 8fbd 09C3     		orl	%eax, %ebx
 22486              	.LVL1807:
6175:src/vm3.c     ****   if (op1 == 0x0) {
 22487              		.loc 1 6175 0
 22488 8fbf 89D9     		movl	%ebx, %ecx
6177:src/vm3.c     ****     op1 = op1 + funct;
 22489              		.loc 1 6177 0
 22490 8fc1 88D8     		movb	%bl, %al
6175:src/vm3.c     ****   if (op1 == 0x0) {
 22491              		.loc 1 6175 0
 22492 8fc3 C1E91A   		shrl	$26, %ecx
 22493              	.LVL1808:
6177:src/vm3.c     ****     op1 = op1 + funct;
 22494              		.loc 1 6177 0
 22495 8fc6 83E03F   		andl	$63, %eax
 22496 8fc9 8D712B   		leal	43(%rcx), %esi
 22497 8fcc 84C9     		testb	%cl, %cl
 22498 8fce 0F45C6   		cmovne	%esi, %eax
 22499              	.LVL1809:
6184:src/vm3.c     **** 
 22500              		.loc 1 6184 0
 22501 8fd1 0FB6C0   		movzbl	%al, %eax
 22502 8fd4 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 828


 22503              	.LVL1810:
 22504 8fd8 48038414 		addq	58088(%rsp,%rdx), %rax
 22504      E8E20000 
 22505 8fe0 488B08   		movq	(%rax), %rcx
 22506 8fe3 E9707DFF 		jmp	.L269
 22506      FF
 22507              	.LVL1811:
 22508              	.L145:
6192:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22509              		.loc 1 6192 0
 22510 8fe8 4489C2   		movl	%r8d, %edx
6193:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 22511              		.loc 1 6193 0
 22512 8feb 4489C0   		movl	%r8d, %eax
6195:src/vm3.c     **** PC  =  nPC;
 22513              		.loc 1 6195 0
 22514 8fee 450FBFC0 		movswl	%r8w, %r8d
 22515              	.LVL1812:
6192:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22516              		.loc 1 6192 0
 22517 8ff2 C1EA15   		shrl	$21, %edx
6193:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 22518              		.loc 1 6193 0
 22519 8ff5 C1E810   		shrl	$16, %eax
 22520              	.LVL1813:
6203:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22521              		.loc 1 6203 0
 22522 8ff8 89DE     		movl	%ebx, %esi
6195:src/vm3.c     **** PC  =  nPC;
 22523              		.loc 1 6195 0
 22524 8ffa 83E21F   		andl	$31, %edx
6204:src/vm3.c     **** if (RF[rs] != RF[rt])
 22525              		.loc 1 6204 0
 22526 8ffd 89D9     		movl	%ebx, %ecx
6195:src/vm3.c     **** PC  =  nPC;
 22527              		.loc 1 6195 0
 22528 8fff 83E01F   		andl	$31, %eax
 22529 9002 44030495 		addl	RF(,%rdx,4), %r8d
 22529      00000000 
 22530              	.LVL1814:
6203:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22531              		.loc 1 6203 0
 22532 900a C1EE15   		shrl	$21, %esi
6204:src/vm3.c     **** if (RF[rs] != RF[rt])
 22533              		.loc 1 6204 0
 22534 900d C1E910   		shrl	$16, %ecx
6205:src/vm3.c     **** {
 22535              		.loc 1 6205 0
 22536 9010 83E61F   		andl	$31, %esi
 22537 9013 83E11F   		andl	$31, %ecx
6195:src/vm3.c     **** PC  =  nPC;
 22538              		.loc 1 6195 0
 22539 9016 44890485 		movl	%r8d, RF(,%rax,4)
 22539      00000000 
6196:src/vm3.c     **** nPC  += 4;
 22540              		.loc 1 6196 0
 22541 901e 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 829


 22541      0000
6205:src/vm3.c     **** {
 22542              		.loc 1 6205 0
 22543 9024 8B3C8D00 		movl	RF(,%rcx,4), %edi
 22543      000000
 22544 902b 393CB500 		cmpl	%edi, RF(,%rsi,4)
 22544      000000
6197:src/vm3.c     **** 
 22545              		.loc 1 6197 0
 22546 9032 8D5004   		leal	4(%rax), %edx
 22547              	.LVL1815:
 22548 9035 448D4007 		leal	7(%rax), %r8d
 22549 9039 8D7805   		leal	5(%rax), %edi
 22550 903c 8D7006   		leal	6(%rax), %esi
 22551 903f 4189D1   		movl	%edx, %r9d
6208:src/vm3.c     ****   nPC  += (immediate << 2);
 22552              		.loc 1 6208 0
 22553 9042 89150000 		movl	%edx, PC(%rip)
 22553      0000
6205:src/vm3.c     **** {
 22554              		.loc 1 6205 0
 22555 9048 0F84B600 		je	.L825
 22555      0000
 22556              	.LVL1816:
6209:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 22557              		.loc 1 6209 0
 22558 904e 0FBFDB   		movswl	%bx, %ebx
 22559              	.LVL1817:
6210:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22560              		.loc 1 6210 0
 22561 9051 450FB680 		movzbl	VM_memory(%r8), %r8d
 22561      00000000 
6209:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 22562              		.loc 1 6209 0
 22563 9059 8D049A   		leal	(%rdx,%rbx,4), %eax
6210:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22564              		.loc 1 6210 0
 22565 905c 410FB691 		movzbl	VM_memory(%r9), %edx
 22565      00000000 
6209:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 22566              		.loc 1 6209 0
 22567 9064 89050000 		movl	%eax, nPC(%rip)
 22567      0000
6210:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22568              		.loc 1 6210 0
 22569 906a C1E218   		sall	$24, %edx
 22570 906d 4109D0   		orl	%edx, %r8d
 22571 9070 0FB69700 		movzbl	VM_memory(%rdi), %edx
 22571      000000
 22572 9077 C1E210   		sall	$16, %edx
 22573 907a 4109D0   		orl	%edx, %r8d
 22574 907d 0FB69600 		movzbl	VM_memory(%rsi), %edx
 22574      000000
 22575 9084 C1E208   		sall	$8, %edx
 22576 9087 4109D0   		orl	%edx, %r8d
 22577              	.LVL1818:
6211:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 830


 22578              		.loc 1 6211 0
 22579 908a 4489C1   		movl	%r8d, %ecx
6213:src/vm3.c     ****     op0 = op0 + funct;
 22580              		.loc 1 6213 0
 22581 908d 4488C2   		movb	%r8b, %dl
6211:src/vm3.c     ****   if (op0 == 0x0) {
 22582              		.loc 1 6211 0
 22583 9090 C1E91A   		shrl	$26, %ecx
 22584              	.LVL1819:
6213:src/vm3.c     ****     op0 = op0 + funct;
 22585              		.loc 1 6213 0
 22586 9093 83E23F   		andl	$63, %edx
 22587 9096 8D712B   		leal	43(%rcx), %esi
 22588 9099 84C9     		testb	%cl, %cl
6223:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22589              		.loc 1 6223 0
 22590 909b 8D4803   		leal	3(%rax), %ecx
 22591              	.LVL1820:
 22592 909e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22592      000000
 22593              	.LVL1821:
 22594 90a5 89C1     		movl	%eax, %ecx
6213:src/vm3.c     ****     op0 = op0 + funct;
 22595              		.loc 1 6213 0
 22596 90a7 0F45D6   		cmovne	%esi, %edx
 22597              	.LVL1822:
6223:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22598              		.loc 1 6223 0
 22599 90aa 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22599      000000
6221:src/vm3.c     **** 
 22600              		.loc 1 6221 0
 22601 90b1 0FB6D2   		movzbl	%dl, %edx
 22602 90b4 48C1E204 		salq	$4, %rdx
 22603              	.LVL1823:
6223:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22604              		.loc 1 6223 0
 22605 90b8 C1E118   		sall	$24, %ecx
 22606 90bb 09CB     		orl	%ecx, %ebx
 22607 90bd 8D4801   		leal	1(%rax), %ecx
 22608 90c0 83C002   		addl	$2, %eax
 22609 90c3 0FB68000 		movzbl	VM_memory(%rax), %eax
 22609      000000
 22610 90ca 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22610      000000
 22611 90d1 C1E008   		sall	$8, %eax
 22612 90d4 C1E110   		sall	$16, %ecx
 22613 90d7 09CB     		orl	%ecx, %ebx
 22614 90d9 09C3     		orl	%eax, %ebx
 22615              	.LVL1824:
6224:src/vm3.c     ****   if (op1 == 0x0) {
 22616              		.loc 1 6224 0
 22617 90db 89D9     		movl	%ebx, %ecx
6226:src/vm3.c     ****     op1 = op1 + funct;
 22618              		.loc 1 6226 0
 22619 90dd 88D8     		movb	%bl, %al
6224:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 831


 22620              		.loc 1 6224 0
 22621 90df C1E91A   		shrl	$26, %ecx
 22622              	.LVL1825:
6226:src/vm3.c     ****     op1 = op1 + funct;
 22623              		.loc 1 6226 0
 22624 90e2 83E03F   		andl	$63, %eax
 22625 90e5 8D712B   		leal	43(%rcx), %esi
 22626 90e8 84C9     		testb	%cl, %cl
 22627 90ea 0F45C6   		cmovne	%esi, %eax
 22628              	.LVL1826:
6233:src/vm3.c     **** 
 22629              		.loc 1 6233 0
 22630 90ed 0FB6C0   		movzbl	%al, %eax
 22631 90f0 48C1E004 		salq	$4, %rax
 22632              	.LVL1827:
 22633 90f4 48038414 		addq	58088(%rsp,%rdx), %rax
 22633      E8E20000 
 22634 90fc 488B08   		movq	(%rax), %rcx
 22635 90ff E9547CFF 		jmp	.L269
 22635      FF
 22636              	.LVL1828:
 22637              	.L825:
6242:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22638              		.loc 1 6242 0
 22639 9104 410FB691 		movzbl	VM_memory(%r9), %edx
 22639      00000000 
 22640 910c 450FB680 		movzbl	VM_memory(%r8), %r8d
 22640      00000000 
6240:src/vm3.c     **** }
 22641              		.loc 1 6240 0
 22642 9114 8D4808   		leal	8(%rax), %ecx
6255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22643              		.loc 1 6255 0
 22644 9117 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22644      000000
 22645              	.LVL1829:
6240:src/vm3.c     **** }
 22646              		.loc 1 6240 0
 22647 911e 890D0000 		movl	%ecx, nPC(%rip)
 22647      0000
6255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22648              		.loc 1 6255 0
 22649 9124 8D4809   		leal	9(%rax), %ecx
6242:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22650              		.loc 1 6242 0
 22651 9127 C1E218   		sall	$24, %edx
6255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22652              		.loc 1 6255 0
 22653 912a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22653      000000
6242:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22654              		.loc 1 6242 0
 22655 9131 4109D0   		orl	%edx, %r8d
 22656 9134 0FB69700 		movzbl	VM_memory(%rdi), %edx
 22656      000000
 22657 913b C1E210   		sall	$16, %edx
 22658 913e 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 832


 22659 9141 0FB69600 		movzbl	VM_memory(%rsi), %edx
 22659      000000
 22660 9148 C1E208   		sall	$8, %edx
 22661 914b 4109D0   		orl	%edx, %r8d
 22662              	.LVL1830:
6243:src/vm3.c     ****   if (op0 == 0x0) {
 22663              		.loc 1 6243 0
 22664 914e 4489C6   		movl	%r8d, %esi
6245:src/vm3.c     ****     op0 = op0 + funct;
 22665              		.loc 1 6245 0
 22666 9151 4488C2   		movb	%r8b, %dl
6243:src/vm3.c     ****   if (op0 == 0x0) {
 22667              		.loc 1 6243 0
 22668 9154 C1EE1A   		shrl	$26, %esi
 22669              	.LVL1831:
6245:src/vm3.c     ****     op0 = op0 + funct;
 22670              		.loc 1 6245 0
 22671 9157 83E23F   		andl	$63, %edx
 22672 915a 8D7E2B   		leal	43(%rsi), %edi
 22673 915d 4084F6   		testb	%sil, %sil
 22674 9160 0F45D7   		cmovne	%edi, %edx
 22675              	.LVL1832:
6255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22676              		.loc 1 6255 0
 22677 9163 C1E110   		sall	$16, %ecx
 22678 9166 C1E318   		sall	$24, %ebx
 22679 9169 09CB     		orl	%ecx, %ebx
 22680 916b 8D480B   		leal	11(%rax), %ecx
 22681 916e 83C00A   		addl	$10, %eax
 22682 9171 0FB68000 		movzbl	VM_memory(%rax), %eax
 22682      000000
6253:src/vm3.c     **** 
 22683              		.loc 1 6253 0
 22684 9178 0FB6D2   		movzbl	%dl, %edx
6255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22685              		.loc 1 6255 0
 22686 917b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22686      000000
6253:src/vm3.c     **** 
 22687              		.loc 1 6253 0
 22688 9182 48C1E204 		salq	$4, %rdx
 22689              	.LVL1833:
6255:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22690              		.loc 1 6255 0
 22691 9186 C1E008   		sall	$8, %eax
 22692 9189 09CB     		orl	%ecx, %ebx
 22693 918b 09C3     		orl	%eax, %ebx
 22694              	.LVL1834:
6256:src/vm3.c     ****   if (op1 == 0x0) {
 22695              		.loc 1 6256 0
 22696 918d 89D9     		movl	%ebx, %ecx
6258:src/vm3.c     ****     op1 = op1 + funct;
 22697              		.loc 1 6258 0
 22698 918f 88D8     		movb	%bl, %al
6256:src/vm3.c     ****   if (op1 == 0x0) {
 22699              		.loc 1 6256 0
 22700 9191 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 833


 22701              	.LVL1835:
6258:src/vm3.c     ****     op1 = op1 + funct;
 22702              		.loc 1 6258 0
 22703 9194 83E03F   		andl	$63, %eax
 22704 9197 8D712B   		leal	43(%rcx), %esi
 22705 919a 84C9     		testb	%cl, %cl
 22706 919c 0F45C6   		cmovne	%esi, %eax
 22707              	.LVL1836:
6265:src/vm3.c     **** 
 22708              		.loc 1 6265 0
 22709 919f 0FB6C0   		movzbl	%al, %eax
 22710 91a2 48C1E004 		salq	$4, %rax
 22711              	.LVL1837:
 22712 91a6 48038414 		addq	58088(%rsp,%rdx), %rax
 22712      E8E20000 
 22713 91ae 488B08   		movq	(%rax), %rcx
 22714 91b1 E9A27BFF 		jmp	.L269
 22714      FF
 22715              	.LVL1838:
 22716              	.L20:
6274:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 22717              		.loc 1 6274 0
 22718 91b6 4489C0   		movl	%r8d, %eax
6275:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 22719              		.loc 1 6275 0
 22720 91b9 4489C2   		movl	%r8d, %edx
6273:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22721              		.loc 1 6273 0
 22722 91bc 41C1E806 		shrl	$6, %r8d
 22723              	.LVL1839:
6274:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 22724              		.loc 1 6274 0
 22725 91c0 C1E810   		shrl	$16, %eax
 22726              	.LVL1840:
6273:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22727              		.loc 1 6273 0
 22728 91c3 4488C1   		movb	%r8b, %cl
6275:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 22729              		.loc 1 6275 0
 22730 91c6 C1EA0B   		shrl	$11, %edx
 22731              	.LVL1841:
6276:src/vm3.c     **** PC  =  nPC;
 22732              		.loc 1 6276 0
 22733 91c9 83E01F   		andl	$31, %eax
6273:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22734              		.loc 1 6273 0
 22735 91cc 83E11F   		andl	$31, %ecx
6276:src/vm3.c     **** PC  =  nPC;
 22736              		.loc 1 6276 0
 22737 91cf 83E21F   		andl	$31, %edx
 22738 91d2 8B048500 		movl	RF(,%rax,4), %eax
 22738      000000
6278:src/vm3.c     **** 
 22739              		.loc 1 6278 0
 22740 91d9 83050000 		addl	$4, nPC(%rip)
 22740      000004
 22741              	.LVL1842:
GAS LISTING /tmp/cc15eBE3.s 			page 834


6276:src/vm3.c     **** PC  =  nPC;
 22742              		.loc 1 6276 0
 22743 91e0 D3E0     		sall	%cl, %eax
 22744 91e2 89049500 		movl	%eax, RF(,%rdx,4)
 22744      000000
6285:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 22745              		.loc 1 6285 0
 22746 91e9 89D8     		movl	%ebx, %eax
6286:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 22747              		.loc 1 6286 0
 22748 91eb 89DA     		movl	%ebx, %edx
6285:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 22749              		.loc 1 6285 0
 22750 91ed C1E810   		shrl	$16, %eax
6284:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22751              		.loc 1 6284 0
 22752 91f0 C1EB15   		shrl	$21, %ebx
 22753              	.LVL1843:
6286:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 22754              		.loc 1 6286 0
 22755 91f3 C1EA0B   		shrl	$11, %edx
 22756              	.LVL1844:
6287:src/vm3.c     **** PC  =  nPC;
 22757              		.loc 1 6287 0
 22758 91f6 83E31F   		andl	$31, %ebx
 22759 91f9 83E01F   		andl	$31, %eax
 22760 91fc 83E21F   		andl	$31, %edx
 22761 91ff 8B048500 		movl	RF(,%rax,4), %eax
 22761      000000
 22762 9206 23049D00 		andl	RF(,%rbx,4), %eax
 22762      000000
 22763 920d 89049500 		movl	%eax, RF(,%rdx,4)
 22763      000000
6288:src/vm3.c     **** nPC  += 4;
 22764              		.loc 1 6288 0
 22765 9214 8B050000 		movl	nPC(%rip), %eax
 22765      0000
6290:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22766              		.loc 1 6290 0
 22767 921a 8D5003   		leal	3(%rax), %edx
6289:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22768              		.loc 1 6289 0
 22769 921d 8D4804   		leal	4(%rax), %ecx
6288:src/vm3.c     **** nPC  += 4;
 22770              		.loc 1 6288 0
 22771 9220 89050000 		movl	%eax, PC(%rip)
 22771      0000
6290:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22772              		.loc 1 6290 0
 22773 9226 440FB682 		movzbl	VM_memory(%rdx), %r8d
 22773      00000000 
 22774 922e 89C2     		movl	%eax, %edx
6303:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22775              		.loc 1 6303 0
 22776 9230 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22776      000000
6290:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 835


 22777              		.loc 1 6290 0
 22778 9237 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22778      000000
6289:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22779              		.loc 1 6289 0
 22780 923e 890D0000 		movl	%ecx, nPC(%rip)
 22780      0000
6303:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22781              		.loc 1 6303 0
 22782 9244 8D4805   		leal	5(%rax), %ecx
 22783 9247 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22783      000000
6290:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22784              		.loc 1 6290 0
 22785 924e C1E218   		sall	$24, %edx
 22786 9251 4109D0   		orl	%edx, %r8d
 22787 9254 8D5001   		leal	1(%rax), %edx
 22788 9257 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22788      000000
 22789 925e C1E210   		sall	$16, %edx
 22790 9261 4109D0   		orl	%edx, %r8d
 22791 9264 8D5002   		leal	2(%rax), %edx
 22792 9267 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22792      000000
 22793 926e C1E208   		sall	$8, %edx
 22794 9271 4109D0   		orl	%edx, %r8d
 22795              	.LVL1845:
6291:src/vm3.c     ****   if (op0 == 0x0) {
 22796              		.loc 1 6291 0
 22797 9274 4489C6   		movl	%r8d, %esi
6293:src/vm3.c     ****     op0 = op0 + funct;
 22798              		.loc 1 6293 0
 22799 9277 4488C2   		movb	%r8b, %dl
6291:src/vm3.c     ****   if (op0 == 0x0) {
 22800              		.loc 1 6291 0
 22801 927a C1EE1A   		shrl	$26, %esi
 22802              	.LVL1846:
6293:src/vm3.c     ****     op0 = op0 + funct;
 22803              		.loc 1 6293 0
 22804 927d 83E23F   		andl	$63, %edx
 22805 9280 8D7E2B   		leal	43(%rsi), %edi
 22806 9283 4084F6   		testb	%sil, %sil
 22807 9286 0F45D7   		cmovne	%edi, %edx
 22808              	.LVL1847:
6303:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22809              		.loc 1 6303 0
 22810 9289 C1E110   		sall	$16, %ecx
 22811 928c C1E318   		sall	$24, %ebx
 22812 928f 09CB     		orl	%ecx, %ebx
 22813 9291 8D4807   		leal	7(%rax), %ecx
 22814 9294 83C006   		addl	$6, %eax
 22815 9297 0FB68000 		movzbl	VM_memory(%rax), %eax
 22815      000000
6301:src/vm3.c     **** 
 22816              		.loc 1 6301 0
 22817 929e 0FB6D2   		movzbl	%dl, %edx
6303:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 836


 22818              		.loc 1 6303 0
 22819 92a1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22819      000000
6301:src/vm3.c     **** 
 22820              		.loc 1 6301 0
 22821 92a8 48C1E204 		salq	$4, %rdx
 22822              	.LVL1848:
6303:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22823              		.loc 1 6303 0
 22824 92ac C1E008   		sall	$8, %eax
 22825 92af 09CB     		orl	%ecx, %ebx
 22826 92b1 09C3     		orl	%eax, %ebx
 22827              	.LVL1849:
6304:src/vm3.c     ****   if (op1 == 0x0) {
 22828              		.loc 1 6304 0
 22829 92b3 89D9     		movl	%ebx, %ecx
6306:src/vm3.c     ****     op1 = op1 + funct;
 22830              		.loc 1 6306 0
 22831 92b5 88D8     		movb	%bl, %al
6304:src/vm3.c     ****   if (op1 == 0x0) {
 22832              		.loc 1 6304 0
 22833 92b7 C1E91A   		shrl	$26, %ecx
 22834              	.LVL1850:
6306:src/vm3.c     ****     op1 = op1 + funct;
 22835              		.loc 1 6306 0
 22836 92ba 83E03F   		andl	$63, %eax
 22837 92bd 8D712B   		leal	43(%rcx), %esi
 22838 92c0 84C9     		testb	%cl, %cl
 22839 92c2 0F45C6   		cmovne	%esi, %eax
 22840              	.LVL1851:
6313:src/vm3.c     **** 
 22841              		.loc 1 6313 0
 22842 92c5 0FB6C0   		movzbl	%al, %eax
 22843 92c8 48C1E004 		salq	$4, %rax
 22844              	.LVL1852:
 22845 92cc 48038414 		addq	58088(%rsp,%rdx), %rax
 22845      E8E20000 
 22846 92d4 488B08   		movq	(%rax), %rcx
 22847 92d7 E97C7AFF 		jmp	.L269
 22847      FF
 22848              	.LVL1853:
 22849              	.L8:
6322:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 22850              		.loc 1 6322 0
 22851 92dc 4489C0   		movl	%r8d, %eax
6324:src/vm3.c     **** PC  =  nPC;
 22852              		.loc 1 6324 0
 22853 92df 41C1E010 		sall	$16, %r8d
 22854              	.LVL1854:
6335:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 22855              		.loc 1 6335 0
 22856 92e3 0FBFCB   		movswl	%bx, %ecx
6322:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 22857              		.loc 1 6322 0
 22858 92e6 C1E810   		shrl	$16, %eax
 22859              	.LVL1855:
6326:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 837


 22860              		.loc 1 6326 0
 22861 92e9 83050000 		addl	$4, nPC(%rip)
 22861      000004
 22862              	.LVL1856:
6324:src/vm3.c     **** PC  =  nPC;
 22863              		.loc 1 6324 0
 22864 92f0 83E01F   		andl	$31, %eax
 22865 92f3 44890485 		movl	%r8d, RF(,%rax,4)
 22865      00000000 
6332:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22866              		.loc 1 6332 0
 22867 92fb 89D8     		movl	%ebx, %eax
6333:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 22868              		.loc 1 6333 0
 22869 92fd C1EB10   		shrl	$16, %ebx
 22870              	.LVL1857:
6332:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 22871              		.loc 1 6332 0
 22872 9300 C1E815   		shrl	$21, %eax
 22873              	.LVL1858:
6335:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 22874              		.loc 1 6335 0
 22875 9303 83E31F   		andl	$31, %ebx
 22876 9306 83E01F   		andl	$31, %eax
 22877 9309 8B148500 		movl	RF(,%rax,4), %edx
 22877      000000
 22878 9310 8B049D00 		movl	RF(,%rbx,4), %eax
 22878      000000
 22879 9317 8D3411   		leal	(%rcx,%rdx), %esi
 22880 931a 89C7     		movl	%eax, %edi
 22881 931c C1EF18   		shrl	$24, %edi
 22882 931f 4088BE00 		movb	%dil, VM_memory(%rsi)
 22882      000000
6336:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 22883              		.loc 1 6336 0
 22884 9326 8D741101 		leal	1(%rcx,%rdx), %esi
 22885 932a 89C7     		movl	%eax, %edi
 22886 932c C1EF10   		shrl	$16, %edi
 22887 932f 4088BE00 		movb	%dil, VM_memory(%rsi)
 22887      000000
6337:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 22888              		.loc 1 6337 0
 22889 9336 8D741102 		leal	2(%rcx,%rdx), %esi
6338:src/vm3.c     **** PC  =  nPC;
 22890              		.loc 1 6338 0
 22891 933a 8D541103 		leal	3(%rcx,%rdx), %edx
6337:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 22892              		.loc 1 6337 0
 22893 933e 0FB6FC   		movzbl	%ah, %edi
 22894 9341 4088BE00 		movb	%dil, VM_memory(%rsi)
 22894      000000
6338:src/vm3.c     **** PC  =  nPC;
 22895              		.loc 1 6338 0
 22896 9348 88820000 		movb	%al, VM_memory(%rdx)
 22896      0000
6339:src/vm3.c     **** nPC  += 4;
 22897              		.loc 1 6339 0
GAS LISTING /tmp/cc15eBE3.s 			page 838


 22898 934e 8B050000 		movl	nPC(%rip), %eax
 22898      0000
6341:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22899              		.loc 1 6341 0
 22900 9354 8D5003   		leal	3(%rax), %edx
6340:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22901              		.loc 1 6340 0
 22902 9357 8D4804   		leal	4(%rax), %ecx
 22903              	.LVL1859:
6339:src/vm3.c     **** nPC  += 4;
 22904              		.loc 1 6339 0
 22905 935a 89050000 		movl	%eax, PC(%rip)
 22905      0000
6341:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22906              		.loc 1 6341 0
 22907 9360 440FB682 		movzbl	VM_memory(%rdx), %r8d
 22907      00000000 
 22908 9368 89C2     		movl	%eax, %edx
6354:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22909              		.loc 1 6354 0
 22910 936a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 22910      000000
6341:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22911              		.loc 1 6341 0
 22912 9371 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22912      000000
6340:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 22913              		.loc 1 6340 0
 22914 9378 890D0000 		movl	%ecx, nPC(%rip)
 22914      0000
6354:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22915              		.loc 1 6354 0
 22916 937e 8D4805   		leal	5(%rax), %ecx
 22917 9381 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22917      000000
6341:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 22918              		.loc 1 6341 0
 22919 9388 C1E218   		sall	$24, %edx
 22920 938b 4109D0   		orl	%edx, %r8d
 22921 938e 8D5001   		leal	1(%rax), %edx
 22922 9391 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22922      000000
 22923 9398 C1E210   		sall	$16, %edx
 22924 939b 4109D0   		orl	%edx, %r8d
 22925 939e 8D5002   		leal	2(%rax), %edx
 22926 93a1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 22926      000000
 22927 93a8 C1E208   		sall	$8, %edx
 22928 93ab 4109D0   		orl	%edx, %r8d
 22929              	.LVL1860:
6342:src/vm3.c     ****   if (op0 == 0x0) {
 22930              		.loc 1 6342 0
 22931 93ae 4489C6   		movl	%r8d, %esi
6344:src/vm3.c     ****     op0 = op0 + funct;
 22932              		.loc 1 6344 0
 22933 93b1 4488C2   		movb	%r8b, %dl
6342:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 839


 22934              		.loc 1 6342 0
 22935 93b4 C1EE1A   		shrl	$26, %esi
 22936              	.LVL1861:
6344:src/vm3.c     ****     op0 = op0 + funct;
 22937              		.loc 1 6344 0
 22938 93b7 83E23F   		andl	$63, %edx
 22939 93ba 8D7E2B   		leal	43(%rsi), %edi
 22940 93bd 4084F6   		testb	%sil, %sil
 22941 93c0 0F45D7   		cmovne	%edi, %edx
 22942              	.LVL1862:
6354:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22943              		.loc 1 6354 0
 22944 93c3 C1E110   		sall	$16, %ecx
 22945 93c6 C1E318   		sall	$24, %ebx
 22946 93c9 09CB     		orl	%ecx, %ebx
 22947 93cb 8D4807   		leal	7(%rax), %ecx
 22948 93ce 83C006   		addl	$6, %eax
 22949 93d1 0FB68000 		movzbl	VM_memory(%rax), %eax
 22949      000000
6352:src/vm3.c     **** 
 22950              		.loc 1 6352 0
 22951 93d8 0FB6D2   		movzbl	%dl, %edx
6354:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22952              		.loc 1 6354 0
 22953 93db 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 22953      000000
6352:src/vm3.c     **** 
 22954              		.loc 1 6352 0
 22955 93e2 48C1E204 		salq	$4, %rdx
 22956              	.LVL1863:
6354:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 22957              		.loc 1 6354 0
 22958 93e6 C1E008   		sall	$8, %eax
 22959 93e9 09CB     		orl	%ecx, %ebx
 22960 93eb 09C3     		orl	%eax, %ebx
 22961              	.LVL1864:
6355:src/vm3.c     ****   if (op1 == 0x0) {
 22962              		.loc 1 6355 0
 22963 93ed 89D9     		movl	%ebx, %ecx
6357:src/vm3.c     ****     op1 = op1 + funct;
 22964              		.loc 1 6357 0
 22965 93ef 88D8     		movb	%bl, %al
6355:src/vm3.c     ****   if (op1 == 0x0) {
 22966              		.loc 1 6355 0
 22967 93f1 C1E91A   		shrl	$26, %ecx
 22968              	.LVL1865:
6357:src/vm3.c     ****     op1 = op1 + funct;
 22969              		.loc 1 6357 0
 22970 93f4 83E03F   		andl	$63, %eax
 22971 93f7 8D712B   		leal	43(%rcx), %esi
 22972 93fa 84C9     		testb	%cl, %cl
 22973 93fc 0F45C6   		cmovne	%esi, %eax
 22974              	.LVL1866:
6364:src/vm3.c     **** 
 22975              		.loc 1 6364 0
 22976 93ff 0FB6C0   		movzbl	%al, %eax
 22977 9402 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 840


 22978              	.LVL1867:
 22979 9406 48038414 		addq	58088(%rsp,%rdx), %rax
 22979      E8E20000 
 22980 940e 488B08   		movq	(%rax), %rcx
 22981 9411 E94279FF 		jmp	.L269
 22981      FF
 22982              	.LVL1868:
 22983              	.L84:
6373:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 22984              		.loc 1 6373 0
 22985 9416 4489C0   		movl	%r8d, %eax
6374:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 22986              		.loc 1 6374 0
 22987 9419 4489C2   		movl	%r8d, %edx
6372:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 22988              		.loc 1 6372 0
 22989 941c 41C1E815 		shrl	$21, %r8d
 22990              	.LVL1869:
6373:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 22991              		.loc 1 6373 0
 22992 9420 C1E810   		shrl	$16, %eax
 22993              	.LVL1870:
6375:src/vm3.c     **** PC  =  nPC;
 22994              		.loc 1 6375 0
 22995 9423 4183E01F 		andl	$31, %r8d
6374:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 22996              		.loc 1 6374 0
 22997 9427 C1EA0B   		shrl	$11, %edx
 22998              	.LVL1871:
6375:src/vm3.c     **** PC  =  nPC;
 22999              		.loc 1 6375 0
 23000 942a 83E01F   		andl	$31, %eax
 23001 942d 83E21F   		andl	$31, %edx
6377:src/vm3.c     **** 
 23002              		.loc 1 6377 0
 23003 9430 83050000 		addl	$4, nPC(%rip)
 23003      000004
 23004              	.LVL1872:
6375:src/vm3.c     **** PC  =  nPC;
 23005              		.loc 1 6375 0
 23006 9437 8B048500 		movl	RF(,%rax,4), %eax
 23006      000000
 23007 943e 42330485 		xorl	RF(,%r8,4), %eax
 23007      00000000 
 23008 9446 89049500 		movl	%eax, RF(,%rdx,4)
 23008      000000
6383:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 23009              		.loc 1 6383 0
 23010 944d 89DA     		movl	%ebx, %edx
6384:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23011              		.loc 1 6384 0
 23012 944f 89D8     		movl	%ebx, %eax
6383:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 23013              		.loc 1 6383 0
 23014 9451 C1EA15   		shrl	$21, %edx
6384:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23015              		.loc 1 6384 0
GAS LISTING /tmp/cc15eBE3.s 			page 841


 23016 9454 C1E810   		shrl	$16, %eax
6386:src/vm3.c     **** PC  =  nPC;
 23017              		.loc 1 6386 0
 23018 9457 0FBFDB   		movswl	%bx, %ebx
 23019              	.LVL1873:
 23020 945a 83E21F   		andl	$31, %edx
 23021 945d 83E01F   		andl	$31, %eax
 23022 9460 391C9500 		cmpl	%ebx, RF(,%rdx,4)
 23022      000000
 23023 9467 0F92C2   		setb	%dl
 23024 946a 0FB6D2   		movzbl	%dl, %edx
 23025 946d 89148500 		movl	%edx, RF(,%rax,4)
 23025      000000
6387:src/vm3.c     **** nPC  += 4;
 23026              		.loc 1 6387 0
 23027 9474 8B050000 		movl	nPC(%rip), %eax
 23027      0000
6389:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23028              		.loc 1 6389 0
 23029 947a 8D5003   		leal	3(%rax), %edx
6388:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23030              		.loc 1 6388 0
 23031 947d 8D4804   		leal	4(%rax), %ecx
6387:src/vm3.c     **** nPC  += 4;
 23032              		.loc 1 6387 0
 23033 9480 89050000 		movl	%eax, PC(%rip)
 23033      0000
6389:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23034              		.loc 1 6389 0
 23035 9486 440FB682 		movzbl	VM_memory(%rdx), %r8d
 23035      00000000 
 23036 948e 89C2     		movl	%eax, %edx
6402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23037              		.loc 1 6402 0
 23038 9490 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23038      000000
 23039              	.LVL1874:
6389:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23040              		.loc 1 6389 0
 23041 9497 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23041      000000
6388:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23042              		.loc 1 6388 0
 23043 949e 890D0000 		movl	%ecx, nPC(%rip)
 23043      0000
6402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23044              		.loc 1 6402 0
 23045 94a4 8D4805   		leal	5(%rax), %ecx
 23046 94a7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23046      000000
6389:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23047              		.loc 1 6389 0
 23048 94ae C1E218   		sall	$24, %edx
 23049 94b1 4109D0   		orl	%edx, %r8d
 23050 94b4 8D5001   		leal	1(%rax), %edx
 23051 94b7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23051      000000
GAS LISTING /tmp/cc15eBE3.s 			page 842


 23052 94be C1E210   		sall	$16, %edx
 23053 94c1 4109D0   		orl	%edx, %r8d
 23054 94c4 8D5002   		leal	2(%rax), %edx
 23055 94c7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23055      000000
 23056 94ce C1E208   		sall	$8, %edx
 23057 94d1 4109D0   		orl	%edx, %r8d
 23058              	.LVL1875:
6390:src/vm3.c     ****   if (op0 == 0x0) {
 23059              		.loc 1 6390 0
 23060 94d4 4489C6   		movl	%r8d, %esi
6392:src/vm3.c     ****     op0 = op0 + funct;
 23061              		.loc 1 6392 0
 23062 94d7 4488C2   		movb	%r8b, %dl
6390:src/vm3.c     ****   if (op0 == 0x0) {
 23063              		.loc 1 6390 0
 23064 94da C1EE1A   		shrl	$26, %esi
 23065              	.LVL1876:
6392:src/vm3.c     ****     op0 = op0 + funct;
 23066              		.loc 1 6392 0
 23067 94dd 83E23F   		andl	$63, %edx
 23068 94e0 8D7E2B   		leal	43(%rsi), %edi
 23069 94e3 4084F6   		testb	%sil, %sil
 23070 94e6 0F45D7   		cmovne	%edi, %edx
 23071              	.LVL1877:
6402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23072              		.loc 1 6402 0
 23073 94e9 C1E110   		sall	$16, %ecx
 23074 94ec C1E318   		sall	$24, %ebx
 23075 94ef 09CB     		orl	%ecx, %ebx
 23076 94f1 8D4807   		leal	7(%rax), %ecx
 23077 94f4 83C006   		addl	$6, %eax
 23078 94f7 0FB68000 		movzbl	VM_memory(%rax), %eax
 23078      000000
6400:src/vm3.c     **** 
 23079              		.loc 1 6400 0
 23080 94fe 0FB6D2   		movzbl	%dl, %edx
6402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23081              		.loc 1 6402 0
 23082 9501 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23082      000000
6400:src/vm3.c     **** 
 23083              		.loc 1 6400 0
 23084 9508 48C1E204 		salq	$4, %rdx
 23085              	.LVL1878:
6402:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23086              		.loc 1 6402 0
 23087 950c C1E008   		sall	$8, %eax
 23088 950f 09CB     		orl	%ecx, %ebx
 23089 9511 09C3     		orl	%eax, %ebx
 23090              	.LVL1879:
6403:src/vm3.c     ****   if (op1 == 0x0) {
 23091              		.loc 1 6403 0
 23092 9513 89D9     		movl	%ebx, %ecx
6405:src/vm3.c     ****     op1 = op1 + funct;
 23093              		.loc 1 6405 0
 23094 9515 88D8     		movb	%bl, %al
GAS LISTING /tmp/cc15eBE3.s 			page 843


6403:src/vm3.c     ****   if (op1 == 0x0) {
 23095              		.loc 1 6403 0
 23096 9517 C1E91A   		shrl	$26, %ecx
 23097              	.LVL1880:
6405:src/vm3.c     ****     op1 = op1 + funct;
 23098              		.loc 1 6405 0
 23099 951a 83E03F   		andl	$63, %eax
 23100 951d 8D712B   		leal	43(%rcx), %esi
 23101 9520 84C9     		testb	%cl, %cl
 23102 9522 0F45C6   		cmovne	%esi, %eax
 23103              	.LVL1881:
6412:src/vm3.c     **** 
 23104              		.loc 1 6412 0
 23105 9525 0FB6C0   		movzbl	%al, %eax
 23106 9528 48C1E004 		salq	$4, %rax
 23107              	.LVL1882:
 23108 952c 48038414 		addq	58088(%rsp,%rdx), %rax
 23108      E8E20000 
 23109 9534 488B08   		movq	(%rax), %rcx
 23110 9537 E91C78FF 		jmp	.L269
 23110      FF
 23111              	.LVL1883:
 23112              	.L128:
6421:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23113              		.loc 1 6421 0
 23114 953c 4489C0   		movl	%r8d, %eax
6422:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 23115              		.loc 1 6422 0
 23116 953f 4489C2   		movl	%r8d, %edx
6420:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23117              		.loc 1 6420 0
 23118 9542 41C1E815 		shrl	$21, %r8d
 23119              	.LVL1884:
6421:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23120              		.loc 1 6421 0
 23121 9546 C1E810   		shrl	$16, %eax
 23122              	.LVL1885:
6423:src/vm3.c     **** PC  =  nPC;
 23123              		.loc 1 6423 0
 23124 9549 4183E01F 		andl	$31, %r8d
6422:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 23125              		.loc 1 6422 0
 23126 954d C1EA0B   		shrl	$11, %edx
 23127              	.LVL1886:
6423:src/vm3.c     **** PC  =  nPC;
 23128              		.loc 1 6423 0
 23129 9550 83E01F   		andl	$31, %eax
 23130 9553 83E21F   		andl	$31, %edx
6425:src/vm3.c     **** 
 23131              		.loc 1 6425 0
 23132 9556 83050000 		addl	$4, nPC(%rip)
 23132      000004
 23133              	.LVL1887:
6423:src/vm3.c     **** PC  =  nPC;
 23134              		.loc 1 6423 0
 23135 955d 8B048500 		movl	RF(,%rax,4), %eax
 23135      000000
GAS LISTING /tmp/cc15eBE3.s 			page 844


 23136 9564 42230485 		andl	RF(,%r8,4), %eax
 23136      00000000 
 23137 956c 89049500 		movl	%eax, RF(,%rdx,4)
 23137      000000
6432:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 23138              		.loc 1 6432 0
 23139 9573 89D8     		movl	%ebx, %eax
6433:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 23140              		.loc 1 6433 0
 23141 9575 89DA     		movl	%ebx, %edx
6432:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 23142              		.loc 1 6432 0
 23143 9577 C1E810   		shrl	$16, %eax
6431:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 23144              		.loc 1 6431 0
 23145 957a C1EB15   		shrl	$21, %ebx
 23146              	.LVL1888:
6433:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 23147              		.loc 1 6433 0
 23148 957d C1EA0B   		shrl	$11, %edx
 23149              	.LVL1889:
6434:src/vm3.c     **** PC  =  nPC;
 23150              		.loc 1 6434 0
 23151 9580 83E31F   		andl	$31, %ebx
 23152 9583 83E01F   		andl	$31, %eax
 23153 9586 83E21F   		andl	$31, %edx
 23154 9589 8B048500 		movl	RF(,%rax,4), %eax
 23154      000000
 23155 9590 33049D00 		xorl	RF(,%rbx,4), %eax
 23155      000000
 23156 9597 89049500 		movl	%eax, RF(,%rdx,4)
 23156      000000
6435:src/vm3.c     **** nPC  += 4;
 23157              		.loc 1 6435 0
 23158 959e 8B050000 		movl	nPC(%rip), %eax
 23158      0000
6437:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23159              		.loc 1 6437 0
 23160 95a4 8D5003   		leal	3(%rax), %edx
6436:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23161              		.loc 1 6436 0
 23162 95a7 8D4804   		leal	4(%rax), %ecx
6435:src/vm3.c     **** nPC  += 4;
 23163              		.loc 1 6435 0
 23164 95aa 89050000 		movl	%eax, PC(%rip)
 23164      0000
6437:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23165              		.loc 1 6437 0
 23166 95b0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 23166      00000000 
 23167 95b8 89C2     		movl	%eax, %edx
6450:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23168              		.loc 1 6450 0
 23169 95ba 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23169      000000
6437:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23170              		.loc 1 6437 0
GAS LISTING /tmp/cc15eBE3.s 			page 845


 23171 95c1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23171      000000
6436:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23172              		.loc 1 6436 0
 23173 95c8 890D0000 		movl	%ecx, nPC(%rip)
 23173      0000
6450:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23174              		.loc 1 6450 0
 23175 95ce 8D4805   		leal	5(%rax), %ecx
 23176 95d1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23176      000000
6437:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23177              		.loc 1 6437 0
 23178 95d8 C1E218   		sall	$24, %edx
 23179 95db 4109D0   		orl	%edx, %r8d
 23180 95de 8D5001   		leal	1(%rax), %edx
 23181 95e1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23181      000000
 23182 95e8 C1E210   		sall	$16, %edx
 23183 95eb 4109D0   		orl	%edx, %r8d
 23184 95ee 8D5002   		leal	2(%rax), %edx
 23185 95f1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23185      000000
 23186 95f8 C1E208   		sall	$8, %edx
 23187 95fb 4109D0   		orl	%edx, %r8d
 23188              	.LVL1890:
6438:src/vm3.c     ****   if (op0 == 0x0) {
 23189              		.loc 1 6438 0
 23190 95fe 4489C6   		movl	%r8d, %esi
6440:src/vm3.c     ****     op0 = op0 + funct;
 23191              		.loc 1 6440 0
 23192 9601 4488C2   		movb	%r8b, %dl
6438:src/vm3.c     ****   if (op0 == 0x0) {
 23193              		.loc 1 6438 0
 23194 9604 C1EE1A   		shrl	$26, %esi
 23195              	.LVL1891:
6440:src/vm3.c     ****     op0 = op0 + funct;
 23196              		.loc 1 6440 0
 23197 9607 83E23F   		andl	$63, %edx
 23198 960a 8D7E2B   		leal	43(%rsi), %edi
 23199 960d 4084F6   		testb	%sil, %sil
 23200 9610 0F45D7   		cmovne	%edi, %edx
 23201              	.LVL1892:
6450:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23202              		.loc 1 6450 0
 23203 9613 C1E110   		sall	$16, %ecx
 23204 9616 C1E318   		sall	$24, %ebx
 23205 9619 09CB     		orl	%ecx, %ebx
 23206 961b 8D4807   		leal	7(%rax), %ecx
 23207 961e 83C006   		addl	$6, %eax
 23208 9621 0FB68000 		movzbl	VM_memory(%rax), %eax
 23208      000000
6448:src/vm3.c     **** 
 23209              		.loc 1 6448 0
 23210 9628 0FB6D2   		movzbl	%dl, %edx
6450:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23211              		.loc 1 6450 0
GAS LISTING /tmp/cc15eBE3.s 			page 846


 23212 962b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23212      000000
6448:src/vm3.c     **** 
 23213              		.loc 1 6448 0
 23214 9632 48C1E204 		salq	$4, %rdx
 23215              	.LVL1893:
6450:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23216              		.loc 1 6450 0
 23217 9636 C1E008   		sall	$8, %eax
 23218 9639 09CB     		orl	%ecx, %ebx
 23219 963b 09C3     		orl	%eax, %ebx
 23220              	.LVL1894:
6451:src/vm3.c     ****   if (op1 == 0x0) {
 23221              		.loc 1 6451 0
 23222 963d 89D9     		movl	%ebx, %ecx
6453:src/vm3.c     ****     op1 = op1 + funct;
 23223              		.loc 1 6453 0
 23224 963f 88D8     		movb	%bl, %al
6451:src/vm3.c     ****   if (op1 == 0x0) {
 23225              		.loc 1 6451 0
 23226 9641 C1E91A   		shrl	$26, %ecx
 23227              	.LVL1895:
6453:src/vm3.c     ****     op1 = op1 + funct;
 23228              		.loc 1 6453 0
 23229 9644 83E03F   		andl	$63, %eax
 23230 9647 8D712B   		leal	43(%rcx), %esi
 23231 964a 84C9     		testb	%cl, %cl
 23232 964c 0F45C6   		cmovne	%esi, %eax
 23233              	.LVL1896:
6460:src/vm3.c     **** 
 23234              		.loc 1 6460 0
 23235 964f 0FB6C0   		movzbl	%al, %eax
 23236 9652 48C1E004 		salq	$4, %rax
 23237              	.LVL1897:
 23238 9656 48038414 		addq	58088(%rsp,%rdx), %rax
 23238      E8E20000 
 23239 965e 488B08   		movq	(%rax), %rcx
 23240 9661 E9F276FF 		jmp	.L269
 23240      FF
 23241              	.LVL1898:
 23242              	.L195:
6468:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 23243              		.loc 1 6468 0
 23244 9666 8B150000 		movl	nPC(%rip), %edx
 23244      0000
6469:src/vm3.c     **** nPC = address << 2;
 23245              		.loc 1 6469 0
 23246 966c 4181E0FF 		andl	$67108863, %r8d
 23246      FFFF03
 23247              	.LVL1899:
6470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23248              		.loc 1 6470 0
 23249 9673 428D0485 		leal	0(,%r8,4), %eax
 23249      00000000 
6471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23250              		.loc 1 6471 0
 23251 967b 8D4A03   		leal	3(%rdx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 847


6468:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 23252              		.loc 1 6468 0
 23253 967e 89150000 		movl	%edx, PC(%rip)
 23253      0000
6470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23254              		.loc 1 6470 0
 23255 9684 89050000 		movl	%eax, nPC(%rip)
 23255      0000
6471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23256              		.loc 1 6471 0
 23257 968a 440FB681 		movzbl	VM_memory(%rcx), %r8d
 23257      00000000 
 23258 9692 89D1     		movl	%edx, %ecx
 23259 9694 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23259      000000
 23260 969b C1E118   		sall	$24, %ecx
 23261 969e 4109C8   		orl	%ecx, %r8d
 23262 96a1 8D4A01   		leal	1(%rdx), %ecx
 23263 96a4 83C202   		addl	$2, %edx
 23264 96a7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23264      000000
 23265 96ae 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23265      000000
 23266 96b5 C1E208   		sall	$8, %edx
 23267 96b8 C1E110   		sall	$16, %ecx
 23268 96bb 4109C8   		orl	%ecx, %r8d
 23269 96be 4109D0   		orl	%edx, %r8d
 23270              	.LVL1900:
6472:src/vm3.c     ****   if (op0 == 0x0) {
 23271              		.loc 1 6472 0
 23272 96c1 4489C1   		movl	%r8d, %ecx
6474:src/vm3.c     ****     op0 = op0 + funct;
 23273              		.loc 1 6474 0
 23274 96c4 4488C2   		movb	%r8b, %dl
6472:src/vm3.c     ****   if (op0 == 0x0) {
 23275              		.loc 1 6472 0
 23276 96c7 C1E91A   		shrl	$26, %ecx
 23277              	.LVL1901:
6474:src/vm3.c     ****     op0 = op0 + funct;
 23278              		.loc 1 6474 0
 23279 96ca 83E23F   		andl	$63, %edx
 23280 96cd 8D712B   		leal	43(%rcx), %esi
 23281 96d0 84C9     		testb	%cl, %cl
6484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23282              		.loc 1 6484 0
 23283 96d2 8D4803   		leal	3(%rax), %ecx
 23284              	.LVL1902:
 23285 96d5 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23285      000000
 23286              	.LVL1903:
 23287 96dc 89C1     		movl	%eax, %ecx
6474:src/vm3.c     ****     op0 = op0 + funct;
 23288              		.loc 1 6474 0
 23289 96de 0F45D6   		cmovne	%esi, %edx
 23290              	.LVL1904:
6484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23291              		.loc 1 6484 0
GAS LISTING /tmp/cc15eBE3.s 			page 848


 23292 96e1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23292      000000
6482:src/vm3.c     **** 
 23293              		.loc 1 6482 0
 23294 96e8 0FB6D2   		movzbl	%dl, %edx
 23295 96eb 48C1E204 		salq	$4, %rdx
 23296              	.LVL1905:
6484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23297              		.loc 1 6484 0
 23298 96ef C1E118   		sall	$24, %ecx
 23299 96f2 09CB     		orl	%ecx, %ebx
 23300 96f4 8D4801   		leal	1(%rax), %ecx
 23301 96f7 83C002   		addl	$2, %eax
 23302 96fa 0FB68000 		movzbl	VM_memory(%rax), %eax
 23302      000000
 23303 9701 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23303      000000
 23304 9708 C1E008   		sall	$8, %eax
 23305 970b C1E110   		sall	$16, %ecx
 23306 970e 09CB     		orl	%ecx, %ebx
 23307 9710 09C3     		orl	%eax, %ebx
 23308              	.LVL1906:
6485:src/vm3.c     ****   if (op1 == 0x0) {
 23309              		.loc 1 6485 0
 23310 9712 89D9     		movl	%ebx, %ecx
6487:src/vm3.c     ****     op1 = op1 + funct;
 23311              		.loc 1 6487 0
 23312 9714 88D8     		movb	%bl, %al
6485:src/vm3.c     ****   if (op1 == 0x0) {
 23313              		.loc 1 6485 0
 23314 9716 C1E91A   		shrl	$26, %ecx
 23315              	.LVL1907:
6487:src/vm3.c     ****     op1 = op1 + funct;
 23316              		.loc 1 6487 0
 23317 9719 83E03F   		andl	$63, %eax
 23318 971c 8D712B   		leal	43(%rcx), %esi
 23319 971f 84C9     		testb	%cl, %cl
 23320 9721 0F45C6   		cmovne	%esi, %eax
 23321              	.LVL1908:
6494:src/vm3.c     **** 
 23322              		.loc 1 6494 0
 23323 9724 0FB6C0   		movzbl	%al, %eax
 23324 9727 48C1E004 		salq	$4, %rax
 23325              	.LVL1909:
 23326 972b 48038414 		addq	58088(%rsp,%rdx), %rax
 23326      E8E20000 
 23327 9733 488B08   		movq	(%rax), %rcx
 23328 9736 E91D76FF 		jmp	.L269
 23328      FF
 23329              	.LVL1910:
 23330              	.L207:
6540:src/vm3.c     **** nPC = RF[rs];
 23331              		.loc 1 6540 0
 23332 973b 8B150000 		movl	nPC(%rip), %edx
 23332      0000
6539:src/vm3.c     **** PC = nPC;
 23333              		.loc 1 6539 0
GAS LISTING /tmp/cc15eBE3.s 			page 849


 23334 9741 41C1E815 		shrl	$21, %r8d
 23335              	.LVL1911:
6541:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23336              		.loc 1 6541 0
 23337 9745 4183E01F 		andl	$31, %r8d
 23338 9749 428B0485 		movl	RF(,%r8,4), %eax
 23338      00000000 
6542:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23339              		.loc 1 6542 0
 23340 9751 8D4A03   		leal	3(%rdx), %ecx
6540:src/vm3.c     **** nPC = RF[rs];
 23341              		.loc 1 6540 0
 23342 9754 89150000 		movl	%edx, PC(%rip)
 23342      0000
6542:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23343              		.loc 1 6542 0
 23344 975a 440FB681 		movzbl	VM_memory(%rcx), %r8d
 23344      00000000 
 23345 9762 89D1     		movl	%edx, %ecx
6541:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23346              		.loc 1 6541 0
 23347 9764 89050000 		movl	%eax, nPC(%rip)
 23347      0000
6542:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23348              		.loc 1 6542 0
 23349 976a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23349      000000
 23350 9771 C1E118   		sall	$24, %ecx
 23351 9774 4109C8   		orl	%ecx, %r8d
 23352 9777 8D4A01   		leal	1(%rdx), %ecx
 23353 977a 83C202   		addl	$2, %edx
 23354 977d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23354      000000
 23355 9784 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23355      000000
 23356 978b C1E208   		sall	$8, %edx
 23357 978e C1E110   		sall	$16, %ecx
 23358 9791 4109C8   		orl	%ecx, %r8d
 23359 9794 4109D0   		orl	%edx, %r8d
 23360              	.LVL1912:
6543:src/vm3.c     ****   if (op0 == 0x0) {
 23361              		.loc 1 6543 0
 23362 9797 4489C1   		movl	%r8d, %ecx
6545:src/vm3.c     ****     op0 = op0 + funct;
 23363              		.loc 1 6545 0
 23364 979a 4488C2   		movb	%r8b, %dl
6543:src/vm3.c     ****   if (op0 == 0x0) {
 23365              		.loc 1 6543 0
 23366 979d C1E91A   		shrl	$26, %ecx
 23367              	.LVL1913:
6545:src/vm3.c     ****     op0 = op0 + funct;
 23368              		.loc 1 6545 0
 23369 97a0 83E23F   		andl	$63, %edx
 23370 97a3 8D712B   		leal	43(%rcx), %esi
 23371 97a6 84C9     		testb	%cl, %cl
6555:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23372              		.loc 1 6555 0
GAS LISTING /tmp/cc15eBE3.s 			page 850


 23373 97a8 8D4803   		leal	3(%rax), %ecx
 23374              	.LVL1914:
 23375 97ab 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23375      000000
 23376              	.LVL1915:
 23377 97b2 89C1     		movl	%eax, %ecx
6545:src/vm3.c     ****     op0 = op0 + funct;
 23378              		.loc 1 6545 0
 23379 97b4 0F45D6   		cmovne	%esi, %edx
 23380              	.LVL1916:
6555:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23381              		.loc 1 6555 0
 23382 97b7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23382      000000
6553:src/vm3.c     **** 
 23383              		.loc 1 6553 0
 23384 97be 0FB6D2   		movzbl	%dl, %edx
 23385 97c1 48C1E204 		salq	$4, %rdx
 23386              	.LVL1917:
6555:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23387              		.loc 1 6555 0
 23388 97c5 C1E118   		sall	$24, %ecx
 23389 97c8 09CB     		orl	%ecx, %ebx
 23390 97ca 8D4801   		leal	1(%rax), %ecx
 23391 97cd 83C002   		addl	$2, %eax
 23392 97d0 0FB68000 		movzbl	VM_memory(%rax), %eax
 23392      000000
 23393 97d7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23393      000000
 23394 97de C1E008   		sall	$8, %eax
 23395 97e1 C1E110   		sall	$16, %ecx
 23396 97e4 09CB     		orl	%ecx, %ebx
 23397 97e6 09C3     		orl	%eax, %ebx
 23398              	.LVL1918:
6556:src/vm3.c     ****   if (op1 == 0x0) {
 23399              		.loc 1 6556 0
 23400 97e8 89D9     		movl	%ebx, %ecx
6558:src/vm3.c     ****     op1 = op1 + funct;
 23401              		.loc 1 6558 0
 23402 97ea 88D8     		movb	%bl, %al
6556:src/vm3.c     ****   if (op1 == 0x0) {
 23403              		.loc 1 6556 0
 23404 97ec C1E91A   		shrl	$26, %ecx
 23405              	.LVL1919:
6558:src/vm3.c     ****     op1 = op1 + funct;
 23406              		.loc 1 6558 0
 23407 97ef 83E03F   		andl	$63, %eax
 23408 97f2 8D712B   		leal	43(%rcx), %esi
 23409 97f5 84C9     		testb	%cl, %cl
 23410 97f7 0F45C6   		cmovne	%esi, %eax
 23411              	.LVL1920:
6565:src/vm3.c     **** 
 23412              		.loc 1 6565 0
 23413 97fa 0FB6C0   		movzbl	%al, %eax
 23414 97fd 48C1E004 		salq	$4, %rax
 23415              	.LVL1921:
 23416 9801 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 851


 23416      E8E20000 
 23417 9809 488B08   		movq	(%rax), %rcx
 23418 980c E94775FF 		jmp	.L269
 23418      FF
 23419              	.LVL1922:
 23420              	.L48:
6611:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23421              		.loc 1 6611 0
 23422 9811 4489C0   		movl	%r8d, %eax
6612:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 23423              		.loc 1 6612 0
 23424 9814 4489C2   		movl	%r8d, %edx
6610:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23425              		.loc 1 6610 0
 23426 9817 41C1E815 		shrl	$21, %r8d
 23427              	.LVL1923:
6611:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23428              		.loc 1 6611 0
 23429 981b C1E810   		shrl	$16, %eax
 23430              	.LVL1924:
6613:src/vm3.c     **** PC  =  nPC;
 23431              		.loc 1 6613 0
 23432 981e 4183E01F 		andl	$31, %r8d
6612:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 23433              		.loc 1 6612 0
 23434 9822 C1EA0B   		shrl	$11, %edx
 23435              	.LVL1925:
6613:src/vm3.c     **** PC  =  nPC;
 23436              		.loc 1 6613 0
 23437 9825 83E01F   		andl	$31, %eax
 23438 9828 83E21F   		andl	$31, %edx
6615:src/vm3.c     **** 
 23439              		.loc 1 6615 0
 23440 982b 83050000 		addl	$4, nPC(%rip)
 23440      000004
 23441              	.LVL1926:
6613:src/vm3.c     **** PC  =  nPC;
 23442              		.loc 1 6613 0
 23443 9832 8B048500 		movl	RF(,%rax,4), %eax
 23443      000000
 23444 9839 420B0485 		orl	RF(,%r8,4), %eax
 23444      00000000 
 23445 9841 89049500 		movl	%eax, RF(,%rdx,4)
 23445      000000
6622:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23446              		.loc 1 6622 0
 23447 9848 89D8     		movl	%ebx, %eax
6624:src/vm3.c     **** PC  =  nPC;
 23448              		.loc 1 6624 0
 23449 984a C1E310   		sall	$16, %ebx
 23450              	.LVL1927:
6622:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23451              		.loc 1 6622 0
 23452 984d C1E810   		shrl	$16, %eax
 23453              	.LVL1928:
6624:src/vm3.c     **** PC  =  nPC;
 23454              		.loc 1 6624 0
GAS LISTING /tmp/cc15eBE3.s 			page 852


 23455 9850 83E01F   		andl	$31, %eax
 23456 9853 891C8500 		movl	%ebx, RF(,%rax,4)
 23456      000000
6625:src/vm3.c     **** nPC  += 4;
 23457              		.loc 1 6625 0
 23458 985a 8B050000 		movl	nPC(%rip), %eax
 23458      0000
6627:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23459              		.loc 1 6627 0
 23460 9860 8D5003   		leal	3(%rax), %edx
6626:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23461              		.loc 1 6626 0
 23462 9863 8D4804   		leal	4(%rax), %ecx
6625:src/vm3.c     **** nPC  += 4;
 23463              		.loc 1 6625 0
 23464 9866 89050000 		movl	%eax, PC(%rip)
 23464      0000
6627:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23465              		.loc 1 6627 0
 23466 986c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 23466      00000000 
 23467 9874 89C2     		movl	%eax, %edx
6640:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23468              		.loc 1 6640 0
 23469 9876 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23469      000000
6627:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23470              		.loc 1 6627 0
 23471 987d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23471      000000
6626:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23472              		.loc 1 6626 0
 23473 9884 890D0000 		movl	%ecx, nPC(%rip)
 23473      0000
6640:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23474              		.loc 1 6640 0
 23475 988a 8D4805   		leal	5(%rax), %ecx
 23476 988d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23476      000000
6627:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23477              		.loc 1 6627 0
 23478 9894 C1E218   		sall	$24, %edx
 23479 9897 4109D0   		orl	%edx, %r8d
 23480 989a 8D5001   		leal	1(%rax), %edx
 23481 989d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23481      000000
 23482 98a4 C1E210   		sall	$16, %edx
 23483 98a7 4109D0   		orl	%edx, %r8d
 23484 98aa 8D5002   		leal	2(%rax), %edx
 23485 98ad 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23485      000000
 23486 98b4 C1E208   		sall	$8, %edx
 23487 98b7 4109D0   		orl	%edx, %r8d
 23488              	.LVL1929:
6628:src/vm3.c     ****   if (op0 == 0x0) {
 23489              		.loc 1 6628 0
 23490 98ba 4489C6   		movl	%r8d, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 853


6630:src/vm3.c     ****     op0 = op0 + funct;
 23491              		.loc 1 6630 0
 23492 98bd 4488C2   		movb	%r8b, %dl
6628:src/vm3.c     ****   if (op0 == 0x0) {
 23493              		.loc 1 6628 0
 23494 98c0 C1EE1A   		shrl	$26, %esi
 23495              	.LVL1930:
6630:src/vm3.c     ****     op0 = op0 + funct;
 23496              		.loc 1 6630 0
 23497 98c3 83E23F   		andl	$63, %edx
 23498 98c6 8D7E2B   		leal	43(%rsi), %edi
 23499 98c9 4084F6   		testb	%sil, %sil
 23500 98cc 0F45D7   		cmovne	%edi, %edx
 23501              	.LVL1931:
6640:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23502              		.loc 1 6640 0
 23503 98cf C1E110   		sall	$16, %ecx
 23504 98d2 C1E318   		sall	$24, %ebx
 23505 98d5 09CB     		orl	%ecx, %ebx
 23506 98d7 8D4807   		leal	7(%rax), %ecx
 23507 98da 83C006   		addl	$6, %eax
 23508 98dd 0FB68000 		movzbl	VM_memory(%rax), %eax
 23508      000000
6638:src/vm3.c     **** 
 23509              		.loc 1 6638 0
 23510 98e4 0FB6D2   		movzbl	%dl, %edx
6640:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23511              		.loc 1 6640 0
 23512 98e7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23512      000000
6638:src/vm3.c     **** 
 23513              		.loc 1 6638 0
 23514 98ee 48C1E204 		salq	$4, %rdx
 23515              	.LVL1932:
6640:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23516              		.loc 1 6640 0
 23517 98f2 C1E008   		sall	$8, %eax
 23518 98f5 09CB     		orl	%ecx, %ebx
 23519 98f7 09C3     		orl	%eax, %ebx
 23520              	.LVL1933:
6641:src/vm3.c     ****   if (op1 == 0x0) {
 23521              		.loc 1 6641 0
 23522 98f9 89D9     		movl	%ebx, %ecx
6643:src/vm3.c     ****     op1 = op1 + funct;
 23523              		.loc 1 6643 0
 23524 98fb 88D8     		movb	%bl, %al
6641:src/vm3.c     ****   if (op1 == 0x0) {
 23525              		.loc 1 6641 0
 23526 98fd C1E91A   		shrl	$26, %ecx
 23527              	.LVL1934:
6643:src/vm3.c     ****     op1 = op1 + funct;
 23528              		.loc 1 6643 0
 23529 9900 83E03F   		andl	$63, %eax
 23530 9903 8D712B   		leal	43(%rcx), %esi
 23531 9906 84C9     		testb	%cl, %cl
 23532 9908 0F45C6   		cmovne	%esi, %eax
 23533              	.LVL1935:
GAS LISTING /tmp/cc15eBE3.s 			page 854


6650:src/vm3.c     **** 
 23534              		.loc 1 6650 0
 23535 990b 0FB6C0   		movzbl	%al, %eax
 23536 990e 48C1E004 		salq	$4, %rax
 23537              	.LVL1936:
 23538 9912 48038414 		addq	58088(%rsp,%rdx), %rax
 23538      E8E20000 
 23539 991a 488B08   		movq	(%rax), %rcx
 23540 991d E93674FF 		jmp	.L269
 23540      FF
 23541              	.LVL1937:
 23542              	.L218:
6659:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23543              		.loc 1 6659 0
 23544 9922 4489C0   		movl	%r8d, %eax
6660:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 23545              		.loc 1 6660 0
 23546 9925 4489C2   		movl	%r8d, %edx
6658:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23547              		.loc 1 6658 0
 23548 9928 41C1E806 		shrl	$6, %r8d
 23549              	.LVL1938:
6659:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23550              		.loc 1 6659 0
 23551 992c C1E810   		shrl	$16, %eax
 23552              	.LVL1939:
6658:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23553              		.loc 1 6658 0
 23554 992f 4488C1   		movb	%r8b, %cl
6660:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 23555              		.loc 1 6660 0
 23556 9932 C1EA0B   		shrl	$11, %edx
 23557              	.LVL1940:
6661:src/vm3.c     **** PC  =  nPC;
 23558              		.loc 1 6661 0
 23559 9935 83E01F   		andl	$31, %eax
6658:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23560              		.loc 1 6658 0
 23561 9938 83E11F   		andl	$31, %ecx
6661:src/vm3.c     **** PC  =  nPC;
 23562              		.loc 1 6661 0
 23563 993b 83E21F   		andl	$31, %edx
 23564 993e 8B048500 		movl	RF(,%rax,4), %eax
 23564      000000
6663:src/vm3.c     **** 
 23565              		.loc 1 6663 0
 23566 9945 83050000 		addl	$4, nPC(%rip)
 23566      000004
 23567              	.LVL1941:
6661:src/vm3.c     **** PC  =  nPC;
 23568              		.loc 1 6661 0
 23569 994c D3E8     		shrl	%cl, %eax
 23570 994e 89049500 		movl	%eax, RF(,%rdx,4)
 23570      000000
6670:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23571              		.loc 1 6670 0
 23572 9955 89D8     		movl	%ebx, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 855


6672:src/vm3.c     **** PC  =  nPC;
 23573              		.loc 1 6672 0
 23574 9957 C1E310   		sall	$16, %ebx
 23575              	.LVL1942:
6670:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23576              		.loc 1 6670 0
 23577 995a C1E810   		shrl	$16, %eax
 23578              	.LVL1943:
6672:src/vm3.c     **** PC  =  nPC;
 23579              		.loc 1 6672 0
 23580 995d 83E01F   		andl	$31, %eax
 23581 9960 891C8500 		movl	%ebx, RF(,%rax,4)
 23581      000000
6673:src/vm3.c     **** nPC  += 4;
 23582              		.loc 1 6673 0
 23583 9967 8B050000 		movl	nPC(%rip), %eax
 23583      0000
6675:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23584              		.loc 1 6675 0
 23585 996d 8D5003   		leal	3(%rax), %edx
6674:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23586              		.loc 1 6674 0
 23587 9970 8D4804   		leal	4(%rax), %ecx
6673:src/vm3.c     **** nPC  += 4;
 23588              		.loc 1 6673 0
 23589 9973 89050000 		movl	%eax, PC(%rip)
 23589      0000
6675:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23590              		.loc 1 6675 0
 23591 9979 440FB682 		movzbl	VM_memory(%rdx), %r8d
 23591      00000000 
 23592 9981 89C2     		movl	%eax, %edx
6688:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23593              		.loc 1 6688 0
 23594 9983 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23594      000000
6675:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23595              		.loc 1 6675 0
 23596 998a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23596      000000
6674:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23597              		.loc 1 6674 0
 23598 9991 890D0000 		movl	%ecx, nPC(%rip)
 23598      0000
6688:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23599              		.loc 1 6688 0
 23600 9997 8D4805   		leal	5(%rax), %ecx
 23601 999a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23601      000000
6675:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23602              		.loc 1 6675 0
 23603 99a1 C1E218   		sall	$24, %edx
 23604 99a4 4109D0   		orl	%edx, %r8d
 23605 99a7 8D5001   		leal	1(%rax), %edx
 23606 99aa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23606      000000
 23607 99b1 C1E210   		sall	$16, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 856


 23608 99b4 4109D0   		orl	%edx, %r8d
 23609 99b7 8D5002   		leal	2(%rax), %edx
 23610 99ba 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23610      000000
 23611 99c1 C1E208   		sall	$8, %edx
 23612 99c4 4109D0   		orl	%edx, %r8d
 23613              	.LVL1944:
6676:src/vm3.c     ****   if (op0 == 0x0) {
 23614              		.loc 1 6676 0
 23615 99c7 4489C6   		movl	%r8d, %esi
6678:src/vm3.c     ****     op0 = op0 + funct;
 23616              		.loc 1 6678 0
 23617 99ca 4488C2   		movb	%r8b, %dl
6676:src/vm3.c     ****   if (op0 == 0x0) {
 23618              		.loc 1 6676 0
 23619 99cd C1EE1A   		shrl	$26, %esi
 23620              	.LVL1945:
6678:src/vm3.c     ****     op0 = op0 + funct;
 23621              		.loc 1 6678 0
 23622 99d0 83E23F   		andl	$63, %edx
 23623 99d3 8D7E2B   		leal	43(%rsi), %edi
 23624 99d6 4084F6   		testb	%sil, %sil
 23625 99d9 0F45D7   		cmovne	%edi, %edx
 23626              	.LVL1946:
6688:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23627              		.loc 1 6688 0
 23628 99dc C1E110   		sall	$16, %ecx
 23629 99df C1E318   		sall	$24, %ebx
 23630 99e2 09CB     		orl	%ecx, %ebx
 23631 99e4 8D4807   		leal	7(%rax), %ecx
 23632 99e7 83C006   		addl	$6, %eax
 23633 99ea 0FB68000 		movzbl	VM_memory(%rax), %eax
 23633      000000
6686:src/vm3.c     **** 
 23634              		.loc 1 6686 0
 23635 99f1 0FB6D2   		movzbl	%dl, %edx
6688:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23636              		.loc 1 6688 0
 23637 99f4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23637      000000
6686:src/vm3.c     **** 
 23638              		.loc 1 6686 0
 23639 99fb 48C1E204 		salq	$4, %rdx
 23640              	.LVL1947:
6688:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23641              		.loc 1 6688 0
 23642 99ff C1E008   		sall	$8, %eax
 23643 9a02 09CB     		orl	%ecx, %ebx
 23644 9a04 09C3     		orl	%eax, %ebx
 23645              	.LVL1948:
6689:src/vm3.c     ****   if (op1 == 0x0) {
 23646              		.loc 1 6689 0
 23647 9a06 89D9     		movl	%ebx, %ecx
6691:src/vm3.c     ****     op1 = op1 + funct;
 23648              		.loc 1 6691 0
 23649 9a08 88D8     		movb	%bl, %al
6689:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 857


 23650              		.loc 1 6689 0
 23651 9a0a C1E91A   		shrl	$26, %ecx
 23652              	.LVL1949:
6691:src/vm3.c     ****     op1 = op1 + funct;
 23653              		.loc 1 6691 0
 23654 9a0d 83E03F   		andl	$63, %eax
 23655 9a10 8D712B   		leal	43(%rcx), %esi
 23656 9a13 84C9     		testb	%cl, %cl
 23657 9a15 0F45C6   		cmovne	%esi, %eax
 23658              	.LVL1950:
6698:src/vm3.c     **** 
 23659              		.loc 1 6698 0
 23660 9a18 0FB6C0   		movzbl	%al, %eax
 23661 9a1b 48C1E004 		salq	$4, %rax
 23662              	.LVL1951:
 23663 9a1f 48038414 		addq	58088(%rsp,%rdx), %rax
 23663      E8E20000 
 23664 9a27 488B08   		movq	(%rax), %rcx
 23665 9a2a E92973FF 		jmp	.L269
 23665      FF
 23666              	.LVL1952:
 23667              	.L78:
6707:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23668              		.loc 1 6707 0
 23669 9a2f 4489C0   		movl	%r8d, %eax
6708:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 23670              		.loc 1 6708 0
 23671 9a32 4489C2   		movl	%r8d, %edx
6706:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23672              		.loc 1 6706 0
 23673 9a35 41C1E815 		shrl	$21, %r8d
 23674              	.LVL1953:
6707:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23675              		.loc 1 6707 0
 23676 9a39 C1E810   		shrl	$16, %eax
 23677              	.LVL1954:
6709:src/vm3.c     **** PC  =  nPC;
 23678              		.loc 1 6709 0
 23679 9a3c 4183E01F 		andl	$31, %r8d
6708:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 23680              		.loc 1 6708 0
 23681 9a40 C1EA0B   		shrl	$11, %edx
 23682              	.LVL1955:
6709:src/vm3.c     **** PC  =  nPC;
 23683              		.loc 1 6709 0
 23684 9a43 83E01F   		andl	$31, %eax
 23685 9a46 83E21F   		andl	$31, %edx
 23686 9a49 8B048500 		movl	RF(,%rax,4), %eax
 23686      000000
 23687 9a50 42330485 		xorl	RF(,%r8,4), %eax
 23687      00000000 
 23688 9a58 89049500 		movl	%eax, RF(,%rdx,4)
 23688      000000
6711:src/vm3.c     **** 
 23689              		.loc 1 6711 0
 23690 9a5f 8B050000 		movl	nPC(%rip), %eax
 23690      0000
GAS LISTING /tmp/cc15eBE3.s 			page 858


 23691 9a65 8D5004   		leal	4(%rax), %edx
6718:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23692              		.loc 1 6718 0
 23693 9a68 8D7007   		leal	7(%rax), %esi
6717:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23694              		.loc 1 6717 0
 23695 9a6b 8D4808   		leal	8(%rax), %ecx
6716:src/vm3.c     **** nPC  += 4;
 23696              		.loc 1 6716 0
 23697 9a6e 89150000 		movl	%edx, PC(%rip)
 23697      0000
6718:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23698              		.loc 1 6718 0
 23699 9a74 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23699      000000
 23700 9a7b 440FB686 		movzbl	VM_memory(%rsi), %r8d
 23700      00000000 
6731:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23701              		.loc 1 6731 0
 23702 9a83 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23702      000000
 23703              	.LVL1956:
6717:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23704              		.loc 1 6717 0
 23705 9a8a 890D0000 		movl	%ecx, nPC(%rip)
 23705      0000
6731:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23706              		.loc 1 6731 0
 23707 9a90 8D4809   		leal	9(%rax), %ecx
6718:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23708              		.loc 1 6718 0
 23709 9a93 C1E218   		sall	$24, %edx
6731:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23710              		.loc 1 6731 0
 23711 9a96 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23711      000000
6718:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23712              		.loc 1 6718 0
 23713 9a9d 4109D0   		orl	%edx, %r8d
 23714 9aa0 8D5005   		leal	5(%rax), %edx
 23715 9aa3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23715      000000
 23716 9aaa C1E210   		sall	$16, %edx
 23717 9aad 4109D0   		orl	%edx, %r8d
 23718 9ab0 8D5006   		leal	6(%rax), %edx
 23719 9ab3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23719      000000
 23720 9aba C1E208   		sall	$8, %edx
 23721 9abd 4109D0   		orl	%edx, %r8d
 23722              	.LVL1957:
6719:src/vm3.c     ****   if (op0 == 0x0) {
 23723              		.loc 1 6719 0
 23724 9ac0 4489C6   		movl	%r8d, %esi
6721:src/vm3.c     ****     op0 = op0 + funct;
 23725              		.loc 1 6721 0
 23726 9ac3 4488C2   		movb	%r8b, %dl
6719:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 859


 23727              		.loc 1 6719 0
 23728 9ac6 C1EE1A   		shrl	$26, %esi
 23729              	.LVL1958:
6721:src/vm3.c     ****     op0 = op0 + funct;
 23730              		.loc 1 6721 0
 23731 9ac9 83E23F   		andl	$63, %edx
 23732 9acc 8D7E2B   		leal	43(%rsi), %edi
 23733 9acf 4084F6   		testb	%sil, %sil
 23734 9ad2 0F45D7   		cmovne	%edi, %edx
 23735              	.LVL1959:
6731:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23736              		.loc 1 6731 0
 23737 9ad5 C1E110   		sall	$16, %ecx
 23738 9ad8 C1E318   		sall	$24, %ebx
 23739 9adb 09CB     		orl	%ecx, %ebx
 23740 9add 8D480B   		leal	11(%rax), %ecx
 23741 9ae0 83C00A   		addl	$10, %eax
 23742 9ae3 0FB68000 		movzbl	VM_memory(%rax), %eax
 23742      000000
6729:src/vm3.c     **** 
 23743              		.loc 1 6729 0
 23744 9aea 0FB6D2   		movzbl	%dl, %edx
6731:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23745              		.loc 1 6731 0
 23746 9aed 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23746      000000
6729:src/vm3.c     **** 
 23747              		.loc 1 6729 0
 23748 9af4 48C1E204 		salq	$4, %rdx
 23749              	.LVL1960:
6731:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23750              		.loc 1 6731 0
 23751 9af8 C1E008   		sall	$8, %eax
 23752 9afb 09CB     		orl	%ecx, %ebx
 23753 9afd 09C3     		orl	%eax, %ebx
 23754              	.LVL1961:
6732:src/vm3.c     ****   if (op1 == 0x0) {
 23755              		.loc 1 6732 0
 23756 9aff 89D9     		movl	%ebx, %ecx
6734:src/vm3.c     ****     op1 = op1 + funct;
 23757              		.loc 1 6734 0
 23758 9b01 88D8     		movb	%bl, %al
6732:src/vm3.c     ****   if (op1 == 0x0) {
 23759              		.loc 1 6732 0
 23760 9b03 C1E91A   		shrl	$26, %ecx
 23761              	.LVL1962:
6734:src/vm3.c     ****     op1 = op1 + funct;
 23762              		.loc 1 6734 0
 23763 9b06 83E03F   		andl	$63, %eax
 23764 9b09 8D712B   		leal	43(%rcx), %esi
 23765 9b0c 84C9     		testb	%cl, %cl
 23766 9b0e 0F45C6   		cmovne	%esi, %eax
 23767              	.LVL1963:
6741:src/vm3.c     **** 
 23768              		.loc 1 6741 0
 23769 9b11 0FB6C0   		movzbl	%al, %eax
 23770 9b14 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 860


 23771              	.LVL1964:
 23772 9b18 48038414 		addq	58088(%rsp,%rdx), %rax
 23772      E8E20000 
 23773 9b20 488B08   		movq	(%rax), %rcx
 23774 9b23 E93072FF 		jmp	.L269
 23774      FF
 23775              	.LVL1965:
 23776              	.L172:
6749:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23777              		.loc 1 6749 0
 23778 9b28 4489C2   		movl	%r8d, %edx
6750:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 23779              		.loc 1 6750 0
 23780 9b2b 4489C0   		movl	%r8d, %eax
6752:src/vm3.c     **** PC  =  nPC;
 23781              		.loc 1 6752 0
 23782 9b2e 450FBFC0 		movswl	%r8w, %r8d
 23783              	.LVL1966:
6749:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23784              		.loc 1 6749 0
 23785 9b32 C1EA15   		shrl	$21, %edx
6750:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 23786              		.loc 1 6750 0
 23787 9b35 C1E810   		shrl	$16, %eax
 23788              	.LVL1967:
6763:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 23789              		.loc 1 6763 0
 23790 9b38 0FBFCB   		movswl	%bx, %ecx
6752:src/vm3.c     **** PC  =  nPC;
 23791              		.loc 1 6752 0
 23792 9b3b 83E21F   		andl	$31, %edx
 23793 9b3e 83E01F   		andl	$31, %eax
 23794 9b41 44390495 		cmpl	%r8d, RF(,%rdx,4)
 23794      00000000 
 23795 9b49 0F92C2   		setb	%dl
6754:src/vm3.c     **** 
 23796              		.loc 1 6754 0
 23797 9b4c 83050000 		addl	$4, nPC(%rip)
 23797      000004
 23798              	.LVL1968:
6752:src/vm3.c     **** PC  =  nPC;
 23799              		.loc 1 6752 0
 23800 9b53 0FB6D2   		movzbl	%dl, %edx
 23801 9b56 89148500 		movl	%edx, RF(,%rax,4)
 23801      000000
6760:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 23802              		.loc 1 6760 0
 23803 9b5d 89D8     		movl	%ebx, %eax
6761:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 23804              		.loc 1 6761 0
 23805 9b5f C1EB10   		shrl	$16, %ebx
 23806              	.LVL1969:
6760:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 23807              		.loc 1 6760 0
 23808 9b62 C1E815   		shrl	$21, %eax
 23809              	.LVL1970:
6763:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
GAS LISTING /tmp/cc15eBE3.s 			page 861


 23810              		.loc 1 6763 0
 23811 9b65 83E31F   		andl	$31, %ebx
 23812 9b68 83E01F   		andl	$31, %eax
 23813 9b6b 8B148500 		movl	RF(,%rax,4), %edx
 23813      000000
 23814 9b72 8B049D00 		movl	RF(,%rbx,4), %eax
 23814      000000
 23815 9b79 8D3411   		leal	(%rcx,%rdx), %esi
 23816 9b7c 89C7     		movl	%eax, %edi
 23817 9b7e C1EF18   		shrl	$24, %edi
 23818 9b81 4088BE00 		movb	%dil, VM_memory(%rsi)
 23818      000000
6764:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 23819              		.loc 1 6764 0
 23820 9b88 8D741101 		leal	1(%rcx,%rdx), %esi
 23821 9b8c 89C7     		movl	%eax, %edi
 23822 9b8e C1EF10   		shrl	$16, %edi
 23823 9b91 4088BE00 		movb	%dil, VM_memory(%rsi)
 23823      000000
6765:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 23824              		.loc 1 6765 0
 23825 9b98 8D741102 		leal	2(%rcx,%rdx), %esi
6766:src/vm3.c     **** PC  =  nPC;
 23826              		.loc 1 6766 0
 23827 9b9c 8D541103 		leal	3(%rcx,%rdx), %edx
6765:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 23828              		.loc 1 6765 0
 23829 9ba0 0FB6FC   		movzbl	%ah, %edi
 23830 9ba3 4088BE00 		movb	%dil, VM_memory(%rsi)
 23830      000000
6766:src/vm3.c     **** PC  =  nPC;
 23831              		.loc 1 6766 0
 23832 9baa 88820000 		movb	%al, VM_memory(%rdx)
 23832      0000
6767:src/vm3.c     **** nPC  += 4;
 23833              		.loc 1 6767 0
 23834 9bb0 8B050000 		movl	nPC(%rip), %eax
 23834      0000
6769:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23835              		.loc 1 6769 0
 23836 9bb6 8D5003   		leal	3(%rax), %edx
6768:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23837              		.loc 1 6768 0
 23838 9bb9 8D4804   		leal	4(%rax), %ecx
 23839              	.LVL1971:
6767:src/vm3.c     **** nPC  += 4;
 23840              		.loc 1 6767 0
 23841 9bbc 89050000 		movl	%eax, PC(%rip)
 23841      0000
6769:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23842              		.loc 1 6769 0
 23843 9bc2 440FB682 		movzbl	VM_memory(%rdx), %r8d
 23843      00000000 
 23844 9bca 89C2     		movl	%eax, %edx
6782:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23845              		.loc 1 6782 0
 23846 9bcc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 862


 23846      000000
6769:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23847              		.loc 1 6769 0
 23848 9bd3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23848      000000
6768:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23849              		.loc 1 6768 0
 23850 9bda 890D0000 		movl	%ecx, nPC(%rip)
 23850      0000
6782:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23851              		.loc 1 6782 0
 23852 9be0 8D4805   		leal	5(%rax), %ecx
 23853 9be3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23853      000000
6769:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23854              		.loc 1 6769 0
 23855 9bea C1E218   		sall	$24, %edx
 23856 9bed 4109D0   		orl	%edx, %r8d
 23857 9bf0 8D5001   		leal	1(%rax), %edx
 23858 9bf3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23858      000000
 23859 9bfa C1E210   		sall	$16, %edx
 23860 9bfd 4109D0   		orl	%edx, %r8d
 23861 9c00 8D5002   		leal	2(%rax), %edx
 23862 9c03 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23862      000000
 23863 9c0a C1E208   		sall	$8, %edx
 23864 9c0d 4109D0   		orl	%edx, %r8d
 23865              	.LVL1972:
6770:src/vm3.c     ****   if (op0 == 0x0) {
 23866              		.loc 1 6770 0
 23867 9c10 4489C6   		movl	%r8d, %esi
6772:src/vm3.c     ****     op0 = op0 + funct;
 23868              		.loc 1 6772 0
 23869 9c13 4488C2   		movb	%r8b, %dl
6770:src/vm3.c     ****   if (op0 == 0x0) {
 23870              		.loc 1 6770 0
 23871 9c16 C1EE1A   		shrl	$26, %esi
 23872              	.LVL1973:
6772:src/vm3.c     ****     op0 = op0 + funct;
 23873              		.loc 1 6772 0
 23874 9c19 83E23F   		andl	$63, %edx
 23875 9c1c 8D7E2B   		leal	43(%rsi), %edi
 23876 9c1f 4084F6   		testb	%sil, %sil
 23877 9c22 0F45D7   		cmovne	%edi, %edx
 23878              	.LVL1974:
6782:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23879              		.loc 1 6782 0
 23880 9c25 C1E110   		sall	$16, %ecx
 23881 9c28 C1E318   		sall	$24, %ebx
 23882 9c2b 09CB     		orl	%ecx, %ebx
 23883 9c2d 8D4807   		leal	7(%rax), %ecx
 23884 9c30 83C006   		addl	$6, %eax
 23885 9c33 0FB68000 		movzbl	VM_memory(%rax), %eax
 23885      000000
6780:src/vm3.c     **** 
 23886              		.loc 1 6780 0
GAS LISTING /tmp/cc15eBE3.s 			page 863


 23887 9c3a 0FB6D2   		movzbl	%dl, %edx
6782:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23888              		.loc 1 6782 0
 23889 9c3d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23889      000000
6780:src/vm3.c     **** 
 23890              		.loc 1 6780 0
 23891 9c44 48C1E204 		salq	$4, %rdx
 23892              	.LVL1975:
6782:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23893              		.loc 1 6782 0
 23894 9c48 C1E008   		sall	$8, %eax
 23895 9c4b 09CB     		orl	%ecx, %ebx
 23896 9c4d 09C3     		orl	%eax, %ebx
 23897              	.LVL1976:
6783:src/vm3.c     ****   if (op1 == 0x0) {
 23898              		.loc 1 6783 0
 23899 9c4f 89D9     		movl	%ebx, %ecx
6785:src/vm3.c     ****     op1 = op1 + funct;
 23900              		.loc 1 6785 0
 23901 9c51 88D8     		movb	%bl, %al
6783:src/vm3.c     ****   if (op1 == 0x0) {
 23902              		.loc 1 6783 0
 23903 9c53 C1E91A   		shrl	$26, %ecx
 23904              	.LVL1977:
6785:src/vm3.c     ****     op1 = op1 + funct;
 23905              		.loc 1 6785 0
 23906 9c56 83E03F   		andl	$63, %eax
 23907 9c59 8D712B   		leal	43(%rcx), %esi
 23908 9c5c 84C9     		testb	%cl, %cl
 23909 9c5e 0F45C6   		cmovne	%esi, %eax
 23910              	.LVL1978:
6792:src/vm3.c     **** 
 23911              		.loc 1 6792 0
 23912 9c61 0FB6C0   		movzbl	%al, %eax
 23913 9c64 48C1E004 		salq	$4, %rax
 23914              	.LVL1979:
 23915 9c68 48038414 		addq	58088(%rsp,%rdx), %rax
 23915      E8E20000 
 23916 9c70 488B08   		movq	(%rax), %rcx
 23917 9c73 E9E070FF 		jmp	.L269
 23917      FF
 23918              	.LVL1980:
 23919              	.L45:
6801:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23920              		.loc 1 6801 0
 23921 9c78 4489C0   		movl	%r8d, %eax
6802:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 23922              		.loc 1 6802 0
 23923 9c7b 4489C2   		movl	%r8d, %edx
6800:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 23924              		.loc 1 6800 0
 23925 9c7e 41C1E815 		shrl	$21, %r8d
 23926              	.LVL1981:
6801:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 23927              		.loc 1 6801 0
 23928 9c82 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 864


 23929              	.LVL1982:
6803:src/vm3.c     **** PC  =  nPC;
 23930              		.loc 1 6803 0
 23931 9c85 4183E01F 		andl	$31, %r8d
6802:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 23932              		.loc 1 6802 0
 23933 9c89 C1EA0B   		shrl	$11, %edx
 23934              	.LVL1983:
6803:src/vm3.c     **** PC  =  nPC;
 23935              		.loc 1 6803 0
 23936 9c8c 83E01F   		andl	$31, %eax
 23937 9c8f 83E21F   		andl	$31, %edx
6805:src/vm3.c     **** 
 23938              		.loc 1 6805 0
 23939 9c92 83050000 		addl	$4, nPC(%rip)
 23939      000004
 23940              	.LVL1984:
6803:src/vm3.c     **** PC  =  nPC;
 23941              		.loc 1 6803 0
 23942 9c99 8B048500 		movl	RF(,%rax,4), %eax
 23942      000000
 23943 9ca0 420B0485 		orl	RF(,%r8,4), %eax
 23943      00000000 
 23944 9ca8 89049500 		movl	%eax, RF(,%rdx,4)
 23944      000000
6812:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 23945              		.loc 1 6812 0
 23946 9caf 89D8     		movl	%ebx, %eax
6813:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 23947              		.loc 1 6813 0
 23948 9cb1 89DA     		movl	%ebx, %edx
6812:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 23949              		.loc 1 6812 0
 23950 9cb3 C1E810   		shrl	$16, %eax
6811:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 23951              		.loc 1 6811 0
 23952 9cb6 C1EB15   		shrl	$21, %ebx
 23953              	.LVL1985:
6813:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 23954              		.loc 1 6813 0
 23955 9cb9 C1EA0B   		shrl	$11, %edx
 23956              	.LVL1986:
6814:src/vm3.c     **** PC  =  nPC;
 23957              		.loc 1 6814 0
 23958 9cbc 83E31F   		andl	$31, %ebx
 23959 9cbf 83E01F   		andl	$31, %eax
 23960 9cc2 83E21F   		andl	$31, %edx
 23961 9cc5 8B048500 		movl	RF(,%rax,4), %eax
 23961      000000
 23962 9ccc 03049D00 		addl	RF(,%rbx,4), %eax
 23962      000000
 23963 9cd3 89049500 		movl	%eax, RF(,%rdx,4)
 23963      000000
6815:src/vm3.c     **** nPC  += 4;
 23964              		.loc 1 6815 0
 23965 9cda 8B050000 		movl	nPC(%rip), %eax
 23965      0000
GAS LISTING /tmp/cc15eBE3.s 			page 865


6817:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23966              		.loc 1 6817 0
 23967 9ce0 8D5003   		leal	3(%rax), %edx
6816:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23968              		.loc 1 6816 0
 23969 9ce3 8D4804   		leal	4(%rax), %ecx
6815:src/vm3.c     **** nPC  += 4;
 23970              		.loc 1 6815 0
 23971 9ce6 89050000 		movl	%eax, PC(%rip)
 23971      0000
6817:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23972              		.loc 1 6817 0
 23973 9cec 440FB682 		movzbl	VM_memory(%rdx), %r8d
 23973      00000000 
 23974 9cf4 89C2     		movl	%eax, %edx
6830:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23975              		.loc 1 6830 0
 23976 9cf6 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 23976      000000
6817:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23977              		.loc 1 6817 0
 23978 9cfd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23978      000000
6816:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 23979              		.loc 1 6816 0
 23980 9d04 890D0000 		movl	%ecx, nPC(%rip)
 23980      0000
6830:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 23981              		.loc 1 6830 0
 23982 9d0a 8D4805   		leal	5(%rax), %ecx
 23983 9d0d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 23983      000000
6817:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 23984              		.loc 1 6817 0
 23985 9d14 C1E218   		sall	$24, %edx
 23986 9d17 4109D0   		orl	%edx, %r8d
 23987 9d1a 8D5001   		leal	1(%rax), %edx
 23988 9d1d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23988      000000
 23989 9d24 C1E210   		sall	$16, %edx
 23990 9d27 4109D0   		orl	%edx, %r8d
 23991 9d2a 8D5002   		leal	2(%rax), %edx
 23992 9d2d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 23992      000000
 23993 9d34 C1E208   		sall	$8, %edx
 23994 9d37 4109D0   		orl	%edx, %r8d
 23995              	.LVL1987:
6818:src/vm3.c     ****   if (op0 == 0x0) {
 23996              		.loc 1 6818 0
 23997 9d3a 4489C6   		movl	%r8d, %esi
6820:src/vm3.c     ****     op0 = op0 + funct;
 23998              		.loc 1 6820 0
 23999 9d3d 4488C2   		movb	%r8b, %dl
6818:src/vm3.c     ****   if (op0 == 0x0) {
 24000              		.loc 1 6818 0
 24001 9d40 C1EE1A   		shrl	$26, %esi
 24002              	.LVL1988:
GAS LISTING /tmp/cc15eBE3.s 			page 866


6820:src/vm3.c     ****     op0 = op0 + funct;
 24003              		.loc 1 6820 0
 24004 9d43 83E23F   		andl	$63, %edx
 24005 9d46 8D7E2B   		leal	43(%rsi), %edi
 24006 9d49 4084F6   		testb	%sil, %sil
 24007 9d4c 0F45D7   		cmovne	%edi, %edx
 24008              	.LVL1989:
6830:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24009              		.loc 1 6830 0
 24010 9d4f C1E110   		sall	$16, %ecx
 24011 9d52 C1E318   		sall	$24, %ebx
 24012 9d55 09CB     		orl	%ecx, %ebx
 24013 9d57 8D4807   		leal	7(%rax), %ecx
 24014 9d5a 83C006   		addl	$6, %eax
 24015 9d5d 0FB68000 		movzbl	VM_memory(%rax), %eax
 24015      000000
6828:src/vm3.c     **** 
 24016              		.loc 1 6828 0
 24017 9d64 0FB6D2   		movzbl	%dl, %edx
6830:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24018              		.loc 1 6830 0
 24019 9d67 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24019      000000
6828:src/vm3.c     **** 
 24020              		.loc 1 6828 0
 24021 9d6e 48C1E204 		salq	$4, %rdx
 24022              	.LVL1990:
6830:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24023              		.loc 1 6830 0
 24024 9d72 C1E008   		sall	$8, %eax
 24025 9d75 09CB     		orl	%ecx, %ebx
 24026 9d77 09C3     		orl	%eax, %ebx
 24027              	.LVL1991:
6831:src/vm3.c     ****   if (op1 == 0x0) {
 24028              		.loc 1 6831 0
 24029 9d79 89D9     		movl	%ebx, %ecx
6833:src/vm3.c     ****     op1 = op1 + funct;
 24030              		.loc 1 6833 0
 24031 9d7b 88D8     		movb	%bl, %al
6831:src/vm3.c     ****   if (op1 == 0x0) {
 24032              		.loc 1 6831 0
 24033 9d7d C1E91A   		shrl	$26, %ecx
 24034              	.LVL1992:
6833:src/vm3.c     ****     op1 = op1 + funct;
 24035              		.loc 1 6833 0
 24036 9d80 83E03F   		andl	$63, %eax
 24037 9d83 8D712B   		leal	43(%rcx), %esi
 24038 9d86 84C9     		testb	%cl, %cl
 24039 9d88 0F45C6   		cmovne	%esi, %eax
 24040              	.LVL1993:
6840:src/vm3.c     **** 
 24041              		.loc 1 6840 0
 24042 9d8b 0FB6C0   		movzbl	%al, %eax
 24043 9d8e 48C1E004 		salq	$4, %rax
 24044              	.LVL1994:
 24045 9d92 48038414 		addq	58088(%rsp,%rdx), %rax
 24045      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 867


 24046 9d9a 488B08   		movq	(%rax), %rcx
 24047 9d9d E9B66FFF 		jmp	.L269
 24047      FF
 24048              	.LVL1995:
 24049              	.L143:
6848:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24050              		.loc 1 6848 0
 24051 9da2 4489C2   		movl	%r8d, %edx
6849:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 24052              		.loc 1 6849 0
 24053 9da5 4489C0   		movl	%r8d, %eax
6851:src/vm3.c     **** PC  =  nPC;
 24054              		.loc 1 6851 0
 24055 9da8 450FBFC0 		movswl	%r8w, %r8d
 24056              	.LVL1996:
6848:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24057              		.loc 1 6848 0
 24058 9dac C1EA15   		shrl	$21, %edx
6849:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 24059              		.loc 1 6849 0
 24060 9daf C1E810   		shrl	$16, %eax
 24061              	.LVL1997:
6861:src/vm3.c     **** nPC = address << 2;
 24062              		.loc 1 6861 0
 24063 9db2 81E3FFFF 		andl	$67108863, %ebx
 24063      FF03
 24064              	.LVL1998:
6851:src/vm3.c     **** PC  =  nPC;
 24065              		.loc 1 6851 0
 24066 9db8 83E21F   		andl	$31, %edx
 24067 9dbb 83E01F   		andl	$31, %eax
 24068 9dbe 44030495 		addl	RF(,%rdx,4), %r8d
 24068      00000000 
 24069              	.LVL1999:
 24070 9dc6 44890485 		movl	%r8d, RF(,%rax,4)
 24070      00000000 
6852:src/vm3.c     **** nPC  += 4;
 24071              		.loc 1 6852 0
 24072 9dce 8B050000 		movl	nPC(%rip), %eax
 24072      0000
6853:src/vm3.c     **** 
 24073              		.loc 1 6853 0
 24074 9dd4 83050000 		addl	$4, nPC(%rip)
 24074      000004
6860:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 24075              		.loc 1 6860 0
 24076 9ddb 8B150000 		movl	nPC(%rip), %edx
 24076      0000
6859:src/vm3.c     **** PC = nPC;
 24077              		.loc 1 6859 0
 24078 9de1 83C008   		addl	$8, %eax
 24079 9de4 89050000 		movl	%eax, RF+124(%rip)
 24079      0000
6862:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24080              		.loc 1 6862 0
 24081 9dea 8D049D00 		leal	0(,%rbx,4), %eax
 24081      000000
GAS LISTING /tmp/cc15eBE3.s 			page 868


6863:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24082              		.loc 1 6863 0
 24083 9df1 8D4A03   		leal	3(%rdx), %ecx
6860:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 24084              		.loc 1 6860 0
 24085 9df4 89150000 		movl	%edx, PC(%rip)
 24085      0000
6862:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24086              		.loc 1 6862 0
 24087 9dfa 89050000 		movl	%eax, nPC(%rip)
 24087      0000
6863:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24088              		.loc 1 6863 0
 24089 9e00 440FB681 		movzbl	VM_memory(%rcx), %r8d
 24089      00000000 
 24090 9e08 89D1     		movl	%edx, %ecx
 24091 9e0a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24091      000000
 24092 9e11 C1E118   		sall	$24, %ecx
 24093 9e14 4109C8   		orl	%ecx, %r8d
 24094 9e17 8D4A01   		leal	1(%rdx), %ecx
 24095 9e1a 83C202   		addl	$2, %edx
 24096 9e1d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24096      000000
 24097 9e24 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24097      000000
 24098 9e2b C1E208   		sall	$8, %edx
 24099 9e2e C1E110   		sall	$16, %ecx
 24100 9e31 4109C8   		orl	%ecx, %r8d
 24101 9e34 4109D0   		orl	%edx, %r8d
 24102              	.LVL2000:
6864:src/vm3.c     ****   if (op0 == 0x0) {
 24103              		.loc 1 6864 0
 24104 9e37 4489C1   		movl	%r8d, %ecx
6866:src/vm3.c     ****     op0 = op0 + funct;
 24105              		.loc 1 6866 0
 24106 9e3a 4488C2   		movb	%r8b, %dl
6864:src/vm3.c     ****   if (op0 == 0x0) {
 24107              		.loc 1 6864 0
 24108 9e3d C1E91A   		shrl	$26, %ecx
 24109              	.LVL2001:
6866:src/vm3.c     ****     op0 = op0 + funct;
 24110              		.loc 1 6866 0
 24111 9e40 83E23F   		andl	$63, %edx
 24112 9e43 8D712B   		leal	43(%rcx), %esi
 24113 9e46 84C9     		testb	%cl, %cl
6876:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24114              		.loc 1 6876 0
 24115 9e48 8D4803   		leal	3(%rax), %ecx
 24116              	.LVL2002:
 24117 9e4b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 24117      000000
 24118 9e52 89C1     		movl	%eax, %ecx
6866:src/vm3.c     ****     op0 = op0 + funct;
 24119              		.loc 1 6866 0
 24120 9e54 0F45D6   		cmovne	%esi, %edx
 24121              	.LVL2003:
GAS LISTING /tmp/cc15eBE3.s 			page 869


6876:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24122              		.loc 1 6876 0
 24123 9e57 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24123      000000
6874:src/vm3.c     **** 
 24124              		.loc 1 6874 0
 24125 9e5e 0FB6D2   		movzbl	%dl, %edx
 24126 9e61 48C1E204 		salq	$4, %rdx
 24127              	.LVL2004:
6876:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24128              		.loc 1 6876 0
 24129 9e65 C1E118   		sall	$24, %ecx
 24130 9e68 09CB     		orl	%ecx, %ebx
 24131 9e6a 8D4801   		leal	1(%rax), %ecx
 24132 9e6d 83C002   		addl	$2, %eax
 24133 9e70 0FB68000 		movzbl	VM_memory(%rax), %eax
 24133      000000
 24134 9e77 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24134      000000
 24135 9e7e C1E008   		sall	$8, %eax
 24136 9e81 C1E110   		sall	$16, %ecx
 24137 9e84 09CB     		orl	%ecx, %ebx
 24138 9e86 09C3     		orl	%eax, %ebx
 24139              	.LVL2005:
6877:src/vm3.c     ****   if (op1 == 0x0) {
 24140              		.loc 1 6877 0
 24141 9e88 89D9     		movl	%ebx, %ecx
6879:src/vm3.c     ****     op1 = op1 + funct;
 24142              		.loc 1 6879 0
 24143 9e8a 88D8     		movb	%bl, %al
6877:src/vm3.c     ****   if (op1 == 0x0) {
 24144              		.loc 1 6877 0
 24145 9e8c C1E91A   		shrl	$26, %ecx
 24146              	.LVL2006:
6879:src/vm3.c     ****     op1 = op1 + funct;
 24147              		.loc 1 6879 0
 24148 9e8f 83E03F   		andl	$63, %eax
 24149 9e92 8D712B   		leal	43(%rcx), %esi
 24150 9e95 84C9     		testb	%cl, %cl
 24151 9e97 0F45C6   		cmovne	%esi, %eax
 24152              	.LVL2007:
6886:src/vm3.c     **** 
 24153              		.loc 1 6886 0
 24154 9e9a 0FB6C0   		movzbl	%al, %eax
 24155 9e9d 48C1E004 		salq	$4, %rax
 24156              	.LVL2008:
 24157 9ea1 48038414 		addq	58088(%rsp,%rdx), %rax
 24157      E8E20000 
 24158 9ea9 488B08   		movq	(%rax), %rcx
 24159 9eac E9A76EFF 		jmp	.L269
 24159      FF
 24160              	.LVL2009:
 24161              	.L136:
6920:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24162              		.loc 1 6920 0
 24163 9eb1 4489C2   		movl	%r8d, %edx
6921:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 870


 24164              		.loc 1 6921 0
 24165 9eb4 4489C0   		movl	%r8d, %eax
6923:src/vm3.c     **** PC  =  nPC;
 24166              		.loc 1 6923 0
 24167 9eb7 450FBFC0 		movswl	%r8w, %r8d
 24168              	.LVL2010:
6920:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24169              		.loc 1 6920 0
 24170 9ebb C1EA15   		shrl	$21, %edx
6921:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 24171              		.loc 1 6921 0
 24172 9ebe C1E810   		shrl	$16, %eax
 24173              	.LVL2011:
6932:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 24174              		.loc 1 6932 0
 24175 9ec1 89D9     		movl	%ebx, %ecx
6923:src/vm3.c     **** PC  =  nPC;
 24176              		.loc 1 6923 0
 24177 9ec3 83E21F   		andl	$31, %edx
 24178 9ec6 83E01F   		andl	$31, %eax
6932:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 24179              		.loc 1 6932 0
 24180 9ec9 C1E910   		shrl	$16, %ecx
6923:src/vm3.c     **** PC  =  nPC;
 24181              		.loc 1 6923 0
 24182 9ecc 44030495 		addl	RF(,%rdx,4), %r8d
 24182      00000000 
 24183              	.LVL2012:
6931:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24184              		.loc 1 6931 0
 24185 9ed4 C1EB15   		shrl	$21, %ebx
 24186              	.LVL2013:
6933:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 24187              		.loc 1 6933 0
 24188 9ed7 83E11F   		andl	$31, %ecx
 24189 9eda 83E31F   		andl	$31, %ebx
6923:src/vm3.c     **** PC  =  nPC;
 24190              		.loc 1 6923 0
 24191 9edd 44890485 		movl	%r8d, RF(,%rax,4)
 24191      00000000 
6925:src/vm3.c     **** 
 24192              		.loc 1 6925 0
 24193 9ee5 8B050000 		movl	nPC(%rip), %eax
 24193      0000
6933:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 24194              		.loc 1 6933 0
 24195 9eeb 448B348D 		movl	RF(,%rcx,4), %r14d
 24195      00000000 
 24196              	.LVL2014:
 24197 9ef3 8B0C9D00 		movl	RF(,%rbx,4), %ecx
 24197      000000
6925:src/vm3.c     **** 
 24198              		.loc 1 6925 0
 24199 9efa 8D5004   		leal	4(%rax), %edx
6938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24200              		.loc 1 6938 0
 24201 9efd 8D7007   		leal	7(%rax), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 871


6936:src/vm3.c     **** nPC  += 4;
 24202              		.loc 1 6936 0
 24203 9f00 89150000 		movl	%edx, PC(%rip)
 24203      0000
6938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24204              		.loc 1 6938 0
 24205 9f06 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24205      000000
 24206 9f0d 440FB686 		movzbl	VM_memory(%rsi), %r8d
 24206      00000000 
6933:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 24207              		.loc 1 6933 0
 24208 9f15 4C0FAFF1 		imulq	%rcx, %r14
 24209              	.LVL2015:
6937:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24210              		.loc 1 6937 0
 24211 9f19 8D4808   		leal	8(%rax), %ecx
6938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24212              		.loc 1 6938 0
 24213 9f1c C1E218   		sall	$24, %edx
6951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24214              		.loc 1 6951 0
 24215 9f1f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 24215      000000
6937:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24216              		.loc 1 6937 0
 24217 9f26 890D0000 		movl	%ecx, nPC(%rip)
 24217      0000
6938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24218              		.loc 1 6938 0
 24219 9f2c 4109D0   		orl	%edx, %r8d
 24220 9f2f 8D5005   		leal	5(%rax), %edx
6951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24221              		.loc 1 6951 0
 24222 9f32 8D4809   		leal	9(%rax), %ecx
6934:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 24223              		.loc 1 6934 0
 24224 9f35 4C89F7   		movq	%r14, %rdi
6938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24225              		.loc 1 6938 0
 24226 9f38 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24226      000000
6951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24227              		.loc 1 6951 0
 24228 9f3f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24228      000000
6934:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 24229              		.loc 1 6934 0
 24230 9f46 48C1EF20 		shrq	$32, %rdi
 24231 9f4a 4989FD   		movq	%rdi, %r13
 24232              	.LVL2016:
6938:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24233              		.loc 1 6938 0
 24234 9f4d C1E210   		sall	$16, %edx
 24235 9f50 4109D0   		orl	%edx, %r8d
 24236 9f53 8D5006   		leal	6(%rax), %edx
 24237 9f56 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 872


 24237      000000
 24238 9f5d C1E208   		sall	$8, %edx
 24239 9f60 4109D0   		orl	%edx, %r8d
 24240              	.LVL2017:
6939:src/vm3.c     ****   if (op0 == 0x0) {
 24241              		.loc 1 6939 0
 24242 9f63 4489C6   		movl	%r8d, %esi
6941:src/vm3.c     ****     op0 = op0 + funct;
 24243              		.loc 1 6941 0
 24244 9f66 4488C2   		movb	%r8b, %dl
6939:src/vm3.c     ****   if (op0 == 0x0) {
 24245              		.loc 1 6939 0
 24246 9f69 C1EE1A   		shrl	$26, %esi
 24247              	.LVL2018:
6941:src/vm3.c     ****     op0 = op0 + funct;
 24248              		.loc 1 6941 0
 24249 9f6c 83E23F   		andl	$63, %edx
 24250 9f6f 8D7E2B   		leal	43(%rsi), %edi
 24251              	.LVL2019:
 24252 9f72 4084F6   		testb	%sil, %sil
 24253 9f75 0F45D7   		cmovne	%edi, %edx
 24254              	.LVL2020:
6951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24255              		.loc 1 6951 0
 24256 9f78 C1E110   		sall	$16, %ecx
 24257 9f7b C1E318   		sall	$24, %ebx
 24258 9f7e 09CB     		orl	%ecx, %ebx
 24259 9f80 8D480B   		leal	11(%rax), %ecx
 24260 9f83 83C00A   		addl	$10, %eax
 24261 9f86 0FB68000 		movzbl	VM_memory(%rax), %eax
 24261      000000
6949:src/vm3.c     **** 
 24262              		.loc 1 6949 0
 24263 9f8d 0FB6D2   		movzbl	%dl, %edx
6951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24264              		.loc 1 6951 0
 24265 9f90 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24265      000000
6949:src/vm3.c     **** 
 24266              		.loc 1 6949 0
 24267 9f97 48C1E204 		salq	$4, %rdx
 24268              	.LVL2021:
6951:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24269              		.loc 1 6951 0
 24270 9f9b C1E008   		sall	$8, %eax
 24271 9f9e 09CB     		orl	%ecx, %ebx
 24272 9fa0 09C3     		orl	%eax, %ebx
 24273              	.LVL2022:
6952:src/vm3.c     ****   if (op1 == 0x0) {
 24274              		.loc 1 6952 0
 24275 9fa2 89D9     		movl	%ebx, %ecx
6954:src/vm3.c     ****     op1 = op1 + funct;
 24276              		.loc 1 6954 0
 24277 9fa4 88D8     		movb	%bl, %al
6952:src/vm3.c     ****   if (op1 == 0x0) {
 24278              		.loc 1 6952 0
 24279 9fa6 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 873


 24280              	.LVL2023:
6954:src/vm3.c     ****     op1 = op1 + funct;
 24281              		.loc 1 6954 0
 24282 9fa9 83E03F   		andl	$63, %eax
 24283 9fac 8D712B   		leal	43(%rcx), %esi
 24284 9faf 84C9     		testb	%cl, %cl
 24285 9fb1 0F45C6   		cmovne	%esi, %eax
 24286              	.LVL2024:
6961:src/vm3.c     **** 
 24287              		.loc 1 6961 0
 24288 9fb4 0FB6C0   		movzbl	%al, %eax
 24289 9fb7 48C1E004 		salq	$4, %rax
 24290              	.LVL2025:
 24291 9fbb 48038414 		addq	58088(%rsp,%rdx), %rax
 24291      E8E20000 
 24292 9fc3 488B08   		movq	(%rax), %rcx
 24293 9fc6 E98D6DFF 		jmp	.L269
 24293      FF
 24294              	.LVL2026:
 24295              	.L147:
6969:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24296              		.loc 1 6969 0
 24297 9fcb 4489C2   		movl	%r8d, %edx
6970:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 24298              		.loc 1 6970 0
 24299 9fce 4489C0   		movl	%r8d, %eax
6972:src/vm3.c     **** PC  =  nPC;
 24300              		.loc 1 6972 0
 24301 9fd1 450FBFC0 		movswl	%r8w, %r8d
 24302              	.LVL2027:
6969:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24303              		.loc 1 6969 0
 24304 9fd5 C1EA15   		shrl	$21, %edx
6970:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 24305              		.loc 1 6970 0
 24306 9fd8 C1E810   		shrl	$16, %eax
 24307              	.LVL2028:
6974:src/vm3.c     **** 
 24308              		.loc 1 6974 0
 24309 9fdb 83050000 		addl	$4, nPC(%rip)
 24309      000004
 24310              	.LVL2029:
6972:src/vm3.c     **** PC  =  nPC;
 24311              		.loc 1 6972 0
 24312 9fe2 83E21F   		andl	$31, %edx
 24313 9fe5 83E01F   		andl	$31, %eax
 24314 9fe8 44030495 		addl	RF(,%rdx,4), %r8d
 24314      00000000 
6980:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24315              		.loc 1 6980 0
 24316 9ff0 89DA     		movl	%ebx, %edx
 24317 9ff2 C1EA15   		shrl	$21, %edx
6983:src/vm3.c     **** PC  =  nPC;
 24318              		.loc 1 6983 0
 24319 9ff5 83E21F   		andl	$31, %edx
6972:src/vm3.c     **** PC  =  nPC;
 24320              		.loc 1 6972 0
GAS LISTING /tmp/cc15eBE3.s 			page 874


 24321 9ff8 44890485 		movl	%r8d, RF(,%rax,4)
 24321      00000000 
6981:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 24322              		.loc 1 6981 0
 24323 a000 89D8     		movl	%ebx, %eax
6983:src/vm3.c     **** PC  =  nPC;
 24324              		.loc 1 6983 0
 24325 a002 0FBFDB   		movswl	%bx, %ebx
 24326              	.LVL2030:
 24327 a005 031C9500 		addl	RF(,%rdx,4), %ebx
 24327      000000
 24328              	.LVL2031:
6981:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 24329              		.loc 1 6981 0
 24330 a00c C1E810   		shrl	$16, %eax
 24331              	.LVL2032:
6983:src/vm3.c     **** PC  =  nPC;
 24332              		.loc 1 6983 0
 24333 a00f 83E01F   		andl	$31, %eax
 24334 a012 891C8500 		movl	%ebx, RF(,%rax,4)
 24334      000000
6984:src/vm3.c     **** nPC  += 4;
 24335              		.loc 1 6984 0
 24336 a019 8B050000 		movl	nPC(%rip), %eax
 24336      0000
6986:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24337              		.loc 1 6986 0
 24338 a01f 8D5003   		leal	3(%rax), %edx
6985:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24339              		.loc 1 6985 0
 24340 a022 8D4804   		leal	4(%rax), %ecx
6984:src/vm3.c     **** nPC  += 4;
 24341              		.loc 1 6984 0
 24342 a025 89050000 		movl	%eax, PC(%rip)
 24342      0000
6986:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24343              		.loc 1 6986 0
 24344 a02b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 24344      00000000 
 24345 a033 89C2     		movl	%eax, %edx
6999:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24346              		.loc 1 6999 0
 24347 a035 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 24347      000000
6986:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24348              		.loc 1 6986 0
 24349 a03c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24349      000000
6985:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24350              		.loc 1 6985 0
 24351 a043 890D0000 		movl	%ecx, nPC(%rip)
 24351      0000
6999:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24352              		.loc 1 6999 0
 24353 a049 8D4805   		leal	5(%rax), %ecx
 24354 a04c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24354      000000
GAS LISTING /tmp/cc15eBE3.s 			page 875


6986:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24355              		.loc 1 6986 0
 24356 a053 C1E218   		sall	$24, %edx
 24357 a056 4109D0   		orl	%edx, %r8d
 24358 a059 8D5001   		leal	1(%rax), %edx
 24359 a05c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24359      000000
 24360 a063 C1E210   		sall	$16, %edx
 24361 a066 4109D0   		orl	%edx, %r8d
 24362 a069 8D5002   		leal	2(%rax), %edx
 24363 a06c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24363      000000
 24364 a073 C1E208   		sall	$8, %edx
 24365 a076 4109D0   		orl	%edx, %r8d
 24366              	.LVL2033:
6987:src/vm3.c     ****   if (op0 == 0x0) {
 24367              		.loc 1 6987 0
 24368 a079 4489C6   		movl	%r8d, %esi
6989:src/vm3.c     ****     op0 = op0 + funct;
 24369              		.loc 1 6989 0
 24370 a07c 4488C2   		movb	%r8b, %dl
6987:src/vm3.c     ****   if (op0 == 0x0) {
 24371              		.loc 1 6987 0
 24372 a07f C1EE1A   		shrl	$26, %esi
 24373              	.LVL2034:
6989:src/vm3.c     ****     op0 = op0 + funct;
 24374              		.loc 1 6989 0
 24375 a082 83E23F   		andl	$63, %edx
 24376 a085 8D7E2B   		leal	43(%rsi), %edi
 24377 a088 4084F6   		testb	%sil, %sil
 24378 a08b 0F45D7   		cmovne	%edi, %edx
 24379              	.LVL2035:
6999:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24380              		.loc 1 6999 0
 24381 a08e C1E110   		sall	$16, %ecx
 24382 a091 C1E318   		sall	$24, %ebx
 24383 a094 09CB     		orl	%ecx, %ebx
 24384 a096 8D4807   		leal	7(%rax), %ecx
 24385 a099 83C006   		addl	$6, %eax
 24386 a09c 0FB68000 		movzbl	VM_memory(%rax), %eax
 24386      000000
6997:src/vm3.c     **** 
 24387              		.loc 1 6997 0
 24388 a0a3 0FB6D2   		movzbl	%dl, %edx
6999:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24389              		.loc 1 6999 0
 24390 a0a6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24390      000000
6997:src/vm3.c     **** 
 24391              		.loc 1 6997 0
 24392 a0ad 48C1E204 		salq	$4, %rdx
 24393              	.LVL2036:
6999:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24394              		.loc 1 6999 0
 24395 a0b1 C1E008   		sall	$8, %eax
 24396 a0b4 09CB     		orl	%ecx, %ebx
 24397 a0b6 09C3     		orl	%eax, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 876


 24398              	.LVL2037:
7000:src/vm3.c     ****   if (op1 == 0x0) {
 24399              		.loc 1 7000 0
 24400 a0b8 89D9     		movl	%ebx, %ecx
7002:src/vm3.c     ****     op1 = op1 + funct;
 24401              		.loc 1 7002 0
 24402 a0ba 88D8     		movb	%bl, %al
7000:src/vm3.c     ****   if (op1 == 0x0) {
 24403              		.loc 1 7000 0
 24404 a0bc C1E91A   		shrl	$26, %ecx
 24405              	.LVL2038:
7002:src/vm3.c     ****     op1 = op1 + funct;
 24406              		.loc 1 7002 0
 24407 a0bf 83E03F   		andl	$63, %eax
 24408 a0c2 8D712B   		leal	43(%rcx), %esi
 24409 a0c5 84C9     		testb	%cl, %cl
 24410 a0c7 0F45C6   		cmovne	%esi, %eax
 24411              	.LVL2039:
7009:src/vm3.c     **** 
 24412              		.loc 1 7009 0
 24413 a0ca 0FB6C0   		movzbl	%al, %eax
 24414 a0cd 48C1E004 		salq	$4, %rax
 24415              	.LVL2040:
 24416 a0d1 48038414 		addq	58088(%rsp,%rdx), %rax
 24416      E8E20000 
 24417 a0d9 488B08   		movq	(%rax), %rcx
 24418 a0dc E9776CFF 		jmp	.L269
 24418      FF
 24419              	.LVL2041:
 24420              	.L118:
7017:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
 24421              		.loc 1 7017 0
 24422 a0e1 4489C0   		movl	%r8d, %eax
 24423 a0e4 C1E815   		shrl	$21, %eax
7018:src/vm3.c     **** {
 24424              		.loc 1 7018 0
 24425 a0e7 83E01F   		andl	$31, %eax
 24426 a0ea 833C8500 		cmpl	$0, RF(,%rax,4)
 24426      00000000 
 24427 a0f2 0F8FCE00 		jg	.L890
 24427      0000
 24428              	.LVL2042:
7021:src/vm3.c     ****   nPC  += (immediate << 2);
 24429              		.loc 1 7021 0
 24430 a0f8 8B050000 		movl	nPC(%rip), %eax
 24430      0000
7022:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 24431              		.loc 1 7022 0
 24432 a0fe 450FBFC0 		movswl	%r8w, %r8d
 24433              	.LVL2043:
7023:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24434              		.loc 1 7023 0
 24435 a102 8D4803   		leal	3(%rax), %ecx
7022:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 24436              		.loc 1 7022 0
 24437 a105 428D1480 		leal	(%rax,%r8,4), %edx
7021:src/vm3.c     ****   nPC  += (immediate << 2);
GAS LISTING /tmp/cc15eBE3.s 			page 877


 24438              		.loc 1 7021 0
 24439 a109 89050000 		movl	%eax, PC(%rip)
 24439      0000
7023:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24440              		.loc 1 7023 0
 24441 a10f 440FB681 		movzbl	VM_memory(%rcx), %r8d
 24441      00000000 
 24442              	.LVL2044:
 24443 a117 89C1     		movl	%eax, %ecx
7022:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 24444              		.loc 1 7022 0
 24445 a119 89150000 		movl	%edx, nPC(%rip)
 24445      0000
7023:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24446              		.loc 1 7023 0
 24447 a11f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24447      000000
 24448 a126 C1E118   		sall	$24, %ecx
 24449 a129 4109C8   		orl	%ecx, %r8d
 24450 a12c 8D4801   		leal	1(%rax), %ecx
 24451 a12f 83C002   		addl	$2, %eax
 24452 a132 0FB68000 		movzbl	VM_memory(%rax), %eax
 24452      000000
 24453 a139 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24453      000000
 24454 a140 C1E008   		sall	$8, %eax
 24455 a143 C1E110   		sall	$16, %ecx
 24456 a146 4109C8   		orl	%ecx, %r8d
 24457 a149 4109C0   		orl	%eax, %r8d
 24458              	.LVL2045:
7024:src/vm3.c     ****   if (op0 == 0x0) {
 24459              		.loc 1 7024 0
 24460 a14c 4489C0   		movl	%r8d, %eax
7026:src/vm3.c     ****     op0 = op0 + funct;
 24461              		.loc 1 7026 0
 24462 a14f 4488C1   		movb	%r8b, %cl
7024:src/vm3.c     ****   if (op0 == 0x0) {
 24463              		.loc 1 7024 0
 24464 a152 C1E81A   		shrl	$26, %eax
 24465              	.LVL2046:
7026:src/vm3.c     ****     op0 = op0 + funct;
 24466              		.loc 1 7026 0
 24467 a155 83E13F   		andl	$63, %ecx
 24468 a158 8D702B   		leal	43(%rax), %esi
 24469 a15b 84C0     		testb	%al, %al
7036:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24470              		.loc 1 7036 0
 24471 a15d 8D4203   		leal	3(%rdx), %eax
 24472              	.LVL2047:
 24473 a160 0FB69800 		movzbl	VM_memory(%rax), %ebx
 24473      000000
 24474              	.LVL2048:
 24475 a167 89D0     		movl	%edx, %eax
7026:src/vm3.c     ****     op0 = op0 + funct;
 24476              		.loc 1 7026 0
 24477 a169 0F45CE   		cmovne	%esi, %ecx
 24478              	.LVL2049:
GAS LISTING /tmp/cc15eBE3.s 			page 878


7036:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24479              		.loc 1 7036 0
 24480 a16c 0FB68000 		movzbl	VM_memory(%rax), %eax
 24480      000000
7034:src/vm3.c     **** 
 24481              		.loc 1 7034 0
 24482 a173 0FB6C9   		movzbl	%cl, %ecx
 24483 a176 48C1E104 		salq	$4, %rcx
 24484              	.LVL2050:
7036:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24485              		.loc 1 7036 0
 24486 a17a C1E018   		sall	$24, %eax
 24487 a17d 09C3     		orl	%eax, %ebx
 24488 a17f 8D4201   		leal	1(%rdx), %eax
 24489 a182 0FB68000 		movzbl	VM_memory(%rax), %eax
 24489      000000
 24490 a189 C1E010   		sall	$16, %eax
 24491 a18c 09C3     		orl	%eax, %ebx
 24492 a18e 8D4202   		leal	2(%rdx), %eax
 24493 a191 0FB68000 		movzbl	VM_memory(%rax), %eax
 24493      000000
 24494 a198 C1E008   		sall	$8, %eax
 24495 a19b 09C3     		orl	%eax, %ebx
 24496              	.LVL2051:
7037:src/vm3.c     ****   if (op1 == 0x0) {
 24497              		.loc 1 7037 0
 24498 a19d 89DA     		movl	%ebx, %edx
7039:src/vm3.c     ****     op1 = op1 + funct;
 24499              		.loc 1 7039 0
 24500 a19f 88D8     		movb	%bl, %al
7037:src/vm3.c     ****   if (op1 == 0x0) {
 24501              		.loc 1 7037 0
 24502 a1a1 C1EA1A   		shrl	$26, %edx
 24503              	.LVL2052:
7039:src/vm3.c     ****     op1 = op1 + funct;
 24504              		.loc 1 7039 0
 24505 a1a4 83E03F   		andl	$63, %eax
 24506 a1a7 8D722B   		leal	43(%rdx), %esi
 24507 a1aa 84D2     		testb	%dl, %dl
 24508 a1ac 0F45C6   		cmovne	%esi, %eax
 24509              	.LVL2053:
7046:src/vm3.c     **** 
 24510              		.loc 1 7046 0
 24511 a1af 0FB6C0   		movzbl	%al, %eax
 24512 a1b2 48C1E004 		salq	$4, %rax
 24513              	.LVL2054:
 24514 a1b6 4803840C 		addq	58088(%rsp,%rcx), %rax
 24514      E8E20000 
 24515 a1be 488B08   		movq	(%rax), %rcx
 24516              	.LVL2055:
 24517 a1c1 E9926BFF 		jmp	.L269
 24517      FF
 24518              	.LVL2056:
 24519              	.L890:
7060:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24520              		.loc 1 7060 0
 24521 a1c6 89DA     		movl	%ebx, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 879


7061:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 24522              		.loc 1 7061 0
 24523 a1c8 89D8     		movl	%ebx, %eax
7063:src/vm3.c     **** PC  =  nPC;
 24524              		.loc 1 7063 0
 24525 a1ca 0FBFDB   		movswl	%bx, %ebx
 24526              	.LVL2057:
7060:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24527              		.loc 1 7060 0
 24528 a1cd C1EA15   		shrl	$21, %edx
7061:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 24529              		.loc 1 7061 0
 24530 a1d0 C1E810   		shrl	$16, %eax
 24531              	.LVL2058:
7053:src/vm3.c     **** }
 24532              		.loc 1 7053 0
 24533 a1d3 83050000 		addl	$4, nPC(%rip)
 24533      000004
 24534              	.LVL2059:
7063:src/vm3.c     **** PC  =  nPC;
 24535              		.loc 1 7063 0
 24536 a1da 83E21F   		andl	$31, %edx
 24537 a1dd 83E01F   		andl	$31, %eax
 24538 a1e0 031C9500 		addl	RF(,%rdx,4), %ebx
 24538      000000
 24539 a1e7 891C8500 		movl	%ebx, RF(,%rax,4)
 24539      000000
7064:src/vm3.c     **** nPC  += 4;
 24540              		.loc 1 7064 0
 24541 a1ee 8B050000 		movl	nPC(%rip), %eax
 24541      0000
7066:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24542              		.loc 1 7066 0
 24543 a1f4 8D5003   		leal	3(%rax), %edx
7065:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24544              		.loc 1 7065 0
 24545 a1f7 8D4804   		leal	4(%rax), %ecx
7064:src/vm3.c     **** nPC  += 4;
 24546              		.loc 1 7064 0
 24547 a1fa 89050000 		movl	%eax, PC(%rip)
 24547      0000
7066:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24548              		.loc 1 7066 0
 24549 a200 440FB682 		movzbl	VM_memory(%rdx), %r8d
 24549      00000000 
 24550              	.LVL2060:
 24551 a208 89C2     		movl	%eax, %edx
7079:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24552              		.loc 1 7079 0
 24553 a20a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 24553      000000
7066:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24554              		.loc 1 7066 0
 24555 a211 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24555      000000
7065:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24556              		.loc 1 7065 0
GAS LISTING /tmp/cc15eBE3.s 			page 880


 24557 a218 890D0000 		movl	%ecx, nPC(%rip)
 24557      0000
7079:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24558              		.loc 1 7079 0
 24559 a21e 8D4805   		leal	5(%rax), %ecx
 24560 a221 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24560      000000
7066:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24561              		.loc 1 7066 0
 24562 a228 C1E218   		sall	$24, %edx
 24563 a22b 4109D0   		orl	%edx, %r8d
 24564 a22e 8D5001   		leal	1(%rax), %edx
 24565 a231 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24565      000000
 24566 a238 C1E210   		sall	$16, %edx
 24567 a23b 4109D0   		orl	%edx, %r8d
 24568 a23e 8D5002   		leal	2(%rax), %edx
 24569 a241 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24569      000000
 24570 a248 C1E208   		sall	$8, %edx
 24571 a24b 4109D0   		orl	%edx, %r8d
 24572              	.LVL2061:
7067:src/vm3.c     ****   if (op0 == 0x0) {
 24573              		.loc 1 7067 0
 24574 a24e 4489C6   		movl	%r8d, %esi
7069:src/vm3.c     ****     op0 = op0 + funct;
 24575              		.loc 1 7069 0
 24576 a251 4488C2   		movb	%r8b, %dl
7067:src/vm3.c     ****   if (op0 == 0x0) {
 24577              		.loc 1 7067 0
 24578 a254 C1EE1A   		shrl	$26, %esi
 24579              	.LVL2062:
7069:src/vm3.c     ****     op0 = op0 + funct;
 24580              		.loc 1 7069 0
 24581 a257 83E23F   		andl	$63, %edx
 24582 a25a 8D7E2B   		leal	43(%rsi), %edi
 24583 a25d 4084F6   		testb	%sil, %sil
 24584 a260 0F45D7   		cmovne	%edi, %edx
 24585              	.LVL2063:
7079:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24586              		.loc 1 7079 0
 24587 a263 C1E110   		sall	$16, %ecx
 24588 a266 C1E318   		sall	$24, %ebx
 24589 a269 09CB     		orl	%ecx, %ebx
 24590 a26b 8D4807   		leal	7(%rax), %ecx
 24591 a26e 83C006   		addl	$6, %eax
 24592 a271 0FB68000 		movzbl	VM_memory(%rax), %eax
 24592      000000
7077:src/vm3.c     **** 
 24593              		.loc 1 7077 0
 24594 a278 0FB6D2   		movzbl	%dl, %edx
7079:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24595              		.loc 1 7079 0
 24596 a27b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24596      000000
7077:src/vm3.c     **** 
 24597              		.loc 1 7077 0
GAS LISTING /tmp/cc15eBE3.s 			page 881


 24598 a282 48C1E204 		salq	$4, %rdx
 24599              	.LVL2064:
7079:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24600              		.loc 1 7079 0
 24601 a286 C1E008   		sall	$8, %eax
 24602 a289 09CB     		orl	%ecx, %ebx
 24603 a28b 09C3     		orl	%eax, %ebx
 24604              	.LVL2065:
7080:src/vm3.c     ****   if (op1 == 0x0) {
 24605              		.loc 1 7080 0
 24606 a28d 89D9     		movl	%ebx, %ecx
7082:src/vm3.c     ****     op1 = op1 + funct;
 24607              		.loc 1 7082 0
 24608 a28f 88D8     		movb	%bl, %al
7080:src/vm3.c     ****   if (op1 == 0x0) {
 24609              		.loc 1 7080 0
 24610 a291 C1E91A   		shrl	$26, %ecx
 24611              	.LVL2066:
7082:src/vm3.c     ****     op1 = op1 + funct;
 24612              		.loc 1 7082 0
 24613 a294 83E03F   		andl	$63, %eax
 24614 a297 8D712B   		leal	43(%rcx), %esi
 24615 a29a 84C9     		testb	%cl, %cl
 24616 a29c 0F45C6   		cmovne	%esi, %eax
 24617              	.LVL2067:
7089:src/vm3.c     **** 
 24618              		.loc 1 7089 0
 24619 a29f 0FB6C0   		movzbl	%al, %eax
 24620 a2a2 48C1E004 		salq	$4, %rax
 24621              	.LVL2068:
 24622 a2a6 48038414 		addq	58088(%rsp,%rdx), %rax
 24622      E8E20000 
 24623 a2ae 488B08   		movq	(%rax), %rcx
 24624 a2b1 E9A26AFF 		jmp	.L269
 24624      FF
 24625              	.LVL2069:
 24626              	.L206:
7098:src/vm3.c     **** nPC = RF[rs];
 24627              		.loc 1 7098 0
 24628 a2b6 8B150000 		movl	nPC(%rip), %edx
 24628      0000
7097:src/vm3.c     **** PC = nPC;
 24629              		.loc 1 7097 0
 24630 a2bc 41C1E815 		shrl	$21, %r8d
 24631              	.LVL2070:
7099:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24632              		.loc 1 7099 0
 24633 a2c0 4183E01F 		andl	$31, %r8d
 24634 a2c4 428B0485 		movl	RF(,%r8,4), %eax
 24634      00000000 
7100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24635              		.loc 1 7100 0
 24636 a2cc 8D4A03   		leal	3(%rdx), %ecx
7098:src/vm3.c     **** nPC = RF[rs];
 24637              		.loc 1 7098 0
 24638 a2cf 89150000 		movl	%edx, PC(%rip)
 24638      0000
GAS LISTING /tmp/cc15eBE3.s 			page 882


7100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24639              		.loc 1 7100 0
 24640 a2d5 440FB681 		movzbl	VM_memory(%rcx), %r8d
 24640      00000000 
 24641 a2dd 89D1     		movl	%edx, %ecx
7099:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24642              		.loc 1 7099 0
 24643 a2df 89050000 		movl	%eax, nPC(%rip)
 24643      0000
7100:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24644              		.loc 1 7100 0
 24645 a2e5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24645      000000
 24646 a2ec C1E118   		sall	$24, %ecx
 24647 a2ef 4109C8   		orl	%ecx, %r8d
 24648 a2f2 8D4A01   		leal	1(%rdx), %ecx
 24649 a2f5 83C202   		addl	$2, %edx
 24650 a2f8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24650      000000
 24651 a2ff 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24651      000000
 24652 a306 C1E208   		sall	$8, %edx
 24653 a309 C1E110   		sall	$16, %ecx
 24654 a30c 4109C8   		orl	%ecx, %r8d
 24655 a30f 4109D0   		orl	%edx, %r8d
 24656              	.LVL2071:
7101:src/vm3.c     ****   if (op0 == 0x0) {
 24657              		.loc 1 7101 0
 24658 a312 4489C1   		movl	%r8d, %ecx
7103:src/vm3.c     ****     op0 = op0 + funct;
 24659              		.loc 1 7103 0
 24660 a315 4488C2   		movb	%r8b, %dl
7101:src/vm3.c     ****   if (op0 == 0x0) {
 24661              		.loc 1 7101 0
 24662 a318 C1E91A   		shrl	$26, %ecx
 24663              	.LVL2072:
7103:src/vm3.c     ****     op0 = op0 + funct;
 24664              		.loc 1 7103 0
 24665 a31b 83E23F   		andl	$63, %edx
 24666 a31e 8D712B   		leal	43(%rcx), %esi
 24667 a321 84C9     		testb	%cl, %cl
7113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24668              		.loc 1 7113 0
 24669 a323 8D4803   		leal	3(%rax), %ecx
 24670              	.LVL2073:
 24671 a326 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 24671      000000
 24672              	.LVL2074:
 24673 a32d 89C1     		movl	%eax, %ecx
7103:src/vm3.c     ****     op0 = op0 + funct;
 24674              		.loc 1 7103 0
 24675 a32f 0F45D6   		cmovne	%esi, %edx
 24676              	.LVL2075:
7113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24677              		.loc 1 7113 0
 24678 a332 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24678      000000
GAS LISTING /tmp/cc15eBE3.s 			page 883


7111:src/vm3.c     **** 
 24679              		.loc 1 7111 0
 24680 a339 0FB6D2   		movzbl	%dl, %edx
 24681 a33c 48C1E204 		salq	$4, %rdx
 24682              	.LVL2076:
7113:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24683              		.loc 1 7113 0
 24684 a340 C1E118   		sall	$24, %ecx
 24685 a343 09CB     		orl	%ecx, %ebx
 24686 a345 8D4801   		leal	1(%rax), %ecx
 24687 a348 83C002   		addl	$2, %eax
 24688 a34b 0FB68000 		movzbl	VM_memory(%rax), %eax
 24688      000000
 24689 a352 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24689      000000
 24690 a359 C1E008   		sall	$8, %eax
 24691 a35c C1E110   		sall	$16, %ecx
 24692 a35f 09CB     		orl	%ecx, %ebx
 24693 a361 09C3     		orl	%eax, %ebx
 24694              	.LVL2077:
7114:src/vm3.c     ****   if (op1 == 0x0) {
 24695              		.loc 1 7114 0
 24696 a363 89D9     		movl	%ebx, %ecx
7116:src/vm3.c     ****     op1 = op1 + funct;
 24697              		.loc 1 7116 0
 24698 a365 88D8     		movb	%bl, %al
7114:src/vm3.c     ****   if (op1 == 0x0) {
 24699              		.loc 1 7114 0
 24700 a367 C1E91A   		shrl	$26, %ecx
 24701              	.LVL2078:
7116:src/vm3.c     ****     op1 = op1 + funct;
 24702              		.loc 1 7116 0
 24703 a36a 83E03F   		andl	$63, %eax
 24704 a36d 8D712B   		leal	43(%rcx), %esi
 24705 a370 84C9     		testb	%cl, %cl
 24706 a372 0F45C6   		cmovne	%esi, %eax
 24707              	.LVL2079:
7123:src/vm3.c     **** 
 24708              		.loc 1 7123 0
 24709 a375 0FB6C0   		movzbl	%al, %eax
 24710 a378 48C1E004 		salq	$4, %rax
 24711              	.LVL2080:
 24712 a37c 48038414 		addq	58088(%rsp,%rdx), %rax
 24712      E8E20000 
 24713 a384 488B08   		movq	(%rax), %rcx
 24714 a387 E9CC69FF 		jmp	.L269
 24714      FF
 24715              	.LVL2081:
 24716              	.L223:
7168:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24717              		.loc 1 7168 0
 24718 a38c 4489C0   		movl	%r8d, %eax
7170:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 24719              		.loc 1 7170 0
 24720 a38f 4489C2   		movl	%r8d, %edx
7169:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 24721              		.loc 1 7169 0
GAS LISTING /tmp/cc15eBE3.s 			page 884


 24722 a392 41C1E810 		shrl	$16, %r8d
 24723              	.LVL2082:
7168:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24724              		.loc 1 7168 0
 24725 a396 C1E815   		shrl	$21, %eax
 24726              	.LVL2083:
7171:src/vm3.c     **** PC  =  nPC;
 24727              		.loc 1 7171 0
 24728 a399 4183E01F 		andl	$31, %r8d
7170:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 24729              		.loc 1 7170 0
 24730 a39d C1EA0B   		shrl	$11, %edx
 24731              	.LVL2084:
7171:src/vm3.c     **** PC  =  nPC;
 24732              		.loc 1 7171 0
 24733 a3a0 83E01F   		andl	$31, %eax
 24734 a3a3 83E21F   		andl	$31, %edx
7182:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 24735              		.loc 1 7182 0
 24736 a3a6 0FBFCB   		movswl	%bx, %ecx
7171:src/vm3.c     **** PC  =  nPC;
 24737              		.loc 1 7171 0
 24738 a3a9 8B048500 		movl	RF(,%rax,4), %eax
 24738      000000
 24739 a3b0 422B0485 		subl	RF(,%r8,4), %eax
 24739      00000000 
7173:src/vm3.c     **** 
 24740              		.loc 1 7173 0
 24741 a3b8 83050000 		addl	$4, nPC(%rip)
 24741      000004
 24742              	.LVL2085:
7171:src/vm3.c     **** PC  =  nPC;
 24743              		.loc 1 7171 0
 24744 a3bf 89049500 		movl	%eax, RF(,%rdx,4)
 24744      000000
7179:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24745              		.loc 1 7179 0
 24746 a3c6 89D8     		movl	%ebx, %eax
7180:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 24747              		.loc 1 7180 0
 24748 a3c8 C1EB10   		shrl	$16, %ebx
 24749              	.LVL2086:
7179:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24750              		.loc 1 7179 0
 24751 a3cb C1E815   		shrl	$21, %eax
 24752              	.LVL2087:
7182:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 24753              		.loc 1 7182 0
 24754 a3ce 83E31F   		andl	$31, %ebx
 24755 a3d1 83E01F   		andl	$31, %eax
 24756 a3d4 8B148500 		movl	RF(,%rax,4), %edx
 24756      000000
 24757 a3db 8B049D00 		movl	RF(,%rbx,4), %eax
 24757      000000
 24758 a3e2 8D3411   		leal	(%rcx,%rdx), %esi
 24759 a3e5 89C7     		movl	%eax, %edi
 24760 a3e7 C1EF18   		shrl	$24, %edi
GAS LISTING /tmp/cc15eBE3.s 			page 885


 24761 a3ea 4088BE00 		movb	%dil, VM_memory(%rsi)
 24761      000000
7183:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 24762              		.loc 1 7183 0
 24763 a3f1 8D741101 		leal	1(%rcx,%rdx), %esi
 24764 a3f5 89C7     		movl	%eax, %edi
 24765 a3f7 C1EF10   		shrl	$16, %edi
 24766 a3fa 4088BE00 		movb	%dil, VM_memory(%rsi)
 24766      000000
7184:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 24767              		.loc 1 7184 0
 24768 a401 8D741102 		leal	2(%rcx,%rdx), %esi
7185:src/vm3.c     **** PC  =  nPC;
 24769              		.loc 1 7185 0
 24770 a405 8D541103 		leal	3(%rcx,%rdx), %edx
7184:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 24771              		.loc 1 7184 0
 24772 a409 0FB6FC   		movzbl	%ah, %edi
 24773 a40c 4088BE00 		movb	%dil, VM_memory(%rsi)
 24773      000000
7185:src/vm3.c     **** PC  =  nPC;
 24774              		.loc 1 7185 0
 24775 a413 88820000 		movb	%al, VM_memory(%rdx)
 24775      0000
7186:src/vm3.c     **** nPC  += 4;
 24776              		.loc 1 7186 0
 24777 a419 8B050000 		movl	nPC(%rip), %eax
 24777      0000
7188:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24778              		.loc 1 7188 0
 24779 a41f 8D5003   		leal	3(%rax), %edx
7187:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24780              		.loc 1 7187 0
 24781 a422 8D4804   		leal	4(%rax), %ecx
 24782              	.LVL2088:
7186:src/vm3.c     **** nPC  += 4;
 24783              		.loc 1 7186 0
 24784 a425 89050000 		movl	%eax, PC(%rip)
 24784      0000
7188:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24785              		.loc 1 7188 0
 24786 a42b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 24786      00000000 
 24787 a433 89C2     		movl	%eax, %edx
7201:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24788              		.loc 1 7201 0
 24789 a435 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 24789      000000
7188:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24790              		.loc 1 7188 0
 24791 a43c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24791      000000
7187:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 24792              		.loc 1 7187 0
 24793 a443 890D0000 		movl	%ecx, nPC(%rip)
 24793      0000
7201:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 886


 24794              		.loc 1 7201 0
 24795 a449 8D4805   		leal	5(%rax), %ecx
 24796 a44c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24796      000000
7188:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24797              		.loc 1 7188 0
 24798 a453 C1E218   		sall	$24, %edx
 24799 a456 4109D0   		orl	%edx, %r8d
 24800 a459 8D5001   		leal	1(%rax), %edx
 24801 a45c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24801      000000
 24802 a463 C1E210   		sall	$16, %edx
 24803 a466 4109D0   		orl	%edx, %r8d
 24804 a469 8D5002   		leal	2(%rax), %edx
 24805 a46c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 24805      000000
 24806 a473 C1E208   		sall	$8, %edx
 24807 a476 4109D0   		orl	%edx, %r8d
 24808              	.LVL2089:
7189:src/vm3.c     ****   if (op0 == 0x0) {
 24809              		.loc 1 7189 0
 24810 a479 4489C6   		movl	%r8d, %esi
7191:src/vm3.c     ****     op0 = op0 + funct;
 24811              		.loc 1 7191 0
 24812 a47c 4488C2   		movb	%r8b, %dl
7189:src/vm3.c     ****   if (op0 == 0x0) {
 24813              		.loc 1 7189 0
 24814 a47f C1EE1A   		shrl	$26, %esi
 24815              	.LVL2090:
7191:src/vm3.c     ****     op0 = op0 + funct;
 24816              		.loc 1 7191 0
 24817 a482 83E23F   		andl	$63, %edx
 24818 a485 8D7E2B   		leal	43(%rsi), %edi
 24819 a488 4084F6   		testb	%sil, %sil
 24820 a48b 0F45D7   		cmovne	%edi, %edx
 24821              	.LVL2091:
7201:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24822              		.loc 1 7201 0
 24823 a48e C1E110   		sall	$16, %ecx
 24824 a491 C1E318   		sall	$24, %ebx
 24825 a494 09CB     		orl	%ecx, %ebx
 24826 a496 8D4807   		leal	7(%rax), %ecx
 24827 a499 83C006   		addl	$6, %eax
 24828 a49c 0FB68000 		movzbl	VM_memory(%rax), %eax
 24828      000000
7199:src/vm3.c     **** 
 24829              		.loc 1 7199 0
 24830 a4a3 0FB6D2   		movzbl	%dl, %edx
7201:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24831              		.loc 1 7201 0
 24832 a4a6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24832      000000
7199:src/vm3.c     **** 
 24833              		.loc 1 7199 0
 24834 a4ad 48C1E204 		salq	$4, %rdx
 24835              	.LVL2092:
7201:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 887


 24836              		.loc 1 7201 0
 24837 a4b1 C1E008   		sall	$8, %eax
 24838 a4b4 09CB     		orl	%ecx, %ebx
 24839 a4b6 09C3     		orl	%eax, %ebx
 24840              	.LVL2093:
7202:src/vm3.c     ****   if (op1 == 0x0) {
 24841              		.loc 1 7202 0
 24842 a4b8 89D9     		movl	%ebx, %ecx
7204:src/vm3.c     ****     op1 = op1 + funct;
 24843              		.loc 1 7204 0
 24844 a4ba 88D8     		movb	%bl, %al
7202:src/vm3.c     ****   if (op1 == 0x0) {
 24845              		.loc 1 7202 0
 24846 a4bc C1E91A   		shrl	$26, %ecx
 24847              	.LVL2094:
7204:src/vm3.c     ****     op1 = op1 + funct;
 24848              		.loc 1 7204 0
 24849 a4bf 83E03F   		andl	$63, %eax
 24850 a4c2 8D712B   		leal	43(%rcx), %esi
 24851 a4c5 84C9     		testb	%cl, %cl
 24852 a4c7 0F45C6   		cmovne	%esi, %eax
 24853              	.LVL2095:
7211:src/vm3.c     **** 
 24854              		.loc 1 7211 0
 24855 a4ca 0FB6C0   		movzbl	%al, %eax
 24856 a4cd 48C1E004 		salq	$4, %rax
 24857              	.LVL2096:
 24858 a4d1 48038414 		addq	58088(%rsp,%rdx), %rax
 24858      E8E20000 
 24859 a4d9 488B08   		movq	(%rax), %rcx
 24860 a4dc E97768FF 		jmp	.L269
 24860      FF
 24861              	.LVL2097:
 24862              	.L194:
7219:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24863              		.loc 1 7219 0
 24864 a4e1 4489C2   		movl	%r8d, %edx
7220:src/vm3.c     **** if (RF[rs] != RF[rt])
 24865              		.loc 1 7220 0
 24866 a4e4 4489C0   		movl	%r8d, %eax
7219:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 24867              		.loc 1 7219 0
 24868 a4e7 C1EA15   		shrl	$21, %edx
7220:src/vm3.c     **** if (RF[rs] != RF[rt])
 24869              		.loc 1 7220 0
 24870 a4ea C1E810   		shrl	$16, %eax
7221:src/vm3.c     **** {
 24871              		.loc 1 7221 0
 24872 a4ed 83E01F   		andl	$31, %eax
 24873 a4f0 83E21F   		andl	$31, %edx
 24874 a4f3 8B048500 		movl	RF(,%rax,4), %eax
 24874      000000
 24875 a4fa 39049500 		cmpl	%eax, RF(,%rdx,4)
 24875      000000
 24876 a501 0F84CE00 		je	.L907
 24876      0000
 24877              	.LVL2098:
GAS LISTING /tmp/cc15eBE3.s 			page 888


7224:src/vm3.c     ****   nPC  += (immediate << 2);
 24878              		.loc 1 7224 0
 24879 a507 8B050000 		movl	nPC(%rip), %eax
 24879      0000
7225:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 24880              		.loc 1 7225 0
 24881 a50d 450FBFC0 		movswl	%r8w, %r8d
 24882              	.LVL2099:
7226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24883              		.loc 1 7226 0
 24884 a511 8D4803   		leal	3(%rax), %ecx
7225:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 24885              		.loc 1 7225 0
 24886 a514 428D1480 		leal	(%rax,%r8,4), %edx
7224:src/vm3.c     ****   nPC  += (immediate << 2);
 24887              		.loc 1 7224 0
 24888 a518 89050000 		movl	%eax, PC(%rip)
 24888      0000
7226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24889              		.loc 1 7226 0
 24890 a51e 440FB681 		movzbl	VM_memory(%rcx), %r8d
 24890      00000000 
 24891              	.LVL2100:
 24892 a526 89C1     		movl	%eax, %ecx
7225:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 24893              		.loc 1 7225 0
 24894 a528 89150000 		movl	%edx, nPC(%rip)
 24894      0000
7226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 24895              		.loc 1 7226 0
 24896 a52e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24896      000000
 24897 a535 C1E118   		sall	$24, %ecx
 24898 a538 4109C8   		orl	%ecx, %r8d
 24899 a53b 8D4801   		leal	1(%rax), %ecx
 24900 a53e 83C002   		addl	$2, %eax
 24901 a541 0FB68000 		movzbl	VM_memory(%rax), %eax
 24901      000000
 24902 a548 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 24902      000000
 24903 a54f C1E008   		sall	$8, %eax
 24904 a552 C1E110   		sall	$16, %ecx
 24905 a555 4109C8   		orl	%ecx, %r8d
 24906 a558 4109C0   		orl	%eax, %r8d
 24907              	.LVL2101:
7227:src/vm3.c     ****   if (op0 == 0x0) {
 24908              		.loc 1 7227 0
 24909 a55b 4489C0   		movl	%r8d, %eax
7229:src/vm3.c     ****     op0 = op0 + funct;
 24910              		.loc 1 7229 0
 24911 a55e 4488C1   		movb	%r8b, %cl
7227:src/vm3.c     ****   if (op0 == 0x0) {
 24912              		.loc 1 7227 0
 24913 a561 C1E81A   		shrl	$26, %eax
 24914              	.LVL2102:
7229:src/vm3.c     ****     op0 = op0 + funct;
 24915              		.loc 1 7229 0
GAS LISTING /tmp/cc15eBE3.s 			page 889


 24916 a564 83E13F   		andl	$63, %ecx
 24917 a567 8D702B   		leal	43(%rax), %esi
 24918 a56a 84C0     		testb	%al, %al
7239:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24919              		.loc 1 7239 0
 24920 a56c 8D4203   		leal	3(%rdx), %eax
 24921              	.LVL2103:
 24922 a56f 0FB69800 		movzbl	VM_memory(%rax), %ebx
 24922      000000
 24923              	.LVL2104:
 24924 a576 89D0     		movl	%edx, %eax
7229:src/vm3.c     ****     op0 = op0 + funct;
 24925              		.loc 1 7229 0
 24926 a578 0F45CE   		cmovne	%esi, %ecx
 24927              	.LVL2105:
7239:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24928              		.loc 1 7239 0
 24929 a57b 0FB68000 		movzbl	VM_memory(%rax), %eax
 24929      000000
7237:src/vm3.c     **** 
 24930              		.loc 1 7237 0
 24931 a582 0FB6C9   		movzbl	%cl, %ecx
 24932 a585 48C1E104 		salq	$4, %rcx
 24933              	.LVL2106:
7239:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 24934              		.loc 1 7239 0
 24935 a589 C1E018   		sall	$24, %eax
 24936 a58c 09C3     		orl	%eax, %ebx
 24937 a58e 8D4201   		leal	1(%rdx), %eax
 24938 a591 0FB68000 		movzbl	VM_memory(%rax), %eax
 24938      000000
 24939 a598 C1E010   		sall	$16, %eax
 24940 a59b 09C3     		orl	%eax, %ebx
 24941 a59d 8D4202   		leal	2(%rdx), %eax
 24942 a5a0 0FB68000 		movzbl	VM_memory(%rax), %eax
 24942      000000
 24943 a5a7 C1E008   		sall	$8, %eax
 24944 a5aa 09C3     		orl	%eax, %ebx
 24945              	.LVL2107:
7240:src/vm3.c     ****   if (op1 == 0x0) {
 24946              		.loc 1 7240 0
 24947 a5ac 89DA     		movl	%ebx, %edx
7242:src/vm3.c     ****     op1 = op1 + funct;
 24948              		.loc 1 7242 0
 24949 a5ae 88D8     		movb	%bl, %al
7240:src/vm3.c     ****   if (op1 == 0x0) {
 24950              		.loc 1 7240 0
 24951 a5b0 C1EA1A   		shrl	$26, %edx
 24952              	.LVL2108:
7242:src/vm3.c     ****     op1 = op1 + funct;
 24953              		.loc 1 7242 0
 24954 a5b3 83E03F   		andl	$63, %eax
 24955 a5b6 8D722B   		leal	43(%rdx), %esi
 24956 a5b9 84D2     		testb	%dl, %dl
 24957 a5bb 0F45C6   		cmovne	%esi, %eax
 24958              	.LVL2109:
7249:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 890


 24959              		.loc 1 7249 0
 24960 a5be 0FB6C0   		movzbl	%al, %eax
 24961 a5c1 48C1E004 		salq	$4, %rax
 24962              	.LVL2110:
 24963 a5c5 4803840C 		addq	58088(%rsp,%rcx), %rax
 24963      E8E20000 
 24964 a5cd 488B08   		movq	(%rax), %rcx
 24965              	.LVL2111:
 24966 a5d0 E98367FF 		jmp	.L269
 24966      FF
 24967              	.LVL2112:
 24968              	.L907:
7263:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24969              		.loc 1 7263 0
 24970 a5d5 89D8     		movl	%ebx, %eax
7266:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 24971              		.loc 1 7266 0
 24972 a5d7 0FBFCB   		movswl	%bx, %ecx
7264:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 24973              		.loc 1 7264 0
 24974 a5da C1EB10   		shrl	$16, %ebx
 24975              	.LVL2113:
7263:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 24976              		.loc 1 7263 0
 24977 a5dd C1E815   		shrl	$21, %eax
 24978              	.LVL2114:
7266:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 24979              		.loc 1 7266 0
 24980 a5e0 83E31F   		andl	$31, %ebx
7256:src/vm3.c     **** }
 24981              		.loc 1 7256 0
 24982 a5e3 83050000 		addl	$4, nPC(%rip)
 24982      000004
 24983              	.LVL2115:
7266:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 24984              		.loc 1 7266 0
 24985 a5ea 83E01F   		andl	$31, %eax
 24986 a5ed 8B148500 		movl	RF(,%rax,4), %edx
 24986      000000
 24987 a5f4 8B049D00 		movl	RF(,%rbx,4), %eax
 24987      000000
 24988 a5fb 8D3411   		leal	(%rcx,%rdx), %esi
 24989 a5fe 89C7     		movl	%eax, %edi
 24990 a600 C1EF18   		shrl	$24, %edi
 24991 a603 4088BE00 		movb	%dil, VM_memory(%rsi)
 24991      000000
7267:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 24992              		.loc 1 7267 0
 24993 a60a 8D741101 		leal	1(%rcx,%rdx), %esi
 24994 a60e 89C7     		movl	%eax, %edi
 24995 a610 C1EF10   		shrl	$16, %edi
 24996 a613 4088BE00 		movb	%dil, VM_memory(%rsi)
 24996      000000
7268:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 24997              		.loc 1 7268 0
 24998 a61a 8D741102 		leal	2(%rcx,%rdx), %esi
7269:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 891


 24999              		.loc 1 7269 0
 25000 a61e 8D541103 		leal	3(%rcx,%rdx), %edx
7268:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 25001              		.loc 1 7268 0
 25002 a622 0FB6FC   		movzbl	%ah, %edi
 25003 a625 4088BE00 		movb	%dil, VM_memory(%rsi)
 25003      000000
7269:src/vm3.c     **** PC  =  nPC;
 25004              		.loc 1 7269 0
 25005 a62c 88820000 		movb	%al, VM_memory(%rdx)
 25005      0000
7270:src/vm3.c     **** nPC  += 4;
 25006              		.loc 1 7270 0
 25007 a632 8B050000 		movl	nPC(%rip), %eax
 25007      0000
7272:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25008              		.loc 1 7272 0
 25009 a638 8D5003   		leal	3(%rax), %edx
7271:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25010              		.loc 1 7271 0
 25011 a63b 8D4804   		leal	4(%rax), %ecx
7270:src/vm3.c     **** nPC  += 4;
 25012              		.loc 1 7270 0
 25013 a63e 89050000 		movl	%eax, PC(%rip)
 25013      0000
7272:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25014              		.loc 1 7272 0
 25015 a644 440FB682 		movzbl	VM_memory(%rdx), %r8d
 25015      00000000 
 25016              	.LVL2116:
 25017 a64c 89C2     		movl	%eax, %edx
7285:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25018              		.loc 1 7285 0
 25019 a64e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25019      000000
7272:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25020              		.loc 1 7272 0
 25021 a655 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25021      000000
7271:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25022              		.loc 1 7271 0
 25023 a65c 890D0000 		movl	%ecx, nPC(%rip)
 25023      0000
7285:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25024              		.loc 1 7285 0
 25025 a662 8D4805   		leal	5(%rax), %ecx
 25026 a665 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25026      000000
7272:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25027              		.loc 1 7272 0
 25028 a66c C1E218   		sall	$24, %edx
 25029 a66f 4109D0   		orl	%edx, %r8d
 25030 a672 8D5001   		leal	1(%rax), %edx
 25031 a675 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25031      000000
 25032 a67c C1E210   		sall	$16, %edx
 25033 a67f 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 892


 25034 a682 8D5002   		leal	2(%rax), %edx
 25035 a685 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25035      000000
 25036 a68c C1E208   		sall	$8, %edx
 25037 a68f 4109D0   		orl	%edx, %r8d
 25038              	.LVL2117:
7273:src/vm3.c     ****   if (op0 == 0x0) {
 25039              		.loc 1 7273 0
 25040 a692 4489C6   		movl	%r8d, %esi
7275:src/vm3.c     ****     op0 = op0 + funct;
 25041              		.loc 1 7275 0
 25042 a695 4488C2   		movb	%r8b, %dl
7273:src/vm3.c     ****   if (op0 == 0x0) {
 25043              		.loc 1 7273 0
 25044 a698 C1EE1A   		shrl	$26, %esi
 25045              	.LVL2118:
7275:src/vm3.c     ****     op0 = op0 + funct;
 25046              		.loc 1 7275 0
 25047 a69b 83E23F   		andl	$63, %edx
 25048 a69e 8D7E2B   		leal	43(%rsi), %edi
 25049 a6a1 4084F6   		testb	%sil, %sil
 25050 a6a4 0F45D7   		cmovne	%edi, %edx
 25051              	.LVL2119:
7285:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25052              		.loc 1 7285 0
 25053 a6a7 C1E110   		sall	$16, %ecx
 25054 a6aa C1E318   		sall	$24, %ebx
 25055 a6ad 09CB     		orl	%ecx, %ebx
 25056 a6af 8D4807   		leal	7(%rax), %ecx
 25057 a6b2 83C006   		addl	$6, %eax
 25058 a6b5 0FB68000 		movzbl	VM_memory(%rax), %eax
 25058      000000
7283:src/vm3.c     **** 
 25059              		.loc 1 7283 0
 25060 a6bc 0FB6D2   		movzbl	%dl, %edx
7285:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25061              		.loc 1 7285 0
 25062 a6bf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25062      000000
7283:src/vm3.c     **** 
 25063              		.loc 1 7283 0
 25064 a6c6 48C1E204 		salq	$4, %rdx
 25065              	.LVL2120:
7285:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25066              		.loc 1 7285 0
 25067 a6ca C1E008   		sall	$8, %eax
 25068 a6cd 09CB     		orl	%ecx, %ebx
 25069 a6cf 09C3     		orl	%eax, %ebx
 25070              	.LVL2121:
7286:src/vm3.c     ****   if (op1 == 0x0) {
 25071              		.loc 1 7286 0
 25072 a6d1 89D9     		movl	%ebx, %ecx
7288:src/vm3.c     ****     op1 = op1 + funct;
 25073              		.loc 1 7288 0
 25074 a6d3 88D8     		movb	%bl, %al
7286:src/vm3.c     ****   if (op1 == 0x0) {
 25075              		.loc 1 7286 0
GAS LISTING /tmp/cc15eBE3.s 			page 893


 25076 a6d5 C1E91A   		shrl	$26, %ecx
 25077              	.LVL2122:
7288:src/vm3.c     ****     op1 = op1 + funct;
 25078              		.loc 1 7288 0
 25079 a6d8 83E03F   		andl	$63, %eax
 25080 a6db 8D712B   		leal	43(%rcx), %esi
 25081 a6de 84C9     		testb	%cl, %cl
 25082 a6e0 0F45C6   		cmovne	%esi, %eax
 25083              	.LVL2123:
7295:src/vm3.c     **** 
 25084              		.loc 1 7295 0
 25085 a6e3 0FB6C0   		movzbl	%al, %eax
 25086 a6e6 48C1E004 		salq	$4, %rax
 25087              	.LVL2124:
 25088 a6ea 48038414 		addq	58088(%rsp,%rdx), %rax
 25088      E8E20000 
 25089 a6f2 488B08   		movq	(%rax), %rcx
 25090 a6f5 E95E66FF 		jmp	.L269
 25090      FF
 25091              	.LVL2125:
 25092              	.L134:
7303:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25093              		.loc 1 7303 0
 25094 a6fa 4489C2   		movl	%r8d, %edx
7304:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 25095              		.loc 1 7304 0
 25096 a6fd 4489C0   		movl	%r8d, %eax
7306:src/vm3.c     **** PC  =  nPC;
 25097              		.loc 1 7306 0
 25098 a700 450FBFC0 		movswl	%r8w, %r8d
 25099              	.LVL2126:
7303:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25100              		.loc 1 7303 0
 25101 a704 C1EA15   		shrl	$21, %edx
7304:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 25102              		.loc 1 7304 0
 25103 a707 C1E810   		shrl	$16, %eax
 25104              	.LVL2127:
7314:src/vm3.c     **** PC = nPC;
 25105              		.loc 1 7314 0
 25106 a70a C1EB15   		shrl	$21, %ebx
 25107              	.LVL2128:
7306:src/vm3.c     **** PC  =  nPC;
 25108              		.loc 1 7306 0
 25109 a70d 83E21F   		andl	$31, %edx
 25110 a710 83E01F   		andl	$31, %eax
7316:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25111              		.loc 1 7316 0
 25112 a713 83E31F   		andl	$31, %ebx
7306:src/vm3.c     **** PC  =  nPC;
 25113              		.loc 1 7306 0
 25114 a716 44030495 		addl	RF(,%rdx,4), %r8d
 25114      00000000 
 25115              	.LVL2129:
7308:src/vm3.c     **** 
 25116              		.loc 1 7308 0
 25117 a71e 8B150000 		movl	nPC(%rip), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 894


 25117      0000
 25118 a724 8D4A04   		leal	4(%rdx), %ecx
7317:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25119              		.loc 1 7317 0
 25120 a727 8D7207   		leal	7(%rdx), %esi
7306:src/vm3.c     **** PC  =  nPC;
 25121              		.loc 1 7306 0
 25122 a72a 44890485 		movl	%r8d, RF(,%rax,4)
 25122      00000000 
7316:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25123              		.loc 1 7316 0
 25124 a732 8B049D00 		movl	RF(,%rbx,4), %eax
 25124      000000
7315:src/vm3.c     **** nPC = RF[rs];
 25125              		.loc 1 7315 0
 25126 a739 890D0000 		movl	%ecx, PC(%rip)
 25126      0000
7317:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25127              		.loc 1 7317 0
 25128 a73f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25128      000000
 25129 a746 440FB686 		movzbl	VM_memory(%rsi), %r8d
 25129      00000000 
7316:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25130              		.loc 1 7316 0
 25131 a74e 89050000 		movl	%eax, nPC(%rip)
 25131      0000
7317:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25132              		.loc 1 7317 0
 25133 a754 C1E118   		sall	$24, %ecx
 25134 a757 4109C8   		orl	%ecx, %r8d
 25135 a75a 8D4A05   		leal	5(%rdx), %ecx
 25136 a75d 83C206   		addl	$6, %edx
 25137 a760 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25137      000000
 25138 a767 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25138      000000
 25139 a76e C1E208   		sall	$8, %edx
 25140 a771 C1E110   		sall	$16, %ecx
 25141 a774 4109C8   		orl	%ecx, %r8d
 25142 a777 4109D0   		orl	%edx, %r8d
 25143              	.LVL2130:
7318:src/vm3.c     ****   if (op0 == 0x0) {
 25144              		.loc 1 7318 0
 25145 a77a 4489C1   		movl	%r8d, %ecx
7320:src/vm3.c     ****     op0 = op0 + funct;
 25146              		.loc 1 7320 0
 25147 a77d 4488C2   		movb	%r8b, %dl
7318:src/vm3.c     ****   if (op0 == 0x0) {
 25148              		.loc 1 7318 0
 25149 a780 C1E91A   		shrl	$26, %ecx
 25150              	.LVL2131:
7320:src/vm3.c     ****     op0 = op0 + funct;
 25151              		.loc 1 7320 0
 25152 a783 83E23F   		andl	$63, %edx
 25153 a786 8D712B   		leal	43(%rcx), %esi
 25154 a789 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 895


7330:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25155              		.loc 1 7330 0
 25156 a78b 8D4803   		leal	3(%rax), %ecx
 25157              	.LVL2132:
 25158 a78e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25158      000000
 25159 a795 89C1     		movl	%eax, %ecx
7320:src/vm3.c     ****     op0 = op0 + funct;
 25160              		.loc 1 7320 0
 25161 a797 0F45D6   		cmovne	%esi, %edx
 25162              	.LVL2133:
7330:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25163              		.loc 1 7330 0
 25164 a79a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25164      000000
7328:src/vm3.c     **** 
 25165              		.loc 1 7328 0
 25166 a7a1 0FB6D2   		movzbl	%dl, %edx
 25167 a7a4 48C1E204 		salq	$4, %rdx
 25168              	.LVL2134:
7330:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25169              		.loc 1 7330 0
 25170 a7a8 C1E118   		sall	$24, %ecx
 25171 a7ab 09CB     		orl	%ecx, %ebx
 25172 a7ad 8D4801   		leal	1(%rax), %ecx
 25173 a7b0 83C002   		addl	$2, %eax
 25174 a7b3 0FB68000 		movzbl	VM_memory(%rax), %eax
 25174      000000
 25175 a7ba 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25175      000000
 25176 a7c1 C1E008   		sall	$8, %eax
 25177 a7c4 C1E110   		sall	$16, %ecx
 25178 a7c7 09CB     		orl	%ecx, %ebx
 25179 a7c9 09C3     		orl	%eax, %ebx
 25180              	.LVL2135:
7331:src/vm3.c     ****   if (op1 == 0x0) {
 25181              		.loc 1 7331 0
 25182 a7cb 89D9     		movl	%ebx, %ecx
7333:src/vm3.c     ****     op1 = op1 + funct;
 25183              		.loc 1 7333 0
 25184 a7cd 88D8     		movb	%bl, %al
7331:src/vm3.c     ****   if (op1 == 0x0) {
 25185              		.loc 1 7331 0
 25186 a7cf C1E91A   		shrl	$26, %ecx
 25187              	.LVL2136:
7333:src/vm3.c     ****     op1 = op1 + funct;
 25188              		.loc 1 7333 0
 25189 a7d2 83E03F   		andl	$63, %eax
 25190 a7d5 8D712B   		leal	43(%rcx), %esi
 25191 a7d8 84C9     		testb	%cl, %cl
 25192 a7da 0F45C6   		cmovne	%esi, %eax
 25193              	.LVL2137:
7340:src/vm3.c     **** 
 25194              		.loc 1 7340 0
 25195 a7dd 0FB6C0   		movzbl	%al, %eax
 25196 a7e0 48C1E004 		salq	$4, %rax
 25197              	.LVL2138:
GAS LISTING /tmp/cc15eBE3.s 			page 896


 25198 a7e4 48038414 		addq	58088(%rsp,%rdx), %rax
 25198      E8E20000 
 25199 a7ec 488B08   		movq	(%rax), %rcx
 25200 a7ef E96465FF 		jmp	.L269
 25200      FF
 25201              	.LVL2139:
 25202              	.L90:
7374:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25203              		.loc 1 7374 0
 25204 a7f4 4489C0   		movl	%r8d, %eax
7377:src/vm3.c     **** PC  =  nPC;
 25205              		.loc 1 7377 0
 25206 a7f7 410FBFD0 		movswl	%r8w, %edx
7375:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 25207              		.loc 1 7375 0
 25208 a7fb 41C1E810 		shrl	$16, %r8d
 25209              	.LVL2140:
7374:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25210              		.loc 1 7374 0
 25211 a7ff C1E815   		shrl	$21, %eax
 25212              	.LVL2141:
7377:src/vm3.c     **** PC  =  nPC;
 25213              		.loc 1 7377 0
 25214 a802 4183E01F 		andl	$31, %r8d
7385:src/vm3.c     **** PC = nPC;
 25215              		.loc 1 7385 0
 25216 a806 C1EB15   		shrl	$21, %ebx
 25217              	.LVL2142:
7377:src/vm3.c     **** PC  =  nPC;
 25218              		.loc 1 7377 0
 25219 a809 83E01F   		andl	$31, %eax
7387:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25220              		.loc 1 7387 0
 25221 a80c 83E31F   		andl	$31, %ebx
7377:src/vm3.c     **** PC  =  nPC;
 25222              		.loc 1 7377 0
 25223 a80f 03148500 		addl	RF(,%rax,4), %edx
 25223      000000
 25224              	.LVL2143:
 25225 a816 8D4203   		leal	3(%rdx), %eax
 25226 a819 89D1     		movl	%edx, %ecx
 25227 a81b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25227      000000
 25228 a822 0FB68000 		movzbl	VM_memory(%rax), %eax
 25228      000000
 25229 a829 C1E118   		sall	$24, %ecx
 25230 a82c 09C8     		orl	%ecx, %eax
 25231 a82e 8D4A01   		leal	1(%rdx), %ecx
 25232 a831 83C202   		addl	$2, %edx
 25233 a834 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25233      000000
 25234 a83b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25234      000000
 25235 a842 C1E208   		sall	$8, %edx
 25236 a845 C1E110   		sall	$16, %ecx
 25237 a848 09C8     		orl	%ecx, %eax
 25238 a84a 09D0     		orl	%edx, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 897


7379:src/vm3.c     **** 
 25239              		.loc 1 7379 0
 25240 a84c 8B150000 		movl	nPC(%rip), %edx
 25240      0000
7377:src/vm3.c     **** PC  =  nPC;
 25241              		.loc 1 7377 0
 25242 a852 42890485 		movl	%eax, RF(,%r8,4)
 25242      00000000 
7387:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25243              		.loc 1 7387 0
 25244 a85a 8B049D00 		movl	RF(,%rbx,4), %eax
 25244      000000
7379:src/vm3.c     **** 
 25245              		.loc 1 7379 0
 25246 a861 8D4A04   		leal	4(%rdx), %ecx
7388:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25247              		.loc 1 7388 0
 25248 a864 8D7207   		leal	7(%rdx), %esi
7387:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25249              		.loc 1 7387 0
 25250 a867 89050000 		movl	%eax, nPC(%rip)
 25250      0000
7386:src/vm3.c     **** nPC = RF[rs];
 25251              		.loc 1 7386 0
 25252 a86d 890D0000 		movl	%ecx, PC(%rip)
 25252      0000
7388:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25253              		.loc 1 7388 0
 25254 a873 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25254      000000
 25255 a87a 440FB686 		movzbl	VM_memory(%rsi), %r8d
 25255      00000000 
 25256 a882 C1E118   		sall	$24, %ecx
 25257 a885 4109C8   		orl	%ecx, %r8d
 25258 a888 8D4A05   		leal	5(%rdx), %ecx
 25259 a88b 83C206   		addl	$6, %edx
 25260 a88e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25260      000000
 25261 a895 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25261      000000
 25262 a89c C1E208   		sall	$8, %edx
 25263 a89f C1E110   		sall	$16, %ecx
 25264 a8a2 4109C8   		orl	%ecx, %r8d
 25265 a8a5 4109D0   		orl	%edx, %r8d
 25266              	.LVL2144:
7389:src/vm3.c     ****   if (op0 == 0x0) {
 25267              		.loc 1 7389 0
 25268 a8a8 4489C1   		movl	%r8d, %ecx
7391:src/vm3.c     ****     op0 = op0 + funct;
 25269              		.loc 1 7391 0
 25270 a8ab 4488C2   		movb	%r8b, %dl
7389:src/vm3.c     ****   if (op0 == 0x0) {
 25271              		.loc 1 7389 0
 25272 a8ae C1E91A   		shrl	$26, %ecx
 25273              	.LVL2145:
7391:src/vm3.c     ****     op0 = op0 + funct;
 25274              		.loc 1 7391 0
GAS LISTING /tmp/cc15eBE3.s 			page 898


 25275 a8b1 83E23F   		andl	$63, %edx
 25276 a8b4 8D712B   		leal	43(%rcx), %esi
 25277 a8b7 84C9     		testb	%cl, %cl
7401:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25278              		.loc 1 7401 0
 25279 a8b9 8D4803   		leal	3(%rax), %ecx
 25280              	.LVL2146:
 25281 a8bc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25281      000000
 25282 a8c3 89C1     		movl	%eax, %ecx
7391:src/vm3.c     ****     op0 = op0 + funct;
 25283              		.loc 1 7391 0
 25284 a8c5 0F45D6   		cmovne	%esi, %edx
 25285              	.LVL2147:
7401:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25286              		.loc 1 7401 0
 25287 a8c8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25287      000000
7399:src/vm3.c     **** 
 25288              		.loc 1 7399 0
 25289 a8cf 0FB6D2   		movzbl	%dl, %edx
 25290 a8d2 48C1E204 		salq	$4, %rdx
 25291              	.LVL2148:
7401:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25292              		.loc 1 7401 0
 25293 a8d6 C1E118   		sall	$24, %ecx
 25294 a8d9 09CB     		orl	%ecx, %ebx
 25295 a8db 8D4801   		leal	1(%rax), %ecx
 25296 a8de 83C002   		addl	$2, %eax
 25297 a8e1 0FB68000 		movzbl	VM_memory(%rax), %eax
 25297      000000
 25298 a8e8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25298      000000
 25299 a8ef C1E008   		sall	$8, %eax
 25300 a8f2 C1E110   		sall	$16, %ecx
 25301 a8f5 09CB     		orl	%ecx, %ebx
 25302 a8f7 09C3     		orl	%eax, %ebx
 25303              	.LVL2149:
7402:src/vm3.c     ****   if (op1 == 0x0) {
 25304              		.loc 1 7402 0
 25305 a8f9 89D9     		movl	%ebx, %ecx
7404:src/vm3.c     ****     op1 = op1 + funct;
 25306              		.loc 1 7404 0
 25307 a8fb 88D8     		movb	%bl, %al
7402:src/vm3.c     ****   if (op1 == 0x0) {
 25308              		.loc 1 7402 0
 25309 a8fd C1E91A   		shrl	$26, %ecx
 25310              	.LVL2150:
7404:src/vm3.c     ****     op1 = op1 + funct;
 25311              		.loc 1 7404 0
 25312 a900 83E03F   		andl	$63, %eax
 25313 a903 8D712B   		leal	43(%rcx), %esi
 25314 a906 84C9     		testb	%cl, %cl
 25315 a908 0F45C6   		cmovne	%esi, %eax
 25316              	.LVL2151:
7411:src/vm3.c     **** 
 25317              		.loc 1 7411 0
GAS LISTING /tmp/cc15eBE3.s 			page 899


 25318 a90b 0FB6C0   		movzbl	%al, %eax
 25319 a90e 48C1E004 		salq	$4, %rax
 25320              	.LVL2152:
 25321 a912 48038414 		addq	58088(%rsp,%rdx), %rax
 25321      E8E20000 
 25322 a91a 488B08   		movq	(%rax), %rcx
 25323 a91d E93664FF 		jmp	.L269
 25323      FF
 25324              	.LVL2153:
 25325              	.L202:
7446:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 25326              		.loc 1 7446 0
 25327 a922 8B150000 		movl	nPC(%rip), %edx
 25327      0000
7445:src/vm3.c     **** PC = nPC;
 25328              		.loc 1 7445 0
 25329 a928 8B050000 		movl	PC(%rip), %eax
 25329      0000
7447:src/vm3.c     **** nPC = address << 2;
 25330              		.loc 1 7447 0
 25331 a92e 4181E0FF 		andl	$67108863, %r8d
 25331      FFFF03
 25332              	.LVL2154:
7449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25333              		.loc 1 7449 0
 25334 a935 8D4A03   		leal	3(%rdx), %ecx
7445:src/vm3.c     **** PC = nPC;
 25335              		.loc 1 7445 0
 25336 a938 83C008   		addl	$8, %eax
7446:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 25337              		.loc 1 7446 0
 25338 a93b 89150000 		movl	%edx, PC(%rip)
 25338      0000
7445:src/vm3.c     **** PC = nPC;
 25339              		.loc 1 7445 0
 25340 a941 89050000 		movl	%eax, RF+124(%rip)
 25340      0000
7448:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25341              		.loc 1 7448 0
 25342 a947 428D0485 		leal	0(,%r8,4), %eax
 25342      00000000 
7449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25343              		.loc 1 7449 0
 25344 a94f 440FB681 		movzbl	VM_memory(%rcx), %r8d
 25344      00000000 
 25345 a957 89D1     		movl	%edx, %ecx
 25346 a959 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25346      000000
7448:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25347              		.loc 1 7448 0
 25348 a960 89050000 		movl	%eax, nPC(%rip)
 25348      0000
7449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25349              		.loc 1 7449 0
 25350 a966 C1E118   		sall	$24, %ecx
 25351 a969 4109C8   		orl	%ecx, %r8d
 25352 a96c 8D4A01   		leal	1(%rdx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 900


 25353 a96f 83C202   		addl	$2, %edx
 25354 a972 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25354      000000
 25355 a979 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25355      000000
 25356 a980 C1E208   		sall	$8, %edx
 25357 a983 C1E110   		sall	$16, %ecx
 25358 a986 4109C8   		orl	%ecx, %r8d
 25359 a989 4109D0   		orl	%edx, %r8d
 25360              	.LVL2155:
7450:src/vm3.c     ****   if (op0 == 0x0) {
 25361              		.loc 1 7450 0
 25362 a98c 4489C1   		movl	%r8d, %ecx
7452:src/vm3.c     ****     op0 = op0 + funct;
 25363              		.loc 1 7452 0
 25364 a98f 4488C2   		movb	%r8b, %dl
7450:src/vm3.c     ****   if (op0 == 0x0) {
 25365              		.loc 1 7450 0
 25366 a992 C1E91A   		shrl	$26, %ecx
 25367              	.LVL2156:
7452:src/vm3.c     ****     op0 = op0 + funct;
 25368              		.loc 1 7452 0
 25369 a995 83E23F   		andl	$63, %edx
 25370 a998 8D712B   		leal	43(%rcx), %esi
 25371 a99b 84C9     		testb	%cl, %cl
7462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25372              		.loc 1 7462 0
 25373 a99d 8D4803   		leal	3(%rax), %ecx
 25374              	.LVL2157:
 25375 a9a0 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25375      000000
 25376              	.LVL2158:
 25377 a9a7 89C1     		movl	%eax, %ecx
7452:src/vm3.c     ****     op0 = op0 + funct;
 25378              		.loc 1 7452 0
 25379 a9a9 0F45D6   		cmovne	%esi, %edx
 25380              	.LVL2159:
7462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25381              		.loc 1 7462 0
 25382 a9ac 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25382      000000
7460:src/vm3.c     **** 
 25383              		.loc 1 7460 0
 25384 a9b3 0FB6D2   		movzbl	%dl, %edx
 25385 a9b6 48C1E204 		salq	$4, %rdx
 25386              	.LVL2160:
7462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25387              		.loc 1 7462 0
 25388 a9ba C1E118   		sall	$24, %ecx
 25389 a9bd 09CB     		orl	%ecx, %ebx
 25390 a9bf 8D4801   		leal	1(%rax), %ecx
 25391 a9c2 83C002   		addl	$2, %eax
 25392 a9c5 0FB68000 		movzbl	VM_memory(%rax), %eax
 25392      000000
 25393 a9cc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25393      000000
 25394 a9d3 C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 901


 25395 a9d6 C1E110   		sall	$16, %ecx
 25396 a9d9 09CB     		orl	%ecx, %ebx
 25397 a9db 09C3     		orl	%eax, %ebx
 25398              	.LVL2161:
7463:src/vm3.c     ****   if (op1 == 0x0) {
 25399              		.loc 1 7463 0
 25400 a9dd 89D9     		movl	%ebx, %ecx
7465:src/vm3.c     ****     op1 = op1 + funct;
 25401              		.loc 1 7465 0
 25402 a9df 88D8     		movb	%bl, %al
7463:src/vm3.c     ****   if (op1 == 0x0) {
 25403              		.loc 1 7463 0
 25404 a9e1 C1E91A   		shrl	$26, %ecx
 25405              	.LVL2162:
7465:src/vm3.c     ****     op1 = op1 + funct;
 25406              		.loc 1 7465 0
 25407 a9e4 83E03F   		andl	$63, %eax
 25408 a9e7 8D712B   		leal	43(%rcx), %esi
 25409 a9ea 84C9     		testb	%cl, %cl
 25410 a9ec 0F45C6   		cmovne	%esi, %eax
 25411              	.LVL2163:
7472:src/vm3.c     **** 
 25412              		.loc 1 7472 0
 25413 a9ef 0FB6C0   		movzbl	%al, %eax
 25414 a9f2 48C1E004 		salq	$4, %rax
 25415              	.LVL2164:
 25416 a9f6 48038414 		addq	58088(%rsp,%rdx), %rax
 25416      E8E20000 
 25417 a9fe 488B08   		movq	(%rax), %rcx
 25418 aa01 E95263FF 		jmp	.L269
 25418      FF
 25419              	.LVL2165:
 25420              	.L58:
7518:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 25421              		.loc 1 7518 0
 25422 aa06 4489C0   		movl	%r8d, %eax
7519:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 25423              		.loc 1 7519 0
 25424 aa09 4489C2   		movl	%r8d, %edx
7517:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25425              		.loc 1 7517 0
 25426 aa0c 41C1E815 		shrl	$21, %r8d
 25427              	.LVL2166:
7518:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 25428              		.loc 1 7518 0
 25429 aa10 C1E810   		shrl	$16, %eax
 25430              	.LVL2167:
7520:src/vm3.c     **** PC  =  nPC;
 25431              		.loc 1 7520 0
 25432 aa13 4183E01F 		andl	$31, %r8d
7519:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 25433              		.loc 1 7519 0
 25434 aa17 C1EA0B   		shrl	$11, %edx
 25435              	.LVL2168:
7520:src/vm3.c     **** PC  =  nPC;
 25436              		.loc 1 7520 0
 25437 aa1a 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 902


 25438 aa1d 83E21F   		andl	$31, %edx
7522:src/vm3.c     **** 
 25439              		.loc 1 7522 0
 25440 aa20 83050000 		addl	$4, nPC(%rip)
 25440      000004
 25441              	.LVL2169:
7520:src/vm3.c     **** PC  =  nPC;
 25442              		.loc 1 7520 0
 25443 aa27 8B048500 		movl	RF(,%rax,4), %eax
 25443      000000
 25444 aa2e 42030485 		addl	RF(,%r8,4), %eax
 25444      00000000 
 25445 aa36 89049500 		movl	%eax, RF(,%rdx,4)
 25445      000000
7528:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25446              		.loc 1 7528 0
 25447 aa3d 89DA     		movl	%ebx, %edx
7530:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 25448              		.loc 1 7530 0
 25449 aa3f 89D8     		movl	%ebx, %eax
7528:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25450              		.loc 1 7528 0
 25451 aa41 C1EA15   		shrl	$21, %edx
7529:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 25452              		.loc 1 7529 0
 25453 aa44 C1EB10   		shrl	$16, %ebx
 25454              	.LVL2170:
7530:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 25455              		.loc 1 7530 0
 25456 aa47 C1E80B   		shrl	$11, %eax
 25457              	.LVL2171:
7531:src/vm3.c     **** PC  =  nPC;
 25458              		.loc 1 7531 0
 25459 aa4a 83E31F   		andl	$31, %ebx
 25460 aa4d 83E21F   		andl	$31, %edx
 25461 aa50 83E01F   		andl	$31, %eax
 25462 aa53 8B3C9D00 		movl	RF(,%rbx,4), %edi
 25462      000000
 25463 aa5a 393C9500 		cmpl	%edi, RF(,%rdx,4)
 25463      000000
 25464 aa61 0F92C2   		setb	%dl
 25465 aa64 0FB6D2   		movzbl	%dl, %edx
 25466 aa67 89148500 		movl	%edx, RF(,%rax,4)
 25466      000000
7532:src/vm3.c     **** nPC  += 4;
 25467              		.loc 1 7532 0
 25468 aa6e 8B050000 		movl	nPC(%rip), %eax
 25468      0000
7534:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25469              		.loc 1 7534 0
 25470 aa74 8D5003   		leal	3(%rax), %edx
7533:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25471              		.loc 1 7533 0
 25472 aa77 8D4804   		leal	4(%rax), %ecx
7532:src/vm3.c     **** nPC  += 4;
 25473              		.loc 1 7532 0
 25474 aa7a 89050000 		movl	%eax, PC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 903


 25474      0000
7534:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25475              		.loc 1 7534 0
 25476 aa80 440FB682 		movzbl	VM_memory(%rdx), %r8d
 25476      00000000 
 25477 aa88 89C2     		movl	%eax, %edx
7547:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25478              		.loc 1 7547 0
 25479 aa8a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25479      000000
7534:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25480              		.loc 1 7534 0
 25481 aa91 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25481      000000
7533:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25482              		.loc 1 7533 0
 25483 aa98 890D0000 		movl	%ecx, nPC(%rip)
 25483      0000
7547:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25484              		.loc 1 7547 0
 25485 aa9e 8D4805   		leal	5(%rax), %ecx
 25486 aaa1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25486      000000
7534:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25487              		.loc 1 7534 0
 25488 aaa8 C1E218   		sall	$24, %edx
 25489 aaab 4109D0   		orl	%edx, %r8d
 25490 aaae 8D5001   		leal	1(%rax), %edx
 25491 aab1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25491      000000
 25492 aab8 C1E210   		sall	$16, %edx
 25493 aabb 4109D0   		orl	%edx, %r8d
 25494 aabe 8D5002   		leal	2(%rax), %edx
 25495 aac1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25495      000000
 25496 aac8 C1E208   		sall	$8, %edx
 25497 aacb 4109D0   		orl	%edx, %r8d
 25498              	.LVL2172:
7535:src/vm3.c     ****   if (op0 == 0x0) {
 25499              		.loc 1 7535 0
 25500 aace 4489C6   		movl	%r8d, %esi
7537:src/vm3.c     ****     op0 = op0 + funct;
 25501              		.loc 1 7537 0
 25502 aad1 4488C2   		movb	%r8b, %dl
7535:src/vm3.c     ****   if (op0 == 0x0) {
 25503              		.loc 1 7535 0
 25504 aad4 C1EE1A   		shrl	$26, %esi
 25505              	.LVL2173:
7537:src/vm3.c     ****     op0 = op0 + funct;
 25506              		.loc 1 7537 0
 25507 aad7 83E23F   		andl	$63, %edx
 25508 aada 8D7E2B   		leal	43(%rsi), %edi
 25509 aadd 4084F6   		testb	%sil, %sil
 25510 aae0 0F45D7   		cmovne	%edi, %edx
 25511              	.LVL2174:
7547:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25512              		.loc 1 7547 0
GAS LISTING /tmp/cc15eBE3.s 			page 904


 25513 aae3 C1E110   		sall	$16, %ecx
 25514 aae6 C1E318   		sall	$24, %ebx
 25515 aae9 09CB     		orl	%ecx, %ebx
 25516 aaeb 8D4807   		leal	7(%rax), %ecx
 25517 aaee 83C006   		addl	$6, %eax
 25518 aaf1 0FB68000 		movzbl	VM_memory(%rax), %eax
 25518      000000
7545:src/vm3.c     **** 
 25519              		.loc 1 7545 0
 25520 aaf8 0FB6D2   		movzbl	%dl, %edx
7547:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25521              		.loc 1 7547 0
 25522 aafb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25522      000000
7545:src/vm3.c     **** 
 25523              		.loc 1 7545 0
 25524 ab02 48C1E204 		salq	$4, %rdx
 25525              	.LVL2175:
7547:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25526              		.loc 1 7547 0
 25527 ab06 C1E008   		sall	$8, %eax
 25528 ab09 09CB     		orl	%ecx, %ebx
 25529 ab0b 09C3     		orl	%eax, %ebx
 25530              	.LVL2176:
7548:src/vm3.c     ****   if (op1 == 0x0) {
 25531              		.loc 1 7548 0
 25532 ab0d 89D9     		movl	%ebx, %ecx
7550:src/vm3.c     ****     op1 = op1 + funct;
 25533              		.loc 1 7550 0
 25534 ab0f 88D8     		movb	%bl, %al
7548:src/vm3.c     ****   if (op1 == 0x0) {
 25535              		.loc 1 7548 0
 25536 ab11 C1E91A   		shrl	$26, %ecx
 25537              	.LVL2177:
7550:src/vm3.c     ****     op1 = op1 + funct;
 25538              		.loc 1 7550 0
 25539 ab14 83E03F   		andl	$63, %eax
 25540 ab17 8D712B   		leal	43(%rcx), %esi
 25541 ab1a 84C9     		testb	%cl, %cl
 25542 ab1c 0F45C6   		cmovne	%esi, %eax
 25543              	.LVL2178:
7557:src/vm3.c     **** 
 25544              		.loc 1 7557 0
 25545 ab1f 0FB6C0   		movzbl	%al, %eax
 25546 ab22 48C1E004 		salq	$4, %rax
 25547              	.LVL2179:
 25548 ab26 48038414 		addq	58088(%rsp,%rdx), %rax
 25548      E8E20000 
 25549 ab2e 488B08   		movq	(%rax), %rcx
 25550 ab31 E92262FF 		jmp	.L269
 25550      FF
 25551              	.LVL2180:
 25552              	.L100:
7565:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25553              		.loc 1 7565 0
 25554 ab36 4489C0   		movl	%r8d, %eax
7568:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 905


 25555              		.loc 1 7568 0
 25556 ab39 410FBFD0 		movswl	%r8w, %edx
7566:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 25557              		.loc 1 7566 0
 25558 ab3d 41C1E810 		shrl	$16, %r8d
 25559              	.LVL2181:
7565:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25560              		.loc 1 7565 0
 25561 ab41 C1E815   		shrl	$21, %eax
 25562              	.LVL2182:
7568:src/vm3.c     **** PC  =  nPC;
 25563              		.loc 1 7568 0
 25564 ab44 4183E01F 		andl	$31, %r8d
7570:src/vm3.c     **** 
 25565              		.loc 1 7570 0
 25566 ab48 83050000 		addl	$4, nPC(%rip)
 25566      000004
 25567              	.LVL2183:
7568:src/vm3.c     **** PC  =  nPC;
 25568              		.loc 1 7568 0
 25569 ab4f 83E01F   		andl	$31, %eax
 25570 ab52 03148500 		addl	RF(,%rax,4), %edx
 25570      000000
 25571 ab59 8D4203   		leal	3(%rdx), %eax
 25572 ab5c 89D1     		movl	%edx, %ecx
 25573 ab5e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25573      000000
 25574 ab65 0FB68000 		movzbl	VM_memory(%rax), %eax
 25574      000000
 25575 ab6c C1E118   		sall	$24, %ecx
 25576 ab6f 09C8     		orl	%ecx, %eax
 25577 ab71 8D4A01   		leal	1(%rdx), %ecx
 25578 ab74 83C202   		addl	$2, %edx
 25579 ab77 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25579      000000
 25580 ab7e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25580      000000
 25581 ab85 C1E208   		sall	$8, %edx
 25582 ab88 C1E110   		sall	$16, %ecx
 25583 ab8b 09C8     		orl	%ecx, %eax
 25584 ab8d 09D0     		orl	%edx, %eax
7576:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25585              		.loc 1 7576 0
 25586 ab8f 89DA     		movl	%ebx, %edx
 25587 ab91 C1EA15   		shrl	$21, %edx
7568:src/vm3.c     **** PC  =  nPC;
 25588              		.loc 1 7568 0
 25589 ab94 42890485 		movl	%eax, RF(,%r8,4)
 25589      00000000 
7577:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 25590              		.loc 1 7577 0
 25591 ab9c 89D8     		movl	%ebx, %eax
7579:src/vm3.c     **** PC  =  nPC;
 25592              		.loc 1 7579 0
 25593 ab9e 83E21F   		andl	$31, %edx
 25594 aba1 0FBFDB   		movswl	%bx, %ebx
 25595              	.LVL2184:
GAS LISTING /tmp/cc15eBE3.s 			page 906


7577:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 25596              		.loc 1 7577 0
 25597 aba4 C1E810   		shrl	$16, %eax
 25598              	.LVL2185:
7579:src/vm3.c     **** PC  =  nPC;
 25599              		.loc 1 7579 0
 25600 aba7 031C9500 		addl	RF(,%rdx,4), %ebx
 25600      000000
 25601              	.LVL2186:
 25602 abae 83E01F   		andl	$31, %eax
 25603 abb1 891C8500 		movl	%ebx, RF(,%rax,4)
 25603      000000
7580:src/vm3.c     **** nPC  += 4;
 25604              		.loc 1 7580 0
 25605 abb8 8B050000 		movl	nPC(%rip), %eax
 25605      0000
7582:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25606              		.loc 1 7582 0
 25607 abbe 8D5003   		leal	3(%rax), %edx
7581:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25608              		.loc 1 7581 0
 25609 abc1 8D4804   		leal	4(%rax), %ecx
7580:src/vm3.c     **** nPC  += 4;
 25610              		.loc 1 7580 0
 25611 abc4 89050000 		movl	%eax, PC(%rip)
 25611      0000
7582:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25612              		.loc 1 7582 0
 25613 abca 440FB682 		movzbl	VM_memory(%rdx), %r8d
 25613      00000000 
 25614 abd2 89C2     		movl	%eax, %edx
7595:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25615              		.loc 1 7595 0
 25616 abd4 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25616      000000
7582:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25617              		.loc 1 7582 0
 25618 abdb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25618      000000
7581:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25619              		.loc 1 7581 0
 25620 abe2 890D0000 		movl	%ecx, nPC(%rip)
 25620      0000
7595:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25621              		.loc 1 7595 0
 25622 abe8 8D4805   		leal	5(%rax), %ecx
 25623 abeb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25623      000000
7582:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25624              		.loc 1 7582 0
 25625 abf2 C1E218   		sall	$24, %edx
 25626 abf5 4109D0   		orl	%edx, %r8d
 25627 abf8 8D5001   		leal	1(%rax), %edx
 25628 abfb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25628      000000
 25629 ac02 C1E210   		sall	$16, %edx
 25630 ac05 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 907


 25631 ac08 8D5002   		leal	2(%rax), %edx
 25632 ac0b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25632      000000
 25633 ac12 C1E208   		sall	$8, %edx
 25634 ac15 4109D0   		orl	%edx, %r8d
 25635              	.LVL2187:
7583:src/vm3.c     ****   if (op0 == 0x0) {
 25636              		.loc 1 7583 0
 25637 ac18 4489C6   		movl	%r8d, %esi
7585:src/vm3.c     ****     op0 = op0 + funct;
 25638              		.loc 1 7585 0
 25639 ac1b 4488C2   		movb	%r8b, %dl
7583:src/vm3.c     ****   if (op0 == 0x0) {
 25640              		.loc 1 7583 0
 25641 ac1e C1EE1A   		shrl	$26, %esi
 25642              	.LVL2188:
7585:src/vm3.c     ****     op0 = op0 + funct;
 25643              		.loc 1 7585 0
 25644 ac21 83E23F   		andl	$63, %edx
 25645 ac24 8D7E2B   		leal	43(%rsi), %edi
 25646 ac27 4084F6   		testb	%sil, %sil
 25647 ac2a 0F45D7   		cmovne	%edi, %edx
 25648              	.LVL2189:
7595:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25649              		.loc 1 7595 0
 25650 ac2d C1E110   		sall	$16, %ecx
 25651 ac30 C1E318   		sall	$24, %ebx
 25652 ac33 09CB     		orl	%ecx, %ebx
 25653 ac35 8D4807   		leal	7(%rax), %ecx
 25654 ac38 83C006   		addl	$6, %eax
 25655 ac3b 0FB68000 		movzbl	VM_memory(%rax), %eax
 25655      000000
7593:src/vm3.c     **** 
 25656              		.loc 1 7593 0
 25657 ac42 0FB6D2   		movzbl	%dl, %edx
7595:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25658              		.loc 1 7595 0
 25659 ac45 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25659      000000
7593:src/vm3.c     **** 
 25660              		.loc 1 7593 0
 25661 ac4c 48C1E204 		salq	$4, %rdx
 25662              	.LVL2190:
7595:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25663              		.loc 1 7595 0
 25664 ac50 C1E008   		sall	$8, %eax
 25665 ac53 09CB     		orl	%ecx, %ebx
 25666 ac55 09C3     		orl	%eax, %ebx
 25667              	.LVL2191:
7596:src/vm3.c     ****   if (op1 == 0x0) {
 25668              		.loc 1 7596 0
 25669 ac57 89D9     		movl	%ebx, %ecx
7598:src/vm3.c     ****     op1 = op1 + funct;
 25670              		.loc 1 7598 0
 25671 ac59 88D8     		movb	%bl, %al
7596:src/vm3.c     ****   if (op1 == 0x0) {
 25672              		.loc 1 7596 0
GAS LISTING /tmp/cc15eBE3.s 			page 908


 25673 ac5b C1E91A   		shrl	$26, %ecx
 25674              	.LVL2192:
7598:src/vm3.c     ****     op1 = op1 + funct;
 25675              		.loc 1 7598 0
 25676 ac5e 83E03F   		andl	$63, %eax
 25677 ac61 8D712B   		leal	43(%rcx), %esi
 25678 ac64 84C9     		testb	%cl, %cl
 25679 ac66 0F45C6   		cmovne	%esi, %eax
 25680              	.LVL2193:
7605:src/vm3.c     **** 
 25681              		.loc 1 7605 0
 25682 ac69 0FB6C0   		movzbl	%al, %eax
 25683 ac6c 48C1E004 		salq	$4, %rax
 25684              	.LVL2194:
 25685 ac70 48038414 		addq	58088(%rsp,%rdx), %rax
 25685      E8E20000 
 25686 ac78 488B08   		movq	(%rax), %rcx
 25687 ac7b E9D860FF 		jmp	.L269
 25687      FF
 25688              	.LVL2195:
 25689              	.L178:
7613:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25690              		.loc 1 7613 0
 25691 ac80 4489C0   		movl	%r8d, %eax
7616:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 25692              		.loc 1 7616 0
 25693 ac83 410FBFC8 		movswl	%r8w, %ecx
7614:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 25694              		.loc 1 7614 0
 25695 ac87 41C1E810 		shrl	$16, %r8d
 25696              	.LVL2196:
7613:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25697              		.loc 1 7613 0
 25698 ac8b C1E815   		shrl	$21, %eax
 25699              	.LVL2197:
7616:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 25700              		.loc 1 7616 0
 25701 ac8e 4183E01F 		andl	$31, %r8d
7621:src/vm3.c     **** 
 25702              		.loc 1 7621 0
 25703 ac92 83050000 		addl	$4, nPC(%rip)
 25703      000004
 25704              	.LVL2198:
7616:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 25705              		.loc 1 7616 0
 25706 ac99 83E01F   		andl	$31, %eax
 25707 ac9c 8B148500 		movl	RF(,%rax,4), %edx
 25707      000000
 25708 aca3 428B0485 		movl	RF(,%r8,4), %eax
 25708      00000000 
 25709 acab 8D3411   		leal	(%rcx,%rdx), %esi
 25710 acae 89C7     		movl	%eax, %edi
 25711 acb0 C1EF18   		shrl	$24, %edi
 25712 acb3 4088BE00 		movb	%dil, VM_memory(%rsi)
 25712      000000
7617:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 25713              		.loc 1 7617 0
GAS LISTING /tmp/cc15eBE3.s 			page 909


 25714 acba 8D741101 		leal	1(%rcx,%rdx), %esi
 25715 acbe 89C7     		movl	%eax, %edi
 25716 acc0 C1EF10   		shrl	$16, %edi
 25717 acc3 4088BE00 		movb	%dil, VM_memory(%rsi)
 25717      000000
7618:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 25718              		.loc 1 7618 0
 25719 acca 8D741102 		leal	2(%rcx,%rdx), %esi
7619:src/vm3.c     **** PC  =  nPC;
 25720              		.loc 1 7619 0
 25721 acce 8D541103 		leal	3(%rcx,%rdx), %edx
7618:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 25722              		.loc 1 7618 0
 25723 acd2 0FB6FC   		movzbl	%ah, %edi
 25724 acd5 4088BE00 		movb	%dil, VM_memory(%rsi)
 25724      000000
7619:src/vm3.c     **** PC  =  nPC;
 25725              		.loc 1 7619 0
 25726 acdc 88820000 		movb	%al, VM_memory(%rdx)
 25726      0000
7628:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 25727              		.loc 1 7628 0
 25728 ace2 89D8     		movl	%ebx, %eax
 25729 ace4 C1E810   		shrl	$16, %eax
7629:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 25730              		.loc 1 7629 0
 25731 ace7 89DA     		movl	%ebx, %edx
7627:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25732              		.loc 1 7627 0
 25733 ace9 C1EB06   		shrl	$6, %ebx
 25734              	.LVL2199:
7630:src/vm3.c     **** PC  =  nPC;
 25735              		.loc 1 7630 0
 25736 acec 83E01F   		andl	$31, %eax
7627:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25737              		.loc 1 7627 0
 25738 acef 88D9     		movb	%bl, %cl
 25739              	.LVL2200:
7629:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 25740              		.loc 1 7629 0
 25741 acf1 C1EA0B   		shrl	$11, %edx
 25742              	.LVL2201:
7630:src/vm3.c     **** PC  =  nPC;
 25743              		.loc 1 7630 0
 25744 acf4 8B048500 		movl	RF(,%rax,4), %eax
 25744      000000
7627:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25745              		.loc 1 7627 0
 25746 acfb 83E11F   		andl	$31, %ecx
7630:src/vm3.c     **** PC  =  nPC;
 25747              		.loc 1 7630 0
 25748 acfe 83E21F   		andl	$31, %edx
 25749 ad01 D3E0     		sall	%cl, %eax
 25750 ad03 89049500 		movl	%eax, RF(,%rdx,4)
 25750      000000
7631:src/vm3.c     **** nPC  += 4;
 25751              		.loc 1 7631 0
GAS LISTING /tmp/cc15eBE3.s 			page 910


 25752 ad0a 8B050000 		movl	nPC(%rip), %eax
 25752      0000
7633:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25753              		.loc 1 7633 0
 25754 ad10 8D5003   		leal	3(%rax), %edx
7632:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25755              		.loc 1 7632 0
 25756 ad13 8D4804   		leal	4(%rax), %ecx
7631:src/vm3.c     **** nPC  += 4;
 25757              		.loc 1 7631 0
 25758 ad16 89050000 		movl	%eax, PC(%rip)
 25758      0000
7633:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25759              		.loc 1 7633 0
 25760 ad1c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 25760      00000000 
 25761 ad24 89C2     		movl	%eax, %edx
7646:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25762              		.loc 1 7646 0
 25763 ad26 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25763      000000
7633:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25764              		.loc 1 7633 0
 25765 ad2d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25765      000000
7632:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25766              		.loc 1 7632 0
 25767 ad34 890D0000 		movl	%ecx, nPC(%rip)
 25767      0000
7646:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25768              		.loc 1 7646 0
 25769 ad3a 8D4805   		leal	5(%rax), %ecx
 25770 ad3d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25770      000000
7633:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25771              		.loc 1 7633 0
 25772 ad44 C1E218   		sall	$24, %edx
 25773 ad47 4109D0   		orl	%edx, %r8d
 25774 ad4a 8D5001   		leal	1(%rax), %edx
 25775 ad4d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25775      000000
 25776 ad54 C1E210   		sall	$16, %edx
 25777 ad57 4109D0   		orl	%edx, %r8d
 25778 ad5a 8D5002   		leal	2(%rax), %edx
 25779 ad5d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25779      000000
 25780 ad64 C1E208   		sall	$8, %edx
 25781 ad67 4109D0   		orl	%edx, %r8d
 25782              	.LVL2202:
7634:src/vm3.c     ****   if (op0 == 0x0) {
 25783              		.loc 1 7634 0
 25784 ad6a 4489C6   		movl	%r8d, %esi
7636:src/vm3.c     ****     op0 = op0 + funct;
 25785              		.loc 1 7636 0
 25786 ad6d 4488C2   		movb	%r8b, %dl
7634:src/vm3.c     ****   if (op0 == 0x0) {
 25787              		.loc 1 7634 0
GAS LISTING /tmp/cc15eBE3.s 			page 911


 25788 ad70 C1EE1A   		shrl	$26, %esi
 25789              	.LVL2203:
7636:src/vm3.c     ****     op0 = op0 + funct;
 25790              		.loc 1 7636 0
 25791 ad73 83E23F   		andl	$63, %edx
 25792 ad76 8D7E2B   		leal	43(%rsi), %edi
 25793 ad79 4084F6   		testb	%sil, %sil
 25794 ad7c 0F45D7   		cmovne	%edi, %edx
 25795              	.LVL2204:
7646:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25796              		.loc 1 7646 0
 25797 ad7f C1E110   		sall	$16, %ecx
 25798 ad82 C1E318   		sall	$24, %ebx
 25799 ad85 09CB     		orl	%ecx, %ebx
 25800 ad87 8D4807   		leal	7(%rax), %ecx
 25801 ad8a 83C006   		addl	$6, %eax
 25802 ad8d 0FB68000 		movzbl	VM_memory(%rax), %eax
 25802      000000
7644:src/vm3.c     **** 
 25803              		.loc 1 7644 0
 25804 ad94 0FB6D2   		movzbl	%dl, %edx
7646:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25805              		.loc 1 7646 0
 25806 ad97 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25806      000000
7644:src/vm3.c     **** 
 25807              		.loc 1 7644 0
 25808 ad9e 48C1E204 		salq	$4, %rdx
 25809              	.LVL2205:
7646:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25810              		.loc 1 7646 0
 25811 ada2 C1E008   		sall	$8, %eax
 25812 ada5 09CB     		orl	%ecx, %ebx
 25813 ada7 09C3     		orl	%eax, %ebx
 25814              	.LVL2206:
7647:src/vm3.c     ****   if (op1 == 0x0) {
 25815              		.loc 1 7647 0
 25816 ada9 89D9     		movl	%ebx, %ecx
7649:src/vm3.c     ****     op1 = op1 + funct;
 25817              		.loc 1 7649 0
 25818 adab 88D8     		movb	%bl, %al
7647:src/vm3.c     ****   if (op1 == 0x0) {
 25819              		.loc 1 7647 0
 25820 adad C1E91A   		shrl	$26, %ecx
 25821              	.LVL2207:
7649:src/vm3.c     ****     op1 = op1 + funct;
 25822              		.loc 1 7649 0
 25823 adb0 83E03F   		andl	$63, %eax
 25824 adb3 8D712B   		leal	43(%rcx), %esi
 25825 adb6 84C9     		testb	%cl, %cl
 25826 adb8 0F45C6   		cmovne	%esi, %eax
 25827              	.LVL2208:
7656:src/vm3.c     **** 
 25828              		.loc 1 7656 0
 25829 adbb 0FB6C0   		movzbl	%al, %eax
 25830 adbe 48C1E004 		salq	$4, %rax
 25831              	.LVL2209:
GAS LISTING /tmp/cc15eBE3.s 			page 912


 25832 adc2 48038414 		addq	58088(%rsp,%rdx), %rax
 25832      E8E20000 
 25833 adca 488B08   		movq	(%rax), %rcx
 25834 adcd E9865FFF 		jmp	.L269
 25834      FF
 25835              	.LVL2210:
 25836              	.L31:
7665:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 25837              		.loc 1 7665 0
 25838 add2 4489C0   		movl	%r8d, %eax
7666:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 25839              		.loc 1 7666 0
 25840 add5 4489C2   		movl	%r8d, %edx
7664:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25841              		.loc 1 7664 0
 25842 add8 41C1E806 		shrl	$6, %r8d
 25843              	.LVL2211:
7665:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 25844              		.loc 1 7665 0
 25845 addc C1E810   		shrl	$16, %eax
 25846              	.LVL2212:
7664:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25847              		.loc 1 7664 0
 25848 addf 4488C1   		movb	%r8b, %cl
7666:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 25849              		.loc 1 7666 0
 25850 ade2 C1EA0B   		shrl	$11, %edx
 25851              	.LVL2213:
7667:src/vm3.c     **** PC  =  nPC;
 25852              		.loc 1 7667 0
 25853 ade5 83E01F   		andl	$31, %eax
7664:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25854              		.loc 1 7664 0
 25855 ade8 83E11F   		andl	$31, %ecx
7667:src/vm3.c     **** PC  =  nPC;
 25856              		.loc 1 7667 0
 25857 adeb 83E21F   		andl	$31, %edx
 25858 adee 8B048500 		movl	RF(,%rax,4), %eax
 25858      000000
7669:src/vm3.c     **** 
 25859              		.loc 1 7669 0
 25860 adf5 83050000 		addl	$4, nPC(%rip)
 25860      000004
 25861              	.LVL2214:
7667:src/vm3.c     **** PC  =  nPC;
 25862              		.loc 1 7667 0
 25863 adfc D3E0     		sall	%cl, %eax
 25864 adfe 89049500 		movl	%eax, RF(,%rdx,4)
 25864      000000
7675:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25865              		.loc 1 7675 0
 25866 ae05 89DA     		movl	%ebx, %edx
7676:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 25867              		.loc 1 7676 0
 25868 ae07 89D8     		movl	%ebx, %eax
7675:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25869              		.loc 1 7675 0
GAS LISTING /tmp/cc15eBE3.s 			page 913


 25870 ae09 C1EA15   		shrl	$21, %edx
7678:src/vm3.c     **** PC  =  nPC;
 25871              		.loc 1 7678 0
 25872 ae0c 0FBFDB   		movswl	%bx, %ebx
 25873              	.LVL2215:
7676:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 25874              		.loc 1 7676 0
 25875 ae0f C1E810   		shrl	$16, %eax
 25876              	.LVL2216:
7678:src/vm3.c     **** PC  =  nPC;
 25877              		.loc 1 7678 0
 25878 ae12 83E21F   		andl	$31, %edx
 25879 ae15 83E01F   		andl	$31, %eax
 25880 ae18 0B1C9500 		orl	RF(,%rdx,4), %ebx
 25880      000000
 25881              	.LVL2217:
 25882 ae1f 891C8500 		movl	%ebx, RF(,%rax,4)
 25882      000000
7679:src/vm3.c     **** nPC  += 4;
 25883              		.loc 1 7679 0
 25884 ae26 8B050000 		movl	nPC(%rip), %eax
 25884      0000
7681:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25885              		.loc 1 7681 0
 25886 ae2c 8D5003   		leal	3(%rax), %edx
7680:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25887              		.loc 1 7680 0
 25888 ae2f 8D4804   		leal	4(%rax), %ecx
7679:src/vm3.c     **** nPC  += 4;
 25889              		.loc 1 7679 0
 25890 ae32 89050000 		movl	%eax, PC(%rip)
 25890      0000
7681:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25891              		.loc 1 7681 0
 25892 ae38 440FB682 		movzbl	VM_memory(%rdx), %r8d
 25892      00000000 
 25893 ae40 89C2     		movl	%eax, %edx
7694:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25894              		.loc 1 7694 0
 25895 ae42 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 25895      000000
7681:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25896              		.loc 1 7681 0
 25897 ae49 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25897      000000
7680:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 25898              		.loc 1 7680 0
 25899 ae50 890D0000 		movl	%ecx, nPC(%rip)
 25899      0000
7694:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25900              		.loc 1 7694 0
 25901 ae56 8D4805   		leal	5(%rax), %ecx
 25902 ae59 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25902      000000
7681:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 25903              		.loc 1 7681 0
 25904 ae60 C1E218   		sall	$24, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 914


 25905 ae63 4109D0   		orl	%edx, %r8d
 25906 ae66 8D5001   		leal	1(%rax), %edx
 25907 ae69 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25907      000000
 25908 ae70 C1E210   		sall	$16, %edx
 25909 ae73 4109D0   		orl	%edx, %r8d
 25910 ae76 8D5002   		leal	2(%rax), %edx
 25911 ae79 0FB69200 		movzbl	VM_memory(%rdx), %edx
 25911      000000
 25912 ae80 C1E208   		sall	$8, %edx
 25913 ae83 4109D0   		orl	%edx, %r8d
 25914              	.LVL2218:
7682:src/vm3.c     ****   if (op0 == 0x0) {
 25915              		.loc 1 7682 0
 25916 ae86 4489C6   		movl	%r8d, %esi
7684:src/vm3.c     ****     op0 = op0 + funct;
 25917              		.loc 1 7684 0
 25918 ae89 4488C2   		movb	%r8b, %dl
7682:src/vm3.c     ****   if (op0 == 0x0) {
 25919              		.loc 1 7682 0
 25920 ae8c C1EE1A   		shrl	$26, %esi
 25921              	.LVL2219:
7684:src/vm3.c     ****     op0 = op0 + funct;
 25922              		.loc 1 7684 0
 25923 ae8f 83E23F   		andl	$63, %edx
 25924 ae92 8D7E2B   		leal	43(%rsi), %edi
 25925 ae95 4084F6   		testb	%sil, %sil
 25926 ae98 0F45D7   		cmovne	%edi, %edx
 25927              	.LVL2220:
7694:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25928              		.loc 1 7694 0
 25929 ae9b C1E110   		sall	$16, %ecx
 25930 ae9e C1E318   		sall	$24, %ebx
 25931 aea1 09CB     		orl	%ecx, %ebx
 25932 aea3 8D4807   		leal	7(%rax), %ecx
 25933 aea6 83C006   		addl	$6, %eax
 25934 aea9 0FB68000 		movzbl	VM_memory(%rax), %eax
 25934      000000
7692:src/vm3.c     **** 
 25935              		.loc 1 7692 0
 25936 aeb0 0FB6D2   		movzbl	%dl, %edx
7694:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25937              		.loc 1 7694 0
 25938 aeb3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 25938      000000
7692:src/vm3.c     **** 
 25939              		.loc 1 7692 0
 25940 aeba 48C1E204 		salq	$4, %rdx
 25941              	.LVL2221:
7694:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 25942              		.loc 1 7694 0
 25943 aebe C1E008   		sall	$8, %eax
 25944 aec1 09CB     		orl	%ecx, %ebx
 25945 aec3 09C3     		orl	%eax, %ebx
 25946              	.LVL2222:
7695:src/vm3.c     ****   if (op1 == 0x0) {
 25947              		.loc 1 7695 0
GAS LISTING /tmp/cc15eBE3.s 			page 915


 25948 aec5 89D9     		movl	%ebx, %ecx
7697:src/vm3.c     ****     op1 = op1 + funct;
 25949              		.loc 1 7697 0
 25950 aec7 88D8     		movb	%bl, %al
7695:src/vm3.c     ****   if (op1 == 0x0) {
 25951              		.loc 1 7695 0
 25952 aec9 C1E91A   		shrl	$26, %ecx
 25953              	.LVL2223:
7697:src/vm3.c     ****     op1 = op1 + funct;
 25954              		.loc 1 7697 0
 25955 aecc 83E03F   		andl	$63, %eax
 25956 aecf 8D712B   		leal	43(%rcx), %esi
 25957 aed2 84C9     		testb	%cl, %cl
 25958 aed4 0F45C6   		cmovne	%esi, %eax
 25959              	.LVL2224:
7704:src/vm3.c     **** 
 25960              		.loc 1 7704 0
 25961 aed7 0FB6C0   		movzbl	%al, %eax
 25962 aeda 48C1E004 		salq	$4, %rax
 25963              	.LVL2225:
 25964 aede 48038414 		addq	58088(%rsp,%rdx), %rax
 25964      E8E20000 
 25965 aee6 488B08   		movq	(%rax), %rcx
 25966 aee9 E96A5EFF 		jmp	.L269
 25966      FF
 25967              	.LVL2226:
 25968              	.L68:
7713:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 25969              		.loc 1 7713 0
 25970 aeee 4489C0   		movl	%r8d, %eax
7714:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 25971              		.loc 1 7714 0
 25972 aef1 4489C2   		movl	%r8d, %edx
7712:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 25973              		.loc 1 7712 0
 25974 aef4 41C1E815 		shrl	$21, %r8d
 25975              	.LVL2227:
7713:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 25976              		.loc 1 7713 0
 25977 aef8 C1E810   		shrl	$16, %eax
 25978              	.LVL2228:
7715:src/vm3.c     **** PC  =  nPC;
 25979              		.loc 1 7715 0
 25980 aefb 4183E01F 		andl	$31, %r8d
7714:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 25981              		.loc 1 7714 0
 25982 aeff C1EA0B   		shrl	$11, %edx
 25983              	.LVL2229:
7715:src/vm3.c     **** PC  =  nPC;
 25984              		.loc 1 7715 0
 25985 af02 83E01F   		andl	$31, %eax
 25986 af05 83E21F   		andl	$31, %edx
7726:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 25987              		.loc 1 7726 0
 25988 af08 0FBFCB   		movswl	%bx, %ecx
7715:src/vm3.c     **** PC  =  nPC;
 25989              		.loc 1 7715 0
GAS LISTING /tmp/cc15eBE3.s 			page 916


 25990 af0b 8B048500 		movl	RF(,%rax,4), %eax
 25990      000000
 25991 af12 42030485 		addl	RF(,%r8,4), %eax
 25991      00000000 
7717:src/vm3.c     **** 
 25992              		.loc 1 7717 0
 25993 af1a 83050000 		addl	$4, nPC(%rip)
 25993      000004
 25994              	.LVL2230:
7715:src/vm3.c     **** PC  =  nPC;
 25995              		.loc 1 7715 0
 25996 af21 89049500 		movl	%eax, RF(,%rdx,4)
 25996      000000
7723:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 25997              		.loc 1 7723 0
 25998 af28 89D8     		movl	%ebx, %eax
7724:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 25999              		.loc 1 7724 0
 26000 af2a C1EB10   		shrl	$16, %ebx
 26001              	.LVL2231:
7723:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26002              		.loc 1 7723 0
 26003 af2d C1E815   		shrl	$21, %eax
 26004              	.LVL2232:
7726:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 26005              		.loc 1 7726 0
 26006 af30 83E31F   		andl	$31, %ebx
 26007 af33 83E01F   		andl	$31, %eax
 26008 af36 8B148500 		movl	RF(,%rax,4), %edx
 26008      000000
 26009 af3d 8B049D00 		movl	RF(,%rbx,4), %eax
 26009      000000
 26010 af44 8D3411   		leal	(%rcx,%rdx), %esi
 26011 af47 89C7     		movl	%eax, %edi
 26012 af49 C1EF18   		shrl	$24, %edi
 26013 af4c 4088BE00 		movb	%dil, VM_memory(%rsi)
 26013      000000
7727:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 26014              		.loc 1 7727 0
 26015 af53 8D741101 		leal	1(%rcx,%rdx), %esi
 26016 af57 89C7     		movl	%eax, %edi
 26017 af59 C1EF10   		shrl	$16, %edi
 26018 af5c 4088BE00 		movb	%dil, VM_memory(%rsi)
 26018      000000
7728:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 26019              		.loc 1 7728 0
 26020 af63 8D741102 		leal	2(%rcx,%rdx), %esi
7729:src/vm3.c     **** PC  =  nPC;
 26021              		.loc 1 7729 0
 26022 af67 8D541103 		leal	3(%rcx,%rdx), %edx
7728:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 26023              		.loc 1 7728 0
 26024 af6b 0FB6FC   		movzbl	%ah, %edi
 26025 af6e 4088BE00 		movb	%dil, VM_memory(%rsi)
 26025      000000
7729:src/vm3.c     **** PC  =  nPC;
 26026              		.loc 1 7729 0
GAS LISTING /tmp/cc15eBE3.s 			page 917


 26027 af75 88820000 		movb	%al, VM_memory(%rdx)
 26027      0000
7730:src/vm3.c     **** nPC  += 4;
 26028              		.loc 1 7730 0
 26029 af7b 8B050000 		movl	nPC(%rip), %eax
 26029      0000
7732:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26030              		.loc 1 7732 0
 26031 af81 8D5003   		leal	3(%rax), %edx
7731:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26032              		.loc 1 7731 0
 26033 af84 8D4804   		leal	4(%rax), %ecx
 26034              	.LVL2233:
7730:src/vm3.c     **** nPC  += 4;
 26035              		.loc 1 7730 0
 26036 af87 89050000 		movl	%eax, PC(%rip)
 26036      0000
7732:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26037              		.loc 1 7732 0
 26038 af8d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26038      00000000 
 26039 af95 89C2     		movl	%eax, %edx
7745:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26040              		.loc 1 7745 0
 26041 af97 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26041      000000
7732:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26042              		.loc 1 7732 0
 26043 af9e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26043      000000
7731:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26044              		.loc 1 7731 0
 26045 afa5 890D0000 		movl	%ecx, nPC(%rip)
 26045      0000
7745:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26046              		.loc 1 7745 0
 26047 afab 8D4805   		leal	5(%rax), %ecx
 26048 afae 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26048      000000
7732:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26049              		.loc 1 7732 0
 26050 afb5 C1E218   		sall	$24, %edx
 26051 afb8 4109D0   		orl	%edx, %r8d
 26052 afbb 8D5001   		leal	1(%rax), %edx
 26053 afbe 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26053      000000
 26054 afc5 C1E210   		sall	$16, %edx
 26055 afc8 4109D0   		orl	%edx, %r8d
 26056 afcb 8D5002   		leal	2(%rax), %edx
 26057 afce 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26057      000000
 26058 afd5 C1E208   		sall	$8, %edx
 26059 afd8 4109D0   		orl	%edx, %r8d
 26060              	.LVL2234:
7733:src/vm3.c     ****   if (op0 == 0x0) {
 26061              		.loc 1 7733 0
 26062 afdb 4489C6   		movl	%r8d, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 918


7735:src/vm3.c     ****     op0 = op0 + funct;
 26063              		.loc 1 7735 0
 26064 afde 4488C2   		movb	%r8b, %dl
7733:src/vm3.c     ****   if (op0 == 0x0) {
 26065              		.loc 1 7733 0
 26066 afe1 C1EE1A   		shrl	$26, %esi
 26067              	.LVL2235:
7735:src/vm3.c     ****     op0 = op0 + funct;
 26068              		.loc 1 7735 0
 26069 afe4 83E23F   		andl	$63, %edx
 26070 afe7 8D7E2B   		leal	43(%rsi), %edi
 26071 afea 4084F6   		testb	%sil, %sil
 26072 afed 0F45D7   		cmovne	%edi, %edx
 26073              	.LVL2236:
7745:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26074              		.loc 1 7745 0
 26075 aff0 C1E110   		sall	$16, %ecx
 26076 aff3 C1E318   		sall	$24, %ebx
 26077 aff6 09CB     		orl	%ecx, %ebx
 26078 aff8 8D4807   		leal	7(%rax), %ecx
 26079 affb 83C006   		addl	$6, %eax
 26080 affe 0FB68000 		movzbl	VM_memory(%rax), %eax
 26080      000000
7743:src/vm3.c     **** 
 26081              		.loc 1 7743 0
 26082 b005 0FB6D2   		movzbl	%dl, %edx
7745:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26083              		.loc 1 7745 0
 26084 b008 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26084      000000
7743:src/vm3.c     **** 
 26085              		.loc 1 7743 0
 26086 b00f 48C1E204 		salq	$4, %rdx
 26087              	.LVL2237:
7745:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26088              		.loc 1 7745 0
 26089 b013 C1E008   		sall	$8, %eax
 26090 b016 09CB     		orl	%ecx, %ebx
 26091 b018 09C3     		orl	%eax, %ebx
 26092              	.LVL2238:
7746:src/vm3.c     ****   if (op1 == 0x0) {
 26093              		.loc 1 7746 0
 26094 b01a 89D9     		movl	%ebx, %ecx
7748:src/vm3.c     ****     op1 = op1 + funct;
 26095              		.loc 1 7748 0
 26096 b01c 88D8     		movb	%bl, %al
7746:src/vm3.c     ****   if (op1 == 0x0) {
 26097              		.loc 1 7746 0
 26098 b01e C1E91A   		shrl	$26, %ecx
 26099              	.LVL2239:
7748:src/vm3.c     ****     op1 = op1 + funct;
 26100              		.loc 1 7748 0
 26101 b021 83E03F   		andl	$63, %eax
 26102 b024 8D712B   		leal	43(%rcx), %esi
 26103 b027 84C9     		testb	%cl, %cl
 26104 b029 0F45C6   		cmovne	%esi, %eax
 26105              	.LVL2240:
GAS LISTING /tmp/cc15eBE3.s 			page 919


7755:src/vm3.c     **** 
 26106              		.loc 1 7755 0
 26107 b02c 0FB6C0   		movzbl	%al, %eax
 26108 b02f 48C1E004 		salq	$4, %rax
 26109              	.LVL2241:
 26110 b033 48038414 		addq	58088(%rsp,%rdx), %rax
 26110      E8E20000 
 26111 b03b 488B08   		movq	(%rax), %rcx
 26112 b03e E9155DFF 		jmp	.L269
 26112      FF
 26113              	.LVL2242:
 26114              	.L151:
7763:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26115              		.loc 1 7763 0
 26116 b043 4489C2   		movl	%r8d, %edx
7764:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 26117              		.loc 1 7764 0
 26118 b046 4489C0   		movl	%r8d, %eax
7766:src/vm3.c     **** PC  =  nPC;
 26119              		.loc 1 7766 0
 26120 b049 450FBFC0 		movswl	%r8w, %r8d
 26121              	.LVL2243:
7763:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26122              		.loc 1 7763 0
 26123 b04d C1EA15   		shrl	$21, %edx
7764:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 26124              		.loc 1 7764 0
 26125 b050 C1E810   		shrl	$16, %eax
 26126              	.LVL2244:
7768:src/vm3.c     **** 
 26127              		.loc 1 7768 0
 26128 b053 83050000 		addl	$4, nPC(%rip)
 26128      000004
 26129              	.LVL2245:
7766:src/vm3.c     **** PC  =  nPC;
 26130              		.loc 1 7766 0
 26131 b05a 83E21F   		andl	$31, %edx
 26132 b05d 83E01F   		andl	$31, %eax
 26133 b060 44030495 		addl	RF(,%rdx,4), %r8d
 26133      00000000 
7777:src/vm3.c     **** PC  =  nPC;
 26134              		.loc 1 7777 0
 26135 b068 0FBFD3   		movswl	%bx, %edx
7766:src/vm3.c     **** PC  =  nPC;
 26136              		.loc 1 7766 0
 26137 b06b 44890485 		movl	%r8d, RF(,%rax,4)
 26137      00000000 
7774:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26138              		.loc 1 7774 0
 26139 b073 89D8     		movl	%ebx, %eax
7775:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 26140              		.loc 1 7775 0
 26141 b075 C1EB10   		shrl	$16, %ebx
 26142              	.LVL2246:
7774:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26143              		.loc 1 7774 0
 26144 b078 C1E815   		shrl	$21, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 920


 26145              	.LVL2247:
7777:src/vm3.c     **** PC  =  nPC;
 26146              		.loc 1 7777 0
 26147 b07b 83E31F   		andl	$31, %ebx
 26148 b07e 83E01F   		andl	$31, %eax
 26149 b081 03148500 		addl	RF(,%rax,4), %edx
 26149      000000
 26150              	.LVL2248:
 26151 b088 8D4203   		leal	3(%rdx), %eax
 26152 b08b 89D1     		movl	%edx, %ecx
 26153 b08d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26153      000000
 26154 b094 0FB68000 		movzbl	VM_memory(%rax), %eax
 26154      000000
 26155 b09b C1E118   		sall	$24, %ecx
 26156 b09e 09C8     		orl	%ecx, %eax
 26157 b0a0 8D4A01   		leal	1(%rdx), %ecx
 26158 b0a3 83C202   		addl	$2, %edx
 26159 b0a6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26159      000000
 26160 b0ad 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26160      000000
 26161 b0b4 C1E208   		sall	$8, %edx
 26162 b0b7 C1E110   		sall	$16, %ecx
 26163 b0ba 09C8     		orl	%ecx, %eax
 26164 b0bc 09D0     		orl	%edx, %eax
 26165 b0be 89049D00 		movl	%eax, RF(,%rbx,4)
 26165      000000
7778:src/vm3.c     **** nPC  += 4;
 26166              		.loc 1 7778 0
 26167 b0c5 8B050000 		movl	nPC(%rip), %eax
 26167      0000
7780:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26168              		.loc 1 7780 0
 26169 b0cb 8D5003   		leal	3(%rax), %edx
7779:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26170              		.loc 1 7779 0
 26171 b0ce 8D4804   		leal	4(%rax), %ecx
7778:src/vm3.c     **** nPC  += 4;
 26172              		.loc 1 7778 0
 26173 b0d1 89050000 		movl	%eax, PC(%rip)
 26173      0000
7780:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26174              		.loc 1 7780 0
 26175 b0d7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26175      00000000 
 26176 b0df 89C2     		movl	%eax, %edx
7793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26177              		.loc 1 7793 0
 26178 b0e1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26178      000000
7780:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26179              		.loc 1 7780 0
 26180 b0e8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26180      000000
7779:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26181              		.loc 1 7779 0
GAS LISTING /tmp/cc15eBE3.s 			page 921


 26182 b0ef 890D0000 		movl	%ecx, nPC(%rip)
 26182      0000
7793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26183              		.loc 1 7793 0
 26184 b0f5 8D4805   		leal	5(%rax), %ecx
 26185 b0f8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26185      000000
7780:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26186              		.loc 1 7780 0
 26187 b0ff C1E218   		sall	$24, %edx
 26188 b102 4109D0   		orl	%edx, %r8d
 26189 b105 8D5001   		leal	1(%rax), %edx
 26190 b108 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26190      000000
 26191 b10f C1E210   		sall	$16, %edx
 26192 b112 4109D0   		orl	%edx, %r8d
 26193 b115 8D5002   		leal	2(%rax), %edx
 26194 b118 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26194      000000
 26195 b11f C1E208   		sall	$8, %edx
 26196 b122 4109D0   		orl	%edx, %r8d
 26197              	.LVL2249:
7781:src/vm3.c     ****   if (op0 == 0x0) {
 26198              		.loc 1 7781 0
 26199 b125 4489C6   		movl	%r8d, %esi
7783:src/vm3.c     ****     op0 = op0 + funct;
 26200              		.loc 1 7783 0
 26201 b128 4488C2   		movb	%r8b, %dl
7781:src/vm3.c     ****   if (op0 == 0x0) {
 26202              		.loc 1 7781 0
 26203 b12b C1EE1A   		shrl	$26, %esi
 26204              	.LVL2250:
7783:src/vm3.c     ****     op0 = op0 + funct;
 26205              		.loc 1 7783 0
 26206 b12e 83E23F   		andl	$63, %edx
 26207 b131 8D7E2B   		leal	43(%rsi), %edi
 26208 b134 4084F6   		testb	%sil, %sil
 26209 b137 0F45D7   		cmovne	%edi, %edx
 26210              	.LVL2251:
7793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26211              		.loc 1 7793 0
 26212 b13a C1E110   		sall	$16, %ecx
 26213 b13d C1E318   		sall	$24, %ebx
 26214 b140 09CB     		orl	%ecx, %ebx
 26215 b142 8D4807   		leal	7(%rax), %ecx
 26216 b145 83C006   		addl	$6, %eax
 26217 b148 0FB68000 		movzbl	VM_memory(%rax), %eax
 26217      000000
7791:src/vm3.c     **** 
 26218              		.loc 1 7791 0
 26219 b14f 0FB6D2   		movzbl	%dl, %edx
7793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26220              		.loc 1 7793 0
 26221 b152 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26221      000000
7791:src/vm3.c     **** 
 26222              		.loc 1 7791 0
GAS LISTING /tmp/cc15eBE3.s 			page 922


 26223 b159 48C1E204 		salq	$4, %rdx
 26224              	.LVL2252:
7793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26225              		.loc 1 7793 0
 26226 b15d C1E008   		sall	$8, %eax
 26227 b160 09CB     		orl	%ecx, %ebx
 26228 b162 09C3     		orl	%eax, %ebx
 26229              	.LVL2253:
7794:src/vm3.c     ****   if (op1 == 0x0) {
 26230              		.loc 1 7794 0
 26231 b164 89D9     		movl	%ebx, %ecx
7796:src/vm3.c     ****     op1 = op1 + funct;
 26232              		.loc 1 7796 0
 26233 b166 88D8     		movb	%bl, %al
7794:src/vm3.c     ****   if (op1 == 0x0) {
 26234              		.loc 1 7794 0
 26235 b168 C1E91A   		shrl	$26, %ecx
 26236              	.LVL2254:
7796:src/vm3.c     ****     op1 = op1 + funct;
 26237              		.loc 1 7796 0
 26238 b16b 83E03F   		andl	$63, %eax
 26239 b16e 8D712B   		leal	43(%rcx), %esi
 26240 b171 84C9     		testb	%cl, %cl
 26241 b173 0F45C6   		cmovne	%esi, %eax
 26242              	.LVL2255:
7803:src/vm3.c     **** 
 26243              		.loc 1 7803 0
 26244 b176 0FB6C0   		movzbl	%al, %eax
 26245 b179 48C1E004 		salq	$4, %rax
 26246              	.LVL2256:
 26247 b17d 48038414 		addq	58088(%rsp,%rdx), %rax
 26247      E8E20000 
 26248 b185 488B08   		movq	(%rax), %rcx
 26249 b188 E9CB5BFF 		jmp	.L269
 26249      FF
 26250              	.LVL2257:
 26251              	.L15:
7812:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26252              		.loc 1 7812 0
 26253 b18d 4489C0   		movl	%r8d, %eax
7813:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 26254              		.loc 1 7813 0
 26255 b190 4489C2   		movl	%r8d, %edx
7811:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26256              		.loc 1 7811 0
 26257 b193 41C1E806 		shrl	$6, %r8d
 26258              	.LVL2258:
7812:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26259              		.loc 1 7812 0
 26260 b197 C1E810   		shrl	$16, %eax
 26261              	.LVL2259:
7811:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26262              		.loc 1 7811 0
 26263 b19a 4488C1   		movb	%r8b, %cl
7813:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 26264              		.loc 1 7813 0
 26265 b19d C1EA0B   		shrl	$11, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 923


 26266              	.LVL2260:
7814:src/vm3.c     **** PC  =  nPC;
 26267              		.loc 1 7814 0
 26268 b1a0 83E01F   		andl	$31, %eax
7811:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26269              		.loc 1 7811 0
 26270 b1a3 83E11F   		andl	$31, %ecx
7814:src/vm3.c     **** PC  =  nPC;
 26271              		.loc 1 7814 0
 26272 b1a6 83E21F   		andl	$31, %edx
 26273 b1a9 8B048500 		movl	RF(,%rax,4), %eax
 26273      000000
7816:src/vm3.c     **** 
 26274              		.loc 1 7816 0
 26275 b1b0 83050000 		addl	$4, nPC(%rip)
 26275      000004
 26276              	.LVL2261:
7814:src/vm3.c     **** PC  =  nPC;
 26277              		.loc 1 7814 0
 26278 b1b7 D3E0     		sall	%cl, %eax
 26279 b1b9 89049500 		movl	%eax, RF(,%rdx,4)
 26279      000000
7823:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26280              		.loc 1 7823 0
 26281 b1c0 89D8     		movl	%ebx, %eax
7824:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 26282              		.loc 1 7824 0
 26283 b1c2 89DA     		movl	%ebx, %edx
7823:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26284              		.loc 1 7823 0
 26285 b1c4 C1E810   		shrl	$16, %eax
7822:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26286              		.loc 1 7822 0
 26287 b1c7 C1EB06   		shrl	$6, %ebx
 26288              	.LVL2262:
7824:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 26289              		.loc 1 7824 0
 26290 b1ca C1EA0B   		shrl	$11, %edx
 26291              	.LVL2263:
7825:src/vm3.c     **** PC  =  nPC;
 26292              		.loc 1 7825 0
 26293 b1cd 83E01F   		andl	$31, %eax
7822:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26294              		.loc 1 7822 0
 26295 b1d0 88D9     		movb	%bl, %cl
7825:src/vm3.c     **** PC  =  nPC;
 26296              		.loc 1 7825 0
 26297 b1d2 83E21F   		andl	$31, %edx
 26298 b1d5 8B048500 		movl	RF(,%rax,4), %eax
 26298      000000
7822:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26299              		.loc 1 7822 0
 26300 b1dc 83E11F   		andl	$31, %ecx
7825:src/vm3.c     **** PC  =  nPC;
 26301              		.loc 1 7825 0
 26302 b1df D3E0     		sall	%cl, %eax
 26303 b1e1 89049500 		movl	%eax, RF(,%rdx,4)
GAS LISTING /tmp/cc15eBE3.s 			page 924


 26303      000000
7826:src/vm3.c     **** nPC  += 4;
 26304              		.loc 1 7826 0
 26305 b1e8 8B050000 		movl	nPC(%rip), %eax
 26305      0000
7828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26306              		.loc 1 7828 0
 26307 b1ee 8D5003   		leal	3(%rax), %edx
7827:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26308              		.loc 1 7827 0
 26309 b1f1 8D4804   		leal	4(%rax), %ecx
7826:src/vm3.c     **** nPC  += 4;
 26310              		.loc 1 7826 0
 26311 b1f4 89050000 		movl	%eax, PC(%rip)
 26311      0000
7828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26312              		.loc 1 7828 0
 26313 b1fa 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26313      00000000 
 26314 b202 89C2     		movl	%eax, %edx
7841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26315              		.loc 1 7841 0
 26316 b204 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26316      000000
7828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26317              		.loc 1 7828 0
 26318 b20b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26318      000000
7827:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26319              		.loc 1 7827 0
 26320 b212 890D0000 		movl	%ecx, nPC(%rip)
 26320      0000
7841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26321              		.loc 1 7841 0
 26322 b218 8D4805   		leal	5(%rax), %ecx
 26323 b21b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26323      000000
7828:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26324              		.loc 1 7828 0
 26325 b222 C1E218   		sall	$24, %edx
 26326 b225 4109D0   		orl	%edx, %r8d
 26327 b228 8D5001   		leal	1(%rax), %edx
 26328 b22b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26328      000000
 26329 b232 C1E210   		sall	$16, %edx
 26330 b235 4109D0   		orl	%edx, %r8d
 26331 b238 8D5002   		leal	2(%rax), %edx
 26332 b23b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26332      000000
 26333 b242 C1E208   		sall	$8, %edx
 26334 b245 4109D0   		orl	%edx, %r8d
 26335              	.LVL2264:
7829:src/vm3.c     ****   if (op0 == 0x0) {
 26336              		.loc 1 7829 0
 26337 b248 4489C6   		movl	%r8d, %esi
7831:src/vm3.c     ****     op0 = op0 + funct;
 26338              		.loc 1 7831 0
GAS LISTING /tmp/cc15eBE3.s 			page 925


 26339 b24b 4488C2   		movb	%r8b, %dl
7829:src/vm3.c     ****   if (op0 == 0x0) {
 26340              		.loc 1 7829 0
 26341 b24e C1EE1A   		shrl	$26, %esi
 26342              	.LVL2265:
7831:src/vm3.c     ****     op0 = op0 + funct;
 26343              		.loc 1 7831 0
 26344 b251 83E23F   		andl	$63, %edx
 26345 b254 8D7E2B   		leal	43(%rsi), %edi
 26346 b257 4084F6   		testb	%sil, %sil
 26347 b25a 0F45D7   		cmovne	%edi, %edx
 26348              	.LVL2266:
7841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26349              		.loc 1 7841 0
 26350 b25d C1E110   		sall	$16, %ecx
 26351 b260 C1E318   		sall	$24, %ebx
 26352 b263 09CB     		orl	%ecx, %ebx
 26353 b265 8D4807   		leal	7(%rax), %ecx
 26354 b268 83C006   		addl	$6, %eax
 26355 b26b 0FB68000 		movzbl	VM_memory(%rax), %eax
 26355      000000
7839:src/vm3.c     **** 
 26356              		.loc 1 7839 0
 26357 b272 0FB6D2   		movzbl	%dl, %edx
7841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26358              		.loc 1 7841 0
 26359 b275 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26359      000000
7839:src/vm3.c     **** 
 26360              		.loc 1 7839 0
 26361 b27c 48C1E204 		salq	$4, %rdx
 26362              	.LVL2267:
7841:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26363              		.loc 1 7841 0
 26364 b280 C1E008   		sall	$8, %eax
 26365 b283 09CB     		orl	%ecx, %ebx
 26366 b285 09C3     		orl	%eax, %ebx
 26367              	.LVL2268:
7842:src/vm3.c     ****   if (op1 == 0x0) {
 26368              		.loc 1 7842 0
 26369 b287 89D9     		movl	%ebx, %ecx
7844:src/vm3.c     ****     op1 = op1 + funct;
 26370              		.loc 1 7844 0
 26371 b289 88D8     		movb	%bl, %al
7842:src/vm3.c     ****   if (op1 == 0x0) {
 26372              		.loc 1 7842 0
 26373 b28b C1E91A   		shrl	$26, %ecx
 26374              	.LVL2269:
7844:src/vm3.c     ****     op1 = op1 + funct;
 26375              		.loc 1 7844 0
 26376 b28e 83E03F   		andl	$63, %eax
 26377 b291 8D712B   		leal	43(%rcx), %esi
 26378 b294 84C9     		testb	%cl, %cl
 26379 b296 0F45C6   		cmovne	%esi, %eax
 26380              	.LVL2270:
7851:src/vm3.c     **** 
 26381              		.loc 1 7851 0
GAS LISTING /tmp/cc15eBE3.s 			page 926


 26382 b299 0FB6C0   		movzbl	%al, %eax
 26383 b29c 48C1E004 		salq	$4, %rax
 26384              	.LVL2271:
 26385 b2a0 48038414 		addq	58088(%rsp,%rdx), %rax
 26385      E8E20000 
 26386 b2a8 488B08   		movq	(%rax), %rcx
 26387 b2ab E9A85AFF 		jmp	.L269
 26387      FF
 26388              	.LVL2272:
 26389              	.L161:
7866:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26390              		.loc 1 7866 0
 26391 b2b0 89D8     		movl	%ebx, %eax
7867:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 26392              		.loc 1 7867 0
 26393 b2b2 89DA     		movl	%ebx, %edx
7865:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26394              		.loc 1 7865 0
 26395 b2b4 C1EB15   		shrl	$21, %ebx
 26396              	.LVL2273:
7866:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26397              		.loc 1 7866 0
 26398 b2b7 C1E810   		shrl	$16, %eax
 26399              	.LVL2274:
7868:src/vm3.c     **** PC  =  nPC;
 26400              		.loc 1 7868 0
 26401 b2ba 83E31F   		andl	$31, %ebx
7867:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 26402              		.loc 1 7867 0
 26403 b2bd C1EA0B   		shrl	$11, %edx
 26404              	.LVL2275:
7868:src/vm3.c     **** PC  =  nPC;
 26405              		.loc 1 7868 0
 26406 b2c0 83E01F   		andl	$31, %eax
7859:src/vm3.c     **** 
 26407              		.loc 1 7859 0
 26408 b2c3 83050000 		addl	$4, nPC(%rip)
 26408      000004
7868:src/vm3.c     **** PC  =  nPC;
 26409              		.loc 1 7868 0
 26410 b2ca 83E21F   		andl	$31, %edx
 26411 b2cd 8B048500 		movl	RF(,%rax,4), %eax
 26411      000000
 26412 b2d4 03049D00 		addl	RF(,%rbx,4), %eax
 26412      000000
 26413 b2db 89049500 		movl	%eax, RF(,%rdx,4)
 26413      000000
7869:src/vm3.c     **** nPC  += 4;
 26414              		.loc 1 7869 0
 26415 b2e2 8B050000 		movl	nPC(%rip), %eax
 26415      0000
7871:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26416              		.loc 1 7871 0
 26417 b2e8 8D5003   		leal	3(%rax), %edx
7870:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26418              		.loc 1 7870 0
 26419 b2eb 8D4804   		leal	4(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 927


7869:src/vm3.c     **** nPC  += 4;
 26420              		.loc 1 7869 0
 26421 b2ee 89050000 		movl	%eax, PC(%rip)
 26421      0000
7871:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26422              		.loc 1 7871 0
 26423 b2f4 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26423      00000000 
 26424              	.LVL2276:
 26425 b2fc 89C2     		movl	%eax, %edx
7884:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26426              		.loc 1 7884 0
 26427 b2fe 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26427      000000
7871:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26428              		.loc 1 7871 0
 26429 b305 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26429      000000
7870:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26430              		.loc 1 7870 0
 26431 b30c 890D0000 		movl	%ecx, nPC(%rip)
 26431      0000
7884:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26432              		.loc 1 7884 0
 26433 b312 8D4805   		leal	5(%rax), %ecx
 26434 b315 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26434      000000
7871:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26435              		.loc 1 7871 0
 26436 b31c C1E218   		sall	$24, %edx
 26437 b31f 4109D0   		orl	%edx, %r8d
 26438 b322 8D5001   		leal	1(%rax), %edx
 26439 b325 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26439      000000
 26440 b32c C1E210   		sall	$16, %edx
 26441 b32f 4109D0   		orl	%edx, %r8d
 26442 b332 8D5002   		leal	2(%rax), %edx
 26443 b335 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26443      000000
 26444 b33c C1E208   		sall	$8, %edx
 26445 b33f 4109D0   		orl	%edx, %r8d
 26446              	.LVL2277:
7872:src/vm3.c     ****   if (op0 == 0x0) {
 26447              		.loc 1 7872 0
 26448 b342 4489C6   		movl	%r8d, %esi
7874:src/vm3.c     ****     op0 = op0 + funct;
 26449              		.loc 1 7874 0
 26450 b345 4488C2   		movb	%r8b, %dl
7872:src/vm3.c     ****   if (op0 == 0x0) {
 26451              		.loc 1 7872 0
 26452 b348 C1EE1A   		shrl	$26, %esi
 26453              	.LVL2278:
7874:src/vm3.c     ****     op0 = op0 + funct;
 26454              		.loc 1 7874 0
 26455 b34b 83E23F   		andl	$63, %edx
 26456 b34e 8D7E2B   		leal	43(%rsi), %edi
 26457 b351 4084F6   		testb	%sil, %sil
GAS LISTING /tmp/cc15eBE3.s 			page 928


 26458 b354 0F45D7   		cmovne	%edi, %edx
 26459              	.LVL2279:
7884:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26460              		.loc 1 7884 0
 26461 b357 C1E110   		sall	$16, %ecx
 26462 b35a C1E318   		sall	$24, %ebx
 26463 b35d 09CB     		orl	%ecx, %ebx
 26464 b35f 8D4807   		leal	7(%rax), %ecx
 26465 b362 83C006   		addl	$6, %eax
 26466 b365 0FB68000 		movzbl	VM_memory(%rax), %eax
 26466      000000
7882:src/vm3.c     **** 
 26467              		.loc 1 7882 0
 26468 b36c 0FB6D2   		movzbl	%dl, %edx
7884:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26469              		.loc 1 7884 0
 26470 b36f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26470      000000
7882:src/vm3.c     **** 
 26471              		.loc 1 7882 0
 26472 b376 48C1E204 		salq	$4, %rdx
 26473              	.LVL2280:
7884:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26474              		.loc 1 7884 0
 26475 b37a C1E008   		sall	$8, %eax
 26476 b37d 09CB     		orl	%ecx, %ebx
 26477 b37f 09C3     		orl	%eax, %ebx
 26478              	.LVL2281:
7885:src/vm3.c     ****   if (op1 == 0x0) {
 26479              		.loc 1 7885 0
 26480 b381 89D9     		movl	%ebx, %ecx
7887:src/vm3.c     ****     op1 = op1 + funct;
 26481              		.loc 1 7887 0
 26482 b383 88D8     		movb	%bl, %al
7885:src/vm3.c     ****   if (op1 == 0x0) {
 26483              		.loc 1 7885 0
 26484 b385 C1E91A   		shrl	$26, %ecx
 26485              	.LVL2282:
7887:src/vm3.c     ****     op1 = op1 + funct;
 26486              		.loc 1 7887 0
 26487 b388 83E03F   		andl	$63, %eax
 26488 b38b 8D712B   		leal	43(%rcx), %esi
 26489 b38e 84C9     		testb	%cl, %cl
 26490 b390 0F45C6   		cmovne	%esi, %eax
 26491              	.LVL2283:
7894:src/vm3.c     **** 
 26492              		.loc 1 7894 0
 26493 b393 0FB6C0   		movzbl	%al, %eax
 26494 b396 48C1E004 		salq	$4, %rax
 26495              	.LVL2284:
 26496 b39a 48038414 		addq	58088(%rsp,%rdx), %rax
 26496      E8E20000 
 26497 b3a2 488B08   		movq	(%rax), %rcx
 26498 b3a5 E9AE59FF 		jmp	.L269
 26498      FF
 26499              	.LVL2285:
 26500              	.L60:
GAS LISTING /tmp/cc15eBE3.s 			page 929


7903:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26501              		.loc 1 7903 0
 26502 b3aa 4489C0   		movl	%r8d, %eax
7904:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 26503              		.loc 1 7904 0
 26504 b3ad 4489C2   		movl	%r8d, %edx
7902:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26505              		.loc 1 7902 0
 26506 b3b0 41C1E815 		shrl	$21, %r8d
 26507              	.LVL2286:
7903:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26508              		.loc 1 7903 0
 26509 b3b4 C1E810   		shrl	$16, %eax
 26510              	.LVL2287:
7905:src/vm3.c     **** PC  =  nPC;
 26511              		.loc 1 7905 0
 26512 b3b7 4183E01F 		andl	$31, %r8d
7904:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 26513              		.loc 1 7904 0
 26514 b3bb C1EA0B   		shrl	$11, %edx
 26515              	.LVL2288:
7905:src/vm3.c     **** PC  =  nPC;
 26516              		.loc 1 7905 0
 26517 b3be 83E01F   		andl	$31, %eax
 26518 b3c1 83E21F   		andl	$31, %edx
7915:src/vm3.c     **** nPC = address << 2;
 26519              		.loc 1 7915 0
 26520 b3c4 81E3FFFF 		andl	$67108863, %ebx
 26520      FF03
 26521              	.LVL2289:
7905:src/vm3.c     **** PC  =  nPC;
 26522              		.loc 1 7905 0
 26523 b3ca 8B048500 		movl	RF(,%rax,4), %eax
 26523      000000
 26524 b3d1 42030485 		addl	RF(,%r8,4), %eax
 26524      00000000 
 26525 b3d9 89049500 		movl	%eax, RF(,%rdx,4)
 26525      000000
7906:src/vm3.c     **** nPC  += 4;
 26526              		.loc 1 7906 0
 26527 b3e0 8B050000 		movl	nPC(%rip), %eax
 26527      0000
7907:src/vm3.c     **** 
 26528              		.loc 1 7907 0
 26529 b3e6 83050000 		addl	$4, nPC(%rip)
 26529      000004
7914:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 26530              		.loc 1 7914 0
 26531 b3ed 8B150000 		movl	nPC(%rip), %edx
 26531      0000
7913:src/vm3.c     **** PC = nPC;
 26532              		.loc 1 7913 0
 26533 b3f3 83C008   		addl	$8, %eax
 26534 b3f6 89050000 		movl	%eax, RF+124(%rip)
 26534      0000
7916:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26535              		.loc 1 7916 0
GAS LISTING /tmp/cc15eBE3.s 			page 930


 26536 b3fc 8D049D00 		leal	0(,%rbx,4), %eax
 26536      000000
7917:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26537              		.loc 1 7917 0
 26538 b403 8D4A03   		leal	3(%rdx), %ecx
7914:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 26539              		.loc 1 7914 0
 26540 b406 89150000 		movl	%edx, PC(%rip)
 26540      0000
7916:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26541              		.loc 1 7916 0
 26542 b40c 89050000 		movl	%eax, nPC(%rip)
 26542      0000
7917:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26543              		.loc 1 7917 0
 26544 b412 440FB681 		movzbl	VM_memory(%rcx), %r8d
 26544      00000000 
 26545 b41a 89D1     		movl	%edx, %ecx
 26546 b41c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26546      000000
 26547 b423 C1E118   		sall	$24, %ecx
 26548 b426 4109C8   		orl	%ecx, %r8d
 26549 b429 8D4A01   		leal	1(%rdx), %ecx
 26550 b42c 83C202   		addl	$2, %edx
 26551 b42f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26551      000000
 26552 b436 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26552      000000
 26553 b43d C1E208   		sall	$8, %edx
 26554 b440 C1E110   		sall	$16, %ecx
 26555 b443 4109C8   		orl	%ecx, %r8d
 26556 b446 4109D0   		orl	%edx, %r8d
 26557              	.LVL2290:
7918:src/vm3.c     ****   if (op0 == 0x0) {
 26558              		.loc 1 7918 0
 26559 b449 4489C1   		movl	%r8d, %ecx
7920:src/vm3.c     ****     op0 = op0 + funct;
 26560              		.loc 1 7920 0
 26561 b44c 4488C2   		movb	%r8b, %dl
7918:src/vm3.c     ****   if (op0 == 0x0) {
 26562              		.loc 1 7918 0
 26563 b44f C1E91A   		shrl	$26, %ecx
 26564              	.LVL2291:
7920:src/vm3.c     ****     op0 = op0 + funct;
 26565              		.loc 1 7920 0
 26566 b452 83E23F   		andl	$63, %edx
 26567 b455 8D712B   		leal	43(%rcx), %esi
 26568 b458 84C9     		testb	%cl, %cl
7930:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26569              		.loc 1 7930 0
 26570 b45a 8D4803   		leal	3(%rax), %ecx
 26571              	.LVL2292:
 26572 b45d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26572      000000
 26573 b464 89C1     		movl	%eax, %ecx
7920:src/vm3.c     ****     op0 = op0 + funct;
 26574              		.loc 1 7920 0
GAS LISTING /tmp/cc15eBE3.s 			page 931


 26575 b466 0F45D6   		cmovne	%esi, %edx
 26576              	.LVL2293:
7930:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26577              		.loc 1 7930 0
 26578 b469 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26578      000000
7928:src/vm3.c     **** 
 26579              		.loc 1 7928 0
 26580 b470 0FB6D2   		movzbl	%dl, %edx
 26581 b473 48C1E204 		salq	$4, %rdx
 26582              	.LVL2294:
7930:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26583              		.loc 1 7930 0
 26584 b477 C1E118   		sall	$24, %ecx
 26585 b47a 09CB     		orl	%ecx, %ebx
 26586 b47c 8D4801   		leal	1(%rax), %ecx
 26587 b47f 83C002   		addl	$2, %eax
 26588 b482 0FB68000 		movzbl	VM_memory(%rax), %eax
 26588      000000
 26589 b489 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26589      000000
 26590 b490 C1E008   		sall	$8, %eax
 26591 b493 C1E110   		sall	$16, %ecx
 26592 b496 09CB     		orl	%ecx, %ebx
 26593 b498 09C3     		orl	%eax, %ebx
 26594              	.LVL2295:
7931:src/vm3.c     ****   if (op1 == 0x0) {
 26595              		.loc 1 7931 0
 26596 b49a 89D9     		movl	%ebx, %ecx
7933:src/vm3.c     ****     op1 = op1 + funct;
 26597              		.loc 1 7933 0
 26598 b49c 88D8     		movb	%bl, %al
7931:src/vm3.c     ****   if (op1 == 0x0) {
 26599              		.loc 1 7931 0
 26600 b49e C1E91A   		shrl	$26, %ecx
 26601              	.LVL2296:
7933:src/vm3.c     ****     op1 = op1 + funct;
 26602              		.loc 1 7933 0
 26603 b4a1 83E03F   		andl	$63, %eax
 26604 b4a4 8D712B   		leal	43(%rcx), %esi
 26605 b4a7 84C9     		testb	%cl, %cl
 26606 b4a9 0F45C6   		cmovne	%esi, %eax
 26607              	.LVL2297:
7940:src/vm3.c     **** 
 26608              		.loc 1 7940 0
 26609 b4ac 0FB6C0   		movzbl	%al, %eax
 26610 b4af 48C1E004 		salq	$4, %rax
 26611              	.LVL2298:
 26612 b4b3 48038414 		addq	58088(%rsp,%rdx), %rax
 26612      E8E20000 
 26613 b4bb 488B08   		movq	(%rax), %rcx
 26614 b4be E99558FF 		jmp	.L269
 26614      FF
 26615              	.LVL2299:
 26616              	.L22:
7975:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26617              		.loc 1 7975 0
GAS LISTING /tmp/cc15eBE3.s 			page 932


 26618 b4c3 4489C0   		movl	%r8d, %eax
7976:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 26619              		.loc 1 7976 0
 26620 b4c6 4489C2   		movl	%r8d, %edx
7974:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26621              		.loc 1 7974 0
 26622 b4c9 41C1E806 		shrl	$6, %r8d
 26623              	.LVL2300:
7975:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26624              		.loc 1 7975 0
 26625 b4cd C1E810   		shrl	$16, %eax
 26626              	.LVL2301:
7974:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26627              		.loc 1 7974 0
 26628 b4d0 4488C1   		movb	%r8b, %cl
7976:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 26629              		.loc 1 7976 0
 26630 b4d3 C1EA0B   		shrl	$11, %edx
 26631              	.LVL2302:
7977:src/vm3.c     **** PC  =  nPC;
 26632              		.loc 1 7977 0
 26633 b4d6 83E01F   		andl	$31, %eax
7974:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26634              		.loc 1 7974 0
 26635 b4d9 83E11F   		andl	$31, %ecx
7977:src/vm3.c     **** PC  =  nPC;
 26636              		.loc 1 7977 0
 26637 b4dc 83E21F   		andl	$31, %edx
 26638 b4df 8B048500 		movl	RF(,%rax,4), %eax
 26638      000000
7979:src/vm3.c     **** 
 26639              		.loc 1 7979 0
 26640 b4e6 83050000 		addl	$4, nPC(%rip)
 26640      000004
 26641              	.LVL2303:
7977:src/vm3.c     **** PC  =  nPC;
 26642              		.loc 1 7977 0
 26643 b4ed D3E0     		sall	%cl, %eax
 26644 b4ef 89049500 		movl	%eax, RF(,%rdx,4)
 26644      000000
7986:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26645              		.loc 1 7986 0
 26646 b4f6 89D8     		movl	%ebx, %eax
7987:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 26647              		.loc 1 7987 0
 26648 b4f8 89DA     		movl	%ebx, %edx
7986:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26649              		.loc 1 7986 0
 26650 b4fa C1E810   		shrl	$16, %eax
7985:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26651              		.loc 1 7985 0
 26652 b4fd C1EB15   		shrl	$21, %ebx
 26653              	.LVL2304:
7987:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 26654              		.loc 1 7987 0
 26655 b500 C1EA0B   		shrl	$11, %edx
 26656              	.LVL2305:
GAS LISTING /tmp/cc15eBE3.s 			page 933


7988:src/vm3.c     **** PC  =  nPC;
 26657              		.loc 1 7988 0
 26658 b503 83E31F   		andl	$31, %ebx
 26659 b506 83E01F   		andl	$31, %eax
 26660 b509 83E21F   		andl	$31, %edx
 26661 b50c 8B048500 		movl	RF(,%rax,4), %eax
 26661      000000
 26662 b513 33049D00 		xorl	RF(,%rbx,4), %eax
 26662      000000
 26663 b51a 89049500 		movl	%eax, RF(,%rdx,4)
 26663      000000
7989:src/vm3.c     **** nPC  += 4;
 26664              		.loc 1 7989 0
 26665 b521 8B050000 		movl	nPC(%rip), %eax
 26665      0000
7991:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26666              		.loc 1 7991 0
 26667 b527 8D5003   		leal	3(%rax), %edx
7990:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26668              		.loc 1 7990 0
 26669 b52a 8D4804   		leal	4(%rax), %ecx
7989:src/vm3.c     **** nPC  += 4;
 26670              		.loc 1 7989 0
 26671 b52d 89050000 		movl	%eax, PC(%rip)
 26671      0000
7991:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26672              		.loc 1 7991 0
 26673 b533 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26673      00000000 
 26674 b53b 89C2     		movl	%eax, %edx
8004:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26675              		.loc 1 8004 0
 26676 b53d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26676      000000
7991:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26677              		.loc 1 7991 0
 26678 b544 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26678      000000
7990:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26679              		.loc 1 7990 0
 26680 b54b 890D0000 		movl	%ecx, nPC(%rip)
 26680      0000
8004:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26681              		.loc 1 8004 0
 26682 b551 8D4805   		leal	5(%rax), %ecx
 26683 b554 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26683      000000
7991:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26684              		.loc 1 7991 0
 26685 b55b C1E218   		sall	$24, %edx
 26686 b55e 4109D0   		orl	%edx, %r8d
 26687 b561 8D5001   		leal	1(%rax), %edx
 26688 b564 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26688      000000
 26689 b56b C1E210   		sall	$16, %edx
 26690 b56e 4109D0   		orl	%edx, %r8d
 26691 b571 8D5002   		leal	2(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 934


 26692 b574 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26692      000000
 26693 b57b C1E208   		sall	$8, %edx
 26694 b57e 4109D0   		orl	%edx, %r8d
 26695              	.LVL2306:
7992:src/vm3.c     ****   if (op0 == 0x0) {
 26696              		.loc 1 7992 0
 26697 b581 4489C6   		movl	%r8d, %esi
7994:src/vm3.c     ****     op0 = op0 + funct;
 26698              		.loc 1 7994 0
 26699 b584 4488C2   		movb	%r8b, %dl
7992:src/vm3.c     ****   if (op0 == 0x0) {
 26700              		.loc 1 7992 0
 26701 b587 C1EE1A   		shrl	$26, %esi
 26702              	.LVL2307:
7994:src/vm3.c     ****     op0 = op0 + funct;
 26703              		.loc 1 7994 0
 26704 b58a 83E23F   		andl	$63, %edx
 26705 b58d 8D7E2B   		leal	43(%rsi), %edi
 26706 b590 4084F6   		testb	%sil, %sil
 26707 b593 0F45D7   		cmovne	%edi, %edx
 26708              	.LVL2308:
8004:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26709              		.loc 1 8004 0
 26710 b596 C1E110   		sall	$16, %ecx
 26711 b599 C1E318   		sall	$24, %ebx
 26712 b59c 09CB     		orl	%ecx, %ebx
 26713 b59e 8D4807   		leal	7(%rax), %ecx
 26714 b5a1 83C006   		addl	$6, %eax
 26715 b5a4 0FB68000 		movzbl	VM_memory(%rax), %eax
 26715      000000
8002:src/vm3.c     **** 
 26716              		.loc 1 8002 0
 26717 b5ab 0FB6D2   		movzbl	%dl, %edx
8004:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26718              		.loc 1 8004 0
 26719 b5ae 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26719      000000
8002:src/vm3.c     **** 
 26720              		.loc 1 8002 0
 26721 b5b5 48C1E204 		salq	$4, %rdx
 26722              	.LVL2309:
8004:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26723              		.loc 1 8004 0
 26724 b5b9 C1E008   		sall	$8, %eax
 26725 b5bc 09CB     		orl	%ecx, %ebx
 26726 b5be 09C3     		orl	%eax, %ebx
 26727              	.LVL2310:
8005:src/vm3.c     ****   if (op1 == 0x0) {
 26728              		.loc 1 8005 0
 26729 b5c0 89D9     		movl	%ebx, %ecx
8007:src/vm3.c     ****     op1 = op1 + funct;
 26730              		.loc 1 8007 0
 26731 b5c2 88D8     		movb	%bl, %al
8005:src/vm3.c     ****   if (op1 == 0x0) {
 26732              		.loc 1 8005 0
 26733 b5c4 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 935


 26734              	.LVL2311:
8007:src/vm3.c     ****     op1 = op1 + funct;
 26735              		.loc 1 8007 0
 26736 b5c7 83E03F   		andl	$63, %eax
 26737 b5ca 8D712B   		leal	43(%rcx), %esi
 26738 b5cd 84C9     		testb	%cl, %cl
 26739 b5cf 0F45C6   		cmovne	%esi, %eax
 26740              	.LVL2312:
8014:src/vm3.c     **** 
 26741              		.loc 1 8014 0
 26742 b5d2 0FB6C0   		movzbl	%al, %eax
 26743 b5d5 48C1E004 		salq	$4, %rax
 26744              	.LVL2313:
 26745 b5d9 48038414 		addq	58088(%rsp,%rdx), %rax
 26745      E8E20000 
 26746 b5e1 488B08   		movq	(%rax), %rcx
 26747 b5e4 E96F57FF 		jmp	.L269
 26747      FF
 26748              	.LVL2314:
 26749              	.L225:
8022:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26750              		.loc 1 8022 0
 26751 b5e9 4489C0   		movl	%r8d, %eax
8025:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 26752              		.loc 1 8025 0
 26753 b5ec 410FBFC8 		movswl	%r8w, %ecx
8023:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 26754              		.loc 1 8023 0
 26755 b5f0 41C1E810 		shrl	$16, %r8d
 26756              	.LVL2315:
8022:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26757              		.loc 1 8022 0
 26758 b5f4 C1E815   		shrl	$21, %eax
 26759              	.LVL2316:
8025:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 26760              		.loc 1 8025 0
 26761 b5f7 4183E01F 		andl	$31, %r8d
8028:src/vm3.c     **** 
 26762              		.loc 1 8028 0
 26763 b5fb 83050000 		addl	$4, nPC(%rip)
 26763      000004
 26764              	.LVL2317:
8025:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 26765              		.loc 1 8025 0
 26766 b602 83E01F   		andl	$31, %eax
 26767 b605 8B148500 		movl	RF(,%rax,4), %edx
 26767      000000
 26768 b60c 428B0485 		movl	RF(,%r8,4), %eax
 26768      00000000 
 26769 b614 8D3411   		leal	(%rcx,%rdx), %esi
8026:src/vm3.c     **** PC  =  nPC;
 26770              		.loc 1 8026 0
 26771 b617 8D541101 		leal	1(%rcx,%rdx), %edx
8025:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 26772              		.loc 1 8025 0
 26773 b61b 0FB6FC   		movzbl	%ah, %edi
 26774 b61e 4088BE00 		movb	%dil, VM_memory(%rsi)
GAS LISTING /tmp/cc15eBE3.s 			page 936


 26774      000000
8026:src/vm3.c     **** PC  =  nPC;
 26775              		.loc 1 8026 0
 26776 b625 88820000 		movb	%al, VM_memory(%rdx)
 26776      0000
8035:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26777              		.loc 1 8035 0
 26778 b62b 89D8     		movl	%ebx, %eax
8036:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 26779              		.loc 1 8036 0
 26780 b62d 89DA     		movl	%ebx, %edx
8035:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 26781              		.loc 1 8035 0
 26782 b62f C1E810   		shrl	$16, %eax
8034:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 26783              		.loc 1 8034 0
 26784 b632 C1EB15   		shrl	$21, %ebx
 26785              	.LVL2318:
8037:src/vm3.c     **** PC  =  nPC;
 26786              		.loc 1 8037 0
 26787 b635 83E31F   		andl	$31, %ebx
 26788 b638 83E01F   		andl	$31, %eax
8036:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 26789              		.loc 1 8036 0
 26790 b63b C1EA0B   		shrl	$11, %edx
 26791              	.LVL2319:
8037:src/vm3.c     **** PC  =  nPC;
 26792              		.loc 1 8037 0
 26793 b63e 8B048500 		movl	RF(,%rax,4), %eax
 26793      000000
 26794 b645 0B049D00 		orl	RF(,%rbx,4), %eax
 26794      000000
 26795 b64c 83E21F   		andl	$31, %edx
 26796 b64f 89049500 		movl	%eax, RF(,%rdx,4)
 26796      000000
8038:src/vm3.c     **** nPC  += 4;
 26797              		.loc 1 8038 0
 26798 b656 8B050000 		movl	nPC(%rip), %eax
 26798      0000
8040:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26799              		.loc 1 8040 0
 26800 b65c 8D5003   		leal	3(%rax), %edx
8039:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26801              		.loc 1 8039 0
 26802 b65f 8D4804   		leal	4(%rax), %ecx
 26803              	.LVL2320:
8038:src/vm3.c     **** nPC  += 4;
 26804              		.loc 1 8038 0
 26805 b662 89050000 		movl	%eax, PC(%rip)
 26805      0000
8040:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26806              		.loc 1 8040 0
 26807 b668 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26807      00000000 
 26808 b670 89C2     		movl	%eax, %edx
8053:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26809              		.loc 1 8053 0
GAS LISTING /tmp/cc15eBE3.s 			page 937


 26810 b672 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26810      000000
8040:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26811              		.loc 1 8040 0
 26812 b679 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26812      000000
8039:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26813              		.loc 1 8039 0
 26814 b680 890D0000 		movl	%ecx, nPC(%rip)
 26814      0000
8053:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26815              		.loc 1 8053 0
 26816 b686 8D4805   		leal	5(%rax), %ecx
 26817 b689 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26817      000000
8040:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26818              		.loc 1 8040 0
 26819 b690 C1E218   		sall	$24, %edx
 26820 b693 4109D0   		orl	%edx, %r8d
 26821 b696 8D5001   		leal	1(%rax), %edx
 26822 b699 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26822      000000
 26823 b6a0 C1E210   		sall	$16, %edx
 26824 b6a3 4109D0   		orl	%edx, %r8d
 26825 b6a6 8D5002   		leal	2(%rax), %edx
 26826 b6a9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26826      000000
 26827 b6b0 C1E208   		sall	$8, %edx
 26828 b6b3 4109D0   		orl	%edx, %r8d
 26829              	.LVL2321:
8041:src/vm3.c     ****   if (op0 == 0x0) {
 26830              		.loc 1 8041 0
 26831 b6b6 4489C6   		movl	%r8d, %esi
8043:src/vm3.c     ****     op0 = op0 + funct;
 26832              		.loc 1 8043 0
 26833 b6b9 4488C2   		movb	%r8b, %dl
8041:src/vm3.c     ****   if (op0 == 0x0) {
 26834              		.loc 1 8041 0
 26835 b6bc C1EE1A   		shrl	$26, %esi
 26836              	.LVL2322:
8043:src/vm3.c     ****     op0 = op0 + funct;
 26837              		.loc 1 8043 0
 26838 b6bf 83E23F   		andl	$63, %edx
 26839 b6c2 8D7E2B   		leal	43(%rsi), %edi
 26840 b6c5 4084F6   		testb	%sil, %sil
 26841 b6c8 0F45D7   		cmovne	%edi, %edx
 26842              	.LVL2323:
8053:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26843              		.loc 1 8053 0
 26844 b6cb C1E110   		sall	$16, %ecx
 26845 b6ce C1E318   		sall	$24, %ebx
 26846 b6d1 09CB     		orl	%ecx, %ebx
 26847 b6d3 8D4807   		leal	7(%rax), %ecx
 26848 b6d6 83C006   		addl	$6, %eax
 26849 b6d9 0FB68000 		movzbl	VM_memory(%rax), %eax
 26849      000000
8051:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 938


 26850              		.loc 1 8051 0
 26851 b6e0 0FB6D2   		movzbl	%dl, %edx
8053:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26852              		.loc 1 8053 0
 26853 b6e3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26853      000000
8051:src/vm3.c     **** 
 26854              		.loc 1 8051 0
 26855 b6ea 48C1E204 		salq	$4, %rdx
 26856              	.LVL2324:
8053:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26857              		.loc 1 8053 0
 26858 b6ee C1E008   		sall	$8, %eax
 26859 b6f1 09CB     		orl	%ecx, %ebx
 26860 b6f3 09C3     		orl	%eax, %ebx
 26861              	.LVL2325:
8054:src/vm3.c     ****   if (op1 == 0x0) {
 26862              		.loc 1 8054 0
 26863 b6f5 89D9     		movl	%ebx, %ecx
8056:src/vm3.c     ****     op1 = op1 + funct;
 26864              		.loc 1 8056 0
 26865 b6f7 88D8     		movb	%bl, %al
8054:src/vm3.c     ****   if (op1 == 0x0) {
 26866              		.loc 1 8054 0
 26867 b6f9 C1E91A   		shrl	$26, %ecx
 26868              	.LVL2326:
8056:src/vm3.c     ****     op1 = op1 + funct;
 26869              		.loc 1 8056 0
 26870 b6fc 83E03F   		andl	$63, %eax
 26871 b6ff 8D712B   		leal	43(%rcx), %esi
 26872 b702 84C9     		testb	%cl, %cl
 26873 b704 0F45C6   		cmovne	%esi, %eax
 26874              	.LVL2327:
8063:src/vm3.c     **** 
 26875              		.loc 1 8063 0
 26876 b707 0FB6C0   		movzbl	%al, %eax
 26877 b70a 48C1E004 		salq	$4, %rax
 26878              	.LVL2328:
 26879 b70e 48038414 		addq	58088(%rsp,%rdx), %rax
 26879      E8E20000 
 26880 b716 488B08   		movq	(%rax), %rcx
 26881 b719 E93A56FF 		jmp	.L269
 26881      FF
 26882              	.LVL2329:
 26883              	.L65:
8072:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26884              		.loc 1 8072 0
 26885 b71e 4489C0   		movl	%r8d, %eax
8073:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 26886              		.loc 1 8073 0
 26887 b721 4489C2   		movl	%r8d, %edx
8071:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 26888              		.loc 1 8071 0
 26889 b724 41C1E815 		shrl	$21, %r8d
 26890              	.LVL2330:
8072:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 26891              		.loc 1 8072 0
GAS LISTING /tmp/cc15eBE3.s 			page 939


 26892 b728 C1E810   		shrl	$16, %eax
 26893              	.LVL2331:
8074:src/vm3.c     **** PC  =  nPC;
 26894              		.loc 1 8074 0
 26895 b72b 4183E01F 		andl	$31, %r8d
8073:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 26896              		.loc 1 8073 0
 26897 b72f C1EA0B   		shrl	$11, %edx
 26898              	.LVL2332:
8074:src/vm3.c     **** PC  =  nPC;
 26899              		.loc 1 8074 0
 26900 b732 83E01F   		andl	$31, %eax
 26901 b735 83E21F   		andl	$31, %edx
8076:src/vm3.c     **** 
 26902              		.loc 1 8076 0
 26903 b738 83050000 		addl	$4, nPC(%rip)
 26903      000004
 26904              	.LVL2333:
8074:src/vm3.c     **** PC  =  nPC;
 26905              		.loc 1 8074 0
 26906 b73f 8B048500 		movl	RF(,%rax,4), %eax
 26906      000000
 26907 b746 42030485 		addl	RF(,%r8,4), %eax
 26907      00000000 
 26908 b74e 89049500 		movl	%eax, RF(,%rdx,4)
 26908      000000
8083:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 26909              		.loc 1 8083 0
 26910 b755 89D8     		movl	%ebx, %eax
8085:src/vm3.c     **** PC  =  nPC;
 26911              		.loc 1 8085 0
 26912 b757 C1E310   		sall	$16, %ebx
 26913              	.LVL2334:
8083:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 26914              		.loc 1 8083 0
 26915 b75a C1E810   		shrl	$16, %eax
 26916              	.LVL2335:
8085:src/vm3.c     **** PC  =  nPC;
 26917              		.loc 1 8085 0
 26918 b75d 83E01F   		andl	$31, %eax
 26919 b760 891C8500 		movl	%ebx, RF(,%rax,4)
 26919      000000
8086:src/vm3.c     **** nPC  += 4;
 26920              		.loc 1 8086 0
 26921 b767 8B050000 		movl	nPC(%rip), %eax
 26921      0000
8088:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26922              		.loc 1 8088 0
 26923 b76d 8D5003   		leal	3(%rax), %edx
8087:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26924              		.loc 1 8087 0
 26925 b770 8D4804   		leal	4(%rax), %ecx
8086:src/vm3.c     **** nPC  += 4;
 26926              		.loc 1 8086 0
 26927 b773 89050000 		movl	%eax, PC(%rip)
 26927      0000
8088:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 940


 26928              		.loc 1 8088 0
 26929 b779 440FB682 		movzbl	VM_memory(%rdx), %r8d
 26929      00000000 
 26930 b781 89C2     		movl	%eax, %edx
8101:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26931              		.loc 1 8101 0
 26932 b783 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 26932      000000
8088:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26933              		.loc 1 8088 0
 26934 b78a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26934      000000
8087:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 26935              		.loc 1 8087 0
 26936 b791 890D0000 		movl	%ecx, nPC(%rip)
 26936      0000
8101:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26937              		.loc 1 8101 0
 26938 b797 8D4805   		leal	5(%rax), %ecx
 26939 b79a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26939      000000
8088:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 26940              		.loc 1 8088 0
 26941 b7a1 C1E218   		sall	$24, %edx
 26942 b7a4 4109D0   		orl	%edx, %r8d
 26943 b7a7 8D5001   		leal	1(%rax), %edx
 26944 b7aa 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26944      000000
 26945 b7b1 C1E210   		sall	$16, %edx
 26946 b7b4 4109D0   		orl	%edx, %r8d
 26947 b7b7 8D5002   		leal	2(%rax), %edx
 26948 b7ba 0FB69200 		movzbl	VM_memory(%rdx), %edx
 26948      000000
 26949 b7c1 C1E208   		sall	$8, %edx
 26950 b7c4 4109D0   		orl	%edx, %r8d
 26951              	.LVL2336:
8089:src/vm3.c     ****   if (op0 == 0x0) {
 26952              		.loc 1 8089 0
 26953 b7c7 4489C6   		movl	%r8d, %esi
8091:src/vm3.c     ****     op0 = op0 + funct;
 26954              		.loc 1 8091 0
 26955 b7ca 4488C2   		movb	%r8b, %dl
8089:src/vm3.c     ****   if (op0 == 0x0) {
 26956              		.loc 1 8089 0
 26957 b7cd C1EE1A   		shrl	$26, %esi
 26958              	.LVL2337:
8091:src/vm3.c     ****     op0 = op0 + funct;
 26959              		.loc 1 8091 0
 26960 b7d0 83E23F   		andl	$63, %edx
 26961 b7d3 8D7E2B   		leal	43(%rsi), %edi
 26962 b7d6 4084F6   		testb	%sil, %sil
 26963 b7d9 0F45D7   		cmovne	%edi, %edx
 26964              	.LVL2338:
8101:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26965              		.loc 1 8101 0
 26966 b7dc C1E110   		sall	$16, %ecx
 26967 b7df C1E318   		sall	$24, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 941


 26968 b7e2 09CB     		orl	%ecx, %ebx
 26969 b7e4 8D4807   		leal	7(%rax), %ecx
 26970 b7e7 83C006   		addl	$6, %eax
 26971 b7ea 0FB68000 		movzbl	VM_memory(%rax), %eax
 26971      000000
8099:src/vm3.c     **** 
 26972              		.loc 1 8099 0
 26973 b7f1 0FB6D2   		movzbl	%dl, %edx
8101:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26974              		.loc 1 8101 0
 26975 b7f4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 26975      000000
8099:src/vm3.c     **** 
 26976              		.loc 1 8099 0
 26977 b7fb 48C1E204 		salq	$4, %rdx
 26978              	.LVL2339:
8101:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 26979              		.loc 1 8101 0
 26980 b7ff C1E008   		sall	$8, %eax
 26981 b802 09CB     		orl	%ecx, %ebx
 26982 b804 09C3     		orl	%eax, %ebx
 26983              	.LVL2340:
8102:src/vm3.c     ****   if (op1 == 0x0) {
 26984              		.loc 1 8102 0
 26985 b806 89D9     		movl	%ebx, %ecx
8104:src/vm3.c     ****     op1 = op1 + funct;
 26986              		.loc 1 8104 0
 26987 b808 88D8     		movb	%bl, %al
8102:src/vm3.c     ****   if (op1 == 0x0) {
 26988              		.loc 1 8102 0
 26989 b80a C1E91A   		shrl	$26, %ecx
 26990              	.LVL2341:
8104:src/vm3.c     ****     op1 = op1 + funct;
 26991              		.loc 1 8104 0
 26992 b80d 83E03F   		andl	$63, %eax
 26993 b810 8D712B   		leal	43(%rcx), %esi
 26994 b813 84C9     		testb	%cl, %cl
 26995 b815 0F45C6   		cmovne	%esi, %eax
 26996              	.LVL2342:
8111:src/vm3.c     **** 
 26997              		.loc 1 8111 0
 26998 b818 0FB6C0   		movzbl	%al, %eax
 26999 b81b 48C1E004 		salq	$4, %rax
 27000              	.LVL2343:
 27001 b81f 48038414 		addq	58088(%rsp,%rdx), %rax
 27001      E8E20000 
 27002 b827 488B08   		movq	(%rax), %rcx
 27003 b82a E92955FF 		jmp	.L269
 27003      FF
 27004              	.LVL2344:
 27005              	.L152:
8119:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27006              		.loc 1 8119 0
 27007 b82f 4489C2   		movl	%r8d, %edx
8120:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 27008              		.loc 1 8120 0
 27009 b832 4489C0   		movl	%r8d, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 942


8122:src/vm3.c     **** PC  =  nPC;
 27010              		.loc 1 8122 0
 27011 b835 450FBFC0 		movswl	%r8w, %r8d
 27012              	.LVL2345:
8119:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27013              		.loc 1 8119 0
 27014 b839 C1EA15   		shrl	$21, %edx
8120:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 27015              		.loc 1 8120 0
 27016 b83c C1E810   		shrl	$16, %eax
 27017              	.LVL2346:
8124:src/vm3.c     **** 
 27018              		.loc 1 8124 0
 27019 b83f 83050000 		addl	$4, nPC(%rip)
 27019      000004
 27020              	.LVL2347:
8122:src/vm3.c     **** PC  =  nPC;
 27021              		.loc 1 8122 0
 27022 b846 83E21F   		andl	$31, %edx
 27023 b849 83E01F   		andl	$31, %eax
 27024 b84c 44030495 		addl	RF(,%rdx,4), %r8d
 27024      00000000 
8130:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27025              		.loc 1 8130 0
 27026 b854 89DA     		movl	%ebx, %edx
 27027 b856 C1EA15   		shrl	$21, %edx
8133:src/vm3.c     **** PC  =  nPC;
 27028              		.loc 1 8133 0
 27029 b859 83E21F   		andl	$31, %edx
8122:src/vm3.c     **** PC  =  nPC;
 27030              		.loc 1 8122 0
 27031 b85c 44890485 		movl	%r8d, RF(,%rax,4)
 27031      00000000 
8131:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 27032              		.loc 1 8131 0
 27033 b864 89D8     		movl	%ebx, %eax
8133:src/vm3.c     **** PC  =  nPC;
 27034              		.loc 1 8133 0
 27035 b866 0FBFDB   		movswl	%bx, %ebx
 27036              	.LVL2348:
 27037 b869 031C9500 		addl	RF(,%rdx,4), %ebx
 27037      000000
 27038              	.LVL2349:
8131:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 27039              		.loc 1 8131 0
 27040 b870 C1E810   		shrl	$16, %eax
 27041              	.LVL2350:
8133:src/vm3.c     **** PC  =  nPC;
 27042              		.loc 1 8133 0
 27043 b873 83E01F   		andl	$31, %eax
 27044 b876 0FB69300 		movzbl	VM_memory(%rbx), %edx
 27044      000000
 27045 b87d 89148500 		movl	%edx, RF(,%rax,4)
 27045      000000
8134:src/vm3.c     **** nPC  += 4;
 27046              		.loc 1 8134 0
 27047 b884 8B050000 		movl	nPC(%rip), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 943


 27047      0000
8136:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27048              		.loc 1 8136 0
 27049 b88a 8D5003   		leal	3(%rax), %edx
8135:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27050              		.loc 1 8135 0
 27051 b88d 8D4804   		leal	4(%rax), %ecx
8134:src/vm3.c     **** nPC  += 4;
 27052              		.loc 1 8134 0
 27053 b890 89050000 		movl	%eax, PC(%rip)
 27053      0000
8136:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27054              		.loc 1 8136 0
 27055 b896 440FB682 		movzbl	VM_memory(%rdx), %r8d
 27055      00000000 
 27056 b89e 89C2     		movl	%eax, %edx
8149:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27057              		.loc 1 8149 0
 27058 b8a0 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27058      000000
8136:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27059              		.loc 1 8136 0
 27060 b8a7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27060      000000
8135:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27061              		.loc 1 8135 0
 27062 b8ae 890D0000 		movl	%ecx, nPC(%rip)
 27062      0000
8149:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27063              		.loc 1 8149 0
 27064 b8b4 8D4805   		leal	5(%rax), %ecx
 27065 b8b7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27065      000000
8136:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27066              		.loc 1 8136 0
 27067 b8be C1E218   		sall	$24, %edx
 27068 b8c1 4109D0   		orl	%edx, %r8d
 27069 b8c4 8D5001   		leal	1(%rax), %edx
 27070 b8c7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27070      000000
 27071 b8ce C1E210   		sall	$16, %edx
 27072 b8d1 4109D0   		orl	%edx, %r8d
 27073 b8d4 8D5002   		leal	2(%rax), %edx
 27074 b8d7 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27074      000000
 27075 b8de C1E208   		sall	$8, %edx
 27076 b8e1 4109D0   		orl	%edx, %r8d
 27077              	.LVL2351:
8137:src/vm3.c     ****   if (op0 == 0x0) {
 27078              		.loc 1 8137 0
 27079 b8e4 4489C6   		movl	%r8d, %esi
8139:src/vm3.c     ****     op0 = op0 + funct;
 27080              		.loc 1 8139 0
 27081 b8e7 4488C2   		movb	%r8b, %dl
8137:src/vm3.c     ****   if (op0 == 0x0) {
 27082              		.loc 1 8137 0
 27083 b8ea C1EE1A   		shrl	$26, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 944


 27084              	.LVL2352:
8139:src/vm3.c     ****     op0 = op0 + funct;
 27085              		.loc 1 8139 0
 27086 b8ed 83E23F   		andl	$63, %edx
 27087 b8f0 8D7E2B   		leal	43(%rsi), %edi
 27088 b8f3 4084F6   		testb	%sil, %sil
 27089 b8f6 0F45D7   		cmovne	%edi, %edx
 27090              	.LVL2353:
8149:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27091              		.loc 1 8149 0
 27092 b8f9 C1E110   		sall	$16, %ecx
 27093 b8fc C1E318   		sall	$24, %ebx
 27094 b8ff 09CB     		orl	%ecx, %ebx
 27095 b901 8D4807   		leal	7(%rax), %ecx
 27096 b904 83C006   		addl	$6, %eax
 27097 b907 0FB68000 		movzbl	VM_memory(%rax), %eax
 27097      000000
8147:src/vm3.c     **** 
 27098              		.loc 1 8147 0
 27099 b90e 0FB6D2   		movzbl	%dl, %edx
8149:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27100              		.loc 1 8149 0
 27101 b911 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27101      000000
8147:src/vm3.c     **** 
 27102              		.loc 1 8147 0
 27103 b918 48C1E204 		salq	$4, %rdx
 27104              	.LVL2354:
8149:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27105              		.loc 1 8149 0
 27106 b91c C1E008   		sall	$8, %eax
 27107 b91f 09CB     		orl	%ecx, %ebx
 27108 b921 09C3     		orl	%eax, %ebx
 27109              	.LVL2355:
8150:src/vm3.c     ****   if (op1 == 0x0) {
 27110              		.loc 1 8150 0
 27111 b923 89D9     		movl	%ebx, %ecx
8152:src/vm3.c     ****     op1 = op1 + funct;
 27112              		.loc 1 8152 0
 27113 b925 88D8     		movb	%bl, %al
8150:src/vm3.c     ****   if (op1 == 0x0) {
 27114              		.loc 1 8150 0
 27115 b927 C1E91A   		shrl	$26, %ecx
 27116              	.LVL2356:
8152:src/vm3.c     ****     op1 = op1 + funct;
 27117              		.loc 1 8152 0
 27118 b92a 83E03F   		andl	$63, %eax
 27119 b92d 8D712B   		leal	43(%rcx), %esi
 27120 b930 84C9     		testb	%cl, %cl
 27121 b932 0F45C6   		cmovne	%esi, %eax
 27122              	.LVL2357:
8159:src/vm3.c     **** 
 27123              		.loc 1 8159 0
 27124 b935 0FB6C0   		movzbl	%al, %eax
 27125 b938 48C1E004 		salq	$4, %rax
 27126              	.LVL2358:
 27127 b93c 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 945


 27127      E8E20000 
 27128 b944 488B08   		movq	(%rax), %rcx
 27129 b947 E90C54FF 		jmp	.L269
 27129      FF
 27130              	.LVL2359:
 27131              	.L217:
8168:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 27132              		.loc 1 8168 0
 27133 b94c 4489C0   		movl	%r8d, %eax
8169:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 27134              		.loc 1 8169 0
 27135 b94f 4489C2   		movl	%r8d, %edx
8167:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27136              		.loc 1 8167 0
 27137 b952 41C1E806 		shrl	$6, %r8d
 27138              	.LVL2360:
8168:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 27139              		.loc 1 8168 0
 27140 b956 C1E810   		shrl	$16, %eax
 27141              	.LVL2361:
8167:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27142              		.loc 1 8167 0
 27143 b959 4488C1   		movb	%r8b, %cl
8169:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 27144              		.loc 1 8169 0
 27145 b95c C1EA0B   		shrl	$11, %edx
 27146              	.LVL2362:
8170:src/vm3.c     **** PC  =  nPC;
 27147              		.loc 1 8170 0
 27148 b95f 83E01F   		andl	$31, %eax
8167:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27149              		.loc 1 8167 0
 27150 b962 83E11F   		andl	$31, %ecx
8170:src/vm3.c     **** PC  =  nPC;
 27151              		.loc 1 8170 0
 27152 b965 83E21F   		andl	$31, %edx
 27153 b968 8B048500 		movl	RF(,%rax,4), %eax
 27153      000000
8172:src/vm3.c     **** 
 27154              		.loc 1 8172 0
 27155 b96f 83050000 		addl	$4, nPC(%rip)
 27155      000004
 27156              	.LVL2363:
8170:src/vm3.c     **** PC  =  nPC;
 27157              		.loc 1 8170 0
 27158 b976 D3E8     		shrl	%cl, %eax
 27159 b978 89049500 		movl	%eax, RF(,%rdx,4)
 27159      000000
8178:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27160              		.loc 1 8178 0
 27161 b97f 89DA     		movl	%ebx, %edx
8179:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 27162              		.loc 1 8179 0
 27163 b981 89D8     		movl	%ebx, %eax
8178:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27164              		.loc 1 8178 0
 27165 b983 C1EA15   		shrl	$21, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 946


8181:src/vm3.c     **** PC  =  nPC;
 27166              		.loc 1 8181 0
 27167 b986 0FBFDB   		movswl	%bx, %ebx
 27168              	.LVL2364:
8179:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 27169              		.loc 1 8179 0
 27170 b989 C1E810   		shrl	$16, %eax
 27171              	.LVL2365:
8181:src/vm3.c     **** PC  =  nPC;
 27172              		.loc 1 8181 0
 27173 b98c 83E21F   		andl	$31, %edx
 27174 b98f 83E01F   		andl	$31, %eax
 27175 b992 0B1C9500 		orl	RF(,%rdx,4), %ebx
 27175      000000
 27176              	.LVL2366:
 27177 b999 891C8500 		movl	%ebx, RF(,%rax,4)
 27177      000000
8182:src/vm3.c     **** nPC  += 4;
 27178              		.loc 1 8182 0
 27179 b9a0 8B050000 		movl	nPC(%rip), %eax
 27179      0000
8184:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27180              		.loc 1 8184 0
 27181 b9a6 8D5003   		leal	3(%rax), %edx
8183:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27182              		.loc 1 8183 0
 27183 b9a9 8D4804   		leal	4(%rax), %ecx
8182:src/vm3.c     **** nPC  += 4;
 27184              		.loc 1 8182 0
 27185 b9ac 89050000 		movl	%eax, PC(%rip)
 27185      0000
8184:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27186              		.loc 1 8184 0
 27187 b9b2 440FB682 		movzbl	VM_memory(%rdx), %r8d
 27187      00000000 
 27188 b9ba 89C2     		movl	%eax, %edx
8197:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27189              		.loc 1 8197 0
 27190 b9bc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27190      000000
8184:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27191              		.loc 1 8184 0
 27192 b9c3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27192      000000
8183:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27193              		.loc 1 8183 0
 27194 b9ca 890D0000 		movl	%ecx, nPC(%rip)
 27194      0000
8197:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27195              		.loc 1 8197 0
 27196 b9d0 8D4805   		leal	5(%rax), %ecx
 27197 b9d3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27197      000000
8184:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27198              		.loc 1 8184 0
 27199 b9da C1E218   		sall	$24, %edx
 27200 b9dd 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 947


 27201 b9e0 8D5001   		leal	1(%rax), %edx
 27202 b9e3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27202      000000
 27203 b9ea C1E210   		sall	$16, %edx
 27204 b9ed 4109D0   		orl	%edx, %r8d
 27205 b9f0 8D5002   		leal	2(%rax), %edx
 27206 b9f3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27206      000000
 27207 b9fa C1E208   		sall	$8, %edx
 27208 b9fd 4109D0   		orl	%edx, %r8d
 27209              	.LVL2367:
8185:src/vm3.c     ****   if (op0 == 0x0) {
 27210              		.loc 1 8185 0
 27211 ba00 4489C6   		movl	%r8d, %esi
8187:src/vm3.c     ****     op0 = op0 + funct;
 27212              		.loc 1 8187 0
 27213 ba03 4488C2   		movb	%r8b, %dl
8185:src/vm3.c     ****   if (op0 == 0x0) {
 27214              		.loc 1 8185 0
 27215 ba06 C1EE1A   		shrl	$26, %esi
 27216              	.LVL2368:
8187:src/vm3.c     ****     op0 = op0 + funct;
 27217              		.loc 1 8187 0
 27218 ba09 83E23F   		andl	$63, %edx
 27219 ba0c 8D7E2B   		leal	43(%rsi), %edi
 27220 ba0f 4084F6   		testb	%sil, %sil
 27221 ba12 0F45D7   		cmovne	%edi, %edx
 27222              	.LVL2369:
8197:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27223              		.loc 1 8197 0
 27224 ba15 C1E110   		sall	$16, %ecx
 27225 ba18 C1E318   		sall	$24, %ebx
 27226 ba1b 09CB     		orl	%ecx, %ebx
 27227 ba1d 8D4807   		leal	7(%rax), %ecx
 27228 ba20 83C006   		addl	$6, %eax
 27229 ba23 0FB68000 		movzbl	VM_memory(%rax), %eax
 27229      000000
8195:src/vm3.c     **** 
 27230              		.loc 1 8195 0
 27231 ba2a 0FB6D2   		movzbl	%dl, %edx
8197:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27232              		.loc 1 8197 0
 27233 ba2d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27233      000000
8195:src/vm3.c     **** 
 27234              		.loc 1 8195 0
 27235 ba34 48C1E204 		salq	$4, %rdx
 27236              	.LVL2370:
8197:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27237              		.loc 1 8197 0
 27238 ba38 C1E008   		sall	$8, %eax
 27239 ba3b 09CB     		orl	%ecx, %ebx
 27240 ba3d 09C3     		orl	%eax, %ebx
 27241              	.LVL2371:
8198:src/vm3.c     ****   if (op1 == 0x0) {
 27242              		.loc 1 8198 0
 27243 ba3f 89D9     		movl	%ebx, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 948


8200:src/vm3.c     ****     op1 = op1 + funct;
 27244              		.loc 1 8200 0
 27245 ba41 88D8     		movb	%bl, %al
8198:src/vm3.c     ****   if (op1 == 0x0) {
 27246              		.loc 1 8198 0
 27247 ba43 C1E91A   		shrl	$26, %ecx
 27248              	.LVL2372:
8200:src/vm3.c     ****     op1 = op1 + funct;
 27249              		.loc 1 8200 0
 27250 ba46 83E03F   		andl	$63, %eax
 27251 ba49 8D712B   		leal	43(%rcx), %esi
 27252 ba4c 84C9     		testb	%cl, %cl
 27253 ba4e 0F45C6   		cmovne	%esi, %eax
 27254              	.LVL2373:
8207:src/vm3.c     **** 
 27255              		.loc 1 8207 0
 27256 ba51 0FB6C0   		movzbl	%al, %eax
 27257 ba54 48C1E004 		salq	$4, %rax
 27258              	.LVL2374:
 27259 ba58 48038414 		addq	58088(%rsp,%rdx), %rax
 27259      E8E20000 
 27260 ba60 488B08   		movq	(%rax), %rcx
 27261 ba63 E9F052FF 		jmp	.L269
 27261      FF
 27262              	.LVL2375:
 27263              	.L192:
8215:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27264              		.loc 1 8215 0
 27265 ba68 4489C2   		movl	%r8d, %edx
8216:src/vm3.c     **** if (RF[rs] != RF[rt])
 27266              		.loc 1 8216 0
 27267 ba6b 4489C0   		movl	%r8d, %eax
8215:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27268              		.loc 1 8215 0
 27269 ba6e C1EA15   		shrl	$21, %edx
8216:src/vm3.c     **** if (RF[rs] != RF[rt])
 27270              		.loc 1 8216 0
 27271 ba71 C1E810   		shrl	$16, %eax
8217:src/vm3.c     **** {
 27272              		.loc 1 8217 0
 27273 ba74 83E01F   		andl	$31, %eax
 27274 ba77 83E21F   		andl	$31, %edx
 27275 ba7a 8B048500 		movl	RF(,%rax,4), %eax
 27275      000000
 27276 ba81 39049500 		cmpl	%eax, RF(,%rdx,4)
 27276      000000
 27277 ba88 0F84CE00 		je	.L984
 27277      0000
 27278              	.LVL2376:
8220:src/vm3.c     ****   nPC  += (immediate << 2);
 27279              		.loc 1 8220 0
 27280 ba8e 8B050000 		movl	nPC(%rip), %eax
 27280      0000
8221:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 27281              		.loc 1 8221 0
 27282 ba94 450FBFC0 		movswl	%r8w, %r8d
 27283              	.LVL2377:
GAS LISTING /tmp/cc15eBE3.s 			page 949


8222:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27284              		.loc 1 8222 0
 27285 ba98 8D4803   		leal	3(%rax), %ecx
8221:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 27286              		.loc 1 8221 0
 27287 ba9b 428D1480 		leal	(%rax,%r8,4), %edx
8220:src/vm3.c     ****   nPC  += (immediate << 2);
 27288              		.loc 1 8220 0
 27289 ba9f 89050000 		movl	%eax, PC(%rip)
 27289      0000
8222:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27290              		.loc 1 8222 0
 27291 baa5 440FB681 		movzbl	VM_memory(%rcx), %r8d
 27291      00000000 
 27292              	.LVL2378:
 27293 baad 89C1     		movl	%eax, %ecx
8221:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 27294              		.loc 1 8221 0
 27295 baaf 89150000 		movl	%edx, nPC(%rip)
 27295      0000
8222:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27296              		.loc 1 8222 0
 27297 bab5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27297      000000
 27298 babc C1E118   		sall	$24, %ecx
 27299 babf 4109C8   		orl	%ecx, %r8d
 27300 bac2 8D4801   		leal	1(%rax), %ecx
 27301 bac5 83C002   		addl	$2, %eax
 27302 bac8 0FB68000 		movzbl	VM_memory(%rax), %eax
 27302      000000
 27303 bacf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27303      000000
 27304 bad6 C1E008   		sall	$8, %eax
 27305 bad9 C1E110   		sall	$16, %ecx
 27306 badc 4109C8   		orl	%ecx, %r8d
 27307 badf 4109C0   		orl	%eax, %r8d
 27308              	.LVL2379:
8223:src/vm3.c     ****   if (op0 == 0x0) {
 27309              		.loc 1 8223 0
 27310 bae2 4489C0   		movl	%r8d, %eax
8225:src/vm3.c     ****     op0 = op0 + funct;
 27311              		.loc 1 8225 0
 27312 bae5 4488C1   		movb	%r8b, %cl
8223:src/vm3.c     ****   if (op0 == 0x0) {
 27313              		.loc 1 8223 0
 27314 bae8 C1E81A   		shrl	$26, %eax
 27315              	.LVL2380:
8225:src/vm3.c     ****     op0 = op0 + funct;
 27316              		.loc 1 8225 0
 27317 baeb 83E13F   		andl	$63, %ecx
 27318 baee 8D702B   		leal	43(%rax), %esi
 27319 baf1 84C0     		testb	%al, %al
8235:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27320              		.loc 1 8235 0
 27321 baf3 8D4203   		leal	3(%rdx), %eax
 27322              	.LVL2381:
 27323 baf6 0FB69800 		movzbl	VM_memory(%rax), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 950


 27323      000000
 27324              	.LVL2382:
 27325 bafd 89D0     		movl	%edx, %eax
8225:src/vm3.c     ****     op0 = op0 + funct;
 27326              		.loc 1 8225 0
 27327 baff 0F45CE   		cmovne	%esi, %ecx
 27328              	.LVL2383:
8235:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27329              		.loc 1 8235 0
 27330 bb02 0FB68000 		movzbl	VM_memory(%rax), %eax
 27330      000000
8233:src/vm3.c     **** 
 27331              		.loc 1 8233 0
 27332 bb09 0FB6C9   		movzbl	%cl, %ecx
 27333 bb0c 48C1E104 		salq	$4, %rcx
 27334              	.LVL2384:
8235:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27335              		.loc 1 8235 0
 27336 bb10 C1E018   		sall	$24, %eax
 27337 bb13 09C3     		orl	%eax, %ebx
 27338 bb15 8D4201   		leal	1(%rdx), %eax
 27339 bb18 0FB68000 		movzbl	VM_memory(%rax), %eax
 27339      000000
 27340 bb1f C1E010   		sall	$16, %eax
 27341 bb22 09C3     		orl	%eax, %ebx
 27342 bb24 8D4202   		leal	2(%rdx), %eax
 27343 bb27 0FB68000 		movzbl	VM_memory(%rax), %eax
 27343      000000
 27344 bb2e C1E008   		sall	$8, %eax
 27345 bb31 09C3     		orl	%eax, %ebx
 27346              	.LVL2385:
8236:src/vm3.c     ****   if (op1 == 0x0) {
 27347              		.loc 1 8236 0
 27348 bb33 89DA     		movl	%ebx, %edx
8238:src/vm3.c     ****     op1 = op1 + funct;
 27349              		.loc 1 8238 0
 27350 bb35 88D8     		movb	%bl, %al
8236:src/vm3.c     ****   if (op1 == 0x0) {
 27351              		.loc 1 8236 0
 27352 bb37 C1EA1A   		shrl	$26, %edx
 27353              	.LVL2386:
8238:src/vm3.c     ****     op1 = op1 + funct;
 27354              		.loc 1 8238 0
 27355 bb3a 83E03F   		andl	$63, %eax
 27356 bb3d 8D722B   		leal	43(%rdx), %esi
 27357 bb40 84D2     		testb	%dl, %dl
 27358 bb42 0F45C6   		cmovne	%esi, %eax
 27359              	.LVL2387:
8245:src/vm3.c     **** 
 27360              		.loc 1 8245 0
 27361 bb45 0FB6C0   		movzbl	%al, %eax
 27362 bb48 48C1E004 		salq	$4, %rax
 27363              	.LVL2388:
 27364 bb4c 4803840C 		addq	58088(%rsp,%rcx), %rax
 27364      E8E20000 
 27365 bb54 488B08   		movq	(%rax), %rcx
 27366              	.LVL2389:
GAS LISTING /tmp/cc15eBE3.s 			page 951


 27367 bb57 E9FC51FF 		jmp	.L269
 27367      FF
 27368              	.LVL2390:
 27369              	.L984:
8260:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 27370              		.loc 1 8260 0
 27371 bb5c 89D8     		movl	%ebx, %eax
8261:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 27372              		.loc 1 8261 0
 27373 bb5e 89DA     		movl	%ebx, %edx
8259:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27374              		.loc 1 8259 0
 27375 bb60 C1EB15   		shrl	$21, %ebx
 27376              	.LVL2391:
8260:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 27377              		.loc 1 8260 0
 27378 bb63 C1E810   		shrl	$16, %eax
 27379              	.LVL2392:
8262:src/vm3.c     **** PC  =  nPC;
 27380              		.loc 1 8262 0
 27381 bb66 83E31F   		andl	$31, %ebx
8261:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 27382              		.loc 1 8261 0
 27383 bb69 C1EA0B   		shrl	$11, %edx
 27384              	.LVL2393:
8262:src/vm3.c     **** PC  =  nPC;
 27385              		.loc 1 8262 0
 27386 bb6c 83E01F   		andl	$31, %eax
8252:src/vm3.c     **** }
 27387              		.loc 1 8252 0
 27388 bb6f 83050000 		addl	$4, nPC(%rip)
 27388      000004
 27389              	.LVL2394:
8262:src/vm3.c     **** PC  =  nPC;
 27390              		.loc 1 8262 0
 27391 bb76 83E21F   		andl	$31, %edx
 27392 bb79 8B048500 		movl	RF(,%rax,4), %eax
 27392      000000
 27393 bb80 33049D00 		xorl	RF(,%rbx,4), %eax
 27393      000000
 27394 bb87 89049500 		movl	%eax, RF(,%rdx,4)
 27394      000000
8263:src/vm3.c     **** nPC  += 4;
 27395              		.loc 1 8263 0
 27396 bb8e 8B050000 		movl	nPC(%rip), %eax
 27396      0000
8265:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27397              		.loc 1 8265 0
 27398 bb94 8D5003   		leal	3(%rax), %edx
8264:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27399              		.loc 1 8264 0
 27400 bb97 8D4804   		leal	4(%rax), %ecx
8263:src/vm3.c     **** nPC  += 4;
 27401              		.loc 1 8263 0
 27402 bb9a 89050000 		movl	%eax, PC(%rip)
 27402      0000
8265:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 952


 27403              		.loc 1 8265 0
 27404 bba0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 27404      00000000 
 27405              	.LVL2395:
 27406 bba8 89C2     		movl	%eax, %edx
8278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27407              		.loc 1 8278 0
 27408 bbaa 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27408      000000
8265:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27409              		.loc 1 8265 0
 27410 bbb1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27410      000000
8264:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27411              		.loc 1 8264 0
 27412 bbb8 890D0000 		movl	%ecx, nPC(%rip)
 27412      0000
8278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27413              		.loc 1 8278 0
 27414 bbbe 8D4805   		leal	5(%rax), %ecx
 27415 bbc1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27415      000000
8265:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27416              		.loc 1 8265 0
 27417 bbc8 C1E218   		sall	$24, %edx
 27418 bbcb 4109D0   		orl	%edx, %r8d
 27419 bbce 8D5001   		leal	1(%rax), %edx
 27420 bbd1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27420      000000
 27421 bbd8 C1E210   		sall	$16, %edx
 27422 bbdb 4109D0   		orl	%edx, %r8d
 27423 bbde 8D5002   		leal	2(%rax), %edx
 27424 bbe1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27424      000000
 27425 bbe8 C1E208   		sall	$8, %edx
 27426 bbeb 4109D0   		orl	%edx, %r8d
 27427              	.LVL2396:
8266:src/vm3.c     ****   if (op0 == 0x0) {
 27428              		.loc 1 8266 0
 27429 bbee 4489C6   		movl	%r8d, %esi
8268:src/vm3.c     ****     op0 = op0 + funct;
 27430              		.loc 1 8268 0
 27431 bbf1 4488C2   		movb	%r8b, %dl
8266:src/vm3.c     ****   if (op0 == 0x0) {
 27432              		.loc 1 8266 0
 27433 bbf4 C1EE1A   		shrl	$26, %esi
 27434              	.LVL2397:
8268:src/vm3.c     ****     op0 = op0 + funct;
 27435              		.loc 1 8268 0
 27436 bbf7 83E23F   		andl	$63, %edx
 27437 bbfa 8D7E2B   		leal	43(%rsi), %edi
 27438 bbfd 4084F6   		testb	%sil, %sil
 27439 bc00 0F45D7   		cmovne	%edi, %edx
 27440              	.LVL2398:
8278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27441              		.loc 1 8278 0
 27442 bc03 C1E110   		sall	$16, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 953


 27443 bc06 C1E318   		sall	$24, %ebx
 27444 bc09 09CB     		orl	%ecx, %ebx
 27445 bc0b 8D4807   		leal	7(%rax), %ecx
 27446 bc0e 83C006   		addl	$6, %eax
 27447 bc11 0FB68000 		movzbl	VM_memory(%rax), %eax
 27447      000000
8276:src/vm3.c     **** 
 27448              		.loc 1 8276 0
 27449 bc18 0FB6D2   		movzbl	%dl, %edx
8278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27450              		.loc 1 8278 0
 27451 bc1b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27451      000000
8276:src/vm3.c     **** 
 27452              		.loc 1 8276 0
 27453 bc22 48C1E204 		salq	$4, %rdx
 27454              	.LVL2399:
8278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27455              		.loc 1 8278 0
 27456 bc26 C1E008   		sall	$8, %eax
 27457 bc29 09CB     		orl	%ecx, %ebx
 27458 bc2b 09C3     		orl	%eax, %ebx
 27459              	.LVL2400:
8279:src/vm3.c     ****   if (op1 == 0x0) {
 27460              		.loc 1 8279 0
 27461 bc2d 89D9     		movl	%ebx, %ecx
8281:src/vm3.c     ****     op1 = op1 + funct;
 27462              		.loc 1 8281 0
 27463 bc2f 88D8     		movb	%bl, %al
8279:src/vm3.c     ****   if (op1 == 0x0) {
 27464              		.loc 1 8279 0
 27465 bc31 C1E91A   		shrl	$26, %ecx
 27466              	.LVL2401:
8281:src/vm3.c     ****     op1 = op1 + funct;
 27467              		.loc 1 8281 0
 27468 bc34 83E03F   		andl	$63, %eax
 27469 bc37 8D712B   		leal	43(%rcx), %esi
 27470 bc3a 84C9     		testb	%cl, %cl
 27471 bc3c 0F45C6   		cmovne	%esi, %eax
 27472              	.LVL2402:
8288:src/vm3.c     **** 
 27473              		.loc 1 8288 0
 27474 bc3f 0FB6C0   		movzbl	%al, %eax
 27475 bc42 48C1E004 		salq	$4, %rax
 27476              	.LVL2403:
 27477 bc46 48038414 		addq	58088(%rsp,%rdx), %rax
 27477      E8E20000 
 27478 bc4e 488B08   		movq	(%rax), %rcx
 27479 bc51 E90251FF 		jmp	.L269
 27479      FF
 27480              	.LVL2404:
 27481              	.L23:
8297:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 27482              		.loc 1 8297 0
 27483 bc56 4489C0   		movl	%r8d, %eax
8298:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 27484              		.loc 1 8298 0
GAS LISTING /tmp/cc15eBE3.s 			page 954


 27485 bc59 4489C2   		movl	%r8d, %edx
8296:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27486              		.loc 1 8296 0
 27487 bc5c 41C1E806 		shrl	$6, %r8d
 27488              	.LVL2405:
8297:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 27489              		.loc 1 8297 0
 27490 bc60 C1E810   		shrl	$16, %eax
 27491              	.LVL2406:
8296:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27492              		.loc 1 8296 0
 27493 bc63 4488C1   		movb	%r8b, %cl
8298:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 27494              		.loc 1 8298 0
 27495 bc66 C1EA0B   		shrl	$11, %edx
 27496              	.LVL2407:
8299:src/vm3.c     **** PC  =  nPC;
 27497              		.loc 1 8299 0
 27498 bc69 83E01F   		andl	$31, %eax
8296:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27499              		.loc 1 8296 0
 27500 bc6c 83E11F   		andl	$31, %ecx
8299:src/vm3.c     **** PC  =  nPC;
 27501              		.loc 1 8299 0
 27502 bc6f 83E21F   		andl	$31, %edx
 27503 bc72 8B048500 		movl	RF(,%rax,4), %eax
 27503      000000
8301:src/vm3.c     **** 
 27504              		.loc 1 8301 0
 27505 bc79 83050000 		addl	$4, nPC(%rip)
 27505      000004
 27506              	.LVL2408:
8299:src/vm3.c     **** PC  =  nPC;
 27507              		.loc 1 8299 0
 27508 bc80 D3E0     		sall	%cl, %eax
 27509 bc82 89049500 		movl	%eax, RF(,%rdx,4)
 27509      000000
8307:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27510              		.loc 1 8307 0
 27511 bc89 89DA     		movl	%ebx, %edx
8309:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 27512              		.loc 1 8309 0
 27513 bc8b 89D8     		movl	%ebx, %eax
8307:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27514              		.loc 1 8307 0
 27515 bc8d C1EA15   		shrl	$21, %edx
8308:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 27516              		.loc 1 8308 0
 27517 bc90 C1EB10   		shrl	$16, %ebx
 27518              	.LVL2409:
8309:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 27519              		.loc 1 8309 0
 27520 bc93 C1E80B   		shrl	$11, %eax
 27521              	.LVL2410:
8310:src/vm3.c     **** PC  =  nPC;
 27522              		.loc 1 8310 0
 27523 bc96 83E31F   		andl	$31, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 955


 27524 bc99 83E21F   		andl	$31, %edx
 27525 bc9c 83E01F   		andl	$31, %eax
 27526 bc9f 8B3C9D00 		movl	RF(,%rbx,4), %edi
 27526      000000
 27527 bca6 393C9500 		cmpl	%edi, RF(,%rdx,4)
 27527      000000
 27528 bcad 0F92C2   		setb	%dl
 27529 bcb0 0FB6D2   		movzbl	%dl, %edx
 27530 bcb3 89148500 		movl	%edx, RF(,%rax,4)
 27530      000000
8311:src/vm3.c     **** nPC  += 4;
 27531              		.loc 1 8311 0
 27532 bcba 8B050000 		movl	nPC(%rip), %eax
 27532      0000
8313:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27533              		.loc 1 8313 0
 27534 bcc0 8D5003   		leal	3(%rax), %edx
8312:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27535              		.loc 1 8312 0
 27536 bcc3 8D4804   		leal	4(%rax), %ecx
8311:src/vm3.c     **** nPC  += 4;
 27537              		.loc 1 8311 0
 27538 bcc6 89050000 		movl	%eax, PC(%rip)
 27538      0000
8313:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27539              		.loc 1 8313 0
 27540 bccc 440FB682 		movzbl	VM_memory(%rdx), %r8d
 27540      00000000 
 27541 bcd4 89C2     		movl	%eax, %edx
8326:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27542              		.loc 1 8326 0
 27543 bcd6 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27543      000000
8313:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27544              		.loc 1 8313 0
 27545 bcdd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27545      000000
8312:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27546              		.loc 1 8312 0
 27547 bce4 890D0000 		movl	%ecx, nPC(%rip)
 27547      0000
8326:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27548              		.loc 1 8326 0
 27549 bcea 8D4805   		leal	5(%rax), %ecx
 27550 bced 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27550      000000
8313:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27551              		.loc 1 8313 0
 27552 bcf4 C1E218   		sall	$24, %edx
 27553 bcf7 4109D0   		orl	%edx, %r8d
 27554 bcfa 8D5001   		leal	1(%rax), %edx
 27555 bcfd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27555      000000
 27556 bd04 C1E210   		sall	$16, %edx
 27557 bd07 4109D0   		orl	%edx, %r8d
 27558 bd0a 8D5002   		leal	2(%rax), %edx
 27559 bd0d 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 956


 27559      000000
 27560 bd14 C1E208   		sall	$8, %edx
 27561 bd17 4109D0   		orl	%edx, %r8d
 27562              	.LVL2411:
8314:src/vm3.c     ****   if (op0 == 0x0) {
 27563              		.loc 1 8314 0
 27564 bd1a 4489C6   		movl	%r8d, %esi
8316:src/vm3.c     ****     op0 = op0 + funct;
 27565              		.loc 1 8316 0
 27566 bd1d 4488C2   		movb	%r8b, %dl
8314:src/vm3.c     ****   if (op0 == 0x0) {
 27567              		.loc 1 8314 0
 27568 bd20 C1EE1A   		shrl	$26, %esi
 27569              	.LVL2412:
8316:src/vm3.c     ****     op0 = op0 + funct;
 27570              		.loc 1 8316 0
 27571 bd23 83E23F   		andl	$63, %edx
 27572 bd26 8D7E2B   		leal	43(%rsi), %edi
 27573 bd29 4084F6   		testb	%sil, %sil
 27574 bd2c 0F45D7   		cmovne	%edi, %edx
 27575              	.LVL2413:
8326:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27576              		.loc 1 8326 0
 27577 bd2f C1E110   		sall	$16, %ecx
 27578 bd32 C1E318   		sall	$24, %ebx
 27579 bd35 09CB     		orl	%ecx, %ebx
 27580 bd37 8D4807   		leal	7(%rax), %ecx
 27581 bd3a 83C006   		addl	$6, %eax
 27582 bd3d 0FB68000 		movzbl	VM_memory(%rax), %eax
 27582      000000
8324:src/vm3.c     **** 
 27583              		.loc 1 8324 0
 27584 bd44 0FB6D2   		movzbl	%dl, %edx
8326:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27585              		.loc 1 8326 0
 27586 bd47 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27586      000000
8324:src/vm3.c     **** 
 27587              		.loc 1 8324 0
 27588 bd4e 48C1E204 		salq	$4, %rdx
 27589              	.LVL2414:
8326:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27590              		.loc 1 8326 0
 27591 bd52 C1E008   		sall	$8, %eax
 27592 bd55 09CB     		orl	%ecx, %ebx
 27593 bd57 09C3     		orl	%eax, %ebx
 27594              	.LVL2415:
8327:src/vm3.c     ****   if (op1 == 0x0) {
 27595              		.loc 1 8327 0
 27596 bd59 89D9     		movl	%ebx, %ecx
8329:src/vm3.c     ****     op1 = op1 + funct;
 27597              		.loc 1 8329 0
 27598 bd5b 88D8     		movb	%bl, %al
8327:src/vm3.c     ****   if (op1 == 0x0) {
 27599              		.loc 1 8327 0
 27600 bd5d C1E91A   		shrl	$26, %ecx
 27601              	.LVL2416:
GAS LISTING /tmp/cc15eBE3.s 			page 957


8329:src/vm3.c     ****     op1 = op1 + funct;
 27602              		.loc 1 8329 0
 27603 bd60 83E03F   		andl	$63, %eax
 27604 bd63 8D712B   		leal	43(%rcx), %esi
 27605 bd66 84C9     		testb	%cl, %cl
 27606 bd68 0F45C6   		cmovne	%esi, %eax
 27607              	.LVL2417:
8336:src/vm3.c     **** 
 27608              		.loc 1 8336 0
 27609 bd6b 0FB6C0   		movzbl	%al, %eax
 27610 bd6e 48C1E004 		salq	$4, %rax
 27611              	.LVL2418:
 27612 bd72 48038414 		addq	58088(%rsp,%rdx), %rax
 27612      E8E20000 
 27613 bd7a 488B08   		movq	(%rax), %rcx
 27614 bd7d E9D64FFF 		jmp	.L269
 27614      FF
 27615              	.LVL2419:
 27616              	.L82:
8345:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 27617              		.loc 1 8345 0
 27618 bd82 4489C0   		movl	%r8d, %eax
8346:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 27619              		.loc 1 8346 0
 27620 bd85 4489C2   		movl	%r8d, %edx
8344:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27621              		.loc 1 8344 0
 27622 bd88 41C1E815 		shrl	$21, %r8d
 27623              	.LVL2420:
8345:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 27624              		.loc 1 8345 0
 27625 bd8c C1E810   		shrl	$16, %eax
 27626              	.LVL2421:
8347:src/vm3.c     **** PC  =  nPC;
 27627              		.loc 1 8347 0
 27628 bd8f 4183E01F 		andl	$31, %r8d
8346:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 27629              		.loc 1 8346 0
 27630 bd93 C1EA0B   		shrl	$11, %edx
 27631              	.LVL2422:
8347:src/vm3.c     **** PC  =  nPC;
 27632              		.loc 1 8347 0
 27633 bd96 83E01F   		andl	$31, %eax
 27634 bd99 83E21F   		andl	$31, %edx
8349:src/vm3.c     **** 
 27635              		.loc 1 8349 0
 27636 bd9c 83050000 		addl	$4, nPC(%rip)
 27636      000004
 27637              	.LVL2423:
8347:src/vm3.c     **** PC  =  nPC;
 27638              		.loc 1 8347 0
 27639 bda3 8B048500 		movl	RF(,%rax,4), %eax
 27639      000000
 27640 bdaa 42330485 		xorl	RF(,%r8,4), %eax
 27640      00000000 
 27641 bdb2 89049500 		movl	%eax, RF(,%rdx,4)
 27641      000000
GAS LISTING /tmp/cc15eBE3.s 			page 958


8356:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 27642              		.loc 1 8356 0
 27643 bdb9 89D8     		movl	%ebx, %eax
8357:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 27644              		.loc 1 8357 0
 27645 bdbb 89DA     		movl	%ebx, %edx
8356:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 27646              		.loc 1 8356 0
 27647 bdbd C1E810   		shrl	$16, %eax
8355:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27648              		.loc 1 8355 0
 27649 bdc0 C1EB15   		shrl	$21, %ebx
 27650              	.LVL2424:
8357:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 27651              		.loc 1 8357 0
 27652 bdc3 C1EA0B   		shrl	$11, %edx
 27653              	.LVL2425:
8358:src/vm3.c     **** PC  =  nPC;
 27654              		.loc 1 8358 0
 27655 bdc6 83E31F   		andl	$31, %ebx
 27656 bdc9 83E01F   		andl	$31, %eax
 27657 bdcc 83E21F   		andl	$31, %edx
 27658 bdcf 8B048500 		movl	RF(,%rax,4), %eax
 27658      000000
 27659 bdd6 0B049D00 		orl	RF(,%rbx,4), %eax
 27659      000000
 27660 bddd F7D0     		notl	%eax
 27661 bddf 89049500 		movl	%eax, RF(,%rdx,4)
 27661      000000
8359:src/vm3.c     **** nPC  += 4;
 27662              		.loc 1 8359 0
 27663 bde6 8B050000 		movl	nPC(%rip), %eax
 27663      0000
8361:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27664              		.loc 1 8361 0
 27665 bdec 8D5003   		leal	3(%rax), %edx
8360:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 27666              		.loc 1 8360 0
 27667 bdef 8D4804   		leal	4(%rax), %ecx
8359:src/vm3.c     **** nPC  += 4;
 27668              		.loc 1 8359 0
 27669 bdf2 89050000 		movl	%eax, PC(%rip)
 27669      0000
8361:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27670              		.loc 1 8361 0
 27671 bdf8 440FB682 		movzbl	VM_memory(%rdx), %r8d
 27671      00000000 
 27672 be00 89C2     		movl	%eax, %edx
8374:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27673              		.loc 1 8374 0
 27674 be02 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27674      000000
8361:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27675              		.loc 1 8361 0
 27676 be09 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27676      000000
8360:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 959


 27677              		.loc 1 8360 0
 27678 be10 890D0000 		movl	%ecx, nPC(%rip)
 27678      0000
8374:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27679              		.loc 1 8374 0
 27680 be16 8D4805   		leal	5(%rax), %ecx
 27681 be19 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27681      000000
8361:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27682              		.loc 1 8361 0
 27683 be20 C1E218   		sall	$24, %edx
 27684 be23 4109D0   		orl	%edx, %r8d
 27685 be26 8D5001   		leal	1(%rax), %edx
 27686 be29 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27686      000000
 27687 be30 C1E210   		sall	$16, %edx
 27688 be33 4109D0   		orl	%edx, %r8d
 27689 be36 8D5002   		leal	2(%rax), %edx
 27690 be39 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27690      000000
 27691 be40 C1E208   		sall	$8, %edx
 27692 be43 4109D0   		orl	%edx, %r8d
 27693              	.LVL2426:
8362:src/vm3.c     ****   if (op0 == 0x0) {
 27694              		.loc 1 8362 0
 27695 be46 4489C6   		movl	%r8d, %esi
8364:src/vm3.c     ****     op0 = op0 + funct;
 27696              		.loc 1 8364 0
 27697 be49 4488C2   		movb	%r8b, %dl
8362:src/vm3.c     ****   if (op0 == 0x0) {
 27698              		.loc 1 8362 0
 27699 be4c C1EE1A   		shrl	$26, %esi
 27700              	.LVL2427:
8364:src/vm3.c     ****     op0 = op0 + funct;
 27701              		.loc 1 8364 0
 27702 be4f 83E23F   		andl	$63, %edx
 27703 be52 8D7E2B   		leal	43(%rsi), %edi
 27704 be55 4084F6   		testb	%sil, %sil
 27705 be58 0F45D7   		cmovne	%edi, %edx
 27706              	.LVL2428:
8374:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27707              		.loc 1 8374 0
 27708 be5b C1E110   		sall	$16, %ecx
 27709 be5e C1E318   		sall	$24, %ebx
 27710 be61 09CB     		orl	%ecx, %ebx
 27711 be63 8D4807   		leal	7(%rax), %ecx
 27712 be66 83C006   		addl	$6, %eax
 27713 be69 0FB68000 		movzbl	VM_memory(%rax), %eax
 27713      000000
8372:src/vm3.c     **** 
 27714              		.loc 1 8372 0
 27715 be70 0FB6D2   		movzbl	%dl, %edx
8374:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27716              		.loc 1 8374 0
 27717 be73 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27717      000000
8372:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 960


 27718              		.loc 1 8372 0
 27719 be7a 48C1E204 		salq	$4, %rdx
 27720              	.LVL2429:
8374:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27721              		.loc 1 8374 0
 27722 be7e C1E008   		sall	$8, %eax
 27723 be81 09CB     		orl	%ecx, %ebx
 27724 be83 09C3     		orl	%eax, %ebx
 27725              	.LVL2430:
8375:src/vm3.c     ****   if (op1 == 0x0) {
 27726              		.loc 1 8375 0
 27727 be85 89D9     		movl	%ebx, %ecx
8377:src/vm3.c     ****     op1 = op1 + funct;
 27728              		.loc 1 8377 0
 27729 be87 88D8     		movb	%bl, %al
8375:src/vm3.c     ****   if (op1 == 0x0) {
 27730              		.loc 1 8375 0
 27731 be89 C1E91A   		shrl	$26, %ecx
 27732              	.LVL2431:
8377:src/vm3.c     ****     op1 = op1 + funct;
 27733              		.loc 1 8377 0
 27734 be8c 83E03F   		andl	$63, %eax
 27735 be8f 8D712B   		leal	43(%rcx), %esi
 27736 be92 84C9     		testb	%cl, %cl
 27737 be94 0F45C6   		cmovne	%esi, %eax
 27738              	.LVL2432:
8384:src/vm3.c     **** 
 27739              		.loc 1 8384 0
 27740 be97 0FB6C0   		movzbl	%al, %eax
 27741 be9a 48C1E004 		salq	$4, %rax
 27742              	.LVL2433:
 27743 be9e 48038414 		addq	58088(%rsp,%rdx), %rax
 27743      E8E20000 
 27744 bea6 488B08   		movq	(%rax), %rcx
 27745 bea9 E9AA4EFF 		jmp	.L269
 27745      FF
 27746              	.LVL2434:
 27747              	.L99:
8392:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27748              		.loc 1 8392 0
 27749 beae 4489C0   		movl	%r8d, %eax
8395:src/vm3.c     **** PC  =  nPC;
 27750              		.loc 1 8395 0
 27751 beb1 410FBFD0 		movswl	%r8w, %edx
8393:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 27752              		.loc 1 8393 0
 27753 beb5 41C1E810 		shrl	$16, %r8d
 27754              	.LVL2435:
8392:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27755              		.loc 1 8392 0
 27756 beb9 C1E815   		shrl	$21, %eax
 27757              	.LVL2436:
8395:src/vm3.c     **** PC  =  nPC;
 27758              		.loc 1 8395 0
 27759 bebc 4183E01F 		andl	$31, %r8d
 27760 bec0 83E01F   		andl	$31, %eax
 27761 bec3 03148500 		addl	RF(,%rax,4), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 961


 27761      000000
 27762              	.LVL2437:
 27763 beca 8D4203   		leal	3(%rdx), %eax
 27764 becd 89D1     		movl	%edx, %ecx
 27765 becf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27765      000000
 27766 bed6 0FB68000 		movzbl	VM_memory(%rax), %eax
 27766      000000
 27767 bedd C1E118   		sall	$24, %ecx
 27768 bee0 09C8     		orl	%ecx, %eax
 27769 bee2 8D4A01   		leal	1(%rdx), %ecx
 27770 bee5 83C202   		addl	$2, %edx
 27771 bee8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 27771      000000
 27772 beef 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27772      000000
 27773 bef6 C1E208   		sall	$8, %edx
 27774 bef9 C1E110   		sall	$16, %ecx
 27775 befc 09C8     		orl	%ecx, %eax
8403:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
 27776              		.loc 1 8403 0
 27777 befe 89D9     		movl	%ebx, %ecx
8395:src/vm3.c     **** PC  =  nPC;
 27778              		.loc 1 8395 0
 27779 bf00 09D0     		orl	%edx, %eax
8403:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
 27780              		.loc 1 8403 0
 27781 bf02 C1E915   		shrl	$21, %ecx
8395:src/vm3.c     **** PC  =  nPC;
 27782              		.loc 1 8395 0
 27783 bf05 42890485 		movl	%eax, RF(,%r8,4)
 27783      00000000 
8404:src/vm3.c     **** {
 27784              		.loc 1 8404 0
 27785 bf0d 83E11F   		andl	$31, %ecx
8396:src/vm3.c     **** nPC  += 4;
 27786              		.loc 1 8396 0
 27787 bf10 8B050000 		movl	nPC(%rip), %eax
 27787      0000
8404:src/vm3.c     **** {
 27788              		.loc 1 8404 0
 27789 bf16 833C8D00 		cmpl	$0, RF(,%rcx,4)
 27789      00000000 
8397:src/vm3.c     **** 
 27790              		.loc 1 8397 0
 27791 bf1e 8D5004   		leal	4(%rax), %edx
 27792              	.LVL2438:
 27793 bf21 448D4007 		leal	7(%rax), %r8d
 27794 bf25 8D7805   		leal	5(%rax), %edi
 27795 bf28 8D7006   		leal	6(%rax), %esi
 27796 bf2b 4189D1   		movl	%edx, %r9d
8407:src/vm3.c     ****   nPC  += (immediate << 2);
 27797              		.loc 1 8407 0
 27798 bf2e 89150000 		movl	%edx, PC(%rip)
 27798      0000
8404:src/vm3.c     **** {
 27799              		.loc 1 8404 0
GAS LISTING /tmp/cc15eBE3.s 			page 962


 27800 bf34 0F8EB600 		jle	.L1001
 27800      0000
 27801              	.LVL2439:
8408:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 27802              		.loc 1 8408 0
 27803 bf3a 0FBFDB   		movswl	%bx, %ebx
 27804              	.LVL2440:
8409:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27805              		.loc 1 8409 0
 27806 bf3d 450FB680 		movzbl	VM_memory(%r8), %r8d
 27806      00000000 
8408:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 27807              		.loc 1 8408 0
 27808 bf45 8D049A   		leal	(%rdx,%rbx,4), %eax
8409:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27809              		.loc 1 8409 0
 27810 bf48 410FB691 		movzbl	VM_memory(%r9), %edx
 27810      00000000 
8408:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 27811              		.loc 1 8408 0
 27812 bf50 89050000 		movl	%eax, nPC(%rip)
 27812      0000
8409:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27813              		.loc 1 8409 0
 27814 bf56 C1E218   		sall	$24, %edx
 27815 bf59 4109D0   		orl	%edx, %r8d
 27816 bf5c 0FB69700 		movzbl	VM_memory(%rdi), %edx
 27816      000000
 27817 bf63 C1E210   		sall	$16, %edx
 27818 bf66 4109D0   		orl	%edx, %r8d
 27819 bf69 0FB69600 		movzbl	VM_memory(%rsi), %edx
 27819      000000
 27820 bf70 C1E208   		sall	$8, %edx
 27821 bf73 4109D0   		orl	%edx, %r8d
 27822              	.LVL2441:
8410:src/vm3.c     ****   if (op0 == 0x0) {
 27823              		.loc 1 8410 0
 27824 bf76 4489C1   		movl	%r8d, %ecx
8412:src/vm3.c     ****     op0 = op0 + funct;
 27825              		.loc 1 8412 0
 27826 bf79 4488C2   		movb	%r8b, %dl
8410:src/vm3.c     ****   if (op0 == 0x0) {
 27827              		.loc 1 8410 0
 27828 bf7c C1E91A   		shrl	$26, %ecx
 27829              	.LVL2442:
8412:src/vm3.c     ****     op0 = op0 + funct;
 27830              		.loc 1 8412 0
 27831 bf7f 83E23F   		andl	$63, %edx
 27832 bf82 8D712B   		leal	43(%rcx), %esi
 27833 bf85 84C9     		testb	%cl, %cl
8422:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27834              		.loc 1 8422 0
 27835 bf87 8D4803   		leal	3(%rax), %ecx
 27836              	.LVL2443:
 27837 bf8a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27837      000000
 27838              	.LVL2444:
GAS LISTING /tmp/cc15eBE3.s 			page 963


 27839 bf91 89C1     		movl	%eax, %ecx
8412:src/vm3.c     ****     op0 = op0 + funct;
 27840              		.loc 1 8412 0
 27841 bf93 0F45D6   		cmovne	%esi, %edx
 27842              	.LVL2445:
8422:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27843              		.loc 1 8422 0
 27844 bf96 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27844      000000
8420:src/vm3.c     **** 
 27845              		.loc 1 8420 0
 27846 bf9d 0FB6D2   		movzbl	%dl, %edx
 27847 bfa0 48C1E204 		salq	$4, %rdx
 27848              	.LVL2446:
8422:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27849              		.loc 1 8422 0
 27850 bfa4 C1E118   		sall	$24, %ecx
 27851 bfa7 09CB     		orl	%ecx, %ebx
 27852 bfa9 8D4801   		leal	1(%rax), %ecx
 27853 bfac 83C002   		addl	$2, %eax
 27854 bfaf 0FB68000 		movzbl	VM_memory(%rax), %eax
 27854      000000
 27855 bfb6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27855      000000
 27856 bfbd C1E008   		sall	$8, %eax
 27857 bfc0 C1E110   		sall	$16, %ecx
 27858 bfc3 09CB     		orl	%ecx, %ebx
 27859 bfc5 09C3     		orl	%eax, %ebx
 27860              	.LVL2447:
8423:src/vm3.c     ****   if (op1 == 0x0) {
 27861              		.loc 1 8423 0
 27862 bfc7 89D9     		movl	%ebx, %ecx
8425:src/vm3.c     ****     op1 = op1 + funct;
 27863              		.loc 1 8425 0
 27864 bfc9 88D8     		movb	%bl, %al
8423:src/vm3.c     ****   if (op1 == 0x0) {
 27865              		.loc 1 8423 0
 27866 bfcb C1E91A   		shrl	$26, %ecx
 27867              	.LVL2448:
8425:src/vm3.c     ****     op1 = op1 + funct;
 27868              		.loc 1 8425 0
 27869 bfce 83E03F   		andl	$63, %eax
 27870 bfd1 8D712B   		leal	43(%rcx), %esi
 27871 bfd4 84C9     		testb	%cl, %cl
 27872 bfd6 0F45C6   		cmovne	%esi, %eax
 27873              	.LVL2449:
8432:src/vm3.c     **** 
 27874              		.loc 1 8432 0
 27875 bfd9 0FB6C0   		movzbl	%al, %eax
 27876 bfdc 48C1E004 		salq	$4, %rax
 27877              	.LVL2450:
 27878 bfe0 48038414 		addq	58088(%rsp,%rdx), %rax
 27878      E8E20000 
 27879 bfe8 488B08   		movq	(%rax), %rcx
 27880 bfeb E9684DFF 		jmp	.L269
 27880      FF
 27881              	.LVL2451:
GAS LISTING /tmp/cc15eBE3.s 			page 964


 27882              	.L1001:
8441:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27883              		.loc 1 8441 0
 27884 bff0 410FB691 		movzbl	VM_memory(%r9), %edx
 27884      00000000 
 27885 bff8 450FB680 		movzbl	VM_memory(%r8), %r8d
 27885      00000000 
8439:src/vm3.c     **** }
 27886              		.loc 1 8439 0
 27887 c000 8D4808   		leal	8(%rax), %ecx
8454:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27888              		.loc 1 8454 0
 27889 c003 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 27889      000000
 27890              	.LVL2452:
8439:src/vm3.c     **** }
 27891              		.loc 1 8439 0
 27892 c00a 890D0000 		movl	%ecx, nPC(%rip)
 27892      0000
8454:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27893              		.loc 1 8454 0
 27894 c010 8D4809   		leal	9(%rax), %ecx
8441:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27895              		.loc 1 8441 0
 27896 c013 C1E218   		sall	$24, %edx
8454:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27897              		.loc 1 8454 0
 27898 c016 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27898      000000
8441:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 27899              		.loc 1 8441 0
 27900 c01d 4109D0   		orl	%edx, %r8d
 27901 c020 0FB69700 		movzbl	VM_memory(%rdi), %edx
 27901      000000
 27902 c027 C1E210   		sall	$16, %edx
 27903 c02a 4109D0   		orl	%edx, %r8d
 27904 c02d 0FB69600 		movzbl	VM_memory(%rsi), %edx
 27904      000000
 27905 c034 C1E208   		sall	$8, %edx
 27906 c037 4109D0   		orl	%edx, %r8d
 27907              	.LVL2453:
8442:src/vm3.c     ****   if (op0 == 0x0) {
 27908              		.loc 1 8442 0
 27909 c03a 4489C6   		movl	%r8d, %esi
8444:src/vm3.c     ****     op0 = op0 + funct;
 27910              		.loc 1 8444 0
 27911 c03d 4488C2   		movb	%r8b, %dl
8442:src/vm3.c     ****   if (op0 == 0x0) {
 27912              		.loc 1 8442 0
 27913 c040 C1EE1A   		shrl	$26, %esi
 27914              	.LVL2454:
8444:src/vm3.c     ****     op0 = op0 + funct;
 27915              		.loc 1 8444 0
 27916 c043 83E23F   		andl	$63, %edx
 27917 c046 8D7E2B   		leal	43(%rsi), %edi
 27918 c049 4084F6   		testb	%sil, %sil
 27919 c04c 0F45D7   		cmovne	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 965


 27920              	.LVL2455:
8454:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27921              		.loc 1 8454 0
 27922 c04f C1E110   		sall	$16, %ecx
 27923 c052 C1E318   		sall	$24, %ebx
 27924 c055 09CB     		orl	%ecx, %ebx
 27925 c057 8D480B   		leal	11(%rax), %ecx
 27926 c05a 83C00A   		addl	$10, %eax
 27927 c05d 0FB68000 		movzbl	VM_memory(%rax), %eax
 27927      000000
8452:src/vm3.c     **** 
 27928              		.loc 1 8452 0
 27929 c064 0FB6D2   		movzbl	%dl, %edx
8454:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27930              		.loc 1 8454 0
 27931 c067 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 27931      000000
8452:src/vm3.c     **** 
 27932              		.loc 1 8452 0
 27933 c06e 48C1E204 		salq	$4, %rdx
 27934              	.LVL2456:
8454:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 27935              		.loc 1 8454 0
 27936 c072 C1E008   		sall	$8, %eax
 27937 c075 09CB     		orl	%ecx, %ebx
 27938 c077 09C3     		orl	%eax, %ebx
 27939              	.LVL2457:
8455:src/vm3.c     ****   if (op1 == 0x0) {
 27940              		.loc 1 8455 0
 27941 c079 89D9     		movl	%ebx, %ecx
8457:src/vm3.c     ****     op1 = op1 + funct;
 27942              		.loc 1 8457 0
 27943 c07b 88D8     		movb	%bl, %al
8455:src/vm3.c     ****   if (op1 == 0x0) {
 27944              		.loc 1 8455 0
 27945 c07d C1E91A   		shrl	$26, %ecx
 27946              	.LVL2458:
8457:src/vm3.c     ****     op1 = op1 + funct;
 27947              		.loc 1 8457 0
 27948 c080 83E03F   		andl	$63, %eax
 27949 c083 8D712B   		leal	43(%rcx), %esi
 27950 c086 84C9     		testb	%cl, %cl
 27951 c088 0F45C6   		cmovne	%esi, %eax
 27952              	.LVL2459:
8464:src/vm3.c     **** 
 27953              		.loc 1 8464 0
 27954 c08b 0FB6C0   		movzbl	%al, %eax
 27955 c08e 48C1E004 		salq	$4, %rax
 27956              	.LVL2460:
 27957 c092 48038414 		addq	58088(%rsp,%rdx), %rax
 27957      E8E20000 
 27958 c09a 488B08   		movq	(%rax), %rcx
 27959 c09d E9B64CFF 		jmp	.L269
 27959      FF
 27960              	.LVL2461:
 27961              	.L144:
8472:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 966


 27962              		.loc 1 8472 0
 27963 c0a2 4489C2   		movl	%r8d, %edx
8473:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 27964              		.loc 1 8473 0
 27965 c0a5 4489C0   		movl	%r8d, %eax
8475:src/vm3.c     **** PC  =  nPC;
 27966              		.loc 1 8475 0
 27967 c0a8 450FBFC0 		movswl	%r8w, %r8d
 27968              	.LVL2462:
8472:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 27969              		.loc 1 8472 0
 27970 c0ac C1EA15   		shrl	$21, %edx
8473:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 27971              		.loc 1 8473 0
 27972 c0af C1E810   		shrl	$16, %eax
 27973              	.LVL2463:
8483:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27974              		.loc 1 8483 0
 27975 c0b2 89DE     		movl	%ebx, %esi
8475:src/vm3.c     **** PC  =  nPC;
 27976              		.loc 1 8475 0
 27977 c0b4 83E21F   		andl	$31, %edx
8484:src/vm3.c     **** if (RF[rs] == RF[rt])
 27978              		.loc 1 8484 0
 27979 c0b7 89D9     		movl	%ebx, %ecx
8475:src/vm3.c     **** PC  =  nPC;
 27980              		.loc 1 8475 0
 27981 c0b9 83E01F   		andl	$31, %eax
 27982 c0bc 44030495 		addl	RF(,%rdx,4), %r8d
 27982      00000000 
 27983              	.LVL2464:
8483:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 27984              		.loc 1 8483 0
 27985 c0c4 C1EE15   		shrl	$21, %esi
8484:src/vm3.c     **** if (RF[rs] == RF[rt])
 27986              		.loc 1 8484 0
 27987 c0c7 C1E910   		shrl	$16, %ecx
8485:src/vm3.c     **** {
 27988              		.loc 1 8485 0
 27989 c0ca 83E61F   		andl	$31, %esi
 27990 c0cd 83E11F   		andl	$31, %ecx
8475:src/vm3.c     **** PC  =  nPC;
 27991              		.loc 1 8475 0
 27992 c0d0 44890485 		movl	%r8d, RF(,%rax,4)
 27992      00000000 
8476:src/vm3.c     **** nPC  += 4;
 27993              		.loc 1 8476 0
 27994 c0d8 8B050000 		movl	nPC(%rip), %eax
 27994      0000
8485:src/vm3.c     **** {
 27995              		.loc 1 8485 0
 27996 c0de 8B3C8D00 		movl	RF(,%rcx,4), %edi
 27996      000000
 27997 c0e5 393CB500 		cmpl	%edi, RF(,%rsi,4)
 27997      000000
8477:src/vm3.c     **** 
 27998              		.loc 1 8477 0
GAS LISTING /tmp/cc15eBE3.s 			page 967


 27999 c0ec 8D5004   		leal	4(%rax), %edx
 28000              	.LVL2465:
 28001 c0ef 448D4007 		leal	7(%rax), %r8d
 28002 c0f3 8D7805   		leal	5(%rax), %edi
 28003 c0f6 8D7006   		leal	6(%rax), %esi
 28004 c0f9 4189D1   		movl	%edx, %r9d
8488:src/vm3.c     ****   nPC  += (immediate << 2);
 28005              		.loc 1 8488 0
 28006 c0fc 89150000 		movl	%edx, PC(%rip)
 28006      0000
8485:src/vm3.c     **** {
 28007              		.loc 1 8485 0
 28008 c102 0F85B600 		jne	.L1010
 28008      0000
 28009              	.LVL2466:
8489:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28010              		.loc 1 8489 0
 28011 c108 0FBFDB   		movswl	%bx, %ebx
 28012              	.LVL2467:
8490:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28013              		.loc 1 8490 0
 28014 c10b 450FB680 		movzbl	VM_memory(%r8), %r8d
 28014      00000000 
8489:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28015              		.loc 1 8489 0
 28016 c113 8D049A   		leal	(%rdx,%rbx,4), %eax
8490:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28017              		.loc 1 8490 0
 28018 c116 410FB691 		movzbl	VM_memory(%r9), %edx
 28018      00000000 
8489:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28019              		.loc 1 8489 0
 28020 c11e 89050000 		movl	%eax, nPC(%rip)
 28020      0000
8490:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28021              		.loc 1 8490 0
 28022 c124 C1E218   		sall	$24, %edx
 28023 c127 4109D0   		orl	%edx, %r8d
 28024 c12a 0FB69700 		movzbl	VM_memory(%rdi), %edx
 28024      000000
 28025 c131 C1E210   		sall	$16, %edx
 28026 c134 4109D0   		orl	%edx, %r8d
 28027 c137 0FB69600 		movzbl	VM_memory(%rsi), %edx
 28027      000000
 28028 c13e C1E208   		sall	$8, %edx
 28029 c141 4109D0   		orl	%edx, %r8d
 28030              	.LVL2468:
8491:src/vm3.c     ****   if (op0 == 0x0) {
 28031              		.loc 1 8491 0
 28032 c144 4489C1   		movl	%r8d, %ecx
8493:src/vm3.c     ****     op0 = op0 + funct;
 28033              		.loc 1 8493 0
 28034 c147 4488C2   		movb	%r8b, %dl
8491:src/vm3.c     ****   if (op0 == 0x0) {
 28035              		.loc 1 8491 0
 28036 c14a C1E91A   		shrl	$26, %ecx
 28037              	.LVL2469:
GAS LISTING /tmp/cc15eBE3.s 			page 968


8493:src/vm3.c     ****     op0 = op0 + funct;
 28038              		.loc 1 8493 0
 28039 c14d 83E23F   		andl	$63, %edx
 28040 c150 8D712B   		leal	43(%rcx), %esi
 28041 c153 84C9     		testb	%cl, %cl
8503:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28042              		.loc 1 8503 0
 28043 c155 8D4803   		leal	3(%rax), %ecx
 28044              	.LVL2470:
 28045 c158 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28045      000000
 28046              	.LVL2471:
 28047 c15f 89C1     		movl	%eax, %ecx
8493:src/vm3.c     ****     op0 = op0 + funct;
 28048              		.loc 1 8493 0
 28049 c161 0F45D6   		cmovne	%esi, %edx
 28050              	.LVL2472:
8503:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28051              		.loc 1 8503 0
 28052 c164 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28052      000000
8501:src/vm3.c     **** 
 28053              		.loc 1 8501 0
 28054 c16b 0FB6D2   		movzbl	%dl, %edx
 28055 c16e 48C1E204 		salq	$4, %rdx
 28056              	.LVL2473:
8503:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28057              		.loc 1 8503 0
 28058 c172 C1E118   		sall	$24, %ecx
 28059 c175 09CB     		orl	%ecx, %ebx
 28060 c177 8D4801   		leal	1(%rax), %ecx
 28061 c17a 83C002   		addl	$2, %eax
 28062 c17d 0FB68000 		movzbl	VM_memory(%rax), %eax
 28062      000000
 28063 c184 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28063      000000
 28064 c18b C1E008   		sall	$8, %eax
 28065 c18e C1E110   		sall	$16, %ecx
 28066 c191 09CB     		orl	%ecx, %ebx
 28067 c193 09C3     		orl	%eax, %ebx
 28068              	.LVL2474:
8504:src/vm3.c     ****   if (op1 == 0x0) {
 28069              		.loc 1 8504 0
 28070 c195 89D9     		movl	%ebx, %ecx
8506:src/vm3.c     ****     op1 = op1 + funct;
 28071              		.loc 1 8506 0
 28072 c197 88D8     		movb	%bl, %al
8504:src/vm3.c     ****   if (op1 == 0x0) {
 28073              		.loc 1 8504 0
 28074 c199 C1E91A   		shrl	$26, %ecx
 28075              	.LVL2475:
8506:src/vm3.c     ****     op1 = op1 + funct;
 28076              		.loc 1 8506 0
 28077 c19c 83E03F   		andl	$63, %eax
 28078 c19f 8D712B   		leal	43(%rcx), %esi
 28079 c1a2 84C9     		testb	%cl, %cl
 28080 c1a4 0F45C6   		cmovne	%esi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 969


 28081              	.LVL2476:
8513:src/vm3.c     **** 
 28082              		.loc 1 8513 0
 28083 c1a7 0FB6C0   		movzbl	%al, %eax
 28084 c1aa 48C1E004 		salq	$4, %rax
 28085              	.LVL2477:
 28086 c1ae 48038414 		addq	58088(%rsp,%rdx), %rax
 28086      E8E20000 
 28087 c1b6 488B08   		movq	(%rax), %rcx
 28088 c1b9 E99A4BFF 		jmp	.L269
 28088      FF
 28089              	.LVL2478:
 28090              	.L1010:
8522:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28091              		.loc 1 8522 0
 28092 c1be 410FB691 		movzbl	VM_memory(%r9), %edx
 28092      00000000 
 28093 c1c6 450FB680 		movzbl	VM_memory(%r8), %r8d
 28093      00000000 
8520:src/vm3.c     **** }
 28094              		.loc 1 8520 0
 28095 c1ce 8D4808   		leal	8(%rax), %ecx
8535:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28096              		.loc 1 8535 0
 28097 c1d1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28097      000000
 28098              	.LVL2479:
8520:src/vm3.c     **** }
 28099              		.loc 1 8520 0
 28100 c1d8 890D0000 		movl	%ecx, nPC(%rip)
 28100      0000
8535:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28101              		.loc 1 8535 0
 28102 c1de 8D4809   		leal	9(%rax), %ecx
8522:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28103              		.loc 1 8522 0
 28104 c1e1 C1E218   		sall	$24, %edx
8535:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28105              		.loc 1 8535 0
 28106 c1e4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28106      000000
8522:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28107              		.loc 1 8522 0
 28108 c1eb 4109D0   		orl	%edx, %r8d
 28109 c1ee 0FB69700 		movzbl	VM_memory(%rdi), %edx
 28109      000000
 28110 c1f5 C1E210   		sall	$16, %edx
 28111 c1f8 4109D0   		orl	%edx, %r8d
 28112 c1fb 0FB69600 		movzbl	VM_memory(%rsi), %edx
 28112      000000
 28113 c202 C1E208   		sall	$8, %edx
 28114 c205 4109D0   		orl	%edx, %r8d
 28115              	.LVL2480:
8523:src/vm3.c     ****   if (op0 == 0x0) {
 28116              		.loc 1 8523 0
 28117 c208 4489C6   		movl	%r8d, %esi
8525:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 970


 28118              		.loc 1 8525 0
 28119 c20b 4488C2   		movb	%r8b, %dl
8523:src/vm3.c     ****   if (op0 == 0x0) {
 28120              		.loc 1 8523 0
 28121 c20e C1EE1A   		shrl	$26, %esi
 28122              	.LVL2481:
8525:src/vm3.c     ****     op0 = op0 + funct;
 28123              		.loc 1 8525 0
 28124 c211 83E23F   		andl	$63, %edx
 28125 c214 8D7E2B   		leal	43(%rsi), %edi
 28126 c217 4084F6   		testb	%sil, %sil
 28127 c21a 0F45D7   		cmovne	%edi, %edx
 28128              	.LVL2482:
8535:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28129              		.loc 1 8535 0
 28130 c21d C1E110   		sall	$16, %ecx
 28131 c220 C1E318   		sall	$24, %ebx
 28132 c223 09CB     		orl	%ecx, %ebx
 28133 c225 8D480B   		leal	11(%rax), %ecx
 28134 c228 83C00A   		addl	$10, %eax
 28135 c22b 0FB68000 		movzbl	VM_memory(%rax), %eax
 28135      000000
8533:src/vm3.c     **** 
 28136              		.loc 1 8533 0
 28137 c232 0FB6D2   		movzbl	%dl, %edx
8535:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28138              		.loc 1 8535 0
 28139 c235 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28139      000000
8533:src/vm3.c     **** 
 28140              		.loc 1 8533 0
 28141 c23c 48C1E204 		salq	$4, %rdx
 28142              	.LVL2483:
8535:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28143              		.loc 1 8535 0
 28144 c240 C1E008   		sall	$8, %eax
 28145 c243 09CB     		orl	%ecx, %ebx
 28146 c245 09C3     		orl	%eax, %ebx
 28147              	.LVL2484:
8536:src/vm3.c     ****   if (op1 == 0x0) {
 28148              		.loc 1 8536 0
 28149 c247 89D9     		movl	%ebx, %ecx
8538:src/vm3.c     ****     op1 = op1 + funct;
 28150              		.loc 1 8538 0
 28151 c249 88D8     		movb	%bl, %al
8536:src/vm3.c     ****   if (op1 == 0x0) {
 28152              		.loc 1 8536 0
 28153 c24b C1E91A   		shrl	$26, %ecx
 28154              	.LVL2485:
8538:src/vm3.c     ****     op1 = op1 + funct;
 28155              		.loc 1 8538 0
 28156 c24e 83E03F   		andl	$63, %eax
 28157 c251 8D712B   		leal	43(%rcx), %esi
 28158 c254 84C9     		testb	%cl, %cl
 28159 c256 0F45C6   		cmovne	%esi, %eax
 28160              	.LVL2486:
8545:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 971


 28161              		.loc 1 8545 0
 28162 c259 0FB6C0   		movzbl	%al, %eax
 28163 c25c 48C1E004 		salq	$4, %rax
 28164              	.LVL2487:
 28165 c260 48038414 		addq	58088(%rsp,%rdx), %rax
 28165      E8E20000 
 28166 c268 488B08   		movq	(%rax), %rcx
 28167 c26b E9E84AFF 		jmp	.L269
 28167      FF
 28168              	.LVL2488:
 28169              	.L114:
8553:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28170              		.loc 1 8553 0
 28171 c270 4489C2   		movl	%r8d, %edx
8555:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 28172              		.loc 1 8555 0
 28173 c273 4489C0   		movl	%r8d, %eax
8554:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 28174              		.loc 1 8554 0
 28175 c276 41C1E810 		shrl	$16, %r8d
 28176              	.LVL2489:
8553:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28177              		.loc 1 8553 0
 28178 c27a C1EA15   		shrl	$21, %edx
8556:src/vm3.c     **** PC  =  nPC;
 28179              		.loc 1 8556 0
 28180 c27d 4183E01F 		andl	$31, %r8d
8555:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 28181              		.loc 1 8555 0
 28182 c281 C1E80B   		shrl	$11, %eax
 28183              	.LVL2490:
8556:src/vm3.c     **** PC  =  nPC;
 28184              		.loc 1 8556 0
 28185 c284 83E21F   		andl	$31, %edx
 28186 c287 428B3C85 		movl	RF(,%r8,4), %edi
 28186      00000000 
 28187 c28f 83E01F   		andl	$31, %eax
 28188 c292 393C9500 		cmpl	%edi, RF(,%rdx,4)
 28188      000000
8564:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 28189              		.loc 1 8564 0
 28190 c299 89DE     		movl	%ebx, %esi
8565:src/vm3.c     **** if (RF[rs] != RF[rt])
 28191              		.loc 1 8565 0
 28192 c29b 89D9     		movl	%ebx, %ecx
8556:src/vm3.c     **** PC  =  nPC;
 28193              		.loc 1 8556 0
 28194 c29d 0F92C2   		setb	%dl
8564:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 28195              		.loc 1 8564 0
 28196 c2a0 C1EE15   		shrl	$21, %esi
8565:src/vm3.c     **** if (RF[rs] != RF[rt])
 28197              		.loc 1 8565 0
 28198 c2a3 C1E910   		shrl	$16, %ecx
8556:src/vm3.c     **** PC  =  nPC;
 28199              		.loc 1 8556 0
 28200 c2a6 0FB6D2   		movzbl	%dl, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 972


8566:src/vm3.c     **** {
 28201              		.loc 1 8566 0
 28202 c2a9 83E61F   		andl	$31, %esi
 28203 c2ac 83E11F   		andl	$31, %ecx
8556:src/vm3.c     **** PC  =  nPC;
 28204              		.loc 1 8556 0
 28205 c2af 89148500 		movl	%edx, RF(,%rax,4)
 28205      000000
8557:src/vm3.c     **** nPC  += 4;
 28206              		.loc 1 8557 0
 28207 c2b6 8B050000 		movl	nPC(%rip), %eax
 28207      0000
8566:src/vm3.c     **** {
 28208              		.loc 1 8566 0
 28209 c2bc 8B3C8D00 		movl	RF(,%rcx,4), %edi
 28209      000000
 28210 c2c3 393CB500 		cmpl	%edi, RF(,%rsi,4)
 28210      000000
8558:src/vm3.c     **** 
 28211              		.loc 1 8558 0
 28212 c2ca 8D5004   		leal	4(%rax), %edx
 28213              	.LVL2491:
 28214 c2cd 448D4007 		leal	7(%rax), %r8d
 28215 c2d1 8D7805   		leal	5(%rax), %edi
 28216 c2d4 8D7006   		leal	6(%rax), %esi
 28217 c2d7 4189D1   		movl	%edx, %r9d
8569:src/vm3.c     ****   nPC  += (immediate << 2);
 28218              		.loc 1 8569 0
 28219 c2da 89150000 		movl	%edx, PC(%rip)
 28219      0000
8566:src/vm3.c     **** {
 28220              		.loc 1 8566 0
 28221 c2e0 0F84B600 		je	.L1019
 28221      0000
 28222              	.LVL2492:
8570:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28223              		.loc 1 8570 0
 28224 c2e6 0FBFDB   		movswl	%bx, %ebx
 28225              	.LVL2493:
8571:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28226              		.loc 1 8571 0
 28227 c2e9 450FB680 		movzbl	VM_memory(%r8), %r8d
 28227      00000000 
8570:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28228              		.loc 1 8570 0
 28229 c2f1 8D049A   		leal	(%rdx,%rbx,4), %eax
8571:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28230              		.loc 1 8571 0
 28231 c2f4 410FB691 		movzbl	VM_memory(%r9), %edx
 28231      00000000 
8570:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28232              		.loc 1 8570 0
 28233 c2fc 89050000 		movl	%eax, nPC(%rip)
 28233      0000
8571:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28234              		.loc 1 8571 0
 28235 c302 C1E218   		sall	$24, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 973


 28236 c305 4109D0   		orl	%edx, %r8d
 28237 c308 0FB69700 		movzbl	VM_memory(%rdi), %edx
 28237      000000
 28238 c30f C1E210   		sall	$16, %edx
 28239 c312 4109D0   		orl	%edx, %r8d
 28240 c315 0FB69600 		movzbl	VM_memory(%rsi), %edx
 28240      000000
 28241 c31c C1E208   		sall	$8, %edx
 28242 c31f 4109D0   		orl	%edx, %r8d
 28243              	.LVL2494:
8572:src/vm3.c     ****   if (op0 == 0x0) {
 28244              		.loc 1 8572 0
 28245 c322 4489C1   		movl	%r8d, %ecx
8574:src/vm3.c     ****     op0 = op0 + funct;
 28246              		.loc 1 8574 0
 28247 c325 4488C2   		movb	%r8b, %dl
8572:src/vm3.c     ****   if (op0 == 0x0) {
 28248              		.loc 1 8572 0
 28249 c328 C1E91A   		shrl	$26, %ecx
 28250              	.LVL2495:
8574:src/vm3.c     ****     op0 = op0 + funct;
 28251              		.loc 1 8574 0
 28252 c32b 83E23F   		andl	$63, %edx
 28253 c32e 8D712B   		leal	43(%rcx), %esi
 28254 c331 84C9     		testb	%cl, %cl
8584:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28255              		.loc 1 8584 0
 28256 c333 8D4803   		leal	3(%rax), %ecx
 28257              	.LVL2496:
 28258 c336 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28258      000000
 28259              	.LVL2497:
 28260 c33d 89C1     		movl	%eax, %ecx
8574:src/vm3.c     ****     op0 = op0 + funct;
 28261              		.loc 1 8574 0
 28262 c33f 0F45D6   		cmovne	%esi, %edx
 28263              	.LVL2498:
8584:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28264              		.loc 1 8584 0
 28265 c342 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28265      000000
8582:src/vm3.c     **** 
 28266              		.loc 1 8582 0
 28267 c349 0FB6D2   		movzbl	%dl, %edx
 28268 c34c 48C1E204 		salq	$4, %rdx
 28269              	.LVL2499:
8584:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28270              		.loc 1 8584 0
 28271 c350 C1E118   		sall	$24, %ecx
 28272 c353 09CB     		orl	%ecx, %ebx
 28273 c355 8D4801   		leal	1(%rax), %ecx
 28274 c358 83C002   		addl	$2, %eax
 28275 c35b 0FB68000 		movzbl	VM_memory(%rax), %eax
 28275      000000
 28276 c362 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28276      000000
 28277 c369 C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 974


 28278 c36c C1E110   		sall	$16, %ecx
 28279 c36f 09CB     		orl	%ecx, %ebx
 28280 c371 09C3     		orl	%eax, %ebx
 28281              	.LVL2500:
8585:src/vm3.c     ****   if (op1 == 0x0) {
 28282              		.loc 1 8585 0
 28283 c373 89D9     		movl	%ebx, %ecx
8587:src/vm3.c     ****     op1 = op1 + funct;
 28284              		.loc 1 8587 0
 28285 c375 88D8     		movb	%bl, %al
8585:src/vm3.c     ****   if (op1 == 0x0) {
 28286              		.loc 1 8585 0
 28287 c377 C1E91A   		shrl	$26, %ecx
 28288              	.LVL2501:
8587:src/vm3.c     ****     op1 = op1 + funct;
 28289              		.loc 1 8587 0
 28290 c37a 83E03F   		andl	$63, %eax
 28291 c37d 8D712B   		leal	43(%rcx), %esi
 28292 c380 84C9     		testb	%cl, %cl
 28293 c382 0F45C6   		cmovne	%esi, %eax
 28294              	.LVL2502:
8594:src/vm3.c     **** 
 28295              		.loc 1 8594 0
 28296 c385 0FB6C0   		movzbl	%al, %eax
 28297 c388 48C1E004 		salq	$4, %rax
 28298              	.LVL2503:
 28299 c38c 48038414 		addq	58088(%rsp,%rdx), %rax
 28299      E8E20000 
 28300 c394 488B08   		movq	(%rax), %rcx
 28301 c397 E9BC49FF 		jmp	.L269
 28301      FF
 28302              	.LVL2504:
 28303              	.L1019:
8603:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28304              		.loc 1 8603 0
 28305 c39c 410FB691 		movzbl	VM_memory(%r9), %edx
 28305      00000000 
 28306 c3a4 450FB680 		movzbl	VM_memory(%r8), %r8d
 28306      00000000 
8601:src/vm3.c     **** }
 28307              		.loc 1 8601 0
 28308 c3ac 8D4808   		leal	8(%rax), %ecx
8616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28309              		.loc 1 8616 0
 28310 c3af 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28310      000000
 28311              	.LVL2505:
8601:src/vm3.c     **** }
 28312              		.loc 1 8601 0
 28313 c3b6 890D0000 		movl	%ecx, nPC(%rip)
 28313      0000
8616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28314              		.loc 1 8616 0
 28315 c3bc 8D4809   		leal	9(%rax), %ecx
8603:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28316              		.loc 1 8603 0
 28317 c3bf C1E218   		sall	$24, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 975


8616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28318              		.loc 1 8616 0
 28319 c3c2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28319      000000
8603:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28320              		.loc 1 8603 0
 28321 c3c9 4109D0   		orl	%edx, %r8d
 28322 c3cc 0FB69700 		movzbl	VM_memory(%rdi), %edx
 28322      000000
 28323 c3d3 C1E210   		sall	$16, %edx
 28324 c3d6 4109D0   		orl	%edx, %r8d
 28325 c3d9 0FB69600 		movzbl	VM_memory(%rsi), %edx
 28325      000000
 28326 c3e0 C1E208   		sall	$8, %edx
 28327 c3e3 4109D0   		orl	%edx, %r8d
 28328              	.LVL2506:
8604:src/vm3.c     ****   if (op0 == 0x0) {
 28329              		.loc 1 8604 0
 28330 c3e6 4489C6   		movl	%r8d, %esi
8606:src/vm3.c     ****     op0 = op0 + funct;
 28331              		.loc 1 8606 0
 28332 c3e9 4488C2   		movb	%r8b, %dl
8604:src/vm3.c     ****   if (op0 == 0x0) {
 28333              		.loc 1 8604 0
 28334 c3ec C1EE1A   		shrl	$26, %esi
 28335              	.LVL2507:
8606:src/vm3.c     ****     op0 = op0 + funct;
 28336              		.loc 1 8606 0
 28337 c3ef 83E23F   		andl	$63, %edx
 28338 c3f2 8D7E2B   		leal	43(%rsi), %edi
 28339 c3f5 4084F6   		testb	%sil, %sil
 28340 c3f8 0F45D7   		cmovne	%edi, %edx
 28341              	.LVL2508:
8616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28342              		.loc 1 8616 0
 28343 c3fb C1E110   		sall	$16, %ecx
 28344 c3fe C1E318   		sall	$24, %ebx
 28345 c401 09CB     		orl	%ecx, %ebx
 28346 c403 8D480B   		leal	11(%rax), %ecx
 28347 c406 83C00A   		addl	$10, %eax
 28348 c409 0FB68000 		movzbl	VM_memory(%rax), %eax
 28348      000000
8614:src/vm3.c     **** 
 28349              		.loc 1 8614 0
 28350 c410 0FB6D2   		movzbl	%dl, %edx
8616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28351              		.loc 1 8616 0
 28352 c413 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28352      000000
8614:src/vm3.c     **** 
 28353              		.loc 1 8614 0
 28354 c41a 48C1E204 		salq	$4, %rdx
 28355              	.LVL2509:
8616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28356              		.loc 1 8616 0
 28357 c41e C1E008   		sall	$8, %eax
 28358 c421 09CB     		orl	%ecx, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 976


 28359 c423 09C3     		orl	%eax, %ebx
 28360              	.LVL2510:
8617:src/vm3.c     ****   if (op1 == 0x0) {
 28361              		.loc 1 8617 0
 28362 c425 89D9     		movl	%ebx, %ecx
8619:src/vm3.c     ****     op1 = op1 + funct;
 28363              		.loc 1 8619 0
 28364 c427 88D8     		movb	%bl, %al
8617:src/vm3.c     ****   if (op1 == 0x0) {
 28365              		.loc 1 8617 0
 28366 c429 C1E91A   		shrl	$26, %ecx
 28367              	.LVL2511:
8619:src/vm3.c     ****     op1 = op1 + funct;
 28368              		.loc 1 8619 0
 28369 c42c 83E03F   		andl	$63, %eax
 28370 c42f 8D712B   		leal	43(%rcx), %esi
 28371 c432 84C9     		testb	%cl, %cl
 28372 c434 0F45C6   		cmovne	%esi, %eax
 28373              	.LVL2512:
8626:src/vm3.c     **** 
 28374              		.loc 1 8626 0
 28375 c437 0FB6C0   		movzbl	%al, %eax
 28376 c43a 48C1E004 		salq	$4, %rax
 28377              	.LVL2513:
 28378 c43e 48038414 		addq	58088(%rsp,%rdx), %rax
 28378      E8E20000 
 28379 c446 488B08   		movq	(%rax), %rcx
 28380 c449 E90A49FF 		jmp	.L269
 28380      FF
 28381              	.LVL2514:
 28382              	.L182:
8634:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28383              		.loc 1 8634 0
 28384 c44e 4489C0   		movl	%r8d, %eax
8637:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 28385              		.loc 1 8637 0
 28386 c451 410FBFC8 		movswl	%r8w, %ecx
8635:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 28387              		.loc 1 8635 0
 28388 c455 41C1E810 		shrl	$16, %r8d
 28389              	.LVL2515:
8634:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28390              		.loc 1 8634 0
 28391 c459 C1E815   		shrl	$21, %eax
 28392              	.LVL2516:
8637:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 28393              		.loc 1 8637 0
 28394 c45c 4183E01F 		andl	$31, %r8d
 28395 c460 83E01F   		andl	$31, %eax
 28396 c463 8B148500 		movl	RF(,%rax,4), %edx
 28396      000000
 28397 c46a 428B0485 		movl	RF(,%r8,4), %eax
 28397      00000000 
 28398 c472 8D3411   		leal	(%rcx,%rdx), %esi
 28399 c475 89C7     		movl	%eax, %edi
 28400 c477 C1EF18   		shrl	$24, %edi
 28401 c47a 4088BE00 		movb	%dil, VM_memory(%rsi)
GAS LISTING /tmp/cc15eBE3.s 			page 977


 28401      000000
8638:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 28402              		.loc 1 8638 0
 28403 c481 8D741101 		leal	1(%rcx,%rdx), %esi
 28404 c485 89C7     		movl	%eax, %edi
 28405 c487 C1EF10   		shrl	$16, %edi
 28406 c48a 4088BE00 		movb	%dil, VM_memory(%rsi)
 28406      000000
8639:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 28407              		.loc 1 8639 0
 28408 c491 8D741102 		leal	2(%rcx,%rdx), %esi
 28409 c495 0FB6FC   		movzbl	%ah, %edi
8640:src/vm3.c     **** PC  =  nPC;
 28410              		.loc 1 8640 0
 28411 c498 8D541103 		leal	3(%rcx,%rdx), %edx
8649:src/vm3.c     **** if (RF[rs] != RF[rt])
 28412              		.loc 1 8649 0
 28413 c49c 89D9     		movl	%ebx, %ecx
 28414              	.LVL2517:
8639:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 28415              		.loc 1 8639 0
 28416 c49e 4088BE00 		movb	%dil, VM_memory(%rsi)
 28416      000000
8648:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 28417              		.loc 1 8648 0
 28418 c4a5 89DE     		movl	%ebx, %esi
8649:src/vm3.c     **** if (RF[rs] != RF[rt])
 28419              		.loc 1 8649 0
 28420 c4a7 C1E910   		shrl	$16, %ecx
8648:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 28421              		.loc 1 8648 0
 28422 c4aa C1EE15   		shrl	$21, %esi
8640:src/vm3.c     **** PC  =  nPC;
 28423              		.loc 1 8640 0
 28424 c4ad 88820000 		movb	%al, VM_memory(%rdx)
 28424      0000
8650:src/vm3.c     **** {
 28425              		.loc 1 8650 0
 28426 c4b3 83E11F   		andl	$31, %ecx
8641:src/vm3.c     **** nPC  += 4;
 28427              		.loc 1 8641 0
 28428 c4b6 8B050000 		movl	nPC(%rip), %eax
 28428      0000
8650:src/vm3.c     **** {
 28429              		.loc 1 8650 0
 28430 c4bc 83E61F   		andl	$31, %esi
 28431 c4bf 8B3C8D00 		movl	RF(,%rcx,4), %edi
 28431      000000
 28432 c4c6 393CB500 		cmpl	%edi, RF(,%rsi,4)
 28432      000000
8642:src/vm3.c     **** 
 28433              		.loc 1 8642 0
 28434 c4cd 8D5004   		leal	4(%rax), %edx
 28435              	.LVL2518:
 28436 c4d0 448D4007 		leal	7(%rax), %r8d
 28437 c4d4 8D7805   		leal	5(%rax), %edi
 28438 c4d7 8D7006   		leal	6(%rax), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 978


 28439 c4da 4189D1   		movl	%edx, %r9d
8653:src/vm3.c     ****   nPC  += (immediate << 2);
 28440              		.loc 1 8653 0
 28441 c4dd 89150000 		movl	%edx, PC(%rip)
 28441      0000
8650:src/vm3.c     **** {
 28442              		.loc 1 8650 0
 28443 c4e3 0F84B600 		je	.L1028
 28443      0000
 28444              	.LVL2519:
8654:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28445              		.loc 1 8654 0
 28446 c4e9 0FBFDB   		movswl	%bx, %ebx
 28447              	.LVL2520:
8655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28448              		.loc 1 8655 0
 28449 c4ec 450FB680 		movzbl	VM_memory(%r8), %r8d
 28449      00000000 
8654:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28450              		.loc 1 8654 0
 28451 c4f4 8D049A   		leal	(%rdx,%rbx,4), %eax
8655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28452              		.loc 1 8655 0
 28453 c4f7 410FB691 		movzbl	VM_memory(%r9), %edx
 28453      00000000 
8654:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 28454              		.loc 1 8654 0
 28455 c4ff 89050000 		movl	%eax, nPC(%rip)
 28455      0000
8655:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28456              		.loc 1 8655 0
 28457 c505 C1E218   		sall	$24, %edx
 28458 c508 4109D0   		orl	%edx, %r8d
 28459 c50b 0FB69700 		movzbl	VM_memory(%rdi), %edx
 28459      000000
 28460 c512 C1E210   		sall	$16, %edx
 28461 c515 4109D0   		orl	%edx, %r8d
 28462 c518 0FB69600 		movzbl	VM_memory(%rsi), %edx
 28462      000000
 28463 c51f C1E208   		sall	$8, %edx
 28464 c522 4109D0   		orl	%edx, %r8d
 28465              	.LVL2521:
8656:src/vm3.c     ****   if (op0 == 0x0) {
 28466              		.loc 1 8656 0
 28467 c525 4489C1   		movl	%r8d, %ecx
8658:src/vm3.c     ****     op0 = op0 + funct;
 28468              		.loc 1 8658 0
 28469 c528 4488C2   		movb	%r8b, %dl
8656:src/vm3.c     ****   if (op0 == 0x0) {
 28470              		.loc 1 8656 0
 28471 c52b C1E91A   		shrl	$26, %ecx
 28472              	.LVL2522:
8658:src/vm3.c     ****     op0 = op0 + funct;
 28473              		.loc 1 8658 0
 28474 c52e 83E23F   		andl	$63, %edx
 28475 c531 8D712B   		leal	43(%rcx), %esi
 28476 c534 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 979


8668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28477              		.loc 1 8668 0
 28478 c536 8D4803   		leal	3(%rax), %ecx
 28479              	.LVL2523:
 28480 c539 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28480      000000
 28481              	.LVL2524:
 28482 c540 89C1     		movl	%eax, %ecx
8658:src/vm3.c     ****     op0 = op0 + funct;
 28483              		.loc 1 8658 0
 28484 c542 0F45D6   		cmovne	%esi, %edx
 28485              	.LVL2525:
8668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28486              		.loc 1 8668 0
 28487 c545 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28487      000000
8666:src/vm3.c     **** 
 28488              		.loc 1 8666 0
 28489 c54c 0FB6D2   		movzbl	%dl, %edx
 28490 c54f 48C1E204 		salq	$4, %rdx
 28491              	.LVL2526:
8668:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28492              		.loc 1 8668 0
 28493 c553 C1E118   		sall	$24, %ecx
 28494 c556 09CB     		orl	%ecx, %ebx
 28495 c558 8D4801   		leal	1(%rax), %ecx
 28496 c55b 83C002   		addl	$2, %eax
 28497 c55e 0FB68000 		movzbl	VM_memory(%rax), %eax
 28497      000000
 28498 c565 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28498      000000
 28499 c56c C1E008   		sall	$8, %eax
 28500 c56f C1E110   		sall	$16, %ecx
 28501 c572 09CB     		orl	%ecx, %ebx
 28502 c574 09C3     		orl	%eax, %ebx
 28503              	.LVL2527:
8669:src/vm3.c     ****   if (op1 == 0x0) {
 28504              		.loc 1 8669 0
 28505 c576 89D9     		movl	%ebx, %ecx
8671:src/vm3.c     ****     op1 = op1 + funct;
 28506              		.loc 1 8671 0
 28507 c578 88D8     		movb	%bl, %al
8669:src/vm3.c     ****   if (op1 == 0x0) {
 28508              		.loc 1 8669 0
 28509 c57a C1E91A   		shrl	$26, %ecx
 28510              	.LVL2528:
8671:src/vm3.c     ****     op1 = op1 + funct;
 28511              		.loc 1 8671 0
 28512 c57d 83E03F   		andl	$63, %eax
 28513 c580 8D712B   		leal	43(%rcx), %esi
 28514 c583 84C9     		testb	%cl, %cl
 28515 c585 0F45C6   		cmovne	%esi, %eax
 28516              	.LVL2529:
8678:src/vm3.c     **** 
 28517              		.loc 1 8678 0
 28518 c588 0FB6C0   		movzbl	%al, %eax
 28519 c58b 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 980


 28520              	.LVL2530:
 28521 c58f 48038414 		addq	58088(%rsp,%rdx), %rax
 28521      E8E20000 
 28522 c597 488B08   		movq	(%rax), %rcx
 28523 c59a E9B947FF 		jmp	.L269
 28523      FF
 28524              	.LVL2531:
 28525              	.L1028:
8687:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28526              		.loc 1 8687 0
 28527 c59f 410FB691 		movzbl	VM_memory(%r9), %edx
 28527      00000000 
 28528 c5a7 450FB680 		movzbl	VM_memory(%r8), %r8d
 28528      00000000 
8685:src/vm3.c     **** }
 28529              		.loc 1 8685 0
 28530 c5af 8D4808   		leal	8(%rax), %ecx
8700:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28531              		.loc 1 8700 0
 28532 c5b2 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28532      000000
 28533              	.LVL2532:
8685:src/vm3.c     **** }
 28534              		.loc 1 8685 0
 28535 c5b9 890D0000 		movl	%ecx, nPC(%rip)
 28535      0000
8700:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28536              		.loc 1 8700 0
 28537 c5bf 8D4809   		leal	9(%rax), %ecx
8687:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28538              		.loc 1 8687 0
 28539 c5c2 C1E218   		sall	$24, %edx
8700:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28540              		.loc 1 8700 0
 28541 c5c5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28541      000000
8687:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28542              		.loc 1 8687 0
 28543 c5cc 4109D0   		orl	%edx, %r8d
 28544 c5cf 0FB69700 		movzbl	VM_memory(%rdi), %edx
 28544      000000
 28545 c5d6 C1E210   		sall	$16, %edx
 28546 c5d9 4109D0   		orl	%edx, %r8d
 28547 c5dc 0FB69600 		movzbl	VM_memory(%rsi), %edx
 28547      000000
 28548 c5e3 C1E208   		sall	$8, %edx
 28549 c5e6 4109D0   		orl	%edx, %r8d
 28550              	.LVL2533:
8688:src/vm3.c     ****   if (op0 == 0x0) {
 28551              		.loc 1 8688 0
 28552 c5e9 4489C6   		movl	%r8d, %esi
8690:src/vm3.c     ****     op0 = op0 + funct;
 28553              		.loc 1 8690 0
 28554 c5ec 4488C2   		movb	%r8b, %dl
8688:src/vm3.c     ****   if (op0 == 0x0) {
 28555              		.loc 1 8688 0
 28556 c5ef C1EE1A   		shrl	$26, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 981


 28557              	.LVL2534:
8690:src/vm3.c     ****     op0 = op0 + funct;
 28558              		.loc 1 8690 0
 28559 c5f2 83E23F   		andl	$63, %edx
 28560 c5f5 8D7E2B   		leal	43(%rsi), %edi
 28561 c5f8 4084F6   		testb	%sil, %sil
 28562 c5fb 0F45D7   		cmovne	%edi, %edx
 28563              	.LVL2535:
8700:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28564              		.loc 1 8700 0
 28565 c5fe C1E110   		sall	$16, %ecx
 28566 c601 C1E318   		sall	$24, %ebx
 28567 c604 09CB     		orl	%ecx, %ebx
 28568 c606 8D480B   		leal	11(%rax), %ecx
 28569 c609 83C00A   		addl	$10, %eax
 28570 c60c 0FB68000 		movzbl	VM_memory(%rax), %eax
 28570      000000
8698:src/vm3.c     **** 
 28571              		.loc 1 8698 0
 28572 c613 0FB6D2   		movzbl	%dl, %edx
8700:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28573              		.loc 1 8700 0
 28574 c616 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28574      000000
8698:src/vm3.c     **** 
 28575              		.loc 1 8698 0
 28576 c61d 48C1E204 		salq	$4, %rdx
 28577              	.LVL2536:
8700:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28578              		.loc 1 8700 0
 28579 c621 C1E008   		sall	$8, %eax
 28580 c624 09CB     		orl	%ecx, %ebx
 28581 c626 09C3     		orl	%eax, %ebx
 28582              	.LVL2537:
8701:src/vm3.c     ****   if (op1 == 0x0) {
 28583              		.loc 1 8701 0
 28584 c628 89D9     		movl	%ebx, %ecx
8703:src/vm3.c     ****     op1 = op1 + funct;
 28585              		.loc 1 8703 0
 28586 c62a 88D8     		movb	%bl, %al
8701:src/vm3.c     ****   if (op1 == 0x0) {
 28587              		.loc 1 8701 0
 28588 c62c C1E91A   		shrl	$26, %ecx
 28589              	.LVL2538:
8703:src/vm3.c     ****     op1 = op1 + funct;
 28590              		.loc 1 8703 0
 28591 c62f 83E03F   		andl	$63, %eax
 28592 c632 8D712B   		leal	43(%rcx), %esi
 28593 c635 84C9     		testb	%cl, %cl
 28594 c637 0F45C6   		cmovne	%esi, %eax
 28595              	.LVL2539:
8710:src/vm3.c     **** 
 28596              		.loc 1 8710 0
 28597 c63a 0FB6C0   		movzbl	%al, %eax
 28598 c63d 48C1E004 		salq	$4, %rax
 28599              	.LVL2540:
 28600 c641 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 982


 28600      E8E20000 
 28601 c649 488B08   		movq	(%rax), %rcx
 28602 c64c E90747FF 		jmp	.L269
 28602      FF
 28603              	.LVL2541:
 28604              	.L213:
8719:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 28605              		.loc 1 8719 0
 28606 c651 4489C0   		movl	%r8d, %eax
8720:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 28607              		.loc 1 8720 0
 28608 c654 4489C2   		movl	%r8d, %edx
8718:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28609              		.loc 1 8718 0
 28610 c657 41C1E806 		shrl	$6, %r8d
 28611              	.LVL2542:
8719:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 28612              		.loc 1 8719 0
 28613 c65b C1E810   		shrl	$16, %eax
 28614              	.LVL2543:
8718:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28615              		.loc 1 8718 0
 28616 c65e 4488C1   		movb	%r8b, %cl
8720:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 28617              		.loc 1 8720 0
 28618 c661 C1EA0B   		shrl	$11, %edx
 28619              	.LVL2544:
8721:src/vm3.c     **** PC  =  nPC;
 28620              		.loc 1 8721 0
 28621 c664 83E01F   		andl	$31, %eax
8718:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28622              		.loc 1 8718 0
 28623 c667 83E11F   		andl	$31, %ecx
8721:src/vm3.c     **** PC  =  nPC;
 28624              		.loc 1 8721 0
 28625 c66a 83E21F   		andl	$31, %edx
 28626 c66d 8B048500 		movl	RF(,%rax,4), %eax
 28626      000000
8723:src/vm3.c     **** 
 28627              		.loc 1 8723 0
 28628 c674 83050000 		addl	$4, nPC(%rip)
 28628      000004
 28629              	.LVL2545:
8721:src/vm3.c     **** PC  =  nPC;
 28630              		.loc 1 8721 0
 28631 c67b D3E8     		shrl	%cl, %eax
 28632 c67d 89049500 		movl	%eax, RF(,%rdx,4)
 28632      000000
8730:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 28633              		.loc 1 8730 0
 28634 c684 89D8     		movl	%ebx, %eax
8731:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 28635              		.loc 1 8731 0
 28636 c686 89DA     		movl	%ebx, %edx
8730:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 28637              		.loc 1 8730 0
 28638 c688 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 983


8729:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 28639              		.loc 1 8729 0
 28640 c68b C1EB15   		shrl	$21, %ebx
 28641              	.LVL2546:
8731:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 28642              		.loc 1 8731 0
 28643 c68e C1EA0B   		shrl	$11, %edx
 28644              	.LVL2547:
8732:src/vm3.c     **** PC  =  nPC;
 28645              		.loc 1 8732 0
 28646 c691 83E31F   		andl	$31, %ebx
 28647 c694 83E01F   		andl	$31, %eax
 28648 c697 83E21F   		andl	$31, %edx
 28649 c69a 8B048500 		movl	RF(,%rax,4), %eax
 28649      000000
 28650 c6a1 0B049D00 		orl	RF(,%rbx,4), %eax
 28650      000000
 28651 c6a8 89049500 		movl	%eax, RF(,%rdx,4)
 28651      000000
8733:src/vm3.c     **** nPC  += 4;
 28652              		.loc 1 8733 0
 28653 c6af 8B050000 		movl	nPC(%rip), %eax
 28653      0000
8735:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28654              		.loc 1 8735 0
 28655 c6b5 8D5003   		leal	3(%rax), %edx
8734:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 28656              		.loc 1 8734 0
 28657 c6b8 8D4804   		leal	4(%rax), %ecx
8733:src/vm3.c     **** nPC  += 4;
 28658              		.loc 1 8733 0
 28659 c6bb 89050000 		movl	%eax, PC(%rip)
 28659      0000
8735:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28660              		.loc 1 8735 0
 28661 c6c1 440FB682 		movzbl	VM_memory(%rdx), %r8d
 28661      00000000 
 28662 c6c9 89C2     		movl	%eax, %edx
8748:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28663              		.loc 1 8748 0
 28664 c6cb 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28664      000000
8735:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28665              		.loc 1 8735 0
 28666 c6d2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28666      000000
8734:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 28667              		.loc 1 8734 0
 28668 c6d9 890D0000 		movl	%ecx, nPC(%rip)
 28668      0000
8748:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28669              		.loc 1 8748 0
 28670 c6df 8D4805   		leal	5(%rax), %ecx
 28671 c6e2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28671      000000
8735:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28672              		.loc 1 8735 0
GAS LISTING /tmp/cc15eBE3.s 			page 984


 28673 c6e9 C1E218   		sall	$24, %edx
 28674 c6ec 4109D0   		orl	%edx, %r8d
 28675 c6ef 8D5001   		leal	1(%rax), %edx
 28676 c6f2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28676      000000
 28677 c6f9 C1E210   		sall	$16, %edx
 28678 c6fc 4109D0   		orl	%edx, %r8d
 28679 c6ff 8D5002   		leal	2(%rax), %edx
 28680 c702 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28680      000000
 28681 c709 C1E208   		sall	$8, %edx
 28682 c70c 4109D0   		orl	%edx, %r8d
 28683              	.LVL2548:
8736:src/vm3.c     ****   if (op0 == 0x0) {
 28684              		.loc 1 8736 0
 28685 c70f 4489C6   		movl	%r8d, %esi
8738:src/vm3.c     ****     op0 = op0 + funct;
 28686              		.loc 1 8738 0
 28687 c712 4488C2   		movb	%r8b, %dl
8736:src/vm3.c     ****   if (op0 == 0x0) {
 28688              		.loc 1 8736 0
 28689 c715 C1EE1A   		shrl	$26, %esi
 28690              	.LVL2549:
8738:src/vm3.c     ****     op0 = op0 + funct;
 28691              		.loc 1 8738 0
 28692 c718 83E23F   		andl	$63, %edx
 28693 c71b 8D7E2B   		leal	43(%rsi), %edi
 28694 c71e 4084F6   		testb	%sil, %sil
 28695 c721 0F45D7   		cmovne	%edi, %edx
 28696              	.LVL2550:
8748:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28697              		.loc 1 8748 0
 28698 c724 C1E110   		sall	$16, %ecx
 28699 c727 C1E318   		sall	$24, %ebx
 28700 c72a 09CB     		orl	%ecx, %ebx
 28701 c72c 8D4807   		leal	7(%rax), %ecx
 28702 c72f 83C006   		addl	$6, %eax
 28703 c732 0FB68000 		movzbl	VM_memory(%rax), %eax
 28703      000000
8746:src/vm3.c     **** 
 28704              		.loc 1 8746 0
 28705 c739 0FB6D2   		movzbl	%dl, %edx
8748:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28706              		.loc 1 8748 0
 28707 c73c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28707      000000
8746:src/vm3.c     **** 
 28708              		.loc 1 8746 0
 28709 c743 48C1E204 		salq	$4, %rdx
 28710              	.LVL2551:
8748:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28711              		.loc 1 8748 0
 28712 c747 C1E008   		sall	$8, %eax
 28713 c74a 09CB     		orl	%ecx, %ebx
 28714 c74c 09C3     		orl	%eax, %ebx
 28715              	.LVL2552:
8749:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 985


 28716              		.loc 1 8749 0
 28717 c74e 89D9     		movl	%ebx, %ecx
8751:src/vm3.c     ****     op1 = op1 + funct;
 28718              		.loc 1 8751 0
 28719 c750 88D8     		movb	%bl, %al
8749:src/vm3.c     ****   if (op1 == 0x0) {
 28720              		.loc 1 8749 0
 28721 c752 C1E91A   		shrl	$26, %ecx
 28722              	.LVL2553:
8751:src/vm3.c     ****     op1 = op1 + funct;
 28723              		.loc 1 8751 0
 28724 c755 83E03F   		andl	$63, %eax
 28725 c758 8D712B   		leal	43(%rcx), %esi
 28726 c75b 84C9     		testb	%cl, %cl
 28727 c75d 0F45C6   		cmovne	%esi, %eax
 28728              	.LVL2554:
8758:src/vm3.c     **** 
 28729              		.loc 1 8758 0
 28730 c760 0FB6C0   		movzbl	%al, %eax
 28731 c763 48C1E004 		salq	$4, %rax
 28732              	.LVL2555:
 28733 c767 48038414 		addq	58088(%rsp,%rdx), %rax
 28733      E8E20000 
 28734 c76f 488B08   		movq	(%rax), %rcx
 28735 c772 E9E145FF 		jmp	.L269
 28735      FF
 28736              	.LVL2556:
 28737              	.L24:
8767:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 28738              		.loc 1 8767 0
 28739 c777 4489C0   		movl	%r8d, %eax
8768:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 28740              		.loc 1 8768 0
 28741 c77a 4489C2   		movl	%r8d, %edx
8766:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28742              		.loc 1 8766 0
 28743 c77d 41C1E806 		shrl	$6, %r8d
 28744              	.LVL2557:
8767:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 28745              		.loc 1 8767 0
 28746 c781 C1E810   		shrl	$16, %eax
 28747              	.LVL2558:
8766:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28748              		.loc 1 8766 0
 28749 c784 4488C1   		movb	%r8b, %cl
8768:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 28750              		.loc 1 8768 0
 28751 c787 C1EA0B   		shrl	$11, %edx
 28752              	.LVL2559:
8769:src/vm3.c     **** PC  =  nPC;
 28753              		.loc 1 8769 0
 28754 c78a 83E01F   		andl	$31, %eax
8766:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28755              		.loc 1 8766 0
 28756 c78d 83E11F   		andl	$31, %ecx
8769:src/vm3.c     **** PC  =  nPC;
 28757              		.loc 1 8769 0
GAS LISTING /tmp/cc15eBE3.s 			page 986


 28758 c790 83E21F   		andl	$31, %edx
 28759 c793 8B048500 		movl	RF(,%rax,4), %eax
 28759      000000
8778:src/vm3.c     **** nPC = address << 2;
 28760              		.loc 1 8778 0
 28761 c79a 81E3FFFF 		andl	$67108863, %ebx
 28761      FF03
 28762              	.LVL2560:
8769:src/vm3.c     **** PC  =  nPC;
 28763              		.loc 1 8769 0
 28764 c7a0 D3E0     		sall	%cl, %eax
 28765 c7a2 89049500 		movl	%eax, RF(,%rdx,4)
 28765      000000
8771:src/vm3.c     **** 
 28766              		.loc 1 8771 0
 28767 c7a9 8B150000 		movl	nPC(%rip), %edx
 28767      0000
8779:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 28768              		.loc 1 8779 0
 28769 c7af 8D049D00 		leal	0(,%rbx,4), %eax
 28769      000000
 28770 c7b6 89050000 		movl	%eax, nPC(%rip)
 28770      0000
8771:src/vm3.c     **** 
 28771              		.loc 1 8771 0
 28772 c7bc 8D4A04   		leal	4(%rdx), %ecx
8780:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28773              		.loc 1 8780 0
 28774 c7bf 8D7207   		leal	7(%rdx), %esi
8777:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 28775              		.loc 1 8777 0
 28776 c7c2 890D0000 		movl	%ecx, PC(%rip)
 28776      0000
8780:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28777              		.loc 1 8780 0
 28778 c7c8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28778      000000
 28779 c7cf 440FB686 		movzbl	VM_memory(%rsi), %r8d
 28779      00000000 
 28780 c7d7 C1E118   		sall	$24, %ecx
 28781 c7da 4109C8   		orl	%ecx, %r8d
 28782 c7dd 8D4A05   		leal	5(%rdx), %ecx
 28783 c7e0 83C206   		addl	$6, %edx
 28784 c7e3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28784      000000
 28785 c7ea 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28785      000000
 28786 c7f1 C1E208   		sall	$8, %edx
 28787 c7f4 C1E110   		sall	$16, %ecx
 28788 c7f7 4109C8   		orl	%ecx, %r8d
 28789 c7fa 4109D0   		orl	%edx, %r8d
 28790              	.LVL2561:
8781:src/vm3.c     ****   if (op0 == 0x0) {
 28791              		.loc 1 8781 0
 28792 c7fd 4489C1   		movl	%r8d, %ecx
8783:src/vm3.c     ****     op0 = op0 + funct;
 28793              		.loc 1 8783 0
GAS LISTING /tmp/cc15eBE3.s 			page 987


 28794 c800 4488C2   		movb	%r8b, %dl
8781:src/vm3.c     ****   if (op0 == 0x0) {
 28795              		.loc 1 8781 0
 28796 c803 C1E91A   		shrl	$26, %ecx
 28797              	.LVL2562:
8783:src/vm3.c     ****     op0 = op0 + funct;
 28798              		.loc 1 8783 0
 28799 c806 83E23F   		andl	$63, %edx
 28800 c809 8D712B   		leal	43(%rcx), %esi
 28801 c80c 84C9     		testb	%cl, %cl
8793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28802              		.loc 1 8793 0
 28803 c80e 8D4803   		leal	3(%rax), %ecx
 28804              	.LVL2563:
 28805 c811 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28805      000000
 28806 c818 89C1     		movl	%eax, %ecx
8783:src/vm3.c     ****     op0 = op0 + funct;
 28807              		.loc 1 8783 0
 28808 c81a 0F45D6   		cmovne	%esi, %edx
 28809              	.LVL2564:
8793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28810              		.loc 1 8793 0
 28811 c81d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28811      000000
8791:src/vm3.c     **** 
 28812              		.loc 1 8791 0
 28813 c824 0FB6D2   		movzbl	%dl, %edx
 28814 c827 48C1E204 		salq	$4, %rdx
 28815              	.LVL2565:
8793:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28816              		.loc 1 8793 0
 28817 c82b C1E118   		sall	$24, %ecx
 28818 c82e 09CB     		orl	%ecx, %ebx
 28819 c830 8D4801   		leal	1(%rax), %ecx
 28820 c833 83C002   		addl	$2, %eax
 28821 c836 0FB68000 		movzbl	VM_memory(%rax), %eax
 28821      000000
 28822 c83d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28822      000000
 28823 c844 C1E008   		sall	$8, %eax
 28824 c847 C1E110   		sall	$16, %ecx
 28825 c84a 09CB     		orl	%ecx, %ebx
 28826 c84c 09C3     		orl	%eax, %ebx
 28827              	.LVL2566:
8794:src/vm3.c     ****   if (op1 == 0x0) {
 28828              		.loc 1 8794 0
 28829 c84e 89D9     		movl	%ebx, %ecx
8796:src/vm3.c     ****     op1 = op1 + funct;
 28830              		.loc 1 8796 0
 28831 c850 88D8     		movb	%bl, %al
8794:src/vm3.c     ****   if (op1 == 0x0) {
 28832              		.loc 1 8794 0
 28833 c852 C1E91A   		shrl	$26, %ecx
 28834              	.LVL2567:
8796:src/vm3.c     ****     op1 = op1 + funct;
 28835              		.loc 1 8796 0
GAS LISTING /tmp/cc15eBE3.s 			page 988


 28836 c855 83E03F   		andl	$63, %eax
 28837 c858 8D712B   		leal	43(%rcx), %esi
 28838 c85b 84C9     		testb	%cl, %cl
 28839 c85d 0F45C6   		cmovne	%esi, %eax
 28840              	.LVL2568:
8803:src/vm3.c     **** 
 28841              		.loc 1 8803 0
 28842 c860 0FB6C0   		movzbl	%al, %eax
 28843 c863 48C1E004 		salq	$4, %rax
 28844              	.LVL2569:
 28845 c867 48038414 		addq	58088(%rsp,%rdx), %rax
 28845      E8E20000 
 28846 c86f 488B08   		movq	(%rax), %rcx
 28847 c872 E9E144FF 		jmp	.L269
 28847      FF
 28848              	.LVL2570:
 28849              	.L149:
8837:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28850              		.loc 1 8837 0
 28851 c877 4489C2   		movl	%r8d, %edx
8838:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 28852              		.loc 1 8838 0
 28853 c87a 4489C0   		movl	%r8d, %eax
8840:src/vm3.c     **** PC  =  nPC;
 28854              		.loc 1 8840 0
 28855 c87d 450FBFC0 		movswl	%r8w, %r8d
 28856              	.LVL2571:
8837:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28857              		.loc 1 8837 0
 28858 c881 C1EA15   		shrl	$21, %edx
8838:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 28859              		.loc 1 8838 0
 28860 c884 C1E810   		shrl	$16, %eax
 28861              	.LVL2572:
8842:src/vm3.c     **** 
 28862              		.loc 1 8842 0
 28863 c887 83050000 		addl	$4, nPC(%rip)
 28863      000004
 28864              	.LVL2573:
8840:src/vm3.c     **** PC  =  nPC;
 28865              		.loc 1 8840 0
 28866 c88e 83E21F   		andl	$31, %edx
 28867 c891 83E01F   		andl	$31, %eax
 28868 c894 44030495 		addl	RF(,%rdx,4), %r8d
 28868      00000000 
8848:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 28869              		.loc 1 8848 0
 28870 c89c 89DA     		movl	%ebx, %edx
 28871 c89e C1EA15   		shrl	$21, %edx
8851:src/vm3.c     **** PC  =  nPC;
 28872              		.loc 1 8851 0
 28873 c8a1 83E21F   		andl	$31, %edx
8840:src/vm3.c     **** PC  =  nPC;
 28874              		.loc 1 8840 0
 28875 c8a4 44890485 		movl	%r8d, RF(,%rax,4)
 28875      00000000 
8849:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 989


 28876              		.loc 1 8849 0
 28877 c8ac 89D8     		movl	%ebx, %eax
8851:src/vm3.c     **** PC  =  nPC;
 28878              		.loc 1 8851 0
 28879 c8ae 0FBFDB   		movswl	%bx, %ebx
 28880              	.LVL2574:
 28881 c8b1 231C9500 		andl	RF(,%rdx,4), %ebx
 28881      000000
 28882              	.LVL2575:
8849:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 28883              		.loc 1 8849 0
 28884 c8b8 C1E810   		shrl	$16, %eax
 28885              	.LVL2576:
8851:src/vm3.c     **** PC  =  nPC;
 28886              		.loc 1 8851 0
 28887 c8bb 83E01F   		andl	$31, %eax
 28888 c8be 891C8500 		movl	%ebx, RF(,%rax,4)
 28888      000000
8852:src/vm3.c     **** nPC  += 4;
 28889              		.loc 1 8852 0
 28890 c8c5 8B050000 		movl	nPC(%rip), %eax
 28890      0000
8854:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28891              		.loc 1 8854 0
 28892 c8cb 8D5003   		leal	3(%rax), %edx
8853:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 28893              		.loc 1 8853 0
 28894 c8ce 8D4804   		leal	4(%rax), %ecx
8852:src/vm3.c     **** nPC  += 4;
 28895              		.loc 1 8852 0
 28896 c8d1 89050000 		movl	%eax, PC(%rip)
 28896      0000
8854:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28897              		.loc 1 8854 0
 28898 c8d7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 28898      00000000 
 28899 c8df 89C2     		movl	%eax, %edx
8867:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28900              		.loc 1 8867 0
 28901 c8e1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 28901      000000
8854:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28902              		.loc 1 8854 0
 28903 c8e8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28903      000000
8853:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 28904              		.loc 1 8853 0
 28905 c8ef 890D0000 		movl	%ecx, nPC(%rip)
 28905      0000
8867:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28906              		.loc 1 8867 0
 28907 c8f5 8D4805   		leal	5(%rax), %ecx
 28908 c8f8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28908      000000
8854:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 28909              		.loc 1 8854 0
 28910 c8ff C1E218   		sall	$24, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 990


 28911 c902 4109D0   		orl	%edx, %r8d
 28912 c905 8D5001   		leal	1(%rax), %edx
 28913 c908 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28913      000000
 28914 c90f C1E210   		sall	$16, %edx
 28915 c912 4109D0   		orl	%edx, %r8d
 28916 c915 8D5002   		leal	2(%rax), %edx
 28917 c918 0FB69200 		movzbl	VM_memory(%rdx), %edx
 28917      000000
 28918 c91f C1E208   		sall	$8, %edx
 28919 c922 4109D0   		orl	%edx, %r8d
 28920              	.LVL2577:
8855:src/vm3.c     ****   if (op0 == 0x0) {
 28921              		.loc 1 8855 0
 28922 c925 4489C6   		movl	%r8d, %esi
8857:src/vm3.c     ****     op0 = op0 + funct;
 28923              		.loc 1 8857 0
 28924 c928 4488C2   		movb	%r8b, %dl
8855:src/vm3.c     ****   if (op0 == 0x0) {
 28925              		.loc 1 8855 0
 28926 c92b C1EE1A   		shrl	$26, %esi
 28927              	.LVL2578:
8857:src/vm3.c     ****     op0 = op0 + funct;
 28928              		.loc 1 8857 0
 28929 c92e 83E23F   		andl	$63, %edx
 28930 c931 8D7E2B   		leal	43(%rsi), %edi
 28931 c934 4084F6   		testb	%sil, %sil
 28932 c937 0F45D7   		cmovne	%edi, %edx
 28933              	.LVL2579:
8867:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28934              		.loc 1 8867 0
 28935 c93a C1E110   		sall	$16, %ecx
 28936 c93d C1E318   		sall	$24, %ebx
 28937 c940 09CB     		orl	%ecx, %ebx
 28938 c942 8D4807   		leal	7(%rax), %ecx
 28939 c945 83C006   		addl	$6, %eax
 28940 c948 0FB68000 		movzbl	VM_memory(%rax), %eax
 28940      000000
8865:src/vm3.c     **** 
 28941              		.loc 1 8865 0
 28942 c94f 0FB6D2   		movzbl	%dl, %edx
8867:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28943              		.loc 1 8867 0
 28944 c952 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 28944      000000
8865:src/vm3.c     **** 
 28945              		.loc 1 8865 0
 28946 c959 48C1E204 		salq	$4, %rdx
 28947              	.LVL2580:
8867:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 28948              		.loc 1 8867 0
 28949 c95d C1E008   		sall	$8, %eax
 28950 c960 09CB     		orl	%ecx, %ebx
 28951 c962 09C3     		orl	%eax, %ebx
 28952              	.LVL2581:
8868:src/vm3.c     ****   if (op1 == 0x0) {
 28953              		.loc 1 8868 0
GAS LISTING /tmp/cc15eBE3.s 			page 991


 28954 c964 89D9     		movl	%ebx, %ecx
8870:src/vm3.c     ****     op1 = op1 + funct;
 28955              		.loc 1 8870 0
 28956 c966 88D8     		movb	%bl, %al
8868:src/vm3.c     ****   if (op1 == 0x0) {
 28957              		.loc 1 8868 0
 28958 c968 C1E91A   		shrl	$26, %ecx
 28959              	.LVL2582:
8870:src/vm3.c     ****     op1 = op1 + funct;
 28960              		.loc 1 8870 0
 28961 c96b 83E03F   		andl	$63, %eax
 28962 c96e 8D712B   		leal	43(%rcx), %esi
 28963 c971 84C9     		testb	%cl, %cl
 28964 c973 0F45C6   		cmovne	%esi, %eax
 28965              	.LVL2583:
8877:src/vm3.c     **** 
 28966              		.loc 1 8877 0
 28967 c976 0FB6C0   		movzbl	%al, %eax
 28968 c979 48C1E004 		salq	$4, %rax
 28969              	.LVL2584:
 28970 c97d 48038414 		addq	58088(%rsp,%rdx), %rax
 28970      E8E20000 
 28971 c985 488B08   		movq	(%rax), %rcx
 28972 c988 E9CB43FF 		jmp	.L269
 28972      FF
 28973              	.LVL2585:
 28974              	.L138:
8885:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28975              		.loc 1 8885 0
 28976 c98d 4489C2   		movl	%r8d, %edx
8886:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 28977              		.loc 1 8886 0
 28978 c990 4489C0   		movl	%r8d, %eax
8888:src/vm3.c     **** PC  =  nPC;
 28979              		.loc 1 8888 0
 28980 c993 450FBFC0 		movswl	%r8w, %r8d
 28981              	.LVL2586:
8885:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 28982              		.loc 1 8885 0
 28983 c997 C1EA15   		shrl	$21, %edx
8886:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 28984              		.loc 1 8886 0
 28985 c99a C1E810   		shrl	$16, %eax
 28986              	.LVL2587:
8890:src/vm3.c     **** 
 28987              		.loc 1 8890 0
 28988 c99d 83050000 		addl	$4, nPC(%rip)
 28988      000004
 28989              	.LVL2588:
8888:src/vm3.c     **** PC  =  nPC;
 28990              		.loc 1 8888 0
 28991 c9a4 83E21F   		andl	$31, %edx
 28992 c9a7 83E01F   		andl	$31, %eax
 28993 c9aa 44030495 		addl	RF(,%rdx,4), %r8d
 28993      00000000 
 28994              	.LVL2589:
8898:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
GAS LISTING /tmp/cc15eBE3.s 			page 992


 28995              		.loc 1 8898 0
 28996 c9b2 89DA     		movl	%ebx, %edx
 28997 c9b4 C1EA0B   		shrl	$11, %edx
8899:src/vm3.c     **** PC  =  nPC;
 28998              		.loc 1 8899 0
 28999 c9b7 83E21F   		andl	$31, %edx
8888:src/vm3.c     **** PC  =  nPC;
 29000              		.loc 1 8888 0
 29001 c9ba 44890485 		movl	%r8d, RF(,%rax,4)
 29001      00000000 
8896:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29002              		.loc 1 8896 0
 29003 c9c2 89D8     		movl	%ebx, %eax
8897:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29004              		.loc 1 8897 0
 29005 c9c4 C1EB10   		shrl	$16, %ebx
 29006              	.LVL2590:
8896:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29007              		.loc 1 8896 0
 29008 c9c7 C1E815   		shrl	$21, %eax
 29009              	.LVL2591:
8899:src/vm3.c     **** PC  =  nPC;
 29010              		.loc 1 8899 0
 29011 c9ca 83E31F   		andl	$31, %ebx
 29012 c9cd 83E01F   		andl	$31, %eax
 29013 c9d0 8B048500 		movl	RF(,%rax,4), %eax
 29013      000000
 29014 c9d7 2B049D00 		subl	RF(,%rbx,4), %eax
 29014      000000
 29015 c9de 89049500 		movl	%eax, RF(,%rdx,4)
 29015      000000
8900:src/vm3.c     **** nPC  += 4;
 29016              		.loc 1 8900 0
 29017 c9e5 8B050000 		movl	nPC(%rip), %eax
 29017      0000
8902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29018              		.loc 1 8902 0
 29019 c9eb 8D5003   		leal	3(%rax), %edx
8901:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29020              		.loc 1 8901 0
 29021 c9ee 8D4804   		leal	4(%rax), %ecx
8900:src/vm3.c     **** nPC  += 4;
 29022              		.loc 1 8900 0
 29023 c9f1 89050000 		movl	%eax, PC(%rip)
 29023      0000
8902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29024              		.loc 1 8902 0
 29025 c9f7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 29025      00000000 
 29026 c9ff 89C2     		movl	%eax, %edx
8915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29027              		.loc 1 8915 0
 29028 ca01 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29028      000000
8902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29029              		.loc 1 8902 0
 29030 ca08 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 993


 29030      000000
8901:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29031              		.loc 1 8901 0
 29032 ca0f 890D0000 		movl	%ecx, nPC(%rip)
 29032      0000
8915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29033              		.loc 1 8915 0
 29034 ca15 8D4805   		leal	5(%rax), %ecx
 29035 ca18 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29035      000000
8902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29036              		.loc 1 8902 0
 29037 ca1f C1E218   		sall	$24, %edx
 29038 ca22 4109D0   		orl	%edx, %r8d
 29039 ca25 8D5001   		leal	1(%rax), %edx
 29040 ca28 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29040      000000
 29041 ca2f C1E210   		sall	$16, %edx
 29042 ca32 4109D0   		orl	%edx, %r8d
 29043 ca35 8D5002   		leal	2(%rax), %edx
 29044 ca38 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29044      000000
 29045 ca3f C1E208   		sall	$8, %edx
 29046 ca42 4109D0   		orl	%edx, %r8d
 29047              	.LVL2592:
8903:src/vm3.c     ****   if (op0 == 0x0) {
 29048              		.loc 1 8903 0
 29049 ca45 4489C6   		movl	%r8d, %esi
8905:src/vm3.c     ****     op0 = op0 + funct;
 29050              		.loc 1 8905 0
 29051 ca48 4488C2   		movb	%r8b, %dl
8903:src/vm3.c     ****   if (op0 == 0x0) {
 29052              		.loc 1 8903 0
 29053 ca4b C1EE1A   		shrl	$26, %esi
 29054              	.LVL2593:
8905:src/vm3.c     ****     op0 = op0 + funct;
 29055              		.loc 1 8905 0
 29056 ca4e 83E23F   		andl	$63, %edx
 29057 ca51 8D7E2B   		leal	43(%rsi), %edi
 29058 ca54 4084F6   		testb	%sil, %sil
 29059 ca57 0F45D7   		cmovne	%edi, %edx
 29060              	.LVL2594:
8915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29061              		.loc 1 8915 0
 29062 ca5a C1E110   		sall	$16, %ecx
 29063 ca5d C1E318   		sall	$24, %ebx
 29064 ca60 09CB     		orl	%ecx, %ebx
 29065 ca62 8D4807   		leal	7(%rax), %ecx
 29066 ca65 83C006   		addl	$6, %eax
 29067 ca68 0FB68000 		movzbl	VM_memory(%rax), %eax
 29067      000000
8913:src/vm3.c     **** 
 29068              		.loc 1 8913 0
 29069 ca6f 0FB6D2   		movzbl	%dl, %edx
8915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29070              		.loc 1 8915 0
 29071 ca72 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 994


 29071      000000
8913:src/vm3.c     **** 
 29072              		.loc 1 8913 0
 29073 ca79 48C1E204 		salq	$4, %rdx
 29074              	.LVL2595:
8915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29075              		.loc 1 8915 0
 29076 ca7d C1E008   		sall	$8, %eax
 29077 ca80 09CB     		orl	%ecx, %ebx
 29078 ca82 09C3     		orl	%eax, %ebx
 29079              	.LVL2596:
8916:src/vm3.c     ****   if (op1 == 0x0) {
 29080              		.loc 1 8916 0
 29081 ca84 89D9     		movl	%ebx, %ecx
8918:src/vm3.c     ****     op1 = op1 + funct;
 29082              		.loc 1 8918 0
 29083 ca86 88D8     		movb	%bl, %al
8916:src/vm3.c     ****   if (op1 == 0x0) {
 29084              		.loc 1 8916 0
 29085 ca88 C1E91A   		shrl	$26, %ecx
 29086              	.LVL2597:
8918:src/vm3.c     ****     op1 = op1 + funct;
 29087              		.loc 1 8918 0
 29088 ca8b 83E03F   		andl	$63, %eax
 29089 ca8e 8D712B   		leal	43(%rcx), %esi
 29090 ca91 84C9     		testb	%cl, %cl
 29091 ca93 0F45C6   		cmovne	%esi, %eax
 29092              	.LVL2598:
8925:src/vm3.c     **** 
 29093              		.loc 1 8925 0
 29094 ca96 0FB6C0   		movzbl	%al, %eax
 29095 ca99 48C1E004 		salq	$4, %rax
 29096              	.LVL2599:
 29097 ca9d 48038414 		addq	58088(%rsp,%rdx), %rax
 29097      E8E20000 
 29098 caa5 488B08   		movq	(%rax), %rcx
 29099 caa8 E9AB42FF 		jmp	.L269
 29099      FF
 29100              	.LVL2600:
 29101              	.L212:
8934:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 29102              		.loc 1 8934 0
 29103 caad 4489C0   		movl	%r8d, %eax
8935:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 29104              		.loc 1 8935 0
 29105 cab0 4489C2   		movl	%r8d, %edx
8933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29106              		.loc 1 8933 0
 29107 cab3 41C1E806 		shrl	$6, %r8d
 29108              	.LVL2601:
8934:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 29109              		.loc 1 8934 0
 29110 cab7 C1E810   		shrl	$16, %eax
 29111              	.LVL2602:
8933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29112              		.loc 1 8933 0
 29113 caba 4488C1   		movb	%r8b, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 995


8935:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 29114              		.loc 1 8935 0
 29115 cabd C1EA0B   		shrl	$11, %edx
 29116              	.LVL2603:
8936:src/vm3.c     **** PC  =  nPC;
 29117              		.loc 1 8936 0
 29118 cac0 83E01F   		andl	$31, %eax
8933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29119              		.loc 1 8933 0
 29120 cac3 83E11F   		andl	$31, %ecx
8936:src/vm3.c     **** PC  =  nPC;
 29121              		.loc 1 8936 0
 29122 cac6 83E21F   		andl	$31, %edx
 29123 cac9 8B048500 		movl	RF(,%rax,4), %eax
 29123      000000
8938:src/vm3.c     **** 
 29124              		.loc 1 8938 0
 29125 cad0 83050000 		addl	$4, nPC(%rip)
 29125      000004
 29126              	.LVL2604:
8936:src/vm3.c     **** PC  =  nPC;
 29127              		.loc 1 8936 0
 29128 cad7 D3E8     		shrl	%cl, %eax
 29129 cad9 89049500 		movl	%eax, RF(,%rdx,4)
 29129      000000
8945:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29130              		.loc 1 8945 0
 29131 cae0 89D8     		movl	%ebx, %eax
8946:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 29132              		.loc 1 8946 0
 29133 cae2 89DA     		movl	%ebx, %edx
8945:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29134              		.loc 1 8945 0
 29135 cae4 C1E810   		shrl	$16, %eax
8944:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29136              		.loc 1 8944 0
 29137 cae7 C1EB15   		shrl	$21, %ebx
 29138              	.LVL2605:
8946:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 29139              		.loc 1 8946 0
 29140 caea C1EA0B   		shrl	$11, %edx
 29141              	.LVL2606:
8947:src/vm3.c     **** PC  =  nPC;
 29142              		.loc 1 8947 0
 29143 caed 83E31F   		andl	$31, %ebx
 29144 caf0 83E01F   		andl	$31, %eax
 29145 caf3 83E21F   		andl	$31, %edx
 29146 caf6 8B048500 		movl	RF(,%rax,4), %eax
 29146      000000
 29147 cafd 03049D00 		addl	RF(,%rbx,4), %eax
 29147      000000
 29148 cb04 89049500 		movl	%eax, RF(,%rdx,4)
 29148      000000
8948:src/vm3.c     **** nPC  += 4;
 29149              		.loc 1 8948 0
 29150 cb0b 8B050000 		movl	nPC(%rip), %eax
 29150      0000
GAS LISTING /tmp/cc15eBE3.s 			page 996


8950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29151              		.loc 1 8950 0
 29152 cb11 8D5003   		leal	3(%rax), %edx
8949:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29153              		.loc 1 8949 0
 29154 cb14 8D4804   		leal	4(%rax), %ecx
8948:src/vm3.c     **** nPC  += 4;
 29155              		.loc 1 8948 0
 29156 cb17 89050000 		movl	%eax, PC(%rip)
 29156      0000
8950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29157              		.loc 1 8950 0
 29158 cb1d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 29158      00000000 
 29159 cb25 89C2     		movl	%eax, %edx
8963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29160              		.loc 1 8963 0
 29161 cb27 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29161      000000
8950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29162              		.loc 1 8950 0
 29163 cb2e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29163      000000
8949:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29164              		.loc 1 8949 0
 29165 cb35 890D0000 		movl	%ecx, nPC(%rip)
 29165      0000
8963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29166              		.loc 1 8963 0
 29167 cb3b 8D4805   		leal	5(%rax), %ecx
 29168 cb3e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29168      000000
8950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29169              		.loc 1 8950 0
 29170 cb45 C1E218   		sall	$24, %edx
 29171 cb48 4109D0   		orl	%edx, %r8d
 29172 cb4b 8D5001   		leal	1(%rax), %edx
 29173 cb4e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29173      000000
 29174 cb55 C1E210   		sall	$16, %edx
 29175 cb58 4109D0   		orl	%edx, %r8d
 29176 cb5b 8D5002   		leal	2(%rax), %edx
 29177 cb5e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29177      000000
 29178 cb65 C1E208   		sall	$8, %edx
 29179 cb68 4109D0   		orl	%edx, %r8d
 29180              	.LVL2607:
8951:src/vm3.c     ****   if (op0 == 0x0) {
 29181              		.loc 1 8951 0
 29182 cb6b 4489C6   		movl	%r8d, %esi
8953:src/vm3.c     ****     op0 = op0 + funct;
 29183              		.loc 1 8953 0
 29184 cb6e 4488C2   		movb	%r8b, %dl
8951:src/vm3.c     ****   if (op0 == 0x0) {
 29185              		.loc 1 8951 0
 29186 cb71 C1EE1A   		shrl	$26, %esi
 29187              	.LVL2608:
GAS LISTING /tmp/cc15eBE3.s 			page 997


8953:src/vm3.c     ****     op0 = op0 + funct;
 29188              		.loc 1 8953 0
 29189 cb74 83E23F   		andl	$63, %edx
 29190 cb77 8D7E2B   		leal	43(%rsi), %edi
 29191 cb7a 4084F6   		testb	%sil, %sil
 29192 cb7d 0F45D7   		cmovne	%edi, %edx
 29193              	.LVL2609:
8963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29194              		.loc 1 8963 0
 29195 cb80 C1E110   		sall	$16, %ecx
 29196 cb83 C1E318   		sall	$24, %ebx
 29197 cb86 09CB     		orl	%ecx, %ebx
 29198 cb88 8D4807   		leal	7(%rax), %ecx
 29199 cb8b 83C006   		addl	$6, %eax
 29200 cb8e 0FB68000 		movzbl	VM_memory(%rax), %eax
 29200      000000
8961:src/vm3.c     **** 
 29201              		.loc 1 8961 0
 29202 cb95 0FB6D2   		movzbl	%dl, %edx
8963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29203              		.loc 1 8963 0
 29204 cb98 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29204      000000
8961:src/vm3.c     **** 
 29205              		.loc 1 8961 0
 29206 cb9f 48C1E204 		salq	$4, %rdx
 29207              	.LVL2610:
8963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29208              		.loc 1 8963 0
 29209 cba3 C1E008   		sall	$8, %eax
 29210 cba6 09CB     		orl	%ecx, %ebx
 29211 cba8 09C3     		orl	%eax, %ebx
 29212              	.LVL2611:
8964:src/vm3.c     ****   if (op1 == 0x0) {
 29213              		.loc 1 8964 0
 29214 cbaa 89D9     		movl	%ebx, %ecx
8966:src/vm3.c     ****     op1 = op1 + funct;
 29215              		.loc 1 8966 0
 29216 cbac 88D8     		movb	%bl, %al
8964:src/vm3.c     ****   if (op1 == 0x0) {
 29217              		.loc 1 8964 0
 29218 cbae C1E91A   		shrl	$26, %ecx
 29219              	.LVL2612:
8966:src/vm3.c     ****     op1 = op1 + funct;
 29220              		.loc 1 8966 0
 29221 cbb1 83E03F   		andl	$63, %eax
 29222 cbb4 8D712B   		leal	43(%rcx), %esi
 29223 cbb7 84C9     		testb	%cl, %cl
 29224 cbb9 0F45C6   		cmovne	%esi, %eax
 29225              	.LVL2613:
8973:src/vm3.c     **** 
 29226              		.loc 1 8973 0
 29227 cbbc 0FB6C0   		movzbl	%al, %eax
 29228 cbbf 48C1E004 		salq	$4, %rax
 29229              	.LVL2614:
 29230 cbc3 48038414 		addq	58088(%rsp,%rdx), %rax
 29230      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 998


 29231 cbcb 488B08   		movq	(%rax), %rcx
 29232 cbce E98541FF 		jmp	.L269
 29232      FF
 29233              	.LVL2615:
 29234              	.L199:
8981:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 29235              		.loc 1 8981 0
 29236 cbd3 8B150000 		movl	nPC(%rip), %edx
 29236      0000
8982:src/vm3.c     **** nPC = address << 2;
 29237              		.loc 1 8982 0
 29238 cbd9 4181E0FF 		andl	$67108863, %r8d
 29238      FFFF03
 29239              	.LVL2616:
8983:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29240              		.loc 1 8983 0
 29241 cbe0 428D0485 		leal	0(,%r8,4), %eax
 29241      00000000 
8984:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29242              		.loc 1 8984 0
 29243 cbe8 8D4A03   		leal	3(%rdx), %ecx
8981:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 29244              		.loc 1 8981 0
 29245 cbeb 89150000 		movl	%edx, PC(%rip)
 29245      0000
8983:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29246              		.loc 1 8983 0
 29247 cbf1 89050000 		movl	%eax, nPC(%rip)
 29247      0000
8984:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29248              		.loc 1 8984 0
 29249 cbf7 440FB681 		movzbl	VM_memory(%rcx), %r8d
 29249      00000000 
 29250 cbff 89D1     		movl	%edx, %ecx
 29251 cc01 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29251      000000
 29252 cc08 C1E118   		sall	$24, %ecx
 29253 cc0b 4109C8   		orl	%ecx, %r8d
 29254 cc0e 8D4A01   		leal	1(%rdx), %ecx
 29255 cc11 83C202   		addl	$2, %edx
 29256 cc14 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29256      000000
 29257 cc1b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29257      000000
 29258 cc22 C1E208   		sall	$8, %edx
 29259 cc25 C1E110   		sall	$16, %ecx
 29260 cc28 4109C8   		orl	%ecx, %r8d
 29261 cc2b 4109D0   		orl	%edx, %r8d
 29262              	.LVL2617:
8985:src/vm3.c     ****   if (op0 == 0x0) {
 29263              		.loc 1 8985 0
 29264 cc2e 4489C1   		movl	%r8d, %ecx
8987:src/vm3.c     ****     op0 = op0 + funct;
 29265              		.loc 1 8987 0
 29266 cc31 4488C2   		movb	%r8b, %dl
8985:src/vm3.c     ****   if (op0 == 0x0) {
 29267              		.loc 1 8985 0
GAS LISTING /tmp/cc15eBE3.s 			page 999


 29268 cc34 C1E91A   		shrl	$26, %ecx
 29269              	.LVL2618:
8987:src/vm3.c     ****     op0 = op0 + funct;
 29270              		.loc 1 8987 0
 29271 cc37 83E23F   		andl	$63, %edx
 29272 cc3a 8D712B   		leal	43(%rcx), %esi
 29273 cc3d 84C9     		testb	%cl, %cl
8997:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29274              		.loc 1 8997 0
 29275 cc3f 8D4803   		leal	3(%rax), %ecx
 29276              	.LVL2619:
 29277 cc42 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29277      000000
 29278              	.LVL2620:
 29279 cc49 89C1     		movl	%eax, %ecx
8987:src/vm3.c     ****     op0 = op0 + funct;
 29280              		.loc 1 8987 0
 29281 cc4b 0F45D6   		cmovne	%esi, %edx
 29282              	.LVL2621:
8997:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29283              		.loc 1 8997 0
 29284 cc4e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29284      000000
8995:src/vm3.c     **** 
 29285              		.loc 1 8995 0
 29286 cc55 0FB6D2   		movzbl	%dl, %edx
 29287 cc58 48C1E204 		salq	$4, %rdx
 29288              	.LVL2622:
8997:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29289              		.loc 1 8997 0
 29290 cc5c C1E118   		sall	$24, %ecx
 29291 cc5f 09CB     		orl	%ecx, %ebx
 29292 cc61 8D4801   		leal	1(%rax), %ecx
 29293 cc64 83C002   		addl	$2, %eax
 29294 cc67 0FB68000 		movzbl	VM_memory(%rax), %eax
 29294      000000
 29295 cc6e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29295      000000
 29296 cc75 C1E008   		sall	$8, %eax
 29297 cc78 C1E110   		sall	$16, %ecx
 29298 cc7b 09CB     		orl	%ecx, %ebx
 29299 cc7d 09C3     		orl	%eax, %ebx
 29300              	.LVL2623:
8998:src/vm3.c     ****   if (op1 == 0x0) {
 29301              		.loc 1 8998 0
 29302 cc7f 89D9     		movl	%ebx, %ecx
9000:src/vm3.c     ****     op1 = op1 + funct;
 29303              		.loc 1 9000 0
 29304 cc81 88D8     		movb	%bl, %al
8998:src/vm3.c     ****   if (op1 == 0x0) {
 29305              		.loc 1 8998 0
 29306 cc83 C1E91A   		shrl	$26, %ecx
 29307              	.LVL2624:
9000:src/vm3.c     ****     op1 = op1 + funct;
 29308              		.loc 1 9000 0
 29309 cc86 83E03F   		andl	$63, %eax
 29310 cc89 8D712B   		leal	43(%rcx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 1000


 29311 cc8c 84C9     		testb	%cl, %cl
 29312 cc8e 0F45C6   		cmovne	%esi, %eax
 29313              	.LVL2625:
9007:src/vm3.c     **** 
 29314              		.loc 1 9007 0
 29315 cc91 0FB6C0   		movzbl	%al, %eax
 29316 cc94 48C1E004 		salq	$4, %rax
 29317              	.LVL2626:
 29318 cc98 48038414 		addq	58088(%rsp,%rdx), %rax
 29318      E8E20000 
 29319 cca0 488B08   		movq	(%rax), %rcx
 29320 cca3 E9B040FF 		jmp	.L269
 29320      FF
 29321              	.LVL2627:
 29322              	.L211:
9056:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 29323              		.loc 1 9056 0
 29324 cca8 4489C0   		movl	%r8d, %eax
9057:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 29325              		.loc 1 9057 0
 29326 ccab 4489C2   		movl	%r8d, %edx
9055:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29327              		.loc 1 9055 0
 29328 ccae 41C1E806 		shrl	$6, %r8d
 29329              	.LVL2628:
9056:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 29330              		.loc 1 9056 0
 29331 ccb2 C1E810   		shrl	$16, %eax
 29332              	.LVL2629:
9055:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29333              		.loc 1 9055 0
 29334 ccb5 4488C1   		movb	%r8b, %cl
9057:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 29335              		.loc 1 9057 0
 29336 ccb8 C1EA0B   		shrl	$11, %edx
 29337              	.LVL2630:
9058:src/vm3.c     **** PC  =  nPC;
 29338              		.loc 1 9058 0
 29339 ccbb 83E01F   		andl	$31, %eax
9055:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29340              		.loc 1 9055 0
 29341 ccbe 83E11F   		andl	$31, %ecx
9058:src/vm3.c     **** PC  =  nPC;
 29342              		.loc 1 9058 0
 29343 ccc1 83E21F   		andl	$31, %edx
 29344 ccc4 8B048500 		movl	RF(,%rax,4), %eax
 29344      000000
9060:src/vm3.c     **** 
 29345              		.loc 1 9060 0
 29346 cccb 83050000 		addl	$4, nPC(%rip)
 29346      000004
9058:src/vm3.c     **** PC  =  nPC;
 29347              		.loc 1 9058 0
 29348 ccd2 D3E8     		shrl	%cl, %eax
9066:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29349              		.loc 1 9066 0
 29350 ccd4 89D9     		movl	%ebx, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1001


9058:src/vm3.c     **** PC  =  nPC;
 29351              		.loc 1 9058 0
 29352 ccd6 89049500 		movl	%eax, RF(,%rdx,4)
 29352      000000
9067:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
 29353              		.loc 1 9067 0
 29354 ccdd 89D8     		movl	%ebx, %eax
9066:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29355              		.loc 1 9066 0
 29356 ccdf C1E906   		shrl	$6, %ecx
9067:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
 29357              		.loc 1 9067 0
 29358 cce2 C1E810   		shrl	$16, %eax
9069:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 29359              		.loc 1 9069 0
 29360 cce5 C1EB0B   		shrl	$11, %ebx
 29361              	.LVL2631:
9066:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29362              		.loc 1 9066 0
 29363 cce8 83E11F   		andl	$31, %ecx
 29364              	.LVL2632:
9068:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29365              		.loc 1 9068 0
 29366 cceb 83E01F   		andl	$31, %eax
9070:src/vm3.c     **** }
 29367              		.loc 1 9070 0
 29368 ccee 83E31F   		andl	$31, %ebx
9068:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29369              		.loc 1 9068 0
 29370 ccf1 8B148500 		movl	RF(,%rax,4), %edx
 29370      000000
 29371 ccf8 85D2     		testl	%edx, %edx
 29372 ccfa 7916     		jns	.L1061
9068:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29373              		.loc 1 9068 0 is_stmt 0 discriminator 1
 29374 ccfc 84C9     		testb	%cl, %cl
 29375 ccfe 7412     		je	.L1061
 29376              	.LVL2633:
9070:src/vm3.c     **** }
 29377              		.loc 1 9070 0 is_stmt 1
 29378 cd00 4489E0   		movl	%r12d, %eax
 29379 cd03 D3E8     		shrl	%cl, %eax
 29380 cd05 F7D0     		notl	%eax
 29381 cd07 09D0     		orl	%edx, %eax
 29382 cd09 89049D00 		movl	%eax, RF(,%rbx,4)
 29382      000000
 29383 cd10 EB09     		jmp	.L1062
 29384              	.LVL2634:
 29385              	.L1061:
9074:src/vm3.c     **** }
 29386              		.loc 1 9074 0
 29387 cd12 D3FA     		sarl	%cl, %edx
 29388 cd14 89149D00 		movl	%edx, RF(,%rbx,4)
 29388      000000
 29389              	.LVL2635:
 29390              	.L1062:
9076:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1002


 29391              		.loc 1 9076 0
 29392 cd1b 8B050000 		movl	nPC(%rip), %eax
 29392      0000
9078:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29393              		.loc 1 9078 0
 29394 cd21 8D5003   		leal	3(%rax), %edx
9077:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29395              		.loc 1 9077 0
 29396 cd24 8D4804   		leal	4(%rax), %ecx
 29397              	.LVL2636:
9076:src/vm3.c     **** nPC  += 4;
 29398              		.loc 1 9076 0
 29399 cd27 89050000 		movl	%eax, PC(%rip)
 29399      0000
9078:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29400              		.loc 1 9078 0
 29401 cd2d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 29401      00000000 
 29402 cd35 89C2     		movl	%eax, %edx
9091:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29403              		.loc 1 9091 0
 29404 cd37 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29404      000000
9078:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29405              		.loc 1 9078 0
 29406 cd3e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29406      000000
9077:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29407              		.loc 1 9077 0
 29408 cd45 890D0000 		movl	%ecx, nPC(%rip)
 29408      0000
9091:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29409              		.loc 1 9091 0
 29410 cd4b 8D4805   		leal	5(%rax), %ecx
 29411 cd4e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29411      000000
9078:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29412              		.loc 1 9078 0
 29413 cd55 C1E218   		sall	$24, %edx
 29414 cd58 4109D0   		orl	%edx, %r8d
 29415 cd5b 8D5001   		leal	1(%rax), %edx
 29416 cd5e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29416      000000
 29417 cd65 C1E210   		sall	$16, %edx
 29418 cd68 4109D0   		orl	%edx, %r8d
 29419 cd6b 8D5002   		leal	2(%rax), %edx
 29420 cd6e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29420      000000
 29421 cd75 C1E208   		sall	$8, %edx
 29422 cd78 4109D0   		orl	%edx, %r8d
 29423              	.LVL2637:
9079:src/vm3.c     ****   if (op0 == 0x0) {
 29424              		.loc 1 9079 0
 29425 cd7b 4489C6   		movl	%r8d, %esi
9081:src/vm3.c     ****     op0 = op0 + funct;
 29426              		.loc 1 9081 0
 29427 cd7e 4488C2   		movb	%r8b, %dl
GAS LISTING /tmp/cc15eBE3.s 			page 1003


9079:src/vm3.c     ****   if (op0 == 0x0) {
 29428              		.loc 1 9079 0
 29429 cd81 C1EE1A   		shrl	$26, %esi
 29430              	.LVL2638:
9081:src/vm3.c     ****     op0 = op0 + funct;
 29431              		.loc 1 9081 0
 29432 cd84 83E23F   		andl	$63, %edx
 29433 cd87 8D7E2B   		leal	43(%rsi), %edi
 29434 cd8a 4084F6   		testb	%sil, %sil
 29435 cd8d 0F45D7   		cmovne	%edi, %edx
 29436              	.LVL2639:
9091:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29437              		.loc 1 9091 0
 29438 cd90 C1E110   		sall	$16, %ecx
 29439 cd93 C1E318   		sall	$24, %ebx
 29440 cd96 09CB     		orl	%ecx, %ebx
 29441 cd98 8D4807   		leal	7(%rax), %ecx
 29442 cd9b 83C006   		addl	$6, %eax
 29443 cd9e 0FB68000 		movzbl	VM_memory(%rax), %eax
 29443      000000
9089:src/vm3.c     **** 
 29444              		.loc 1 9089 0
 29445 cda5 0FB6D2   		movzbl	%dl, %edx
9091:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29446              		.loc 1 9091 0
 29447 cda8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29447      000000
9089:src/vm3.c     **** 
 29448              		.loc 1 9089 0
 29449 cdaf 48C1E204 		salq	$4, %rdx
 29450              	.LVL2640:
9091:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29451              		.loc 1 9091 0
 29452 cdb3 C1E008   		sall	$8, %eax
 29453 cdb6 09CB     		orl	%ecx, %ebx
 29454 cdb8 09C3     		orl	%eax, %ebx
 29455              	.LVL2641:
9092:src/vm3.c     ****   if (op1 == 0x0) {
 29456              		.loc 1 9092 0
 29457 cdba 89D9     		movl	%ebx, %ecx
9094:src/vm3.c     ****     op1 = op1 + funct;
 29458              		.loc 1 9094 0
 29459 cdbc 88D8     		movb	%bl, %al
9092:src/vm3.c     ****   if (op1 == 0x0) {
 29460              		.loc 1 9092 0
 29461 cdbe C1E91A   		shrl	$26, %ecx
 29462              	.LVL2642:
9094:src/vm3.c     ****     op1 = op1 + funct;
 29463              		.loc 1 9094 0
 29464 cdc1 83E03F   		andl	$63, %eax
 29465 cdc4 8D712B   		leal	43(%rcx), %esi
 29466 cdc7 84C9     		testb	%cl, %cl
 29467 cdc9 0F45C6   		cmovne	%esi, %eax
 29468              	.LVL2643:
9101:src/vm3.c     **** 
 29469              		.loc 1 9101 0
 29470 cdcc 0FB6C0   		movzbl	%al, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1004


 29471 cdcf 48C1E004 		salq	$4, %rax
 29472              	.LVL2644:
 29473 cdd3 48038414 		addq	58088(%rsp,%rdx), %rax
 29473      E8E20000 
 29474 cddb 488B08   		movq	(%rax), %rcx
 29475 cdde E9753FFF 		jmp	.L269
 29475      FF
 29476              	.LVL2645:
 29477              	.L110:
9109:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29478              		.loc 1 9109 0
 29479 cde3 4489C2   		movl	%r8d, %edx
9110:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 29480              		.loc 1 9110 0
 29481 cde6 4489C0   		movl	%r8d, %eax
9112:src/vm3.c     **** PC  =  nPC;
 29482              		.loc 1 9112 0
 29483 cde9 450FBFC0 		movswl	%r8w, %r8d
 29484              	.LVL2646:
9109:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29485              		.loc 1 9109 0
 29486 cded C1EA15   		shrl	$21, %edx
9110:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 29487              		.loc 1 9110 0
 29488 cdf0 C1E810   		shrl	$16, %eax
 29489              	.LVL2647:
9114:src/vm3.c     **** 
 29490              		.loc 1 9114 0
 29491 cdf3 83050000 		addl	$4, nPC(%rip)
 29491      000004
 29492              	.LVL2648:
9112:src/vm3.c     **** PC  =  nPC;
 29493              		.loc 1 9112 0
 29494 cdfa 83E21F   		andl	$31, %edx
 29495 cdfd 83E01F   		andl	$31, %eax
 29496 ce00 44230495 		andl	RF(,%rdx,4), %r8d
 29496      00000000 
 29497              	.LVL2649:
9122:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 29498              		.loc 1 9122 0
 29499 ce08 89DA     		movl	%ebx, %edx
 29500 ce0a C1EA0B   		shrl	$11, %edx
9123:src/vm3.c     **** PC  =  nPC;
 29501              		.loc 1 9123 0
 29502 ce0d 83E21F   		andl	$31, %edx
9112:src/vm3.c     **** PC  =  nPC;
 29503              		.loc 1 9112 0
 29504 ce10 44890485 		movl	%r8d, RF(,%rax,4)
 29504      00000000 
9121:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 29505              		.loc 1 9121 0
 29506 ce18 89D8     		movl	%ebx, %eax
9120:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29507              		.loc 1 9120 0
 29508 ce1a C1EB15   		shrl	$21, %ebx
 29509              	.LVL2650:
9121:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1005


 29510              		.loc 1 9121 0
 29511 ce1d C1E810   		shrl	$16, %eax
 29512              	.LVL2651:
9123:src/vm3.c     **** PC  =  nPC;
 29513              		.loc 1 9123 0
 29514 ce20 83E31F   		andl	$31, %ebx
 29515 ce23 83E01F   		andl	$31, %eax
 29516 ce26 8B048500 		movl	RF(,%rax,4), %eax
 29516      000000
 29517 ce2d 33049D00 		xorl	RF(,%rbx,4), %eax
 29517      000000
 29518 ce34 89049500 		movl	%eax, RF(,%rdx,4)
 29518      000000
9124:src/vm3.c     **** nPC  += 4;
 29519              		.loc 1 9124 0
 29520 ce3b 8B050000 		movl	nPC(%rip), %eax
 29520      0000
9126:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29521              		.loc 1 9126 0
 29522 ce41 8D5003   		leal	3(%rax), %edx
9125:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29523              		.loc 1 9125 0
 29524 ce44 8D4804   		leal	4(%rax), %ecx
9124:src/vm3.c     **** nPC  += 4;
 29525              		.loc 1 9124 0
 29526 ce47 89050000 		movl	%eax, PC(%rip)
 29526      0000
9126:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29527              		.loc 1 9126 0
 29528 ce4d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 29528      00000000 
 29529 ce55 89C2     		movl	%eax, %edx
9139:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29530              		.loc 1 9139 0
 29531 ce57 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29531      000000
9126:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29532              		.loc 1 9126 0
 29533 ce5e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29533      000000
9125:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29534              		.loc 1 9125 0
 29535 ce65 890D0000 		movl	%ecx, nPC(%rip)
 29535      0000
9139:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29536              		.loc 1 9139 0
 29537 ce6b 8D4805   		leal	5(%rax), %ecx
 29538 ce6e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29538      000000
9126:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29539              		.loc 1 9126 0
 29540 ce75 C1E218   		sall	$24, %edx
 29541 ce78 4109D0   		orl	%edx, %r8d
 29542 ce7b 8D5001   		leal	1(%rax), %edx
 29543 ce7e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29543      000000
 29544 ce85 C1E210   		sall	$16, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1006


 29545 ce88 4109D0   		orl	%edx, %r8d
 29546 ce8b 8D5002   		leal	2(%rax), %edx
 29547 ce8e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29547      000000
 29548 ce95 C1E208   		sall	$8, %edx
 29549 ce98 4109D0   		orl	%edx, %r8d
 29550              	.LVL2652:
9127:src/vm3.c     ****   if (op0 == 0x0) {
 29551              		.loc 1 9127 0
 29552 ce9b 4489C6   		movl	%r8d, %esi
9129:src/vm3.c     ****     op0 = op0 + funct;
 29553              		.loc 1 9129 0
 29554 ce9e 4488C2   		movb	%r8b, %dl
9127:src/vm3.c     ****   if (op0 == 0x0) {
 29555              		.loc 1 9127 0
 29556 cea1 C1EE1A   		shrl	$26, %esi
 29557              	.LVL2653:
9129:src/vm3.c     ****     op0 = op0 + funct;
 29558              		.loc 1 9129 0
 29559 cea4 83E23F   		andl	$63, %edx
 29560 cea7 8D7E2B   		leal	43(%rsi), %edi
 29561 ceaa 4084F6   		testb	%sil, %sil
 29562 cead 0F45D7   		cmovne	%edi, %edx
 29563              	.LVL2654:
9139:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29564              		.loc 1 9139 0
 29565 ceb0 C1E110   		sall	$16, %ecx
 29566 ceb3 C1E318   		sall	$24, %ebx
 29567 ceb6 09CB     		orl	%ecx, %ebx
 29568 ceb8 8D4807   		leal	7(%rax), %ecx
 29569 cebb 83C006   		addl	$6, %eax
 29570 cebe 0FB68000 		movzbl	VM_memory(%rax), %eax
 29570      000000
9137:src/vm3.c     **** 
 29571              		.loc 1 9137 0
 29572 cec5 0FB6D2   		movzbl	%dl, %edx
9139:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29573              		.loc 1 9139 0
 29574 cec8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29574      000000
9137:src/vm3.c     **** 
 29575              		.loc 1 9137 0
 29576 cecf 48C1E204 		salq	$4, %rdx
 29577              	.LVL2655:
9139:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29578              		.loc 1 9139 0
 29579 ced3 C1E008   		sall	$8, %eax
 29580 ced6 09CB     		orl	%ecx, %ebx
 29581 ced8 09C3     		orl	%eax, %ebx
 29582              	.LVL2656:
9140:src/vm3.c     ****   if (op1 == 0x0) {
 29583              		.loc 1 9140 0
 29584 ceda 89D9     		movl	%ebx, %ecx
9142:src/vm3.c     ****     op1 = op1 + funct;
 29585              		.loc 1 9142 0
 29586 cedc 88D8     		movb	%bl, %al
9140:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 1007


 29587              		.loc 1 9140 0
 29588 cede C1E91A   		shrl	$26, %ecx
 29589              	.LVL2657:
9142:src/vm3.c     ****     op1 = op1 + funct;
 29590              		.loc 1 9142 0
 29591 cee1 83E03F   		andl	$63, %eax
 29592 cee4 8D712B   		leal	43(%rcx), %esi
 29593 cee7 84C9     		testb	%cl, %cl
 29594 cee9 0F45C6   		cmovne	%esi, %eax
 29595              	.LVL2658:
9149:src/vm3.c     **** 
 29596              		.loc 1 9149 0
 29597 ceec 0FB6C0   		movzbl	%al, %eax
 29598 ceef 48C1E004 		salq	$4, %rax
 29599              	.LVL2659:
 29600 cef3 48038414 		addq	58088(%rsp,%rdx), %rax
 29600      E8E20000 
 29601 cefb 488B08   		movq	(%rax), %rcx
 29602 cefe E9553EFF 		jmp	.L269
 29602      FF
 29603              	.LVL2660:
 29604              	.L183:
9157:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29605              		.loc 1 9157 0
 29606 cf03 4489C0   		movl	%r8d, %eax
9160:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 29607              		.loc 1 9160 0
 29608 cf06 410FBFC8 		movswl	%r8w, %ecx
9158:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 29609              		.loc 1 9158 0
 29610 cf0a 41C1E810 		shrl	$16, %r8d
 29611              	.LVL2661:
9157:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29612              		.loc 1 9157 0
 29613 cf0e C1E815   		shrl	$21, %eax
 29614              	.LVL2662:
9160:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 29615              		.loc 1 9160 0
 29616 cf11 4183E01F 		andl	$31, %r8d
9165:src/vm3.c     **** 
 29617              		.loc 1 9165 0
 29618 cf15 83050000 		addl	$4, nPC(%rip)
 29618      000004
 29619              	.LVL2663:
9160:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 29620              		.loc 1 9160 0
 29621 cf1c 83E01F   		andl	$31, %eax
 29622 cf1f 8B148500 		movl	RF(,%rax,4), %edx
 29622      000000
 29623 cf26 428B0485 		movl	RF(,%r8,4), %eax
 29623      00000000 
 29624 cf2e 8D3411   		leal	(%rcx,%rdx), %esi
 29625 cf31 89C7     		movl	%eax, %edi
 29626 cf33 C1EF18   		shrl	$24, %edi
 29627 cf36 4088BE00 		movb	%dil, VM_memory(%rsi)
 29627      000000
9161:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
GAS LISTING /tmp/cc15eBE3.s 			page 1008


 29628              		.loc 1 9161 0
 29629 cf3d 8D741101 		leal	1(%rcx,%rdx), %esi
 29630 cf41 89C7     		movl	%eax, %edi
 29631 cf43 C1EF10   		shrl	$16, %edi
 29632 cf46 4088BE00 		movb	%dil, VM_memory(%rsi)
 29632      000000
9162:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 29633              		.loc 1 9162 0
 29634 cf4d 8D741102 		leal	2(%rcx,%rdx), %esi
9163:src/vm3.c     **** PC  =  nPC;
 29635              		.loc 1 9163 0
 29636 cf51 8D541103 		leal	3(%rcx,%rdx), %edx
9162:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 29637              		.loc 1 9162 0
 29638 cf55 0FB6FC   		movzbl	%ah, %edi
 29639 cf58 4088BE00 		movb	%dil, VM_memory(%rsi)
 29639      000000
9163:src/vm3.c     **** PC  =  nPC;
 29640              		.loc 1 9163 0
 29641 cf5f 88820000 		movb	%al, VM_memory(%rdx)
 29641      0000
9171:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 29642              		.loc 1 9171 0
 29643 cf65 89DA     		movl	%ebx, %edx
 29644 cf67 C1EA15   		shrl	$21, %edx
9172:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 29645              		.loc 1 9172 0
 29646 cf6a 89D8     		movl	%ebx, %eax
9174:src/vm3.c     **** PC  =  nPC;
 29647              		.loc 1 9174 0
 29648 cf6c 0FBFDB   		movswl	%bx, %ebx
 29649              	.LVL2664:
 29650 cf6f 83E21F   		andl	$31, %edx
9172:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 29651              		.loc 1 9172 0
 29652 cf72 C1E810   		shrl	$16, %eax
 29653              	.LVL2665:
9174:src/vm3.c     **** PC  =  nPC;
 29654              		.loc 1 9174 0
 29655 cf75 031C9500 		addl	RF(,%rdx,4), %ebx
 29655      000000
 29656              	.LVL2666:
 29657 cf7c 83E01F   		andl	$31, %eax
 29658 cf7f 891C8500 		movl	%ebx, RF(,%rax,4)
 29658      000000
9175:src/vm3.c     **** nPC  += 4;
 29659              		.loc 1 9175 0
 29660 cf86 8B050000 		movl	nPC(%rip), %eax
 29660      0000
9177:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29661              		.loc 1 9177 0
 29662 cf8c 8D5003   		leal	3(%rax), %edx
9176:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29663              		.loc 1 9176 0
 29664 cf8f 8D4804   		leal	4(%rax), %ecx
9175:src/vm3.c     **** nPC  += 4;
 29665              		.loc 1 9175 0
GAS LISTING /tmp/cc15eBE3.s 			page 1009


 29666 cf92 89050000 		movl	%eax, PC(%rip)
 29666      0000
9177:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29667              		.loc 1 9177 0
 29668 cf98 440FB682 		movzbl	VM_memory(%rdx), %r8d
 29668      00000000 
 29669 cfa0 89C2     		movl	%eax, %edx
9190:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29670              		.loc 1 9190 0
 29671 cfa2 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29671      000000
9177:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29672              		.loc 1 9177 0
 29673 cfa9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29673      000000
9176:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 29674              		.loc 1 9176 0
 29675 cfb0 890D0000 		movl	%ecx, nPC(%rip)
 29675      0000
9190:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29676              		.loc 1 9190 0
 29677 cfb6 8D4805   		leal	5(%rax), %ecx
 29678 cfb9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29678      000000
9177:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29679              		.loc 1 9177 0
 29680 cfc0 C1E218   		sall	$24, %edx
 29681 cfc3 4109D0   		orl	%edx, %r8d
 29682 cfc6 8D5001   		leal	1(%rax), %edx
 29683 cfc9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29683      000000
 29684 cfd0 C1E210   		sall	$16, %edx
 29685 cfd3 4109D0   		orl	%edx, %r8d
 29686 cfd6 8D5002   		leal	2(%rax), %edx
 29687 cfd9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 29687      000000
 29688 cfe0 C1E208   		sall	$8, %edx
 29689 cfe3 4109D0   		orl	%edx, %r8d
 29690              	.LVL2667:
9178:src/vm3.c     ****   if (op0 == 0x0) {
 29691              		.loc 1 9178 0
 29692 cfe6 4489C6   		movl	%r8d, %esi
9180:src/vm3.c     ****     op0 = op0 + funct;
 29693              		.loc 1 9180 0
 29694 cfe9 4488C2   		movb	%r8b, %dl
9178:src/vm3.c     ****   if (op0 == 0x0) {
 29695              		.loc 1 9178 0
 29696 cfec C1EE1A   		shrl	$26, %esi
 29697              	.LVL2668:
9180:src/vm3.c     ****     op0 = op0 + funct;
 29698              		.loc 1 9180 0
 29699 cfef 83E23F   		andl	$63, %edx
 29700 cff2 8D7E2B   		leal	43(%rsi), %edi
 29701 cff5 4084F6   		testb	%sil, %sil
 29702 cff8 0F45D7   		cmovne	%edi, %edx
 29703              	.LVL2669:
9190:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1010


 29704              		.loc 1 9190 0
 29705 cffb C1E110   		sall	$16, %ecx
 29706 cffe C1E318   		sall	$24, %ebx
 29707 d001 09CB     		orl	%ecx, %ebx
 29708 d003 8D4807   		leal	7(%rax), %ecx
 29709 d006 83C006   		addl	$6, %eax
 29710 d009 0FB68000 		movzbl	VM_memory(%rax), %eax
 29710      000000
9188:src/vm3.c     **** 
 29711              		.loc 1 9188 0
 29712 d010 0FB6D2   		movzbl	%dl, %edx
9190:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29713              		.loc 1 9190 0
 29714 d013 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29714      000000
9188:src/vm3.c     **** 
 29715              		.loc 1 9188 0
 29716 d01a 48C1E204 		salq	$4, %rdx
 29717              	.LVL2670:
9190:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29718              		.loc 1 9190 0
 29719 d01e C1E008   		sall	$8, %eax
 29720 d021 09CB     		orl	%ecx, %ebx
 29721 d023 09C3     		orl	%eax, %ebx
 29722              	.LVL2671:
9191:src/vm3.c     ****   if (op1 == 0x0) {
 29723              		.loc 1 9191 0
 29724 d025 89D9     		movl	%ebx, %ecx
9193:src/vm3.c     ****     op1 = op1 + funct;
 29725              		.loc 1 9193 0
 29726 d027 88D8     		movb	%bl, %al
9191:src/vm3.c     ****   if (op1 == 0x0) {
 29727              		.loc 1 9191 0
 29728 d029 C1E91A   		shrl	$26, %ecx
 29729              	.LVL2672:
9193:src/vm3.c     ****     op1 = op1 + funct;
 29730              		.loc 1 9193 0
 29731 d02c 83E03F   		andl	$63, %eax
 29732 d02f 8D712B   		leal	43(%rcx), %esi
 29733 d032 84C9     		testb	%cl, %cl
 29734 d034 0F45C6   		cmovne	%esi, %eax
 29735              	.LVL2673:
9200:src/vm3.c     **** 
 29736              		.loc 1 9200 0
 29737 d037 0FB6C0   		movzbl	%al, %eax
 29738 d03a 48C1E004 		salq	$4, %rax
 29739              	.LVL2674:
 29740 d03e 48038414 		addq	58088(%rsp,%rdx), %rax
 29740      E8E20000 
 29741 d046 488B08   		movq	(%rax), %rcx
 29742 d049 E90A3DFF 		jmp	.L269
 29742      FF
 29743              	.LVL2675:
 29744              	.L27:
9209:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 29745              		.loc 1 9209 0
 29746 d04e 4489C0   		movl	%r8d, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1011


9210:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 29747              		.loc 1 9210 0
 29748 d051 4489C2   		movl	%r8d, %edx
9208:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29749              		.loc 1 9208 0
 29750 d054 41C1E806 		shrl	$6, %r8d
 29751              	.LVL2676:
9209:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 29752              		.loc 1 9209 0
 29753 d058 C1E810   		shrl	$16, %eax
 29754              	.LVL2677:
9208:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29755              		.loc 1 9208 0
 29756 d05b 4488C1   		movb	%r8b, %cl
9210:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 29757              		.loc 1 9210 0
 29758 d05e C1EA0B   		shrl	$11, %edx
 29759              	.LVL2678:
9211:src/vm3.c     **** PC  =  nPC;
 29760              		.loc 1 9211 0
 29761 d061 83E01F   		andl	$31, %eax
9208:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29762              		.loc 1 9208 0
 29763 d064 83E11F   		andl	$31, %ecx
9211:src/vm3.c     **** PC  =  nPC;
 29764              		.loc 1 9211 0
 29765 d067 83E21F   		andl	$31, %edx
 29766 d06a 8B048500 		movl	RF(,%rax,4), %eax
 29766      000000
 29767 d071 D3E0     		sall	%cl, %eax
9219:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
 29768              		.loc 1 9219 0
 29769 d073 89D9     		movl	%ebx, %ecx
 29770 d075 C1E915   		shrl	$21, %ecx
9211:src/vm3.c     **** PC  =  nPC;
 29771              		.loc 1 9211 0
 29772 d078 89049500 		movl	%eax, RF(,%rdx,4)
 29772      000000
9212:src/vm3.c     **** nPC  += 4;
 29773              		.loc 1 9212 0
 29774 d07f 8B050000 		movl	nPC(%rip), %eax
 29774      0000
9220:src/vm3.c     **** {
 29775              		.loc 1 9220 0
 29776 d085 83E11F   		andl	$31, %ecx
 29777 d088 833C8D00 		cmpl	$0, RF(,%rcx,4)
 29777      00000000 
9213:src/vm3.c     **** 
 29778              		.loc 1 9213 0
 29779 d090 8D5004   		leal	4(%rax), %edx
 29780              	.LVL2679:
 29781 d093 448D4007 		leal	7(%rax), %r8d
 29782 d097 8D7805   		leal	5(%rax), %edi
 29783 d09a 8D7006   		leal	6(%rax), %esi
 29784 d09d 4189D1   		movl	%edx, %r9d
9223:src/vm3.c     ****   nPC  += (immediate << 2);
 29785              		.loc 1 9223 0
GAS LISTING /tmp/cc15eBE3.s 			page 1012


 29786 d0a0 89150000 		movl	%edx, PC(%rip)
 29786      0000
9220:src/vm3.c     **** {
 29787              		.loc 1 9220 0
 29788 d0a6 0F8FB600 		jg	.L1075
 29788      0000
 29789              	.LVL2680:
9224:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 29790              		.loc 1 9224 0
 29791 d0ac 0FBFDB   		movswl	%bx, %ebx
 29792              	.LVL2681:
9225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29793              		.loc 1 9225 0
 29794 d0af 450FB680 		movzbl	VM_memory(%r8), %r8d
 29794      00000000 
9224:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 29795              		.loc 1 9224 0
 29796 d0b7 8D049A   		leal	(%rdx,%rbx,4), %eax
9225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29797              		.loc 1 9225 0
 29798 d0ba 410FB691 		movzbl	VM_memory(%r9), %edx
 29798      00000000 
9224:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 29799              		.loc 1 9224 0
 29800 d0c2 89050000 		movl	%eax, nPC(%rip)
 29800      0000
9225:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29801              		.loc 1 9225 0
 29802 d0c8 C1E218   		sall	$24, %edx
 29803 d0cb 4109D0   		orl	%edx, %r8d
 29804 d0ce 0FB69700 		movzbl	VM_memory(%rdi), %edx
 29804      000000
 29805 d0d5 C1E210   		sall	$16, %edx
 29806 d0d8 4109D0   		orl	%edx, %r8d
 29807 d0db 0FB69600 		movzbl	VM_memory(%rsi), %edx
 29807      000000
 29808 d0e2 C1E208   		sall	$8, %edx
 29809 d0e5 4109D0   		orl	%edx, %r8d
 29810              	.LVL2682:
9226:src/vm3.c     ****   if (op0 == 0x0) {
 29811              		.loc 1 9226 0
 29812 d0e8 4489C1   		movl	%r8d, %ecx
9228:src/vm3.c     ****     op0 = op0 + funct;
 29813              		.loc 1 9228 0
 29814 d0eb 4488C2   		movb	%r8b, %dl
9226:src/vm3.c     ****   if (op0 == 0x0) {
 29815              		.loc 1 9226 0
 29816 d0ee C1E91A   		shrl	$26, %ecx
 29817              	.LVL2683:
9228:src/vm3.c     ****     op0 = op0 + funct;
 29818              		.loc 1 9228 0
 29819 d0f1 83E23F   		andl	$63, %edx
 29820 d0f4 8D712B   		leal	43(%rcx), %esi
 29821 d0f7 84C9     		testb	%cl, %cl
9238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29822              		.loc 1 9238 0
 29823 d0f9 8D4803   		leal	3(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1013


 29824              	.LVL2684:
 29825 d0fc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29825      000000
 29826              	.LVL2685:
 29827 d103 89C1     		movl	%eax, %ecx
9228:src/vm3.c     ****     op0 = op0 + funct;
 29828              		.loc 1 9228 0
 29829 d105 0F45D6   		cmovne	%esi, %edx
 29830              	.LVL2686:
9238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29831              		.loc 1 9238 0
 29832 d108 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29832      000000
9236:src/vm3.c     **** 
 29833              		.loc 1 9236 0
 29834 d10f 0FB6D2   		movzbl	%dl, %edx
 29835 d112 48C1E204 		salq	$4, %rdx
 29836              	.LVL2687:
9238:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29837              		.loc 1 9238 0
 29838 d116 C1E118   		sall	$24, %ecx
 29839 d119 09CB     		orl	%ecx, %ebx
 29840 d11b 8D4801   		leal	1(%rax), %ecx
 29841 d11e 83C002   		addl	$2, %eax
 29842 d121 0FB68000 		movzbl	VM_memory(%rax), %eax
 29842      000000
 29843 d128 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29843      000000
 29844 d12f C1E008   		sall	$8, %eax
 29845 d132 C1E110   		sall	$16, %ecx
 29846 d135 09CB     		orl	%ecx, %ebx
 29847 d137 09C3     		orl	%eax, %ebx
 29848              	.LVL2688:
9239:src/vm3.c     ****   if (op1 == 0x0) {
 29849              		.loc 1 9239 0
 29850 d139 89D9     		movl	%ebx, %ecx
9241:src/vm3.c     ****     op1 = op1 + funct;
 29851              		.loc 1 9241 0
 29852 d13b 88D8     		movb	%bl, %al
9239:src/vm3.c     ****   if (op1 == 0x0) {
 29853              		.loc 1 9239 0
 29854 d13d C1E91A   		shrl	$26, %ecx
 29855              	.LVL2689:
9241:src/vm3.c     ****     op1 = op1 + funct;
 29856              		.loc 1 9241 0
 29857 d140 83E03F   		andl	$63, %eax
 29858 d143 8D712B   		leal	43(%rcx), %esi
 29859 d146 84C9     		testb	%cl, %cl
 29860 d148 0F45C6   		cmovne	%esi, %eax
 29861              	.LVL2690:
9248:src/vm3.c     **** 
 29862              		.loc 1 9248 0
 29863 d14b 0FB6C0   		movzbl	%al, %eax
 29864 d14e 48C1E004 		salq	$4, %rax
 29865              	.LVL2691:
 29866 d152 48038414 		addq	58088(%rsp,%rdx), %rax
 29866      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 1014


 29867 d15a 488B08   		movq	(%rax), %rcx
 29868 d15d E9F63BFF 		jmp	.L269
 29868      FF
 29869              	.LVL2692:
 29870              	.L1075:
9257:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29871              		.loc 1 9257 0
 29872 d162 410FB691 		movzbl	VM_memory(%r9), %edx
 29872      00000000 
 29873 d16a 450FB680 		movzbl	VM_memory(%r8), %r8d
 29873      00000000 
9255:src/vm3.c     **** }
 29874              		.loc 1 9255 0
 29875 d172 8D4808   		leal	8(%rax), %ecx
9270:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29876              		.loc 1 9270 0
 29877 d175 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 29877      000000
 29878              	.LVL2693:
9255:src/vm3.c     **** }
 29879              		.loc 1 9255 0
 29880 d17c 890D0000 		movl	%ecx, nPC(%rip)
 29880      0000
9270:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29881              		.loc 1 9270 0
 29882 d182 8D4809   		leal	9(%rax), %ecx
9257:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29883              		.loc 1 9257 0
 29884 d185 C1E218   		sall	$24, %edx
9270:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29885              		.loc 1 9270 0
 29886 d188 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29886      000000
9257:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29887              		.loc 1 9257 0
 29888 d18f 4109D0   		orl	%edx, %r8d
 29889 d192 0FB69700 		movzbl	VM_memory(%rdi), %edx
 29889      000000
 29890 d199 C1E210   		sall	$16, %edx
 29891 d19c 4109D0   		orl	%edx, %r8d
 29892 d19f 0FB69600 		movzbl	VM_memory(%rsi), %edx
 29892      000000
 29893 d1a6 C1E208   		sall	$8, %edx
 29894 d1a9 4109D0   		orl	%edx, %r8d
 29895              	.LVL2694:
9258:src/vm3.c     ****   if (op0 == 0x0) {
 29896              		.loc 1 9258 0
 29897 d1ac 4489C6   		movl	%r8d, %esi
9260:src/vm3.c     ****     op0 = op0 + funct;
 29898              		.loc 1 9260 0
 29899 d1af 4488C2   		movb	%r8b, %dl
9258:src/vm3.c     ****   if (op0 == 0x0) {
 29900              		.loc 1 9258 0
 29901 d1b2 C1EE1A   		shrl	$26, %esi
 29902              	.LVL2695:
9260:src/vm3.c     ****     op0 = op0 + funct;
 29903              		.loc 1 9260 0
GAS LISTING /tmp/cc15eBE3.s 			page 1015


 29904 d1b5 83E23F   		andl	$63, %edx
 29905 d1b8 8D7E2B   		leal	43(%rsi), %edi
 29906 d1bb 4084F6   		testb	%sil, %sil
 29907 d1be 0F45D7   		cmovne	%edi, %edx
 29908              	.LVL2696:
9270:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29909              		.loc 1 9270 0
 29910 d1c1 C1E110   		sall	$16, %ecx
 29911 d1c4 C1E318   		sall	$24, %ebx
 29912 d1c7 09CB     		orl	%ecx, %ebx
 29913 d1c9 8D480B   		leal	11(%rax), %ecx
 29914 d1cc 83C00A   		addl	$10, %eax
 29915 d1cf 0FB68000 		movzbl	VM_memory(%rax), %eax
 29915      000000
9268:src/vm3.c     **** 
 29916              		.loc 1 9268 0
 29917 d1d6 0FB6D2   		movzbl	%dl, %edx
9270:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29918              		.loc 1 9270 0
 29919 d1d9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 29919      000000
9268:src/vm3.c     **** 
 29920              		.loc 1 9268 0
 29921 d1e0 48C1E204 		salq	$4, %rdx
 29922              	.LVL2697:
9270:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 29923              		.loc 1 9270 0
 29924 d1e4 C1E008   		sall	$8, %eax
 29925 d1e7 09CB     		orl	%ecx, %ebx
 29926 d1e9 09C3     		orl	%eax, %ebx
 29927              	.LVL2698:
9271:src/vm3.c     ****   if (op1 == 0x0) {
 29928              		.loc 1 9271 0
 29929 d1eb 89D9     		movl	%ebx, %ecx
9273:src/vm3.c     ****     op1 = op1 + funct;
 29930              		.loc 1 9273 0
 29931 d1ed 88D8     		movb	%bl, %al
9271:src/vm3.c     ****   if (op1 == 0x0) {
 29932              		.loc 1 9271 0
 29933 d1ef C1E91A   		shrl	$26, %ecx
 29934              	.LVL2699:
9273:src/vm3.c     ****     op1 = op1 + funct;
 29935              		.loc 1 9273 0
 29936 d1f2 83E03F   		andl	$63, %eax
 29937 d1f5 8D712B   		leal	43(%rcx), %esi
 29938 d1f8 84C9     		testb	%cl, %cl
 29939 d1fa 0F45C6   		cmovne	%esi, %eax
 29940              	.LVL2700:
9280:src/vm3.c     **** 
 29941              		.loc 1 9280 0
 29942 d1fd 0FB6C0   		movzbl	%al, %eax
 29943 d200 48C1E004 		salq	$4, %rax
 29944              	.LVL2701:
 29945 d204 48038414 		addq	58088(%rsp,%rdx), %rax
 29945      E8E20000 
 29946 d20c 488B08   		movq	(%rax), %rcx
 29947 d20f E9443BFF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 1016


 29947      FF
 29948              	.LVL2702:
 29949              	.L181:
9288:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29950              		.loc 1 9288 0
 29951 d214 4489C0   		movl	%r8d, %eax
9291:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 29952              		.loc 1 9291 0
 29953 d217 410FBFC8 		movswl	%r8w, %ecx
9289:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 29954              		.loc 1 9289 0
 29955 d21b 41C1E810 		shrl	$16, %r8d
 29956              	.LVL2703:
9288:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 29957              		.loc 1 9288 0
 29958 d21f C1E815   		shrl	$21, %eax
 29959              	.LVL2704:
9291:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 29960              		.loc 1 9291 0
 29961 d222 4183E01F 		andl	$31, %r8d
9304:src/vm3.c     **** nPC = address << 2;
 29962              		.loc 1 9304 0
 29963 d226 81E3FFFF 		andl	$67108863, %ebx
 29963      FF03
 29964              	.LVL2705:
9291:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 29965              		.loc 1 9291 0
 29966 d22c 83E01F   		andl	$31, %eax
 29967 d22f 8B148500 		movl	RF(,%rax,4), %edx
 29967      000000
 29968 d236 428B0485 		movl	RF(,%r8,4), %eax
 29968      00000000 
 29969 d23e 8D3411   		leal	(%rcx,%rdx), %esi
 29970 d241 89C7     		movl	%eax, %edi
 29971 d243 C1EF18   		shrl	$24, %edi
 29972 d246 4088BE00 		movb	%dil, VM_memory(%rsi)
 29972      000000
9292:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 29973              		.loc 1 9292 0
 29974 d24d 8D741101 		leal	1(%rcx,%rdx), %esi
 29975 d251 89C7     		movl	%eax, %edi
 29976 d253 C1EF10   		shrl	$16, %edi
 29977 d256 4088BE00 		movb	%dil, VM_memory(%rsi)
 29977      000000
9293:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 29978              		.loc 1 9293 0
 29979 d25d 8D741102 		leal	2(%rcx,%rdx), %esi
9294:src/vm3.c     **** PC  =  nPC;
 29980              		.loc 1 9294 0
 29981 d261 8D541103 		leal	3(%rcx,%rdx), %edx
9293:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 29982              		.loc 1 9293 0
 29983 d265 0FB6FC   		movzbl	%ah, %edi
 29984 d268 4088BE00 		movb	%dil, VM_memory(%rsi)
 29984      000000
9294:src/vm3.c     **** PC  =  nPC;
 29985              		.loc 1 9294 0
GAS LISTING /tmp/cc15eBE3.s 			page 1017


 29986 d26f 88820000 		movb	%al, VM_memory(%rdx)
 29986      0000
9295:src/vm3.c     **** nPC  += 4;
 29987              		.loc 1 9295 0
 29988 d275 8B050000 		movl	nPC(%rip), %eax
 29988      0000
9296:src/vm3.c     **** 
 29989              		.loc 1 9296 0
 29990 d27b 83050000 		addl	$4, nPC(%rip)
 29990      000004
9303:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 29991              		.loc 1 9303 0
 29992 d282 8B150000 		movl	nPC(%rip), %edx
 29992      0000
9302:src/vm3.c     **** PC = nPC;
 29993              		.loc 1 9302 0
 29994 d288 83C008   		addl	$8, %eax
9306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 29995              		.loc 1 9306 0
 29996 d28b 8D4A03   		leal	3(%rdx), %ecx
 29997              	.LVL2706:
9303:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 29998              		.loc 1 9303 0
 29999 d28e 89150000 		movl	%edx, PC(%rip)
 29999      0000
9302:src/vm3.c     **** PC = nPC;
 30000              		.loc 1 9302 0
 30001 d294 89050000 		movl	%eax, RF+124(%rip)
 30001      0000
9305:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30002              		.loc 1 9305 0
 30003 d29a 8D049D00 		leal	0(,%rbx,4), %eax
 30003      000000
9306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30004              		.loc 1 9306 0
 30005 d2a1 440FB681 		movzbl	VM_memory(%rcx), %r8d
 30005      00000000 
 30006 d2a9 89D1     		movl	%edx, %ecx
 30007 d2ab 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30007      000000
9305:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30008              		.loc 1 9305 0
 30009 d2b2 89050000 		movl	%eax, nPC(%rip)
 30009      0000
9306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30010              		.loc 1 9306 0
 30011 d2b8 C1E118   		sall	$24, %ecx
 30012 d2bb 4109C8   		orl	%ecx, %r8d
 30013 d2be 8D4A01   		leal	1(%rdx), %ecx
 30014 d2c1 83C202   		addl	$2, %edx
 30015 d2c4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30015      000000
 30016 d2cb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30016      000000
 30017 d2d2 C1E208   		sall	$8, %edx
 30018 d2d5 C1E110   		sall	$16, %ecx
 30019 d2d8 4109C8   		orl	%ecx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1018


 30020 d2db 4109D0   		orl	%edx, %r8d
 30021              	.LVL2707:
9307:src/vm3.c     ****   if (op0 == 0x0) {
 30022              		.loc 1 9307 0
 30023 d2de 4489C1   		movl	%r8d, %ecx
9309:src/vm3.c     ****     op0 = op0 + funct;
 30024              		.loc 1 9309 0
 30025 d2e1 4488C2   		movb	%r8b, %dl
9307:src/vm3.c     ****   if (op0 == 0x0) {
 30026              		.loc 1 9307 0
 30027 d2e4 C1E91A   		shrl	$26, %ecx
 30028              	.LVL2708:
9309:src/vm3.c     ****     op0 = op0 + funct;
 30029              		.loc 1 9309 0
 30030 d2e7 83E23F   		andl	$63, %edx
 30031 d2ea 8D712B   		leal	43(%rcx), %esi
 30032 d2ed 84C9     		testb	%cl, %cl
9319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30033              		.loc 1 9319 0
 30034 d2ef 8D4803   		leal	3(%rax), %ecx
 30035              	.LVL2709:
 30036 d2f2 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30036      000000
 30037 d2f9 89C1     		movl	%eax, %ecx
9309:src/vm3.c     ****     op0 = op0 + funct;
 30038              		.loc 1 9309 0
 30039 d2fb 0F45D6   		cmovne	%esi, %edx
 30040              	.LVL2710:
9319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30041              		.loc 1 9319 0
 30042 d2fe 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30042      000000
9317:src/vm3.c     **** 
 30043              		.loc 1 9317 0
 30044 d305 0FB6D2   		movzbl	%dl, %edx
 30045 d308 48C1E204 		salq	$4, %rdx
 30046              	.LVL2711:
9319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30047              		.loc 1 9319 0
 30048 d30c C1E118   		sall	$24, %ecx
 30049 d30f 09CB     		orl	%ecx, %ebx
 30050 d311 8D4801   		leal	1(%rax), %ecx
 30051 d314 83C002   		addl	$2, %eax
 30052 d317 0FB68000 		movzbl	VM_memory(%rax), %eax
 30052      000000
 30053 d31e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30053      000000
 30054 d325 C1E008   		sall	$8, %eax
 30055 d328 C1E110   		sall	$16, %ecx
 30056 d32b 09CB     		orl	%ecx, %ebx
 30057 d32d 09C3     		orl	%eax, %ebx
 30058              	.LVL2712:
9320:src/vm3.c     ****   if (op1 == 0x0) {
 30059              		.loc 1 9320 0
 30060 d32f 89D9     		movl	%ebx, %ecx
9322:src/vm3.c     ****     op1 = op1 + funct;
 30061              		.loc 1 9322 0
GAS LISTING /tmp/cc15eBE3.s 			page 1019


 30062 d331 88D8     		movb	%bl, %al
9320:src/vm3.c     ****   if (op1 == 0x0) {
 30063              		.loc 1 9320 0
 30064 d333 C1E91A   		shrl	$26, %ecx
 30065              	.LVL2713:
9322:src/vm3.c     ****     op1 = op1 + funct;
 30066              		.loc 1 9322 0
 30067 d336 83E03F   		andl	$63, %eax
 30068 d339 8D712B   		leal	43(%rcx), %esi
 30069 d33c 84C9     		testb	%cl, %cl
 30070 d33e 0F45C6   		cmovne	%esi, %eax
 30071              	.LVL2714:
9329:src/vm3.c     **** 
 30072              		.loc 1 9329 0
 30073 d341 0FB6C0   		movzbl	%al, %eax
 30074 d344 48C1E004 		salq	$4, %rax
 30075              	.LVL2715:
 30076 d348 48038414 		addq	58088(%rsp,%rdx), %rax
 30076      E8E20000 
 30077 d350 488B08   		movq	(%rax), %rcx
 30078 d353 E9003AFF 		jmp	.L269
 30078      FF
 30079              	.LVL2716:
 30080              	.L230:
9363:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30081              		.loc 1 9363 0
 30082 d358 4489C2   		movl	%r8d, %edx
9364:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30083              		.loc 1 9364 0
 30084 d35b 4489C0   		movl	%r8d, %eax
9366:src/vm3.c     **** PC  =  nPC;
 30085              		.loc 1 9366 0
 30086 d35e 450FBFC0 		movswl	%r8w, %r8d
 30087              	.LVL2717:
9363:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30088              		.loc 1 9363 0
 30089 d362 C1EA15   		shrl	$21, %edx
9364:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30090              		.loc 1 9364 0
 30091 d365 C1E810   		shrl	$16, %eax
 30092              	.LVL2718:
9368:src/vm3.c     **** 
 30093              		.loc 1 9368 0
 30094 d368 83050000 		addl	$4, nPC(%rip)
 30094      000004
 30095              	.LVL2719:
9366:src/vm3.c     **** PC  =  nPC;
 30096              		.loc 1 9366 0
 30097 d36f 83E21F   		andl	$31, %edx
 30098 d372 83E01F   		andl	$31, %eax
 30099 d375 440B0495 		orl	RF(,%rdx,4), %r8d
 30099      00000000 
 30100              	.LVL2720:
9376:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 30101              		.loc 1 9376 0
 30102 d37d 89DA     		movl	%ebx, %edx
 30103 d37f C1EA0B   		shrl	$11, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1020


9377:src/vm3.c     **** PC  =  nPC;
 30104              		.loc 1 9377 0
 30105 d382 83E21F   		andl	$31, %edx
9366:src/vm3.c     **** PC  =  nPC;
 30106              		.loc 1 9366 0
 30107 d385 44890485 		movl	%r8d, RF(,%rax,4)
 30107      00000000 
9375:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 30108              		.loc 1 9375 0
 30109 d38d 89D8     		movl	%ebx, %eax
9374:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30110              		.loc 1 9374 0
 30111 d38f C1EB15   		shrl	$21, %ebx
 30112              	.LVL2721:
9375:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 30113              		.loc 1 9375 0
 30114 d392 C1E810   		shrl	$16, %eax
 30115              	.LVL2722:
9377:src/vm3.c     **** PC  =  nPC;
 30116              		.loc 1 9377 0
 30117 d395 83E31F   		andl	$31, %ebx
 30118 d398 83E01F   		andl	$31, %eax
 30119 d39b 8B048500 		movl	RF(,%rax,4), %eax
 30119      000000
 30120 d3a2 23049D00 		andl	RF(,%rbx,4), %eax
 30120      000000
 30121 d3a9 89049500 		movl	%eax, RF(,%rdx,4)
 30121      000000
9378:src/vm3.c     **** nPC  += 4;
 30122              		.loc 1 9378 0
 30123 d3b0 8B050000 		movl	nPC(%rip), %eax
 30123      0000
9380:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30124              		.loc 1 9380 0
 30125 d3b6 8D5003   		leal	3(%rax), %edx
9379:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30126              		.loc 1 9379 0
 30127 d3b9 8D4804   		leal	4(%rax), %ecx
9378:src/vm3.c     **** nPC  += 4;
 30128              		.loc 1 9378 0
 30129 d3bc 89050000 		movl	%eax, PC(%rip)
 30129      0000
9380:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30130              		.loc 1 9380 0
 30131 d3c2 440FB682 		movzbl	VM_memory(%rdx), %r8d
 30131      00000000 
 30132 d3ca 89C2     		movl	%eax, %edx
9393:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30133              		.loc 1 9393 0
 30134 d3cc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30134      000000
9380:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30135              		.loc 1 9380 0
 30136 d3d3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30136      000000
9379:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30137              		.loc 1 9379 0
GAS LISTING /tmp/cc15eBE3.s 			page 1021


 30138 d3da 890D0000 		movl	%ecx, nPC(%rip)
 30138      0000
9393:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30139              		.loc 1 9393 0
 30140 d3e0 8D4805   		leal	5(%rax), %ecx
 30141 d3e3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30141      000000
9380:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30142              		.loc 1 9380 0
 30143 d3ea C1E218   		sall	$24, %edx
 30144 d3ed 4109D0   		orl	%edx, %r8d
 30145 d3f0 8D5001   		leal	1(%rax), %edx
 30146 d3f3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30146      000000
 30147 d3fa C1E210   		sall	$16, %edx
 30148 d3fd 4109D0   		orl	%edx, %r8d
 30149 d400 8D5002   		leal	2(%rax), %edx
 30150 d403 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30150      000000
 30151 d40a C1E208   		sall	$8, %edx
 30152 d40d 4109D0   		orl	%edx, %r8d
 30153              	.LVL2723:
9381:src/vm3.c     ****   if (op0 == 0x0) {
 30154              		.loc 1 9381 0
 30155 d410 4489C6   		movl	%r8d, %esi
9383:src/vm3.c     ****     op0 = op0 + funct;
 30156              		.loc 1 9383 0
 30157 d413 4488C2   		movb	%r8b, %dl
9381:src/vm3.c     ****   if (op0 == 0x0) {
 30158              		.loc 1 9381 0
 30159 d416 C1EE1A   		shrl	$26, %esi
 30160              	.LVL2724:
9383:src/vm3.c     ****     op0 = op0 + funct;
 30161              		.loc 1 9383 0
 30162 d419 83E23F   		andl	$63, %edx
 30163 d41c 8D7E2B   		leal	43(%rsi), %edi
 30164 d41f 4084F6   		testb	%sil, %sil
 30165 d422 0F45D7   		cmovne	%edi, %edx
 30166              	.LVL2725:
9393:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30167              		.loc 1 9393 0
 30168 d425 C1E110   		sall	$16, %ecx
 30169 d428 C1E318   		sall	$24, %ebx
 30170 d42b 09CB     		orl	%ecx, %ebx
 30171 d42d 8D4807   		leal	7(%rax), %ecx
 30172 d430 83C006   		addl	$6, %eax
 30173 d433 0FB68000 		movzbl	VM_memory(%rax), %eax
 30173      000000
9391:src/vm3.c     **** 
 30174              		.loc 1 9391 0
 30175 d43a 0FB6D2   		movzbl	%dl, %edx
9393:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30176              		.loc 1 9393 0
 30177 d43d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30177      000000
9391:src/vm3.c     **** 
 30178              		.loc 1 9391 0
GAS LISTING /tmp/cc15eBE3.s 			page 1022


 30179 d444 48C1E204 		salq	$4, %rdx
 30180              	.LVL2726:
9393:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30181              		.loc 1 9393 0
 30182 d448 C1E008   		sall	$8, %eax
 30183 d44b 09CB     		orl	%ecx, %ebx
 30184 d44d 09C3     		orl	%eax, %ebx
 30185              	.LVL2727:
9394:src/vm3.c     ****   if (op1 == 0x0) {
 30186              		.loc 1 9394 0
 30187 d44f 89D9     		movl	%ebx, %ecx
9396:src/vm3.c     ****     op1 = op1 + funct;
 30188              		.loc 1 9396 0
 30189 d451 88D8     		movb	%bl, %al
9394:src/vm3.c     ****   if (op1 == 0x0) {
 30190              		.loc 1 9394 0
 30191 d453 C1E91A   		shrl	$26, %ecx
 30192              	.LVL2728:
9396:src/vm3.c     ****     op1 = op1 + funct;
 30193              		.loc 1 9396 0
 30194 d456 83E03F   		andl	$63, %eax
 30195 d459 8D712B   		leal	43(%rcx), %esi
 30196 d45c 84C9     		testb	%cl, %cl
 30197 d45e 0F45C6   		cmovne	%esi, %eax
 30198              	.LVL2729:
9403:src/vm3.c     **** 
 30199              		.loc 1 9403 0
 30200 d461 0FB6C0   		movzbl	%al, %eax
 30201 d464 48C1E004 		salq	$4, %rax
 30202              	.LVL2730:
 30203 d468 48038414 		addq	58088(%rsp,%rdx), %rax
 30203      E8E20000 
 30204 d470 488B08   		movq	(%rax), %rcx
 30205 d473 E9E038FF 		jmp	.L269
 30205      FF
 30206              	.LVL2731:
 30207              	.L209:
9412:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 30208              		.loc 1 9412 0
 30209 d478 4489C0   		movl	%r8d, %eax
9413:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 30210              		.loc 1 9413 0
 30211 d47b 4489C2   		movl	%r8d, %edx
9411:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30212              		.loc 1 9411 0
 30213 d47e 41C1E806 		shrl	$6, %r8d
 30214              	.LVL2732:
9412:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 30215              		.loc 1 9412 0
 30216 d482 C1E810   		shrl	$16, %eax
 30217              	.LVL2733:
9411:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30218              		.loc 1 9411 0
 30219 d485 4488C1   		movb	%r8b, %cl
9413:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 30220              		.loc 1 9413 0
 30221 d488 C1EA0B   		shrl	$11, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1023


 30222              	.LVL2734:
9414:src/vm3.c     **** PC  =  nPC;
 30223              		.loc 1 9414 0
 30224 d48b 83E01F   		andl	$31, %eax
9411:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30225              		.loc 1 9411 0
 30226 d48e 83E11F   		andl	$31, %ecx
9414:src/vm3.c     **** PC  =  nPC;
 30227              		.loc 1 9414 0
 30228 d491 83E21F   		andl	$31, %edx
 30229 d494 8B048500 		movl	RF(,%rax,4), %eax
 30229      000000
 30230 d49b D3E8     		shrl	%cl, %eax
 30231 d49d 89049500 		movl	%eax, RF(,%rdx,4)
 30231      000000
9416:src/vm3.c     **** 
 30232              		.loc 1 9416 0
 30233 d4a4 8B050000 		movl	nPC(%rip), %eax
 30233      0000
 30234 d4aa 8D5004   		leal	4(%rax), %edx
9423:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30235              		.loc 1 9423 0
 30236 d4ad 8D7007   		leal	7(%rax), %esi
9422:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30237              		.loc 1 9422 0
 30238 d4b0 8D4808   		leal	8(%rax), %ecx
9421:src/vm3.c     **** nPC  += 4;
 30239              		.loc 1 9421 0
 30240 d4b3 89150000 		movl	%edx, PC(%rip)
 30240      0000
9423:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30241              		.loc 1 9423 0
 30242 d4b9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30242      000000
 30243 d4c0 440FB686 		movzbl	VM_memory(%rsi), %r8d
 30243      00000000 
9436:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30244              		.loc 1 9436 0
 30245 d4c8 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30245      000000
 30246              	.LVL2735:
9422:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30247              		.loc 1 9422 0
 30248 d4cf 890D0000 		movl	%ecx, nPC(%rip)
 30248      0000
9436:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30249              		.loc 1 9436 0
 30250 d4d5 8D4809   		leal	9(%rax), %ecx
9423:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30251              		.loc 1 9423 0
 30252 d4d8 C1E218   		sall	$24, %edx
9436:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30253              		.loc 1 9436 0
 30254 d4db 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30254      000000
9423:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30255              		.loc 1 9423 0
GAS LISTING /tmp/cc15eBE3.s 			page 1024


 30256 d4e2 4109D0   		orl	%edx, %r8d
 30257 d4e5 8D5005   		leal	5(%rax), %edx
 30258 d4e8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30258      000000
 30259 d4ef C1E210   		sall	$16, %edx
 30260 d4f2 4109D0   		orl	%edx, %r8d
 30261 d4f5 8D5006   		leal	6(%rax), %edx
 30262 d4f8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30262      000000
 30263 d4ff C1E208   		sall	$8, %edx
 30264 d502 4109D0   		orl	%edx, %r8d
 30265              	.LVL2736:
9424:src/vm3.c     ****   if (op0 == 0x0) {
 30266              		.loc 1 9424 0
 30267 d505 4489C6   		movl	%r8d, %esi
9426:src/vm3.c     ****     op0 = op0 + funct;
 30268              		.loc 1 9426 0
 30269 d508 4488C2   		movb	%r8b, %dl
9424:src/vm3.c     ****   if (op0 == 0x0) {
 30270              		.loc 1 9424 0
 30271 d50b C1EE1A   		shrl	$26, %esi
 30272              	.LVL2737:
9426:src/vm3.c     ****     op0 = op0 + funct;
 30273              		.loc 1 9426 0
 30274 d50e 83E23F   		andl	$63, %edx
 30275 d511 8D7E2B   		leal	43(%rsi), %edi
 30276 d514 4084F6   		testb	%sil, %sil
 30277 d517 0F45D7   		cmovne	%edi, %edx
 30278              	.LVL2738:
9436:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30279              		.loc 1 9436 0
 30280 d51a C1E110   		sall	$16, %ecx
 30281 d51d C1E318   		sall	$24, %ebx
 30282 d520 09CB     		orl	%ecx, %ebx
 30283 d522 8D480B   		leal	11(%rax), %ecx
 30284 d525 83C00A   		addl	$10, %eax
 30285 d528 0FB68000 		movzbl	VM_memory(%rax), %eax
 30285      000000
9434:src/vm3.c     **** 
 30286              		.loc 1 9434 0
 30287 d52f 0FB6D2   		movzbl	%dl, %edx
9436:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30288              		.loc 1 9436 0
 30289 d532 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30289      000000
9434:src/vm3.c     **** 
 30290              		.loc 1 9434 0
 30291 d539 48C1E204 		salq	$4, %rdx
 30292              	.LVL2739:
9436:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30293              		.loc 1 9436 0
 30294 d53d C1E008   		sall	$8, %eax
 30295 d540 09CB     		orl	%ecx, %ebx
 30296 d542 09C3     		orl	%eax, %ebx
 30297              	.LVL2740:
9437:src/vm3.c     ****   if (op1 == 0x0) {
 30298              		.loc 1 9437 0
GAS LISTING /tmp/cc15eBE3.s 			page 1025


 30299 d544 89D9     		movl	%ebx, %ecx
9439:src/vm3.c     ****     op1 = op1 + funct;
 30300              		.loc 1 9439 0
 30301 d546 88D8     		movb	%bl, %al
9437:src/vm3.c     ****   if (op1 == 0x0) {
 30302              		.loc 1 9437 0
 30303 d548 C1E91A   		shrl	$26, %ecx
 30304              	.LVL2741:
9439:src/vm3.c     ****     op1 = op1 + funct;
 30305              		.loc 1 9439 0
 30306 d54b 83E03F   		andl	$63, %eax
 30307 d54e 8D712B   		leal	43(%rcx), %esi
 30308 d551 84C9     		testb	%cl, %cl
 30309 d553 0F45C6   		cmovne	%esi, %eax
 30310              	.LVL2742:
9446:src/vm3.c     **** 
 30311              		.loc 1 9446 0
 30312 d556 0FB6C0   		movzbl	%al, %eax
 30313 d559 48C1E004 		salq	$4, %rax
 30314              	.LVL2743:
 30315 d55d 48038414 		addq	58088(%rsp,%rdx), %rax
 30315      E8E20000 
 30316 d565 488B08   		movq	(%rax), %rcx
 30317 d568 E9EB37FF 		jmp	.L269
 30317      FF
 30318              	.LVL2744:
 30319              	.L222:
9454:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30320              		.loc 1 9454 0
 30321 d56d 4489C0   		movl	%r8d, %eax
9456:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 30322              		.loc 1 9456 0
 30323 d570 4489C2   		movl	%r8d, %edx
9455:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 30324              		.loc 1 9455 0
 30325 d573 41C1E810 		shrl	$16, %r8d
 30326              	.LVL2745:
9454:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30327              		.loc 1 9454 0
 30328 d577 C1E815   		shrl	$21, %eax
 30329              	.LVL2746:
9457:src/vm3.c     **** PC  =  nPC;
 30330              		.loc 1 9457 0
 30331 d57a 4183E01F 		andl	$31, %r8d
9456:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 30332              		.loc 1 9456 0
 30333 d57e C1EA0B   		shrl	$11, %edx
 30334              	.LVL2747:
9457:src/vm3.c     **** PC  =  nPC;
 30335              		.loc 1 9457 0
 30336 d581 83E01F   		andl	$31, %eax
 30337 d584 83E21F   		andl	$31, %edx
9459:src/vm3.c     **** 
 30338              		.loc 1 9459 0
 30339 d587 83050000 		addl	$4, nPC(%rip)
 30339      000004
 30340              	.LVL2748:
GAS LISTING /tmp/cc15eBE3.s 			page 1026


9457:src/vm3.c     **** PC  =  nPC;
 30341              		.loc 1 9457 0
 30342 d58e 8B048500 		movl	RF(,%rax,4), %eax
 30342      000000
 30343 d595 422B0485 		subl	RF(,%r8,4), %eax
 30343      00000000 
 30344 d59d 89049500 		movl	%eax, RF(,%rdx,4)
 30344      000000
9465:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30345              		.loc 1 9465 0
 30346 d5a4 89DA     		movl	%ebx, %edx
9466:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 30347              		.loc 1 9466 0
 30348 d5a6 89D8     		movl	%ebx, %eax
9465:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30349              		.loc 1 9465 0
 30350 d5a8 C1EA15   		shrl	$21, %edx
9468:src/vm3.c     **** PC  =  nPC;
 30351              		.loc 1 9468 0
 30352 d5ab 0FBFDB   		movswl	%bx, %ebx
 30353              	.LVL2749:
9466:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 30354              		.loc 1 9466 0
 30355 d5ae C1E810   		shrl	$16, %eax
 30356              	.LVL2750:
9468:src/vm3.c     **** PC  =  nPC;
 30357              		.loc 1 9468 0
 30358 d5b1 83E21F   		andl	$31, %edx
 30359 d5b4 83E01F   		andl	$31, %eax
 30360 d5b7 031C9500 		addl	RF(,%rdx,4), %ebx
 30360      000000
 30361              	.LVL2751:
 30362 d5be 891C8500 		movl	%ebx, RF(,%rax,4)
 30362      000000
9469:src/vm3.c     **** nPC  += 4;
 30363              		.loc 1 9469 0
 30364 d5c5 8B050000 		movl	nPC(%rip), %eax
 30364      0000
9471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30365              		.loc 1 9471 0
 30366 d5cb 8D5003   		leal	3(%rax), %edx
9470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30367              		.loc 1 9470 0
 30368 d5ce 8D4804   		leal	4(%rax), %ecx
9469:src/vm3.c     **** nPC  += 4;
 30369              		.loc 1 9469 0
 30370 d5d1 89050000 		movl	%eax, PC(%rip)
 30370      0000
9471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30371              		.loc 1 9471 0
 30372 d5d7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 30372      00000000 
 30373 d5df 89C2     		movl	%eax, %edx
9484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30374              		.loc 1 9484 0
 30375 d5e1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30375      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1027


9471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30376              		.loc 1 9471 0
 30377 d5e8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30377      000000
9470:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30378              		.loc 1 9470 0
 30379 d5ef 890D0000 		movl	%ecx, nPC(%rip)
 30379      0000
9484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30380              		.loc 1 9484 0
 30381 d5f5 8D4805   		leal	5(%rax), %ecx
 30382 d5f8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30382      000000
9471:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30383              		.loc 1 9471 0
 30384 d5ff C1E218   		sall	$24, %edx
 30385 d602 4109D0   		orl	%edx, %r8d
 30386 d605 8D5001   		leal	1(%rax), %edx
 30387 d608 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30387      000000
 30388 d60f C1E210   		sall	$16, %edx
 30389 d612 4109D0   		orl	%edx, %r8d
 30390 d615 8D5002   		leal	2(%rax), %edx
 30391 d618 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30391      000000
 30392 d61f C1E208   		sall	$8, %edx
 30393 d622 4109D0   		orl	%edx, %r8d
 30394              	.LVL2752:
9472:src/vm3.c     ****   if (op0 == 0x0) {
 30395              		.loc 1 9472 0
 30396 d625 4489C6   		movl	%r8d, %esi
9474:src/vm3.c     ****     op0 = op0 + funct;
 30397              		.loc 1 9474 0
 30398 d628 4488C2   		movb	%r8b, %dl
9472:src/vm3.c     ****   if (op0 == 0x0) {
 30399              		.loc 1 9472 0
 30400 d62b C1EE1A   		shrl	$26, %esi
 30401              	.LVL2753:
9474:src/vm3.c     ****     op0 = op0 + funct;
 30402              		.loc 1 9474 0
 30403 d62e 83E23F   		andl	$63, %edx
 30404 d631 8D7E2B   		leal	43(%rsi), %edi
 30405 d634 4084F6   		testb	%sil, %sil
 30406 d637 0F45D7   		cmovne	%edi, %edx
 30407              	.LVL2754:
9484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30408              		.loc 1 9484 0
 30409 d63a C1E110   		sall	$16, %ecx
 30410 d63d C1E318   		sall	$24, %ebx
 30411 d640 09CB     		orl	%ecx, %ebx
 30412 d642 8D4807   		leal	7(%rax), %ecx
 30413 d645 83C006   		addl	$6, %eax
 30414 d648 0FB68000 		movzbl	VM_memory(%rax), %eax
 30414      000000
9482:src/vm3.c     **** 
 30415              		.loc 1 9482 0
 30416 d64f 0FB6D2   		movzbl	%dl, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1028


9484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30417              		.loc 1 9484 0
 30418 d652 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30418      000000
9482:src/vm3.c     **** 
 30419              		.loc 1 9482 0
 30420 d659 48C1E204 		salq	$4, %rdx
 30421              	.LVL2755:
9484:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30422              		.loc 1 9484 0
 30423 d65d C1E008   		sall	$8, %eax
 30424 d660 09CB     		orl	%ecx, %ebx
 30425 d662 09C3     		orl	%eax, %ebx
 30426              	.LVL2756:
9485:src/vm3.c     ****   if (op1 == 0x0) {
 30427              		.loc 1 9485 0
 30428 d664 89D9     		movl	%ebx, %ecx
9487:src/vm3.c     ****     op1 = op1 + funct;
 30429              		.loc 1 9487 0
 30430 d666 88D8     		movb	%bl, %al
9485:src/vm3.c     ****   if (op1 == 0x0) {
 30431              		.loc 1 9485 0
 30432 d668 C1E91A   		shrl	$26, %ecx
 30433              	.LVL2757:
9487:src/vm3.c     ****     op1 = op1 + funct;
 30434              		.loc 1 9487 0
 30435 d66b 83E03F   		andl	$63, %eax
 30436 d66e 8D712B   		leal	43(%rcx), %esi
 30437 d671 84C9     		testb	%cl, %cl
 30438 d673 0F45C6   		cmovne	%esi, %eax
 30439              	.LVL2758:
9494:src/vm3.c     **** 
 30440              		.loc 1 9494 0
 30441 d676 0FB6C0   		movzbl	%al, %eax
 30442 d679 48C1E004 		salq	$4, %rax
 30443              	.LVL2759:
 30444 d67d 48038414 		addq	58088(%rsp,%rdx), %rax
 30444      E8E20000 
 30445 d685 488B08   		movq	(%rax), %rcx
 30446 d688 E9CB36FF 		jmp	.L269
 30446      FF
 30447              	.LVL2760:
 30448              	.L137:
9502:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30449              		.loc 1 9502 0
 30450 d68d 4489C2   		movl	%r8d, %edx
9503:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30451              		.loc 1 9503 0
 30452 d690 4489C0   		movl	%r8d, %eax
9505:src/vm3.c     **** PC  =  nPC;
 30453              		.loc 1 9505 0
 30454 d693 450FBFC0 		movswl	%r8w, %r8d
 30455              	.LVL2761:
9502:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30456              		.loc 1 9502 0
 30457 d697 C1EA15   		shrl	$21, %edx
9503:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 1029


 30458              		.loc 1 9503 0
 30459 d69a C1E810   		shrl	$16, %eax
 30460              	.LVL2762:
9507:src/vm3.c     **** 
 30461              		.loc 1 9507 0
 30462 d69d 83050000 		addl	$4, nPC(%rip)
 30462      000004
 30463              	.LVL2763:
9505:src/vm3.c     **** PC  =  nPC;
 30464              		.loc 1 9505 0
 30465 d6a4 83E21F   		andl	$31, %edx
 30466 d6a7 83E01F   		andl	$31, %eax
 30467 d6aa 44030495 		addl	RF(,%rdx,4), %r8d
 30467      00000000 
 30468              	.LVL2764:
9515:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 30469              		.loc 1 9515 0
 30470 d6b2 89DA     		movl	%ebx, %edx
 30471 d6b4 C1EA0B   		shrl	$11, %edx
9516:src/vm3.c     **** PC  =  nPC;
 30472              		.loc 1 9516 0
 30473 d6b7 83E21F   		andl	$31, %edx
9505:src/vm3.c     **** PC  =  nPC;
 30474              		.loc 1 9505 0
 30475 d6ba 44890485 		movl	%r8d, RF(,%rax,4)
 30475      00000000 
9514:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 30476              		.loc 1 9514 0
 30477 d6c2 89D8     		movl	%ebx, %eax
9513:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30478              		.loc 1 9513 0
 30479 d6c4 C1EB15   		shrl	$21, %ebx
 30480              	.LVL2765:
9514:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 30481              		.loc 1 9514 0
 30482 d6c7 C1E810   		shrl	$16, %eax
 30483              	.LVL2766:
9516:src/vm3.c     **** PC  =  nPC;
 30484              		.loc 1 9516 0
 30485 d6ca 83E31F   		andl	$31, %ebx
 30486 d6cd 83E01F   		andl	$31, %eax
 30487 d6d0 8B048500 		movl	RF(,%rax,4), %eax
 30487      000000
 30488 d6d7 03049D00 		addl	RF(,%rbx,4), %eax
 30488      000000
 30489 d6de 89049500 		movl	%eax, RF(,%rdx,4)
 30489      000000
9517:src/vm3.c     **** nPC  += 4;
 30490              		.loc 1 9517 0
 30491 d6e5 8B050000 		movl	nPC(%rip), %eax
 30491      0000
9519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30492              		.loc 1 9519 0
 30493 d6eb 8D5003   		leal	3(%rax), %edx
9518:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30494              		.loc 1 9518 0
 30495 d6ee 8D4804   		leal	4(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1030


9517:src/vm3.c     **** nPC  += 4;
 30496              		.loc 1 9517 0
 30497 d6f1 89050000 		movl	%eax, PC(%rip)
 30497      0000
9519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30498              		.loc 1 9519 0
 30499 d6f7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 30499      00000000 
 30500 d6ff 89C2     		movl	%eax, %edx
9532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30501              		.loc 1 9532 0
 30502 d701 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30502      000000
9519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30503              		.loc 1 9519 0
 30504 d708 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30504      000000
9518:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30505              		.loc 1 9518 0
 30506 d70f 890D0000 		movl	%ecx, nPC(%rip)
 30506      0000
9532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30507              		.loc 1 9532 0
 30508 d715 8D4805   		leal	5(%rax), %ecx
 30509 d718 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30509      000000
9519:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30510              		.loc 1 9519 0
 30511 d71f C1E218   		sall	$24, %edx
 30512 d722 4109D0   		orl	%edx, %r8d
 30513 d725 8D5001   		leal	1(%rax), %edx
 30514 d728 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30514      000000
 30515 d72f C1E210   		sall	$16, %edx
 30516 d732 4109D0   		orl	%edx, %r8d
 30517 d735 8D5002   		leal	2(%rax), %edx
 30518 d738 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30518      000000
 30519 d73f C1E208   		sall	$8, %edx
 30520 d742 4109D0   		orl	%edx, %r8d
 30521              	.LVL2767:
9520:src/vm3.c     ****   if (op0 == 0x0) {
 30522              		.loc 1 9520 0
 30523 d745 4489C6   		movl	%r8d, %esi
9522:src/vm3.c     ****     op0 = op0 + funct;
 30524              		.loc 1 9522 0
 30525 d748 4488C2   		movb	%r8b, %dl
9520:src/vm3.c     ****   if (op0 == 0x0) {
 30526              		.loc 1 9520 0
 30527 d74b C1EE1A   		shrl	$26, %esi
 30528              	.LVL2768:
9522:src/vm3.c     ****     op0 = op0 + funct;
 30529              		.loc 1 9522 0
 30530 d74e 83E23F   		andl	$63, %edx
 30531 d751 8D7E2B   		leal	43(%rsi), %edi
 30532 d754 4084F6   		testb	%sil, %sil
 30533 d757 0F45D7   		cmovne	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1031


 30534              	.LVL2769:
9532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30535              		.loc 1 9532 0
 30536 d75a C1E110   		sall	$16, %ecx
 30537 d75d C1E318   		sall	$24, %ebx
 30538 d760 09CB     		orl	%ecx, %ebx
 30539 d762 8D4807   		leal	7(%rax), %ecx
 30540 d765 83C006   		addl	$6, %eax
 30541 d768 0FB68000 		movzbl	VM_memory(%rax), %eax
 30541      000000
9530:src/vm3.c     **** 
 30542              		.loc 1 9530 0
 30543 d76f 0FB6D2   		movzbl	%dl, %edx
9532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30544              		.loc 1 9532 0
 30545 d772 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30545      000000
9530:src/vm3.c     **** 
 30546              		.loc 1 9530 0
 30547 d779 48C1E204 		salq	$4, %rdx
 30548              	.LVL2770:
9532:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30549              		.loc 1 9532 0
 30550 d77d C1E008   		sall	$8, %eax
 30551 d780 09CB     		orl	%ecx, %ebx
 30552 d782 09C3     		orl	%eax, %ebx
 30553              	.LVL2771:
9533:src/vm3.c     ****   if (op1 == 0x0) {
 30554              		.loc 1 9533 0
 30555 d784 89D9     		movl	%ebx, %ecx
9535:src/vm3.c     ****     op1 = op1 + funct;
 30556              		.loc 1 9535 0
 30557 d786 88D8     		movb	%bl, %al
9533:src/vm3.c     ****   if (op1 == 0x0) {
 30558              		.loc 1 9533 0
 30559 d788 C1E91A   		shrl	$26, %ecx
 30560              	.LVL2772:
9535:src/vm3.c     ****     op1 = op1 + funct;
 30561              		.loc 1 9535 0
 30562 d78b 83E03F   		andl	$63, %eax
 30563 d78e 8D712B   		leal	43(%rcx), %esi
 30564 d791 84C9     		testb	%cl, %cl
 30565 d793 0F45C6   		cmovne	%esi, %eax
 30566              	.LVL2773:
9542:src/vm3.c     **** 
 30567              		.loc 1 9542 0
 30568 d796 0FB6C0   		movzbl	%al, %eax
 30569 d799 48C1E004 		salq	$4, %rax
 30570              	.LVL2774:
 30571 d79d 48038414 		addq	58088(%rsp,%rdx), %rax
 30571      E8E20000 
 30572 d7a5 488B08   		movq	(%rax), %rcx
 30573 d7a8 E9AB35FF 		jmp	.L269
 30573      FF
 30574              	.LVL2775:
 30575              	.L148:
9550:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1032


 30576              		.loc 1 9550 0
 30577 d7ad 4489C2   		movl	%r8d, %edx
9551:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30578              		.loc 1 9551 0
 30579 d7b0 4489C0   		movl	%r8d, %eax
9553:src/vm3.c     **** PC  =  nPC;
 30580              		.loc 1 9553 0
 30581 d7b3 450FBFC0 		movswl	%r8w, %r8d
 30582              	.LVL2776:
9550:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30583              		.loc 1 9550 0
 30584 d7b7 C1EA15   		shrl	$21, %edx
9551:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30585              		.loc 1 9551 0
 30586 d7ba C1E810   		shrl	$16, %eax
 30587              	.LVL2777:
9555:src/vm3.c     **** 
 30588              		.loc 1 9555 0
 30589 d7bd 83050000 		addl	$4, nPC(%rip)
 30589      000004
 30590              	.LVL2778:
9553:src/vm3.c     **** PC  =  nPC;
 30591              		.loc 1 9553 0
 30592 d7c4 83E21F   		andl	$31, %edx
 30593 d7c7 83E01F   		andl	$31, %eax
 30594 d7ca 44030495 		addl	RF(,%rdx,4), %r8d
 30594      00000000 
9561:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30595              		.loc 1 9561 0
 30596 d7d2 89DA     		movl	%ebx, %edx
 30597 d7d4 C1EA15   		shrl	$21, %edx
9564:src/vm3.c     **** PC  =  nPC;
 30598              		.loc 1 9564 0
 30599 d7d7 83E21F   		andl	$31, %edx
9553:src/vm3.c     **** PC  =  nPC;
 30600              		.loc 1 9553 0
 30601 d7da 44890485 		movl	%r8d, RF(,%rax,4)
 30601      00000000 
9562:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 30602              		.loc 1 9562 0
 30603 d7e2 89D8     		movl	%ebx, %eax
9564:src/vm3.c     **** PC  =  nPC;
 30604              		.loc 1 9564 0
 30605 d7e4 0FBFDB   		movswl	%bx, %ebx
 30606              	.LVL2779:
9562:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 30607              		.loc 1 9562 0
 30608 d7e7 C1E810   		shrl	$16, %eax
 30609              	.LVL2780:
9564:src/vm3.c     **** PC  =  nPC;
 30610              		.loc 1 9564 0
 30611 d7ea 83E01F   		andl	$31, %eax
 30612 d7ed 391C9500 		cmpl	%ebx, RF(,%rdx,4)
 30612      000000
 30613 d7f4 0F92C2   		setb	%dl
 30614 d7f7 0FB6D2   		movzbl	%dl, %edx
 30615 d7fa 89148500 		movl	%edx, RF(,%rax,4)
GAS LISTING /tmp/cc15eBE3.s 			page 1033


 30615      000000
9565:src/vm3.c     **** nPC  += 4;
 30616              		.loc 1 9565 0
 30617 d801 8B050000 		movl	nPC(%rip), %eax
 30617      0000
9567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30618              		.loc 1 9567 0
 30619 d807 8D5003   		leal	3(%rax), %edx
9566:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30620              		.loc 1 9566 0
 30621 d80a 8D4804   		leal	4(%rax), %ecx
9565:src/vm3.c     **** nPC  += 4;
 30622              		.loc 1 9565 0
 30623 d80d 89050000 		movl	%eax, PC(%rip)
 30623      0000
9567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30624              		.loc 1 9567 0
 30625 d813 440FB682 		movzbl	VM_memory(%rdx), %r8d
 30625      00000000 
 30626 d81b 89C2     		movl	%eax, %edx
9580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30627              		.loc 1 9580 0
 30628 d81d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30628      000000
 30629              	.LVL2781:
9567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30630              		.loc 1 9567 0
 30631 d824 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30631      000000
9566:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30632              		.loc 1 9566 0
 30633 d82b 890D0000 		movl	%ecx, nPC(%rip)
 30633      0000
9580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30634              		.loc 1 9580 0
 30635 d831 8D4805   		leal	5(%rax), %ecx
 30636 d834 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30636      000000
9567:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30637              		.loc 1 9567 0
 30638 d83b C1E218   		sall	$24, %edx
 30639 d83e 4109D0   		orl	%edx, %r8d
 30640 d841 8D5001   		leal	1(%rax), %edx
 30641 d844 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30641      000000
 30642 d84b C1E210   		sall	$16, %edx
 30643 d84e 4109D0   		orl	%edx, %r8d
 30644 d851 8D5002   		leal	2(%rax), %edx
 30645 d854 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30645      000000
 30646 d85b C1E208   		sall	$8, %edx
 30647 d85e 4109D0   		orl	%edx, %r8d
 30648              	.LVL2782:
9568:src/vm3.c     ****   if (op0 == 0x0) {
 30649              		.loc 1 9568 0
 30650 d861 4489C6   		movl	%r8d, %esi
9570:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 1034


 30651              		.loc 1 9570 0
 30652 d864 4488C2   		movb	%r8b, %dl
9568:src/vm3.c     ****   if (op0 == 0x0) {
 30653              		.loc 1 9568 0
 30654 d867 C1EE1A   		shrl	$26, %esi
 30655              	.LVL2783:
9570:src/vm3.c     ****     op0 = op0 + funct;
 30656              		.loc 1 9570 0
 30657 d86a 83E23F   		andl	$63, %edx
 30658 d86d 8D7E2B   		leal	43(%rsi), %edi
 30659 d870 4084F6   		testb	%sil, %sil
 30660 d873 0F45D7   		cmovne	%edi, %edx
 30661              	.LVL2784:
9580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30662              		.loc 1 9580 0
 30663 d876 C1E110   		sall	$16, %ecx
 30664 d879 C1E318   		sall	$24, %ebx
 30665 d87c 09CB     		orl	%ecx, %ebx
 30666 d87e 8D4807   		leal	7(%rax), %ecx
 30667 d881 83C006   		addl	$6, %eax
 30668 d884 0FB68000 		movzbl	VM_memory(%rax), %eax
 30668      000000
9578:src/vm3.c     **** 
 30669              		.loc 1 9578 0
 30670 d88b 0FB6D2   		movzbl	%dl, %edx
9580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30671              		.loc 1 9580 0
 30672 d88e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30672      000000
9578:src/vm3.c     **** 
 30673              		.loc 1 9578 0
 30674 d895 48C1E204 		salq	$4, %rdx
 30675              	.LVL2785:
9580:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30676              		.loc 1 9580 0
 30677 d899 C1E008   		sall	$8, %eax
 30678 d89c 09CB     		orl	%ecx, %ebx
 30679 d89e 09C3     		orl	%eax, %ebx
 30680              	.LVL2786:
9581:src/vm3.c     ****   if (op1 == 0x0) {
 30681              		.loc 1 9581 0
 30682 d8a0 89D9     		movl	%ebx, %ecx
9583:src/vm3.c     ****     op1 = op1 + funct;
 30683              		.loc 1 9583 0
 30684 d8a2 88D8     		movb	%bl, %al
9581:src/vm3.c     ****   if (op1 == 0x0) {
 30685              		.loc 1 9581 0
 30686 d8a4 C1E91A   		shrl	$26, %ecx
 30687              	.LVL2787:
9583:src/vm3.c     ****     op1 = op1 + funct;
 30688              		.loc 1 9583 0
 30689 d8a7 83E03F   		andl	$63, %eax
 30690 d8aa 8D712B   		leal	43(%rcx), %esi
 30691 d8ad 84C9     		testb	%cl, %cl
 30692 d8af 0F45C6   		cmovne	%esi, %eax
 30693              	.LVL2788:
9590:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1035


 30694              		.loc 1 9590 0
 30695 d8b2 0FB6C0   		movzbl	%al, %eax
 30696 d8b5 48C1E004 		salq	$4, %rax
 30697              	.LVL2789:
 30698 d8b9 48038414 		addq	58088(%rsp,%rdx), %rax
 30698      E8E20000 
 30699 d8c1 488B08   		movq	(%rax), %rcx
 30700 d8c4 E98F34FF 		jmp	.L269
 30700      FF
 30701              	.LVL2790:
 30702              	.L141:
9598:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30703              		.loc 1 9598 0
 30704 d8c9 4489C2   		movl	%r8d, %edx
9599:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30705              		.loc 1 9599 0
 30706 d8cc 4489C0   		movl	%r8d, %eax
9601:src/vm3.c     **** PC  =  nPC;
 30707              		.loc 1 9601 0
 30708 d8cf 450FBFC0 		movswl	%r8w, %r8d
 30709              	.LVL2791:
9598:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30710              		.loc 1 9598 0
 30711 d8d3 C1EA15   		shrl	$21, %edx
9599:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30712              		.loc 1 9599 0
 30713 d8d6 C1E810   		shrl	$16, %eax
 30714              	.LVL2792:
9603:src/vm3.c     **** 
 30715              		.loc 1 9603 0
 30716 d8d9 83050000 		addl	$4, nPC(%rip)
 30716      000004
 30717              	.LVL2793:
9601:src/vm3.c     **** PC  =  nPC;
 30718              		.loc 1 9601 0
 30719 d8e0 83E21F   		andl	$31, %edx
 30720 d8e3 83E01F   		andl	$31, %eax
 30721 d8e6 44030495 		addl	RF(,%rdx,4), %r8d
 30721      00000000 
 30722              	.LVL2794:
9609:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30723              		.loc 1 9609 0
 30724 d8ee 89DA     		movl	%ebx, %edx
 30725 d8f0 C1EA15   		shrl	$21, %edx
9612:src/vm3.c     **** PC  =  nPC;
 30726              		.loc 1 9612 0
 30727 d8f3 83E21F   		andl	$31, %edx
9601:src/vm3.c     **** PC  =  nPC;
 30728              		.loc 1 9601 0
 30729 d8f6 44890485 		movl	%r8d, RF(,%rax,4)
 30729      00000000 
9611:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 30730              		.loc 1 9611 0
 30731 d8fe 89D8     		movl	%ebx, %eax
9610:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 30732              		.loc 1 9610 0
 30733 d900 C1EB10   		shrl	$16, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1036


 30734              	.LVL2795:
9612:src/vm3.c     **** PC  =  nPC;
 30735              		.loc 1 9612 0
 30736 d903 83E31F   		andl	$31, %ebx
9611:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 30737              		.loc 1 9611 0
 30738 d906 C1E80B   		shrl	$11, %eax
 30739              	.LVL2796:
9612:src/vm3.c     **** PC  =  nPC;
 30740              		.loc 1 9612 0
 30741 d909 8B3C9D00 		movl	RF(,%rbx,4), %edi
 30741      000000
 30742 d910 83E01F   		andl	$31, %eax
 30743 d913 393C9500 		cmpl	%edi, RF(,%rdx,4)
 30743      000000
 30744 d91a 0F92C2   		setb	%dl
 30745 d91d 0FB6D2   		movzbl	%dl, %edx
 30746 d920 89148500 		movl	%edx, RF(,%rax,4)
 30746      000000
9613:src/vm3.c     **** nPC  += 4;
 30747              		.loc 1 9613 0
 30748 d927 8B050000 		movl	nPC(%rip), %eax
 30748      0000
9615:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30749              		.loc 1 9615 0
 30750 d92d 8D5003   		leal	3(%rax), %edx
9614:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30751              		.loc 1 9614 0
 30752 d930 8D4804   		leal	4(%rax), %ecx
9613:src/vm3.c     **** nPC  += 4;
 30753              		.loc 1 9613 0
 30754 d933 89050000 		movl	%eax, PC(%rip)
 30754      0000
9615:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30755              		.loc 1 9615 0
 30756 d939 440FB682 		movzbl	VM_memory(%rdx), %r8d
 30756      00000000 
 30757 d941 89C2     		movl	%eax, %edx
9628:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30758              		.loc 1 9628 0
 30759 d943 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30759      000000
9615:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30760              		.loc 1 9615 0
 30761 d94a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30761      000000
9614:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30762              		.loc 1 9614 0
 30763 d951 890D0000 		movl	%ecx, nPC(%rip)
 30763      0000
9628:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30764              		.loc 1 9628 0
 30765 d957 8D4805   		leal	5(%rax), %ecx
 30766 d95a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30766      000000
9615:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30767              		.loc 1 9615 0
GAS LISTING /tmp/cc15eBE3.s 			page 1037


 30768 d961 C1E218   		sall	$24, %edx
 30769 d964 4109D0   		orl	%edx, %r8d
 30770 d967 8D5001   		leal	1(%rax), %edx
 30771 d96a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30771      000000
 30772 d971 C1E210   		sall	$16, %edx
 30773 d974 4109D0   		orl	%edx, %r8d
 30774 d977 8D5002   		leal	2(%rax), %edx
 30775 d97a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30775      000000
 30776 d981 C1E208   		sall	$8, %edx
 30777 d984 4109D0   		orl	%edx, %r8d
 30778              	.LVL2797:
9616:src/vm3.c     ****   if (op0 == 0x0) {
 30779              		.loc 1 9616 0
 30780 d987 4489C6   		movl	%r8d, %esi
9618:src/vm3.c     ****     op0 = op0 + funct;
 30781              		.loc 1 9618 0
 30782 d98a 4488C2   		movb	%r8b, %dl
9616:src/vm3.c     ****   if (op0 == 0x0) {
 30783              		.loc 1 9616 0
 30784 d98d C1EE1A   		shrl	$26, %esi
 30785              	.LVL2798:
9618:src/vm3.c     ****     op0 = op0 + funct;
 30786              		.loc 1 9618 0
 30787 d990 83E23F   		andl	$63, %edx
 30788 d993 8D7E2B   		leal	43(%rsi), %edi
 30789 d996 4084F6   		testb	%sil, %sil
 30790 d999 0F45D7   		cmovne	%edi, %edx
 30791              	.LVL2799:
9628:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30792              		.loc 1 9628 0
 30793 d99c C1E110   		sall	$16, %ecx
 30794 d99f C1E318   		sall	$24, %ebx
 30795 d9a2 09CB     		orl	%ecx, %ebx
 30796 d9a4 8D4807   		leal	7(%rax), %ecx
 30797 d9a7 83C006   		addl	$6, %eax
 30798 d9aa 0FB68000 		movzbl	VM_memory(%rax), %eax
 30798      000000
9626:src/vm3.c     **** 
 30799              		.loc 1 9626 0
 30800 d9b1 0FB6D2   		movzbl	%dl, %edx
9628:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30801              		.loc 1 9628 0
 30802 d9b4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30802      000000
9626:src/vm3.c     **** 
 30803              		.loc 1 9626 0
 30804 d9bb 48C1E204 		salq	$4, %rdx
 30805              	.LVL2800:
9628:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30806              		.loc 1 9628 0
 30807 d9bf C1E008   		sall	$8, %eax
 30808 d9c2 09CB     		orl	%ecx, %ebx
 30809 d9c4 09C3     		orl	%eax, %ebx
 30810              	.LVL2801:
9629:src/vm3.c     ****   if (op1 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 1038


 30811              		.loc 1 9629 0
 30812 d9c6 89D9     		movl	%ebx, %ecx
9631:src/vm3.c     ****     op1 = op1 + funct;
 30813              		.loc 1 9631 0
 30814 d9c8 88D8     		movb	%bl, %al
9629:src/vm3.c     ****   if (op1 == 0x0) {
 30815              		.loc 1 9629 0
 30816 d9ca C1E91A   		shrl	$26, %ecx
 30817              	.LVL2802:
9631:src/vm3.c     ****     op1 = op1 + funct;
 30818              		.loc 1 9631 0
 30819 d9cd 83E03F   		andl	$63, %eax
 30820 d9d0 8D712B   		leal	43(%rcx), %esi
 30821 d9d3 84C9     		testb	%cl, %cl
 30822 d9d5 0F45C6   		cmovne	%esi, %eax
 30823              	.LVL2803:
9638:src/vm3.c     **** 
 30824              		.loc 1 9638 0
 30825 d9d8 0FB6C0   		movzbl	%al, %eax
 30826 d9db 48C1E004 		salq	$4, %rax
 30827              	.LVL2804:
 30828 d9df 48038414 		addq	58088(%rsp,%rdx), %rax
 30828      E8E20000 
 30829 d9e7 488B08   		movq	(%rax), %rcx
 30830 d9ea E96933FF 		jmp	.L269
 30830      FF
 30831              	.LVL2805:
 30832              	.L186:
9646:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30833              		.loc 1 9646 0
 30834 d9ef 4489C0   		movl	%r8d, %eax
9649:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 30835              		.loc 1 9649 0
 30836 d9f2 410FBFC8 		movswl	%r8w, %ecx
9647:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 30837              		.loc 1 9647 0
 30838 d9f6 41C1E810 		shrl	$16, %r8d
 30839              	.LVL2806:
9646:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30840              		.loc 1 9646 0
 30841 d9fa C1E815   		shrl	$21, %eax
 30842              	.LVL2807:
9649:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 30843              		.loc 1 9649 0
 30844 d9fd 4183E01F 		andl	$31, %r8d
9654:src/vm3.c     **** 
 30845              		.loc 1 9654 0
 30846 da01 83050000 		addl	$4, nPC(%rip)
 30846      000004
 30847              	.LVL2808:
9649:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 30848              		.loc 1 9649 0
 30849 da08 83E01F   		andl	$31, %eax
 30850 da0b 8B148500 		movl	RF(,%rax,4), %edx
 30850      000000
 30851 da12 428B0485 		movl	RF(,%r8,4), %eax
 30851      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 1039


 30852 da1a 8D3411   		leal	(%rcx,%rdx), %esi
 30853 da1d 89C7     		movl	%eax, %edi
 30854 da1f C1EF18   		shrl	$24, %edi
 30855 da22 4088BE00 		movb	%dil, VM_memory(%rsi)
 30855      000000
9650:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 30856              		.loc 1 9650 0
 30857 da29 8D741101 		leal	1(%rcx,%rdx), %esi
 30858 da2d 89C7     		movl	%eax, %edi
 30859 da2f C1EF10   		shrl	$16, %edi
 30860 da32 4088BE00 		movb	%dil, VM_memory(%rsi)
 30860      000000
9651:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 30861              		.loc 1 9651 0
 30862 da39 8D741102 		leal	2(%rcx,%rdx), %esi
9652:src/vm3.c     **** PC  =  nPC;
 30863              		.loc 1 9652 0
 30864 da3d 8D541103 		leal	3(%rcx,%rdx), %edx
9651:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 30865              		.loc 1 9651 0
 30866 da41 0FB6FC   		movzbl	%ah, %edi
 30867 da44 4088BE00 		movb	%dil, VM_memory(%rsi)
 30867      000000
9652:src/vm3.c     **** PC  =  nPC;
 30868              		.loc 1 9652 0
 30869 da4b 88820000 		movb	%al, VM_memory(%rdx)
 30869      0000
9660:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 30870              		.loc 1 9660 0
 30871 da51 89D8     		movl	%ebx, %eax
 30872 da53 C1E815   		shrl	$21, %eax
9663:src/vm3.c     **** PC  =  nPC;
 30873              		.loc 1 9663 0
 30874 da56 0FBFD3   		movswl	%bx, %edx
9661:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 30875              		.loc 1 9661 0
 30876 da59 C1EB10   		shrl	$16, %ebx
 30877              	.LVL2809:
9663:src/vm3.c     **** PC  =  nPC;
 30878              		.loc 1 9663 0
 30879 da5c 83E01F   		andl	$31, %eax
 30880 da5f 83E31F   		andl	$31, %ebx
 30881 da62 03148500 		addl	RF(,%rax,4), %edx
 30881      000000
 30882              	.LVL2810:
 30883 da69 8D4203   		leal	3(%rdx), %eax
 30884 da6c 89D1     		movl	%edx, %ecx
 30885 da6e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30885      000000
 30886 da75 0FB68000 		movzbl	VM_memory(%rax), %eax
 30886      000000
 30887 da7c C1E118   		sall	$24, %ecx
 30888 da7f 09C8     		orl	%ecx, %eax
 30889 da81 8D4A01   		leal	1(%rdx), %ecx
 30890 da84 83C202   		addl	$2, %edx
 30891 da87 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30891      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1040


 30892 da8e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30892      000000
 30893 da95 C1E208   		sall	$8, %edx
 30894 da98 C1E110   		sall	$16, %ecx
 30895 da9b 09C8     		orl	%ecx, %eax
 30896 da9d 09D0     		orl	%edx, %eax
 30897 da9f 89049D00 		movl	%eax, RF(,%rbx,4)
 30897      000000
9664:src/vm3.c     **** nPC  += 4;
 30898              		.loc 1 9664 0
 30899 daa6 8B050000 		movl	nPC(%rip), %eax
 30899      0000
9666:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30900              		.loc 1 9666 0
 30901 daac 8D5003   		leal	3(%rax), %edx
9665:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30902              		.loc 1 9665 0
 30903 daaf 8D4804   		leal	4(%rax), %ecx
9664:src/vm3.c     **** nPC  += 4;
 30904              		.loc 1 9664 0
 30905 dab2 89050000 		movl	%eax, PC(%rip)
 30905      0000
9666:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30906              		.loc 1 9666 0
 30907 dab8 440FB682 		movzbl	VM_memory(%rdx), %r8d
 30907      00000000 
 30908 dac0 89C2     		movl	%eax, %edx
9679:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30909              		.loc 1 9679 0
 30910 dac2 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 30910      000000
9666:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30911              		.loc 1 9666 0
 30912 dac9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30912      000000
9665:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 30913              		.loc 1 9665 0
 30914 dad0 890D0000 		movl	%ecx, nPC(%rip)
 30914      0000
9679:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30915              		.loc 1 9679 0
 30916 dad6 8D4805   		leal	5(%rax), %ecx
 30917 dad9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30917      000000
9666:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 30918              		.loc 1 9666 0
 30919 dae0 C1E218   		sall	$24, %edx
 30920 dae3 4109D0   		orl	%edx, %r8d
 30921 dae6 8D5001   		leal	1(%rax), %edx
 30922 dae9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30922      000000
 30923 daf0 C1E210   		sall	$16, %edx
 30924 daf3 4109D0   		orl	%edx, %r8d
 30925 daf6 8D5002   		leal	2(%rax), %edx
 30926 daf9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 30926      000000
 30927 db00 C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1041


 30928 db03 4109D0   		orl	%edx, %r8d
 30929              	.LVL2811:
9667:src/vm3.c     ****   if (op0 == 0x0) {
 30930              		.loc 1 9667 0
 30931 db06 4489C6   		movl	%r8d, %esi
9669:src/vm3.c     ****     op0 = op0 + funct;
 30932              		.loc 1 9669 0
 30933 db09 4488C2   		movb	%r8b, %dl
9667:src/vm3.c     ****   if (op0 == 0x0) {
 30934              		.loc 1 9667 0
 30935 db0c C1EE1A   		shrl	$26, %esi
 30936              	.LVL2812:
9669:src/vm3.c     ****     op0 = op0 + funct;
 30937              		.loc 1 9669 0
 30938 db0f 83E23F   		andl	$63, %edx
 30939 db12 8D7E2B   		leal	43(%rsi), %edi
 30940 db15 4084F6   		testb	%sil, %sil
 30941 db18 0F45D7   		cmovne	%edi, %edx
 30942              	.LVL2813:
9679:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30943              		.loc 1 9679 0
 30944 db1b C1E110   		sall	$16, %ecx
 30945 db1e C1E318   		sall	$24, %ebx
 30946 db21 09CB     		orl	%ecx, %ebx
 30947 db23 8D4807   		leal	7(%rax), %ecx
 30948 db26 83C006   		addl	$6, %eax
 30949 db29 0FB68000 		movzbl	VM_memory(%rax), %eax
 30949      000000
9677:src/vm3.c     **** 
 30950              		.loc 1 9677 0
 30951 db30 0FB6D2   		movzbl	%dl, %edx
9679:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30952              		.loc 1 9679 0
 30953 db33 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 30953      000000
9677:src/vm3.c     **** 
 30954              		.loc 1 9677 0
 30955 db3a 48C1E204 		salq	$4, %rdx
 30956              	.LVL2814:
9679:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 30957              		.loc 1 9679 0
 30958 db3e C1E008   		sall	$8, %eax
 30959 db41 09CB     		orl	%ecx, %ebx
 30960 db43 09C3     		orl	%eax, %ebx
 30961              	.LVL2815:
9680:src/vm3.c     ****   if (op1 == 0x0) {
 30962              		.loc 1 9680 0
 30963 db45 89D9     		movl	%ebx, %ecx
9682:src/vm3.c     ****     op1 = op1 + funct;
 30964              		.loc 1 9682 0
 30965 db47 88D8     		movb	%bl, %al
9680:src/vm3.c     ****   if (op1 == 0x0) {
 30966              		.loc 1 9680 0
 30967 db49 C1E91A   		shrl	$26, %ecx
 30968              	.LVL2816:
9682:src/vm3.c     ****     op1 = op1 + funct;
 30969              		.loc 1 9682 0
GAS LISTING /tmp/cc15eBE3.s 			page 1042


 30970 db4c 83E03F   		andl	$63, %eax
 30971 db4f 8D712B   		leal	43(%rcx), %esi
 30972 db52 84C9     		testb	%cl, %cl
 30973 db54 0F45C6   		cmovne	%esi, %eax
 30974              	.LVL2817:
9689:src/vm3.c     **** 
 30975              		.loc 1 9689 0
 30976 db57 0FB6C0   		movzbl	%al, %eax
 30977 db5a 48C1E004 		salq	$4, %rax
 30978              	.LVL2818:
 30979 db5e 48038414 		addq	58088(%rsp,%rdx), %rax
 30979      E8E20000 
 30980 db66 488B08   		movq	(%rax), %rcx
 30981 db69 E9EA31FF 		jmp	.L269
 30981      FF
 30982              	.LVL2819:
 30983              	.L30:
9698:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 30984              		.loc 1 9698 0
 30985 db6e 4489C0   		movl	%r8d, %eax
9699:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 30986              		.loc 1 9699 0
 30987 db71 4489C2   		movl	%r8d, %edx
9697:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30988              		.loc 1 9697 0
 30989 db74 41C1E806 		shrl	$6, %r8d
 30990              	.LVL2820:
9698:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 30991              		.loc 1 9698 0
 30992 db78 C1E810   		shrl	$16, %eax
 30993              	.LVL2821:
9697:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 30994              		.loc 1 9697 0
 30995 db7b 4488C1   		movb	%r8b, %cl
9699:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 30996              		.loc 1 9699 0
 30997 db7e C1EA0B   		shrl	$11, %edx
 30998              	.LVL2822:
9700:src/vm3.c     **** PC  =  nPC;
 30999              		.loc 1 9700 0
 31000 db81 83E01F   		andl	$31, %eax
9697:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31001              		.loc 1 9697 0
 31002 db84 83E11F   		andl	$31, %ecx
9700:src/vm3.c     **** PC  =  nPC;
 31003              		.loc 1 9700 0
 31004 db87 83E21F   		andl	$31, %edx
 31005 db8a 8B048500 		movl	RF(,%rax,4), %eax
 31005      000000
9702:src/vm3.c     **** 
 31006              		.loc 1 9702 0
 31007 db91 83050000 		addl	$4, nPC(%rip)
 31007      000004
 31008              	.LVL2823:
9700:src/vm3.c     **** PC  =  nPC;
 31009              		.loc 1 9700 0
 31010 db98 D3E0     		sall	%cl, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1043


 31011 db9a 89049500 		movl	%eax, RF(,%rdx,4)
 31011      000000
9708:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31012              		.loc 1 9708 0
 31013 dba1 89DA     		movl	%ebx, %edx
9709:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 31014              		.loc 1 9709 0
 31015 dba3 89D8     		movl	%ebx, %eax
9708:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31016              		.loc 1 9708 0
 31017 dba5 C1EA15   		shrl	$21, %edx
9711:src/vm3.c     **** PC  =  nPC;
 31018              		.loc 1 9711 0
 31019 dba8 0FBFDB   		movswl	%bx, %ebx
 31020              	.LVL2824:
9709:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 31021              		.loc 1 9709 0
 31022 dbab C1E810   		shrl	$16, %eax
 31023              	.LVL2825:
9711:src/vm3.c     **** PC  =  nPC;
 31024              		.loc 1 9711 0
 31025 dbae 83E21F   		andl	$31, %edx
 31026 dbb1 83E01F   		andl	$31, %eax
 31027 dbb4 231C9500 		andl	RF(,%rdx,4), %ebx
 31027      000000
 31028              	.LVL2826:
 31029 dbbb 891C8500 		movl	%ebx, RF(,%rax,4)
 31029      000000
9712:src/vm3.c     **** nPC  += 4;
 31030              		.loc 1 9712 0
 31031 dbc2 8B050000 		movl	nPC(%rip), %eax
 31031      0000
9714:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31032              		.loc 1 9714 0
 31033 dbc8 8D5003   		leal	3(%rax), %edx
9713:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31034              		.loc 1 9713 0
 31035 dbcb 8D4804   		leal	4(%rax), %ecx
9712:src/vm3.c     **** nPC  += 4;
 31036              		.loc 1 9712 0
 31037 dbce 89050000 		movl	%eax, PC(%rip)
 31037      0000
9714:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31038              		.loc 1 9714 0
 31039 dbd4 440FB682 		movzbl	VM_memory(%rdx), %r8d
 31039      00000000 
 31040 dbdc 89C2     		movl	%eax, %edx
9727:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31041              		.loc 1 9727 0
 31042 dbde 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31042      000000
9714:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31043              		.loc 1 9714 0
 31044 dbe5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31044      000000
9713:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31045              		.loc 1 9713 0
GAS LISTING /tmp/cc15eBE3.s 			page 1044


 31046 dbec 890D0000 		movl	%ecx, nPC(%rip)
 31046      0000
9727:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31047              		.loc 1 9727 0
 31048 dbf2 8D4805   		leal	5(%rax), %ecx
 31049 dbf5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31049      000000
9714:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31050              		.loc 1 9714 0
 31051 dbfc C1E218   		sall	$24, %edx
 31052 dbff 4109D0   		orl	%edx, %r8d
 31053 dc02 8D5001   		leal	1(%rax), %edx
 31054 dc05 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31054      000000
 31055 dc0c C1E210   		sall	$16, %edx
 31056 dc0f 4109D0   		orl	%edx, %r8d
 31057 dc12 8D5002   		leal	2(%rax), %edx
 31058 dc15 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31058      000000
 31059 dc1c C1E208   		sall	$8, %edx
 31060 dc1f 4109D0   		orl	%edx, %r8d
 31061              	.LVL2827:
9715:src/vm3.c     ****   if (op0 == 0x0) {
 31062              		.loc 1 9715 0
 31063 dc22 4489C6   		movl	%r8d, %esi
9717:src/vm3.c     ****     op0 = op0 + funct;
 31064              		.loc 1 9717 0
 31065 dc25 4488C2   		movb	%r8b, %dl
9715:src/vm3.c     ****   if (op0 == 0x0) {
 31066              		.loc 1 9715 0
 31067 dc28 C1EE1A   		shrl	$26, %esi
 31068              	.LVL2828:
9717:src/vm3.c     ****     op0 = op0 + funct;
 31069              		.loc 1 9717 0
 31070 dc2b 83E23F   		andl	$63, %edx
 31071 dc2e 8D7E2B   		leal	43(%rsi), %edi
 31072 dc31 4084F6   		testb	%sil, %sil
 31073 dc34 0F45D7   		cmovne	%edi, %edx
 31074              	.LVL2829:
9727:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31075              		.loc 1 9727 0
 31076 dc37 C1E110   		sall	$16, %ecx
 31077 dc3a C1E318   		sall	$24, %ebx
 31078 dc3d 09CB     		orl	%ecx, %ebx
 31079 dc3f 8D4807   		leal	7(%rax), %ecx
 31080 dc42 83C006   		addl	$6, %eax
 31081 dc45 0FB68000 		movzbl	VM_memory(%rax), %eax
 31081      000000
9725:src/vm3.c     **** 
 31082              		.loc 1 9725 0
 31083 dc4c 0FB6D2   		movzbl	%dl, %edx
9727:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31084              		.loc 1 9727 0
 31085 dc4f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31085      000000
9725:src/vm3.c     **** 
 31086              		.loc 1 9725 0
GAS LISTING /tmp/cc15eBE3.s 			page 1045


 31087 dc56 48C1E204 		salq	$4, %rdx
 31088              	.LVL2830:
9727:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31089              		.loc 1 9727 0
 31090 dc5a C1E008   		sall	$8, %eax
 31091 dc5d 09CB     		orl	%ecx, %ebx
 31092 dc5f 09C3     		orl	%eax, %ebx
 31093              	.LVL2831:
9728:src/vm3.c     ****   if (op1 == 0x0) {
 31094              		.loc 1 9728 0
 31095 dc61 89D9     		movl	%ebx, %ecx
9730:src/vm3.c     ****     op1 = op1 + funct;
 31096              		.loc 1 9730 0
 31097 dc63 88D8     		movb	%bl, %al
9728:src/vm3.c     ****   if (op1 == 0x0) {
 31098              		.loc 1 9728 0
 31099 dc65 C1E91A   		shrl	$26, %ecx
 31100              	.LVL2832:
9730:src/vm3.c     ****     op1 = op1 + funct;
 31101              		.loc 1 9730 0
 31102 dc68 83E03F   		andl	$63, %eax
 31103 dc6b 8D712B   		leal	43(%rcx), %esi
 31104 dc6e 84C9     		testb	%cl, %cl
 31105 dc70 0F45C6   		cmovne	%esi, %eax
 31106              	.LVL2833:
9737:src/vm3.c     **** 
 31107              		.loc 1 9737 0
 31108 dc73 0FB6C0   		movzbl	%al, %eax
 31109 dc76 48C1E004 		salq	$4, %rax
 31110              	.LVL2834:
 31111 dc7a 48038414 		addq	58088(%rsp,%rdx), %rax
 31111      E8E20000 
 31112 dc82 488B08   		movq	(%rax), %rcx
 31113 dc85 E9CE30FF 		jmp	.L269
 31113      FF
 31114              	.LVL2835:
 31115              	.L105:
9745:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31116              		.loc 1 9745 0
 31117 dc8a 4489C2   		movl	%r8d, %edx
9746:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31118              		.loc 1 9746 0
 31119 dc8d 4489C0   		movl	%r8d, %eax
9748:src/vm3.c     **** PC  =  nPC;
 31120              		.loc 1 9748 0
 31121 dc90 450FBFC0 		movswl	%r8w, %r8d
 31122              	.LVL2836:
9745:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31123              		.loc 1 9745 0
 31124 dc94 C1EA15   		shrl	$21, %edx
9746:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31125              		.loc 1 9746 0
 31126 dc97 C1E810   		shrl	$16, %eax
 31127              	.LVL2837:
9750:src/vm3.c     **** 
 31128              		.loc 1 9750 0
 31129 dc9a 83050000 		addl	$4, nPC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 1046


 31129      000004
 31130              	.LVL2838:
9748:src/vm3.c     **** PC  =  nPC;
 31131              		.loc 1 9748 0
 31132 dca1 83E21F   		andl	$31, %edx
 31133 dca4 83E01F   		andl	$31, %eax
 31134 dca7 44230495 		andl	RF(,%rdx,4), %r8d
 31134      00000000 
 31135              	.LVL2839:
9758:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 31136              		.loc 1 9758 0
 31137 dcaf 89DA     		movl	%ebx, %edx
 31138 dcb1 C1EA0B   		shrl	$11, %edx
9759:src/vm3.c     **** PC  =  nPC;
 31139              		.loc 1 9759 0
 31140 dcb4 83E21F   		andl	$31, %edx
9748:src/vm3.c     **** PC  =  nPC;
 31141              		.loc 1 9748 0
 31142 dcb7 44890485 		movl	%r8d, RF(,%rax,4)
 31142      00000000 
9757:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 31143              		.loc 1 9757 0
 31144 dcbf 89D8     		movl	%ebx, %eax
9756:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31145              		.loc 1 9756 0
 31146 dcc1 C1EB06   		shrl	$6, %ebx
 31147              	.LVL2840:
9757:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 31148              		.loc 1 9757 0
 31149 dcc4 C1E810   		shrl	$16, %eax
 31150              	.LVL2841:
9756:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31151              		.loc 1 9756 0
 31152 dcc7 88D9     		movb	%bl, %cl
9759:src/vm3.c     **** PC  =  nPC;
 31153              		.loc 1 9759 0
 31154 dcc9 83E01F   		andl	$31, %eax
9756:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31155              		.loc 1 9756 0
 31156 dccc 83E11F   		andl	$31, %ecx
9759:src/vm3.c     **** PC  =  nPC;
 31157              		.loc 1 9759 0
 31158 dccf 8B048500 		movl	RF(,%rax,4), %eax
 31158      000000
 31159 dcd6 D3E0     		sall	%cl, %eax
 31160 dcd8 89049500 		movl	%eax, RF(,%rdx,4)
 31160      000000
9760:src/vm3.c     **** nPC  += 4;
 31161              		.loc 1 9760 0
 31162 dcdf 8B050000 		movl	nPC(%rip), %eax
 31162      0000
9762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31163              		.loc 1 9762 0
 31164 dce5 8D5003   		leal	3(%rax), %edx
9761:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31165              		.loc 1 9761 0
 31166 dce8 8D4804   		leal	4(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1047


9760:src/vm3.c     **** nPC  += 4;
 31167              		.loc 1 9760 0
 31168 dceb 89050000 		movl	%eax, PC(%rip)
 31168      0000
9762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31169              		.loc 1 9762 0
 31170 dcf1 440FB682 		movzbl	VM_memory(%rdx), %r8d
 31170      00000000 
 31171 dcf9 89C2     		movl	%eax, %edx
9775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31172              		.loc 1 9775 0
 31173 dcfb 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31173      000000
9762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31174              		.loc 1 9762 0
 31175 dd02 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31175      000000
9761:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31176              		.loc 1 9761 0
 31177 dd09 890D0000 		movl	%ecx, nPC(%rip)
 31177      0000
9775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31178              		.loc 1 9775 0
 31179 dd0f 8D4805   		leal	5(%rax), %ecx
 31180 dd12 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31180      000000
9762:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31181              		.loc 1 9762 0
 31182 dd19 C1E218   		sall	$24, %edx
 31183 dd1c 4109D0   		orl	%edx, %r8d
 31184 dd1f 8D5001   		leal	1(%rax), %edx
 31185 dd22 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31185      000000
 31186 dd29 C1E210   		sall	$16, %edx
 31187 dd2c 4109D0   		orl	%edx, %r8d
 31188 dd2f 8D5002   		leal	2(%rax), %edx
 31189 dd32 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31189      000000
 31190 dd39 C1E208   		sall	$8, %edx
 31191 dd3c 4109D0   		orl	%edx, %r8d
 31192              	.LVL2842:
9763:src/vm3.c     ****   if (op0 == 0x0) {
 31193              		.loc 1 9763 0
 31194 dd3f 4489C6   		movl	%r8d, %esi
9765:src/vm3.c     ****     op0 = op0 + funct;
 31195              		.loc 1 9765 0
 31196 dd42 4488C2   		movb	%r8b, %dl
9763:src/vm3.c     ****   if (op0 == 0x0) {
 31197              		.loc 1 9763 0
 31198 dd45 C1EE1A   		shrl	$26, %esi
 31199              	.LVL2843:
9765:src/vm3.c     ****     op0 = op0 + funct;
 31200              		.loc 1 9765 0
 31201 dd48 83E23F   		andl	$63, %edx
 31202 dd4b 8D7E2B   		leal	43(%rsi), %edi
 31203 dd4e 4084F6   		testb	%sil, %sil
 31204 dd51 0F45D7   		cmovne	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1048


 31205              	.LVL2844:
9775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31206              		.loc 1 9775 0
 31207 dd54 C1E110   		sall	$16, %ecx
 31208 dd57 C1E318   		sall	$24, %ebx
 31209 dd5a 09CB     		orl	%ecx, %ebx
 31210 dd5c 8D4807   		leal	7(%rax), %ecx
 31211 dd5f 83C006   		addl	$6, %eax
 31212 dd62 0FB68000 		movzbl	VM_memory(%rax), %eax
 31212      000000
9773:src/vm3.c     **** 
 31213              		.loc 1 9773 0
 31214 dd69 0FB6D2   		movzbl	%dl, %edx
9775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31215              		.loc 1 9775 0
 31216 dd6c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31216      000000
9773:src/vm3.c     **** 
 31217              		.loc 1 9773 0
 31218 dd73 48C1E204 		salq	$4, %rdx
 31219              	.LVL2845:
9775:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31220              		.loc 1 9775 0
 31221 dd77 C1E008   		sall	$8, %eax
 31222 dd7a 09CB     		orl	%ecx, %ebx
 31223 dd7c 09C3     		orl	%eax, %ebx
 31224              	.LVL2846:
9776:src/vm3.c     ****   if (op1 == 0x0) {
 31225              		.loc 1 9776 0
 31226 dd7e 89D9     		movl	%ebx, %ecx
9778:src/vm3.c     ****     op1 = op1 + funct;
 31227              		.loc 1 9778 0
 31228 dd80 88D8     		movb	%bl, %al
9776:src/vm3.c     ****   if (op1 == 0x0) {
 31229              		.loc 1 9776 0
 31230 dd82 C1E91A   		shrl	$26, %ecx
 31231              	.LVL2847:
9778:src/vm3.c     ****     op1 = op1 + funct;
 31232              		.loc 1 9778 0
 31233 dd85 83E03F   		andl	$63, %eax
 31234 dd88 8D712B   		leal	43(%rcx), %esi
 31235 dd8b 84C9     		testb	%cl, %cl
 31236 dd8d 0F45C6   		cmovne	%esi, %eax
 31237              	.LVL2848:
9785:src/vm3.c     **** 
 31238              		.loc 1 9785 0
 31239 dd90 0FB6C0   		movzbl	%al, %eax
 31240 dd93 48C1E004 		salq	$4, %rax
 31241              	.LVL2849:
 31242 dd97 48038414 		addq	58088(%rsp,%rdx), %rax
 31242      E8E20000 
 31243 dd9f 488B08   		movq	(%rax), %rcx
 31244 dda2 E9B12FFF 		jmp	.L269
 31244      FF
 31245              	.LVL2850:
 31246              	.L2:
9794:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 1049


 31247              		.loc 1 9794 0
 31248 dda7 4489C0   		movl	%r8d, %eax
9796:src/vm3.c     **** PC  =  nPC;
 31249              		.loc 1 9796 0
 31250 ddaa 41C1E010 		sall	$16, %r8d
 31251              	.LVL2851:
9806:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 31252              		.loc 1 9806 0
 31253 ddae 89DA     		movl	%ebx, %edx
9794:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31254              		.loc 1 9794 0
 31255 ddb0 C1E810   		shrl	$16, %eax
 31256              	.LVL2852:
9806:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 31257              		.loc 1 9806 0
 31258 ddb3 C1EA0B   		shrl	$11, %edx
9798:src/vm3.c     **** 
 31259              		.loc 1 9798 0
 31260 ddb6 83050000 		addl	$4, nPC(%rip)
 31260      000004
 31261              	.LVL2853:
9796:src/vm3.c     **** PC  =  nPC;
 31262              		.loc 1 9796 0
 31263 ddbd 83E01F   		andl	$31, %eax
9807:src/vm3.c     **** PC  =  nPC;
 31264              		.loc 1 9807 0
 31265 ddc0 83E21F   		andl	$31, %edx
9796:src/vm3.c     **** PC  =  nPC;
 31266              		.loc 1 9796 0
 31267 ddc3 44890485 		movl	%r8d, RF(,%rax,4)
 31267      00000000 
9805:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 31268              		.loc 1 9805 0
 31269 ddcb 89D8     		movl	%ebx, %eax
9804:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31270              		.loc 1 9804 0
 31271 ddcd C1EB06   		shrl	$6, %ebx
 31272              	.LVL2854:
9805:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 31273              		.loc 1 9805 0
 31274 ddd0 C1E810   		shrl	$16, %eax
 31275              	.LVL2855:
9804:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31276              		.loc 1 9804 0
 31277 ddd3 88D9     		movb	%bl, %cl
9807:src/vm3.c     **** PC  =  nPC;
 31278              		.loc 1 9807 0
 31279 ddd5 83E01F   		andl	$31, %eax
9804:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31280              		.loc 1 9804 0
 31281 ddd8 83E11F   		andl	$31, %ecx
9807:src/vm3.c     **** PC  =  nPC;
 31282              		.loc 1 9807 0
 31283 dddb 8B048500 		movl	RF(,%rax,4), %eax
 31283      000000
 31284 dde2 D3E8     		shrl	%cl, %eax
 31285 dde4 89049500 		movl	%eax, RF(,%rdx,4)
GAS LISTING /tmp/cc15eBE3.s 			page 1050


 31285      000000
9808:src/vm3.c     **** nPC  += 4;
 31286              		.loc 1 9808 0
 31287 ddeb 8B050000 		movl	nPC(%rip), %eax
 31287      0000
9810:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31288              		.loc 1 9810 0
 31289 ddf1 8D5003   		leal	3(%rax), %edx
9809:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31290              		.loc 1 9809 0
 31291 ddf4 8D4804   		leal	4(%rax), %ecx
9808:src/vm3.c     **** nPC  += 4;
 31292              		.loc 1 9808 0
 31293 ddf7 89050000 		movl	%eax, PC(%rip)
 31293      0000
9810:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31294              		.loc 1 9810 0
 31295 ddfd 440FB682 		movzbl	VM_memory(%rdx), %r8d
 31295      00000000 
 31296 de05 89C2     		movl	%eax, %edx
9823:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31297              		.loc 1 9823 0
 31298 de07 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31298      000000
9810:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31299              		.loc 1 9810 0
 31300 de0e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31300      000000
9809:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31301              		.loc 1 9809 0
 31302 de15 890D0000 		movl	%ecx, nPC(%rip)
 31302      0000
9823:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31303              		.loc 1 9823 0
 31304 de1b 8D4805   		leal	5(%rax), %ecx
 31305 de1e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31305      000000
9810:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31306              		.loc 1 9810 0
 31307 de25 C1E218   		sall	$24, %edx
 31308 de28 4109D0   		orl	%edx, %r8d
 31309 de2b 8D5001   		leal	1(%rax), %edx
 31310 de2e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31310      000000
 31311 de35 C1E210   		sall	$16, %edx
 31312 de38 4109D0   		orl	%edx, %r8d
 31313 de3b 8D5002   		leal	2(%rax), %edx
 31314 de3e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31314      000000
 31315 de45 C1E208   		sall	$8, %edx
 31316 de48 4109D0   		orl	%edx, %r8d
 31317              	.LVL2856:
9811:src/vm3.c     ****   if (op0 == 0x0) {
 31318              		.loc 1 9811 0
 31319 de4b 4489C6   		movl	%r8d, %esi
9813:src/vm3.c     ****     op0 = op0 + funct;
 31320              		.loc 1 9813 0
GAS LISTING /tmp/cc15eBE3.s 			page 1051


 31321 de4e 4488C2   		movb	%r8b, %dl
9811:src/vm3.c     ****   if (op0 == 0x0) {
 31322              		.loc 1 9811 0
 31323 de51 C1EE1A   		shrl	$26, %esi
 31324              	.LVL2857:
9813:src/vm3.c     ****     op0 = op0 + funct;
 31325              		.loc 1 9813 0
 31326 de54 83E23F   		andl	$63, %edx
 31327 de57 8D7E2B   		leal	43(%rsi), %edi
 31328 de5a 4084F6   		testb	%sil, %sil
 31329 de5d 0F45D7   		cmovne	%edi, %edx
 31330              	.LVL2858:
9823:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31331              		.loc 1 9823 0
 31332 de60 C1E110   		sall	$16, %ecx
 31333 de63 C1E318   		sall	$24, %ebx
 31334 de66 09CB     		orl	%ecx, %ebx
 31335 de68 8D4807   		leal	7(%rax), %ecx
 31336 de6b 83C006   		addl	$6, %eax
 31337 de6e 0FB68000 		movzbl	VM_memory(%rax), %eax
 31337      000000
9821:src/vm3.c     **** 
 31338              		.loc 1 9821 0
 31339 de75 0FB6D2   		movzbl	%dl, %edx
9823:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31340              		.loc 1 9823 0
 31341 de78 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31341      000000
9821:src/vm3.c     **** 
 31342              		.loc 1 9821 0
 31343 de7f 48C1E204 		salq	$4, %rdx
 31344              	.LVL2859:
9823:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31345              		.loc 1 9823 0
 31346 de83 C1E008   		sall	$8, %eax
 31347 de86 09CB     		orl	%ecx, %ebx
 31348 de88 09C3     		orl	%eax, %ebx
 31349              	.LVL2860:
9824:src/vm3.c     ****   if (op1 == 0x0) {
 31350              		.loc 1 9824 0
 31351 de8a 89D9     		movl	%ebx, %ecx
9826:src/vm3.c     ****     op1 = op1 + funct;
 31352              		.loc 1 9826 0
 31353 de8c 88D8     		movb	%bl, %al
9824:src/vm3.c     ****   if (op1 == 0x0) {
 31354              		.loc 1 9824 0
 31355 de8e C1E91A   		shrl	$26, %ecx
 31356              	.LVL2861:
9826:src/vm3.c     ****     op1 = op1 + funct;
 31357              		.loc 1 9826 0
 31358 de91 83E03F   		andl	$63, %eax
 31359 de94 8D712B   		leal	43(%rcx), %esi
 31360 de97 84C9     		testb	%cl, %cl
 31361 de99 0F45C6   		cmovne	%esi, %eax
 31362              	.LVL2862:
9833:src/vm3.c     **** 
 31363              		.loc 1 9833 0
GAS LISTING /tmp/cc15eBE3.s 			page 1052


 31364 de9c 0FB6C0   		movzbl	%al, %eax
 31365 de9f 48C1E004 		salq	$4, %rax
 31366              	.LVL2863:
 31367 dea3 48038414 		addq	58088(%rsp,%rdx), %rax
 31367      E8E20000 
 31368 deab 488B08   		movq	(%rax), %rcx
 31369 deae E9A52EFF 		jmp	.L269
 31369      FF
 31370              	.LVL2864:
 31371              	.L185:
9841:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31372              		.loc 1 9841 0
 31373 deb3 4489C0   		movl	%r8d, %eax
9844:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 31374              		.loc 1 9844 0
 31375 deb6 410FBFC8 		movswl	%r8w, %ecx
9842:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31376              		.loc 1 9842 0
 31377 deba 41C1E810 		shrl	$16, %r8d
 31378              	.LVL2865:
9841:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31379              		.loc 1 9841 0
 31380 debe C1E815   		shrl	$21, %eax
 31381              	.LVL2866:
9844:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 31382              		.loc 1 9844 0
 31383 dec1 4183E01F 		andl	$31, %r8d
9849:src/vm3.c     **** 
 31384              		.loc 1 9849 0
 31385 dec5 83050000 		addl	$4, nPC(%rip)
 31385      000004
 31386              	.LVL2867:
9844:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 31387              		.loc 1 9844 0
 31388 decc 83E01F   		andl	$31, %eax
 31389 decf 8B148500 		movl	RF(,%rax,4), %edx
 31389      000000
 31390 ded6 428B0485 		movl	RF(,%r8,4), %eax
 31390      00000000 
 31391 dede 8D3411   		leal	(%rcx,%rdx), %esi
 31392 dee1 89C7     		movl	%eax, %edi
 31393 dee3 C1EF18   		shrl	$24, %edi
 31394 dee6 4088BE00 		movb	%dil, VM_memory(%rsi)
 31394      000000
9845:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 31395              		.loc 1 9845 0
 31396 deed 8D741101 		leal	1(%rcx,%rdx), %esi
 31397 def1 89C7     		movl	%eax, %edi
 31398 def3 C1EF10   		shrl	$16, %edi
 31399 def6 4088BE00 		movb	%dil, VM_memory(%rsi)
 31399      000000
9846:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 31400              		.loc 1 9846 0
 31401 defd 8D741102 		leal	2(%rcx,%rdx), %esi
9847:src/vm3.c     **** PC  =  nPC;
 31402              		.loc 1 9847 0
 31403 df01 8D541103 		leal	3(%rcx,%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1053


9846:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 31404              		.loc 1 9846 0
 31405 df05 0FB6FC   		movzbl	%ah, %edi
 31406 df08 4088BE00 		movb	%dil, VM_memory(%rsi)
 31406      000000
9847:src/vm3.c     **** PC  =  nPC;
 31407              		.loc 1 9847 0
 31408 df0f 88820000 		movb	%al, VM_memory(%rdx)
 31408      0000
9856:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 31409              		.loc 1 9856 0
 31410 df15 89D8     		movl	%ebx, %eax
 31411 df17 C1E810   		shrl	$16, %eax
9858:src/vm3.c     **** PC  =  nPC;
 31412              		.loc 1 9858 0
 31413 df1a C1E310   		sall	$16, %ebx
 31414              	.LVL2868:
 31415 df1d 83E01F   		andl	$31, %eax
 31416 df20 891C8500 		movl	%ebx, RF(,%rax,4)
 31416      000000
9859:src/vm3.c     **** nPC  += 4;
 31417              		.loc 1 9859 0
 31418 df27 8B050000 		movl	nPC(%rip), %eax
 31418      0000
9861:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31419              		.loc 1 9861 0
 31420 df2d 8D5003   		leal	3(%rax), %edx
9860:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31421              		.loc 1 9860 0
 31422 df30 8D4804   		leal	4(%rax), %ecx
9859:src/vm3.c     **** nPC  += 4;
 31423              		.loc 1 9859 0
 31424 df33 89050000 		movl	%eax, PC(%rip)
 31424      0000
9861:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31425              		.loc 1 9861 0
 31426 df39 440FB682 		movzbl	VM_memory(%rdx), %r8d
 31426      00000000 
 31427 df41 89C2     		movl	%eax, %edx
9874:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31428              		.loc 1 9874 0
 31429 df43 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31429      000000
9861:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31430              		.loc 1 9861 0
 31431 df4a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31431      000000
9860:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31432              		.loc 1 9860 0
 31433 df51 890D0000 		movl	%ecx, nPC(%rip)
 31433      0000
9874:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31434              		.loc 1 9874 0
 31435 df57 8D4805   		leal	5(%rax), %ecx
 31436 df5a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31436      000000
9861:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1054


 31437              		.loc 1 9861 0
 31438 df61 C1E218   		sall	$24, %edx
 31439 df64 4109D0   		orl	%edx, %r8d
 31440 df67 8D5001   		leal	1(%rax), %edx
 31441 df6a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31441      000000
 31442 df71 C1E210   		sall	$16, %edx
 31443 df74 4109D0   		orl	%edx, %r8d
 31444 df77 8D5002   		leal	2(%rax), %edx
 31445 df7a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31445      000000
 31446 df81 C1E208   		sall	$8, %edx
 31447 df84 4109D0   		orl	%edx, %r8d
 31448              	.LVL2869:
9862:src/vm3.c     ****   if (op0 == 0x0) {
 31449              		.loc 1 9862 0
 31450 df87 4489C6   		movl	%r8d, %esi
9864:src/vm3.c     ****     op0 = op0 + funct;
 31451              		.loc 1 9864 0
 31452 df8a 4488C2   		movb	%r8b, %dl
9862:src/vm3.c     ****   if (op0 == 0x0) {
 31453              		.loc 1 9862 0
 31454 df8d C1EE1A   		shrl	$26, %esi
 31455              	.LVL2870:
9864:src/vm3.c     ****     op0 = op0 + funct;
 31456              		.loc 1 9864 0
 31457 df90 83E23F   		andl	$63, %edx
 31458 df93 8D7E2B   		leal	43(%rsi), %edi
 31459 df96 4084F6   		testb	%sil, %sil
 31460 df99 0F45D7   		cmovne	%edi, %edx
 31461              	.LVL2871:
9874:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31462              		.loc 1 9874 0
 31463 df9c C1E110   		sall	$16, %ecx
 31464 df9f C1E318   		sall	$24, %ebx
 31465 dfa2 09CB     		orl	%ecx, %ebx
 31466 dfa4 8D4807   		leal	7(%rax), %ecx
 31467 dfa7 83C006   		addl	$6, %eax
 31468 dfaa 0FB68000 		movzbl	VM_memory(%rax), %eax
 31468      000000
9872:src/vm3.c     **** 
 31469              		.loc 1 9872 0
 31470 dfb1 0FB6D2   		movzbl	%dl, %edx
9874:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31471              		.loc 1 9874 0
 31472 dfb4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31472      000000
9872:src/vm3.c     **** 
 31473              		.loc 1 9872 0
 31474 dfbb 48C1E204 		salq	$4, %rdx
 31475              	.LVL2872:
9874:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31476              		.loc 1 9874 0
 31477 dfbf C1E008   		sall	$8, %eax
 31478 dfc2 09CB     		orl	%ecx, %ebx
 31479 dfc4 09C3     		orl	%eax, %ebx
 31480              	.LVL2873:
GAS LISTING /tmp/cc15eBE3.s 			page 1055


9875:src/vm3.c     ****   if (op1 == 0x0) {
 31481              		.loc 1 9875 0
 31482 dfc6 89D9     		movl	%ebx, %ecx
9877:src/vm3.c     ****     op1 = op1 + funct;
 31483              		.loc 1 9877 0
 31484 dfc8 88D8     		movb	%bl, %al
9875:src/vm3.c     ****   if (op1 == 0x0) {
 31485              		.loc 1 9875 0
 31486 dfca C1E91A   		shrl	$26, %ecx
 31487              	.LVL2874:
9877:src/vm3.c     ****     op1 = op1 + funct;
 31488              		.loc 1 9877 0
 31489 dfcd 83E03F   		andl	$63, %eax
 31490 dfd0 8D712B   		leal	43(%rcx), %esi
 31491 dfd3 84C9     		testb	%cl, %cl
 31492 dfd5 0F45C6   		cmovne	%esi, %eax
 31493              	.LVL2875:
9884:src/vm3.c     **** 
 31494              		.loc 1 9884 0
 31495 dfd8 0FB6C0   		movzbl	%al, %eax
 31496 dfdb 48C1E004 		salq	$4, %rax
 31497              	.LVL2876:
 31498 dfdf 48038414 		addq	58088(%rsp,%rdx), %rax
 31498      E8E20000 
 31499 dfe7 488B08   		movq	(%rax), %rcx
 31500 dfea E9692DFF 		jmp	.L269
 31500      FF
 31501              	.LVL2877:
 31502              	.L107:
9892:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31503              		.loc 1 9892 0
 31504 dfef 4489C2   		movl	%r8d, %edx
9893:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31505              		.loc 1 9893 0
 31506 dff2 4489C0   		movl	%r8d, %eax
9895:src/vm3.c     **** PC  =  nPC;
 31507              		.loc 1 9895 0
 31508 dff5 450FBFC0 		movswl	%r8w, %r8d
 31509              	.LVL2878:
9892:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31510              		.loc 1 9892 0
 31511 dff9 C1EA15   		shrl	$21, %edx
9893:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31512              		.loc 1 9893 0
 31513 dffc C1E810   		shrl	$16, %eax
 31514              	.LVL2879:
9903:src/vm3.c     **** PC = nPC;
 31515              		.loc 1 9903 0
 31516 dfff C1EB15   		shrl	$21, %ebx
 31517              	.LVL2880:
9895:src/vm3.c     **** PC  =  nPC;
 31518              		.loc 1 9895 0
 31519 e002 83E21F   		andl	$31, %edx
 31520 e005 83E01F   		andl	$31, %eax
9905:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31521              		.loc 1 9905 0
 31522 e008 83E31F   		andl	$31, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1056


9895:src/vm3.c     **** PC  =  nPC;
 31523              		.loc 1 9895 0
 31524 e00b 44230495 		andl	RF(,%rdx,4), %r8d
 31524      00000000 
 31525              	.LVL2881:
9897:src/vm3.c     **** 
 31526              		.loc 1 9897 0
 31527 e013 8B150000 		movl	nPC(%rip), %edx
 31527      0000
 31528 e019 8D4A04   		leal	4(%rdx), %ecx
9906:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31529              		.loc 1 9906 0
 31530 e01c 8D7207   		leal	7(%rdx), %esi
9895:src/vm3.c     **** PC  =  nPC;
 31531              		.loc 1 9895 0
 31532 e01f 44890485 		movl	%r8d, RF(,%rax,4)
 31532      00000000 
9905:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31533              		.loc 1 9905 0
 31534 e027 8B049D00 		movl	RF(,%rbx,4), %eax
 31534      000000
9904:src/vm3.c     **** nPC = RF[rs];
 31535              		.loc 1 9904 0
 31536 e02e 890D0000 		movl	%ecx, PC(%rip)
 31536      0000
9906:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31537              		.loc 1 9906 0
 31538 e034 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31538      000000
 31539 e03b 440FB686 		movzbl	VM_memory(%rsi), %r8d
 31539      00000000 
9905:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31540              		.loc 1 9905 0
 31541 e043 89050000 		movl	%eax, nPC(%rip)
 31541      0000
9906:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31542              		.loc 1 9906 0
 31543 e049 C1E118   		sall	$24, %ecx
 31544 e04c 4109C8   		orl	%ecx, %r8d
 31545 e04f 8D4A05   		leal	5(%rdx), %ecx
 31546 e052 83C206   		addl	$6, %edx
 31547 e055 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31547      000000
 31548 e05c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31548      000000
 31549 e063 C1E208   		sall	$8, %edx
 31550 e066 C1E110   		sall	$16, %ecx
 31551 e069 4109C8   		orl	%ecx, %r8d
 31552 e06c 4109D0   		orl	%edx, %r8d
 31553              	.LVL2882:
9907:src/vm3.c     ****   if (op0 == 0x0) {
 31554              		.loc 1 9907 0
 31555 e06f 4489C1   		movl	%r8d, %ecx
9909:src/vm3.c     ****     op0 = op0 + funct;
 31556              		.loc 1 9909 0
 31557 e072 4488C2   		movb	%r8b, %dl
9907:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 1057


 31558              		.loc 1 9907 0
 31559 e075 C1E91A   		shrl	$26, %ecx
 31560              	.LVL2883:
9909:src/vm3.c     ****     op0 = op0 + funct;
 31561              		.loc 1 9909 0
 31562 e078 83E23F   		andl	$63, %edx
 31563 e07b 8D712B   		leal	43(%rcx), %esi
 31564 e07e 84C9     		testb	%cl, %cl
9919:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31565              		.loc 1 9919 0
 31566 e080 8D4803   		leal	3(%rax), %ecx
 31567              	.LVL2884:
 31568 e083 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31568      000000
 31569 e08a 89C1     		movl	%eax, %ecx
9909:src/vm3.c     ****     op0 = op0 + funct;
 31570              		.loc 1 9909 0
 31571 e08c 0F45D6   		cmovne	%esi, %edx
 31572              	.LVL2885:
9919:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31573              		.loc 1 9919 0
 31574 e08f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31574      000000
9917:src/vm3.c     **** 
 31575              		.loc 1 9917 0
 31576 e096 0FB6D2   		movzbl	%dl, %edx
 31577 e099 48C1E204 		salq	$4, %rdx
 31578              	.LVL2886:
9919:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31579              		.loc 1 9919 0
 31580 e09d C1E118   		sall	$24, %ecx
 31581 e0a0 09CB     		orl	%ecx, %ebx
 31582 e0a2 8D4801   		leal	1(%rax), %ecx
 31583 e0a5 83C002   		addl	$2, %eax
 31584 e0a8 0FB68000 		movzbl	VM_memory(%rax), %eax
 31584      000000
 31585 e0af 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31585      000000
 31586 e0b6 C1E008   		sall	$8, %eax
 31587 e0b9 C1E110   		sall	$16, %ecx
 31588 e0bc 09CB     		orl	%ecx, %ebx
 31589 e0be 09C3     		orl	%eax, %ebx
 31590              	.LVL2887:
9920:src/vm3.c     ****   if (op1 == 0x0) {
 31591              		.loc 1 9920 0
 31592 e0c0 89D9     		movl	%ebx, %ecx
9922:src/vm3.c     ****     op1 = op1 + funct;
 31593              		.loc 1 9922 0
 31594 e0c2 88D8     		movb	%bl, %al
9920:src/vm3.c     ****   if (op1 == 0x0) {
 31595              		.loc 1 9920 0
 31596 e0c4 C1E91A   		shrl	$26, %ecx
 31597              	.LVL2888:
9922:src/vm3.c     ****     op1 = op1 + funct;
 31598              		.loc 1 9922 0
 31599 e0c7 83E03F   		andl	$63, %eax
 31600 e0ca 8D712B   		leal	43(%rcx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 1058


 31601 e0cd 84C9     		testb	%cl, %cl
 31602 e0cf 0F45C6   		cmovne	%esi, %eax
 31603              	.LVL2889:
9929:src/vm3.c     **** 
 31604              		.loc 1 9929 0
 31605 e0d2 0FB6C0   		movzbl	%al, %eax
 31606 e0d5 48C1E004 		salq	$4, %rax
 31607              	.LVL2890:
 31608 e0d9 48038414 		addq	58088(%rsp,%rdx), %rax
 31608      E8E20000 
 31609 e0e1 488B08   		movq	(%rax), %rcx
 31610 e0e4 E96F2CFF 		jmp	.L269
 31610      FF
 31611              	.LVL2891:
 31612              	.L95:
9963:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31613              		.loc 1 9963 0
 31614 e0e9 4489C0   		movl	%r8d, %eax
9966:src/vm3.c     **** PC  =  nPC;
 31615              		.loc 1 9966 0
 31616 e0ec 410FBFD0 		movswl	%r8w, %edx
9964:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 31617              		.loc 1 9964 0
 31618 e0f0 41C1E810 		shrl	$16, %r8d
 31619              	.LVL2892:
9963:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31620              		.loc 1 9963 0
 31621 e0f4 C1E815   		shrl	$21, %eax
 31622              	.LVL2893:
9966:src/vm3.c     **** PC  =  nPC;
 31623              		.loc 1 9966 0
 31624 e0f7 4183E01F 		andl	$31, %r8d
9976:src/vm3.c     **** nPC = address << 2;
 31625              		.loc 1 9976 0
 31626 e0fb 81E3FFFF 		andl	$67108863, %ebx
 31626      FF03
 31627              	.LVL2894:
9966:src/vm3.c     **** PC  =  nPC;
 31628              		.loc 1 9966 0
 31629 e101 83E01F   		andl	$31, %eax
 31630 e104 03148500 		addl	RF(,%rax,4), %edx
 31630      000000
 31631              	.LVL2895:
 31632 e10b 8D4203   		leal	3(%rdx), %eax
 31633 e10e 89D1     		movl	%edx, %ecx
 31634 e110 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31634      000000
 31635 e117 0FB68000 		movzbl	VM_memory(%rax), %eax
 31635      000000
 31636 e11e C1E118   		sall	$24, %ecx
 31637 e121 09C8     		orl	%ecx, %eax
 31638 e123 8D4A01   		leal	1(%rdx), %ecx
 31639 e126 83C202   		addl	$2, %edx
 31640 e129 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31640      000000
 31641 e130 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31641      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1059


 31642 e137 C1E208   		sall	$8, %edx
 31643 e13a C1E110   		sall	$16, %ecx
 31644 e13d 09C8     		orl	%ecx, %eax
 31645 e13f 09D0     		orl	%edx, %eax
 31646 e141 42890485 		movl	%eax, RF(,%r8,4)
 31646      00000000 
9967:src/vm3.c     **** nPC  += 4;
 31647              		.loc 1 9967 0
 31648 e149 8B050000 		movl	nPC(%rip), %eax
 31648      0000
9968:src/vm3.c     **** 
 31649              		.loc 1 9968 0
 31650 e14f 83050000 		addl	$4, nPC(%rip)
 31650      000004
9975:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 31651              		.loc 1 9975 0
 31652 e156 8B150000 		movl	nPC(%rip), %edx
 31652      0000
9974:src/vm3.c     **** PC = nPC;
 31653              		.loc 1 9974 0
 31654 e15c 83C008   		addl	$8, %eax
 31655 e15f 89050000 		movl	%eax, RF+124(%rip)
 31655      0000
9977:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31656              		.loc 1 9977 0
 31657 e165 8D049D00 		leal	0(,%rbx,4), %eax
 31657      000000
9978:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31658              		.loc 1 9978 0
 31659 e16c 8D4A03   		leal	3(%rdx), %ecx
9975:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 31660              		.loc 1 9975 0
 31661 e16f 89150000 		movl	%edx, PC(%rip)
 31661      0000
9977:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 31662              		.loc 1 9977 0
 31663 e175 89050000 		movl	%eax, nPC(%rip)
 31663      0000
9978:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31664              		.loc 1 9978 0
 31665 e17b 440FB681 		movzbl	VM_memory(%rcx), %r8d
 31665      00000000 
 31666 e183 89D1     		movl	%edx, %ecx
 31667 e185 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31667      000000
 31668 e18c C1E118   		sall	$24, %ecx
 31669 e18f 4109C8   		orl	%ecx, %r8d
 31670 e192 8D4A01   		leal	1(%rdx), %ecx
 31671 e195 83C202   		addl	$2, %edx
 31672 e198 0FB69200 		movzbl	VM_memory(%rdx), %edx
 31672      000000
 31673 e19f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31673      000000
 31674 e1a6 C1E208   		sall	$8, %edx
 31675 e1a9 C1E110   		sall	$16, %ecx
 31676 e1ac 4109C8   		orl	%ecx, %r8d
 31677 e1af 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1060


 31678              	.LVL2896:
9979:src/vm3.c     ****   if (op0 == 0x0) {
 31679              		.loc 1 9979 0
 31680 e1b2 4489C1   		movl	%r8d, %ecx
9981:src/vm3.c     ****     op0 = op0 + funct;
 31681              		.loc 1 9981 0
 31682 e1b5 4488C2   		movb	%r8b, %dl
9979:src/vm3.c     ****   if (op0 == 0x0) {
 31683              		.loc 1 9979 0
 31684 e1b8 C1E91A   		shrl	$26, %ecx
 31685              	.LVL2897:
9981:src/vm3.c     ****     op0 = op0 + funct;
 31686              		.loc 1 9981 0
 31687 e1bb 83E23F   		andl	$63, %edx
 31688 e1be 8D712B   		leal	43(%rcx), %esi
 31689 e1c1 84C9     		testb	%cl, %cl
9991:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31690              		.loc 1 9991 0
 31691 e1c3 8D4803   		leal	3(%rax), %ecx
 31692              	.LVL2898:
 31693 e1c6 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31693      000000
 31694 e1cd 89C1     		movl	%eax, %ecx
9981:src/vm3.c     ****     op0 = op0 + funct;
 31695              		.loc 1 9981 0
 31696 e1cf 0F45D6   		cmovne	%esi, %edx
 31697              	.LVL2899:
9991:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31698              		.loc 1 9991 0
 31699 e1d2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31699      000000
9989:src/vm3.c     **** 
 31700              		.loc 1 9989 0
 31701 e1d9 0FB6D2   		movzbl	%dl, %edx
 31702 e1dc 48C1E204 		salq	$4, %rdx
 31703              	.LVL2900:
9991:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31704              		.loc 1 9991 0
 31705 e1e0 C1E118   		sall	$24, %ecx
 31706 e1e3 09CB     		orl	%ecx, %ebx
 31707 e1e5 8D4801   		leal	1(%rax), %ecx
 31708 e1e8 83C002   		addl	$2, %eax
 31709 e1eb 0FB68000 		movzbl	VM_memory(%rax), %eax
 31709      000000
 31710 e1f2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31710      000000
 31711 e1f9 C1E008   		sall	$8, %eax
 31712 e1fc C1E110   		sall	$16, %ecx
 31713 e1ff 09CB     		orl	%ecx, %ebx
 31714 e201 09C3     		orl	%eax, %ebx
 31715              	.LVL2901:
9992:src/vm3.c     ****   if (op1 == 0x0) {
 31716              		.loc 1 9992 0
 31717 e203 89D9     		movl	%ebx, %ecx
9994:src/vm3.c     ****     op1 = op1 + funct;
 31718              		.loc 1 9994 0
 31719 e205 88D8     		movb	%bl, %al
GAS LISTING /tmp/cc15eBE3.s 			page 1061


9992:src/vm3.c     ****   if (op1 == 0x0) {
 31720              		.loc 1 9992 0
 31721 e207 C1E91A   		shrl	$26, %ecx
 31722              	.LVL2902:
9994:src/vm3.c     ****     op1 = op1 + funct;
 31723              		.loc 1 9994 0
 31724 e20a 83E03F   		andl	$63, %eax
 31725 e20d 8D712B   		leal	43(%rcx), %esi
 31726 e210 84C9     		testb	%cl, %cl
 31727 e212 0F45C6   		cmovne	%esi, %eax
 31728              	.LVL2903:
10001:src/vm3.c     **** 
 31729              		.loc 1 10001 0
 31730 e215 0FB6C0   		movzbl	%al, %eax
 31731 e218 48C1E004 		salq	$4, %rax
 31732              	.LVL2904:
 31733 e21c 48038414 		addq	58088(%rsp,%rdx), %rax
 31733      E8E20000 
 31734 e224 488B08   		movq	(%rax), %rcx
 31735 e227 E92C2BFF 		jmp	.L269
 31735      FF
 31736              	.LVL2905:
 31737              	.L215:
10036:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 31738              		.loc 1 10036 0
 31739 e22c 4489C0   		movl	%r8d, %eax
10037:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 31740              		.loc 1 10037 0
 31741 e22f 4489C2   		movl	%r8d, %edx
10035:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31742              		.loc 1 10035 0
 31743 e232 41C1E806 		shrl	$6, %r8d
 31744              	.LVL2906:
10036:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 31745              		.loc 1 10036 0
 31746 e236 C1E810   		shrl	$16, %eax
 31747              	.LVL2907:
10035:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31748              		.loc 1 10035 0
 31749 e239 4488C1   		movb	%r8b, %cl
10037:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 31750              		.loc 1 10037 0
 31751 e23c C1EA0B   		shrl	$11, %edx
 31752              	.LVL2908:
10038:src/vm3.c     **** PC  =  nPC;
 31753              		.loc 1 10038 0
 31754 e23f 83E01F   		andl	$31, %eax
10035:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31755              		.loc 1 10035 0
 31756 e242 83E11F   		andl	$31, %ecx
10046:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31757              		.loc 1 10046 0
 31758 e245 89DE     		movl	%ebx, %esi
10038:src/vm3.c     **** PC  =  nPC;
 31759              		.loc 1 10038 0
 31760 e247 8B048500 		movl	RF(,%rax,4), %eax
 31760      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1062


 31761 e24e 83E21F   		andl	$31, %edx
10046:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31762              		.loc 1 10046 0
 31763 e251 C1EE15   		shrl	$21, %esi
10048:src/vm3.c     **** {
 31764              		.loc 1 10048 0
 31765 e254 83E61F   		andl	$31, %esi
10038:src/vm3.c     **** PC  =  nPC;
 31766              		.loc 1 10038 0
 31767 e257 D3E8     		shrl	%cl, %eax
10047:src/vm3.c     **** if (RF[rs] != RF[rt])
 31768              		.loc 1 10047 0
 31769 e259 89D9     		movl	%ebx, %ecx
 31770 e25b C1E910   		shrl	$16, %ecx
10038:src/vm3.c     **** PC  =  nPC;
 31771              		.loc 1 10038 0
 31772 e25e 89049500 		movl	%eax, RF(,%rdx,4)
 31772      000000
10039:src/vm3.c     **** nPC  += 4;
 31773              		.loc 1 10039 0
 31774 e265 8B050000 		movl	nPC(%rip), %eax
 31774      0000
10048:src/vm3.c     **** {
 31775              		.loc 1 10048 0
 31776 e26b 83E11F   		andl	$31, %ecx
 31777 e26e 8B3C8D00 		movl	RF(,%rcx,4), %edi
 31777      000000
 31778 e275 393CB500 		cmpl	%edi, RF(,%rsi,4)
 31778      000000
10040:src/vm3.c     **** 
 31779              		.loc 1 10040 0
 31780 e27c 8D5004   		leal	4(%rax), %edx
 31781              	.LVL2909:
 31782 e27f 448D4007 		leal	7(%rax), %r8d
 31783 e283 8D7805   		leal	5(%rax), %edi
 31784 e286 8D7006   		leal	6(%rax), %esi
 31785 e289 4189D1   		movl	%edx, %r9d
10051:src/vm3.c     ****   nPC  += (immediate << 2);
 31786              		.loc 1 10051 0
 31787 e28c 89150000 		movl	%edx, PC(%rip)
 31787      0000
10048:src/vm3.c     **** {
 31788              		.loc 1 10048 0
 31789 e292 0F84B600 		je	.L1140
 31789      0000
 31790              	.LVL2910:
10052:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 31791              		.loc 1 10052 0
 31792 e298 0FBFDB   		movswl	%bx, %ebx
 31793              	.LVL2911:
10053:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31794              		.loc 1 10053 0
 31795 e29b 450FB680 		movzbl	VM_memory(%r8), %r8d
 31795      00000000 
10052:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 31796              		.loc 1 10052 0
 31797 e2a3 8D049A   		leal	(%rdx,%rbx,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1063


10053:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31798              		.loc 1 10053 0
 31799 e2a6 410FB691 		movzbl	VM_memory(%r9), %edx
 31799      00000000 
10052:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 31800              		.loc 1 10052 0
 31801 e2ae 89050000 		movl	%eax, nPC(%rip)
 31801      0000
10053:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31802              		.loc 1 10053 0
 31803 e2b4 C1E218   		sall	$24, %edx
 31804 e2b7 4109D0   		orl	%edx, %r8d
 31805 e2ba 0FB69700 		movzbl	VM_memory(%rdi), %edx
 31805      000000
 31806 e2c1 C1E210   		sall	$16, %edx
 31807 e2c4 4109D0   		orl	%edx, %r8d
 31808 e2c7 0FB69600 		movzbl	VM_memory(%rsi), %edx
 31808      000000
 31809 e2ce C1E208   		sall	$8, %edx
 31810 e2d1 4109D0   		orl	%edx, %r8d
 31811              	.LVL2912:
10054:src/vm3.c     ****   if (op0 == 0x0) {
 31812              		.loc 1 10054 0
 31813 e2d4 4489C1   		movl	%r8d, %ecx
10056:src/vm3.c     ****     op0 = op0 + funct;
 31814              		.loc 1 10056 0
 31815 e2d7 4488C2   		movb	%r8b, %dl
10054:src/vm3.c     ****   if (op0 == 0x0) {
 31816              		.loc 1 10054 0
 31817 e2da C1E91A   		shrl	$26, %ecx
 31818              	.LVL2913:
10056:src/vm3.c     ****     op0 = op0 + funct;
 31819              		.loc 1 10056 0
 31820 e2dd 83E23F   		andl	$63, %edx
 31821 e2e0 8D712B   		leal	43(%rcx), %esi
 31822 e2e3 84C9     		testb	%cl, %cl
10066:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31823              		.loc 1 10066 0
 31824 e2e5 8D4803   		leal	3(%rax), %ecx
 31825              	.LVL2914:
 31826 e2e8 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31826      000000
 31827              	.LVL2915:
 31828 e2ef 89C1     		movl	%eax, %ecx
10056:src/vm3.c     ****     op0 = op0 + funct;
 31829              		.loc 1 10056 0
 31830 e2f1 0F45D6   		cmovne	%esi, %edx
 31831              	.LVL2916:
10066:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31832              		.loc 1 10066 0
 31833 e2f4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31833      000000
10064:src/vm3.c     **** 
 31834              		.loc 1 10064 0
 31835 e2fb 0FB6D2   		movzbl	%dl, %edx
 31836 e2fe 48C1E204 		salq	$4, %rdx
 31837              	.LVL2917:
GAS LISTING /tmp/cc15eBE3.s 			page 1064


10066:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31838              		.loc 1 10066 0
 31839 e302 C1E118   		sall	$24, %ecx
 31840 e305 09CB     		orl	%ecx, %ebx
 31841 e307 8D4801   		leal	1(%rax), %ecx
 31842 e30a 83C002   		addl	$2, %eax
 31843 e30d 0FB68000 		movzbl	VM_memory(%rax), %eax
 31843      000000
 31844 e314 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31844      000000
 31845 e31b C1E008   		sall	$8, %eax
 31846 e31e C1E110   		sall	$16, %ecx
 31847 e321 09CB     		orl	%ecx, %ebx
 31848 e323 09C3     		orl	%eax, %ebx
 31849              	.LVL2918:
10067:src/vm3.c     ****   if (op1 == 0x0) {
 31850              		.loc 1 10067 0
 31851 e325 89D9     		movl	%ebx, %ecx
10069:src/vm3.c     ****     op1 = op1 + funct;
 31852              		.loc 1 10069 0
 31853 e327 88D8     		movb	%bl, %al
10067:src/vm3.c     ****   if (op1 == 0x0) {
 31854              		.loc 1 10067 0
 31855 e329 C1E91A   		shrl	$26, %ecx
 31856              	.LVL2919:
10069:src/vm3.c     ****     op1 = op1 + funct;
 31857              		.loc 1 10069 0
 31858 e32c 83E03F   		andl	$63, %eax
 31859 e32f 8D712B   		leal	43(%rcx), %esi
 31860 e332 84C9     		testb	%cl, %cl
 31861 e334 0F45C6   		cmovne	%esi, %eax
 31862              	.LVL2920:
10076:src/vm3.c     **** 
 31863              		.loc 1 10076 0
 31864 e337 0FB6C0   		movzbl	%al, %eax
 31865 e33a 48C1E004 		salq	$4, %rax
 31866              	.LVL2921:
 31867 e33e 48038414 		addq	58088(%rsp,%rdx), %rax
 31867      E8E20000 
 31868 e346 488B08   		movq	(%rax), %rcx
 31869 e349 E90A2AFF 		jmp	.L269
 31869      FF
 31870              	.LVL2922:
 31871              	.L1140:
10085:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31872              		.loc 1 10085 0
 31873 e34e 410FB691 		movzbl	VM_memory(%r9), %edx
 31873      00000000 
 31874 e356 450FB680 		movzbl	VM_memory(%r8), %r8d
 31874      00000000 
10083:src/vm3.c     **** }
 31875              		.loc 1 10083 0
 31876 e35e 8D4808   		leal	8(%rax), %ecx
10098:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31877              		.loc 1 10098 0
 31878 e361 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 31878      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1065


 31879              	.LVL2923:
10083:src/vm3.c     **** }
 31880              		.loc 1 10083 0
 31881 e368 890D0000 		movl	%ecx, nPC(%rip)
 31881      0000
10098:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31882              		.loc 1 10098 0
 31883 e36e 8D4809   		leal	9(%rax), %ecx
10085:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31884              		.loc 1 10085 0
 31885 e371 C1E218   		sall	$24, %edx
10098:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31886              		.loc 1 10098 0
 31887 e374 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31887      000000
10085:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 31888              		.loc 1 10085 0
 31889 e37b 4109D0   		orl	%edx, %r8d
 31890 e37e 0FB69700 		movzbl	VM_memory(%rdi), %edx
 31890      000000
 31891 e385 C1E210   		sall	$16, %edx
 31892 e388 4109D0   		orl	%edx, %r8d
 31893 e38b 0FB69600 		movzbl	VM_memory(%rsi), %edx
 31893      000000
 31894 e392 C1E208   		sall	$8, %edx
 31895 e395 4109D0   		orl	%edx, %r8d
 31896              	.LVL2924:
10086:src/vm3.c     ****   if (op0 == 0x0) {
 31897              		.loc 1 10086 0
 31898 e398 4489C6   		movl	%r8d, %esi
10088:src/vm3.c     ****     op0 = op0 + funct;
 31899              		.loc 1 10088 0
 31900 e39b 4488C2   		movb	%r8b, %dl
10086:src/vm3.c     ****   if (op0 == 0x0) {
 31901              		.loc 1 10086 0
 31902 e39e C1EE1A   		shrl	$26, %esi
 31903              	.LVL2925:
10088:src/vm3.c     ****     op0 = op0 + funct;
 31904              		.loc 1 10088 0
 31905 e3a1 83E23F   		andl	$63, %edx
 31906 e3a4 8D7E2B   		leal	43(%rsi), %edi
 31907 e3a7 4084F6   		testb	%sil, %sil
 31908 e3aa 0F45D7   		cmovne	%edi, %edx
 31909              	.LVL2926:
10098:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31910              		.loc 1 10098 0
 31911 e3ad C1E110   		sall	$16, %ecx
 31912 e3b0 C1E318   		sall	$24, %ebx
 31913 e3b3 09CB     		orl	%ecx, %ebx
 31914 e3b5 8D480B   		leal	11(%rax), %ecx
 31915 e3b8 83C00A   		addl	$10, %eax
 31916 e3bb 0FB68000 		movzbl	VM_memory(%rax), %eax
 31916      000000
10096:src/vm3.c     **** 
 31917              		.loc 1 10096 0
 31918 e3c2 0FB6D2   		movzbl	%dl, %edx
10098:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1066


 31919              		.loc 1 10098 0
 31920 e3c5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 31920      000000
10096:src/vm3.c     **** 
 31921              		.loc 1 10096 0
 31922 e3cc 48C1E204 		salq	$4, %rdx
 31923              	.LVL2927:
10098:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 31924              		.loc 1 10098 0
 31925 e3d0 C1E008   		sall	$8, %eax
 31926 e3d3 09CB     		orl	%ecx, %ebx
 31927 e3d5 09C3     		orl	%eax, %ebx
 31928              	.LVL2928:
10099:src/vm3.c     ****   if (op1 == 0x0) {
 31929              		.loc 1 10099 0
 31930 e3d7 89D9     		movl	%ebx, %ecx
10101:src/vm3.c     ****     op1 = op1 + funct;
 31931              		.loc 1 10101 0
 31932 e3d9 88D8     		movb	%bl, %al
10099:src/vm3.c     ****   if (op1 == 0x0) {
 31933              		.loc 1 10099 0
 31934 e3db C1E91A   		shrl	$26, %ecx
 31935              	.LVL2929:
10101:src/vm3.c     ****     op1 = op1 + funct;
 31936              		.loc 1 10101 0
 31937 e3de 83E03F   		andl	$63, %eax
 31938 e3e1 8D712B   		leal	43(%rcx), %esi
 31939 e3e4 84C9     		testb	%cl, %cl
 31940 e3e6 0F45C6   		cmovne	%esi, %eax
 31941              	.LVL2930:
10108:src/vm3.c     **** 
 31942              		.loc 1 10108 0
 31943 e3e9 0FB6C0   		movzbl	%al, %eax
 31944 e3ec 48C1E004 		salq	$4, %rax
 31945              	.LVL2931:
 31946 e3f0 48038414 		addq	58088(%rsp,%rdx), %rax
 31946      E8E20000 
 31947 e3f8 488B08   		movq	(%rax), %rcx
 31948 e3fb E95829FF 		jmp	.L269
 31948      FF
 31949              	.LVL2932:
 31950              	.L214:
10117:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 31951              		.loc 1 10117 0
 31952 e400 4489C0   		movl	%r8d, %eax
10118:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 31953              		.loc 1 10118 0
 31954 e403 4489C2   		movl	%r8d, %edx
10116:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31955              		.loc 1 10116 0
 31956 e406 41C1E806 		shrl	$6, %r8d
 31957              	.LVL2933:
10117:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 31958              		.loc 1 10117 0
 31959 e40a C1E810   		shrl	$16, %eax
 31960              	.LVL2934:
10116:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1067


 31961              		.loc 1 10116 0
 31962 e40d 4488C1   		movb	%r8b, %cl
10118:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 31963              		.loc 1 10118 0
 31964 e410 C1EA0B   		shrl	$11, %edx
 31965              	.LVL2935:
10119:src/vm3.c     **** PC  =  nPC;
 31966              		.loc 1 10119 0
 31967 e413 83E01F   		andl	$31, %eax
10116:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 31968              		.loc 1 10116 0
 31969 e416 83E11F   		andl	$31, %ecx
10119:src/vm3.c     **** PC  =  nPC;
 31970              		.loc 1 10119 0
 31971 e419 83E21F   		andl	$31, %edx
 31972 e41c 8B048500 		movl	RF(,%rax,4), %eax
 31972      000000
10121:src/vm3.c     **** 
 31973              		.loc 1 10121 0
 31974 e423 83050000 		addl	$4, nPC(%rip)
 31974      000004
 31975              	.LVL2936:
10119:src/vm3.c     **** PC  =  nPC;
 31976              		.loc 1 10119 0
 31977 e42a D3E8     		shrl	%cl, %eax
 31978 e42c 89049500 		movl	%eax, RF(,%rdx,4)
 31978      000000
10128:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 31979              		.loc 1 10128 0
 31980 e433 89D8     		movl	%ebx, %eax
10129:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 31981              		.loc 1 10129 0
 31982 e435 89DA     		movl	%ebx, %edx
10128:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 31983              		.loc 1 10128 0
 31984 e437 C1E810   		shrl	$16, %eax
10127:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 31985              		.loc 1 10127 0
 31986 e43a C1EB15   		shrl	$21, %ebx
 31987              	.LVL2937:
10129:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 31988              		.loc 1 10129 0
 31989 e43d C1EA0B   		shrl	$11, %edx
 31990              	.LVL2938:
10130:src/vm3.c     **** PC  =  nPC;
 31991              		.loc 1 10130 0
 31992 e440 83E31F   		andl	$31, %ebx
 31993 e443 83E01F   		andl	$31, %eax
 31994 e446 83E21F   		andl	$31, %edx
 31995 e449 8B048500 		movl	RF(,%rax,4), %eax
 31995      000000
 31996 e450 33049D00 		xorl	RF(,%rbx,4), %eax
 31996      000000
 31997 e457 89049500 		movl	%eax, RF(,%rdx,4)
 31997      000000
10131:src/vm3.c     **** nPC  += 4;
 31998              		.loc 1 10131 0
GAS LISTING /tmp/cc15eBE3.s 			page 1068


 31999 e45e 8B050000 		movl	nPC(%rip), %eax
 31999      0000
10133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32000              		.loc 1 10133 0
 32001 e464 8D5003   		leal	3(%rax), %edx
10132:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32002              		.loc 1 10132 0
 32003 e467 8D4804   		leal	4(%rax), %ecx
10131:src/vm3.c     **** nPC  += 4;
 32004              		.loc 1 10131 0
 32005 e46a 89050000 		movl	%eax, PC(%rip)
 32005      0000
10133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32006              		.loc 1 10133 0
 32007 e470 440FB682 		movzbl	VM_memory(%rdx), %r8d
 32007      00000000 
 32008 e478 89C2     		movl	%eax, %edx
10146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32009              		.loc 1 10146 0
 32010 e47a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32010      000000
10133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32011              		.loc 1 10133 0
 32012 e481 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32012      000000
10132:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32013              		.loc 1 10132 0
 32014 e488 890D0000 		movl	%ecx, nPC(%rip)
 32014      0000
10146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32015              		.loc 1 10146 0
 32016 e48e 8D4805   		leal	5(%rax), %ecx
 32017 e491 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32017      000000
10133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32018              		.loc 1 10133 0
 32019 e498 C1E218   		sall	$24, %edx
 32020 e49b 4109D0   		orl	%edx, %r8d
 32021 e49e 8D5001   		leal	1(%rax), %edx
 32022 e4a1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32022      000000
 32023 e4a8 C1E210   		sall	$16, %edx
 32024 e4ab 4109D0   		orl	%edx, %r8d
 32025 e4ae 8D5002   		leal	2(%rax), %edx
 32026 e4b1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32026      000000
 32027 e4b8 C1E208   		sall	$8, %edx
 32028 e4bb 4109D0   		orl	%edx, %r8d
 32029              	.LVL2939:
10134:src/vm3.c     ****   if (op0 == 0x0) {
 32030              		.loc 1 10134 0
 32031 e4be 4489C6   		movl	%r8d, %esi
10136:src/vm3.c     ****     op0 = op0 + funct;
 32032              		.loc 1 10136 0
 32033 e4c1 4488C2   		movb	%r8b, %dl
10134:src/vm3.c     ****   if (op0 == 0x0) {
 32034              		.loc 1 10134 0
GAS LISTING /tmp/cc15eBE3.s 			page 1069


 32035 e4c4 C1EE1A   		shrl	$26, %esi
 32036              	.LVL2940:
10136:src/vm3.c     ****     op0 = op0 + funct;
 32037              		.loc 1 10136 0
 32038 e4c7 83E23F   		andl	$63, %edx
 32039 e4ca 8D7E2B   		leal	43(%rsi), %edi
 32040 e4cd 4084F6   		testb	%sil, %sil
 32041 e4d0 0F45D7   		cmovne	%edi, %edx
 32042              	.LVL2941:
10146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32043              		.loc 1 10146 0
 32044 e4d3 C1E110   		sall	$16, %ecx
 32045 e4d6 C1E318   		sall	$24, %ebx
 32046 e4d9 09CB     		orl	%ecx, %ebx
 32047 e4db 8D4807   		leal	7(%rax), %ecx
 32048 e4de 83C006   		addl	$6, %eax
 32049 e4e1 0FB68000 		movzbl	VM_memory(%rax), %eax
 32049      000000
10144:src/vm3.c     **** 
 32050              		.loc 1 10144 0
 32051 e4e8 0FB6D2   		movzbl	%dl, %edx
10146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32052              		.loc 1 10146 0
 32053 e4eb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32053      000000
10144:src/vm3.c     **** 
 32054              		.loc 1 10144 0
 32055 e4f2 48C1E204 		salq	$4, %rdx
 32056              	.LVL2942:
10146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32057              		.loc 1 10146 0
 32058 e4f6 C1E008   		sall	$8, %eax
 32059 e4f9 09CB     		orl	%ecx, %ebx
 32060 e4fb 09C3     		orl	%eax, %ebx
 32061              	.LVL2943:
10147:src/vm3.c     ****   if (op1 == 0x0) {
 32062              		.loc 1 10147 0
 32063 e4fd 89D9     		movl	%ebx, %ecx
10149:src/vm3.c     ****     op1 = op1 + funct;
 32064              		.loc 1 10149 0
 32065 e4ff 88D8     		movb	%bl, %al
10147:src/vm3.c     ****   if (op1 == 0x0) {
 32066              		.loc 1 10147 0
 32067 e501 C1E91A   		shrl	$26, %ecx
 32068              	.LVL2944:
10149:src/vm3.c     ****     op1 = op1 + funct;
 32069              		.loc 1 10149 0
 32070 e504 83E03F   		andl	$63, %eax
 32071 e507 8D712B   		leal	43(%rcx), %esi
 32072 e50a 84C9     		testb	%cl, %cl
 32073 e50c 0F45C6   		cmovne	%esi, %eax
 32074              	.LVL2945:
10156:src/vm3.c     **** 
 32075              		.loc 1 10156 0
 32076 e50f 0FB6C0   		movzbl	%al, %eax
 32077 e512 48C1E004 		salq	$4, %rax
 32078              	.LVL2946:
GAS LISTING /tmp/cc15eBE3.s 			page 1070


 32079 e516 48038414 		addq	58088(%rsp,%rdx), %rax
 32079      E8E20000 
 32080 e51e 488B08   		movq	(%rax), %rcx
 32081 e521 E93228FF 		jmp	.L269
 32081      FF
 32082              	.LVL2947:
 32083              	.L229:
10164:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32084              		.loc 1 10164 0
 32085 e526 4489C2   		movl	%r8d, %edx
10165:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 32086              		.loc 1 10165 0
 32087 e529 4489C0   		movl	%r8d, %eax
10167:src/vm3.c     **** PC  =  nPC;
 32088              		.loc 1 10167 0
 32089 e52c 450FBFC0 		movswl	%r8w, %r8d
 32090              	.LVL2948:
10164:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32091              		.loc 1 10164 0
 32092 e530 C1EA15   		shrl	$21, %edx
10165:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 32093              		.loc 1 10165 0
 32094 e533 C1E810   		shrl	$16, %eax
 32095              	.LVL2949:
10169:src/vm3.c     **** 
 32096              		.loc 1 10169 0
 32097 e536 83050000 		addl	$4, nPC(%rip)
 32097      000004
 32098              	.LVL2950:
10167:src/vm3.c     **** PC  =  nPC;
 32099              		.loc 1 10167 0
 32100 e53d 83E21F   		andl	$31, %edx
 32101 e540 83E01F   		andl	$31, %eax
 32102 e543 440B0495 		orl	RF(,%rdx,4), %r8d
 32102      00000000 
 32103              	.LVL2951:
10177:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 32104              		.loc 1 10177 0
 32105 e54b 89DA     		movl	%ebx, %edx
 32106 e54d C1EA0B   		shrl	$11, %edx
10178:src/vm3.c     **** PC  =  nPC;
 32107              		.loc 1 10178 0
 32108 e550 83E21F   		andl	$31, %edx
10167:src/vm3.c     **** PC  =  nPC;
 32109              		.loc 1 10167 0
 32110 e553 44890485 		movl	%r8d, RF(,%rax,4)
 32110      00000000 
10176:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 32111              		.loc 1 10176 0
 32112 e55b 89D8     		movl	%ebx, %eax
10175:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32113              		.loc 1 10175 0
 32114 e55d C1EB15   		shrl	$21, %ebx
 32115              	.LVL2952:
10176:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 32116              		.loc 1 10176 0
 32117 e560 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1071


 32118              	.LVL2953:
10178:src/vm3.c     **** PC  =  nPC;
 32119              		.loc 1 10178 0
 32120 e563 83E31F   		andl	$31, %ebx
 32121 e566 83E01F   		andl	$31, %eax
 32122 e569 8B048500 		movl	RF(,%rax,4), %eax
 32122      000000
 32123 e570 03049D00 		addl	RF(,%rbx,4), %eax
 32123      000000
 32124 e577 89049500 		movl	%eax, RF(,%rdx,4)
 32124      000000
10179:src/vm3.c     **** nPC  += 4;
 32125              		.loc 1 10179 0
 32126 e57e 8B050000 		movl	nPC(%rip), %eax
 32126      0000
10181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32127              		.loc 1 10181 0
 32128 e584 8D5003   		leal	3(%rax), %edx
10180:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32129              		.loc 1 10180 0
 32130 e587 8D4804   		leal	4(%rax), %ecx
10179:src/vm3.c     **** nPC  += 4;
 32131              		.loc 1 10179 0
 32132 e58a 89050000 		movl	%eax, PC(%rip)
 32132      0000
10181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32133              		.loc 1 10181 0
 32134 e590 440FB682 		movzbl	VM_memory(%rdx), %r8d
 32134      00000000 
 32135 e598 89C2     		movl	%eax, %edx
10194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32136              		.loc 1 10194 0
 32137 e59a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32137      000000
10181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32138              		.loc 1 10181 0
 32139 e5a1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32139      000000
10180:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32140              		.loc 1 10180 0
 32141 e5a8 890D0000 		movl	%ecx, nPC(%rip)
 32141      0000
10194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32142              		.loc 1 10194 0
 32143 e5ae 8D4805   		leal	5(%rax), %ecx
 32144 e5b1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32144      000000
10181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32145              		.loc 1 10181 0
 32146 e5b8 C1E218   		sall	$24, %edx
 32147 e5bb 4109D0   		orl	%edx, %r8d
 32148 e5be 8D5001   		leal	1(%rax), %edx
 32149 e5c1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32149      000000
 32150 e5c8 C1E210   		sall	$16, %edx
 32151 e5cb 4109D0   		orl	%edx, %r8d
 32152 e5ce 8D5002   		leal	2(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1072


 32153 e5d1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32153      000000
 32154 e5d8 C1E208   		sall	$8, %edx
 32155 e5db 4109D0   		orl	%edx, %r8d
 32156              	.LVL2954:
10182:src/vm3.c     ****   if (op0 == 0x0) {
 32157              		.loc 1 10182 0
 32158 e5de 4489C6   		movl	%r8d, %esi
10184:src/vm3.c     ****     op0 = op0 + funct;
 32159              		.loc 1 10184 0
 32160 e5e1 4488C2   		movb	%r8b, %dl
10182:src/vm3.c     ****   if (op0 == 0x0) {
 32161              		.loc 1 10182 0
 32162 e5e4 C1EE1A   		shrl	$26, %esi
 32163              	.LVL2955:
10184:src/vm3.c     ****     op0 = op0 + funct;
 32164              		.loc 1 10184 0
 32165 e5e7 83E23F   		andl	$63, %edx
 32166 e5ea 8D7E2B   		leal	43(%rsi), %edi
 32167 e5ed 4084F6   		testb	%sil, %sil
 32168 e5f0 0F45D7   		cmovne	%edi, %edx
 32169              	.LVL2956:
10194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32170              		.loc 1 10194 0
 32171 e5f3 C1E110   		sall	$16, %ecx
 32172 e5f6 C1E318   		sall	$24, %ebx
 32173 e5f9 09CB     		orl	%ecx, %ebx
 32174 e5fb 8D4807   		leal	7(%rax), %ecx
 32175 e5fe 83C006   		addl	$6, %eax
 32176 e601 0FB68000 		movzbl	VM_memory(%rax), %eax
 32176      000000
10192:src/vm3.c     **** 
 32177              		.loc 1 10192 0
 32178 e608 0FB6D2   		movzbl	%dl, %edx
10194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32179              		.loc 1 10194 0
 32180 e60b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32180      000000
10192:src/vm3.c     **** 
 32181              		.loc 1 10192 0
 32182 e612 48C1E204 		salq	$4, %rdx
 32183              	.LVL2957:
10194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32184              		.loc 1 10194 0
 32185 e616 C1E008   		sall	$8, %eax
 32186 e619 09CB     		orl	%ecx, %ebx
 32187 e61b 09C3     		orl	%eax, %ebx
 32188              	.LVL2958:
10195:src/vm3.c     ****   if (op1 == 0x0) {
 32189              		.loc 1 10195 0
 32190 e61d 89D9     		movl	%ebx, %ecx
10197:src/vm3.c     ****     op1 = op1 + funct;
 32191              		.loc 1 10197 0
 32192 e61f 88D8     		movb	%bl, %al
10195:src/vm3.c     ****   if (op1 == 0x0) {
 32193              		.loc 1 10195 0
 32194 e621 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1073


 32195              	.LVL2959:
10197:src/vm3.c     ****     op1 = op1 + funct;
 32196              		.loc 1 10197 0
 32197 e624 83E03F   		andl	$63, %eax
 32198 e627 8D712B   		leal	43(%rcx), %esi
 32199 e62a 84C9     		testb	%cl, %cl
 32200 e62c 0F45C6   		cmovne	%esi, %eax
 32201              	.LVL2960:
10204:src/vm3.c     **** 
 32202              		.loc 1 10204 0
 32203 e62f 0FB6C0   		movzbl	%al, %eax
 32204 e632 48C1E004 		salq	$4, %rax
 32205              	.LVL2961:
 32206 e636 48038414 		addq	58088(%rsp,%rdx), %rax
 32206      E8E20000 
 32207 e63e 488B08   		movq	(%rax), %rcx
 32208 e641 E91227FF 		jmp	.L269
 32208      FF
 32209              	.LVL2962:
 32210              	.L193:
10212:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32211              		.loc 1 10212 0
 32212 e646 4489C2   		movl	%r8d, %edx
10213:src/vm3.c     **** if (RF[rs] != RF[rt])
 32213              		.loc 1 10213 0
 32214 e649 4489C0   		movl	%r8d, %eax
10212:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32215              		.loc 1 10212 0
 32216 e64c C1EA15   		shrl	$21, %edx
10213:src/vm3.c     **** if (RF[rs] != RF[rt])
 32217              		.loc 1 10213 0
 32218 e64f C1E810   		shrl	$16, %eax
10214:src/vm3.c     **** {
 32219              		.loc 1 10214 0
 32220 e652 83E01F   		andl	$31, %eax
 32221 e655 83E21F   		andl	$31, %edx
 32222 e658 8B048500 		movl	RF(,%rax,4), %eax
 32222      000000
 32223 e65f 39049500 		cmpl	%eax, RF(,%rdx,4)
 32223      000000
 32224 e666 0F84CE00 		je	.L1157
 32224      0000
 32225              	.LVL2963:
10217:src/vm3.c     ****   nPC  += (immediate << 2);
 32226              		.loc 1 10217 0
 32227 e66c 8B050000 		movl	nPC(%rip), %eax
 32227      0000
10218:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 32228              		.loc 1 10218 0
 32229 e672 450FBFC0 		movswl	%r8w, %r8d
 32230              	.LVL2964:
10219:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32231              		.loc 1 10219 0
 32232 e676 8D4803   		leal	3(%rax), %ecx
10218:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 32233              		.loc 1 10218 0
 32234 e679 428D1480 		leal	(%rax,%r8,4), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1074


10217:src/vm3.c     ****   nPC  += (immediate << 2);
 32235              		.loc 1 10217 0
 32236 e67d 89050000 		movl	%eax, PC(%rip)
 32236      0000
10219:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32237              		.loc 1 10219 0
 32238 e683 440FB681 		movzbl	VM_memory(%rcx), %r8d
 32238      00000000 
 32239              	.LVL2965:
 32240 e68b 89C1     		movl	%eax, %ecx
10218:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 32241              		.loc 1 10218 0
 32242 e68d 89150000 		movl	%edx, nPC(%rip)
 32242      0000
10219:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32243              		.loc 1 10219 0
 32244 e693 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32244      000000
 32245 e69a C1E118   		sall	$24, %ecx
 32246 e69d 4109C8   		orl	%ecx, %r8d
 32247 e6a0 8D4801   		leal	1(%rax), %ecx
 32248 e6a3 83C002   		addl	$2, %eax
 32249 e6a6 0FB68000 		movzbl	VM_memory(%rax), %eax
 32249      000000
 32250 e6ad 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32250      000000
 32251 e6b4 C1E008   		sall	$8, %eax
 32252 e6b7 C1E110   		sall	$16, %ecx
 32253 e6ba 4109C8   		orl	%ecx, %r8d
 32254 e6bd 4109C0   		orl	%eax, %r8d
 32255              	.LVL2966:
10220:src/vm3.c     ****   if (op0 == 0x0) {
 32256              		.loc 1 10220 0
 32257 e6c0 4489C0   		movl	%r8d, %eax
10222:src/vm3.c     ****     op0 = op0 + funct;
 32258              		.loc 1 10222 0
 32259 e6c3 4488C1   		movb	%r8b, %cl
10220:src/vm3.c     ****   if (op0 == 0x0) {
 32260              		.loc 1 10220 0
 32261 e6c6 C1E81A   		shrl	$26, %eax
 32262              	.LVL2967:
10222:src/vm3.c     ****     op0 = op0 + funct;
 32263              		.loc 1 10222 0
 32264 e6c9 83E13F   		andl	$63, %ecx
 32265 e6cc 8D702B   		leal	43(%rax), %esi
 32266 e6cf 84C0     		testb	%al, %al
10232:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32267              		.loc 1 10232 0
 32268 e6d1 8D4203   		leal	3(%rdx), %eax
 32269              	.LVL2968:
 32270 e6d4 0FB69800 		movzbl	VM_memory(%rax), %ebx
 32270      000000
 32271              	.LVL2969:
 32272 e6db 89D0     		movl	%edx, %eax
10222:src/vm3.c     ****     op0 = op0 + funct;
 32273              		.loc 1 10222 0
 32274 e6dd 0F45CE   		cmovne	%esi, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1075


 32275              	.LVL2970:
10232:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32276              		.loc 1 10232 0
 32277 e6e0 0FB68000 		movzbl	VM_memory(%rax), %eax
 32277      000000
10230:src/vm3.c     **** 
 32278              		.loc 1 10230 0
 32279 e6e7 0FB6C9   		movzbl	%cl, %ecx
 32280 e6ea 48C1E104 		salq	$4, %rcx
 32281              	.LVL2971:
10232:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32282              		.loc 1 10232 0
 32283 e6ee C1E018   		sall	$24, %eax
 32284 e6f1 09C3     		orl	%eax, %ebx
 32285 e6f3 8D4201   		leal	1(%rdx), %eax
 32286 e6f6 0FB68000 		movzbl	VM_memory(%rax), %eax
 32286      000000
 32287 e6fd C1E010   		sall	$16, %eax
 32288 e700 09C3     		orl	%eax, %ebx
 32289 e702 8D4202   		leal	2(%rdx), %eax
 32290 e705 0FB68000 		movzbl	VM_memory(%rax), %eax
 32290      000000
 32291 e70c C1E008   		sall	$8, %eax
 32292 e70f 09C3     		orl	%eax, %ebx
 32293              	.LVL2972:
10233:src/vm3.c     ****   if (op1 == 0x0) {
 32294              		.loc 1 10233 0
 32295 e711 89DA     		movl	%ebx, %edx
10235:src/vm3.c     ****     op1 = op1 + funct;
 32296              		.loc 1 10235 0
 32297 e713 88D8     		movb	%bl, %al
10233:src/vm3.c     ****   if (op1 == 0x0) {
 32298              		.loc 1 10233 0
 32299 e715 C1EA1A   		shrl	$26, %edx
 32300              	.LVL2973:
10235:src/vm3.c     ****     op1 = op1 + funct;
 32301              		.loc 1 10235 0
 32302 e718 83E03F   		andl	$63, %eax
 32303 e71b 8D722B   		leal	43(%rdx), %esi
 32304 e71e 84D2     		testb	%dl, %dl
 32305 e720 0F45C6   		cmovne	%esi, %eax
 32306              	.LVL2974:
10242:src/vm3.c     **** 
 32307              		.loc 1 10242 0
 32308 e723 0FB6C0   		movzbl	%al, %eax
 32309 e726 48C1E004 		salq	$4, %rax
 32310              	.LVL2975:
 32311 e72a 4803840C 		addq	58088(%rsp,%rcx), %rax
 32311      E8E20000 
 32312 e732 488B08   		movq	(%rax), %rcx
 32313              	.LVL2976:
 32314 e735 E91E26FF 		jmp	.L269
 32314      FF
 32315              	.LVL2977:
 32316              	.L1157:
10256:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32317              		.loc 1 10256 0
GAS LISTING /tmp/cc15eBE3.s 			page 1076


 32318 e73a 89DA     		movl	%ebx, %edx
10257:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 32319              		.loc 1 10257 0
 32320 e73c 89D8     		movl	%ebx, %eax
10259:src/vm3.c     **** PC  =  nPC;
 32321              		.loc 1 10259 0
 32322 e73e 0FBFDB   		movswl	%bx, %ebx
 32323              	.LVL2978:
10256:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32324              		.loc 1 10256 0
 32325 e741 C1EA15   		shrl	$21, %edx
10257:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 32326              		.loc 1 10257 0
 32327 e744 C1E810   		shrl	$16, %eax
 32328              	.LVL2979:
10249:src/vm3.c     **** }
 32329              		.loc 1 10249 0
 32330 e747 83050000 		addl	$4, nPC(%rip)
 32330      000004
 32331              	.LVL2980:
10259:src/vm3.c     **** PC  =  nPC;
 32332              		.loc 1 10259 0
 32333 e74e 83E21F   		andl	$31, %edx
 32334 e751 83E01F   		andl	$31, %eax
 32335 e754 031C9500 		addl	RF(,%rdx,4), %ebx
 32335      000000
 32336 e75b 891C8500 		movl	%ebx, RF(,%rax,4)
 32336      000000
10260:src/vm3.c     **** nPC  += 4;
 32337              		.loc 1 10260 0
 32338 e762 8B050000 		movl	nPC(%rip), %eax
 32338      0000
10262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32339              		.loc 1 10262 0
 32340 e768 8D5003   		leal	3(%rax), %edx
10261:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32341              		.loc 1 10261 0
 32342 e76b 8D4804   		leal	4(%rax), %ecx
10260:src/vm3.c     **** nPC  += 4;
 32343              		.loc 1 10260 0
 32344 e76e 89050000 		movl	%eax, PC(%rip)
 32344      0000
10262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32345              		.loc 1 10262 0
 32346 e774 440FB682 		movzbl	VM_memory(%rdx), %r8d
 32346      00000000 
 32347              	.LVL2981:
 32348 e77c 89C2     		movl	%eax, %edx
10275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32349              		.loc 1 10275 0
 32350 e77e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32350      000000
10262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32351              		.loc 1 10262 0
 32352 e785 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32352      000000
10261:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 1077


 32353              		.loc 1 10261 0
 32354 e78c 890D0000 		movl	%ecx, nPC(%rip)
 32354      0000
10275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32355              		.loc 1 10275 0
 32356 e792 8D4805   		leal	5(%rax), %ecx
 32357 e795 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32357      000000
10262:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32358              		.loc 1 10262 0
 32359 e79c C1E218   		sall	$24, %edx
 32360 e79f 4109D0   		orl	%edx, %r8d
 32361 e7a2 8D5001   		leal	1(%rax), %edx
 32362 e7a5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32362      000000
 32363 e7ac C1E210   		sall	$16, %edx
 32364 e7af 4109D0   		orl	%edx, %r8d
 32365 e7b2 8D5002   		leal	2(%rax), %edx
 32366 e7b5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32366      000000
 32367 e7bc C1E208   		sall	$8, %edx
 32368 e7bf 4109D0   		orl	%edx, %r8d
 32369              	.LVL2982:
10263:src/vm3.c     ****   if (op0 == 0x0) {
 32370              		.loc 1 10263 0
 32371 e7c2 4489C6   		movl	%r8d, %esi
10265:src/vm3.c     ****     op0 = op0 + funct;
 32372              		.loc 1 10265 0
 32373 e7c5 4488C2   		movb	%r8b, %dl
10263:src/vm3.c     ****   if (op0 == 0x0) {
 32374              		.loc 1 10263 0
 32375 e7c8 C1EE1A   		shrl	$26, %esi
 32376              	.LVL2983:
10265:src/vm3.c     ****     op0 = op0 + funct;
 32377              		.loc 1 10265 0
 32378 e7cb 83E23F   		andl	$63, %edx
 32379 e7ce 8D7E2B   		leal	43(%rsi), %edi
 32380 e7d1 4084F6   		testb	%sil, %sil
 32381 e7d4 0F45D7   		cmovne	%edi, %edx
 32382              	.LVL2984:
10275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32383              		.loc 1 10275 0
 32384 e7d7 C1E110   		sall	$16, %ecx
 32385 e7da C1E318   		sall	$24, %ebx
 32386 e7dd 09CB     		orl	%ecx, %ebx
 32387 e7df 8D4807   		leal	7(%rax), %ecx
 32388 e7e2 83C006   		addl	$6, %eax
 32389 e7e5 0FB68000 		movzbl	VM_memory(%rax), %eax
 32389      000000
10273:src/vm3.c     **** 
 32390              		.loc 1 10273 0
 32391 e7ec 0FB6D2   		movzbl	%dl, %edx
10275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32392              		.loc 1 10275 0
 32393 e7ef 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32393      000000
10273:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1078


 32394              		.loc 1 10273 0
 32395 e7f6 48C1E204 		salq	$4, %rdx
 32396              	.LVL2985:
10275:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32397              		.loc 1 10275 0
 32398 e7fa C1E008   		sall	$8, %eax
 32399 e7fd 09CB     		orl	%ecx, %ebx
 32400 e7ff 09C3     		orl	%eax, %ebx
 32401              	.LVL2986:
10276:src/vm3.c     ****   if (op1 == 0x0) {
 32402              		.loc 1 10276 0
 32403 e801 89D9     		movl	%ebx, %ecx
10278:src/vm3.c     ****     op1 = op1 + funct;
 32404              		.loc 1 10278 0
 32405 e803 88D8     		movb	%bl, %al
10276:src/vm3.c     ****   if (op1 == 0x0) {
 32406              		.loc 1 10276 0
 32407 e805 C1E91A   		shrl	$26, %ecx
 32408              	.LVL2987:
10278:src/vm3.c     ****     op1 = op1 + funct;
 32409              		.loc 1 10278 0
 32410 e808 83E03F   		andl	$63, %eax
 32411 e80b 8D712B   		leal	43(%rcx), %esi
 32412 e80e 84C9     		testb	%cl, %cl
 32413 e810 0F45C6   		cmovne	%esi, %eax
 32414              	.LVL2988:
10285:src/vm3.c     **** 
 32415              		.loc 1 10285 0
 32416 e813 0FB6C0   		movzbl	%al, %eax
 32417 e816 48C1E004 		salq	$4, %rax
 32418              	.LVL2989:
 32419 e81a 48038414 		addq	58088(%rsp,%rdx), %rax
 32419      E8E20000 
 32420 e822 488B08   		movq	(%rax), %rcx
 32421 e825 E92E25FF 		jmp	.L269
 32421      FF
 32422              	.LVL2990:
 32423              	.L233:
10293:src/vm3.c     **** if ((int32_t)RF[rs] > 0)
 32424              		.loc 1 10293 0
 32425 e82a 4489C0   		movl	%r8d, %eax
 32426 e82d C1E815   		shrl	$21, %eax
10294:src/vm3.c     **** {
 32427              		.loc 1 10294 0
 32428 e830 83E01F   		andl	$31, %eax
 32429 e833 833C8500 		cmpl	$0, RF(,%rax,4)
 32429      00000000 
 32430 e83b 0F8ECE00 		jle	.L1166
 32430      0000
 32431              	.LVL2991:
10297:src/vm3.c     ****   nPC  += (immediate << 2);
 32432              		.loc 1 10297 0
 32433 e841 8B050000 		movl	nPC(%rip), %eax
 32433      0000
10298:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 32434              		.loc 1 10298 0
 32435 e847 450FBFC0 		movswl	%r8w, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1079


 32436              	.LVL2992:
10299:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32437              		.loc 1 10299 0
 32438 e84b 8D4803   		leal	3(%rax), %ecx
10298:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 32439              		.loc 1 10298 0
 32440 e84e 428D1480 		leal	(%rax,%r8,4), %edx
10297:src/vm3.c     ****   nPC  += (immediate << 2);
 32441              		.loc 1 10297 0
 32442 e852 89050000 		movl	%eax, PC(%rip)
 32442      0000
10299:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32443              		.loc 1 10299 0
 32444 e858 440FB681 		movzbl	VM_memory(%rcx), %r8d
 32444      00000000 
 32445              	.LVL2993:
 32446 e860 89C1     		movl	%eax, %ecx
10298:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 32447              		.loc 1 10298 0
 32448 e862 89150000 		movl	%edx, nPC(%rip)
 32448      0000
10299:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32449              		.loc 1 10299 0
 32450 e868 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32450      000000
 32451 e86f C1E118   		sall	$24, %ecx
 32452 e872 4109C8   		orl	%ecx, %r8d
 32453 e875 8D4801   		leal	1(%rax), %ecx
 32454 e878 83C002   		addl	$2, %eax
 32455 e87b 0FB68000 		movzbl	VM_memory(%rax), %eax
 32455      000000
 32456 e882 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32456      000000
 32457 e889 C1E008   		sall	$8, %eax
 32458 e88c C1E110   		sall	$16, %ecx
 32459 e88f 4109C8   		orl	%ecx, %r8d
 32460 e892 4109C0   		orl	%eax, %r8d
 32461              	.LVL2994:
10300:src/vm3.c     ****   if (op0 == 0x0) {
 32462              		.loc 1 10300 0
 32463 e895 4489C0   		movl	%r8d, %eax
10302:src/vm3.c     ****     op0 = op0 + funct;
 32464              		.loc 1 10302 0
 32465 e898 4488C1   		movb	%r8b, %cl
10300:src/vm3.c     ****   if (op0 == 0x0) {
 32466              		.loc 1 10300 0
 32467 e89b C1E81A   		shrl	$26, %eax
 32468              	.LVL2995:
10302:src/vm3.c     ****     op0 = op0 + funct;
 32469              		.loc 1 10302 0
 32470 e89e 83E13F   		andl	$63, %ecx
 32471 e8a1 8D702B   		leal	43(%rax), %esi
 32472 e8a4 84C0     		testb	%al, %al
10312:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32473              		.loc 1 10312 0
 32474 e8a6 8D4203   		leal	3(%rdx), %eax
 32475              	.LVL2996:
GAS LISTING /tmp/cc15eBE3.s 			page 1080


 32476 e8a9 0FB69800 		movzbl	VM_memory(%rax), %ebx
 32476      000000
 32477              	.LVL2997:
 32478 e8b0 89D0     		movl	%edx, %eax
10302:src/vm3.c     ****     op0 = op0 + funct;
 32479              		.loc 1 10302 0
 32480 e8b2 0F45CE   		cmovne	%esi, %ecx
 32481              	.LVL2998:
10312:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32482              		.loc 1 10312 0
 32483 e8b5 0FB68000 		movzbl	VM_memory(%rax), %eax
 32483      000000
10310:src/vm3.c     **** 
 32484              		.loc 1 10310 0
 32485 e8bc 0FB6C9   		movzbl	%cl, %ecx
 32486 e8bf 48C1E104 		salq	$4, %rcx
 32487              	.LVL2999:
10312:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32488              		.loc 1 10312 0
 32489 e8c3 C1E018   		sall	$24, %eax
 32490 e8c6 09C3     		orl	%eax, %ebx
 32491 e8c8 8D4201   		leal	1(%rdx), %eax
 32492 e8cb 0FB68000 		movzbl	VM_memory(%rax), %eax
 32492      000000
 32493 e8d2 C1E010   		sall	$16, %eax
 32494 e8d5 09C3     		orl	%eax, %ebx
 32495 e8d7 8D4202   		leal	2(%rdx), %eax
 32496 e8da 0FB68000 		movzbl	VM_memory(%rax), %eax
 32496      000000
 32497 e8e1 C1E008   		sall	$8, %eax
 32498 e8e4 09C3     		orl	%eax, %ebx
 32499              	.LVL3000:
10313:src/vm3.c     ****   if (op1 == 0x0) {
 32500              		.loc 1 10313 0
 32501 e8e6 89DA     		movl	%ebx, %edx
10315:src/vm3.c     ****     op1 = op1 + funct;
 32502              		.loc 1 10315 0
 32503 e8e8 88D8     		movb	%bl, %al
10313:src/vm3.c     ****   if (op1 == 0x0) {
 32504              		.loc 1 10313 0
 32505 e8ea C1EA1A   		shrl	$26, %edx
 32506              	.LVL3001:
10315:src/vm3.c     ****     op1 = op1 + funct;
 32507              		.loc 1 10315 0
 32508 e8ed 83E03F   		andl	$63, %eax
 32509 e8f0 8D722B   		leal	43(%rdx), %esi
 32510 e8f3 84D2     		testb	%dl, %dl
 32511 e8f5 0F45C6   		cmovne	%esi, %eax
 32512              	.LVL3002:
10322:src/vm3.c     **** 
 32513              		.loc 1 10322 0
 32514 e8f8 0FB6C0   		movzbl	%al, %eax
 32515 e8fb 48C1E004 		salq	$4, %rax
 32516              	.LVL3003:
 32517 e8ff 4803840C 		addq	58088(%rsp,%rcx), %rax
 32517      E8E20000 
 32518 e907 488B08   		movq	(%rax), %rcx
GAS LISTING /tmp/cc15eBE3.s 			page 1081


 32519              	.LVL3004:
 32520 e90a E94924FF 		jmp	.L269
 32520      FF
 32521              	.LVL3005:
 32522              	.L1166:
10337:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 32523              		.loc 1 10337 0
 32524 e90f 89D8     		movl	%ebx, %eax
10338:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 32525              		.loc 1 10338 0
 32526 e911 89DA     		movl	%ebx, %edx
10336:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32527              		.loc 1 10336 0
 32528 e913 C1EB06   		shrl	$6, %ebx
 32529              	.LVL3006:
10337:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 32530              		.loc 1 10337 0
 32531 e916 C1E810   		shrl	$16, %eax
 32532              	.LVL3007:
10336:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32533              		.loc 1 10336 0
 32534 e919 88D9     		movb	%bl, %cl
10338:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 32535              		.loc 1 10338 0
 32536 e91b C1EA0B   		shrl	$11, %edx
 32537              	.LVL3008:
10339:src/vm3.c     **** PC  =  nPC;
 32538              		.loc 1 10339 0
 32539 e91e 83E01F   		andl	$31, %eax
10336:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32540              		.loc 1 10336 0
 32541 e921 83E11F   		andl	$31, %ecx
10329:src/vm3.c     **** }
 32542              		.loc 1 10329 0
 32543 e924 83050000 		addl	$4, nPC(%rip)
 32543      000004
10339:src/vm3.c     **** PC  =  nPC;
 32544              		.loc 1 10339 0
 32545 e92b 8B048500 		movl	RF(,%rax,4), %eax
 32545      000000
 32546 e932 83E21F   		andl	$31, %edx
 32547 e935 D3E0     		sall	%cl, %eax
 32548 e937 89049500 		movl	%eax, RF(,%rdx,4)
 32548      000000
10340:src/vm3.c     **** nPC  += 4;
 32549              		.loc 1 10340 0
 32550 e93e 8B050000 		movl	nPC(%rip), %eax
 32550      0000
10342:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32551              		.loc 1 10342 0
 32552 e944 8D5003   		leal	3(%rax), %edx
10341:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32553              		.loc 1 10341 0
 32554 e947 8D4804   		leal	4(%rax), %ecx
10340:src/vm3.c     **** nPC  += 4;
 32555              		.loc 1 10340 0
 32556 e94a 89050000 		movl	%eax, PC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 1082


 32556      0000
10342:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32557              		.loc 1 10342 0
 32558 e950 440FB682 		movzbl	VM_memory(%rdx), %r8d
 32558      00000000 
 32559              	.LVL3009:
 32560 e958 89C2     		movl	%eax, %edx
10355:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32561              		.loc 1 10355 0
 32562 e95a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32562      000000
10342:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32563              		.loc 1 10342 0
 32564 e961 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32564      000000
10341:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32565              		.loc 1 10341 0
 32566 e968 890D0000 		movl	%ecx, nPC(%rip)
 32566      0000
10355:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32567              		.loc 1 10355 0
 32568 e96e 8D4805   		leal	5(%rax), %ecx
 32569 e971 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32569      000000
10342:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32570              		.loc 1 10342 0
 32571 e978 C1E218   		sall	$24, %edx
 32572 e97b 4109D0   		orl	%edx, %r8d
 32573 e97e 8D5001   		leal	1(%rax), %edx
 32574 e981 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32574      000000
 32575 e988 C1E210   		sall	$16, %edx
 32576 e98b 4109D0   		orl	%edx, %r8d
 32577 e98e 8D5002   		leal	2(%rax), %edx
 32578 e991 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32578      000000
 32579 e998 C1E208   		sall	$8, %edx
 32580 e99b 4109D0   		orl	%edx, %r8d
 32581              	.LVL3010:
10343:src/vm3.c     ****   if (op0 == 0x0) {
 32582              		.loc 1 10343 0
 32583 e99e 4489C6   		movl	%r8d, %esi
10345:src/vm3.c     ****     op0 = op0 + funct;
 32584              		.loc 1 10345 0
 32585 e9a1 4488C2   		movb	%r8b, %dl
10343:src/vm3.c     ****   if (op0 == 0x0) {
 32586              		.loc 1 10343 0
 32587 e9a4 C1EE1A   		shrl	$26, %esi
 32588              	.LVL3011:
10345:src/vm3.c     ****     op0 = op0 + funct;
 32589              		.loc 1 10345 0
 32590 e9a7 83E23F   		andl	$63, %edx
 32591 e9aa 8D7E2B   		leal	43(%rsi), %edi
 32592 e9ad 4084F6   		testb	%sil, %sil
 32593 e9b0 0F45D7   		cmovne	%edi, %edx
 32594              	.LVL3012:
10355:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1083


 32595              		.loc 1 10355 0
 32596 e9b3 C1E110   		sall	$16, %ecx
 32597 e9b6 C1E318   		sall	$24, %ebx
 32598 e9b9 09CB     		orl	%ecx, %ebx
 32599 e9bb 8D4807   		leal	7(%rax), %ecx
 32600 e9be 83C006   		addl	$6, %eax
 32601 e9c1 0FB68000 		movzbl	VM_memory(%rax), %eax
 32601      000000
10353:src/vm3.c     **** 
 32602              		.loc 1 10353 0
 32603 e9c8 0FB6D2   		movzbl	%dl, %edx
10355:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32604              		.loc 1 10355 0
 32605 e9cb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32605      000000
10353:src/vm3.c     **** 
 32606              		.loc 1 10353 0
 32607 e9d2 48C1E204 		salq	$4, %rdx
 32608              	.LVL3013:
10355:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32609              		.loc 1 10355 0
 32610 e9d6 C1E008   		sall	$8, %eax
 32611 e9d9 09CB     		orl	%ecx, %ebx
 32612 e9db 09C3     		orl	%eax, %ebx
 32613              	.LVL3014:
10356:src/vm3.c     ****   if (op1 == 0x0) {
 32614              		.loc 1 10356 0
 32615 e9dd 89D9     		movl	%ebx, %ecx
10358:src/vm3.c     ****     op1 = op1 + funct;
 32616              		.loc 1 10358 0
 32617 e9df 88D8     		movb	%bl, %al
10356:src/vm3.c     ****   if (op1 == 0x0) {
 32618              		.loc 1 10356 0
 32619 e9e1 C1E91A   		shrl	$26, %ecx
 32620              	.LVL3015:
10358:src/vm3.c     ****     op1 = op1 + funct;
 32621              		.loc 1 10358 0
 32622 e9e4 83E03F   		andl	$63, %eax
 32623 e9e7 8D712B   		leal	43(%rcx), %esi
 32624 e9ea 84C9     		testb	%cl, %cl
 32625 e9ec 0F45C6   		cmovne	%esi, %eax
 32626              	.LVL3016:
10365:src/vm3.c     **** 
 32627              		.loc 1 10365 0
 32628 e9ef 0FB6C0   		movzbl	%al, %eax
 32629 e9f2 48C1E004 		salq	$4, %rax
 32630              	.LVL3017:
 32631 e9f6 48038414 		addq	58088(%rsp,%rdx), %rax
 32631      E8E20000 
 32632 e9fe 488B08   		movq	(%rax), %rcx
 32633 ea01 E95223FF 		jmp	.L269
 32633      FF
 32634              	.LVL3018:
 32635              	.L3:
10374:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 32636              		.loc 1 10374 0
 32637 ea06 4489C0   		movl	%r8d, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1084


10376:src/vm3.c     **** PC  =  nPC;
 32638              		.loc 1 10376 0
 32639 ea09 41C1E010 		sall	$16, %r8d
 32640              	.LVL3019:
10386:src/vm3.c     **** nPC = address << 2;
 32641              		.loc 1 10386 0
 32642 ea0d 81E3FFFF 		andl	$67108863, %ebx
 32642      FF03
 32643              	.LVL3020:
10374:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 32644              		.loc 1 10374 0
 32645 ea13 C1E810   		shrl	$16, %eax
 32646              	.LVL3021:
10376:src/vm3.c     **** PC  =  nPC;
 32647              		.loc 1 10376 0
 32648 ea16 83E01F   		andl	$31, %eax
 32649 ea19 44890485 		movl	%r8d, RF(,%rax,4)
 32649      00000000 
10377:src/vm3.c     **** nPC  += 4;
 32650              		.loc 1 10377 0
 32651 ea21 8B050000 		movl	nPC(%rip), %eax
 32651      0000
10378:src/vm3.c     **** 
 32652              		.loc 1 10378 0
 32653 ea27 83050000 		addl	$4, nPC(%rip)
 32653      000004
10385:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 32654              		.loc 1 10385 0
 32655 ea2e 8B150000 		movl	nPC(%rip), %edx
 32655      0000
10384:src/vm3.c     **** PC = nPC;
 32656              		.loc 1 10384 0
 32657 ea34 83C008   		addl	$8, %eax
 32658 ea37 89050000 		movl	%eax, RF+124(%rip)
 32658      0000
10387:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32659              		.loc 1 10387 0
 32660 ea3d 8D049D00 		leal	0(,%rbx,4), %eax
 32660      000000
10388:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32661              		.loc 1 10388 0
 32662 ea44 8D4A03   		leal	3(%rdx), %ecx
10385:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 32663              		.loc 1 10385 0
 32664 ea47 89150000 		movl	%edx, PC(%rip)
 32664      0000
10387:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32665              		.loc 1 10387 0
 32666 ea4d 89050000 		movl	%eax, nPC(%rip)
 32666      0000
10388:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32667              		.loc 1 10388 0
 32668 ea53 440FB681 		movzbl	VM_memory(%rcx), %r8d
 32668      00000000 
 32669 ea5b 89D1     		movl	%edx, %ecx
 32670 ea5d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32670      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1085


 32671 ea64 C1E118   		sall	$24, %ecx
 32672 ea67 4109C8   		orl	%ecx, %r8d
 32673 ea6a 8D4A01   		leal	1(%rdx), %ecx
 32674 ea6d 83C202   		addl	$2, %edx
 32675 ea70 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32675      000000
 32676 ea77 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32676      000000
 32677 ea7e C1E208   		sall	$8, %edx
 32678 ea81 C1E110   		sall	$16, %ecx
 32679 ea84 4109C8   		orl	%ecx, %r8d
 32680 ea87 4109D0   		orl	%edx, %r8d
 32681              	.LVL3022:
10389:src/vm3.c     ****   if (op0 == 0x0) {
 32682              		.loc 1 10389 0
 32683 ea8a 4489C1   		movl	%r8d, %ecx
10391:src/vm3.c     ****     op0 = op0 + funct;
 32684              		.loc 1 10391 0
 32685 ea8d 4488C2   		movb	%r8b, %dl
10389:src/vm3.c     ****   if (op0 == 0x0) {
 32686              		.loc 1 10389 0
 32687 ea90 C1E91A   		shrl	$26, %ecx
 32688              	.LVL3023:
10391:src/vm3.c     ****     op0 = op0 + funct;
 32689              		.loc 1 10391 0
 32690 ea93 83E23F   		andl	$63, %edx
 32691 ea96 8D712B   		leal	43(%rcx), %esi
 32692 ea99 84C9     		testb	%cl, %cl
10401:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32693              		.loc 1 10401 0
 32694 ea9b 8D4803   		leal	3(%rax), %ecx
 32695              	.LVL3024:
 32696 ea9e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32696      000000
 32697 eaa5 89C1     		movl	%eax, %ecx
10391:src/vm3.c     ****     op0 = op0 + funct;
 32698              		.loc 1 10391 0
 32699 eaa7 0F45D6   		cmovne	%esi, %edx
 32700              	.LVL3025:
10401:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32701              		.loc 1 10401 0
 32702 eaaa 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32702      000000
10399:src/vm3.c     **** 
 32703              		.loc 1 10399 0
 32704 eab1 0FB6D2   		movzbl	%dl, %edx
 32705 eab4 48C1E204 		salq	$4, %rdx
 32706              	.LVL3026:
10401:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32707              		.loc 1 10401 0
 32708 eab8 C1E118   		sall	$24, %ecx
 32709 eabb 09CB     		orl	%ecx, %ebx
 32710 eabd 8D4801   		leal	1(%rax), %ecx
 32711 eac0 83C002   		addl	$2, %eax
 32712 eac3 0FB68000 		movzbl	VM_memory(%rax), %eax
 32712      000000
 32713 eaca 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1086


 32713      000000
 32714 ead1 C1E008   		sall	$8, %eax
 32715 ead4 C1E110   		sall	$16, %ecx
 32716 ead7 09CB     		orl	%ecx, %ebx
 32717 ead9 09C3     		orl	%eax, %ebx
 32718              	.LVL3027:
10402:src/vm3.c     ****   if (op1 == 0x0) {
 32719              		.loc 1 10402 0
 32720 eadb 89D9     		movl	%ebx, %ecx
10404:src/vm3.c     ****     op1 = op1 + funct;
 32721              		.loc 1 10404 0
 32722 eadd 88D8     		movb	%bl, %al
10402:src/vm3.c     ****   if (op1 == 0x0) {
 32723              		.loc 1 10402 0
 32724 eadf C1E91A   		shrl	$26, %ecx
 32725              	.LVL3028:
10404:src/vm3.c     ****     op1 = op1 + funct;
 32726              		.loc 1 10404 0
 32727 eae2 83E03F   		andl	$63, %eax
 32728 eae5 8D712B   		leal	43(%rcx), %esi
 32729 eae8 84C9     		testb	%cl, %cl
 32730 eaea 0F45C6   		cmovne	%esi, %eax
 32731              	.LVL3029:
10411:src/vm3.c     **** 
 32732              		.loc 1 10411 0
 32733 eaed 0FB6C0   		movzbl	%al, %eax
 32734 eaf0 48C1E004 		salq	$4, %rax
 32735              	.LVL3030:
 32736 eaf4 48038414 		addq	58088(%rsp,%rdx), %rax
 32736      E8E20000 
 32737 eafc 488B08   		movq	(%rax), %rcx
 32738 eaff E95422FF 		jmp	.L269
 32738      FF
 32739              	.LVL3031:
 32740              	.L131:
10445:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32741              		.loc 1 10445 0
 32742 eb04 4489C2   		movl	%r8d, %edx
10446:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 32743              		.loc 1 10446 0
 32744 eb07 4489C0   		movl	%r8d, %eax
10448:src/vm3.c     **** PC  =  nPC;
 32745              		.loc 1 10448 0
 32746 eb0a 450FBFC0 		movswl	%r8w, %r8d
 32747              	.LVL3032:
10445:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32748              		.loc 1 10445 0
 32749 eb0e C1EA15   		shrl	$21, %edx
10446:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 32750              		.loc 1 10446 0
 32751 eb11 C1E810   		shrl	$16, %eax
 32752              	.LVL3033:
10448:src/vm3.c     **** PC  =  nPC;
 32753              		.loc 1 10448 0
 32754 eb14 83E21F   		andl	$31, %edx
 32755 eb17 83E01F   		andl	$31, %eax
 32756 eb1a 44030495 		addl	RF(,%rdx,4), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1087


 32756      00000000 
 32757              	.LVL3034:
 32758 eb22 44890485 		movl	%r8d, RF(,%rax,4)
 32758      00000000 
10450:src/vm3.c     **** 
 32759              		.loc 1 10450 0
 32760 eb2a 8B050000 		movl	nPC(%rip), %eax
 32760      0000
 32761 eb30 8D5004   		leal	4(%rax), %edx
10457:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32762              		.loc 1 10457 0
 32763 eb33 8D7007   		leal	7(%rax), %esi
10456:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32764              		.loc 1 10456 0
 32765 eb36 8D4808   		leal	8(%rax), %ecx
10455:src/vm3.c     **** nPC  += 4;
 32766              		.loc 1 10455 0
 32767 eb39 89150000 		movl	%edx, PC(%rip)
 32767      0000
10457:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32768              		.loc 1 10457 0
 32769 eb3f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32769      000000
 32770 eb46 440FB686 		movzbl	VM_memory(%rsi), %r8d
 32770      00000000 
10470:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32771              		.loc 1 10470 0
 32772 eb4e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32772      000000
 32773              	.LVL3035:
10456:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32774              		.loc 1 10456 0
 32775 eb55 890D0000 		movl	%ecx, nPC(%rip)
 32775      0000
10470:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32776              		.loc 1 10470 0
 32777 eb5b 8D4809   		leal	9(%rax), %ecx
10457:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32778              		.loc 1 10457 0
 32779 eb5e C1E218   		sall	$24, %edx
10470:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32780              		.loc 1 10470 0
 32781 eb61 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32781      000000
10457:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32782              		.loc 1 10457 0
 32783 eb68 4109D0   		orl	%edx, %r8d
 32784 eb6b 8D5005   		leal	5(%rax), %edx
 32785 eb6e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32785      000000
 32786 eb75 C1E210   		sall	$16, %edx
 32787 eb78 4109D0   		orl	%edx, %r8d
 32788 eb7b 8D5006   		leal	6(%rax), %edx
 32789 eb7e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32789      000000
 32790 eb85 C1E208   		sall	$8, %edx
 32791 eb88 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1088


 32792              	.LVL3036:
10458:src/vm3.c     ****   if (op0 == 0x0) {
 32793              		.loc 1 10458 0
 32794 eb8b 4489C6   		movl	%r8d, %esi
10460:src/vm3.c     ****     op0 = op0 + funct;
 32795              		.loc 1 10460 0
 32796 eb8e 4488C2   		movb	%r8b, %dl
10458:src/vm3.c     ****   if (op0 == 0x0) {
 32797              		.loc 1 10458 0
 32798 eb91 C1EE1A   		shrl	$26, %esi
 32799              	.LVL3037:
10460:src/vm3.c     ****     op0 = op0 + funct;
 32800              		.loc 1 10460 0
 32801 eb94 83E23F   		andl	$63, %edx
 32802 eb97 8D7E2B   		leal	43(%rsi), %edi
 32803 eb9a 4084F6   		testb	%sil, %sil
 32804 eb9d 0F45D7   		cmovne	%edi, %edx
 32805              	.LVL3038:
10470:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32806              		.loc 1 10470 0
 32807 eba0 C1E110   		sall	$16, %ecx
 32808 eba3 C1E318   		sall	$24, %ebx
 32809 eba6 09CB     		orl	%ecx, %ebx
 32810 eba8 8D480B   		leal	11(%rax), %ecx
 32811 ebab 83C00A   		addl	$10, %eax
 32812 ebae 0FB68000 		movzbl	VM_memory(%rax), %eax
 32812      000000
10468:src/vm3.c     **** 
 32813              		.loc 1 10468 0
 32814 ebb5 0FB6D2   		movzbl	%dl, %edx
10470:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32815              		.loc 1 10470 0
 32816 ebb8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32816      000000
10468:src/vm3.c     **** 
 32817              		.loc 1 10468 0
 32818 ebbf 48C1E204 		salq	$4, %rdx
 32819              	.LVL3039:
10470:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32820              		.loc 1 10470 0
 32821 ebc3 C1E008   		sall	$8, %eax
 32822 ebc6 09CB     		orl	%ecx, %ebx
 32823 ebc8 09C3     		orl	%eax, %ebx
 32824              	.LVL3040:
10471:src/vm3.c     ****   if (op1 == 0x0) {
 32825              		.loc 1 10471 0
 32826 ebca 89D9     		movl	%ebx, %ecx
10473:src/vm3.c     ****     op1 = op1 + funct;
 32827              		.loc 1 10473 0
 32828 ebcc 88D8     		movb	%bl, %al
10471:src/vm3.c     ****   if (op1 == 0x0) {
 32829              		.loc 1 10471 0
 32830 ebce C1E91A   		shrl	$26, %ecx
 32831              	.LVL3041:
10473:src/vm3.c     ****     op1 = op1 + funct;
 32832              		.loc 1 10473 0
 32833 ebd1 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1089


 32834 ebd4 8D712B   		leal	43(%rcx), %esi
 32835 ebd7 84C9     		testb	%cl, %cl
 32836 ebd9 0F45C6   		cmovne	%esi, %eax
 32837              	.LVL3042:
10480:src/vm3.c     **** 
 32838              		.loc 1 10480 0
 32839 ebdc 0FB6C0   		movzbl	%al, %eax
 32840 ebdf 48C1E004 		salq	$4, %rax
 32841              	.LVL3043:
 32842 ebe3 48038414 		addq	58088(%rsp,%rdx), %rax
 32842      E8E20000 
 32843 ebeb 488B08   		movq	(%rax), %rcx
 32844 ebee E96521FF 		jmp	.L269
 32844      FF
 32845              	.LVL3044:
 32846              	.L126:
10489:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 32847              		.loc 1 10489 0
 32848 ebf3 4489C0   		movl	%r8d, %eax
10490:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 32849              		.loc 1 10490 0
 32850 ebf6 4489C2   		movl	%r8d, %edx
10488:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32851              		.loc 1 10488 0
 32852 ebf9 41C1E815 		shrl	$21, %r8d
 32853              	.LVL3045:
10489:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 32854              		.loc 1 10489 0
 32855 ebfd C1E810   		shrl	$16, %eax
 32856              	.LVL3046:
10491:src/vm3.c     **** PC  =  nPC;
 32857              		.loc 1 10491 0
 32858 ec00 4183E01F 		andl	$31, %r8d
10490:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 32859              		.loc 1 10490 0
 32860 ec04 C1EA0B   		shrl	$11, %edx
 32861              	.LVL3047:
10491:src/vm3.c     **** PC  =  nPC;
 32862              		.loc 1 10491 0
 32863 ec07 83E01F   		andl	$31, %eax
 32864 ec0a 83E21F   		andl	$31, %edx
10493:src/vm3.c     **** 
 32865              		.loc 1 10493 0
 32866 ec0d 83050000 		addl	$4, nPC(%rip)
 32866      000004
 32867              	.LVL3048:
10491:src/vm3.c     **** PC  =  nPC;
 32868              		.loc 1 10491 0
 32869 ec14 8B048500 		movl	RF(,%rax,4), %eax
 32869      000000
 32870 ec1b 42230485 		andl	RF(,%r8,4), %eax
 32870      00000000 
 32871 ec23 89049500 		movl	%eax, RF(,%rdx,4)
 32871      000000
10500:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 32872              		.loc 1 10500 0
 32873 ec2a 89D8     		movl	%ebx, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1090


10501:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 32874              		.loc 1 10501 0
 32875 ec2c 89DA     		movl	%ebx, %edx
10500:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 32876              		.loc 1 10500 0
 32877 ec2e C1E810   		shrl	$16, %eax
10499:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32878              		.loc 1 10499 0
 32879 ec31 C1EB06   		shrl	$6, %ebx
 32880              	.LVL3049:
10501:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 32881              		.loc 1 10501 0
 32882 ec34 C1EA0B   		shrl	$11, %edx
 32883              	.LVL3050:
10502:src/vm3.c     **** PC  =  nPC;
 32884              		.loc 1 10502 0
 32885 ec37 83E01F   		andl	$31, %eax
10499:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32886              		.loc 1 10499 0
 32887 ec3a 88D9     		movb	%bl, %cl
10502:src/vm3.c     **** PC  =  nPC;
 32888              		.loc 1 10502 0
 32889 ec3c 83E21F   		andl	$31, %edx
 32890 ec3f 8B048500 		movl	RF(,%rax,4), %eax
 32890      000000
10499:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 32891              		.loc 1 10499 0
 32892 ec46 83E11F   		andl	$31, %ecx
10502:src/vm3.c     **** PC  =  nPC;
 32893              		.loc 1 10502 0
 32894 ec49 D3E8     		shrl	%cl, %eax
 32895 ec4b 89049500 		movl	%eax, RF(,%rdx,4)
 32895      000000
10503:src/vm3.c     **** nPC  += 4;
 32896              		.loc 1 10503 0
 32897 ec52 8B050000 		movl	nPC(%rip), %eax
 32897      0000
10505:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32898              		.loc 1 10505 0
 32899 ec58 8D5003   		leal	3(%rax), %edx
10504:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32900              		.loc 1 10504 0
 32901 ec5b 8D4804   		leal	4(%rax), %ecx
10503:src/vm3.c     **** nPC  += 4;
 32902              		.loc 1 10503 0
 32903 ec5e 89050000 		movl	%eax, PC(%rip)
 32903      0000
10505:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32904              		.loc 1 10505 0
 32905 ec64 440FB682 		movzbl	VM_memory(%rdx), %r8d
 32905      00000000 
 32906 ec6c 89C2     		movl	%eax, %edx
10518:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32907              		.loc 1 10518 0
 32908 ec6e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 32908      000000
10505:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1091


 32909              		.loc 1 10505 0
 32910 ec75 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32910      000000
10504:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 32911              		.loc 1 10504 0
 32912 ec7c 890D0000 		movl	%ecx, nPC(%rip)
 32912      0000
10518:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32913              		.loc 1 10518 0
 32914 ec82 8D4805   		leal	5(%rax), %ecx
 32915 ec85 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32915      000000
10505:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 32916              		.loc 1 10505 0
 32917 ec8c C1E218   		sall	$24, %edx
 32918 ec8f 4109D0   		orl	%edx, %r8d
 32919 ec92 8D5001   		leal	1(%rax), %edx
 32920 ec95 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32920      000000
 32921 ec9c C1E210   		sall	$16, %edx
 32922 ec9f 4109D0   		orl	%edx, %r8d
 32923 eca2 8D5002   		leal	2(%rax), %edx
 32924 eca5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 32924      000000
 32925 ecac C1E208   		sall	$8, %edx
 32926 ecaf 4109D0   		orl	%edx, %r8d
 32927              	.LVL3051:
10506:src/vm3.c     ****   if (op0 == 0x0) {
 32928              		.loc 1 10506 0
 32929 ecb2 4489C6   		movl	%r8d, %esi
10508:src/vm3.c     ****     op0 = op0 + funct;
 32930              		.loc 1 10508 0
 32931 ecb5 4488C2   		movb	%r8b, %dl
10506:src/vm3.c     ****   if (op0 == 0x0) {
 32932              		.loc 1 10506 0
 32933 ecb8 C1EE1A   		shrl	$26, %esi
 32934              	.LVL3052:
10508:src/vm3.c     ****     op0 = op0 + funct;
 32935              		.loc 1 10508 0
 32936 ecbb 83E23F   		andl	$63, %edx
 32937 ecbe 8D7E2B   		leal	43(%rsi), %edi
 32938 ecc1 4084F6   		testb	%sil, %sil
 32939 ecc4 0F45D7   		cmovne	%edi, %edx
 32940              	.LVL3053:
10518:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32941              		.loc 1 10518 0
 32942 ecc7 C1E110   		sall	$16, %ecx
 32943 ecca C1E318   		sall	$24, %ebx
 32944 eccd 09CB     		orl	%ecx, %ebx
 32945 eccf 8D4807   		leal	7(%rax), %ecx
 32946 ecd2 83C006   		addl	$6, %eax
 32947 ecd5 0FB68000 		movzbl	VM_memory(%rax), %eax
 32947      000000
10516:src/vm3.c     **** 
 32948              		.loc 1 10516 0
 32949 ecdc 0FB6D2   		movzbl	%dl, %edx
10518:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1092


 32950              		.loc 1 10518 0
 32951 ecdf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 32951      000000
10516:src/vm3.c     **** 
 32952              		.loc 1 10516 0
 32953 ece6 48C1E204 		salq	$4, %rdx
 32954              	.LVL3054:
10518:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 32955              		.loc 1 10518 0
 32956 ecea C1E008   		sall	$8, %eax
 32957 eced 09CB     		orl	%ecx, %ebx
 32958 ecef 09C3     		orl	%eax, %ebx
 32959              	.LVL3055:
10519:src/vm3.c     ****   if (op1 == 0x0) {
 32960              		.loc 1 10519 0
 32961 ecf1 89D9     		movl	%ebx, %ecx
10521:src/vm3.c     ****     op1 = op1 + funct;
 32962              		.loc 1 10521 0
 32963 ecf3 88D8     		movb	%bl, %al
10519:src/vm3.c     ****   if (op1 == 0x0) {
 32964              		.loc 1 10519 0
 32965 ecf5 C1E91A   		shrl	$26, %ecx
 32966              	.LVL3056:
10521:src/vm3.c     ****     op1 = op1 + funct;
 32967              		.loc 1 10521 0
 32968 ecf8 83E03F   		andl	$63, %eax
 32969 ecfb 8D712B   		leal	43(%rcx), %esi
 32970 ecfe 84C9     		testb	%cl, %cl
 32971 ed00 0F45C6   		cmovne	%esi, %eax
 32972              	.LVL3057:
10528:src/vm3.c     **** 
 32973              		.loc 1 10528 0
 32974 ed03 0FB6C0   		movzbl	%al, %eax
 32975 ed06 48C1E004 		salq	$4, %rax
 32976              	.LVL3058:
 32977 ed0a 48038414 		addq	58088(%rsp,%rdx), %rax
 32977      E8E20000 
 32978 ed12 488B08   		movq	(%rax), %rcx
 32979 ed15 E93E20FF 		jmp	.L269
 32979      FF
 32980              	.LVL3059:
 32981              	.L236:
10537:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
 32982              		.loc 1 10537 0
 32983 ed1a 4489C0   		movl	%r8d, %eax
10536:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32984              		.loc 1 10536 0
 32985 ed1d 4489C1   		movl	%r8d, %ecx
10539:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 32986              		.loc 1 10539 0
 32987 ed20 41C1E80B 		shrl	$11, %r8d
 32988              	.LVL3060:
10537:src/vm3.c     **** if ((int32_t)RF[rt] < 0 && shamt > 0) {
 32989              		.loc 1 10537 0
 32990 ed24 C1E810   		shrl	$16, %eax
 32991              	.LVL3061:
10536:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1093


 32992              		.loc 1 10536 0
 32993 ed27 C1E906   		shrl	$6, %ecx
 32994              	.LVL3062:
 32995              		.loc 1 10540 0
 32996 ed2a 4183E01F 		andl	$31, %r8d
10538:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 32997              		.loc 1 10538 0
 32998 ed2e 83E01F   		andl	$31, %eax
10536:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 32999              		.loc 1 10536 0
 33000 ed31 83E11F   		andl	$31, %ecx
 33001              	.LVL3063:
10538:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33002              		.loc 1 10538 0
 33003 ed34 8B148500 		movl	RF(,%rax,4), %edx
 33003      000000
 33004 ed3b 85D2     		testl	%edx, %edx
 33005 ed3d 7917     		jns	.L1187
10538:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33006              		.loc 1 10538 0 is_stmt 0 discriminator 1
 33007 ed3f 84C9     		testb	%cl, %cl
 33008 ed41 7413     		je	.L1187
 33009              	.LVL3064:
 33010              		.loc 1 10540 0 is_stmt 1
 33011 ed43 4489E0   		movl	%r12d, %eax
 33012 ed46 D3E8     		shrl	%cl, %eax
 33013 ed48 F7D0     		notl	%eax
 33014 ed4a 09D0     		orl	%edx, %eax
 33015 ed4c 42890485 		movl	%eax, RF(,%r8,4)
 33015      00000000 
 33016 ed54 EB0A     		jmp	.L1188
 33017              	.LVL3065:
 33018              	.L1187:
10541:src/vm3.c     **** }
10542:src/vm3.c     **** else {
10543:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
10544:src/vm3.c     **** RF[rd] = (int32_t)RF[rt] >> shamt;
 33019              		.loc 1 10544 0
 33020 ed56 D3FA     		sarl	%cl, %edx
 33021 ed58 42891485 		movl	%edx, RF(,%r8,4)
 33021      00000000 
 33022              	.LVL3066:
 33023              	.L1188:
10545:src/vm3.c     **** }
10546:src/vm3.c     **** PC  =  nPC;
10547:src/vm3.c     **** nPC  += 4;
10548:src/vm3.c     **** 
10549:src/vm3.c     **** #if INDIRECT_DEBUG
10550:src/vm3.c     **** printf("%d|addu\n",counter);
10551:src/vm3.c     **** counter++;
10552:src/vm3.c     **** #endif
10553:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10554:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33024              		.loc 1 10554 0
 33025 ed60 89D8     		movl	%ebx, %eax
10555:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33026              		.loc 1 10555 0
GAS LISTING /tmp/cc15eBE3.s 			page 1094


 33027 ed62 89DA     		movl	%ebx, %edx
10553:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33028              		.loc 1 10553 0
 33029 ed64 C1EB15   		shrl	$21, %ebx
 33030              	.LVL3067:
10554:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33031              		.loc 1 10554 0
 33032 ed67 C1E810   		shrl	$16, %eax
 33033              	.LVL3068:
10556:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 33034              		.loc 1 10556 0
 33035 ed6a 83E31F   		andl	$31, %ebx
10555:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 33036              		.loc 1 10555 0
 33037 ed6d C1EA0B   		shrl	$11, %edx
 33038              	.LVL3069:
 33039              		.loc 1 10556 0
 33040 ed70 83E01F   		andl	$31, %eax
10547:src/vm3.c     **** 
 33041              		.loc 1 10547 0
 33042 ed73 83050000 		addl	$4, nPC(%rip)
 33042      000004
 33043              		.loc 1 10556 0
 33044 ed7a 83E21F   		andl	$31, %edx
 33045 ed7d 8B048500 		movl	RF(,%rax,4), %eax
 33045      000000
 33046 ed84 03049D00 		addl	RF(,%rbx,4), %eax
 33046      000000
 33047 ed8b 89049500 		movl	%eax, RF(,%rdx,4)
 33047      000000
10557:src/vm3.c     **** PC  =  nPC;
 33048              		.loc 1 10557 0
 33049 ed92 8B050000 		movl	nPC(%rip), %eax
 33049      0000
10558:src/vm3.c     **** nPC  += 4;
10559:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33050              		.loc 1 10559 0
 33051 ed98 8D5003   		leal	3(%rax), %edx
10558:src/vm3.c     **** nPC  += 4;
 33052              		.loc 1 10558 0
 33053 ed9b 8D4804   		leal	4(%rax), %ecx
 33054              	.LVL3070:
10557:src/vm3.c     **** PC  =  nPC;
 33055              		.loc 1 10557 0
 33056 ed9e 89050000 		movl	%eax, PC(%rip)
 33056      0000
 33057              		.loc 1 10559 0
 33058 eda4 440FB682 		movzbl	VM_memory(%rdx), %r8d
 33058      00000000 
 33059 edac 89C2     		movl	%eax, %edx
10560:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10561:src/vm3.c     ****   if (op0 == 0x0) {
10562:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10563:src/vm3.c     ****     op0 = op0 + funct;
10564:src/vm3.c     ****   }
10565:src/vm3.c     ****     else {
10566:src/vm3.c     ****     op0 = op0 + FIX_OP;
GAS LISTING /tmp/cc15eBE3.s 			page 1095


10567:src/vm3.c     ****   }
10568:src/vm3.c     **** 
10569:src/vm3.c     **** p = array;
10570:src/vm3.c     **** p = p[op0].next_level;
10571:src/vm3.c     **** 
10572:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33060              		.loc 1 10572 0
 33061 edae 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33061      000000
10559:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33062              		.loc 1 10559 0
 33063 edb5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33063      000000
10558:src/vm3.c     **** nPC  += 4;
 33064              		.loc 1 10558 0
 33065 edbc 890D0000 		movl	%ecx, nPC(%rip)
 33065      0000
 33066              		.loc 1 10572 0
 33067 edc2 8D4805   		leal	5(%rax), %ecx
 33068 edc5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33068      000000
10559:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33069              		.loc 1 10559 0
 33070 edcc C1E218   		sall	$24, %edx
 33071 edcf 4109D0   		orl	%edx, %r8d
 33072 edd2 8D5001   		leal	1(%rax), %edx
 33073 edd5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33073      000000
 33074 eddc C1E210   		sall	$16, %edx
 33075 eddf 4109D0   		orl	%edx, %r8d
 33076 ede2 8D5002   		leal	2(%rax), %edx
 33077 ede5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33077      000000
 33078 edec C1E208   		sall	$8, %edx
 33079 edef 4109D0   		orl	%edx, %r8d
 33080              	.LVL3071:
10560:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33081              		.loc 1 10560 0
 33082 edf2 4489C6   		movl	%r8d, %esi
10562:src/vm3.c     ****     op0 = op0 + funct;
 33083              		.loc 1 10562 0
 33084 edf5 4488C2   		movb	%r8b, %dl
10560:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33085              		.loc 1 10560 0
 33086 edf8 C1EE1A   		shrl	$26, %esi
 33087              	.LVL3072:
10562:src/vm3.c     ****     op0 = op0 + funct;
 33088              		.loc 1 10562 0
 33089 edfb 83E23F   		andl	$63, %edx
 33090 edfe 8D7E2B   		leal	43(%rsi), %edi
 33091 ee01 4084F6   		testb	%sil, %sil
 33092 ee04 0F45D7   		cmovne	%edi, %edx
 33093              	.LVL3073:
 33094              		.loc 1 10572 0
 33095 ee07 C1E110   		sall	$16, %ecx
 33096 ee0a C1E318   		sall	$24, %ebx
 33097 ee0d 09CB     		orl	%ecx, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1096


 33098 ee0f 8D4807   		leal	7(%rax), %ecx
 33099 ee12 83C006   		addl	$6, %eax
 33100 ee15 0FB68000 		movzbl	VM_memory(%rax), %eax
 33100      000000
10570:src/vm3.c     **** 
 33101              		.loc 1 10570 0
 33102 ee1c 0FB6D2   		movzbl	%dl, %edx
 33103              		.loc 1 10572 0
 33104 ee1f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33104      000000
10570:src/vm3.c     **** 
 33105              		.loc 1 10570 0
 33106 ee26 48C1E204 		salq	$4, %rdx
 33107              	.LVL3074:
 33108              		.loc 1 10572 0
 33109 ee2a C1E008   		sall	$8, %eax
 33110 ee2d 09CB     		orl	%ecx, %ebx
 33111 ee2f 09C3     		orl	%eax, %ebx
 33112              	.LVL3075:
10573:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33113              		.loc 1 10573 0
 33114 ee31 89D9     		movl	%ebx, %ecx
10574:src/vm3.c     ****   if (op1 == 0x0) {
10575:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33115              		.loc 1 10575 0
 33116 ee33 88D8     		movb	%bl, %al
10573:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33117              		.loc 1 10573 0
 33118 ee35 C1E91A   		shrl	$26, %ecx
 33119              	.LVL3076:
 33120              		.loc 1 10575 0
 33121 ee38 83E03F   		andl	$63, %eax
 33122 ee3b 8D712B   		leal	43(%rcx), %esi
 33123 ee3e 84C9     		testb	%cl, %cl
 33124 ee40 0F45C6   		cmovne	%esi, %eax
 33125              	.LVL3077:
10576:src/vm3.c     ****     op1 = op1 + funct;
10577:src/vm3.c     ****   }
10578:src/vm3.c     ****     else {
10579:src/vm3.c     ****     op1 = op1 + FIX_OP;
10580:src/vm3.c     ****   }
10581:src/vm3.c     **** 
10582:src/vm3.c     **** goto *p[op1].code;
 33126              		.loc 1 10582 0
 33127 ee43 0FB6C0   		movzbl	%al, %eax
 33128 ee46 48C1E004 		salq	$4, %rax
 33129              	.LVL3078:
 33130 ee4a 48038414 		addq	58088(%rsp,%rdx), %rax
 33130      E8E20000 
 33131 ee52 488B08   		movq	(%rax), %rcx
 33132 ee55 E9FE1EFF 		jmp	.L269
 33132      FF
 33133              	.LVL3079:
 33134              	.L51:
10583:src/vm3.c     **** 
10584:src/vm3.c     **** 
10585:src/vm3.c     **** adduPLUSerror:
GAS LISTING /tmp/cc15eBE3.s 			page 1097


10586:src/vm3.c     **** #if INDIRECT_DEBUG
10587:src/vm3.c     **** printf("%d|addu\n",counter);
10588:src/vm3.c     **** counter++;
10589:src/vm3.c     **** #endif
10590:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10591:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33135              		.loc 1 10591 0
 33136 ee5a 4489C0   		movl	%r8d, %eax
10592:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33137              		.loc 1 10592 0
 33138 ee5d 4489C2   		movl	%r8d, %edx
10590:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33139              		.loc 1 10590 0
 33140 ee60 41C1E815 		shrl	$21, %r8d
 33141              	.LVL3080:
10591:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33142              		.loc 1 10591 0
 33143 ee64 C1E810   		shrl	$16, %eax
 33144              	.LVL3081:
10593:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 33145              		.loc 1 10593 0
 33146 ee67 4183E01F 		andl	$31, %r8d
10592:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 33147              		.loc 1 10592 0
 33148 ee6b C1EA0B   		shrl	$11, %edx
 33149              	.LVL3082:
 33150              		.loc 1 10593 0
 33151 ee6e 83E01F   		andl	$31, %eax
 33152 ee71 83E21F   		andl	$31, %edx
 33153 ee74 8B048500 		movl	RF(,%rax,4), %eax
 33153      000000
 33154 ee7b 42030485 		addl	RF(,%r8,4), %eax
 33154      00000000 
 33155 ee83 89049500 		movl	%eax, RF(,%rdx,4)
 33155      000000
10594:src/vm3.c     **** PC  =  nPC;
10595:src/vm3.c     **** nPC  += 4;
 33156              		.loc 1 10595 0
 33157 ee8a 8B050000 		movl	nPC(%rip), %eax
 33157      0000
 33158 ee90 8D5004   		leal	4(%rax), %edx
10596:src/vm3.c     **** 
10597:src/vm3.c     **** #if INDIRECT_DEBUG
10598:src/vm3.c     **** printf("Error, unknown instr1uction %d.\n", instr1);
10599:src/vm3.c     **** #endif
10600:src/vm3.c     **** PC  =  nPC;
10601:src/vm3.c     **** nPC  += 4;
10602:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33159              		.loc 1 10602 0
 33160 ee93 8D7007   		leal	7(%rax), %esi
10601:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33161              		.loc 1 10601 0
 33162 ee96 8D4808   		leal	8(%rax), %ecx
10600:src/vm3.c     **** nPC  += 4;
 33163              		.loc 1 10600 0
 33164 ee99 89150000 		movl	%edx, PC(%rip)
 33164      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1098


 33165              		.loc 1 10602 0
 33166 ee9f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33166      000000
 33167 eea6 440FB686 		movzbl	VM_memory(%rsi), %r8d
 33167      00000000 
10603:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10604:src/vm3.c     ****   if (op0 == 0x0) {
10605:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10606:src/vm3.c     ****     op0 = op0 + funct;
10607:src/vm3.c     ****   }
10608:src/vm3.c     ****     else {
10609:src/vm3.c     ****     op0 = op0 + FIX_OP;
10610:src/vm3.c     ****   }
10611:src/vm3.c     **** 
10612:src/vm3.c     **** p = array;
10613:src/vm3.c     **** p = p[op0].next_level;
10614:src/vm3.c     **** 
10615:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33168              		.loc 1 10615 0
 33169 eeae 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33169      000000
 33170              	.LVL3083:
10601:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33171              		.loc 1 10601 0
 33172 eeb5 890D0000 		movl	%ecx, nPC(%rip)
 33172      0000
 33173              		.loc 1 10615 0
 33174 eebb 8D4809   		leal	9(%rax), %ecx
10602:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33175              		.loc 1 10602 0
 33176 eebe C1E218   		sall	$24, %edx
 33177              		.loc 1 10615 0
 33178 eec1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33178      000000
10602:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33179              		.loc 1 10602 0
 33180 eec8 4109D0   		orl	%edx, %r8d
 33181 eecb 8D5005   		leal	5(%rax), %edx
 33182 eece 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33182      000000
 33183 eed5 C1E210   		sall	$16, %edx
 33184 eed8 4109D0   		orl	%edx, %r8d
 33185 eedb 8D5006   		leal	6(%rax), %edx
 33186 eede 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33186      000000
 33187 eee5 C1E208   		sall	$8, %edx
 33188 eee8 4109D0   		orl	%edx, %r8d
 33189              	.LVL3084:
10603:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33190              		.loc 1 10603 0
 33191 eeeb 4489C6   		movl	%r8d, %esi
10605:src/vm3.c     ****     op0 = op0 + funct;
 33192              		.loc 1 10605 0
 33193 eeee 4488C2   		movb	%r8b, %dl
10603:src/vm3.c     ****   if (op0 == 0x0) {
 33194              		.loc 1 10603 0
 33195 eef1 C1EE1A   		shrl	$26, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 1099


 33196              	.LVL3085:
10605:src/vm3.c     ****     op0 = op0 + funct;
 33197              		.loc 1 10605 0
 33198 eef4 83E23F   		andl	$63, %edx
 33199 eef7 8D7E2B   		leal	43(%rsi), %edi
 33200 eefa 4084F6   		testb	%sil, %sil
 33201 eefd 0F45D7   		cmovne	%edi, %edx
 33202              	.LVL3086:
 33203              		.loc 1 10615 0
 33204 ef00 C1E110   		sall	$16, %ecx
 33205 ef03 C1E318   		sall	$24, %ebx
 33206 ef06 09CB     		orl	%ecx, %ebx
 33207 ef08 8D480B   		leal	11(%rax), %ecx
 33208 ef0b 83C00A   		addl	$10, %eax
 33209 ef0e 0FB68000 		movzbl	VM_memory(%rax), %eax
 33209      000000
10613:src/vm3.c     **** 
 33210              		.loc 1 10613 0
 33211 ef15 0FB6D2   		movzbl	%dl, %edx
 33212              		.loc 1 10615 0
 33213 ef18 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33213      000000
10613:src/vm3.c     **** 
 33214              		.loc 1 10613 0
 33215 ef1f 48C1E204 		salq	$4, %rdx
 33216              	.LVL3087:
 33217              		.loc 1 10615 0
 33218 ef23 C1E008   		sall	$8, %eax
 33219 ef26 09CB     		orl	%ecx, %ebx
 33220 ef28 09C3     		orl	%eax, %ebx
 33221              	.LVL3088:
10616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33222              		.loc 1 10616 0
 33223 ef2a 89D9     		movl	%ebx, %ecx
10617:src/vm3.c     ****   if (op1 == 0x0) {
10618:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33224              		.loc 1 10618 0
 33225 ef2c 88D8     		movb	%bl, %al
10616:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33226              		.loc 1 10616 0
 33227 ef2e C1E91A   		shrl	$26, %ecx
 33228              	.LVL3089:
 33229              		.loc 1 10618 0
 33230 ef31 83E03F   		andl	$63, %eax
 33231 ef34 8D712B   		leal	43(%rcx), %esi
 33232 ef37 84C9     		testb	%cl, %cl
 33233 ef39 0F45C6   		cmovne	%esi, %eax
 33234              	.LVL3090:
10619:src/vm3.c     ****     op1 = op1 + funct;
10620:src/vm3.c     ****   }
10621:src/vm3.c     ****     else {
10622:src/vm3.c     ****     op1 = op1 + FIX_OP;
10623:src/vm3.c     ****   }
10624:src/vm3.c     **** 
10625:src/vm3.c     **** goto *p[op1].code;
 33235              		.loc 1 10625 0
 33236 ef3c 0FB6C0   		movzbl	%al, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1100


 33237 ef3f 48C1E004 		salq	$4, %rax
 33238              	.LVL3091:
 33239 ef43 48038414 		addq	58088(%rsp,%rdx), %rax
 33239      E8E20000 
 33240 ef4b 488B08   		movq	(%rax), %rcx
 33241 ef4e E9051EFF 		jmp	.L269
 33241      FF
 33242              	.LVL3092:
 33243              	.L204:
10626:src/vm3.c     **** 
10627:src/vm3.c     **** 
10628:src/vm3.c     **** jrPLUSsll:
10629:src/vm3.c     **** #if INDIRECT_DEBUG
10630:src/vm3.c     **** printf("%d|jr\n",counter);
10631:src/vm3.c     **** counter++;
10632:src/vm3.c     **** #endif
10633:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10634:src/vm3.c     **** PC = nPC;
 33244              		.loc 1 10634 0
 33245 ef53 8B150000 		movl	nPC(%rip), %edx
 33245      0000
10633:src/vm3.c     **** PC = nPC;
 33246              		.loc 1 10633 0
 33247 ef59 41C1E815 		shrl	$21, %r8d
 33248              	.LVL3093:
10635:src/vm3.c     **** nPC = RF[rs];
 33249              		.loc 1 10635 0
 33250 ef5d 4183E01F 		andl	$31, %r8d
 33251 ef61 428B0485 		movl	RF(,%r8,4), %eax
 33251      00000000 
10636:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33252              		.loc 1 10636 0
 33253 ef69 8D4A03   		leal	3(%rdx), %ecx
10634:src/vm3.c     **** nPC = RF[rs];
 33254              		.loc 1 10634 0
 33255 ef6c 89150000 		movl	%edx, PC(%rip)
 33255      0000
 33256              		.loc 1 10636 0
 33257 ef72 440FB681 		movzbl	VM_memory(%rcx), %r8d
 33257      00000000 
 33258 ef7a 89D1     		movl	%edx, %ecx
10635:src/vm3.c     **** nPC = RF[rs];
 33259              		.loc 1 10635 0
 33260 ef7c 89050000 		movl	%eax, nPC(%rip)
 33260      0000
 33261              		.loc 1 10636 0
 33262 ef82 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33262      000000
 33263 ef89 C1E118   		sall	$24, %ecx
 33264 ef8c 4109C8   		orl	%ecx, %r8d
 33265 ef8f 8D4A01   		leal	1(%rdx), %ecx
 33266 ef92 83C202   		addl	$2, %edx
 33267 ef95 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33267      000000
 33268 ef9c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33268      000000
 33269 efa3 C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1101


 33270 efa6 C1E110   		sall	$16, %ecx
 33271 efa9 4109C8   		orl	%ecx, %r8d
 33272 efac 4109D0   		orl	%edx, %r8d
 33273              	.LVL3094:
10637:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33274              		.loc 1 10637 0
 33275 efaf 4489C1   		movl	%r8d, %ecx
10638:src/vm3.c     ****   if (op0 == 0x0) {
10639:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 33276              		.loc 1 10639 0
 33277 efb2 4488C2   		movb	%r8b, %dl
10637:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33278              		.loc 1 10637 0
 33279 efb5 C1E91A   		shrl	$26, %ecx
 33280              	.LVL3095:
 33281              		.loc 1 10639 0
 33282 efb8 83E23F   		andl	$63, %edx
 33283 efbb 8D712B   		leal	43(%rcx), %esi
 33284 efbe 84C9     		testb	%cl, %cl
10640:src/vm3.c     ****     op0 = op0 + funct;
10641:src/vm3.c     ****   }
10642:src/vm3.c     ****     else {
10643:src/vm3.c     ****     op0 = op0 + FIX_OP;
10644:src/vm3.c     ****   }
10645:src/vm3.c     **** 
10646:src/vm3.c     **** p = array;
10647:src/vm3.c     **** p = p[op0].next_level;
10648:src/vm3.c     **** 
10649:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33285              		.loc 1 10649 0
 33286 efc0 8D4803   		leal	3(%rax), %ecx
 33287              	.LVL3096:
 33288 efc3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33288      000000
 33289              	.LVL3097:
 33290 efca 89C1     		movl	%eax, %ecx
10639:src/vm3.c     ****     op0 = op0 + funct;
 33291              		.loc 1 10639 0
 33292 efcc 0F45D6   		cmovne	%esi, %edx
 33293              	.LVL3098:
 33294              		.loc 1 10649 0
 33295 efcf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33295      000000
10647:src/vm3.c     **** 
 33296              		.loc 1 10647 0
 33297 efd6 0FB6D2   		movzbl	%dl, %edx
 33298 efd9 48C1E204 		salq	$4, %rdx
 33299              	.LVL3099:
 33300              		.loc 1 10649 0
 33301 efdd C1E118   		sall	$24, %ecx
 33302 efe0 09CB     		orl	%ecx, %ebx
 33303 efe2 8D4801   		leal	1(%rax), %ecx
 33304 efe5 83C002   		addl	$2, %eax
 33305 efe8 0FB68000 		movzbl	VM_memory(%rax), %eax
 33305      000000
 33306 efef 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33306      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1102


 33307 eff6 C1E008   		sall	$8, %eax
 33308 eff9 C1E110   		sall	$16, %ecx
 33309 effc 09CB     		orl	%ecx, %ebx
 33310 effe 09C3     		orl	%eax, %ebx
 33311              	.LVL3100:
10650:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33312              		.loc 1 10650 0
 33313 f000 89D9     		movl	%ebx, %ecx
10651:src/vm3.c     ****   if (op1 == 0x0) {
10652:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33314              		.loc 1 10652 0
 33315 f002 88D8     		movb	%bl, %al
10650:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33316              		.loc 1 10650 0
 33317 f004 C1E91A   		shrl	$26, %ecx
 33318              	.LVL3101:
 33319              		.loc 1 10652 0
 33320 f007 83E03F   		andl	$63, %eax
 33321 f00a 8D712B   		leal	43(%rcx), %esi
 33322 f00d 84C9     		testb	%cl, %cl
 33323 f00f 0F45C6   		cmovne	%esi, %eax
 33324              	.LVL3102:
10653:src/vm3.c     ****     op1 = op1 + funct;
10654:src/vm3.c     ****   }
10655:src/vm3.c     ****     else {
10656:src/vm3.c     ****     op1 = op1 + FIX_OP;
10657:src/vm3.c     ****   }
10658:src/vm3.c     **** 
10659:src/vm3.c     **** goto *p[op1].code;
 33325              		.loc 1 10659 0
 33326 f012 0FB6C0   		movzbl	%al, %eax
 33327 f015 48C1E004 		salq	$4, %rax
 33328              	.LVL3103:
 33329 f019 48038414 		addq	58088(%rsp,%rdx), %rax
 33329      E8E20000 
 33330 f021 488B08   		movq	(%rax), %rcx
 33331 f024 E92F1DFF 		jmp	.L269
 33331      FF
 33332              	.LVL3104:
 33333              	.L139:
10660:src/vm3.c     **** 
10661:src/vm3.c     **** 
10662:src/vm3.c     **** 
10663:src/vm3.c     **** #if INDIRECT_DEBUG
10664:src/vm3.c     **** printf("%d|sll\n",counter);
10665:src/vm3.c     **** counter++;
10666:src/vm3.c     **** #endif
10667:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
10668:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10669:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
10670:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
10671:src/vm3.c     **** PC  =  nPC;
10672:src/vm3.c     **** nPC  += 4;
10673:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10674:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10675:src/vm3.c     ****   if (op0 == 0x0) {
10676:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1103


10677:src/vm3.c     ****     op0 = op0 + funct;
10678:src/vm3.c     ****   }
10679:src/vm3.c     ****     else {
10680:src/vm3.c     ****     op0 = op0 + FIX_OP;
10681:src/vm3.c     ****   }
10682:src/vm3.c     **** 
10683:src/vm3.c     **** p = array;
10684:src/vm3.c     **** p = p[op0].next_level;
10685:src/vm3.c     **** 
10686:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10687:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10688:src/vm3.c     ****   if (op1 == 0x0) {
10689:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10690:src/vm3.c     ****     op1 = op1 + funct;
10691:src/vm3.c     ****   }
10692:src/vm3.c     ****     else {
10693:src/vm3.c     ****     op1 = op1 + FIX_OP;
10694:src/vm3.c     ****   }
10695:src/vm3.c     **** 
10696:src/vm3.c     **** goto *p[op1].code;
10697:src/vm3.c     **** 
10698:src/vm3.c     **** 
10699:src/vm3.c     **** addiuPLUSxor:
10700:src/vm3.c     **** #if INDIRECT_DEBUG
10701:src/vm3.c     **** printf("%d|addiu\n",counter);
10702:src/vm3.c     **** counter++;
10703:src/vm3.c     **** #endif
10704:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 33334              		.loc 1 10704 0
 33335 f029 4489C2   		movl	%r8d, %edx
10705:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33336              		.loc 1 10705 0
 33337 f02c 4489C0   		movl	%r8d, %eax
10706:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
10707:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 33338              		.loc 1 10707 0
 33339 f02f 450FBFC0 		movswl	%r8w, %r8d
 33340              	.LVL3105:
10704:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33341              		.loc 1 10704 0
 33342 f033 C1EA15   		shrl	$21, %edx
10705:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33343              		.loc 1 10705 0
 33344 f036 C1E810   		shrl	$16, %eax
 33345              	.LVL3106:
10708:src/vm3.c     **** PC  =  nPC;
10709:src/vm3.c     **** nPC  += 4;
 33346              		.loc 1 10709 0
 33347 f039 83050000 		addl	$4, nPC(%rip)
 33347      000004
 33348              	.LVL3107:
10707:src/vm3.c     **** PC  =  nPC;
 33349              		.loc 1 10707 0
 33350 f040 83E21F   		andl	$31, %edx
 33351 f043 83E01F   		andl	$31, %eax
 33352 f046 44030495 		addl	RF(,%rdx,4), %r8d
 33352      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 1104


 33353              	.LVL3108:
10710:src/vm3.c     **** 
10711:src/vm3.c     **** #if INDIRECT_DEBUG
10712:src/vm3.c     **** printf("%d|xor\n",counter);
10713:src/vm3.c     **** counter++;
10714:src/vm3.c     **** #endif
10715:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10716:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10717:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33354              		.loc 1 10717 0
 33355 f04e 89DA     		movl	%ebx, %edx
 33356 f050 C1EA0B   		shrl	$11, %edx
10718:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 33357              		.loc 1 10718 0
 33358 f053 83E21F   		andl	$31, %edx
10707:src/vm3.c     **** PC  =  nPC;
 33359              		.loc 1 10707 0
 33360 f056 44890485 		movl	%r8d, RF(,%rax,4)
 33360      00000000 
10716:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33361              		.loc 1 10716 0
 33362 f05e 89D8     		movl	%ebx, %eax
10715:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33363              		.loc 1 10715 0
 33364 f060 C1EB15   		shrl	$21, %ebx
 33365              	.LVL3109:
10716:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33366              		.loc 1 10716 0
 33367 f063 C1E810   		shrl	$16, %eax
 33368              	.LVL3110:
 33369              		.loc 1 10718 0
 33370 f066 83E31F   		andl	$31, %ebx
 33371 f069 83E01F   		andl	$31, %eax
 33372 f06c 8B048500 		movl	RF(,%rax,4), %eax
 33372      000000
 33373 f073 33049D00 		xorl	RF(,%rbx,4), %eax
 33373      000000
 33374 f07a 89049500 		movl	%eax, RF(,%rdx,4)
 33374      000000
10719:src/vm3.c     **** PC  =  nPC;
 33375              		.loc 1 10719 0
 33376 f081 8B050000 		movl	nPC(%rip), %eax
 33376      0000
10720:src/vm3.c     **** nPC  += 4;
10721:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33377              		.loc 1 10721 0
 33378 f087 8D5003   		leal	3(%rax), %edx
10720:src/vm3.c     **** nPC  += 4;
 33379              		.loc 1 10720 0
 33380 f08a 8D4804   		leal	4(%rax), %ecx
10719:src/vm3.c     **** PC  =  nPC;
 33381              		.loc 1 10719 0
 33382 f08d 89050000 		movl	%eax, PC(%rip)
 33382      0000
 33383              		.loc 1 10721 0
 33384 f093 440FB682 		movzbl	VM_memory(%rdx), %r8d
 33384      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 1105


 33385 f09b 89C2     		movl	%eax, %edx
10722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10723:src/vm3.c     ****   if (op0 == 0x0) {
10724:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10725:src/vm3.c     ****     op0 = op0 + funct;
10726:src/vm3.c     ****   }
10727:src/vm3.c     ****     else {
10728:src/vm3.c     ****     op0 = op0 + FIX_OP;
10729:src/vm3.c     ****   }
10730:src/vm3.c     **** 
10731:src/vm3.c     **** p = array;
10732:src/vm3.c     **** p = p[op0].next_level;
10733:src/vm3.c     **** 
10734:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33386              		.loc 1 10734 0
 33387 f09d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33387      000000
10721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33388              		.loc 1 10721 0
 33389 f0a4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33389      000000
10720:src/vm3.c     **** nPC  += 4;
 33390              		.loc 1 10720 0
 33391 f0ab 890D0000 		movl	%ecx, nPC(%rip)
 33391      0000
 33392              		.loc 1 10734 0
 33393 f0b1 8D4805   		leal	5(%rax), %ecx
 33394 f0b4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33394      000000
10721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33395              		.loc 1 10721 0
 33396 f0bb C1E218   		sall	$24, %edx
 33397 f0be 4109D0   		orl	%edx, %r8d
 33398 f0c1 8D5001   		leal	1(%rax), %edx
 33399 f0c4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33399      000000
 33400 f0cb C1E210   		sall	$16, %edx
 33401 f0ce 4109D0   		orl	%edx, %r8d
 33402 f0d1 8D5002   		leal	2(%rax), %edx
 33403 f0d4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33403      000000
 33404 f0db C1E208   		sall	$8, %edx
 33405 f0de 4109D0   		orl	%edx, %r8d
 33406              	.LVL3111:
10722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33407              		.loc 1 10722 0
 33408 f0e1 4489C6   		movl	%r8d, %esi
10724:src/vm3.c     ****     op0 = op0 + funct;
 33409              		.loc 1 10724 0
 33410 f0e4 4488C2   		movb	%r8b, %dl
10722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33411              		.loc 1 10722 0
 33412 f0e7 C1EE1A   		shrl	$26, %esi
 33413              	.LVL3112:
10724:src/vm3.c     ****     op0 = op0 + funct;
 33414              		.loc 1 10724 0
 33415 f0ea 83E23F   		andl	$63, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1106


 33416 f0ed 8D7E2B   		leal	43(%rsi), %edi
 33417 f0f0 4084F6   		testb	%sil, %sil
 33418 f0f3 0F45D7   		cmovne	%edi, %edx
 33419              	.LVL3113:
 33420              		.loc 1 10734 0
 33421 f0f6 C1E110   		sall	$16, %ecx
 33422 f0f9 C1E318   		sall	$24, %ebx
 33423 f0fc 09CB     		orl	%ecx, %ebx
 33424 f0fe 8D4807   		leal	7(%rax), %ecx
 33425 f101 83C006   		addl	$6, %eax
 33426 f104 0FB68000 		movzbl	VM_memory(%rax), %eax
 33426      000000
10732:src/vm3.c     **** 
 33427              		.loc 1 10732 0
 33428 f10b 0FB6D2   		movzbl	%dl, %edx
 33429              		.loc 1 10734 0
 33430 f10e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33430      000000
10732:src/vm3.c     **** 
 33431              		.loc 1 10732 0
 33432 f115 48C1E204 		salq	$4, %rdx
 33433              	.LVL3114:
 33434              		.loc 1 10734 0
 33435 f119 C1E008   		sall	$8, %eax
 33436 f11c 09CB     		orl	%ecx, %ebx
 33437 f11e 09C3     		orl	%eax, %ebx
 33438              	.LVL3115:
10735:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33439              		.loc 1 10735 0
 33440 f120 89D9     		movl	%ebx, %ecx
10736:src/vm3.c     ****   if (op1 == 0x0) {
10737:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33441              		.loc 1 10737 0
 33442 f122 88D8     		movb	%bl, %al
10735:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33443              		.loc 1 10735 0
 33444 f124 C1E91A   		shrl	$26, %ecx
 33445              	.LVL3116:
 33446              		.loc 1 10737 0
 33447 f127 83E03F   		andl	$63, %eax
 33448 f12a 8D712B   		leal	43(%rcx), %esi
 33449 f12d 84C9     		testb	%cl, %cl
 33450 f12f 0F45C6   		cmovne	%esi, %eax
 33451              	.LVL3117:
10738:src/vm3.c     ****     op1 = op1 + funct;
10739:src/vm3.c     ****   }
10740:src/vm3.c     ****     else {
10741:src/vm3.c     ****     op1 = op1 + FIX_OP;
10742:src/vm3.c     ****   }
10743:src/vm3.c     **** 
10744:src/vm3.c     **** goto *p[op1].code;
 33452              		.loc 1 10744 0
 33453 f132 0FB6C0   		movzbl	%al, %eax
 33454 f135 48C1E004 		salq	$4, %rax
 33455              	.LVL3118:
 33456 f139 48038414 		addq	58088(%rsp,%rdx), %rax
 33456      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 1107


 33457 f141 488B08   		movq	(%rax), %rcx
 33458 f144 E90F1CFF 		jmp	.L269
 33458      FF
 33459              	.LVL3119:
 33460              	.L228:
10745:src/vm3.c     **** 
10746:src/vm3.c     **** 
10747:src/vm3.c     **** oriPLUSmult:
10748:src/vm3.c     **** #if INDIRECT_DEBUG
10749:src/vm3.c     **** printf("%d|ori\n",counter);
10750:src/vm3.c     **** counter++;
10751:src/vm3.c     **** #endif
10752:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 33461              		.loc 1 10752 0
 33462 f149 4489C2   		movl	%r8d, %edx
10753:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33463              		.loc 1 10753 0
 33464 f14c 4489C0   		movl	%r8d, %eax
10754:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
10755:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
 33465              		.loc 1 10755 0
 33466 f14f 450FBFC0 		movswl	%r8w, %r8d
 33467              	.LVL3120:
10752:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33468              		.loc 1 10752 0
 33469 f153 C1EA15   		shrl	$21, %edx
10753:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33470              		.loc 1 10753 0
 33471 f156 C1E810   		shrl	$16, %eax
 33472              	.LVL3121:
10756:src/vm3.c     **** PC  =  nPC;
10757:src/vm3.c     **** nPC  += 4;
10758:src/vm3.c     **** 
10759:src/vm3.c     **** #if INDIRECT_DEBUG
10760:src/vm3.c     **** printf("%d|mult\n",counter);
10761:src/vm3.c     **** counter++;
10762:src/vm3.c     **** #endif
10763:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10764:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33473              		.loc 1 10764 0
 33474 f159 89D9     		movl	%ebx, %ecx
10755:src/vm3.c     **** PC  =  nPC;
 33475              		.loc 1 10755 0
 33476 f15b 83E21F   		andl	$31, %edx
 33477 f15e 83E01F   		andl	$31, %eax
 33478              		.loc 1 10764 0
 33479 f161 C1E910   		shrl	$16, %ecx
10755:src/vm3.c     **** PC  =  nPC;
 33480              		.loc 1 10755 0
 33481 f164 440B0495 		orl	RF(,%rdx,4), %r8d
 33481      00000000 
 33482              	.LVL3122:
10763:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33483              		.loc 1 10763 0
 33484 f16c C1EB15   		shrl	$21, %ebx
 33485              	.LVL3123:
10765:src/vm3.c     **** mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
GAS LISTING /tmp/cc15eBE3.s 			page 1108


 33486              		.loc 1 10765 0
 33487 f16f 83E11F   		andl	$31, %ecx
 33488 f172 83E31F   		andl	$31, %ebx
10755:src/vm3.c     **** PC  =  nPC;
 33489              		.loc 1 10755 0
 33490 f175 44890485 		movl	%r8d, RF(,%rax,4)
 33490      00000000 
10757:src/vm3.c     **** 
 33491              		.loc 1 10757 0
 33492 f17d 8B050000 		movl	nPC(%rip), %eax
 33492      0000
 33493              		.loc 1 10765 0
 33494 f183 448B348D 		movl	RF(,%rcx,4), %r14d
 33494      00000000 
 33495              	.LVL3124:
 33496 f18b 8B0C9D00 		movl	RF(,%rbx,4), %ecx
 33496      000000
10757:src/vm3.c     **** 
 33497              		.loc 1 10757 0
 33498 f192 8D5004   		leal	4(%rax), %edx
10766:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
10767:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
10768:src/vm3.c     **** PC  =  nPC;
10769:src/vm3.c     **** nPC  += 4;
10770:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33499              		.loc 1 10770 0
 33500 f195 8D7007   		leal	7(%rax), %esi
10768:src/vm3.c     **** nPC  += 4;
 33501              		.loc 1 10768 0
 33502 f198 89150000 		movl	%edx, PC(%rip)
 33502      0000
 33503              		.loc 1 10770 0
 33504 f19e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33504      000000
 33505 f1a5 440FB686 		movzbl	VM_memory(%rsi), %r8d
 33505      00000000 
10765:src/vm3.c     **** HI = (mult >> 32) & 0xFFFFFFFF;
 33506              		.loc 1 10765 0
 33507 f1ad 4C0FAFF1 		imulq	%rcx, %r14
 33508              	.LVL3125:
10769:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33509              		.loc 1 10769 0
 33510 f1b1 8D4808   		leal	8(%rax), %ecx
 33511              		.loc 1 10770 0
 33512 f1b4 C1E218   		sall	$24, %edx
10771:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10772:src/vm3.c     ****   if (op0 == 0x0) {
10773:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10774:src/vm3.c     ****     op0 = op0 + funct;
10775:src/vm3.c     ****   }
10776:src/vm3.c     ****     else {
10777:src/vm3.c     ****     op0 = op0 + FIX_OP;
10778:src/vm3.c     ****   }
10779:src/vm3.c     **** 
10780:src/vm3.c     **** p = array;
10781:src/vm3.c     **** p = p[op0].next_level;
10782:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1109


10783:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33513              		.loc 1 10783 0
 33514 f1b7 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33514      000000
10769:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33515              		.loc 1 10769 0
 33516 f1be 890D0000 		movl	%ecx, nPC(%rip)
 33516      0000
10770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33517              		.loc 1 10770 0
 33518 f1c4 4109D0   		orl	%edx, %r8d
 33519 f1c7 8D5005   		leal	5(%rax), %edx
 33520              		.loc 1 10783 0
 33521 f1ca 8D4809   		leal	9(%rax), %ecx
10766:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 33522              		.loc 1 10766 0
 33523 f1cd 4C89F7   		movq	%r14, %rdi
10770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33524              		.loc 1 10770 0
 33525 f1d0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33525      000000
 33526              		.loc 1 10783 0
 33527 f1d7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33527      000000
10766:src/vm3.c     **** LO = mult & 0xFFFFFFFF;
 33528              		.loc 1 10766 0
 33529 f1de 48C1EF20 		shrq	$32, %rdi
 33530 f1e2 4989FD   		movq	%rdi, %r13
 33531              	.LVL3126:
10770:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33532              		.loc 1 10770 0
 33533 f1e5 C1E210   		sall	$16, %edx
 33534 f1e8 4109D0   		orl	%edx, %r8d
 33535 f1eb 8D5006   		leal	6(%rax), %edx
 33536 f1ee 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33536      000000
 33537 f1f5 C1E208   		sall	$8, %edx
 33538 f1f8 4109D0   		orl	%edx, %r8d
 33539              	.LVL3127:
10771:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33540              		.loc 1 10771 0
 33541 f1fb 4489C6   		movl	%r8d, %esi
10773:src/vm3.c     ****     op0 = op0 + funct;
 33542              		.loc 1 10773 0
 33543 f1fe 4488C2   		movb	%r8b, %dl
10771:src/vm3.c     ****   if (op0 == 0x0) {
 33544              		.loc 1 10771 0
 33545 f201 C1EE1A   		shrl	$26, %esi
 33546              	.LVL3128:
10773:src/vm3.c     ****     op0 = op0 + funct;
 33547              		.loc 1 10773 0
 33548 f204 83E23F   		andl	$63, %edx
 33549 f207 8D7E2B   		leal	43(%rsi), %edi
 33550              	.LVL3129:
 33551 f20a 4084F6   		testb	%sil, %sil
 33552 f20d 0F45D7   		cmovne	%edi, %edx
 33553              	.LVL3130:
GAS LISTING /tmp/cc15eBE3.s 			page 1110


 33554              		.loc 1 10783 0
 33555 f210 C1E110   		sall	$16, %ecx
 33556 f213 C1E318   		sall	$24, %ebx
 33557 f216 09CB     		orl	%ecx, %ebx
 33558 f218 8D480B   		leal	11(%rax), %ecx
 33559 f21b 83C00A   		addl	$10, %eax
 33560 f21e 0FB68000 		movzbl	VM_memory(%rax), %eax
 33560      000000
10781:src/vm3.c     **** 
 33561              		.loc 1 10781 0
 33562 f225 0FB6D2   		movzbl	%dl, %edx
 33563              		.loc 1 10783 0
 33564 f228 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33564      000000
10781:src/vm3.c     **** 
 33565              		.loc 1 10781 0
 33566 f22f 48C1E204 		salq	$4, %rdx
 33567              	.LVL3131:
 33568              		.loc 1 10783 0
 33569 f233 C1E008   		sall	$8, %eax
 33570 f236 09CB     		orl	%ecx, %ebx
 33571 f238 09C3     		orl	%eax, %ebx
 33572              	.LVL3132:
10784:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33573              		.loc 1 10784 0
 33574 f23a 89D9     		movl	%ebx, %ecx
10785:src/vm3.c     ****   if (op1 == 0x0) {
10786:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33575              		.loc 1 10786 0
 33576 f23c 88D8     		movb	%bl, %al
10784:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33577              		.loc 1 10784 0
 33578 f23e C1E91A   		shrl	$26, %ecx
 33579              	.LVL3133:
 33580              		.loc 1 10786 0
 33581 f241 83E03F   		andl	$63, %eax
 33582 f244 8D712B   		leal	43(%rcx), %esi
 33583 f247 84C9     		testb	%cl, %cl
 33584 f249 0F45C6   		cmovne	%esi, %eax
 33585              	.LVL3134:
10787:src/vm3.c     ****     op1 = op1 + funct;
10788:src/vm3.c     ****   }
10789:src/vm3.c     ****     else {
10790:src/vm3.c     ****     op1 = op1 + FIX_OP;
10791:src/vm3.c     ****   }
10792:src/vm3.c     **** 
10793:src/vm3.c     **** goto *p[op1].code;
 33586              		.loc 1 10793 0
 33587 f24c 0FB6C0   		movzbl	%al, %eax
 33588 f24f 48C1E004 		salq	$4, %rax
 33589              	.LVL3135:
 33590 f253 48038414 		addq	58088(%rsp,%rdx), %rax
 33590      E8E20000 
 33591 f25b 488B08   		movq	(%rax), %rcx
 33592 f25e E9F51AFF 		jmp	.L269
 33592      FF
 33593              	.LVL3136:
GAS LISTING /tmp/cc15eBE3.s 			page 1111


 33594              	.L203:
10794:src/vm3.c     **** 
10795:src/vm3.c     **** 
10796:src/vm3.c     **** jalPLUSaddiu:
10797:src/vm3.c     **** #if INDIRECT_DEBUG
10798:src/vm3.c     **** printf("%d|jal\n",counter);
10799:src/vm3.c     **** counter++;
10800:src/vm3.c     **** #endif
10801:src/vm3.c     **** RF[31] = PC + 8;
10802:src/vm3.c     **** PC = nPC;
 33595              		.loc 1 10802 0
 33596 f263 8B150000 		movl	nPC(%rip), %edx
 33596      0000
10801:src/vm3.c     **** PC = nPC;
 33597              		.loc 1 10801 0
 33598 f269 8B050000 		movl	PC(%rip), %eax
 33598      0000
10803:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 33599              		.loc 1 10803 0
 33600 f26f 4181E0FF 		andl	$67108863, %r8d
 33600      FFFF03
 33601              	.LVL3137:
10804:src/vm3.c     **** nPC = address << 2;
10805:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33602              		.loc 1 10805 0
 33603 f276 8D4A03   		leal	3(%rdx), %ecx
10801:src/vm3.c     **** PC = nPC;
 33604              		.loc 1 10801 0
 33605 f279 83C008   		addl	$8, %eax
10802:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 33606              		.loc 1 10802 0
 33607 f27c 89150000 		movl	%edx, PC(%rip)
 33607      0000
10801:src/vm3.c     **** PC = nPC;
 33608              		.loc 1 10801 0
 33609 f282 89050000 		movl	%eax, RF+124(%rip)
 33609      0000
10804:src/vm3.c     **** nPC = address << 2;
 33610              		.loc 1 10804 0
 33611 f288 428D0485 		leal	0(,%r8,4), %eax
 33611      00000000 
 33612              		.loc 1 10805 0
 33613 f290 440FB681 		movzbl	VM_memory(%rcx), %r8d
 33613      00000000 
 33614 f298 89D1     		movl	%edx, %ecx
 33615 f29a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33615      000000
10804:src/vm3.c     **** nPC = address << 2;
 33616              		.loc 1 10804 0
 33617 f2a1 89050000 		movl	%eax, nPC(%rip)
 33617      0000
 33618              		.loc 1 10805 0
 33619 f2a7 C1E118   		sall	$24, %ecx
 33620 f2aa 4109C8   		orl	%ecx, %r8d
 33621 f2ad 8D4A01   		leal	1(%rdx), %ecx
 33622 f2b0 83C202   		addl	$2, %edx
 33623 f2b3 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1112


 33623      000000
 33624 f2ba 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33624      000000
 33625 f2c1 C1E208   		sall	$8, %edx
 33626 f2c4 C1E110   		sall	$16, %ecx
 33627 f2c7 4109C8   		orl	%ecx, %r8d
 33628 f2ca 4109D0   		orl	%edx, %r8d
 33629              	.LVL3138:
10806:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33630              		.loc 1 10806 0
 33631 f2cd 4489C1   		movl	%r8d, %ecx
10807:src/vm3.c     ****   if (op0 == 0x0) {
10808:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 33632              		.loc 1 10808 0
 33633 f2d0 4488C2   		movb	%r8b, %dl
10806:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33634              		.loc 1 10806 0
 33635 f2d3 C1E91A   		shrl	$26, %ecx
 33636              	.LVL3139:
 33637              		.loc 1 10808 0
 33638 f2d6 83E23F   		andl	$63, %edx
 33639 f2d9 8D712B   		leal	43(%rcx), %esi
 33640 f2dc 84C9     		testb	%cl, %cl
10809:src/vm3.c     ****     op0 = op0 + funct;
10810:src/vm3.c     ****   }
10811:src/vm3.c     ****     else {
10812:src/vm3.c     ****     op0 = op0 + FIX_OP;
10813:src/vm3.c     ****   }
10814:src/vm3.c     **** 
10815:src/vm3.c     **** p = array;
10816:src/vm3.c     **** p = p[op0].next_level;
10817:src/vm3.c     **** 
10818:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33641              		.loc 1 10818 0
 33642 f2de 8D4803   		leal	3(%rax), %ecx
 33643              	.LVL3140:
 33644 f2e1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33644      000000
 33645              	.LVL3141:
 33646 f2e8 89C1     		movl	%eax, %ecx
10808:src/vm3.c     ****     op0 = op0 + funct;
 33647              		.loc 1 10808 0
 33648 f2ea 0F45D6   		cmovne	%esi, %edx
 33649              	.LVL3142:
 33650              		.loc 1 10818 0
 33651 f2ed 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33651      000000
10816:src/vm3.c     **** 
 33652              		.loc 1 10816 0
 33653 f2f4 0FB6D2   		movzbl	%dl, %edx
 33654 f2f7 48C1E204 		salq	$4, %rdx
 33655              	.LVL3143:
 33656              		.loc 1 10818 0
 33657 f2fb C1E118   		sall	$24, %ecx
 33658 f2fe 09CB     		orl	%ecx, %ebx
 33659 f300 8D4801   		leal	1(%rax), %ecx
 33660 f303 83C002   		addl	$2, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1113


 33661 f306 0FB68000 		movzbl	VM_memory(%rax), %eax
 33661      000000
 33662 f30d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33662      000000
 33663 f314 C1E008   		sall	$8, %eax
 33664 f317 C1E110   		sall	$16, %ecx
 33665 f31a 09CB     		orl	%ecx, %ebx
 33666 f31c 09C3     		orl	%eax, %ebx
 33667              	.LVL3144:
10819:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33668              		.loc 1 10819 0
 33669 f31e 89D9     		movl	%ebx, %ecx
10820:src/vm3.c     ****   if (op1 == 0x0) {
10821:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33670              		.loc 1 10821 0
 33671 f320 88D8     		movb	%bl, %al
10819:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33672              		.loc 1 10819 0
 33673 f322 C1E91A   		shrl	$26, %ecx
 33674              	.LVL3145:
 33675              		.loc 1 10821 0
 33676 f325 83E03F   		andl	$63, %eax
 33677 f328 8D712B   		leal	43(%rcx), %esi
 33678 f32b 84C9     		testb	%cl, %cl
 33679 f32d 0F45C6   		cmovne	%esi, %eax
 33680              	.LVL3146:
10822:src/vm3.c     ****     op1 = op1 + funct;
10823:src/vm3.c     ****   }
10824:src/vm3.c     ****     else {
10825:src/vm3.c     ****     op1 = op1 + FIX_OP;
10826:src/vm3.c     ****   }
10827:src/vm3.c     **** 
10828:src/vm3.c     **** goto *p[op1].code;
 33681              		.loc 1 10828 0
 33682 f330 0FB6C0   		movzbl	%al, %eax
 33683 f333 48C1E004 		salq	$4, %rax
 33684              	.LVL3147:
 33685 f337 48038414 		addq	58088(%rsp,%rdx), %rax
 33685      E8E20000 
 33686 f33f 488B08   		movq	(%rax), %rcx
 33687 f342 E9111AFF 		jmp	.L269
 33687      FF
 33688              	.LVL3148:
 33689              	.L158:
 33690 f347 0FB63D00 		movzbl	RF+8(%rip), %edi
 33690      000000
10829:src/vm3.c     **** 
10830:src/vm3.c     **** 
10831:src/vm3.c     **** 
10832:src/vm3.c     **** #if INDIRECT_DEBUG
10833:src/vm3.c     **** printf("%d|addiu\n",counter);
10834:src/vm3.c     **** counter++;
10835:src/vm3.c     **** #endif
10836:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
10837:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
10838:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
10839:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
GAS LISTING /tmp/cc15eBE3.s 			page 1114


10840:src/vm3.c     **** PC  =  nPC;
10841:src/vm3.c     **** nPC  += 4;
10842:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10843:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10844:src/vm3.c     ****   if (op0 == 0x0) {
10845:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10846:src/vm3.c     ****     op0 = op0 + funct;
10847:src/vm3.c     ****   }
10848:src/vm3.c     ****     else {
10849:src/vm3.c     ****     op0 = op0 + FIX_OP;
10850:src/vm3.c     ****   }
10851:src/vm3.c     **** 
10852:src/vm3.c     **** p = array;
10853:src/vm3.c     **** p = p[op0].next_level;
10854:src/vm3.c     **** 
10855:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10856:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10857:src/vm3.c     ****   if (op1 == 0x0) {
10858:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10859:src/vm3.c     ****     op1 = op1 + funct;
10860:src/vm3.c     ****   }
10861:src/vm3.c     ****     else {
10862:src/vm3.c     ****     op1 = op1 + FIX_OP;
10863:src/vm3.c     ****   }
10864:src/vm3.c     **** 
10865:src/vm3.c     **** goto *p[op1].code;
10866:src/vm3.c     **** 
10867:src/vm3.c     **** 
10868:src/vm3.c     **** syscPLUSjal:
10869:src/vm3.c     **** #if INDIRECT_DEBUG
10870:src/vm3.c     **** printf("%d|sysc\n",counter);
10871:src/vm3.c     **** counter++;
10872:src/vm3.c     **** #endif
10873:src/vm3.c     **** if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respectively
 33691              		.loc 1 10873 0
 33692 f34e E8000000 		call	syscall
 33692      00
 33693              	.LVL3149:
 33694 f353 84C0     		testb	%al, %al
 33695 f355 0F856457 		jne	.L387
 33695      0000
10874:src/vm3.c     **** {
10875:src/vm3.c     **** halted = 1; //Syscall returned 1, exit code
10876:src/vm3.c     **** goto end;
10877:src/vm3.c     **** }
10878:src/vm3.c     **** PC  =  nPC;
 33696              		.loc 1 10878 0
 33697 f35b 8B050000 		movl	nPC(%rip), %eax
 33697      0000
10879:src/vm3.c     **** nPC  += 4;
 33698              		.loc 1 10879 0
 33699 f361 83050000 		addl	$4, nPC(%rip)
 33699      000004
10880:src/vm3.c     **** 
10881:src/vm3.c     **** #if INDIRECT_DEBUG
10882:src/vm3.c     **** printf("%d|jal\n",counter);
10883:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 1115


10884:src/vm3.c     **** #endif
10885:src/vm3.c     **** RF[31] = PC + 8;
10886:src/vm3.c     **** PC = nPC;
10887:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 33700              		.loc 1 10887 0
 33701 f368 81E3FFFF 		andl	$67108863, %ebx
 33701      FF03
 33702              	.LVL3150:
10886:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 33703              		.loc 1 10886 0
 33704 f36e 8B150000 		movl	nPC(%rip), %edx
 33704      0000
10885:src/vm3.c     **** PC = nPC;
 33705              		.loc 1 10885 0
 33706 f374 83C008   		addl	$8, %eax
10888:src/vm3.c     **** nPC = address << 2;
10889:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33707              		.loc 1 10889 0
 33708 f377 8D4A03   		leal	3(%rdx), %ecx
10886:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 33709              		.loc 1 10886 0
 33710 f37a 89150000 		movl	%edx, PC(%rip)
 33710      0000
10885:src/vm3.c     **** PC = nPC;
 33711              		.loc 1 10885 0
 33712 f380 89050000 		movl	%eax, RF+124(%rip)
 33712      0000
10888:src/vm3.c     **** nPC = address << 2;
 33713              		.loc 1 10888 0
 33714 f386 8D049D00 		leal	0(,%rbx,4), %eax
 33714      000000
 33715              		.loc 1 10889 0
 33716 f38d 440FB681 		movzbl	VM_memory(%rcx), %r8d
 33716      00000000 
 33717 f395 89D1     		movl	%edx, %ecx
 33718 f397 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33718      000000
10888:src/vm3.c     **** nPC = address << 2;
 33719              		.loc 1 10888 0
 33720 f39e 89050000 		movl	%eax, nPC(%rip)
 33720      0000
 33721              		.loc 1 10889 0
 33722 f3a4 C1E118   		sall	$24, %ecx
 33723 f3a7 4109C8   		orl	%ecx, %r8d
 33724 f3aa 8D4A01   		leal	1(%rdx), %ecx
 33725 f3ad 83C202   		addl	$2, %edx
 33726 f3b0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33726      000000
 33727 f3b7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33727      000000
 33728 f3be C1E208   		sall	$8, %edx
 33729 f3c1 C1E110   		sall	$16, %ecx
 33730 f3c4 4109C8   		orl	%ecx, %r8d
 33731 f3c7 4109D0   		orl	%edx, %r8d
 33732              	.LVL3151:
10890:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33733              		.loc 1 10890 0
GAS LISTING /tmp/cc15eBE3.s 			page 1116


 33734 f3ca 4489C1   		movl	%r8d, %ecx
10891:src/vm3.c     ****   if (op0 == 0x0) {
10892:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 33735              		.loc 1 10892 0
 33736 f3cd 4488C2   		movb	%r8b, %dl
10890:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33737              		.loc 1 10890 0
 33738 f3d0 C1E91A   		shrl	$26, %ecx
 33739              	.LVL3152:
 33740              		.loc 1 10892 0
 33741 f3d3 83E23F   		andl	$63, %edx
 33742 f3d6 8D712B   		leal	43(%rcx), %esi
 33743 f3d9 84C9     		testb	%cl, %cl
10893:src/vm3.c     ****     op0 = op0 + funct;
10894:src/vm3.c     ****   }
10895:src/vm3.c     ****     else {
10896:src/vm3.c     ****     op0 = op0 + FIX_OP;
10897:src/vm3.c     ****   }
10898:src/vm3.c     **** 
10899:src/vm3.c     **** p = array;
10900:src/vm3.c     **** p = p[op0].next_level;
10901:src/vm3.c     **** 
10902:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33744              		.loc 1 10902 0
 33745 f3db 8D4803   		leal	3(%rax), %ecx
 33746              	.LVL3153:
 33747 f3de 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33747      000000
 33748 f3e5 89C1     		movl	%eax, %ecx
10892:src/vm3.c     ****     op0 = op0 + funct;
 33749              		.loc 1 10892 0
 33750 f3e7 0F45D6   		cmovne	%esi, %edx
 33751              	.LVL3154:
 33752              		.loc 1 10902 0
 33753 f3ea 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33753      000000
10900:src/vm3.c     **** 
 33754              		.loc 1 10900 0
 33755 f3f1 0FB6D2   		movzbl	%dl, %edx
 33756 f3f4 48C1E204 		salq	$4, %rdx
 33757              	.LVL3155:
 33758              		.loc 1 10902 0
 33759 f3f8 C1E118   		sall	$24, %ecx
 33760 f3fb 09CB     		orl	%ecx, %ebx
 33761 f3fd 8D4801   		leal	1(%rax), %ecx
 33762 f400 83C002   		addl	$2, %eax
 33763 f403 0FB68000 		movzbl	VM_memory(%rax), %eax
 33763      000000
 33764 f40a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33764      000000
 33765 f411 C1E008   		sall	$8, %eax
 33766 f414 C1E110   		sall	$16, %ecx
 33767 f417 09CB     		orl	%ecx, %ebx
 33768 f419 09C3     		orl	%eax, %ebx
 33769              	.LVL3156:
10903:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33770              		.loc 1 10903 0
GAS LISTING /tmp/cc15eBE3.s 			page 1117


 33771 f41b 89D9     		movl	%ebx, %ecx
10904:src/vm3.c     ****   if (op1 == 0x0) {
10905:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33772              		.loc 1 10905 0
 33773 f41d 88D8     		movb	%bl, %al
10903:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33774              		.loc 1 10903 0
 33775 f41f C1E91A   		shrl	$26, %ecx
 33776              	.LVL3157:
 33777              		.loc 1 10905 0
 33778 f422 83E03F   		andl	$63, %eax
 33779 f425 8D712B   		leal	43(%rcx), %esi
 33780 f428 84C9     		testb	%cl, %cl
 33781 f42a 0F45C6   		cmovne	%esi, %eax
 33782              	.LVL3158:
10906:src/vm3.c     ****     op1 = op1 + funct;
10907:src/vm3.c     ****   }
10908:src/vm3.c     ****     else {
10909:src/vm3.c     ****     op1 = op1 + FIX_OP;
10910:src/vm3.c     ****   }
10911:src/vm3.c     **** 
10912:src/vm3.c     **** goto *p[op1].code;
 33783              		.loc 1 10912 0
 33784 f42d 0FB6C0   		movzbl	%al, %eax
 33785 f430 48C1E004 		salq	$4, %rax
 33786              	.LVL3159:
 33787 f434 48038414 		addq	58088(%rsp,%rdx), %rax
 33787      E8E20000 
 33788 f43c 488B08   		movq	(%rax), %rcx
 33789 f43f E91419FF 		jmp	.L269
 33789      FF
 33790              	.LVL3160:
 33791              	.L216:
10913:src/vm3.c     **** 
10914:src/vm3.c     **** 
10915:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
10916:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10917:src/vm3.c     ****   if (op0 == 0x0) {
10918:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10919:src/vm3.c     ****     op0 = op0 + funct;
10920:src/vm3.c     ****   }
10921:src/vm3.c     ****     else {
10922:src/vm3.c     ****     op0 = op0 + FIX_OP;
10923:src/vm3.c     ****   }
10924:src/vm3.c     **** 
10925:src/vm3.c     **** p = array;
10926:src/vm3.c     **** p = p[op0].next_level;
10927:src/vm3.c     **** 
10928:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
10929:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
10930:src/vm3.c     ****   if (op1 == 0x0) {
10931:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
10932:src/vm3.c     ****     op1 = op1 + funct;
10933:src/vm3.c     ****   }
10934:src/vm3.c     ****     else {
10935:src/vm3.c     ****     op1 = op1 + FIX_OP;
10936:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 1118


10937:src/vm3.c     **** 
10938:src/vm3.c     **** goto *p[op1].code;
10939:src/vm3.c     **** 
10940:src/vm3.c     **** 
10941:src/vm3.c     **** srlPLUSandi:
10942:src/vm3.c     **** #if INDIRECT_DEBUG
10943:src/vm3.c     **** printf("%d|srl\n",counter);
10944:src/vm3.c     **** counter++;
10945:src/vm3.c     **** #endif
10946:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
10947:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33792              		.loc 1 10947 0
 33793 f444 4489C0   		movl	%r8d, %eax
10948:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33794              		.loc 1 10948 0
 33795 f447 4489C2   		movl	%r8d, %edx
10946:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33796              		.loc 1 10946 0
 33797 f44a 41C1E806 		shrl	$6, %r8d
 33798              	.LVL3161:
10947:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33799              		.loc 1 10947 0
 33800 f44e C1E810   		shrl	$16, %eax
 33801              	.LVL3162:
10946:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33802              		.loc 1 10946 0
 33803 f451 4488C1   		movb	%r8b, %cl
 33804              		.loc 1 10948 0
 33805 f454 C1EA0B   		shrl	$11, %edx
 33806              	.LVL3163:
10949:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 33807              		.loc 1 10949 0
 33808 f457 83E01F   		andl	$31, %eax
10946:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33809              		.loc 1 10946 0
 33810 f45a 83E11F   		andl	$31, %ecx
 33811              		.loc 1 10949 0
 33812 f45d 83E21F   		andl	$31, %edx
 33813 f460 8B048500 		movl	RF(,%rax,4), %eax
 33813      000000
10950:src/vm3.c     **** PC  =  nPC;
10951:src/vm3.c     **** nPC  += 4;
 33814              		.loc 1 10951 0
 33815 f467 83050000 		addl	$4, nPC(%rip)
 33815      000004
 33816              	.LVL3164:
10949:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 33817              		.loc 1 10949 0
 33818 f46e D3E8     		shrl	%cl, %eax
 33819 f470 89049500 		movl	%eax, RF(,%rdx,4)
 33819      000000
10952:src/vm3.c     **** 
10953:src/vm3.c     **** #if INDIRECT_DEBUG
10954:src/vm3.c     **** printf("%d|andi\n",counter);
10955:src/vm3.c     **** counter++;
10956:src/vm3.c     **** #endif
10957:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1119


 33820              		.loc 1 10957 0
 33821 f477 89DA     		movl	%ebx, %edx
10958:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33822              		.loc 1 10958 0
 33823 f479 89D8     		movl	%ebx, %eax
10957:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33824              		.loc 1 10957 0
 33825 f47b C1EA15   		shrl	$21, %edx
10959:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
10960:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
 33826              		.loc 1 10960 0
 33827 f47e 0FBFDB   		movswl	%bx, %ebx
 33828              	.LVL3165:
10958:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 33829              		.loc 1 10958 0
 33830 f481 C1E810   		shrl	$16, %eax
 33831              	.LVL3166:
 33832              		.loc 1 10960 0
 33833 f484 83E21F   		andl	$31, %edx
 33834 f487 83E01F   		andl	$31, %eax
 33835 f48a 231C9500 		andl	RF(,%rdx,4), %ebx
 33835      000000
 33836              	.LVL3167:
 33837 f491 891C8500 		movl	%ebx, RF(,%rax,4)
 33837      000000
10961:src/vm3.c     **** PC  =  nPC;
 33838              		.loc 1 10961 0
 33839 f498 8B050000 		movl	nPC(%rip), %eax
 33839      0000
10962:src/vm3.c     **** nPC  += 4;
10963:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33840              		.loc 1 10963 0
 33841 f49e 8D5003   		leal	3(%rax), %edx
10962:src/vm3.c     **** nPC  += 4;
 33842              		.loc 1 10962 0
 33843 f4a1 8D4804   		leal	4(%rax), %ecx
10961:src/vm3.c     **** PC  =  nPC;
 33844              		.loc 1 10961 0
 33845 f4a4 89050000 		movl	%eax, PC(%rip)
 33845      0000
 33846              		.loc 1 10963 0
 33847 f4aa 440FB682 		movzbl	VM_memory(%rdx), %r8d
 33847      00000000 
 33848 f4b2 89C2     		movl	%eax, %edx
10964:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
10965:src/vm3.c     ****   if (op0 == 0x0) {
10966:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
10967:src/vm3.c     ****     op0 = op0 + funct;
10968:src/vm3.c     ****   }
10969:src/vm3.c     ****     else {
10970:src/vm3.c     ****     op0 = op0 + FIX_OP;
10971:src/vm3.c     ****   }
10972:src/vm3.c     **** 
10973:src/vm3.c     **** p = array;
10974:src/vm3.c     **** p = p[op0].next_level;
10975:src/vm3.c     **** 
10976:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 1120


 33849              		.loc 1 10976 0
 33850 f4b4 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33850      000000
10963:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33851              		.loc 1 10963 0
 33852 f4bb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33852      000000
10962:src/vm3.c     **** nPC  += 4;
 33853              		.loc 1 10962 0
 33854 f4c2 890D0000 		movl	%ecx, nPC(%rip)
 33854      0000
 33855              		.loc 1 10976 0
 33856 f4c8 8D4805   		leal	5(%rax), %ecx
 33857 f4cb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33857      000000
10963:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33858              		.loc 1 10963 0
 33859 f4d2 C1E218   		sall	$24, %edx
 33860 f4d5 4109D0   		orl	%edx, %r8d
 33861 f4d8 8D5001   		leal	1(%rax), %edx
 33862 f4db 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33862      000000
 33863 f4e2 C1E210   		sall	$16, %edx
 33864 f4e5 4109D0   		orl	%edx, %r8d
 33865 f4e8 8D5002   		leal	2(%rax), %edx
 33866 f4eb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33866      000000
 33867 f4f2 C1E208   		sall	$8, %edx
 33868 f4f5 4109D0   		orl	%edx, %r8d
 33869              	.LVL3168:
10964:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33870              		.loc 1 10964 0
 33871 f4f8 4489C6   		movl	%r8d, %esi
10966:src/vm3.c     ****     op0 = op0 + funct;
 33872              		.loc 1 10966 0
 33873 f4fb 4488C2   		movb	%r8b, %dl
10964:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33874              		.loc 1 10964 0
 33875 f4fe C1EE1A   		shrl	$26, %esi
 33876              	.LVL3169:
10966:src/vm3.c     ****     op0 = op0 + funct;
 33877              		.loc 1 10966 0
 33878 f501 83E23F   		andl	$63, %edx
 33879 f504 8D7E2B   		leal	43(%rsi), %edi
 33880 f507 4084F6   		testb	%sil, %sil
 33881 f50a 0F45D7   		cmovne	%edi, %edx
 33882              	.LVL3170:
 33883              		.loc 1 10976 0
 33884 f50d C1E110   		sall	$16, %ecx
 33885 f510 C1E318   		sall	$24, %ebx
 33886 f513 09CB     		orl	%ecx, %ebx
 33887 f515 8D4807   		leal	7(%rax), %ecx
 33888 f518 83C006   		addl	$6, %eax
 33889 f51b 0FB68000 		movzbl	VM_memory(%rax), %eax
 33889      000000
10974:src/vm3.c     **** 
 33890              		.loc 1 10974 0
GAS LISTING /tmp/cc15eBE3.s 			page 1121


 33891 f522 0FB6D2   		movzbl	%dl, %edx
 33892              		.loc 1 10976 0
 33893 f525 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33893      000000
10974:src/vm3.c     **** 
 33894              		.loc 1 10974 0
 33895 f52c 48C1E204 		salq	$4, %rdx
 33896              	.LVL3171:
 33897              		.loc 1 10976 0
 33898 f530 C1E008   		sall	$8, %eax
 33899 f533 09CB     		orl	%ecx, %ebx
 33900 f535 09C3     		orl	%eax, %ebx
 33901              	.LVL3172:
10977:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33902              		.loc 1 10977 0
 33903 f537 89D9     		movl	%ebx, %ecx
10978:src/vm3.c     ****   if (op1 == 0x0) {
10979:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 33904              		.loc 1 10979 0
 33905 f539 88D8     		movb	%bl, %al
10977:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 33906              		.loc 1 10977 0
 33907 f53b C1E91A   		shrl	$26, %ecx
 33908              	.LVL3173:
 33909              		.loc 1 10979 0
 33910 f53e 83E03F   		andl	$63, %eax
 33911 f541 8D712B   		leal	43(%rcx), %esi
 33912 f544 84C9     		testb	%cl, %cl
 33913 f546 0F45C6   		cmovne	%esi, %eax
 33914              	.LVL3174:
10980:src/vm3.c     ****     op1 = op1 + funct;
10981:src/vm3.c     ****   }
10982:src/vm3.c     ****     else {
10983:src/vm3.c     ****     op1 = op1 + FIX_OP;
10984:src/vm3.c     ****   }
10985:src/vm3.c     **** 
10986:src/vm3.c     **** goto *p[op1].code;
 33915              		.loc 1 10986 0
 33916 f549 0FB6C0   		movzbl	%al, %eax
 33917 f54c 48C1E004 		salq	$4, %rax
 33918              	.LVL3175:
 33919 f550 48038414 		addq	58088(%rsp,%rdx), %rax
 33919      E8E20000 
 33920 f558 488B08   		movq	(%rax), %rcx
 33921 f55b E9F817FF 		jmp	.L269
 33921      FF
 33922              	.LVL3176:
 33923              	.L42:
10987:src/vm3.c     **** 
10988:src/vm3.c     **** 
10989:src/vm3.c     **** orPLUSsll:
10990:src/vm3.c     **** #if INDIRECT_DEBUG
10991:src/vm3.c     **** printf("%d|or\n",counter);
10992:src/vm3.c     **** counter++;
10993:src/vm3.c     **** #endif
10994:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
10995:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1122


 33924              		.loc 1 10995 0
 33925 f560 4489C0   		movl	%r8d, %eax
10996:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33926              		.loc 1 10996 0
 33927 f563 4489C2   		movl	%r8d, %edx
10994:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 33928              		.loc 1 10994 0
 33929 f566 41C1E815 		shrl	$21, %r8d
 33930              	.LVL3177:
10995:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 33931              		.loc 1 10995 0
 33932 f56a C1E810   		shrl	$16, %eax
 33933              	.LVL3178:
10997:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 33934              		.loc 1 10997 0
 33935 f56d 4183E01F 		andl	$31, %r8d
10996:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 33936              		.loc 1 10996 0
 33937 f571 C1EA0B   		shrl	$11, %edx
 33938              	.LVL3179:
 33939              		.loc 1 10997 0
 33940 f574 83E01F   		andl	$31, %eax
 33941 f577 83E21F   		andl	$31, %edx
10998:src/vm3.c     **** PC  =  nPC;
10999:src/vm3.c     **** nPC  += 4;
 33942              		.loc 1 10999 0
 33943 f57a 83050000 		addl	$4, nPC(%rip)
 33943      000004
 33944              	.LVL3180:
10997:src/vm3.c     **** PC  =  nPC;
 33945              		.loc 1 10997 0
 33946 f581 8B048500 		movl	RF(,%rax,4), %eax
 33946      000000
 33947 f588 420B0485 		orl	RF(,%r8,4), %eax
 33947      00000000 
 33948 f590 89049500 		movl	%eax, RF(,%rdx,4)
 33948      000000
11000:src/vm3.c     **** 
11001:src/vm3.c     **** #if INDIRECT_DEBUG
11002:src/vm3.c     **** printf("%d|sll\n",counter);
11003:src/vm3.c     **** counter++;
11004:src/vm3.c     **** #endif
11005:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
11006:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33949              		.loc 1 11006 0
 33950 f597 89D8     		movl	%ebx, %eax
11007:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33951              		.loc 1 11007 0
 33952 f599 89DA     		movl	%ebx, %edx
11006:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 33953              		.loc 1 11006 0
 33954 f59b C1E810   		shrl	$16, %eax
11005:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33955              		.loc 1 11005 0
 33956 f59e C1EB06   		shrl	$6, %ebx
 33957              	.LVL3181:
 33958              		.loc 1 11007 0
GAS LISTING /tmp/cc15eBE3.s 			page 1123


 33959 f5a1 C1EA0B   		shrl	$11, %edx
 33960              	.LVL3182:
11008:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 33961              		.loc 1 11008 0
 33962 f5a4 83E01F   		andl	$31, %eax
11005:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33963              		.loc 1 11005 0
 33964 f5a7 88D9     		movb	%bl, %cl
 33965              		.loc 1 11008 0
 33966 f5a9 83E21F   		andl	$31, %edx
 33967 f5ac 8B048500 		movl	RF(,%rax,4), %eax
 33967      000000
11005:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 33968              		.loc 1 11005 0
 33969 f5b3 83E11F   		andl	$31, %ecx
 33970              		.loc 1 11008 0
 33971 f5b6 D3E0     		sall	%cl, %eax
 33972 f5b8 89049500 		movl	%eax, RF(,%rdx,4)
 33972      000000
11009:src/vm3.c     **** PC  =  nPC;
 33973              		.loc 1 11009 0
 33974 f5bf 8B050000 		movl	nPC(%rip), %eax
 33974      0000
11010:src/vm3.c     **** nPC  += 4;
11011:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 33975              		.loc 1 11011 0
 33976 f5c5 8D5003   		leal	3(%rax), %edx
11010:src/vm3.c     **** nPC  += 4;
 33977              		.loc 1 11010 0
 33978 f5c8 8D4804   		leal	4(%rax), %ecx
11009:src/vm3.c     **** PC  =  nPC;
 33979              		.loc 1 11009 0
 33980 f5cb 89050000 		movl	%eax, PC(%rip)
 33980      0000
 33981              		.loc 1 11011 0
 33982 f5d1 440FB682 		movzbl	VM_memory(%rdx), %r8d
 33982      00000000 
 33983 f5d9 89C2     		movl	%eax, %edx
11012:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11013:src/vm3.c     ****   if (op0 == 0x0) {
11014:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11015:src/vm3.c     ****     op0 = op0 + funct;
11016:src/vm3.c     ****   }
11017:src/vm3.c     ****     else {
11018:src/vm3.c     ****     op0 = op0 + FIX_OP;
11019:src/vm3.c     ****   }
11020:src/vm3.c     **** 
11021:src/vm3.c     **** p = array;
11022:src/vm3.c     **** p = p[op0].next_level;
11023:src/vm3.c     **** 
11024:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 33984              		.loc 1 11024 0
 33985 f5db 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 33985      000000
11011:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33986              		.loc 1 11011 0
 33987 f5e2 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1124


 33987      000000
11010:src/vm3.c     **** nPC  += 4;
 33988              		.loc 1 11010 0
 33989 f5e9 890D0000 		movl	%ecx, nPC(%rip)
 33989      0000
 33990              		.loc 1 11024 0
 33991 f5ef 8D4805   		leal	5(%rax), %ecx
 33992 f5f2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 33992      000000
11011:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 33993              		.loc 1 11011 0
 33994 f5f9 C1E218   		sall	$24, %edx
 33995 f5fc 4109D0   		orl	%edx, %r8d
 33996 f5ff 8D5001   		leal	1(%rax), %edx
 33997 f602 0FB69200 		movzbl	VM_memory(%rdx), %edx
 33997      000000
 33998 f609 C1E210   		sall	$16, %edx
 33999 f60c 4109D0   		orl	%edx, %r8d
 34000 f60f 8D5002   		leal	2(%rax), %edx
 34001 f612 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34001      000000
 34002 f619 C1E208   		sall	$8, %edx
 34003 f61c 4109D0   		orl	%edx, %r8d
 34004              	.LVL3183:
11012:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34005              		.loc 1 11012 0
 34006 f61f 4489C6   		movl	%r8d, %esi
11014:src/vm3.c     ****     op0 = op0 + funct;
 34007              		.loc 1 11014 0
 34008 f622 4488C2   		movb	%r8b, %dl
11012:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34009              		.loc 1 11012 0
 34010 f625 C1EE1A   		shrl	$26, %esi
 34011              	.LVL3184:
11014:src/vm3.c     ****     op0 = op0 + funct;
 34012              		.loc 1 11014 0
 34013 f628 83E23F   		andl	$63, %edx
 34014 f62b 8D7E2B   		leal	43(%rsi), %edi
 34015 f62e 4084F6   		testb	%sil, %sil
 34016 f631 0F45D7   		cmovne	%edi, %edx
 34017              	.LVL3185:
 34018              		.loc 1 11024 0
 34019 f634 C1E110   		sall	$16, %ecx
 34020 f637 C1E318   		sall	$24, %ebx
 34021 f63a 09CB     		orl	%ecx, %ebx
 34022 f63c 8D4807   		leal	7(%rax), %ecx
 34023 f63f 83C006   		addl	$6, %eax
 34024 f642 0FB68000 		movzbl	VM_memory(%rax), %eax
 34024      000000
11022:src/vm3.c     **** 
 34025              		.loc 1 11022 0
 34026 f649 0FB6D2   		movzbl	%dl, %edx
 34027              		.loc 1 11024 0
 34028 f64c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34028      000000
11022:src/vm3.c     **** 
 34029              		.loc 1 11022 0
GAS LISTING /tmp/cc15eBE3.s 			page 1125


 34030 f653 48C1E204 		salq	$4, %rdx
 34031              	.LVL3186:
 34032              		.loc 1 11024 0
 34033 f657 C1E008   		sall	$8, %eax
 34034 f65a 09CB     		orl	%ecx, %ebx
 34035 f65c 09C3     		orl	%eax, %ebx
 34036              	.LVL3187:
11025:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34037              		.loc 1 11025 0
 34038 f65e 89D9     		movl	%ebx, %ecx
11026:src/vm3.c     ****   if (op1 == 0x0) {
11027:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34039              		.loc 1 11027 0
 34040 f660 88D8     		movb	%bl, %al
11025:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34041              		.loc 1 11025 0
 34042 f662 C1E91A   		shrl	$26, %ecx
 34043              	.LVL3188:
 34044              		.loc 1 11027 0
 34045 f665 83E03F   		andl	$63, %eax
 34046 f668 8D712B   		leal	43(%rcx), %esi
 34047 f66b 84C9     		testb	%cl, %cl
 34048 f66d 0F45C6   		cmovne	%esi, %eax
 34049              	.LVL3189:
11028:src/vm3.c     ****     op1 = op1 + funct;
11029:src/vm3.c     ****   }
11030:src/vm3.c     ****     else {
11031:src/vm3.c     ****     op1 = op1 + FIX_OP;
11032:src/vm3.c     ****   }
11033:src/vm3.c     **** 
11034:src/vm3.c     **** goto *p[op1].code;
 34050              		.loc 1 11034 0
 34051 f670 0FB6C0   		movzbl	%al, %eax
 34052 f673 48C1E004 		salq	$4, %rax
 34053              	.LVL3190:
 34054 f677 48038414 		addq	58088(%rsp,%rdx), %rax
 34054      E8E20000 
 34055 f67f 488B08   		movq	(%rax), %rcx
 34056 f682 E9D116FF 		jmp	.L269
 34056      FF
 34057              	.LVL3191:
 34058              	.L153:
11035:src/vm3.c     **** 
11036:src/vm3.c     **** 
11037:src/vm3.c     **** addiuPLUSsw:
11038:src/vm3.c     **** #if INDIRECT_DEBUG
11039:src/vm3.c     **** printf("%d|addiu\n",counter);
11040:src/vm3.c     **** counter++;
11041:src/vm3.c     **** #endif
11042:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 34059              		.loc 1 11042 0
 34060 f687 4489C2   		movl	%r8d, %edx
11043:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34061              		.loc 1 11043 0
 34062 f68a 4489C0   		movl	%r8d, %eax
11044:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11045:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
GAS LISTING /tmp/cc15eBE3.s 			page 1126


 34063              		.loc 1 11045 0
 34064 f68d 450FBFC0 		movswl	%r8w, %r8d
 34065              	.LVL3192:
11042:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34066              		.loc 1 11042 0
 34067 f691 C1EA15   		shrl	$21, %edx
11043:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34068              		.loc 1 11043 0
 34069 f694 C1E810   		shrl	$16, %eax
 34070              	.LVL3193:
11046:src/vm3.c     **** PC  =  nPC;
11047:src/vm3.c     **** nPC  += 4;
11048:src/vm3.c     **** 
11049:src/vm3.c     **** #if INDIRECT_DEBUG
11050:src/vm3.c     **** printf("%d|sw\n",counter);
11051:src/vm3.c     **** counter++;
11052:src/vm3.c     **** #endif
11053:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11054:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
11055:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11056:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 34071              		.loc 1 11056 0
 34072 f697 0FBFCB   		movswl	%bx, %ecx
11045:src/vm3.c     **** PC  =  nPC;
 34073              		.loc 1 11045 0
 34074 f69a 83E21F   		andl	$31, %edx
 34075 f69d 83E01F   		andl	$31, %eax
11047:src/vm3.c     **** 
 34076              		.loc 1 11047 0
 34077 f6a0 83050000 		addl	$4, nPC(%rip)
 34077      000004
 34078              	.LVL3194:
11045:src/vm3.c     **** PC  =  nPC;
 34079              		.loc 1 11045 0
 34080 f6a7 44030495 		addl	RF(,%rdx,4), %r8d
 34080      00000000 
 34081 f6af 44890485 		movl	%r8d, RF(,%rax,4)
 34081      00000000 
11053:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34082              		.loc 1 11053 0
 34083 f6b7 89D8     		movl	%ebx, %eax
11054:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 34084              		.loc 1 11054 0
 34085 f6b9 C1EB10   		shrl	$16, %ebx
 34086              	.LVL3195:
11053:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34087              		.loc 1 11053 0
 34088 f6bc C1E815   		shrl	$21, %eax
 34089              	.LVL3196:
 34090              		.loc 1 11056 0
 34091 f6bf 83E31F   		andl	$31, %ebx
 34092 f6c2 83E01F   		andl	$31, %eax
 34093 f6c5 8B148500 		movl	RF(,%rax,4), %edx
 34093      000000
 34094 f6cc 8B049D00 		movl	RF(,%rbx,4), %eax
 34094      000000
 34095 f6d3 8D3411   		leal	(%rcx,%rdx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 1127


 34096 f6d6 89C7     		movl	%eax, %edi
 34097 f6d8 C1EF18   		shrl	$24, %edi
 34098 f6db 4088BE00 		movb	%dil, VM_memory(%rsi)
 34098      000000
11057:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 34099              		.loc 1 11057 0
 34100 f6e2 8D741101 		leal	1(%rcx,%rdx), %esi
 34101 f6e6 89C7     		movl	%eax, %edi
 34102 f6e8 C1EF10   		shrl	$16, %edi
 34103 f6eb 4088BE00 		movb	%dil, VM_memory(%rsi)
 34103      000000
11058:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 34104              		.loc 1 11058 0
 34105 f6f2 8D741102 		leal	2(%rcx,%rdx), %esi
11059:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 34106              		.loc 1 11059 0
 34107 f6f6 8D541103 		leal	3(%rcx,%rdx), %edx
11058:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 34108              		.loc 1 11058 0
 34109 f6fa 0FB6FC   		movzbl	%ah, %edi
 34110 f6fd 4088BE00 		movb	%dil, VM_memory(%rsi)
 34110      000000
 34111              		.loc 1 11059 0
 34112 f704 88820000 		movb	%al, VM_memory(%rdx)
 34112      0000
11060:src/vm3.c     **** PC  =  nPC;
 34113              		.loc 1 11060 0
 34114 f70a 8B050000 		movl	nPC(%rip), %eax
 34114      0000
11061:src/vm3.c     **** nPC  += 4;
11062:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34115              		.loc 1 11062 0
 34116 f710 8D5003   		leal	3(%rax), %edx
11061:src/vm3.c     **** nPC  += 4;
 34117              		.loc 1 11061 0
 34118 f713 8D4804   		leal	4(%rax), %ecx
 34119              	.LVL3197:
11060:src/vm3.c     **** PC  =  nPC;
 34120              		.loc 1 11060 0
 34121 f716 89050000 		movl	%eax, PC(%rip)
 34121      0000
 34122              		.loc 1 11062 0
 34123 f71c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 34123      00000000 
 34124 f724 89C2     		movl	%eax, %edx
11063:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11064:src/vm3.c     ****   if (op0 == 0x0) {
11065:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11066:src/vm3.c     ****     op0 = op0 + funct;
11067:src/vm3.c     ****   }
11068:src/vm3.c     ****     else {
11069:src/vm3.c     ****     op0 = op0 + FIX_OP;
11070:src/vm3.c     ****   }
11071:src/vm3.c     **** 
11072:src/vm3.c     **** p = array;
11073:src/vm3.c     **** p = p[op0].next_level;
11074:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1128


11075:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 34125              		.loc 1 11075 0
 34126 f726 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34126      000000
11062:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34127              		.loc 1 11062 0
 34128 f72d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34128      000000
11061:src/vm3.c     **** nPC  += 4;
 34129              		.loc 1 11061 0
 34130 f734 890D0000 		movl	%ecx, nPC(%rip)
 34130      0000
 34131              		.loc 1 11075 0
 34132 f73a 8D4805   		leal	5(%rax), %ecx
 34133 f73d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34133      000000
11062:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34134              		.loc 1 11062 0
 34135 f744 C1E218   		sall	$24, %edx
 34136 f747 4109D0   		orl	%edx, %r8d
 34137 f74a 8D5001   		leal	1(%rax), %edx
 34138 f74d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34138      000000
 34139 f754 C1E210   		sall	$16, %edx
 34140 f757 4109D0   		orl	%edx, %r8d
 34141 f75a 8D5002   		leal	2(%rax), %edx
 34142 f75d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34142      000000
 34143 f764 C1E208   		sall	$8, %edx
 34144 f767 4109D0   		orl	%edx, %r8d
 34145              	.LVL3198:
11063:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34146              		.loc 1 11063 0
 34147 f76a 4489C6   		movl	%r8d, %esi
11065:src/vm3.c     ****     op0 = op0 + funct;
 34148              		.loc 1 11065 0
 34149 f76d 4488C2   		movb	%r8b, %dl
11063:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34150              		.loc 1 11063 0
 34151 f770 C1EE1A   		shrl	$26, %esi
 34152              	.LVL3199:
11065:src/vm3.c     ****     op0 = op0 + funct;
 34153              		.loc 1 11065 0
 34154 f773 83E23F   		andl	$63, %edx
 34155 f776 8D7E2B   		leal	43(%rsi), %edi
 34156 f779 4084F6   		testb	%sil, %sil
 34157 f77c 0F45D7   		cmovne	%edi, %edx
 34158              	.LVL3200:
 34159              		.loc 1 11075 0
 34160 f77f C1E110   		sall	$16, %ecx
 34161 f782 C1E318   		sall	$24, %ebx
 34162 f785 09CB     		orl	%ecx, %ebx
 34163 f787 8D4807   		leal	7(%rax), %ecx
 34164 f78a 83C006   		addl	$6, %eax
 34165 f78d 0FB68000 		movzbl	VM_memory(%rax), %eax
 34165      000000
11073:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1129


 34166              		.loc 1 11073 0
 34167 f794 0FB6D2   		movzbl	%dl, %edx
 34168              		.loc 1 11075 0
 34169 f797 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34169      000000
11073:src/vm3.c     **** 
 34170              		.loc 1 11073 0
 34171 f79e 48C1E204 		salq	$4, %rdx
 34172              	.LVL3201:
 34173              		.loc 1 11075 0
 34174 f7a2 C1E008   		sall	$8, %eax
 34175 f7a5 09CB     		orl	%ecx, %ebx
 34176 f7a7 09C3     		orl	%eax, %ebx
 34177              	.LVL3202:
11076:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34178              		.loc 1 11076 0
 34179 f7a9 89D9     		movl	%ebx, %ecx
11077:src/vm3.c     ****   if (op1 == 0x0) {
11078:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34180              		.loc 1 11078 0
 34181 f7ab 88D8     		movb	%bl, %al
11076:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34182              		.loc 1 11076 0
 34183 f7ad C1E91A   		shrl	$26, %ecx
 34184              	.LVL3203:
 34185              		.loc 1 11078 0
 34186 f7b0 83E03F   		andl	$63, %eax
 34187 f7b3 8D712B   		leal	43(%rcx), %esi
 34188 f7b6 84C9     		testb	%cl, %cl
 34189 f7b8 0F45C6   		cmovne	%esi, %eax
 34190              	.LVL3204:
11079:src/vm3.c     ****     op1 = op1 + funct;
11080:src/vm3.c     ****   }
11081:src/vm3.c     ****     else {
11082:src/vm3.c     ****     op1 = op1 + FIX_OP;
11083:src/vm3.c     ****   }
11084:src/vm3.c     **** 
11085:src/vm3.c     **** goto *p[op1].code;
 34191              		.loc 1 11085 0
 34192 f7bb 0FB6C0   		movzbl	%al, %eax
 34193 f7be 48C1E004 		salq	$4, %rax
 34194              	.LVL3205:
 34195 f7c2 48038414 		addq	58088(%rsp,%rdx), %rax
 34195      E8E20000 
 34196 f7ca 488B08   		movq	(%rax), %rcx
 34197 f7cd E98615FF 		jmp	.L269
 34197      FF
 34198              	.LVL3206:
 34199              	.L162:
11086:src/vm3.c     **** 
11087:src/vm3.c     **** 
11088:src/vm3.c     **** errorPLUSsubu:
11089:src/vm3.c     **** #if INDIRECT_DEBUG
11090:src/vm3.c     **** printf("Error, unknown instr0uction %d.\n", instr0);
11091:src/vm3.c     **** #endif
11092:src/vm3.c     **** PC  =  nPC;
11093:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1130


11094:src/vm3.c     **** 
11095:src/vm3.c     **** #if INDIRECT_DEBUG
11096:src/vm3.c     **** printf("%d|subu\n",counter);
11097:src/vm3.c     **** counter++;
11098:src/vm3.c     **** #endif
11099:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 34200              		.loc 1 11099 0
 34201 f7d2 89D8     		movl	%ebx, %eax
11100:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
11101:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 34202              		.loc 1 11101 0
 34203 f7d4 89DA     		movl	%ebx, %edx
11100:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34204              		.loc 1 11100 0
 34205 f7d6 C1EB10   		shrl	$16, %ebx
 34206              	.LVL3207:
11099:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34207              		.loc 1 11099 0
 34208 f7d9 C1E815   		shrl	$21, %eax
 34209              	.LVL3208:
11102:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 34210              		.loc 1 11102 0
 34211 f7dc 83E31F   		andl	$31, %ebx
11101:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 34212              		.loc 1 11101 0
 34213 f7df C1EA0B   		shrl	$11, %edx
 34214              	.LVL3209:
 34215              		.loc 1 11102 0
 34216 f7e2 83E01F   		andl	$31, %eax
11093:src/vm3.c     **** 
 34217              		.loc 1 11093 0
 34218 f7e5 83050000 		addl	$4, nPC(%rip)
 34218      000004
 34219              		.loc 1 11102 0
 34220 f7ec 83E21F   		andl	$31, %edx
 34221 f7ef 8B048500 		movl	RF(,%rax,4), %eax
 34221      000000
 34222 f7f6 2B049D00 		subl	RF(,%rbx,4), %eax
 34222      000000
 34223 f7fd 89049500 		movl	%eax, RF(,%rdx,4)
 34223      000000
11103:src/vm3.c     **** PC  =  nPC;
 34224              		.loc 1 11103 0
 34225 f804 8B050000 		movl	nPC(%rip), %eax
 34225      0000
11104:src/vm3.c     **** nPC  += 4;
11105:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34226              		.loc 1 11105 0
 34227 f80a 8D5003   		leal	3(%rax), %edx
11104:src/vm3.c     **** nPC  += 4;
 34228              		.loc 1 11104 0
 34229 f80d 8D4804   		leal	4(%rax), %ecx
11103:src/vm3.c     **** PC  =  nPC;
 34230              		.loc 1 11103 0
 34231 f810 89050000 		movl	%eax, PC(%rip)
 34231      0000
 34232              		.loc 1 11105 0
GAS LISTING /tmp/cc15eBE3.s 			page 1131


 34233 f816 440FB682 		movzbl	VM_memory(%rdx), %r8d
 34233      00000000 
 34234              	.LVL3210:
 34235 f81e 89C2     		movl	%eax, %edx
11106:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11107:src/vm3.c     ****   if (op0 == 0x0) {
11108:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11109:src/vm3.c     ****     op0 = op0 + funct;
11110:src/vm3.c     ****   }
11111:src/vm3.c     ****     else {
11112:src/vm3.c     ****     op0 = op0 + FIX_OP;
11113:src/vm3.c     ****   }
11114:src/vm3.c     **** 
11115:src/vm3.c     **** p = array;
11116:src/vm3.c     **** p = p[op0].next_level;
11117:src/vm3.c     **** 
11118:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 34236              		.loc 1 11118 0
 34237 f820 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34237      000000
11105:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34238              		.loc 1 11105 0
 34239 f827 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34239      000000
11104:src/vm3.c     **** nPC  += 4;
 34240              		.loc 1 11104 0
 34241 f82e 890D0000 		movl	%ecx, nPC(%rip)
 34241      0000
 34242              		.loc 1 11118 0
 34243 f834 8D4805   		leal	5(%rax), %ecx
 34244 f837 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34244      000000
11105:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34245              		.loc 1 11105 0
 34246 f83e C1E218   		sall	$24, %edx
 34247 f841 4109D0   		orl	%edx, %r8d
 34248 f844 8D5001   		leal	1(%rax), %edx
 34249 f847 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34249      000000
 34250 f84e C1E210   		sall	$16, %edx
 34251 f851 4109D0   		orl	%edx, %r8d
 34252 f854 8D5002   		leal	2(%rax), %edx
 34253 f857 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34253      000000
 34254 f85e C1E208   		sall	$8, %edx
 34255 f861 4109D0   		orl	%edx, %r8d
 34256              	.LVL3211:
11106:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34257              		.loc 1 11106 0
 34258 f864 4489C6   		movl	%r8d, %esi
11108:src/vm3.c     ****     op0 = op0 + funct;
 34259              		.loc 1 11108 0
 34260 f867 4488C2   		movb	%r8b, %dl
11106:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34261              		.loc 1 11106 0
 34262 f86a C1EE1A   		shrl	$26, %esi
 34263              	.LVL3212:
GAS LISTING /tmp/cc15eBE3.s 			page 1132


11108:src/vm3.c     ****     op0 = op0 + funct;
 34264              		.loc 1 11108 0
 34265 f86d 83E23F   		andl	$63, %edx
 34266 f870 8D7E2B   		leal	43(%rsi), %edi
 34267 f873 4084F6   		testb	%sil, %sil
 34268 f876 0F45D7   		cmovne	%edi, %edx
 34269              	.LVL3213:
 34270              		.loc 1 11118 0
 34271 f879 C1E110   		sall	$16, %ecx
 34272 f87c C1E318   		sall	$24, %ebx
 34273 f87f 09CB     		orl	%ecx, %ebx
 34274 f881 8D4807   		leal	7(%rax), %ecx
 34275 f884 83C006   		addl	$6, %eax
 34276 f887 0FB68000 		movzbl	VM_memory(%rax), %eax
 34276      000000
11116:src/vm3.c     **** 
 34277              		.loc 1 11116 0
 34278 f88e 0FB6D2   		movzbl	%dl, %edx
 34279              		.loc 1 11118 0
 34280 f891 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34280      000000
11116:src/vm3.c     **** 
 34281              		.loc 1 11116 0
 34282 f898 48C1E204 		salq	$4, %rdx
 34283              	.LVL3214:
 34284              		.loc 1 11118 0
 34285 f89c C1E008   		sall	$8, %eax
 34286 f89f 09CB     		orl	%ecx, %ebx
 34287 f8a1 09C3     		orl	%eax, %ebx
 34288              	.LVL3215:
11119:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34289              		.loc 1 11119 0
 34290 f8a3 89D9     		movl	%ebx, %ecx
11120:src/vm3.c     ****   if (op1 == 0x0) {
11121:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34291              		.loc 1 11121 0
 34292 f8a5 88D8     		movb	%bl, %al
11119:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34293              		.loc 1 11119 0
 34294 f8a7 C1E91A   		shrl	$26, %ecx
 34295              	.LVL3216:
 34296              		.loc 1 11121 0
 34297 f8aa 83E03F   		andl	$63, %eax
 34298 f8ad 8D712B   		leal	43(%rcx), %esi
 34299 f8b0 84C9     		testb	%cl, %cl
 34300 f8b2 0F45C6   		cmovne	%esi, %eax
 34301              	.LVL3217:
11122:src/vm3.c     ****     op1 = op1 + funct;
11123:src/vm3.c     ****   }
11124:src/vm3.c     ****     else {
11125:src/vm3.c     ****     op1 = op1 + FIX_OP;
11126:src/vm3.c     ****   }
11127:src/vm3.c     **** 
11128:src/vm3.c     **** goto *p[op1].code;
 34302              		.loc 1 11128 0
 34303 f8b5 0FB6C0   		movzbl	%al, %eax
 34304 f8b8 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1133


 34305              	.LVL3218:
 34306 f8bc 48038414 		addq	58088(%rsp,%rdx), %rax
 34306      E8E20000 
 34307 f8c4 488B08   		movq	(%rax), %rcx
 34308 f8c7 E98C14FF 		jmp	.L269
 34308      FF
 34309              	.LVL3219:
 34310              	.L9:
11129:src/vm3.c     **** 
11130:src/vm3.c     **** 
11131:src/vm3.c     **** movnPLUSsll:
11132:src/vm3.c     **** #if INDIRECT_DEBUG
11133:src/vm3.c     **** printf("%d|movn\n",counter);
11134:src/vm3.c     **** counter++;
11135:src/vm3.c     **** #endif
11136:src/vm3.c     **** 
11137:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
11138:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34311              		.loc 1 11138 0
 34312 f8cc 4489C0   		movl	%r8d, %eax
 34313 f8cf C1E810   		shrl	$16, %eax
11139:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
11140:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 34314              		.loc 1 11140 0
 34315 f8d2 83E01F   		andl	$31, %eax
 34316 f8d5 833C8500 		cmpl	$0, RF(,%rax,4)
 34316      00000000 
 34317 f8dd 7420     		je	.L1233
11137:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34318              		.loc 1 11137 0 discriminator 1
 34319 f8df 4489C0   		movl	%r8d, %eax
11139:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 34320              		.loc 1 11139 0 discriminator 1
 34321 f8e2 41C1E80B 		shrl	$11, %r8d
 34322              	.LVL3220:
11137:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34323              		.loc 1 11137 0 discriminator 1
 34324 f8e6 C1E815   		shrl	$21, %eax
 34325              	.LVL3221:
 34326              		.loc 1 11140 0 discriminator 1
 34327 f8e9 4183E01F 		andl	$31, %r8d
 34328              	.LVL3222:
 34329 f8ed 83E01F   		andl	$31, %eax
 34330              	.LVL3223:
 34331 f8f0 8B048500 		movl	RF(,%rax,4), %eax
 34331      000000
 34332 f8f7 42890485 		movl	%eax, RF(,%r8,4)
 34332      00000000 
 34333              	.L1233:
11141:src/vm3.c     **** PC  =  nPC;
11142:src/vm3.c     **** nPC  += 4;
11143:src/vm3.c     **** 
11144:src/vm3.c     **** #if INDIRECT_DEBUG
11145:src/vm3.c     **** printf("%d|sll\n",counter);
11146:src/vm3.c     **** counter++;
11147:src/vm3.c     **** #endif
11148:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1134


11149:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34334              		.loc 1 11149 0
 34335 f8ff 89D8     		movl	%ebx, %eax
11150:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 34336              		.loc 1 11150 0
 34337 f901 89DA     		movl	%ebx, %edx
11148:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34338              		.loc 1 11148 0
 34339 f903 C1EB06   		shrl	$6, %ebx
 34340              	.LVL3224:
11149:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 34341              		.loc 1 11149 0
 34342 f906 C1E810   		shrl	$16, %eax
 34343              	.LVL3225:
11148:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34344              		.loc 1 11148 0
 34345 f909 88D9     		movb	%bl, %cl
 34346              		.loc 1 11150 0
 34347 f90b C1EA0B   		shrl	$11, %edx
 34348              	.LVL3226:
11151:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 34349              		.loc 1 11151 0
 34350 f90e 83E01F   		andl	$31, %eax
11148:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34351              		.loc 1 11148 0
 34352 f911 83E11F   		andl	$31, %ecx
11142:src/vm3.c     **** 
 34353              		.loc 1 11142 0
 34354 f914 83050000 		addl	$4, nPC(%rip)
 34354      000004
 34355              		.loc 1 11151 0
 34356 f91b 8B048500 		movl	RF(,%rax,4), %eax
 34356      000000
 34357 f922 83E21F   		andl	$31, %edx
 34358 f925 D3E0     		sall	%cl, %eax
 34359 f927 89049500 		movl	%eax, RF(,%rdx,4)
 34359      000000
11152:src/vm3.c     **** PC  =  nPC;
 34360              		.loc 1 11152 0
 34361 f92e 8B050000 		movl	nPC(%rip), %eax
 34361      0000
11153:src/vm3.c     **** nPC  += 4;
11154:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34362              		.loc 1 11154 0
 34363 f934 8D5003   		leal	3(%rax), %edx
11153:src/vm3.c     **** nPC  += 4;
 34364              		.loc 1 11153 0
 34365 f937 8D4804   		leal	4(%rax), %ecx
11152:src/vm3.c     **** PC  =  nPC;
 34366              		.loc 1 11152 0
 34367 f93a 89050000 		movl	%eax, PC(%rip)
 34367      0000
 34368              		.loc 1 11154 0
 34369 f940 440FB682 		movzbl	VM_memory(%rdx), %r8d
 34369      00000000 
 34370 f948 89C2     		movl	%eax, %edx
11155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1135


11156:src/vm3.c     ****   if (op0 == 0x0) {
11157:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11158:src/vm3.c     ****     op0 = op0 + funct;
11159:src/vm3.c     ****   }
11160:src/vm3.c     ****     else {
11161:src/vm3.c     ****     op0 = op0 + FIX_OP;
11162:src/vm3.c     ****   }
11163:src/vm3.c     **** 
11164:src/vm3.c     **** p = array;
11165:src/vm3.c     **** p = p[op0].next_level;
11166:src/vm3.c     **** 
11167:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 34371              		.loc 1 11167 0
 34372 f94a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34372      000000
11154:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34373              		.loc 1 11154 0
 34374 f951 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34374      000000
11153:src/vm3.c     **** nPC  += 4;
 34375              		.loc 1 11153 0
 34376 f958 890D0000 		movl	%ecx, nPC(%rip)
 34376      0000
 34377              		.loc 1 11167 0
 34378 f95e 8D4805   		leal	5(%rax), %ecx
 34379 f961 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34379      000000
11154:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34380              		.loc 1 11154 0
 34381 f968 C1E218   		sall	$24, %edx
 34382 f96b 4109D0   		orl	%edx, %r8d
 34383 f96e 8D5001   		leal	1(%rax), %edx
 34384 f971 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34384      000000
 34385 f978 C1E210   		sall	$16, %edx
 34386 f97b 4109D0   		orl	%edx, %r8d
 34387 f97e 8D5002   		leal	2(%rax), %edx
 34388 f981 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34388      000000
 34389 f988 C1E208   		sall	$8, %edx
 34390 f98b 4109D0   		orl	%edx, %r8d
 34391              	.LVL3227:
11155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34392              		.loc 1 11155 0
 34393 f98e 4489C6   		movl	%r8d, %esi
11157:src/vm3.c     ****     op0 = op0 + funct;
 34394              		.loc 1 11157 0
 34395 f991 4488C2   		movb	%r8b, %dl
11155:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34396              		.loc 1 11155 0
 34397 f994 C1EE1A   		shrl	$26, %esi
 34398              	.LVL3228:
11157:src/vm3.c     ****     op0 = op0 + funct;
 34399              		.loc 1 11157 0
 34400 f997 83E23F   		andl	$63, %edx
 34401 f99a 8D7E2B   		leal	43(%rsi), %edi
 34402 f99d 4084F6   		testb	%sil, %sil
GAS LISTING /tmp/cc15eBE3.s 			page 1136


 34403 f9a0 0F45D7   		cmovne	%edi, %edx
 34404              	.LVL3229:
 34405              		.loc 1 11167 0
 34406 f9a3 C1E110   		sall	$16, %ecx
 34407 f9a6 C1E318   		sall	$24, %ebx
 34408 f9a9 09CB     		orl	%ecx, %ebx
 34409 f9ab 8D4807   		leal	7(%rax), %ecx
 34410 f9ae 83C006   		addl	$6, %eax
 34411 f9b1 0FB68000 		movzbl	VM_memory(%rax), %eax
 34411      000000
11165:src/vm3.c     **** 
 34412              		.loc 1 11165 0
 34413 f9b8 0FB6D2   		movzbl	%dl, %edx
 34414              		.loc 1 11167 0
 34415 f9bb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34415      000000
11165:src/vm3.c     **** 
 34416              		.loc 1 11165 0
 34417 f9c2 48C1E204 		salq	$4, %rdx
 34418              	.LVL3230:
 34419              		.loc 1 11167 0
 34420 f9c6 C1E008   		sall	$8, %eax
 34421 f9c9 09CB     		orl	%ecx, %ebx
 34422 f9cb 09C3     		orl	%eax, %ebx
 34423              	.LVL3231:
11168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34424              		.loc 1 11168 0
 34425 f9cd 89D9     		movl	%ebx, %ecx
11169:src/vm3.c     ****   if (op1 == 0x0) {
11170:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34426              		.loc 1 11170 0
 34427 f9cf 88D8     		movb	%bl, %al
11168:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34428              		.loc 1 11168 0
 34429 f9d1 C1E91A   		shrl	$26, %ecx
 34430              	.LVL3232:
 34431              		.loc 1 11170 0
 34432 f9d4 83E03F   		andl	$63, %eax
 34433 f9d7 8D712B   		leal	43(%rcx), %esi
 34434 f9da 84C9     		testb	%cl, %cl
 34435 f9dc 0F45C6   		cmovne	%esi, %eax
 34436              	.LVL3233:
11171:src/vm3.c     ****     op1 = op1 + funct;
11172:src/vm3.c     ****   }
11173:src/vm3.c     ****     else {
11174:src/vm3.c     ****     op1 = op1 + FIX_OP;
11175:src/vm3.c     ****   }
11176:src/vm3.c     **** 
11177:src/vm3.c     **** goto *p[op1].code;
 34437              		.loc 1 11177 0
 34438 f9df 0FB6C0   		movzbl	%al, %eax
 34439 f9e2 48C1E004 		salq	$4, %rax
 34440              	.LVL3234:
 34441 f9e6 48038414 		addq	58088(%rsp,%rdx), %rax
 34441      E8E20000 
 34442 f9ee 488B08   		movq	(%rax), %rcx
 34443 f9f1 E96213FF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 1137


 34443      FF
 34444              	.LVL3235:
 34445              	.L67:
11178:src/vm3.c     **** 
11179:src/vm3.c     **** 
11180:src/vm3.c     **** adduPLUSlbu:
11181:src/vm3.c     **** #if INDIRECT_DEBUG
11182:src/vm3.c     **** printf("%d|addu\n",counter);
11183:src/vm3.c     **** counter++;
11184:src/vm3.c     **** #endif
11185:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
11186:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34446              		.loc 1 11186 0
 34447 f9f6 4489C0   		movl	%r8d, %eax
11187:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 34448              		.loc 1 11187 0
 34449 f9f9 4489C2   		movl	%r8d, %edx
11185:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34450              		.loc 1 11185 0
 34451 f9fc 41C1E815 		shrl	$21, %r8d
 34452              	.LVL3236:
11186:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 34453              		.loc 1 11186 0
 34454 fa00 C1E810   		shrl	$16, %eax
 34455              	.LVL3237:
11188:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 34456              		.loc 1 11188 0
 34457 fa03 4183E01F 		andl	$31, %r8d
11187:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 34458              		.loc 1 11187 0
 34459 fa07 C1EA0B   		shrl	$11, %edx
 34460              	.LVL3238:
 34461              		.loc 1 11188 0
 34462 fa0a 83E01F   		andl	$31, %eax
 34463 fa0d 83E21F   		andl	$31, %edx
11189:src/vm3.c     **** PC  =  nPC;
11190:src/vm3.c     **** nPC  += 4;
 34464              		.loc 1 11190 0
 34465 fa10 83050000 		addl	$4, nPC(%rip)
 34465      000004
 34466              	.LVL3239:
11188:src/vm3.c     **** PC  =  nPC;
 34467              		.loc 1 11188 0
 34468 fa17 8B048500 		movl	RF(,%rax,4), %eax
 34468      000000
 34469 fa1e 42030485 		addl	RF(,%r8,4), %eax
 34469      00000000 
 34470 fa26 89049500 		movl	%eax, RF(,%rdx,4)
 34470      000000
11191:src/vm3.c     **** 
11192:src/vm3.c     **** #if INDIRECT_DEBUG
11193:src/vm3.c     **** printf("%d|lbu\n",counter);
11194:src/vm3.c     **** counter++;
11195:src/vm3.c     **** #endif
11196:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 34471              		.loc 1 11196 0
 34472 fa2d 89DA     		movl	%ebx, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1138


11197:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34473              		.loc 1 11197 0
 34474 fa2f 89D8     		movl	%ebx, %eax
11196:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34475              		.loc 1 11196 0
 34476 fa31 C1EA15   		shrl	$21, %edx
11198:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11199:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 34477              		.loc 1 11199 0
 34478 fa34 0FBFDB   		movswl	%bx, %ebx
 34479              	.LVL3240:
11197:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 34480              		.loc 1 11197 0
 34481 fa37 C1E810   		shrl	$16, %eax
 34482              	.LVL3241:
 34483              		.loc 1 11199 0
 34484 fa3a 83E21F   		andl	$31, %edx
 34485 fa3d 83E01F   		andl	$31, %eax
 34486 fa40 031C9500 		addl	RF(,%rdx,4), %ebx
 34486      000000
 34487              	.LVL3242:
 34488 fa47 0FB69300 		movzbl	VM_memory(%rbx), %edx
 34488      000000
 34489 fa4e 89148500 		movl	%edx, RF(,%rax,4)
 34489      000000
11200:src/vm3.c     **** PC  =  nPC;
 34490              		.loc 1 11200 0
 34491 fa55 8B050000 		movl	nPC(%rip), %eax
 34491      0000
11201:src/vm3.c     **** nPC  += 4;
11202:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34492              		.loc 1 11202 0
 34493 fa5b 8D5003   		leal	3(%rax), %edx
11201:src/vm3.c     **** nPC  += 4;
 34494              		.loc 1 11201 0
 34495 fa5e 8D4804   		leal	4(%rax), %ecx
11200:src/vm3.c     **** PC  =  nPC;
 34496              		.loc 1 11200 0
 34497 fa61 89050000 		movl	%eax, PC(%rip)
 34497      0000
 34498              		.loc 1 11202 0
 34499 fa67 440FB682 		movzbl	VM_memory(%rdx), %r8d
 34499      00000000 
 34500 fa6f 89C2     		movl	%eax, %edx
11203:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11204:src/vm3.c     ****   if (op0 == 0x0) {
11205:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11206:src/vm3.c     ****     op0 = op0 + funct;
11207:src/vm3.c     ****   }
11208:src/vm3.c     ****     else {
11209:src/vm3.c     ****     op0 = op0 + FIX_OP;
11210:src/vm3.c     ****   }
11211:src/vm3.c     **** 
11212:src/vm3.c     **** p = array;
11213:src/vm3.c     **** p = p[op0].next_level;
11214:src/vm3.c     **** 
11215:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 1139


 34501              		.loc 1 11215 0
 34502 fa71 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34502      000000
11202:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34503              		.loc 1 11202 0
 34504 fa78 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34504      000000
11201:src/vm3.c     **** nPC  += 4;
 34505              		.loc 1 11201 0
 34506 fa7f 890D0000 		movl	%ecx, nPC(%rip)
 34506      0000
 34507              		.loc 1 11215 0
 34508 fa85 8D4805   		leal	5(%rax), %ecx
 34509 fa88 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34509      000000
11202:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34510              		.loc 1 11202 0
 34511 fa8f C1E218   		sall	$24, %edx
 34512 fa92 4109D0   		orl	%edx, %r8d
 34513 fa95 8D5001   		leal	1(%rax), %edx
 34514 fa98 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34514      000000
 34515 fa9f C1E210   		sall	$16, %edx
 34516 faa2 4109D0   		orl	%edx, %r8d
 34517 faa5 8D5002   		leal	2(%rax), %edx
 34518 faa8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34518      000000
 34519 faaf C1E208   		sall	$8, %edx
 34520 fab2 4109D0   		orl	%edx, %r8d
 34521              	.LVL3243:
11203:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34522              		.loc 1 11203 0
 34523 fab5 4489C6   		movl	%r8d, %esi
11205:src/vm3.c     ****     op0 = op0 + funct;
 34524              		.loc 1 11205 0
 34525 fab8 4488C2   		movb	%r8b, %dl
11203:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34526              		.loc 1 11203 0
 34527 fabb C1EE1A   		shrl	$26, %esi
 34528              	.LVL3244:
11205:src/vm3.c     ****     op0 = op0 + funct;
 34529              		.loc 1 11205 0
 34530 fabe 83E23F   		andl	$63, %edx
 34531 fac1 8D7E2B   		leal	43(%rsi), %edi
 34532 fac4 4084F6   		testb	%sil, %sil
 34533 fac7 0F45D7   		cmovne	%edi, %edx
 34534              	.LVL3245:
 34535              		.loc 1 11215 0
 34536 faca C1E110   		sall	$16, %ecx
 34537 facd C1E318   		sall	$24, %ebx
 34538 fad0 09CB     		orl	%ecx, %ebx
 34539 fad2 8D4807   		leal	7(%rax), %ecx
 34540 fad5 83C006   		addl	$6, %eax
 34541 fad8 0FB68000 		movzbl	VM_memory(%rax), %eax
 34541      000000
11213:src/vm3.c     **** 
 34542              		.loc 1 11213 0
GAS LISTING /tmp/cc15eBE3.s 			page 1140


 34543 fadf 0FB6D2   		movzbl	%dl, %edx
 34544              		.loc 1 11215 0
 34545 fae2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34545      000000
11213:src/vm3.c     **** 
 34546              		.loc 1 11213 0
 34547 fae9 48C1E204 		salq	$4, %rdx
 34548              	.LVL3246:
 34549              		.loc 1 11215 0
 34550 faed C1E008   		sall	$8, %eax
 34551 faf0 09CB     		orl	%ecx, %ebx
 34552 faf2 09C3     		orl	%eax, %ebx
 34553              	.LVL3247:
11216:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34554              		.loc 1 11216 0
 34555 faf4 89D9     		movl	%ebx, %ecx
11217:src/vm3.c     ****   if (op1 == 0x0) {
11218:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34556              		.loc 1 11218 0
 34557 faf6 88D8     		movb	%bl, %al
11216:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34558              		.loc 1 11216 0
 34559 faf8 C1E91A   		shrl	$26, %ecx
 34560              	.LVL3248:
 34561              		.loc 1 11218 0
 34562 fafb 83E03F   		andl	$63, %eax
 34563 fafe 8D712B   		leal	43(%rcx), %esi
 34564 fb01 84C9     		testb	%cl, %cl
 34565 fb03 0F45C6   		cmovne	%esi, %eax
 34566              	.LVL3249:
11219:src/vm3.c     ****     op1 = op1 + funct;
11220:src/vm3.c     ****   }
11221:src/vm3.c     ****     else {
11222:src/vm3.c     ****     op1 = op1 + FIX_OP;
11223:src/vm3.c     ****   }
11224:src/vm3.c     **** 
11225:src/vm3.c     **** goto *p[op1].code;
 34567              		.loc 1 11225 0
 34568 fb06 0FB6C0   		movzbl	%al, %eax
 34569 fb09 48C1E004 		salq	$4, %rax
 34570              	.LVL3250:
 34571 fb0d 48038414 		addq	58088(%rsp,%rdx), %rax
 34571      E8E20000 
 34572 fb15 488B08   		movq	(%rax), %rcx
 34573 fb18 E93B12FF 		jmp	.L269
 34573      FF
 34574              	.LVL3251:
 34575              	.L160:
11226:src/vm3.c     **** 
11227:src/vm3.c     **** 
11228:src/vm3.c     **** errorPLUSerror:
11229:src/vm3.c     **** #if INDIRECT_DEBUG
11230:src/vm3.c     **** printf("Error, unknown instr0uction %d.\n", instr0);
11231:src/vm3.c     **** #endif
11232:src/vm3.c     **** PC  =  nPC;
11233:src/vm3.c     **** nPC  += 4;
 34576              		.loc 1 11233 0
GAS LISTING /tmp/cc15eBE3.s 			page 1141


 34577 fb1d 8B050000 		movl	nPC(%rip), %eax
 34577      0000
 34578 fb23 8D5004   		leal	4(%rax), %edx
11234:src/vm3.c     **** 
11235:src/vm3.c     **** #if INDIRECT_DEBUG
11236:src/vm3.c     **** printf("Error, unknown instr1uction %d.\n", instr1);
11237:src/vm3.c     **** #endif
11238:src/vm3.c     **** PC  =  nPC;
11239:src/vm3.c     **** nPC  += 4;
11240:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34579              		.loc 1 11240 0
 34580 fb26 8D7007   		leal	7(%rax), %esi
11239:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34581              		.loc 1 11239 0
 34582 fb29 8D4808   		leal	8(%rax), %ecx
11238:src/vm3.c     **** nPC  += 4;
 34583              		.loc 1 11238 0
 34584 fb2c 89150000 		movl	%edx, PC(%rip)
 34584      0000
 34585              		.loc 1 11240 0
 34586 fb32 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34586      000000
 34587 fb39 440FB686 		movzbl	VM_memory(%rsi), %r8d
 34587      00000000 
 34588              	.LVL3252:
11241:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11242:src/vm3.c     ****   if (op0 == 0x0) {
11243:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11244:src/vm3.c     ****     op0 = op0 + funct;
11245:src/vm3.c     ****   }
11246:src/vm3.c     ****     else {
11247:src/vm3.c     ****     op0 = op0 + FIX_OP;
11248:src/vm3.c     ****   }
11249:src/vm3.c     **** 
11250:src/vm3.c     **** p = array;
11251:src/vm3.c     **** p = p[op0].next_level;
11252:src/vm3.c     **** 
11253:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 34589              		.loc 1 11253 0
 34590 fb41 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34590      000000
 34591              	.LVL3253:
11239:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34592              		.loc 1 11239 0
 34593 fb48 890D0000 		movl	%ecx, nPC(%rip)
 34593      0000
 34594              		.loc 1 11253 0
 34595 fb4e 8D4809   		leal	9(%rax), %ecx
11240:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34596              		.loc 1 11240 0
 34597 fb51 C1E218   		sall	$24, %edx
 34598              		.loc 1 11253 0
 34599 fb54 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34599      000000
11240:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34600              		.loc 1 11240 0
 34601 fb5b 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1142


 34602 fb5e 8D5005   		leal	5(%rax), %edx
 34603 fb61 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34603      000000
 34604 fb68 C1E210   		sall	$16, %edx
 34605 fb6b 4109D0   		orl	%edx, %r8d
 34606 fb6e 8D5006   		leal	6(%rax), %edx
 34607 fb71 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34607      000000
 34608 fb78 C1E208   		sall	$8, %edx
 34609 fb7b 4109D0   		orl	%edx, %r8d
 34610              	.LVL3254:
11241:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34611              		.loc 1 11241 0
 34612 fb7e 4489C6   		movl	%r8d, %esi
11243:src/vm3.c     ****     op0 = op0 + funct;
 34613              		.loc 1 11243 0
 34614 fb81 4488C2   		movb	%r8b, %dl
11241:src/vm3.c     ****   if (op0 == 0x0) {
 34615              		.loc 1 11241 0
 34616 fb84 C1EE1A   		shrl	$26, %esi
 34617              	.LVL3255:
11243:src/vm3.c     ****     op0 = op0 + funct;
 34618              		.loc 1 11243 0
 34619 fb87 83E23F   		andl	$63, %edx
 34620 fb8a 8D7E2B   		leal	43(%rsi), %edi
 34621 fb8d 4084F6   		testb	%sil, %sil
 34622 fb90 0F45D7   		cmovne	%edi, %edx
 34623              	.LVL3256:
 34624              		.loc 1 11253 0
 34625 fb93 C1E110   		sall	$16, %ecx
 34626 fb96 C1E318   		sall	$24, %ebx
 34627 fb99 09CB     		orl	%ecx, %ebx
 34628 fb9b 8D480B   		leal	11(%rax), %ecx
 34629 fb9e 83C00A   		addl	$10, %eax
 34630 fba1 0FB68000 		movzbl	VM_memory(%rax), %eax
 34630      000000
11251:src/vm3.c     **** 
 34631              		.loc 1 11251 0
 34632 fba8 0FB6D2   		movzbl	%dl, %edx
 34633              		.loc 1 11253 0
 34634 fbab 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34634      000000
11251:src/vm3.c     **** 
 34635              		.loc 1 11251 0
 34636 fbb2 48C1E204 		salq	$4, %rdx
 34637              	.LVL3257:
 34638              		.loc 1 11253 0
 34639 fbb6 C1E008   		sall	$8, %eax
 34640 fbb9 09CB     		orl	%ecx, %ebx
 34641 fbbb 09C3     		orl	%eax, %ebx
 34642              	.LVL3258:
11254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34643              		.loc 1 11254 0
 34644 fbbd 89D9     		movl	%ebx, %ecx
11255:src/vm3.c     ****   if (op1 == 0x0) {
11256:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34645              		.loc 1 11256 0
GAS LISTING /tmp/cc15eBE3.s 			page 1143


 34646 fbbf 88D8     		movb	%bl, %al
11254:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34647              		.loc 1 11254 0
 34648 fbc1 C1E91A   		shrl	$26, %ecx
 34649              	.LVL3259:
 34650              		.loc 1 11256 0
 34651 fbc4 83E03F   		andl	$63, %eax
 34652 fbc7 8D712B   		leal	43(%rcx), %esi
 34653 fbca 84C9     		testb	%cl, %cl
 34654 fbcc 0F45C6   		cmovne	%esi, %eax
 34655              	.LVL3260:
11257:src/vm3.c     ****     op1 = op1 + funct;
11258:src/vm3.c     ****   }
11259:src/vm3.c     ****     else {
11260:src/vm3.c     ****     op1 = op1 + FIX_OP;
11261:src/vm3.c     ****   }
11262:src/vm3.c     **** 
11263:src/vm3.c     **** goto *p[op1].code;
 34656              		.loc 1 11263 0
 34657 fbcf 0FB6C0   		movzbl	%al, %eax
 34658 fbd2 48C1E004 		salq	$4, %rax
 34659              	.LVL3261:
 34660 fbd6 48038414 		addq	58088(%rsp,%rdx), %rax
 34660      E8E20000 
 34661 fbde 488B08   		movq	(%rax), %rcx
 34662 fbe1 E97211FF 		jmp	.L269
 34662      FF
 34663              	.LVL3262:
 34664              	.L103:
11264:src/vm3.c     **** 
11265:src/vm3.c     **** 
11266:src/vm3.c     **** lwPLUSlbu:
11267:src/vm3.c     **** #if INDIRECT_DEBUG
11268:src/vm3.c     **** printf("%d|lw\n",counter);
11269:src/vm3.c     **** counter++;
11270:src/vm3.c     **** #endif
11271:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 34665              		.loc 1 11271 0
 34666 fbe6 4489C0   		movl	%r8d, %eax
11272:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11273:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11274:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 34667              		.loc 1 11274 0
 34668 fbe9 410FBFD0 		movswl	%r8w, %edx
11272:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34669              		.loc 1 11272 0
 34670 fbed 41C1E810 		shrl	$16, %r8d
 34671              	.LVL3263:
11271:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34672              		.loc 1 11271 0
 34673 fbf1 C1E815   		shrl	$21, %eax
 34674              	.LVL3264:
 34675              		.loc 1 11274 0
 34676 fbf4 4183E01F 		andl	$31, %r8d
11275:src/vm3.c     **** PC  =  nPC;
11276:src/vm3.c     **** nPC  += 4;
 34677              		.loc 1 11276 0
GAS LISTING /tmp/cc15eBE3.s 			page 1144


 34678 fbf8 83050000 		addl	$4, nPC(%rip)
 34678      000004
 34679              	.LVL3265:
11274:src/vm3.c     **** PC  =  nPC;
 34680              		.loc 1 11274 0
 34681 fbff 83E01F   		andl	$31, %eax
 34682 fc02 03148500 		addl	RF(,%rax,4), %edx
 34682      000000
 34683 fc09 8D4203   		leal	3(%rdx), %eax
 34684 fc0c 89D1     		movl	%edx, %ecx
 34685 fc0e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34685      000000
 34686 fc15 0FB68000 		movzbl	VM_memory(%rax), %eax
 34686      000000
 34687 fc1c C1E118   		sall	$24, %ecx
 34688 fc1f 09C8     		orl	%ecx, %eax
 34689 fc21 8D4A01   		leal	1(%rdx), %ecx
 34690 fc24 83C202   		addl	$2, %edx
 34691 fc27 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34691      000000
 34692 fc2e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34692      000000
 34693 fc35 C1E208   		sall	$8, %edx
 34694 fc38 C1E110   		sall	$16, %ecx
 34695 fc3b 09C8     		orl	%ecx, %eax
 34696 fc3d 09D0     		orl	%edx, %eax
11277:src/vm3.c     **** 
11278:src/vm3.c     **** #if INDIRECT_DEBUG
11279:src/vm3.c     **** printf("%d|lbu\n",counter);
11280:src/vm3.c     **** counter++;
11281:src/vm3.c     **** #endif
11282:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 34697              		.loc 1 11282 0
 34698 fc3f 89DA     		movl	%ebx, %edx
 34699 fc41 C1EA15   		shrl	$21, %edx
11274:src/vm3.c     **** PC  =  nPC;
 34700              		.loc 1 11274 0
 34701 fc44 42890485 		movl	%eax, RF(,%r8,4)
 34701      00000000 
11283:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34702              		.loc 1 11283 0
 34703 fc4c 89D8     		movl	%ebx, %eax
11284:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11285:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 34704              		.loc 1 11285 0
 34705 fc4e 83E21F   		andl	$31, %edx
 34706 fc51 0FBFDB   		movswl	%bx, %ebx
 34707              	.LVL3266:
11283:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34708              		.loc 1 11283 0
 34709 fc54 C1E810   		shrl	$16, %eax
 34710              	.LVL3267:
 34711              		.loc 1 11285 0
 34712 fc57 031C9500 		addl	RF(,%rdx,4), %ebx
 34712      000000
 34713              	.LVL3268:
 34714 fc5e 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1145


 34715 fc61 0FB69300 		movzbl	VM_memory(%rbx), %edx
 34715      000000
 34716 fc68 89148500 		movl	%edx, RF(,%rax,4)
 34716      000000
11286:src/vm3.c     **** PC  =  nPC;
 34717              		.loc 1 11286 0
 34718 fc6f 8B050000 		movl	nPC(%rip), %eax
 34718      0000
11287:src/vm3.c     **** nPC  += 4;
11288:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34719              		.loc 1 11288 0
 34720 fc75 8D5003   		leal	3(%rax), %edx
11287:src/vm3.c     **** nPC  += 4;
 34721              		.loc 1 11287 0
 34722 fc78 8D4804   		leal	4(%rax), %ecx
11286:src/vm3.c     **** PC  =  nPC;
 34723              		.loc 1 11286 0
 34724 fc7b 89050000 		movl	%eax, PC(%rip)
 34724      0000
 34725              		.loc 1 11288 0
 34726 fc81 440FB682 		movzbl	VM_memory(%rdx), %r8d
 34726      00000000 
 34727 fc89 89C2     		movl	%eax, %edx
11289:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11290:src/vm3.c     ****   if (op0 == 0x0) {
11291:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11292:src/vm3.c     ****     op0 = op0 + funct;
11293:src/vm3.c     ****   }
11294:src/vm3.c     ****     else {
11295:src/vm3.c     ****     op0 = op0 + FIX_OP;
11296:src/vm3.c     ****   }
11297:src/vm3.c     **** 
11298:src/vm3.c     **** p = array;
11299:src/vm3.c     **** p = p[op0].next_level;
11300:src/vm3.c     **** 
11301:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 34728              		.loc 1 11301 0
 34729 fc8b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34729      000000
11288:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34730              		.loc 1 11288 0
 34731 fc92 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34731      000000
11287:src/vm3.c     **** nPC  += 4;
 34732              		.loc 1 11287 0
 34733 fc99 890D0000 		movl	%ecx, nPC(%rip)
 34733      0000
 34734              		.loc 1 11301 0
 34735 fc9f 8D4805   		leal	5(%rax), %ecx
 34736 fca2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34736      000000
11288:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34737              		.loc 1 11288 0
 34738 fca9 C1E218   		sall	$24, %edx
 34739 fcac 4109D0   		orl	%edx, %r8d
 34740 fcaf 8D5001   		leal	1(%rax), %edx
 34741 fcb2 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1146


 34741      000000
 34742 fcb9 C1E210   		sall	$16, %edx
 34743 fcbc 4109D0   		orl	%edx, %r8d
 34744 fcbf 8D5002   		leal	2(%rax), %edx
 34745 fcc2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34745      000000
 34746 fcc9 C1E208   		sall	$8, %edx
 34747 fccc 4109D0   		orl	%edx, %r8d
 34748              	.LVL3269:
11289:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34749              		.loc 1 11289 0
 34750 fccf 4489C6   		movl	%r8d, %esi
11291:src/vm3.c     ****     op0 = op0 + funct;
 34751              		.loc 1 11291 0
 34752 fcd2 4488C2   		movb	%r8b, %dl
11289:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34753              		.loc 1 11289 0
 34754 fcd5 C1EE1A   		shrl	$26, %esi
 34755              	.LVL3270:
11291:src/vm3.c     ****     op0 = op0 + funct;
 34756              		.loc 1 11291 0
 34757 fcd8 83E23F   		andl	$63, %edx
 34758 fcdb 8D7E2B   		leal	43(%rsi), %edi
 34759 fcde 4084F6   		testb	%sil, %sil
 34760 fce1 0F45D7   		cmovne	%edi, %edx
 34761              	.LVL3271:
 34762              		.loc 1 11301 0
 34763 fce4 C1E110   		sall	$16, %ecx
 34764 fce7 C1E318   		sall	$24, %ebx
 34765 fcea 09CB     		orl	%ecx, %ebx
 34766 fcec 8D4807   		leal	7(%rax), %ecx
 34767 fcef 83C006   		addl	$6, %eax
 34768 fcf2 0FB68000 		movzbl	VM_memory(%rax), %eax
 34768      000000
11299:src/vm3.c     **** 
 34769              		.loc 1 11299 0
 34770 fcf9 0FB6D2   		movzbl	%dl, %edx
 34771              		.loc 1 11301 0
 34772 fcfc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34772      000000
11299:src/vm3.c     **** 
 34773              		.loc 1 11299 0
 34774 fd03 48C1E204 		salq	$4, %rdx
 34775              	.LVL3272:
 34776              		.loc 1 11301 0
 34777 fd07 C1E008   		sall	$8, %eax
 34778 fd0a 09CB     		orl	%ecx, %ebx
 34779 fd0c 09C3     		orl	%eax, %ebx
 34780              	.LVL3273:
11302:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34781              		.loc 1 11302 0
 34782 fd0e 89D9     		movl	%ebx, %ecx
11303:src/vm3.c     ****   if (op1 == 0x0) {
11304:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34783              		.loc 1 11304 0
 34784 fd10 88D8     		movb	%bl, %al
11302:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1147


 34785              		.loc 1 11302 0
 34786 fd12 C1E91A   		shrl	$26, %ecx
 34787              	.LVL3274:
 34788              		.loc 1 11304 0
 34789 fd15 83E03F   		andl	$63, %eax
 34790 fd18 8D712B   		leal	43(%rcx), %esi
 34791 fd1b 84C9     		testb	%cl, %cl
 34792 fd1d 0F45C6   		cmovne	%esi, %eax
 34793              	.LVL3275:
11305:src/vm3.c     ****     op1 = op1 + funct;
11306:src/vm3.c     ****   }
11307:src/vm3.c     ****     else {
11308:src/vm3.c     ****     op1 = op1 + FIX_OP;
11309:src/vm3.c     ****   }
11310:src/vm3.c     **** 
11311:src/vm3.c     **** goto *p[op1].code;
 34794              		.loc 1 11311 0
 34795 fd20 0FB6C0   		movzbl	%al, %eax
 34796 fd23 48C1E004 		salq	$4, %rax
 34797              	.LVL3276:
 34798 fd27 48038414 		addq	58088(%rsp,%rdx), %rax
 34798      E8E20000 
 34799 fd2f 488B08   		movq	(%rax), %rcx
 34800 fd32 E92110FF 		jmp	.L269
 34800      FF
 34801              	.LVL3277:
 34802              	.L21:
11312:src/vm3.c     **** 
11313:src/vm3.c     **** 
11314:src/vm3.c     **** sllPLUSor:
11315:src/vm3.c     **** #if INDIRECT_DEBUG
11316:src/vm3.c     **** printf("%d|sll\n",counter);
11317:src/vm3.c     **** counter++;
11318:src/vm3.c     **** #endif
11319:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
11320:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34803              		.loc 1 11320 0
 34804 fd37 4489C0   		movl	%r8d, %eax
11321:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 34805              		.loc 1 11321 0
 34806 fd3a 4489C2   		movl	%r8d, %edx
11319:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34807              		.loc 1 11319 0
 34808 fd3d 41C1E806 		shrl	$6, %r8d
 34809              	.LVL3278:
11320:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 34810              		.loc 1 11320 0
 34811 fd41 C1E810   		shrl	$16, %eax
 34812              	.LVL3279:
11319:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34813              		.loc 1 11319 0
 34814 fd44 4488C1   		movb	%r8b, %cl
 34815              		.loc 1 11321 0
 34816 fd47 C1EA0B   		shrl	$11, %edx
 34817              	.LVL3280:
11322:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 34818              		.loc 1 11322 0
GAS LISTING /tmp/cc15eBE3.s 			page 1148


 34819 fd4a 83E01F   		andl	$31, %eax
11319:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34820              		.loc 1 11319 0
 34821 fd4d 83E11F   		andl	$31, %ecx
 34822              		.loc 1 11322 0
 34823 fd50 83E21F   		andl	$31, %edx
 34824 fd53 8B048500 		movl	RF(,%rax,4), %eax
 34824      000000
11323:src/vm3.c     **** PC  =  nPC;
11324:src/vm3.c     **** nPC  += 4;
 34825              		.loc 1 11324 0
 34826 fd5a 83050000 		addl	$4, nPC(%rip)
 34826      000004
 34827              	.LVL3281:
11322:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 34828              		.loc 1 11322 0
 34829 fd61 D3E0     		sall	%cl, %eax
 34830 fd63 89049500 		movl	%eax, RF(,%rdx,4)
 34830      000000
11325:src/vm3.c     **** 
11326:src/vm3.c     **** #if INDIRECT_DEBUG
11327:src/vm3.c     **** printf("%d|or\n",counter);
11328:src/vm3.c     **** counter++;
11329:src/vm3.c     **** #endif
11330:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11331:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34831              		.loc 1 11331 0
 34832 fd6a 89D8     		movl	%ebx, %eax
11332:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 34833              		.loc 1 11332 0
 34834 fd6c 89DA     		movl	%ebx, %edx
11331:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 34835              		.loc 1 11331 0
 34836 fd6e C1E810   		shrl	$16, %eax
11330:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34837              		.loc 1 11330 0
 34838 fd71 C1EB15   		shrl	$21, %ebx
 34839              	.LVL3282:
 34840              		.loc 1 11332 0
 34841 fd74 C1EA0B   		shrl	$11, %edx
 34842              	.LVL3283:
11333:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 34843              		.loc 1 11333 0
 34844 fd77 83E31F   		andl	$31, %ebx
 34845 fd7a 83E01F   		andl	$31, %eax
 34846 fd7d 83E21F   		andl	$31, %edx
 34847 fd80 8B048500 		movl	RF(,%rax,4), %eax
 34847      000000
 34848 fd87 0B049D00 		orl	RF(,%rbx,4), %eax
 34848      000000
 34849 fd8e 89049500 		movl	%eax, RF(,%rdx,4)
 34849      000000
11334:src/vm3.c     **** PC  =  nPC;
 34850              		.loc 1 11334 0
 34851 fd95 8B050000 		movl	nPC(%rip), %eax
 34851      0000
11335:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1149


11336:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 34852              		.loc 1 11336 0
 34853 fd9b 8D5003   		leal	3(%rax), %edx
11335:src/vm3.c     **** nPC  += 4;
 34854              		.loc 1 11335 0
 34855 fd9e 8D4804   		leal	4(%rax), %ecx
11334:src/vm3.c     **** PC  =  nPC;
 34856              		.loc 1 11334 0
 34857 fda1 89050000 		movl	%eax, PC(%rip)
 34857      0000
 34858              		.loc 1 11336 0
 34859 fda7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 34859      00000000 
 34860 fdaf 89C2     		movl	%eax, %edx
11337:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11338:src/vm3.c     ****   if (op0 == 0x0) {
11339:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11340:src/vm3.c     ****     op0 = op0 + funct;
11341:src/vm3.c     ****   }
11342:src/vm3.c     ****     else {
11343:src/vm3.c     ****     op0 = op0 + FIX_OP;
11344:src/vm3.c     ****   }
11345:src/vm3.c     **** 
11346:src/vm3.c     **** p = array;
11347:src/vm3.c     **** p = p[op0].next_level;
11348:src/vm3.c     **** 
11349:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 34861              		.loc 1 11349 0
 34862 fdb1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 34862      000000
11336:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34863              		.loc 1 11336 0
 34864 fdb8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34864      000000
11335:src/vm3.c     **** nPC  += 4;
 34865              		.loc 1 11335 0
 34866 fdbf 890D0000 		movl	%ecx, nPC(%rip)
 34866      0000
 34867              		.loc 1 11349 0
 34868 fdc5 8D4805   		leal	5(%rax), %ecx
 34869 fdc8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34869      000000
11336:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34870              		.loc 1 11336 0
 34871 fdcf C1E218   		sall	$24, %edx
 34872 fdd2 4109D0   		orl	%edx, %r8d
 34873 fdd5 8D5001   		leal	1(%rax), %edx
 34874 fdd8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34874      000000
 34875 fddf C1E210   		sall	$16, %edx
 34876 fde2 4109D0   		orl	%edx, %r8d
 34877 fde5 8D5002   		leal	2(%rax), %edx
 34878 fde8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 34878      000000
 34879 fdef C1E208   		sall	$8, %edx
 34880 fdf2 4109D0   		orl	%edx, %r8d
 34881              	.LVL3284:
GAS LISTING /tmp/cc15eBE3.s 			page 1150


11337:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34882              		.loc 1 11337 0
 34883 fdf5 4489C6   		movl	%r8d, %esi
11339:src/vm3.c     ****     op0 = op0 + funct;
 34884              		.loc 1 11339 0
 34885 fdf8 4488C2   		movb	%r8b, %dl
11337:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 34886              		.loc 1 11337 0
 34887 fdfb C1EE1A   		shrl	$26, %esi
 34888              	.LVL3285:
11339:src/vm3.c     ****     op0 = op0 + funct;
 34889              		.loc 1 11339 0
 34890 fdfe 83E23F   		andl	$63, %edx
 34891 fe01 8D7E2B   		leal	43(%rsi), %edi
 34892 fe04 4084F6   		testb	%sil, %sil
 34893 fe07 0F45D7   		cmovne	%edi, %edx
 34894              	.LVL3286:
 34895              		.loc 1 11349 0
 34896 fe0a C1E110   		sall	$16, %ecx
 34897 fe0d C1E318   		sall	$24, %ebx
 34898 fe10 09CB     		orl	%ecx, %ebx
 34899 fe12 8D4807   		leal	7(%rax), %ecx
 34900 fe15 83C006   		addl	$6, %eax
 34901 fe18 0FB68000 		movzbl	VM_memory(%rax), %eax
 34901      000000
11347:src/vm3.c     **** 
 34902              		.loc 1 11347 0
 34903 fe1f 0FB6D2   		movzbl	%dl, %edx
 34904              		.loc 1 11349 0
 34905 fe22 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 34905      000000
11347:src/vm3.c     **** 
 34906              		.loc 1 11347 0
 34907 fe29 48C1E204 		salq	$4, %rdx
 34908              	.LVL3287:
 34909              		.loc 1 11349 0
 34910 fe2d C1E008   		sall	$8, %eax
 34911 fe30 09CB     		orl	%ecx, %ebx
 34912 fe32 09C3     		orl	%eax, %ebx
 34913              	.LVL3288:
11350:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34914              		.loc 1 11350 0
 34915 fe34 89D9     		movl	%ebx, %ecx
11351:src/vm3.c     ****   if (op1 == 0x0) {
11352:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 34916              		.loc 1 11352 0
 34917 fe36 88D8     		movb	%bl, %al
11350:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 34918              		.loc 1 11350 0
 34919 fe38 C1E91A   		shrl	$26, %ecx
 34920              	.LVL3289:
 34921              		.loc 1 11352 0
 34922 fe3b 83E03F   		andl	$63, %eax
 34923 fe3e 8D712B   		leal	43(%rcx), %esi
 34924 fe41 84C9     		testb	%cl, %cl
 34925 fe43 0F45C6   		cmovne	%esi, %eax
 34926              	.LVL3290:
GAS LISTING /tmp/cc15eBE3.s 			page 1151


11353:src/vm3.c     ****     op1 = op1 + funct;
11354:src/vm3.c     ****   }
11355:src/vm3.c     ****     else {
11356:src/vm3.c     ****     op1 = op1 + FIX_OP;
11357:src/vm3.c     ****   }
11358:src/vm3.c     **** 
11359:src/vm3.c     **** goto *p[op1].code;
 34927              		.loc 1 11359 0
 34928 fe46 0FB6C0   		movzbl	%al, %eax
 34929 fe49 48C1E004 		salq	$4, %rax
 34930              	.LVL3291:
 34931 fe4d 48038414 		addq	58088(%rsp,%rdx), %rax
 34931      E8E20000 
 34932 fe55 488B08   		movq	(%rax), %rcx
 34933 fe58 E9FB0EFF 		jmp	.L269
 34933      FF
 34934              	.LVL3292:
 34935              	.L113:
11360:src/vm3.c     **** 
11361:src/vm3.c     **** 
11362:src/vm3.c     **** sltPLUSbeq:
11363:src/vm3.c     **** #if INDIRECT_DEBUG
11364:src/vm3.c     **** printf("%d|slt\n",counter);
11365:src/vm3.c     **** counter++;
11366:src/vm3.c     **** #endif
11367:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 34936              		.loc 1 11367 0
 34937 fe5d 4489C2   		movl	%r8d, %edx
11368:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11369:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 34938              		.loc 1 11369 0
 34939 fe60 4489C0   		movl	%r8d, %eax
11368:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34940              		.loc 1 11368 0
 34941 fe63 41C1E810 		shrl	$16, %r8d
 34942              	.LVL3293:
11367:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 34943              		.loc 1 11367 0
 34944 fe67 C1EA15   		shrl	$21, %edx
11370:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 34945              		.loc 1 11370 0
 34946 fe6a 4183E01F 		andl	$31, %r8d
11369:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 34947              		.loc 1 11369 0
 34948 fe6e C1E80B   		shrl	$11, %eax
 34949              	.LVL3294:
 34950              		.loc 1 11370 0
 34951 fe71 83E21F   		andl	$31, %edx
 34952 fe74 428B3C85 		movl	RF(,%r8,4), %edi
 34952      00000000 
 34953 fe7c 83E01F   		andl	$31, %eax
 34954 fe7f 393C9500 		cmpl	%edi, RF(,%rdx,4)
 34954      000000
11371:src/vm3.c     **** PC  =  nPC;
11372:src/vm3.c     **** nPC  += 4;
11373:src/vm3.c     **** 
11374:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 1152


11375:src/vm3.c     **** printf("%d|beq\n",counter);
11376:src/vm3.c     **** counter++;
11377:src/vm3.c     **** #endif
11378:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 34955              		.loc 1 11378 0
 34956 fe86 89DE     		movl	%ebx, %esi
11379:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34957              		.loc 1 11379 0
 34958 fe88 89D9     		movl	%ebx, %ecx
11370:src/vm3.c     **** PC  =  nPC;
 34959              		.loc 1 11370 0
 34960 fe8a 0F92C2   		setb	%dl
11378:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 34961              		.loc 1 11378 0
 34962 fe8d C1EE15   		shrl	$21, %esi
 34963              		.loc 1 11379 0
 34964 fe90 C1E910   		shrl	$16, %ecx
11370:src/vm3.c     **** PC  =  nPC;
 34965              		.loc 1 11370 0
 34966 fe93 0FB6D2   		movzbl	%dl, %edx
11380:src/vm3.c     **** if (RF[rs] == RF[rt])
 34967              		.loc 1 11380 0
 34968 fe96 83E61F   		andl	$31, %esi
 34969 fe99 83E11F   		andl	$31, %ecx
11370:src/vm3.c     **** PC  =  nPC;
 34970              		.loc 1 11370 0
 34971 fe9c 89148500 		movl	%edx, RF(,%rax,4)
 34971      000000
11371:src/vm3.c     **** nPC  += 4;
 34972              		.loc 1 11371 0
 34973 fea3 8B050000 		movl	nPC(%rip), %eax
 34973      0000
 34974              		.loc 1 11380 0
 34975 fea9 8B3C8D00 		movl	RF(,%rcx,4), %edi
 34975      000000
 34976 feb0 393CB500 		cmpl	%edi, RF(,%rsi,4)
 34976      000000
11372:src/vm3.c     **** 
 34977              		.loc 1 11372 0
 34978 feb7 8D5004   		leal	4(%rax), %edx
 34979              	.LVL3295:
 34980 feba 448D4007 		leal	7(%rax), %r8d
 34981 febe 8D7805   		leal	5(%rax), %edi
 34982 fec1 8D7006   		leal	6(%rax), %esi
 34983 fec4 4189D1   		movl	%edx, %r9d
11381:src/vm3.c     **** {
11382:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
11383:src/vm3.c     ****   PC  =  nPC;
 34984              		.loc 1 11383 0
 34985 fec7 89150000 		movl	%edx, PC(%rip)
 34985      0000
11380:src/vm3.c     **** {
 34986              		.loc 1 11380 0
 34987 fecd 0F85B600 		jne	.L1254
 34987      0000
 34988              	.LVL3296:
11384:src/vm3.c     ****   nPC  += (immediate << 2);
GAS LISTING /tmp/cc15eBE3.s 			page 1153


 34989              		.loc 1 11384 0
 34990 fed3 0FBFDB   		movswl	%bx, %ebx
 34991              	.LVL3297:
11385:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 34992              		.loc 1 11385 0
 34993 fed6 450FB680 		movzbl	VM_memory(%r8), %r8d
 34993      00000000 
11384:src/vm3.c     ****   nPC  += (immediate << 2);
 34994              		.loc 1 11384 0
 34995 fede 8D049A   		leal	(%rdx,%rbx,4), %eax
 34996              		.loc 1 11385 0
 34997 fee1 410FB691 		movzbl	VM_memory(%r9), %edx
 34997      00000000 
11384:src/vm3.c     ****   nPC  += (immediate << 2);
 34998              		.loc 1 11384 0
 34999 fee9 89050000 		movl	%eax, nPC(%rip)
 34999      0000
 35000              		.loc 1 11385 0
 35001 feef C1E218   		sall	$24, %edx
 35002 fef2 4109D0   		orl	%edx, %r8d
 35003 fef5 0FB69700 		movzbl	VM_memory(%rdi), %edx
 35003      000000
 35004 fefc C1E210   		sall	$16, %edx
 35005 feff 4109D0   		orl	%edx, %r8d
 35006 ff02 0FB69600 		movzbl	VM_memory(%rsi), %edx
 35006      000000
 35007 ff09 C1E208   		sall	$8, %edx
 35008 ff0c 4109D0   		orl	%edx, %r8d
 35009              	.LVL3298:
11386:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35010              		.loc 1 11386 0
 35011 ff0f 4489C1   		movl	%r8d, %ecx
11387:src/vm3.c     ****   if (op0 == 0x0) {
11388:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 35012              		.loc 1 11388 0
 35013 ff12 4488C2   		movb	%r8b, %dl
11386:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35014              		.loc 1 11386 0
 35015 ff15 C1E91A   		shrl	$26, %ecx
 35016              	.LVL3299:
 35017              		.loc 1 11388 0
 35018 ff18 83E23F   		andl	$63, %edx
 35019 ff1b 8D712B   		leal	43(%rcx), %esi
 35020 ff1e 84C9     		testb	%cl, %cl
11389:src/vm3.c     ****     op0 = op0 + funct;
11390:src/vm3.c     ****   }
11391:src/vm3.c     ****     else {
11392:src/vm3.c     ****     op0 = op0 + FIX_OP;
11393:src/vm3.c     ****   }
11394:src/vm3.c     **** 
11395:src/vm3.c     **** p = array;
11396:src/vm3.c     **** p = p[op0].next_level;
11397:src/vm3.c     **** 
11398:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35021              		.loc 1 11398 0
 35022 ff20 8D4803   		leal	3(%rax), %ecx
 35023              	.LVL3300:
GAS LISTING /tmp/cc15eBE3.s 			page 1154


 35024 ff23 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35024      000000
 35025              	.LVL3301:
 35026 ff2a 89C1     		movl	%eax, %ecx
11388:src/vm3.c     ****     op0 = op0 + funct;
 35027              		.loc 1 11388 0
 35028 ff2c 0F45D6   		cmovne	%esi, %edx
 35029              	.LVL3302:
 35030              		.loc 1 11398 0
 35031 ff2f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35031      000000
11396:src/vm3.c     **** 
 35032              		.loc 1 11396 0
 35033 ff36 0FB6D2   		movzbl	%dl, %edx
 35034 ff39 48C1E204 		salq	$4, %rdx
 35035              	.LVL3303:
 35036              		.loc 1 11398 0
 35037 ff3d C1E118   		sall	$24, %ecx
 35038 ff40 09CB     		orl	%ecx, %ebx
 35039 ff42 8D4801   		leal	1(%rax), %ecx
 35040 ff45 83C002   		addl	$2, %eax
 35041 ff48 0FB68000 		movzbl	VM_memory(%rax), %eax
 35041      000000
 35042 ff4f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35042      000000
 35043 ff56 C1E008   		sall	$8, %eax
 35044 ff59 C1E110   		sall	$16, %ecx
 35045 ff5c 09CB     		orl	%ecx, %ebx
 35046 ff5e 09C3     		orl	%eax, %ebx
 35047              	.LVL3304:
11399:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35048              		.loc 1 11399 0
 35049 ff60 89D9     		movl	%ebx, %ecx
11400:src/vm3.c     ****   if (op1 == 0x0) {
11401:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35050              		.loc 1 11401 0
 35051 ff62 88D8     		movb	%bl, %al
11399:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35052              		.loc 1 11399 0
 35053 ff64 C1E91A   		shrl	$26, %ecx
 35054              	.LVL3305:
 35055              		.loc 1 11401 0
 35056 ff67 83E03F   		andl	$63, %eax
 35057 ff6a 8D712B   		leal	43(%rcx), %esi
 35058 ff6d 84C9     		testb	%cl, %cl
 35059 ff6f 0F45C6   		cmovne	%esi, %eax
 35060              	.LVL3306:
11402:src/vm3.c     ****     op1 = op1 + funct;
11403:src/vm3.c     ****   }
11404:src/vm3.c     ****     else {
11405:src/vm3.c     ****     op1 = op1 + FIX_OP;
11406:src/vm3.c     ****   }
11407:src/vm3.c     **** 
11408:src/vm3.c     **** goto *p[op1].code;
 35061              		.loc 1 11408 0
 35062 ff72 0FB6C0   		movzbl	%al, %eax
 35063 ff75 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1155


 35064              	.LVL3307:
 35065 ff79 48038414 		addq	58088(%rsp,%rdx), %rax
 35065      E8E20000 
 35066 ff81 488B08   		movq	(%rax), %rcx
 35067 ff84 E9CF0DFF 		jmp	.L269
 35067      FF
 35068              	.LVL3308:
 35069              	.L1254:
11409:src/vm3.c     **** 
11410:src/vm3.c     **** 
11411:src/vm3.c     **** }
11412:src/vm3.c     **** else
11413:src/vm3.c     **** {
11414:src/vm3.c     ****   PC  =  nPC;
11415:src/vm3.c     ****   nPC  += 4;
11416:src/vm3.c     **** }
11417:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35070              		.loc 1 11417 0
 35071 ff89 410FB691 		movzbl	VM_memory(%r9), %edx
 35071      00000000 
 35072 ff91 450FB680 		movzbl	VM_memory(%r8), %r8d
 35072      00000000 
11415:src/vm3.c     **** }
 35073              		.loc 1 11415 0
 35074 ff99 8D4808   		leal	8(%rax), %ecx
11418:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11419:src/vm3.c     ****   if (op0 == 0x0) {
11420:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11421:src/vm3.c     ****     op0 = op0 + funct;
11422:src/vm3.c     ****   }
11423:src/vm3.c     ****     else {
11424:src/vm3.c     ****     op0 = op0 + FIX_OP;
11425:src/vm3.c     ****   }
11426:src/vm3.c     **** 
11427:src/vm3.c     **** p = array;
11428:src/vm3.c     **** p = p[op0].next_level;
11429:src/vm3.c     **** 
11430:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35075              		.loc 1 11430 0
 35076 ff9c 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35076      000000
 35077              	.LVL3309:
11415:src/vm3.c     **** }
 35078              		.loc 1 11415 0
 35079 ffa3 890D0000 		movl	%ecx, nPC(%rip)
 35079      0000
 35080              		.loc 1 11430 0
 35081 ffa9 8D4809   		leal	9(%rax), %ecx
11417:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35082              		.loc 1 11417 0
 35083 ffac C1E218   		sall	$24, %edx
 35084              		.loc 1 11430 0
 35085 ffaf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35085      000000
11417:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35086              		.loc 1 11417 0
 35087 ffb6 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1156


 35088 ffb9 0FB69700 		movzbl	VM_memory(%rdi), %edx
 35088      000000
 35089 ffc0 C1E210   		sall	$16, %edx
 35090 ffc3 4109D0   		orl	%edx, %r8d
 35091 ffc6 0FB69600 		movzbl	VM_memory(%rsi), %edx
 35091      000000
 35092 ffcd C1E208   		sall	$8, %edx
 35093 ffd0 4109D0   		orl	%edx, %r8d
 35094              	.LVL3310:
11418:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35095              		.loc 1 11418 0
 35096 ffd3 4489C6   		movl	%r8d, %esi
11420:src/vm3.c     ****     op0 = op0 + funct;
 35097              		.loc 1 11420 0
 35098 ffd6 4488C2   		movb	%r8b, %dl
11418:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35099              		.loc 1 11418 0
 35100 ffd9 C1EE1A   		shrl	$26, %esi
 35101              	.LVL3311:
11420:src/vm3.c     ****     op0 = op0 + funct;
 35102              		.loc 1 11420 0
 35103 ffdc 83E23F   		andl	$63, %edx
 35104 ffdf 8D7E2B   		leal	43(%rsi), %edi
 35105 ffe2 4084F6   		testb	%sil, %sil
 35106 ffe5 0F45D7   		cmovne	%edi, %edx
 35107              	.LVL3312:
 35108              		.loc 1 11430 0
 35109 ffe8 C1E110   		sall	$16, %ecx
 35110 ffeb C1E318   		sall	$24, %ebx
 35111 ffee 09CB     		orl	%ecx, %ebx
 35112 fff0 8D480B   		leal	11(%rax), %ecx
 35113 fff3 83C00A   		addl	$10, %eax
 35114 fff6 0FB68000 		movzbl	VM_memory(%rax), %eax
 35114      000000
11428:src/vm3.c     **** 
 35115              		.loc 1 11428 0
 35116 fffd 0FB6D2   		movzbl	%dl, %edx
 35117              		.loc 1 11430 0
 35118 10000 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35118      000000
11428:src/vm3.c     **** 
 35119              		.loc 1 11428 0
 35120 10007 48C1E204 		salq	$4, %rdx
 35121              	.LVL3313:
 35122              		.loc 1 11430 0
 35123 1000b C1E008   		sall	$8, %eax
 35124 1000e 09CB     		orl	%ecx, %ebx
 35125 10010 09C3     		orl	%eax, %ebx
 35126              	.LVL3314:
11431:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35127              		.loc 1 11431 0
 35128 10012 89D9     		movl	%ebx, %ecx
11432:src/vm3.c     ****   if (op1 == 0x0) {
11433:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35129              		.loc 1 11433 0
 35130 10014 88D8     		movb	%bl, %al
11431:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1157


 35131              		.loc 1 11431 0
 35132 10016 C1E91A   		shrl	$26, %ecx
 35133              	.LVL3315:
 35134              		.loc 1 11433 0
 35135 10019 83E03F   		andl	$63, %eax
 35136 1001c 8D712B   		leal	43(%rcx), %esi
 35137 1001f 84C9     		testb	%cl, %cl
 35138 10021 0F45C6   		cmovne	%esi, %eax
 35139              	.LVL3316:
11434:src/vm3.c     ****     op1 = op1 + funct;
11435:src/vm3.c     ****   }
11436:src/vm3.c     ****     else {
11437:src/vm3.c     ****     op1 = op1 + FIX_OP;
11438:src/vm3.c     ****   }
11439:src/vm3.c     **** 
11440:src/vm3.c     **** goto *p[op1].code;
 35140              		.loc 1 11440 0
 35141 10024 0FB6C0   		movzbl	%al, %eax
 35142 10027 48C1E004 		salq	$4, %rax
 35143              	.LVL3317:
 35144 1002b 48038414 		addq	58088(%rsp,%rdx), %rax
 35144      E8E20000 
 35145 10033 488B08   		movq	(%rax), %rcx
 35146 10036 E91D0DFF 		jmp	.L269
 35146      FF
 35147              	.LVL3318:
 35148              	.L101:
11441:src/vm3.c     **** 
11442:src/vm3.c     **** 
11443:src/vm3.c     **** lwPLUSori:
11444:src/vm3.c     **** #if INDIRECT_DEBUG
11445:src/vm3.c     **** printf("%d|lw\n",counter);
11446:src/vm3.c     **** counter++;
11447:src/vm3.c     **** #endif
11448:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 35149              		.loc 1 11448 0
 35150 1003b 4489C0   		movl	%r8d, %eax
11449:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11450:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11451:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 35151              		.loc 1 11451 0
 35152 1003e 410FBFD0 		movswl	%r8w, %edx
11449:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35153              		.loc 1 11449 0
 35154 10042 41C1E810 		shrl	$16, %r8d
 35155              	.LVL3319:
11448:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35156              		.loc 1 11448 0
 35157 10046 C1E815   		shrl	$21, %eax
 35158              	.LVL3320:
 35159              		.loc 1 11451 0
 35160 10049 4183E01F 		andl	$31, %r8d
11452:src/vm3.c     **** PC  =  nPC;
11453:src/vm3.c     **** nPC  += 4;
 35161              		.loc 1 11453 0
 35162 1004d 83050000 		addl	$4, nPC(%rip)
 35162      000004
GAS LISTING /tmp/cc15eBE3.s 			page 1158


 35163              	.LVL3321:
11451:src/vm3.c     **** PC  =  nPC;
 35164              		.loc 1 11451 0
 35165 10054 83E01F   		andl	$31, %eax
 35166 10057 03148500 		addl	RF(,%rax,4), %edx
 35166      000000
 35167 1005e 8D4203   		leal	3(%rdx), %eax
 35168 10061 89D1     		movl	%edx, %ecx
 35169 10063 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35169      000000
 35170 1006a 0FB68000 		movzbl	VM_memory(%rax), %eax
 35170      000000
 35171 10071 C1E118   		sall	$24, %ecx
 35172 10074 09C8     		orl	%ecx, %eax
 35173 10076 8D4A01   		leal	1(%rdx), %ecx
 35174 10079 83C202   		addl	$2, %edx
 35175 1007c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35175      000000
 35176 10083 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35176      000000
 35177 1008a C1E208   		sall	$8, %edx
 35178 1008d C1E110   		sall	$16, %ecx
 35179 10090 09C8     		orl	%ecx, %eax
 35180 10092 09D0     		orl	%edx, %eax
11454:src/vm3.c     **** 
11455:src/vm3.c     **** #if INDIRECT_DEBUG
11456:src/vm3.c     **** printf("%d|ori\n",counter);
11457:src/vm3.c     **** counter++;
11458:src/vm3.c     **** #endif
11459:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 35181              		.loc 1 11459 0
 35182 10094 89DA     		movl	%ebx, %edx
 35183 10096 C1EA15   		shrl	$21, %edx
11451:src/vm3.c     **** PC  =  nPC;
 35184              		.loc 1 11451 0
 35185 10099 42890485 		movl	%eax, RF(,%r8,4)
 35185      00000000 
11460:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35186              		.loc 1 11460 0
 35187 100a1 89D8     		movl	%ebx, %eax
11461:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11462:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
 35188              		.loc 1 11462 0
 35189 100a3 83E21F   		andl	$31, %edx
 35190 100a6 0FBFDB   		movswl	%bx, %ebx
 35191              	.LVL3322:
11460:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35192              		.loc 1 11460 0
 35193 100a9 C1E810   		shrl	$16, %eax
 35194              	.LVL3323:
 35195              		.loc 1 11462 0
 35196 100ac 0B1C9500 		orl	RF(,%rdx,4), %ebx
 35196      000000
 35197              	.LVL3324:
 35198 100b3 83E01F   		andl	$31, %eax
 35199 100b6 891C8500 		movl	%ebx, RF(,%rax,4)
 35199      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1159


11463:src/vm3.c     **** PC  =  nPC;
 35200              		.loc 1 11463 0
 35201 100bd 8B050000 		movl	nPC(%rip), %eax
 35201      0000
11464:src/vm3.c     **** nPC  += 4;
11465:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35202              		.loc 1 11465 0
 35203 100c3 8D5003   		leal	3(%rax), %edx
11464:src/vm3.c     **** nPC  += 4;
 35204              		.loc 1 11464 0
 35205 100c6 8D4804   		leal	4(%rax), %ecx
11463:src/vm3.c     **** PC  =  nPC;
 35206              		.loc 1 11463 0
 35207 100c9 89050000 		movl	%eax, PC(%rip)
 35207      0000
 35208              		.loc 1 11465 0
 35209 100cf 440FB682 		movzbl	VM_memory(%rdx), %r8d
 35209      00000000 
 35210 100d7 89C2     		movl	%eax, %edx
11466:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11467:src/vm3.c     ****   if (op0 == 0x0) {
11468:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11469:src/vm3.c     ****     op0 = op0 + funct;
11470:src/vm3.c     ****   }
11471:src/vm3.c     ****     else {
11472:src/vm3.c     ****     op0 = op0 + FIX_OP;
11473:src/vm3.c     ****   }
11474:src/vm3.c     **** 
11475:src/vm3.c     **** p = array;
11476:src/vm3.c     **** p = p[op0].next_level;
11477:src/vm3.c     **** 
11478:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35211              		.loc 1 11478 0
 35212 100d9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35212      000000
11465:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35213              		.loc 1 11465 0
 35214 100e0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35214      000000
11464:src/vm3.c     **** nPC  += 4;
 35215              		.loc 1 11464 0
 35216 100e7 890D0000 		movl	%ecx, nPC(%rip)
 35216      0000
 35217              		.loc 1 11478 0
 35218 100ed 8D4805   		leal	5(%rax), %ecx
 35219 100f0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35219      000000
11465:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35220              		.loc 1 11465 0
 35221 100f7 C1E218   		sall	$24, %edx
 35222 100fa 4109D0   		orl	%edx, %r8d
 35223 100fd 8D5001   		leal	1(%rax), %edx
 35224 10100 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35224      000000
 35225 10107 C1E210   		sall	$16, %edx
 35226 1010a 4109D0   		orl	%edx, %r8d
 35227 1010d 8D5002   		leal	2(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1160


 35228 10110 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35228      000000
 35229 10117 C1E208   		sall	$8, %edx
 35230 1011a 4109D0   		orl	%edx, %r8d
 35231              	.LVL3325:
11466:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35232              		.loc 1 11466 0
 35233 1011d 4489C6   		movl	%r8d, %esi
11468:src/vm3.c     ****     op0 = op0 + funct;
 35234              		.loc 1 11468 0
 35235 10120 4488C2   		movb	%r8b, %dl
11466:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35236              		.loc 1 11466 0
 35237 10123 C1EE1A   		shrl	$26, %esi
 35238              	.LVL3326:
11468:src/vm3.c     ****     op0 = op0 + funct;
 35239              		.loc 1 11468 0
 35240 10126 83E23F   		andl	$63, %edx
 35241 10129 8D7E2B   		leal	43(%rsi), %edi
 35242 1012c 4084F6   		testb	%sil, %sil
 35243 1012f 0F45D7   		cmovne	%edi, %edx
 35244              	.LVL3327:
 35245              		.loc 1 11478 0
 35246 10132 C1E110   		sall	$16, %ecx
 35247 10135 C1E318   		sall	$24, %ebx
 35248 10138 09CB     		orl	%ecx, %ebx
 35249 1013a 8D4807   		leal	7(%rax), %ecx
 35250 1013d 83C006   		addl	$6, %eax
 35251 10140 0FB68000 		movzbl	VM_memory(%rax), %eax
 35251      000000
11476:src/vm3.c     **** 
 35252              		.loc 1 11476 0
 35253 10147 0FB6D2   		movzbl	%dl, %edx
 35254              		.loc 1 11478 0
 35255 1014a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35255      000000
11476:src/vm3.c     **** 
 35256              		.loc 1 11476 0
 35257 10151 48C1E204 		salq	$4, %rdx
 35258              	.LVL3328:
 35259              		.loc 1 11478 0
 35260 10155 C1E008   		sall	$8, %eax
 35261 10158 09CB     		orl	%ecx, %ebx
 35262 1015a 09C3     		orl	%eax, %ebx
 35263              	.LVL3329:
11479:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35264              		.loc 1 11479 0
 35265 1015c 89D9     		movl	%ebx, %ecx
11480:src/vm3.c     ****   if (op1 == 0x0) {
11481:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35266              		.loc 1 11481 0
 35267 1015e 88D8     		movb	%bl, %al
11479:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35268              		.loc 1 11479 0
 35269 10160 C1E91A   		shrl	$26, %ecx
 35270              	.LVL3330:
 35271              		.loc 1 11481 0
GAS LISTING /tmp/cc15eBE3.s 			page 1161


 35272 10163 83E03F   		andl	$63, %eax
 35273 10166 8D712B   		leal	43(%rcx), %esi
 35274 10169 84C9     		testb	%cl, %cl
 35275 1016b 0F45C6   		cmovne	%esi, %eax
 35276              	.LVL3331:
11482:src/vm3.c     ****     op1 = op1 + funct;
11483:src/vm3.c     ****   }
11484:src/vm3.c     ****     else {
11485:src/vm3.c     ****     op1 = op1 + FIX_OP;
11486:src/vm3.c     ****   }
11487:src/vm3.c     **** 
11488:src/vm3.c     **** goto *p[op1].code;
 35277              		.loc 1 11488 0
 35278 1016e 0FB6C0   		movzbl	%al, %eax
 35279 10171 48C1E004 		salq	$4, %rax
 35280              	.LVL3332:
 35281 10175 48038414 		addq	58088(%rsp,%rdx), %rax
 35281      E8E20000 
 35282 1017d 488B08   		movq	(%rax), %rcx
 35283 10180 E9D30BFF 		jmp	.L269
 35283      FF
 35284              	.LVL3333:
 35285              	.L102:
11489:src/vm3.c     **** 
11490:src/vm3.c     **** 
11491:src/vm3.c     **** lwPLUSlw:
11492:src/vm3.c     **** #if INDIRECT_DEBUG
11493:src/vm3.c     **** printf("%d|lw\n",counter);
11494:src/vm3.c     **** counter++;
11495:src/vm3.c     **** #endif
11496:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 35286              		.loc 1 11496 0
 35287 10185 4489C0   		movl	%r8d, %eax
11497:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11498:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11499:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 35288              		.loc 1 11499 0
 35289 10188 410FBFD0 		movswl	%r8w, %edx
11497:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35290              		.loc 1 11497 0
 35291 1018c 41C1E810 		shrl	$16, %r8d
 35292              	.LVL3334:
11496:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35293              		.loc 1 11496 0
 35294 10190 C1E815   		shrl	$21, %eax
 35295              	.LVL3335:
 35296              		.loc 1 11499 0
 35297 10193 4183E01F 		andl	$31, %r8d
11500:src/vm3.c     **** PC  =  nPC;
11501:src/vm3.c     **** nPC  += 4;
 35298              		.loc 1 11501 0
 35299 10197 83050000 		addl	$4, nPC(%rip)
 35299      000004
 35300              	.LVL3336:
11499:src/vm3.c     **** PC  =  nPC;
 35301              		.loc 1 11499 0
 35302 1019e 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1162


 35303 101a1 03148500 		addl	RF(,%rax,4), %edx
 35303      000000
 35304 101a8 8D4203   		leal	3(%rdx), %eax
 35305 101ab 89D1     		movl	%edx, %ecx
 35306 101ad 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35306      000000
 35307 101b4 0FB68000 		movzbl	VM_memory(%rax), %eax
 35307      000000
 35308 101bb C1E118   		sall	$24, %ecx
 35309 101be 09C8     		orl	%ecx, %eax
 35310 101c0 8D4A01   		leal	1(%rdx), %ecx
 35311 101c3 83C202   		addl	$2, %edx
 35312 101c6 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35312      000000
 35313 101cd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35313      000000
 35314 101d4 C1E208   		sall	$8, %edx
 35315 101d7 C1E110   		sall	$16, %ecx
 35316 101da 09C8     		orl	%ecx, %eax
 35317 101dc 09D0     		orl	%edx, %eax
11502:src/vm3.c     **** 
11503:src/vm3.c     **** #if INDIRECT_DEBUG
11504:src/vm3.c     **** printf("%d|lw\n",counter);
11505:src/vm3.c     **** counter++;
11506:src/vm3.c     **** #endif
11507:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11508:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
11509:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11510:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 35318              		.loc 1 11510 0
 35319 101de 0FBFD3   		movswl	%bx, %edx
11499:src/vm3.c     **** PC  =  nPC;
 35320              		.loc 1 11499 0
 35321 101e1 42890485 		movl	%eax, RF(,%r8,4)
 35321      00000000 
11507:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35322              		.loc 1 11507 0
 35323 101e9 89D8     		movl	%ebx, %eax
11508:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 35324              		.loc 1 11508 0
 35325 101eb C1EB10   		shrl	$16, %ebx
 35326              	.LVL3337:
11507:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35327              		.loc 1 11507 0
 35328 101ee C1E815   		shrl	$21, %eax
 35329              	.LVL3338:
 35330              		.loc 1 11510 0
 35331 101f1 83E31F   		andl	$31, %ebx
 35332 101f4 83E01F   		andl	$31, %eax
 35333 101f7 03148500 		addl	RF(,%rax,4), %edx
 35333      000000
 35334              	.LVL3339:
 35335 101fe 8D4203   		leal	3(%rdx), %eax
 35336 10201 89D1     		movl	%edx, %ecx
 35337 10203 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35337      000000
 35338 1020a 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1163


 35338      000000
 35339 10211 C1E118   		sall	$24, %ecx
 35340 10214 09C8     		orl	%ecx, %eax
 35341 10216 8D4A01   		leal	1(%rdx), %ecx
 35342 10219 83C202   		addl	$2, %edx
 35343 1021c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35343      000000
 35344 10223 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35344      000000
 35345 1022a C1E208   		sall	$8, %edx
 35346 1022d C1E110   		sall	$16, %ecx
 35347 10230 09C8     		orl	%ecx, %eax
 35348 10232 09D0     		orl	%edx, %eax
 35349 10234 89049D00 		movl	%eax, RF(,%rbx,4)
 35349      000000
11511:src/vm3.c     **** PC  =  nPC;
 35350              		.loc 1 11511 0
 35351 1023b 8B050000 		movl	nPC(%rip), %eax
 35351      0000
11512:src/vm3.c     **** nPC  += 4;
11513:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35352              		.loc 1 11513 0
 35353 10241 8D5003   		leal	3(%rax), %edx
11512:src/vm3.c     **** nPC  += 4;
 35354              		.loc 1 11512 0
 35355 10244 8D4804   		leal	4(%rax), %ecx
11511:src/vm3.c     **** PC  =  nPC;
 35356              		.loc 1 11511 0
 35357 10247 89050000 		movl	%eax, PC(%rip)
 35357      0000
 35358              		.loc 1 11513 0
 35359 1024d 440FB682 		movzbl	VM_memory(%rdx), %r8d
 35359      00000000 
 35360 10255 89C2     		movl	%eax, %edx
11514:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11515:src/vm3.c     ****   if (op0 == 0x0) {
11516:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11517:src/vm3.c     ****     op0 = op0 + funct;
11518:src/vm3.c     ****   }
11519:src/vm3.c     ****     else {
11520:src/vm3.c     ****     op0 = op0 + FIX_OP;
11521:src/vm3.c     ****   }
11522:src/vm3.c     **** 
11523:src/vm3.c     **** p = array;
11524:src/vm3.c     **** p = p[op0].next_level;
11525:src/vm3.c     **** 
11526:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35361              		.loc 1 11526 0
 35362 10257 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35362      000000
11513:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35363              		.loc 1 11513 0
 35364 1025e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35364      000000
11512:src/vm3.c     **** nPC  += 4;
 35365              		.loc 1 11512 0
 35366 10265 890D0000 		movl	%ecx, nPC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 1164


 35366      0000
 35367              		.loc 1 11526 0
 35368 1026b 8D4805   		leal	5(%rax), %ecx
 35369 1026e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35369      000000
11513:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35370              		.loc 1 11513 0
 35371 10275 C1E218   		sall	$24, %edx
 35372 10278 4109D0   		orl	%edx, %r8d
 35373 1027b 8D5001   		leal	1(%rax), %edx
 35374 1027e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35374      000000
 35375 10285 C1E210   		sall	$16, %edx
 35376 10288 4109D0   		orl	%edx, %r8d
 35377 1028b 8D5002   		leal	2(%rax), %edx
 35378 1028e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35378      000000
 35379 10295 C1E208   		sall	$8, %edx
 35380 10298 4109D0   		orl	%edx, %r8d
 35381              	.LVL3340:
11514:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35382              		.loc 1 11514 0
 35383 1029b 4489C6   		movl	%r8d, %esi
11516:src/vm3.c     ****     op0 = op0 + funct;
 35384              		.loc 1 11516 0
 35385 1029e 4488C2   		movb	%r8b, %dl
11514:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35386              		.loc 1 11514 0
 35387 102a1 C1EE1A   		shrl	$26, %esi
 35388              	.LVL3341:
11516:src/vm3.c     ****     op0 = op0 + funct;
 35389              		.loc 1 11516 0
 35390 102a4 83E23F   		andl	$63, %edx
 35391 102a7 8D7E2B   		leal	43(%rsi), %edi
 35392 102aa 4084F6   		testb	%sil, %sil
 35393 102ad 0F45D7   		cmovne	%edi, %edx
 35394              	.LVL3342:
 35395              		.loc 1 11526 0
 35396 102b0 C1E110   		sall	$16, %ecx
 35397 102b3 C1E318   		sall	$24, %ebx
 35398 102b6 09CB     		orl	%ecx, %ebx
 35399 102b8 8D4807   		leal	7(%rax), %ecx
 35400 102bb 83C006   		addl	$6, %eax
 35401 102be 0FB68000 		movzbl	VM_memory(%rax), %eax
 35401      000000
11524:src/vm3.c     **** 
 35402              		.loc 1 11524 0
 35403 102c5 0FB6D2   		movzbl	%dl, %edx
 35404              		.loc 1 11526 0
 35405 102c8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35405      000000
11524:src/vm3.c     **** 
 35406              		.loc 1 11524 0
 35407 102cf 48C1E204 		salq	$4, %rdx
 35408              	.LVL3343:
 35409              		.loc 1 11526 0
 35410 102d3 C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1165


 35411 102d6 09CB     		orl	%ecx, %ebx
 35412 102d8 09C3     		orl	%eax, %ebx
 35413              	.LVL3344:
11527:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35414              		.loc 1 11527 0
 35415 102da 89D9     		movl	%ebx, %ecx
11528:src/vm3.c     ****   if (op1 == 0x0) {
11529:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35416              		.loc 1 11529 0
 35417 102dc 88D8     		movb	%bl, %al
11527:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35418              		.loc 1 11527 0
 35419 102de C1E91A   		shrl	$26, %ecx
 35420              	.LVL3345:
 35421              		.loc 1 11529 0
 35422 102e1 83E03F   		andl	$63, %eax
 35423 102e4 8D712B   		leal	43(%rcx), %esi
 35424 102e7 84C9     		testb	%cl, %cl
 35425 102e9 0F45C6   		cmovne	%esi, %eax
 35426              	.LVL3346:
11530:src/vm3.c     ****     op1 = op1 + funct;
11531:src/vm3.c     ****   }
11532:src/vm3.c     ****     else {
11533:src/vm3.c     ****     op1 = op1 + FIX_OP;
11534:src/vm3.c     ****   }
11535:src/vm3.c     **** 
11536:src/vm3.c     **** goto *p[op1].code;
 35427              		.loc 1 11536 0
 35428 102ec 0FB6C0   		movzbl	%al, %eax
 35429 102ef 48C1E004 		salq	$4, %rax
 35430              	.LVL3347:
 35431 102f3 48038414 		addq	58088(%rsp,%rdx), %rax
 35431      E8E20000 
 35432 102fb 488B08   		movq	(%rax), %rcx
 35433 102fe E9550AFF 		jmp	.L269
 35433      FF
 35434              	.LVL3348:
 35435              	.L150:
11537:src/vm3.c     **** 
11538:src/vm3.c     **** 
11539:src/vm3.c     **** addiuPLUSlui:
11540:src/vm3.c     **** #if INDIRECT_DEBUG
11541:src/vm3.c     **** printf("%d|addiu\n",counter);
11542:src/vm3.c     **** counter++;
11543:src/vm3.c     **** #endif
11544:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 35436              		.loc 1 11544 0
 35437 10303 4489C2   		movl	%r8d, %edx
11545:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35438              		.loc 1 11545 0
 35439 10306 4489C0   		movl	%r8d, %eax
11546:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11547:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 35440              		.loc 1 11547 0
 35441 10309 450FBFC0 		movswl	%r8w, %r8d
 35442              	.LVL3349:
11544:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1166


 35443              		.loc 1 11544 0
 35444 1030d C1EA15   		shrl	$21, %edx
11545:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35445              		.loc 1 11545 0
 35446 10310 C1E810   		shrl	$16, %eax
 35447              	.LVL3350:
11548:src/vm3.c     **** PC  =  nPC;
11549:src/vm3.c     **** nPC  += 4;
 35448              		.loc 1 11549 0
 35449 10313 83050000 		addl	$4, nPC(%rip)
 35449      000004
 35450              	.LVL3351:
11547:src/vm3.c     **** PC  =  nPC;
 35451              		.loc 1 11547 0
 35452 1031a 83E21F   		andl	$31, %edx
 35453 1031d 83E01F   		andl	$31, %eax
 35454 10320 44030495 		addl	RF(,%rdx,4), %r8d
 35454      00000000 
 35455 10328 44890485 		movl	%r8d, RF(,%rax,4)
 35455      00000000 
11550:src/vm3.c     **** 
11551:src/vm3.c     **** #if INDIRECT_DEBUG
11552:src/vm3.c     **** printf("%d|lui\n",counter);
11553:src/vm3.c     **** counter++;
11554:src/vm3.c     **** #endif
11555:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
11556:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35456              		.loc 1 11556 0
 35457 10330 89D8     		movl	%ebx, %eax
11557:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11558:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
 35458              		.loc 1 11558 0
 35459 10332 C1E310   		sall	$16, %ebx
 35460              	.LVL3352:
11556:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 35461              		.loc 1 11556 0
 35462 10335 C1E810   		shrl	$16, %eax
 35463              	.LVL3353:
 35464              		.loc 1 11558 0
 35465 10338 83E01F   		andl	$31, %eax
 35466 1033b 891C8500 		movl	%ebx, RF(,%rax,4)
 35466      000000
11559:src/vm3.c     **** PC  =  nPC;
 35467              		.loc 1 11559 0
 35468 10342 8B050000 		movl	nPC(%rip), %eax
 35468      0000
11560:src/vm3.c     **** nPC  += 4;
11561:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35469              		.loc 1 11561 0
 35470 10348 8D5003   		leal	3(%rax), %edx
11560:src/vm3.c     **** nPC  += 4;
 35471              		.loc 1 11560 0
 35472 1034b 8D4804   		leal	4(%rax), %ecx
11559:src/vm3.c     **** PC  =  nPC;
 35473              		.loc 1 11559 0
 35474 1034e 89050000 		movl	%eax, PC(%rip)
 35474      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1167


 35475              		.loc 1 11561 0
 35476 10354 440FB682 		movzbl	VM_memory(%rdx), %r8d
 35476      00000000 
 35477 1035c 89C2     		movl	%eax, %edx
11562:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11563:src/vm3.c     ****   if (op0 == 0x0) {
11564:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11565:src/vm3.c     ****     op0 = op0 + funct;
11566:src/vm3.c     ****   }
11567:src/vm3.c     ****     else {
11568:src/vm3.c     ****     op0 = op0 + FIX_OP;
11569:src/vm3.c     ****   }
11570:src/vm3.c     **** 
11571:src/vm3.c     **** p = array;
11572:src/vm3.c     **** p = p[op0].next_level;
11573:src/vm3.c     **** 
11574:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35478              		.loc 1 11574 0
 35479 1035e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35479      000000
11561:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35480              		.loc 1 11561 0
 35481 10365 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35481      000000
11560:src/vm3.c     **** nPC  += 4;
 35482              		.loc 1 11560 0
 35483 1036c 890D0000 		movl	%ecx, nPC(%rip)
 35483      0000
 35484              		.loc 1 11574 0
 35485 10372 8D4805   		leal	5(%rax), %ecx
 35486 10375 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35486      000000
11561:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35487              		.loc 1 11561 0
 35488 1037c C1E218   		sall	$24, %edx
 35489 1037f 4109D0   		orl	%edx, %r8d
 35490 10382 8D5001   		leal	1(%rax), %edx
 35491 10385 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35491      000000
 35492 1038c C1E210   		sall	$16, %edx
 35493 1038f 4109D0   		orl	%edx, %r8d
 35494 10392 8D5002   		leal	2(%rax), %edx
 35495 10395 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35495      000000
 35496 1039c C1E208   		sall	$8, %edx
 35497 1039f 4109D0   		orl	%edx, %r8d
 35498              	.LVL3354:
11562:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35499              		.loc 1 11562 0
 35500 103a2 4489C6   		movl	%r8d, %esi
11564:src/vm3.c     ****     op0 = op0 + funct;
 35501              		.loc 1 11564 0
 35502 103a5 4488C2   		movb	%r8b, %dl
11562:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35503              		.loc 1 11562 0
 35504 103a8 C1EE1A   		shrl	$26, %esi
 35505              	.LVL3355:
GAS LISTING /tmp/cc15eBE3.s 			page 1168


11564:src/vm3.c     ****     op0 = op0 + funct;
 35506              		.loc 1 11564 0
 35507 103ab 83E23F   		andl	$63, %edx
 35508 103ae 8D7E2B   		leal	43(%rsi), %edi
 35509 103b1 4084F6   		testb	%sil, %sil
 35510 103b4 0F45D7   		cmovne	%edi, %edx
 35511              	.LVL3356:
 35512              		.loc 1 11574 0
 35513 103b7 C1E110   		sall	$16, %ecx
 35514 103ba C1E318   		sall	$24, %ebx
 35515 103bd 09CB     		orl	%ecx, %ebx
 35516 103bf 8D4807   		leal	7(%rax), %ecx
 35517 103c2 83C006   		addl	$6, %eax
 35518 103c5 0FB68000 		movzbl	VM_memory(%rax), %eax
 35518      000000
11572:src/vm3.c     **** 
 35519              		.loc 1 11572 0
 35520 103cc 0FB6D2   		movzbl	%dl, %edx
 35521              		.loc 1 11574 0
 35522 103cf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35522      000000
11572:src/vm3.c     **** 
 35523              		.loc 1 11572 0
 35524 103d6 48C1E204 		salq	$4, %rdx
 35525              	.LVL3357:
 35526              		.loc 1 11574 0
 35527 103da C1E008   		sall	$8, %eax
 35528 103dd 09CB     		orl	%ecx, %ebx
 35529 103df 09C3     		orl	%eax, %ebx
 35530              	.LVL3358:
11575:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35531              		.loc 1 11575 0
 35532 103e1 89D9     		movl	%ebx, %ecx
11576:src/vm3.c     ****   if (op1 == 0x0) {
11577:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35533              		.loc 1 11577 0
 35534 103e3 88D8     		movb	%bl, %al
11575:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35535              		.loc 1 11575 0
 35536 103e5 C1E91A   		shrl	$26, %ecx
 35537              	.LVL3359:
 35538              		.loc 1 11577 0
 35539 103e8 83E03F   		andl	$63, %eax
 35540 103eb 8D712B   		leal	43(%rcx), %esi
 35541 103ee 84C9     		testb	%cl, %cl
 35542 103f0 0F45C6   		cmovne	%esi, %eax
 35543              	.LVL3360:
11578:src/vm3.c     ****     op1 = op1 + funct;
11579:src/vm3.c     ****   }
11580:src/vm3.c     ****     else {
11581:src/vm3.c     ****     op1 = op1 + FIX_OP;
11582:src/vm3.c     ****   }
11583:src/vm3.c     **** 
11584:src/vm3.c     **** goto *p[op1].code;
 35544              		.loc 1 11584 0
 35545 103f3 0FB6C0   		movzbl	%al, %eax
 35546 103f6 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1169


 35547              	.LVL3361:
 35548 103fa 48038414 		addq	58088(%rsp,%rdx), %rax
 35548      E8E20000 
 35549 10402 488B08   		movq	(%rax), %rcx
 35550 10405 E94E09FF 		jmp	.L269
 35550      FF
 35551              	.LVL3362:
 35552              	.L55:
11585:src/vm3.c     **** 
11586:src/vm3.c     **** 
11587:src/vm3.c     **** adduPLUSaddu:
11588:src/vm3.c     **** #if INDIRECT_DEBUG
11589:src/vm3.c     **** printf("%d|addu\n",counter);
11590:src/vm3.c     **** counter++;
11591:src/vm3.c     **** #endif
11592:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
11593:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35553              		.loc 1 11593 0
 35554 1040a 4489C0   		movl	%r8d, %eax
11594:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 35555              		.loc 1 11594 0
 35556 1040d 4489C2   		movl	%r8d, %edx
11592:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35557              		.loc 1 11592 0
 35558 10410 41C1E815 		shrl	$21, %r8d
 35559              	.LVL3363:
11593:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 35560              		.loc 1 11593 0
 35561 10414 C1E810   		shrl	$16, %eax
 35562              	.LVL3364:
11595:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 35563              		.loc 1 11595 0
 35564 10417 4183E01F 		andl	$31, %r8d
11594:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 35565              		.loc 1 11594 0
 35566 1041b C1EA0B   		shrl	$11, %edx
 35567              	.LVL3365:
 35568              		.loc 1 11595 0
 35569 1041e 83E01F   		andl	$31, %eax
 35570 10421 83E21F   		andl	$31, %edx
11596:src/vm3.c     **** PC  =  nPC;
11597:src/vm3.c     **** nPC  += 4;
 35571              		.loc 1 11597 0
 35572 10424 83050000 		addl	$4, nPC(%rip)
 35572      000004
 35573              	.LVL3366:
11595:src/vm3.c     **** PC  =  nPC;
 35574              		.loc 1 11595 0
 35575 1042b 8B048500 		movl	RF(,%rax,4), %eax
 35575      000000
 35576 10432 42030485 		addl	RF(,%r8,4), %eax
 35576      00000000 
 35577 1043a 89049500 		movl	%eax, RF(,%rdx,4)
 35577      000000
11598:src/vm3.c     **** 
11599:src/vm3.c     **** #if INDIRECT_DEBUG
11600:src/vm3.c     **** printf("%d|addu\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 1170


11601:src/vm3.c     **** counter++;
11602:src/vm3.c     **** #endif
11603:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11604:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35578              		.loc 1 11604 0
 35579 10441 89D8     		movl	%ebx, %eax
11605:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35580              		.loc 1 11605 0
 35581 10443 89DA     		movl	%ebx, %edx
11604:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35582              		.loc 1 11604 0
 35583 10445 C1E810   		shrl	$16, %eax
11603:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35584              		.loc 1 11603 0
 35585 10448 C1EB15   		shrl	$21, %ebx
 35586              	.LVL3367:
 35587              		.loc 1 11605 0
 35588 1044b C1EA0B   		shrl	$11, %edx
 35589              	.LVL3368:
11606:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 35590              		.loc 1 11606 0
 35591 1044e 83E31F   		andl	$31, %ebx
 35592 10451 83E01F   		andl	$31, %eax
 35593 10454 83E21F   		andl	$31, %edx
 35594 10457 8B048500 		movl	RF(,%rax,4), %eax
 35594      000000
 35595 1045e 03049D00 		addl	RF(,%rbx,4), %eax
 35595      000000
 35596 10465 89049500 		movl	%eax, RF(,%rdx,4)
 35596      000000
11607:src/vm3.c     **** PC  =  nPC;
 35597              		.loc 1 11607 0
 35598 1046c 8B050000 		movl	nPC(%rip), %eax
 35598      0000
11608:src/vm3.c     **** nPC  += 4;
11609:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35599              		.loc 1 11609 0
 35600 10472 8D5003   		leal	3(%rax), %edx
11608:src/vm3.c     **** nPC  += 4;
 35601              		.loc 1 11608 0
 35602 10475 8D4804   		leal	4(%rax), %ecx
11607:src/vm3.c     **** PC  =  nPC;
 35603              		.loc 1 11607 0
 35604 10478 89050000 		movl	%eax, PC(%rip)
 35604      0000
 35605              		.loc 1 11609 0
 35606 1047e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 35606      00000000 
 35607 10486 89C2     		movl	%eax, %edx
11610:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11611:src/vm3.c     ****   if (op0 == 0x0) {
11612:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11613:src/vm3.c     ****     op0 = op0 + funct;
11614:src/vm3.c     ****   }
11615:src/vm3.c     ****     else {
11616:src/vm3.c     ****     op0 = op0 + FIX_OP;
11617:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 1171


11618:src/vm3.c     **** 
11619:src/vm3.c     **** p = array;
11620:src/vm3.c     **** p = p[op0].next_level;
11621:src/vm3.c     **** 
11622:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35608              		.loc 1 11622 0
 35609 10488 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35609      000000
11609:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35610              		.loc 1 11609 0
 35611 1048f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35611      000000
11608:src/vm3.c     **** nPC  += 4;
 35612              		.loc 1 11608 0
 35613 10496 890D0000 		movl	%ecx, nPC(%rip)
 35613      0000
 35614              		.loc 1 11622 0
 35615 1049c 8D4805   		leal	5(%rax), %ecx
 35616 1049f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35616      000000
11609:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35617              		.loc 1 11609 0
 35618 104a6 C1E218   		sall	$24, %edx
 35619 104a9 4109D0   		orl	%edx, %r8d
 35620 104ac 8D5001   		leal	1(%rax), %edx
 35621 104af 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35621      000000
 35622 104b6 C1E210   		sall	$16, %edx
 35623 104b9 4109D0   		orl	%edx, %r8d
 35624 104bc 8D5002   		leal	2(%rax), %edx
 35625 104bf 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35625      000000
 35626 104c6 C1E208   		sall	$8, %edx
 35627 104c9 4109D0   		orl	%edx, %r8d
 35628              	.LVL3369:
11610:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35629              		.loc 1 11610 0
 35630 104cc 4489C6   		movl	%r8d, %esi
11612:src/vm3.c     ****     op0 = op0 + funct;
 35631              		.loc 1 11612 0
 35632 104cf 4488C2   		movb	%r8b, %dl
11610:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35633              		.loc 1 11610 0
 35634 104d2 C1EE1A   		shrl	$26, %esi
 35635              	.LVL3370:
11612:src/vm3.c     ****     op0 = op0 + funct;
 35636              		.loc 1 11612 0
 35637 104d5 83E23F   		andl	$63, %edx
 35638 104d8 8D7E2B   		leal	43(%rsi), %edi
 35639 104db 4084F6   		testb	%sil, %sil
 35640 104de 0F45D7   		cmovne	%edi, %edx
 35641              	.LVL3371:
 35642              		.loc 1 11622 0
 35643 104e1 C1E110   		sall	$16, %ecx
 35644 104e4 C1E318   		sall	$24, %ebx
 35645 104e7 09CB     		orl	%ecx, %ebx
 35646 104e9 8D4807   		leal	7(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1172


 35647 104ec 83C006   		addl	$6, %eax
 35648 104ef 0FB68000 		movzbl	VM_memory(%rax), %eax
 35648      000000
11620:src/vm3.c     **** 
 35649              		.loc 1 11620 0
 35650 104f6 0FB6D2   		movzbl	%dl, %edx
 35651              		.loc 1 11622 0
 35652 104f9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35652      000000
11620:src/vm3.c     **** 
 35653              		.loc 1 11620 0
 35654 10500 48C1E204 		salq	$4, %rdx
 35655              	.LVL3372:
 35656              		.loc 1 11622 0
 35657 10504 C1E008   		sall	$8, %eax
 35658 10507 09CB     		orl	%ecx, %ebx
 35659 10509 09C3     		orl	%eax, %ebx
 35660              	.LVL3373:
11623:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35661              		.loc 1 11623 0
 35662 1050b 89D9     		movl	%ebx, %ecx
11624:src/vm3.c     ****   if (op1 == 0x0) {
11625:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35663              		.loc 1 11625 0
 35664 1050d 88D8     		movb	%bl, %al
11623:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35665              		.loc 1 11623 0
 35666 1050f C1E91A   		shrl	$26, %ecx
 35667              	.LVL3374:
 35668              		.loc 1 11625 0
 35669 10512 83E03F   		andl	$63, %eax
 35670 10515 8D712B   		leal	43(%rcx), %esi
 35671 10518 84C9     		testb	%cl, %cl
 35672 1051a 0F45C6   		cmovne	%esi, %eax
 35673              	.LVL3375:
11626:src/vm3.c     ****     op1 = op1 + funct;
11627:src/vm3.c     ****   }
11628:src/vm3.c     ****     else {
11629:src/vm3.c     ****     op1 = op1 + FIX_OP;
11630:src/vm3.c     ****   }
11631:src/vm3.c     **** 
11632:src/vm3.c     **** goto *p[op1].code;
 35674              		.loc 1 11632 0
 35675 1051d 0FB6C0   		movzbl	%al, %eax
 35676 10520 48C1E004 		salq	$4, %rax
 35677              	.LVL3376:
 35678 10524 48038414 		addq	58088(%rsp,%rdx), %rax
 35678      E8E20000 
 35679 1052c 488B08   		movq	(%rax), %rcx
 35680 1052f E92408FF 		jmp	.L269
 35680      FF
 35681              	.LVL3377:
 35682              	.L112:
11633:src/vm3.c     **** 
11634:src/vm3.c     **** 
11635:src/vm3.c     **** sltPLUSaddu:
11636:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 1173


11637:src/vm3.c     **** printf("%d|slt\n",counter);
11638:src/vm3.c     **** counter++;
11639:src/vm3.c     **** #endif
11640:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 35683              		.loc 1 11640 0
 35684 10534 4489C2   		movl	%r8d, %edx
11641:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11642:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 35685              		.loc 1 11642 0
 35686 10537 4489C0   		movl	%r8d, %eax
11641:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35687              		.loc 1 11641 0
 35688 1053a 41C1E810 		shrl	$16, %r8d
 35689              	.LVL3378:
11640:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35690              		.loc 1 11640 0
 35691 1053e C1EA15   		shrl	$21, %edx
11643:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 35692              		.loc 1 11643 0
 35693 10541 4183E01F 		andl	$31, %r8d
11642:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 35694              		.loc 1 11642 0
 35695 10545 C1E80B   		shrl	$11, %eax
 35696              	.LVL3379:
 35697              		.loc 1 11643 0
 35698 10548 83E21F   		andl	$31, %edx
 35699 1054b 428B3C85 		movl	RF(,%r8,4), %edi
 35699      00000000 
 35700 10553 83E01F   		andl	$31, %eax
 35701 10556 393C9500 		cmpl	%edi, RF(,%rdx,4)
 35701      000000
 35702 1055d 0F92C2   		setb	%dl
11644:src/vm3.c     **** PC  =  nPC;
11645:src/vm3.c     **** nPC  += 4;
 35703              		.loc 1 11645 0
 35704 10560 83050000 		addl	$4, nPC(%rip)
 35704      000004
 35705              	.LVL3380:
11643:src/vm3.c     **** PC  =  nPC;
 35706              		.loc 1 11643 0
 35707 10567 0FB6D2   		movzbl	%dl, %edx
 35708 1056a 89148500 		movl	%edx, RF(,%rax,4)
 35708      000000
11646:src/vm3.c     **** 
11647:src/vm3.c     **** #if INDIRECT_DEBUG
11648:src/vm3.c     **** printf("%d|addu\n",counter);
11649:src/vm3.c     **** counter++;
11650:src/vm3.c     **** #endif
11651:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11652:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35709              		.loc 1 11652 0
 35710 10571 89D8     		movl	%ebx, %eax
11653:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35711              		.loc 1 11653 0
 35712 10573 89DA     		movl	%ebx, %edx
11652:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35713              		.loc 1 11652 0
GAS LISTING /tmp/cc15eBE3.s 			page 1174


 35714 10575 C1E810   		shrl	$16, %eax
11651:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35715              		.loc 1 11651 0
 35716 10578 C1EB15   		shrl	$21, %ebx
 35717              	.LVL3381:
 35718              		.loc 1 11653 0
 35719 1057b C1EA0B   		shrl	$11, %edx
 35720              	.LVL3382:
11654:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 35721              		.loc 1 11654 0
 35722 1057e 83E31F   		andl	$31, %ebx
 35723 10581 83E01F   		andl	$31, %eax
 35724 10584 83E21F   		andl	$31, %edx
 35725 10587 8B048500 		movl	RF(,%rax,4), %eax
 35725      000000
 35726 1058e 03049D00 		addl	RF(,%rbx,4), %eax
 35726      000000
 35727 10595 89049500 		movl	%eax, RF(,%rdx,4)
 35727      000000
11655:src/vm3.c     **** PC  =  nPC;
 35728              		.loc 1 11655 0
 35729 1059c 8B050000 		movl	nPC(%rip), %eax
 35729      0000
11656:src/vm3.c     **** nPC  += 4;
11657:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35730              		.loc 1 11657 0
 35731 105a2 8D5003   		leal	3(%rax), %edx
11656:src/vm3.c     **** nPC  += 4;
 35732              		.loc 1 11656 0
 35733 105a5 8D4804   		leal	4(%rax), %ecx
11655:src/vm3.c     **** PC  =  nPC;
 35734              		.loc 1 11655 0
 35735 105a8 89050000 		movl	%eax, PC(%rip)
 35735      0000
 35736              		.loc 1 11657 0
 35737 105ae 440FB682 		movzbl	VM_memory(%rdx), %r8d
 35737      00000000 
 35738 105b6 89C2     		movl	%eax, %edx
11658:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11659:src/vm3.c     ****   if (op0 == 0x0) {
11660:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11661:src/vm3.c     ****     op0 = op0 + funct;
11662:src/vm3.c     ****   }
11663:src/vm3.c     ****     else {
11664:src/vm3.c     ****     op0 = op0 + FIX_OP;
11665:src/vm3.c     ****   }
11666:src/vm3.c     **** 
11667:src/vm3.c     **** p = array;
11668:src/vm3.c     **** p = p[op0].next_level;
11669:src/vm3.c     **** 
11670:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35739              		.loc 1 11670 0
 35740 105b8 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35740      000000
11657:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35741              		.loc 1 11657 0
 35742 105bf 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1175


 35742      000000
11656:src/vm3.c     **** nPC  += 4;
 35743              		.loc 1 11656 0
 35744 105c6 890D0000 		movl	%ecx, nPC(%rip)
 35744      0000
 35745              		.loc 1 11670 0
 35746 105cc 8D4805   		leal	5(%rax), %ecx
 35747 105cf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35747      000000
11657:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35748              		.loc 1 11657 0
 35749 105d6 C1E218   		sall	$24, %edx
 35750 105d9 4109D0   		orl	%edx, %r8d
 35751 105dc 8D5001   		leal	1(%rax), %edx
 35752 105df 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35752      000000
 35753 105e6 C1E210   		sall	$16, %edx
 35754 105e9 4109D0   		orl	%edx, %r8d
 35755 105ec 8D5002   		leal	2(%rax), %edx
 35756 105ef 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35756      000000
 35757 105f6 C1E208   		sall	$8, %edx
 35758 105f9 4109D0   		orl	%edx, %r8d
 35759              	.LVL3383:
11658:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35760              		.loc 1 11658 0
 35761 105fc 4489C6   		movl	%r8d, %esi
11660:src/vm3.c     ****     op0 = op0 + funct;
 35762              		.loc 1 11660 0
 35763 105ff 4488C2   		movb	%r8b, %dl
11658:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35764              		.loc 1 11658 0
 35765 10602 C1EE1A   		shrl	$26, %esi
 35766              	.LVL3384:
11660:src/vm3.c     ****     op0 = op0 + funct;
 35767              		.loc 1 11660 0
 35768 10605 83E23F   		andl	$63, %edx
 35769 10608 8D7E2B   		leal	43(%rsi), %edi
 35770 1060b 4084F6   		testb	%sil, %sil
 35771 1060e 0F45D7   		cmovne	%edi, %edx
 35772              	.LVL3385:
 35773              		.loc 1 11670 0
 35774 10611 C1E110   		sall	$16, %ecx
 35775 10614 C1E318   		sall	$24, %ebx
 35776 10617 09CB     		orl	%ecx, %ebx
 35777 10619 8D4807   		leal	7(%rax), %ecx
 35778 1061c 83C006   		addl	$6, %eax
 35779 1061f 0FB68000 		movzbl	VM_memory(%rax), %eax
 35779      000000
11668:src/vm3.c     **** 
 35780              		.loc 1 11668 0
 35781 10626 0FB6D2   		movzbl	%dl, %edx
 35782              		.loc 1 11670 0
 35783 10629 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35783      000000
11668:src/vm3.c     **** 
 35784              		.loc 1 11668 0
GAS LISTING /tmp/cc15eBE3.s 			page 1176


 35785 10630 48C1E204 		salq	$4, %rdx
 35786              	.LVL3386:
 35787              		.loc 1 11670 0
 35788 10634 C1E008   		sall	$8, %eax
 35789 10637 09CB     		orl	%ecx, %ebx
 35790 10639 09C3     		orl	%eax, %ebx
 35791              	.LVL3387:
11671:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35792              		.loc 1 11671 0
 35793 1063b 89D9     		movl	%ebx, %ecx
11672:src/vm3.c     ****   if (op1 == 0x0) {
11673:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35794              		.loc 1 11673 0
 35795 1063d 88D8     		movb	%bl, %al
11671:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35796              		.loc 1 11671 0
 35797 1063f C1E91A   		shrl	$26, %ecx
 35798              	.LVL3388:
 35799              		.loc 1 11673 0
 35800 10642 83E03F   		andl	$63, %eax
 35801 10645 8D712B   		leal	43(%rcx), %esi
 35802 10648 84C9     		testb	%cl, %cl
 35803 1064a 0F45C6   		cmovne	%esi, %eax
 35804              	.LVL3389:
11674:src/vm3.c     ****     op1 = op1 + funct;
11675:src/vm3.c     ****   }
11676:src/vm3.c     ****     else {
11677:src/vm3.c     ****     op1 = op1 + FIX_OP;
11678:src/vm3.c     ****   }
11679:src/vm3.c     **** 
11680:src/vm3.c     **** goto *p[op1].code;
 35805              		.loc 1 11680 0
 35806 1064d 0FB6C0   		movzbl	%al, %eax
 35807 10650 48C1E004 		salq	$4, %rax
 35808              	.LVL3390:
 35809 10654 48038414 		addq	58088(%rsp,%rdx), %rax
 35809      E8E20000 
 35810 1065c 488B08   		movq	(%rax), %rcx
 35811 1065f E9F406FF 		jmp	.L269
 35811      FF
 35812              	.LVL3391:
 35813              	.L87:
11681:src/vm3.c     **** 
11682:src/vm3.c     **** 
11683:src/vm3.c     **** lwPLUSsll:
11684:src/vm3.c     **** #if INDIRECT_DEBUG
11685:src/vm3.c     **** printf("%d|lw\n",counter);
11686:src/vm3.c     **** counter++;
11687:src/vm3.c     **** #endif
11688:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 35814              		.loc 1 11688 0
 35815 10664 4489C0   		movl	%r8d, %eax
11689:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11690:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11691:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 35816              		.loc 1 11691 0
 35817 10667 410FBFD0 		movswl	%r8w, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1177


11689:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35818              		.loc 1 11689 0
 35819 1066b 41C1E810 		shrl	$16, %r8d
 35820              	.LVL3392:
11688:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35821              		.loc 1 11688 0
 35822 1066f C1E815   		shrl	$21, %eax
 35823              	.LVL3393:
 35824              		.loc 1 11691 0
 35825 10672 4183E01F 		andl	$31, %r8d
11692:src/vm3.c     **** PC  =  nPC;
11693:src/vm3.c     **** nPC  += 4;
 35826              		.loc 1 11693 0
 35827 10676 83050000 		addl	$4, nPC(%rip)
 35827      000004
 35828              	.LVL3394:
11691:src/vm3.c     **** PC  =  nPC;
 35829              		.loc 1 11691 0
 35830 1067d 83E01F   		andl	$31, %eax
 35831 10680 03148500 		addl	RF(,%rax,4), %edx
 35831      000000
 35832              	.LVL3395:
 35833 10687 8D4203   		leal	3(%rdx), %eax
 35834 1068a 89D1     		movl	%edx, %ecx
 35835 1068c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35835      000000
 35836 10693 0FB68000 		movzbl	VM_memory(%rax), %eax
 35836      000000
 35837 1069a C1E118   		sall	$24, %ecx
 35838 1069d 09C8     		orl	%ecx, %eax
 35839 1069f 8D4A01   		leal	1(%rdx), %ecx
 35840 106a2 83C202   		addl	$2, %edx
 35841 106a5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35841      000000
 35842 106ac 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35842      000000
 35843 106b3 C1E208   		sall	$8, %edx
 35844 106b6 C1E110   		sall	$16, %ecx
 35845 106b9 09C8     		orl	%ecx, %eax
 35846 106bb 09D0     		orl	%edx, %eax
11694:src/vm3.c     **** 
11695:src/vm3.c     **** #if INDIRECT_DEBUG
11696:src/vm3.c     **** printf("%d|sll\n",counter);
11697:src/vm3.c     **** counter++;
11698:src/vm3.c     **** #endif
11699:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
11700:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
11701:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35847              		.loc 1 11701 0
 35848 106bd 89DA     		movl	%ebx, %edx
11691:src/vm3.c     **** PC  =  nPC;
 35849              		.loc 1 11691 0
 35850 106bf 42890485 		movl	%eax, RF(,%r8,4)
 35850      00000000 
11700:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35851              		.loc 1 11700 0
 35852 106c7 89D8     		movl	%ebx, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1178


11699:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35853              		.loc 1 11699 0
 35854 106c9 C1EB06   		shrl	$6, %ebx
 35855              	.LVL3396:
11700:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 35856              		.loc 1 11700 0
 35857 106cc C1E810   		shrl	$16, %eax
 35858              	.LVL3397:
11699:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35859              		.loc 1 11699 0
 35860 106cf 88D9     		movb	%bl, %cl
 35861              		.loc 1 11701 0
 35862 106d1 C1EA0B   		shrl	$11, %edx
 35863              	.LVL3398:
11702:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 35864              		.loc 1 11702 0
 35865 106d4 83E01F   		andl	$31, %eax
11699:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35866              		.loc 1 11699 0
 35867 106d7 83E11F   		andl	$31, %ecx
 35868              		.loc 1 11702 0
 35869 106da 83E21F   		andl	$31, %edx
 35870 106dd 8B048500 		movl	RF(,%rax,4), %eax
 35870      000000
 35871 106e4 D3E0     		sall	%cl, %eax
 35872 106e6 89049500 		movl	%eax, RF(,%rdx,4)
 35872      000000
11703:src/vm3.c     **** PC  =  nPC;
 35873              		.loc 1 11703 0
 35874 106ed 8B050000 		movl	nPC(%rip), %eax
 35874      0000
11704:src/vm3.c     **** nPC  += 4;
11705:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 35875              		.loc 1 11705 0
 35876 106f3 8D5003   		leal	3(%rax), %edx
11704:src/vm3.c     **** nPC  += 4;
 35877              		.loc 1 11704 0
 35878 106f6 8D4804   		leal	4(%rax), %ecx
11703:src/vm3.c     **** PC  =  nPC;
 35879              		.loc 1 11703 0
 35880 106f9 89050000 		movl	%eax, PC(%rip)
 35880      0000
 35881              		.loc 1 11705 0
 35882 106ff 440FB682 		movzbl	VM_memory(%rdx), %r8d
 35882      00000000 
 35883 10707 89C2     		movl	%eax, %edx
11706:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11707:src/vm3.c     ****   if (op0 == 0x0) {
11708:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11709:src/vm3.c     ****     op0 = op0 + funct;
11710:src/vm3.c     ****   }
11711:src/vm3.c     ****     else {
11712:src/vm3.c     ****     op0 = op0 + FIX_OP;
11713:src/vm3.c     ****   }
11714:src/vm3.c     **** 
11715:src/vm3.c     **** p = array;
11716:src/vm3.c     **** p = p[op0].next_level;
GAS LISTING /tmp/cc15eBE3.s 			page 1179


11717:src/vm3.c     **** 
11718:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 35884              		.loc 1 11718 0
 35885 10709 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 35885      000000
11705:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35886              		.loc 1 11705 0
 35887 10710 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35887      000000
11704:src/vm3.c     **** nPC  += 4;
 35888              		.loc 1 11704 0
 35889 10717 890D0000 		movl	%ecx, nPC(%rip)
 35889      0000
 35890              		.loc 1 11718 0
 35891 1071d 8D4805   		leal	5(%rax), %ecx
 35892 10720 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35892      000000
11705:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35893              		.loc 1 11705 0
 35894 10727 C1E218   		sall	$24, %edx
 35895 1072a 4109D0   		orl	%edx, %r8d
 35896 1072d 8D5001   		leal	1(%rax), %edx
 35897 10730 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35897      000000
 35898 10737 C1E210   		sall	$16, %edx
 35899 1073a 4109D0   		orl	%edx, %r8d
 35900 1073d 8D5002   		leal	2(%rax), %edx
 35901 10740 0FB69200 		movzbl	VM_memory(%rdx), %edx
 35901      000000
 35902 10747 C1E208   		sall	$8, %edx
 35903 1074a 4109D0   		orl	%edx, %r8d
 35904              	.LVL3399:
11706:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35905              		.loc 1 11706 0
 35906 1074d 4489C6   		movl	%r8d, %esi
11708:src/vm3.c     ****     op0 = op0 + funct;
 35907              		.loc 1 11708 0
 35908 10750 4488C2   		movb	%r8b, %dl
11706:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 35909              		.loc 1 11706 0
 35910 10753 C1EE1A   		shrl	$26, %esi
 35911              	.LVL3400:
11708:src/vm3.c     ****     op0 = op0 + funct;
 35912              		.loc 1 11708 0
 35913 10756 83E23F   		andl	$63, %edx
 35914 10759 8D7E2B   		leal	43(%rsi), %edi
 35915 1075c 4084F6   		testb	%sil, %sil
 35916 1075f 0F45D7   		cmovne	%edi, %edx
 35917              	.LVL3401:
 35918              		.loc 1 11718 0
 35919 10762 C1E110   		sall	$16, %ecx
 35920 10765 C1E318   		sall	$24, %ebx
 35921 10768 09CB     		orl	%ecx, %ebx
 35922 1076a 8D4807   		leal	7(%rax), %ecx
 35923 1076d 83C006   		addl	$6, %eax
 35924 10770 0FB68000 		movzbl	VM_memory(%rax), %eax
 35924      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1180


11716:src/vm3.c     **** 
 35925              		.loc 1 11716 0
 35926 10777 0FB6D2   		movzbl	%dl, %edx
 35927              		.loc 1 11718 0
 35928 1077a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 35928      000000
11716:src/vm3.c     **** 
 35929              		.loc 1 11716 0
 35930 10781 48C1E204 		salq	$4, %rdx
 35931              	.LVL3402:
 35932              		.loc 1 11718 0
 35933 10785 C1E008   		sall	$8, %eax
 35934 10788 09CB     		orl	%ecx, %ebx
 35935 1078a 09C3     		orl	%eax, %ebx
 35936              	.LVL3403:
11719:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35937              		.loc 1 11719 0
 35938 1078c 89D9     		movl	%ebx, %ecx
11720:src/vm3.c     ****   if (op1 == 0x0) {
11721:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 35939              		.loc 1 11721 0
 35940 1078e 88D8     		movb	%bl, %al
11719:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 35941              		.loc 1 11719 0
 35942 10790 C1E91A   		shrl	$26, %ecx
 35943              	.LVL3404:
 35944              		.loc 1 11721 0
 35945 10793 83E03F   		andl	$63, %eax
 35946 10796 8D712B   		leal	43(%rcx), %esi
 35947 10799 84C9     		testb	%cl, %cl
 35948 1079b 0F45C6   		cmovne	%esi, %eax
 35949              	.LVL3405:
11722:src/vm3.c     ****     op1 = op1 + funct;
11723:src/vm3.c     ****   }
11724:src/vm3.c     ****     else {
11725:src/vm3.c     ****     op1 = op1 + FIX_OP;
11726:src/vm3.c     ****   }
11727:src/vm3.c     **** 
11728:src/vm3.c     **** goto *p[op1].code;
 35950              		.loc 1 11728 0
 35951 1079e 0FB6C0   		movzbl	%al, %eax
 35952 107a1 48C1E004 		salq	$4, %rax
 35953              	.LVL3406:
 35954 107a5 48038414 		addq	58088(%rsp,%rdx), %rax
 35954      E8E20000 
 35955 107ad 488B08   		movq	(%rax), %rcx
 35956 107b0 E9A305FF 		jmp	.L269
 35956      FF
 35957              	.LVL3407:
 35958              	.L188:
11729:src/vm3.c     **** 
11730:src/vm3.c     **** 
11731:src/vm3.c     **** swPLUSsw:
11732:src/vm3.c     **** #if INDIRECT_DEBUG
11733:src/vm3.c     **** printf("%d|sw\n",counter);
11734:src/vm3.c     **** counter++;
11735:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 1181


11736:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 35959              		.loc 1 11736 0
 35960 107b5 4489C0   		movl	%r8d, %eax
11737:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
11738:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11739:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 35961              		.loc 1 11739 0
 35962 107b8 410FBFC8 		movswl	%r8w, %ecx
11737:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35963              		.loc 1 11737 0
 35964 107bc 41C1E810 		shrl	$16, %r8d
 35965              	.LVL3408:
11736:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 35966              		.loc 1 11736 0
 35967 107c0 C1E815   		shrl	$21, %eax
 35968              	.LVL3409:
 35969              		.loc 1 11739 0
 35970 107c3 4183E01F 		andl	$31, %r8d
11740:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
11741:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
11742:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
11743:src/vm3.c     **** PC  =  nPC;
11744:src/vm3.c     **** nPC  += 4;
 35971              		.loc 1 11744 0
 35972 107c7 83050000 		addl	$4, nPC(%rip)
 35972      000004
 35973              	.LVL3410:
11739:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 35974              		.loc 1 11739 0
 35975 107ce 83E01F   		andl	$31, %eax
 35976 107d1 8B148500 		movl	RF(,%rax,4), %edx
 35976      000000
 35977 107d8 428B0485 		movl	RF(,%r8,4), %eax
 35977      00000000 
 35978 107e0 8D3411   		leal	(%rcx,%rdx), %esi
 35979 107e3 89C7     		movl	%eax, %edi
 35980 107e5 C1EF18   		shrl	$24, %edi
 35981 107e8 4088BE00 		movb	%dil, VM_memory(%rsi)
 35981      000000
11740:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 35982              		.loc 1 11740 0
 35983 107ef 8D741101 		leal	1(%rcx,%rdx), %esi
 35984 107f3 89C7     		movl	%eax, %edi
 35985 107f5 C1EF10   		shrl	$16, %edi
 35986 107f8 4088BE00 		movb	%dil, VM_memory(%rsi)
 35986      000000
11741:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 35987              		.loc 1 11741 0
 35988 107ff 8D741102 		leal	2(%rcx,%rdx), %esi
11742:src/vm3.c     **** PC  =  nPC;
 35989              		.loc 1 11742 0
 35990 10803 8D541103 		leal	3(%rcx,%rdx), %edx
11741:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 35991              		.loc 1 11741 0
 35992 10807 0FB6FC   		movzbl	%ah, %edi
11745:src/vm3.c     **** 
11746:src/vm3.c     **** #if INDIRECT_DEBUG
GAS LISTING /tmp/cc15eBE3.s 			page 1182


11747:src/vm3.c     **** printf("%d|sw\n",counter);
11748:src/vm3.c     **** counter++;
11749:src/vm3.c     **** #endif
11750:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11751:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
11752:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11753:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 35993              		.loc 1 11753 0
 35994 1080a 0FBFCB   		movswl	%bx, %ecx
11741:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 35995              		.loc 1 11741 0
 35996 1080d 4088BE00 		movb	%dil, VM_memory(%rsi)
 35996      000000
11742:src/vm3.c     **** PC  =  nPC;
 35997              		.loc 1 11742 0
 35998 10814 88820000 		movb	%al, VM_memory(%rdx)
 35998      0000
11750:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 35999              		.loc 1 11750 0
 36000 1081a 89D8     		movl	%ebx, %eax
 36001 1081c C1E815   		shrl	$21, %eax
11751:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 36002              		.loc 1 11751 0
 36003 1081f C1EB10   		shrl	$16, %ebx
 36004              	.LVL3411:
 36005              		.loc 1 11753 0
 36006 10822 83E01F   		andl	$31, %eax
 36007 10825 83E31F   		andl	$31, %ebx
 36008 10828 8B148500 		movl	RF(,%rax,4), %edx
 36008      000000
 36009 1082f 8B049D00 		movl	RF(,%rbx,4), %eax
 36009      000000
 36010 10836 8D3411   		leal	(%rcx,%rdx), %esi
 36011 10839 89C7     		movl	%eax, %edi
 36012 1083b C1EF18   		shrl	$24, %edi
 36013 1083e 4088BE00 		movb	%dil, VM_memory(%rsi)
 36013      000000
11754:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 36014              		.loc 1 11754 0
 36015 10845 8D741101 		leal	1(%rcx,%rdx), %esi
 36016 10849 89C7     		movl	%eax, %edi
 36017 1084b C1EF10   		shrl	$16, %edi
 36018 1084e 4088BE00 		movb	%dil, VM_memory(%rsi)
 36018      000000
11755:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 36019              		.loc 1 11755 0
 36020 10855 8D741102 		leal	2(%rcx,%rdx), %esi
11756:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 36021              		.loc 1 11756 0
 36022 10859 8D541103 		leal	3(%rcx,%rdx), %edx
11755:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 36023              		.loc 1 11755 0
 36024 1085d 0FB6FC   		movzbl	%ah, %edi
 36025 10860 4088BE00 		movb	%dil, VM_memory(%rsi)
 36025      000000
 36026              		.loc 1 11756 0
 36027 10867 88820000 		movb	%al, VM_memory(%rdx)
GAS LISTING /tmp/cc15eBE3.s 			page 1183


 36027      0000
11757:src/vm3.c     **** PC  =  nPC;
 36028              		.loc 1 11757 0
 36029 1086d 8B050000 		movl	nPC(%rip), %eax
 36029      0000
11758:src/vm3.c     **** nPC  += 4;
11759:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36030              		.loc 1 11759 0
 36031 10873 8D5003   		leal	3(%rax), %edx
11758:src/vm3.c     **** nPC  += 4;
 36032              		.loc 1 11758 0
 36033 10876 8D4804   		leal	4(%rax), %ecx
 36034              	.LVL3412:
11757:src/vm3.c     **** PC  =  nPC;
 36035              		.loc 1 11757 0
 36036 10879 89050000 		movl	%eax, PC(%rip)
 36036      0000
 36037              		.loc 1 11759 0
 36038 1087f 440FB682 		movzbl	VM_memory(%rdx), %r8d
 36038      00000000 
 36039 10887 89C2     		movl	%eax, %edx
11760:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11761:src/vm3.c     ****   if (op0 == 0x0) {
11762:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11763:src/vm3.c     ****     op0 = op0 + funct;
11764:src/vm3.c     ****   }
11765:src/vm3.c     ****     else {
11766:src/vm3.c     ****     op0 = op0 + FIX_OP;
11767:src/vm3.c     ****   }
11768:src/vm3.c     **** 
11769:src/vm3.c     **** p = array;
11770:src/vm3.c     **** p = p[op0].next_level;
11771:src/vm3.c     **** 
11772:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36040              		.loc 1 11772 0
 36041 10889 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36041      000000
11759:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36042              		.loc 1 11759 0
 36043 10890 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36043      000000
11758:src/vm3.c     **** nPC  += 4;
 36044              		.loc 1 11758 0
 36045 10897 890D0000 		movl	%ecx, nPC(%rip)
 36045      0000
 36046              		.loc 1 11772 0
 36047 1089d 8D4805   		leal	5(%rax), %ecx
 36048 108a0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36048      000000
11759:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36049              		.loc 1 11759 0
 36050 108a7 C1E218   		sall	$24, %edx
 36051 108aa 4109D0   		orl	%edx, %r8d
 36052 108ad 8D5001   		leal	1(%rax), %edx
 36053 108b0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36053      000000
 36054 108b7 C1E210   		sall	$16, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1184


 36055 108ba 4109D0   		orl	%edx, %r8d
 36056 108bd 8D5002   		leal	2(%rax), %edx
 36057 108c0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36057      000000
 36058 108c7 C1E208   		sall	$8, %edx
 36059 108ca 4109D0   		orl	%edx, %r8d
 36060              	.LVL3413:
11760:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36061              		.loc 1 11760 0
 36062 108cd 4489C6   		movl	%r8d, %esi
11762:src/vm3.c     ****     op0 = op0 + funct;
 36063              		.loc 1 11762 0
 36064 108d0 4488C2   		movb	%r8b, %dl
11760:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36065              		.loc 1 11760 0
 36066 108d3 C1EE1A   		shrl	$26, %esi
 36067              	.LVL3414:
11762:src/vm3.c     ****     op0 = op0 + funct;
 36068              		.loc 1 11762 0
 36069 108d6 83E23F   		andl	$63, %edx
 36070 108d9 8D7E2B   		leal	43(%rsi), %edi
 36071 108dc 4084F6   		testb	%sil, %sil
 36072 108df 0F45D7   		cmovne	%edi, %edx
 36073              	.LVL3415:
 36074              		.loc 1 11772 0
 36075 108e2 C1E110   		sall	$16, %ecx
 36076 108e5 C1E318   		sall	$24, %ebx
 36077 108e8 09CB     		orl	%ecx, %ebx
 36078 108ea 8D4807   		leal	7(%rax), %ecx
 36079 108ed 83C006   		addl	$6, %eax
 36080 108f0 0FB68000 		movzbl	VM_memory(%rax), %eax
 36080      000000
11770:src/vm3.c     **** 
 36081              		.loc 1 11770 0
 36082 108f7 0FB6D2   		movzbl	%dl, %edx
 36083              		.loc 1 11772 0
 36084 108fa 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36084      000000
11770:src/vm3.c     **** 
 36085              		.loc 1 11770 0
 36086 10901 48C1E204 		salq	$4, %rdx
 36087              	.LVL3416:
 36088              		.loc 1 11772 0
 36089 10905 C1E008   		sall	$8, %eax
 36090 10908 09CB     		orl	%ecx, %ebx
 36091 1090a 09C3     		orl	%eax, %ebx
 36092              	.LVL3417:
11773:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36093              		.loc 1 11773 0
 36094 1090c 89D9     		movl	%ebx, %ecx
11774:src/vm3.c     ****   if (op1 == 0x0) {
11775:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36095              		.loc 1 11775 0
 36096 1090e 88D8     		movb	%bl, %al
11773:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36097              		.loc 1 11773 0
 36098 10910 C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1185


 36099              	.LVL3418:
 36100              		.loc 1 11775 0
 36101 10913 83E03F   		andl	$63, %eax
 36102 10916 8D712B   		leal	43(%rcx), %esi
 36103 10919 84C9     		testb	%cl, %cl
 36104 1091b 0F45C6   		cmovne	%esi, %eax
 36105              	.LVL3419:
11776:src/vm3.c     ****     op1 = op1 + funct;
11777:src/vm3.c     ****   }
11778:src/vm3.c     ****     else {
11779:src/vm3.c     ****     op1 = op1 + FIX_OP;
11780:src/vm3.c     ****   }
11781:src/vm3.c     **** 
11782:src/vm3.c     **** goto *p[op1].code;
 36106              		.loc 1 11782 0
 36107 1091e 0FB6C0   		movzbl	%al, %eax
 36108 10921 48C1E004 		salq	$4, %rax
 36109              	.LVL3420:
 36110 10925 48038414 		addq	58088(%rsp,%rdx), %rax
 36110      E8E20000 
 36111 1092d 488B08   		movq	(%rax), %rcx
 36112 10930 E92304FF 		jmp	.L269
 36112      FF
 36113              	.LVL3421:
 36114              	.L177:
11783:src/vm3.c     **** 
11784:src/vm3.c     **** 
11785:src/vm3.c     **** lbuPLUSaddiu:
11786:src/vm3.c     **** #if INDIRECT_DEBUG
11787:src/vm3.c     **** printf("%d|lbu\n",counter);
11788:src/vm3.c     **** counter++;
11789:src/vm3.c     **** #endif
11790:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 36115              		.loc 1 11790 0
 36116 10935 4489C2   		movl	%r8d, %edx
11791:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36117              		.loc 1 11791 0
 36118 10938 4489C0   		movl	%r8d, %eax
11792:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
11793:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 36119              		.loc 1 11793 0
 36120 1093b 450FBFC0 		movswl	%r8w, %r8d
 36121              	.LVL3422:
11790:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36122              		.loc 1 11790 0
 36123 1093f C1EA15   		shrl	$21, %edx
11791:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36124              		.loc 1 11791 0
 36125 10942 C1E810   		shrl	$16, %eax
 36126              	.LVL3423:
11794:src/vm3.c     **** PC  =  nPC;
11795:src/vm3.c     **** nPC  += 4;
 36127              		.loc 1 11795 0
 36128 10945 83050000 		addl	$4, nPC(%rip)
 36128      000004
 36129              	.LVL3424:
11793:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 1186


 36130              		.loc 1 11793 0
 36131 1094c 83E21F   		andl	$31, %edx
 36132 1094f 83E01F   		andl	$31, %eax
 36133 10952 44030495 		addl	RF(,%rdx,4), %r8d
 36133      00000000 
 36134 1095a 410FB690 		movzbl	VM_memory(%r8), %edx
 36134      00000000 
 36135 10962 89148500 		movl	%edx, RF(,%rax,4)
 36135      000000
11796:src/vm3.c     **** 
11797:src/vm3.c     **** #if INDIRECT_DEBUG
11798:src/vm3.c     **** printf("%d|addiu\n",counter);
11799:src/vm3.c     **** counter++;
11800:src/vm3.c     **** #endif
11801:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 36136              		.loc 1 11801 0
 36137 10969 89DA     		movl	%ebx, %edx
11802:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36138              		.loc 1 11802 0
 36139 1096b 89D8     		movl	%ebx, %eax
11801:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36140              		.loc 1 11801 0
 36141 1096d C1EA15   		shrl	$21, %edx
11803:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
11804:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 36142              		.loc 1 11804 0
 36143 10970 0FBFDB   		movswl	%bx, %ebx
 36144              	.LVL3425:
11802:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 36145              		.loc 1 11802 0
 36146 10973 C1E810   		shrl	$16, %eax
 36147              	.LVL3426:
 36148              		.loc 1 11804 0
 36149 10976 83E21F   		andl	$31, %edx
 36150 10979 83E01F   		andl	$31, %eax
 36151 1097c 031C9500 		addl	RF(,%rdx,4), %ebx
 36151      000000
 36152              	.LVL3427:
 36153 10983 891C8500 		movl	%ebx, RF(,%rax,4)
 36153      000000
11805:src/vm3.c     **** PC  =  nPC;
 36154              		.loc 1 11805 0
 36155 1098a 8B050000 		movl	nPC(%rip), %eax
 36155      0000
11806:src/vm3.c     **** nPC  += 4;
11807:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36156              		.loc 1 11807 0
 36157 10990 8D5003   		leal	3(%rax), %edx
11806:src/vm3.c     **** nPC  += 4;
 36158              		.loc 1 11806 0
 36159 10993 8D4804   		leal	4(%rax), %ecx
11805:src/vm3.c     **** PC  =  nPC;
 36160              		.loc 1 11805 0
 36161 10996 89050000 		movl	%eax, PC(%rip)
 36161      0000
 36162              		.loc 1 11807 0
 36163 1099c 440FB682 		movzbl	VM_memory(%rdx), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1187


 36163      00000000 
 36164 109a4 89C2     		movl	%eax, %edx
11808:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11809:src/vm3.c     ****   if (op0 == 0x0) {
11810:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11811:src/vm3.c     ****     op0 = op0 + funct;
11812:src/vm3.c     ****   }
11813:src/vm3.c     ****     else {
11814:src/vm3.c     ****     op0 = op0 + FIX_OP;
11815:src/vm3.c     ****   }
11816:src/vm3.c     **** 
11817:src/vm3.c     **** p = array;
11818:src/vm3.c     **** p = p[op0].next_level;
11819:src/vm3.c     **** 
11820:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36165              		.loc 1 11820 0
 36166 109a6 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36166      000000
11807:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36167              		.loc 1 11807 0
 36168 109ad 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36168      000000
11806:src/vm3.c     **** nPC  += 4;
 36169              		.loc 1 11806 0
 36170 109b4 890D0000 		movl	%ecx, nPC(%rip)
 36170      0000
 36171              		.loc 1 11820 0
 36172 109ba 8D4805   		leal	5(%rax), %ecx
 36173 109bd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36173      000000
11807:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36174              		.loc 1 11807 0
 36175 109c4 C1E218   		sall	$24, %edx
 36176 109c7 4109D0   		orl	%edx, %r8d
 36177 109ca 8D5001   		leal	1(%rax), %edx
 36178 109cd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36178      000000
 36179 109d4 C1E210   		sall	$16, %edx
 36180 109d7 4109D0   		orl	%edx, %r8d
 36181 109da 8D5002   		leal	2(%rax), %edx
 36182 109dd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36182      000000
 36183 109e4 C1E208   		sall	$8, %edx
 36184 109e7 4109D0   		orl	%edx, %r8d
 36185              	.LVL3428:
11808:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36186              		.loc 1 11808 0
 36187 109ea 4489C6   		movl	%r8d, %esi
11810:src/vm3.c     ****     op0 = op0 + funct;
 36188              		.loc 1 11810 0
 36189 109ed 4488C2   		movb	%r8b, %dl
11808:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36190              		.loc 1 11808 0
 36191 109f0 C1EE1A   		shrl	$26, %esi
 36192              	.LVL3429:
11810:src/vm3.c     ****     op0 = op0 + funct;
 36193              		.loc 1 11810 0
GAS LISTING /tmp/cc15eBE3.s 			page 1188


 36194 109f3 83E23F   		andl	$63, %edx
 36195 109f6 8D7E2B   		leal	43(%rsi), %edi
 36196 109f9 4084F6   		testb	%sil, %sil
 36197 109fc 0F45D7   		cmovne	%edi, %edx
 36198              	.LVL3430:
 36199              		.loc 1 11820 0
 36200 109ff C1E110   		sall	$16, %ecx
 36201 10a02 C1E318   		sall	$24, %ebx
 36202 10a05 09CB     		orl	%ecx, %ebx
 36203 10a07 8D4807   		leal	7(%rax), %ecx
 36204 10a0a 83C006   		addl	$6, %eax
 36205 10a0d 0FB68000 		movzbl	VM_memory(%rax), %eax
 36205      000000
11818:src/vm3.c     **** 
 36206              		.loc 1 11818 0
 36207 10a14 0FB6D2   		movzbl	%dl, %edx
 36208              		.loc 1 11820 0
 36209 10a17 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36209      000000
11818:src/vm3.c     **** 
 36210              		.loc 1 11818 0
 36211 10a1e 48C1E204 		salq	$4, %rdx
 36212              	.LVL3431:
 36213              		.loc 1 11820 0
 36214 10a22 C1E008   		sall	$8, %eax
 36215 10a25 09CB     		orl	%ecx, %ebx
 36216 10a27 09C3     		orl	%eax, %ebx
 36217              	.LVL3432:
11821:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36218              		.loc 1 11821 0
 36219 10a29 89D9     		movl	%ebx, %ecx
11822:src/vm3.c     ****   if (op1 == 0x0) {
11823:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36220              		.loc 1 11823 0
 36221 10a2b 88D8     		movb	%bl, %al
11821:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36222              		.loc 1 11821 0
 36223 10a2d C1E91A   		shrl	$26, %ecx
 36224              	.LVL3433:
 36225              		.loc 1 11823 0
 36226 10a30 83E03F   		andl	$63, %eax
 36227 10a33 8D712B   		leal	43(%rcx), %esi
 36228 10a36 84C9     		testb	%cl, %cl
 36229 10a38 0F45C6   		cmovne	%esi, %eax
 36230              	.LVL3434:
11824:src/vm3.c     ****     op1 = op1 + funct;
11825:src/vm3.c     ****   }
11826:src/vm3.c     ****     else {
11827:src/vm3.c     ****     op1 = op1 + FIX_OP;
11828:src/vm3.c     ****   }
11829:src/vm3.c     **** 
11830:src/vm3.c     **** goto *p[op1].code;
 36231              		.loc 1 11830 0
 36232 10a3b 0FB6C0   		movzbl	%al, %eax
 36233 10a3e 48C1E004 		salq	$4, %rax
 36234              	.LVL3435:
 36235 10a42 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1189


 36235      E8E20000 
 36236 10a4a 488B08   		movq	(%rax), %rcx
 36237 10a4d E90603FF 		jmp	.L269
 36237      FF
 36238              	.LVL3436:
 36239              	.L121:
11831:src/vm3.c     **** 
11832:src/vm3.c     **** 
11833:src/vm3.c     **** beqPLUSaddu:
11834:src/vm3.c     **** #if INDIRECT_DEBUG
11835:src/vm3.c     **** printf("%d|beq\n",counter);
11836:src/vm3.c     **** counter++;
11837:src/vm3.c     **** #endif
11838:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 36240              		.loc 1 11838 0
 36241 10a52 4489C2   		movl	%r8d, %edx
11839:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36242              		.loc 1 11839 0
 36243 10a55 4489C0   		movl	%r8d, %eax
11838:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36244              		.loc 1 11838 0
 36245 10a58 C1EA15   		shrl	$21, %edx
 36246              		.loc 1 11839 0
 36247 10a5b C1E810   		shrl	$16, %eax
11840:src/vm3.c     **** if (RF[rs] == RF[rt])
 36248              		.loc 1 11840 0
 36249 10a5e 83E01F   		andl	$31, %eax
 36250 10a61 83E21F   		andl	$31, %edx
 36251 10a64 8B048500 		movl	RF(,%rax,4), %eax
 36251      000000
 36252 10a6b 39049500 		cmpl	%eax, RF(,%rdx,4)
 36252      000000
 36253 10a72 0F85CE00 		jne	.L1295
 36253      0000
 36254              	.LVL3437:
11841:src/vm3.c     **** {
11842:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
11843:src/vm3.c     ****   PC  =  nPC;
 36255              		.loc 1 11843 0
 36256 10a78 8B050000 		movl	nPC(%rip), %eax
 36256      0000
11844:src/vm3.c     ****   nPC  += (immediate << 2);
 36257              		.loc 1 11844 0
 36258 10a7e 450FBFC0 		movswl	%r8w, %r8d
 36259              	.LVL3438:
11845:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 36260              		.loc 1 11845 0
 36261 10a82 8D4803   		leal	3(%rax), %ecx
11844:src/vm3.c     ****   nPC  += (immediate << 2);
 36262              		.loc 1 11844 0
 36263 10a85 428D1480 		leal	(%rax,%r8,4), %edx
11843:src/vm3.c     ****   nPC  += (immediate << 2);
 36264              		.loc 1 11843 0
 36265 10a89 89050000 		movl	%eax, PC(%rip)
 36265      0000
 36266              		.loc 1 11845 0
 36267 10a8f 440FB681 		movzbl	VM_memory(%rcx), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1190


 36267      00000000 
 36268              	.LVL3439:
 36269 10a97 89C1     		movl	%eax, %ecx
11844:src/vm3.c     ****   nPC  += (immediate << 2);
 36270              		.loc 1 11844 0
 36271 10a99 89150000 		movl	%edx, nPC(%rip)
 36271      0000
 36272              		.loc 1 11845 0
 36273 10a9f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36273      000000
 36274 10aa6 C1E118   		sall	$24, %ecx
 36275 10aa9 4109C8   		orl	%ecx, %r8d
 36276 10aac 8D4801   		leal	1(%rax), %ecx
 36277 10aaf 83C002   		addl	$2, %eax
 36278 10ab2 0FB68000 		movzbl	VM_memory(%rax), %eax
 36278      000000
 36279 10ab9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36279      000000
 36280 10ac0 C1E008   		sall	$8, %eax
 36281 10ac3 C1E110   		sall	$16, %ecx
 36282 10ac6 4109C8   		orl	%ecx, %r8d
 36283 10ac9 4109C0   		orl	%eax, %r8d
 36284              	.LVL3440:
11846:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36285              		.loc 1 11846 0
 36286 10acc 4489C0   		movl	%r8d, %eax
11847:src/vm3.c     ****   if (op0 == 0x0) {
11848:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 36287              		.loc 1 11848 0
 36288 10acf 4488C1   		movb	%r8b, %cl
11846:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36289              		.loc 1 11846 0
 36290 10ad2 C1E81A   		shrl	$26, %eax
 36291              	.LVL3441:
 36292              		.loc 1 11848 0
 36293 10ad5 83E13F   		andl	$63, %ecx
 36294 10ad8 8D702B   		leal	43(%rax), %esi
 36295 10adb 84C0     		testb	%al, %al
11849:src/vm3.c     ****     op0 = op0 + funct;
11850:src/vm3.c     ****   }
11851:src/vm3.c     ****     else {
11852:src/vm3.c     ****     op0 = op0 + FIX_OP;
11853:src/vm3.c     ****   }
11854:src/vm3.c     **** 
11855:src/vm3.c     **** p = array;
11856:src/vm3.c     **** p = p[op0].next_level;
11857:src/vm3.c     **** 
11858:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36296              		.loc 1 11858 0
 36297 10add 8D4203   		leal	3(%rdx), %eax
 36298              	.LVL3442:
 36299 10ae0 0FB69800 		movzbl	VM_memory(%rax), %ebx
 36299      000000
 36300              	.LVL3443:
 36301 10ae7 89D0     		movl	%edx, %eax
11848:src/vm3.c     ****     op0 = op0 + funct;
 36302              		.loc 1 11848 0
GAS LISTING /tmp/cc15eBE3.s 			page 1191


 36303 10ae9 0F45CE   		cmovne	%esi, %ecx
 36304              	.LVL3444:
 36305              		.loc 1 11858 0
 36306 10aec 0FB68000 		movzbl	VM_memory(%rax), %eax
 36306      000000
11856:src/vm3.c     **** 
 36307              		.loc 1 11856 0
 36308 10af3 0FB6C9   		movzbl	%cl, %ecx
 36309 10af6 48C1E104 		salq	$4, %rcx
 36310              	.LVL3445:
 36311              		.loc 1 11858 0
 36312 10afa C1E018   		sall	$24, %eax
 36313 10afd 09C3     		orl	%eax, %ebx
 36314 10aff 8D4201   		leal	1(%rdx), %eax
 36315 10b02 0FB68000 		movzbl	VM_memory(%rax), %eax
 36315      000000
 36316 10b09 C1E010   		sall	$16, %eax
 36317 10b0c 09C3     		orl	%eax, %ebx
 36318 10b0e 8D4202   		leal	2(%rdx), %eax
 36319 10b11 0FB68000 		movzbl	VM_memory(%rax), %eax
 36319      000000
 36320 10b18 C1E008   		sall	$8, %eax
 36321 10b1b 09C3     		orl	%eax, %ebx
 36322              	.LVL3446:
11859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36323              		.loc 1 11859 0
 36324 10b1d 89DA     		movl	%ebx, %edx
11860:src/vm3.c     ****   if (op1 == 0x0) {
11861:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36325              		.loc 1 11861 0
 36326 10b1f 88D8     		movb	%bl, %al
11859:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36327              		.loc 1 11859 0
 36328 10b21 C1EA1A   		shrl	$26, %edx
 36329              	.LVL3447:
 36330              		.loc 1 11861 0
 36331 10b24 83E03F   		andl	$63, %eax
 36332 10b27 8D722B   		leal	43(%rdx), %esi
 36333 10b2a 84D2     		testb	%dl, %dl
 36334 10b2c 0F45C6   		cmovne	%esi, %eax
 36335              	.LVL3448:
11862:src/vm3.c     ****     op1 = op1 + funct;
11863:src/vm3.c     ****   }
11864:src/vm3.c     ****     else {
11865:src/vm3.c     ****     op1 = op1 + FIX_OP;
11866:src/vm3.c     ****   }
11867:src/vm3.c     **** 
11868:src/vm3.c     **** goto *p[op1].code;
 36336              		.loc 1 11868 0
 36337 10b2f 0FB6C0   		movzbl	%al, %eax
 36338 10b32 48C1E004 		salq	$4, %rax
 36339              	.LVL3449:
 36340 10b36 4803840C 		addq	58088(%rsp,%rcx), %rax
 36340      E8E20000 
 36341 10b3e 488B08   		movq	(%rax), %rcx
 36342              	.LVL3450:
 36343 10b41 E91202FF 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 1192


 36343      FF
 36344              	.LVL3451:
 36345              	.L1295:
11869:src/vm3.c     **** 
11870:src/vm3.c     **** 
11871:src/vm3.c     **** }
11872:src/vm3.c     **** else
11873:src/vm3.c     **** {
11874:src/vm3.c     ****   PC  =  nPC;
11875:src/vm3.c     ****   nPC  += 4;
11876:src/vm3.c     **** }
11877:src/vm3.c     **** 
11878:src/vm3.c     **** #if INDIRECT_DEBUG
11879:src/vm3.c     **** printf("%d|addu\n",counter);
11880:src/vm3.c     **** counter++;
11881:src/vm3.c     **** #endif
11882:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
11883:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36346              		.loc 1 11883 0
 36347 10b46 89D8     		movl	%ebx, %eax
11884:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36348              		.loc 1 11884 0
 36349 10b48 89DA     		movl	%ebx, %edx
11882:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36350              		.loc 1 11882 0
 36351 10b4a C1EB15   		shrl	$21, %ebx
 36352              	.LVL3452:
11883:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36353              		.loc 1 11883 0
 36354 10b4d C1E810   		shrl	$16, %eax
 36355              	.LVL3453:
11885:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 36356              		.loc 1 11885 0
 36357 10b50 83E31F   		andl	$31, %ebx
11884:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 36358              		.loc 1 11884 0
 36359 10b53 C1EA0B   		shrl	$11, %edx
 36360              	.LVL3454:
 36361              		.loc 1 11885 0
 36362 10b56 83E01F   		andl	$31, %eax
11875:src/vm3.c     **** }
 36363              		.loc 1 11875 0
 36364 10b59 83050000 		addl	$4, nPC(%rip)
 36364      000004
 36365              	.LVL3455:
 36366              		.loc 1 11885 0
 36367 10b60 83E21F   		andl	$31, %edx
 36368 10b63 8B048500 		movl	RF(,%rax,4), %eax
 36368      000000
 36369 10b6a 03049D00 		addl	RF(,%rbx,4), %eax
 36369      000000
 36370 10b71 89049500 		movl	%eax, RF(,%rdx,4)
 36370      000000
11886:src/vm3.c     **** PC  =  nPC;
 36371              		.loc 1 11886 0
 36372 10b78 8B050000 		movl	nPC(%rip), %eax
 36372      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1193


11887:src/vm3.c     **** nPC  += 4;
11888:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36373              		.loc 1 11888 0
 36374 10b7e 8D5003   		leal	3(%rax), %edx
11887:src/vm3.c     **** nPC  += 4;
 36375              		.loc 1 11887 0
 36376 10b81 8D4804   		leal	4(%rax), %ecx
11886:src/vm3.c     **** PC  =  nPC;
 36377              		.loc 1 11886 0
 36378 10b84 89050000 		movl	%eax, PC(%rip)
 36378      0000
 36379              		.loc 1 11888 0
 36380 10b8a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 36380      00000000 
 36381              	.LVL3456:
 36382 10b92 89C2     		movl	%eax, %edx
11889:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11890:src/vm3.c     ****   if (op0 == 0x0) {
11891:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11892:src/vm3.c     ****     op0 = op0 + funct;
11893:src/vm3.c     ****   }
11894:src/vm3.c     ****     else {
11895:src/vm3.c     ****     op0 = op0 + FIX_OP;
11896:src/vm3.c     ****   }
11897:src/vm3.c     **** 
11898:src/vm3.c     **** p = array;
11899:src/vm3.c     **** p = p[op0].next_level;
11900:src/vm3.c     **** 
11901:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36383              		.loc 1 11901 0
 36384 10b94 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36384      000000
11888:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36385              		.loc 1 11888 0
 36386 10b9b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36386      000000
11887:src/vm3.c     **** nPC  += 4;
 36387              		.loc 1 11887 0
 36388 10ba2 890D0000 		movl	%ecx, nPC(%rip)
 36388      0000
 36389              		.loc 1 11901 0
 36390 10ba8 8D4805   		leal	5(%rax), %ecx
 36391 10bab 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36391      000000
11888:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36392              		.loc 1 11888 0
 36393 10bb2 C1E218   		sall	$24, %edx
 36394 10bb5 4109D0   		orl	%edx, %r8d
 36395 10bb8 8D5001   		leal	1(%rax), %edx
 36396 10bbb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36396      000000
 36397 10bc2 C1E210   		sall	$16, %edx
 36398 10bc5 4109D0   		orl	%edx, %r8d
 36399 10bc8 8D5002   		leal	2(%rax), %edx
 36400 10bcb 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36400      000000
 36401 10bd2 C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1194


 36402 10bd5 4109D0   		orl	%edx, %r8d
 36403              	.LVL3457:
11889:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36404              		.loc 1 11889 0
 36405 10bd8 4489C6   		movl	%r8d, %esi
11891:src/vm3.c     ****     op0 = op0 + funct;
 36406              		.loc 1 11891 0
 36407 10bdb 4488C2   		movb	%r8b, %dl
11889:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36408              		.loc 1 11889 0
 36409 10bde C1EE1A   		shrl	$26, %esi
 36410              	.LVL3458:
11891:src/vm3.c     ****     op0 = op0 + funct;
 36411              		.loc 1 11891 0
 36412 10be1 83E23F   		andl	$63, %edx
 36413 10be4 8D7E2B   		leal	43(%rsi), %edi
 36414 10be7 4084F6   		testb	%sil, %sil
 36415 10bea 0F45D7   		cmovne	%edi, %edx
 36416              	.LVL3459:
 36417              		.loc 1 11901 0
 36418 10bed C1E110   		sall	$16, %ecx
 36419 10bf0 C1E318   		sall	$24, %ebx
 36420 10bf3 09CB     		orl	%ecx, %ebx
 36421 10bf5 8D4807   		leal	7(%rax), %ecx
 36422 10bf8 83C006   		addl	$6, %eax
 36423 10bfb 0FB68000 		movzbl	VM_memory(%rax), %eax
 36423      000000
11899:src/vm3.c     **** 
 36424              		.loc 1 11899 0
 36425 10c02 0FB6D2   		movzbl	%dl, %edx
 36426              		.loc 1 11901 0
 36427 10c05 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36427      000000
11899:src/vm3.c     **** 
 36428              		.loc 1 11899 0
 36429 10c0c 48C1E204 		salq	$4, %rdx
 36430              	.LVL3460:
 36431              		.loc 1 11901 0
 36432 10c10 C1E008   		sall	$8, %eax
 36433 10c13 09CB     		orl	%ecx, %ebx
 36434 10c15 09C3     		orl	%eax, %ebx
 36435              	.LVL3461:
11902:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36436              		.loc 1 11902 0
 36437 10c17 89D9     		movl	%ebx, %ecx
11903:src/vm3.c     ****   if (op1 == 0x0) {
11904:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36438              		.loc 1 11904 0
 36439 10c19 88D8     		movb	%bl, %al
11902:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36440              		.loc 1 11902 0
 36441 10c1b C1E91A   		shrl	$26, %ecx
 36442              	.LVL3462:
 36443              		.loc 1 11904 0
 36444 10c1e 83E03F   		andl	$63, %eax
 36445 10c21 8D712B   		leal	43(%rcx), %esi
 36446 10c24 84C9     		testb	%cl, %cl
GAS LISTING /tmp/cc15eBE3.s 			page 1195


 36447 10c26 0F45C6   		cmovne	%esi, %eax
 36448              	.LVL3463:
11905:src/vm3.c     ****     op1 = op1 + funct;
11906:src/vm3.c     ****   }
11907:src/vm3.c     ****     else {
11908:src/vm3.c     ****     op1 = op1 + FIX_OP;
11909:src/vm3.c     ****   }
11910:src/vm3.c     **** 
11911:src/vm3.c     **** goto *p[op1].code;
 36449              		.loc 1 11911 0
 36450 10c29 0FB6C0   		movzbl	%al, %eax
 36451 10c2c 48C1E004 		salq	$4, %rax
 36452              	.LVL3464:
 36453 10c30 48038414 		addq	58088(%rsp,%rdx), %rax
 36453      E8E20000 
 36454 10c38 488B08   		movq	(%rax), %rcx
 36455 10c3b E91801FF 		jmp	.L269
 36455      FF
 36456              	.LVL3465:
 36457              	.L37:
11912:src/vm3.c     **** 
11913:src/vm3.c     **** 
11914:src/vm3.c     **** mfhiPLUSsll:
11915:src/vm3.c     **** #if INDIRECT_DEBUG
11916:src/vm3.c     **** printf("%d|mfhi\n",counter);
11917:src/vm3.c     **** counter++;
11918:src/vm3.c     **** #endif
11919:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
11920:src/vm3.c     **** RF[rd] = HI;
11921:src/vm3.c     **** PC  =  nPC;
11922:src/vm3.c     **** nPC  += 4;
11923:src/vm3.c     **** 
11924:src/vm3.c     **** #if INDIRECT_DEBUG
11925:src/vm3.c     **** printf("%d|sll\n",counter);
11926:src/vm3.c     **** counter++;
11927:src/vm3.c     **** #endif
11928:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
11929:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36458              		.loc 1 11929 0
 36459 10c40 89D8     		movl	%ebx, %eax
11919:src/vm3.c     **** RF[rd] = HI;
 36460              		.loc 1 11919 0
 36461 10c42 41C1E80B 		shrl	$11, %r8d
 36462              	.LVL3466:
11930:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36463              		.loc 1 11930 0
 36464 10c46 89DA     		movl	%ebx, %edx
11929:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36465              		.loc 1 11929 0
 36466 10c48 C1E810   		shrl	$16, %eax
11920:src/vm3.c     **** PC  =  nPC;
 36467              		.loc 1 11920 0
 36468 10c4b 4183E01F 		andl	$31, %r8d
11928:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36469              		.loc 1 11928 0
 36470 10c4f C1EB06   		shrl	$6, %ebx
 36471              	.LVL3467:
GAS LISTING /tmp/cc15eBE3.s 			page 1196


11931:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 36472              		.loc 1 11931 0
 36473 10c52 83E01F   		andl	$31, %eax
11920:src/vm3.c     **** PC  =  nPC;
 36474              		.loc 1 11920 0
 36475 10c55 46892C85 		movl	%r13d, RF(,%r8,4)
 36475      00000000 
11928:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36476              		.loc 1 11928 0
 36477 10c5d 88D9     		movb	%bl, %cl
 36478              		.loc 1 11931 0
 36479 10c5f 8B048500 		movl	RF(,%rax,4), %eax
 36479      000000
11928:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36480              		.loc 1 11928 0
 36481 10c66 83E11F   		andl	$31, %ecx
11930:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 36482              		.loc 1 11930 0
 36483 10c69 C1EA0B   		shrl	$11, %edx
 36484              	.LVL3468:
11922:src/vm3.c     **** 
 36485              		.loc 1 11922 0
 36486 10c6c 83050000 		addl	$4, nPC(%rip)
 36486      000004
 36487              		.loc 1 11931 0
 36488 10c73 83E21F   		andl	$31, %edx
 36489 10c76 D3E0     		sall	%cl, %eax
 36490 10c78 89049500 		movl	%eax, RF(,%rdx,4)
 36490      000000
11932:src/vm3.c     **** PC  =  nPC;
 36491              		.loc 1 11932 0
 36492 10c7f 8B050000 		movl	nPC(%rip), %eax
 36492      0000
11933:src/vm3.c     **** nPC  += 4;
11934:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36493              		.loc 1 11934 0
 36494 10c85 8D5003   		leal	3(%rax), %edx
11933:src/vm3.c     **** nPC  += 4;
 36495              		.loc 1 11933 0
 36496 10c88 8D4804   		leal	4(%rax), %ecx
11932:src/vm3.c     **** PC  =  nPC;
 36497              		.loc 1 11932 0
 36498 10c8b 89050000 		movl	%eax, PC(%rip)
 36498      0000
 36499              		.loc 1 11934 0
 36500 10c91 440FB682 		movzbl	VM_memory(%rdx), %r8d
 36500      00000000 
 36501 10c99 89C2     		movl	%eax, %edx
11935:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11936:src/vm3.c     ****   if (op0 == 0x0) {
11937:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11938:src/vm3.c     ****     op0 = op0 + funct;
11939:src/vm3.c     ****   }
11940:src/vm3.c     ****     else {
11941:src/vm3.c     ****     op0 = op0 + FIX_OP;
11942:src/vm3.c     ****   }
11943:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1197


11944:src/vm3.c     **** p = array;
11945:src/vm3.c     **** p = p[op0].next_level;
11946:src/vm3.c     **** 
11947:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36502              		.loc 1 11947 0
 36503 10c9b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36503      000000
11934:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36504              		.loc 1 11934 0
 36505 10ca2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36505      000000
11933:src/vm3.c     **** nPC  += 4;
 36506              		.loc 1 11933 0
 36507 10ca9 890D0000 		movl	%ecx, nPC(%rip)
 36507      0000
 36508              		.loc 1 11947 0
 36509 10caf 8D4805   		leal	5(%rax), %ecx
 36510 10cb2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36510      000000
11934:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36511              		.loc 1 11934 0
 36512 10cb9 C1E218   		sall	$24, %edx
 36513 10cbc 4109D0   		orl	%edx, %r8d
 36514 10cbf 8D5001   		leal	1(%rax), %edx
 36515 10cc2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36515      000000
 36516 10cc9 C1E210   		sall	$16, %edx
 36517 10ccc 4109D0   		orl	%edx, %r8d
 36518 10ccf 8D5002   		leal	2(%rax), %edx
 36519 10cd2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36519      000000
 36520 10cd9 C1E208   		sall	$8, %edx
 36521 10cdc 4109D0   		orl	%edx, %r8d
 36522              	.LVL3469:
11935:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36523              		.loc 1 11935 0
 36524 10cdf 4489C6   		movl	%r8d, %esi
11937:src/vm3.c     ****     op0 = op0 + funct;
 36525              		.loc 1 11937 0
 36526 10ce2 4488C2   		movb	%r8b, %dl
11935:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36527              		.loc 1 11935 0
 36528 10ce5 C1EE1A   		shrl	$26, %esi
 36529              	.LVL3470:
11937:src/vm3.c     ****     op0 = op0 + funct;
 36530              		.loc 1 11937 0
 36531 10ce8 83E23F   		andl	$63, %edx
 36532 10ceb 8D7E2B   		leal	43(%rsi), %edi
 36533 10cee 4084F6   		testb	%sil, %sil
 36534 10cf1 0F45D7   		cmovne	%edi, %edx
 36535              	.LVL3471:
 36536              		.loc 1 11947 0
 36537 10cf4 C1E110   		sall	$16, %ecx
 36538 10cf7 C1E318   		sall	$24, %ebx
 36539 10cfa 09CB     		orl	%ecx, %ebx
 36540 10cfc 8D4807   		leal	7(%rax), %ecx
 36541 10cff 83C006   		addl	$6, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1198


 36542 10d02 0FB68000 		movzbl	VM_memory(%rax), %eax
 36542      000000
11945:src/vm3.c     **** 
 36543              		.loc 1 11945 0
 36544 10d09 0FB6D2   		movzbl	%dl, %edx
 36545              		.loc 1 11947 0
 36546 10d0c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36546      000000
11945:src/vm3.c     **** 
 36547              		.loc 1 11945 0
 36548 10d13 48C1E204 		salq	$4, %rdx
 36549              	.LVL3472:
 36550              		.loc 1 11947 0
 36551 10d17 C1E008   		sall	$8, %eax
 36552 10d1a 09CB     		orl	%ecx, %ebx
 36553 10d1c 09C3     		orl	%eax, %ebx
 36554              	.LVL3473:
11948:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36555              		.loc 1 11948 0
 36556 10d1e 89D9     		movl	%ebx, %ecx
11949:src/vm3.c     ****   if (op1 == 0x0) {
11950:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36557              		.loc 1 11950 0
 36558 10d20 88D8     		movb	%bl, %al
11948:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36559              		.loc 1 11948 0
 36560 10d22 C1E91A   		shrl	$26, %ecx
 36561              	.LVL3474:
 36562              		.loc 1 11950 0
 36563 10d25 83E03F   		andl	$63, %eax
 36564 10d28 8D712B   		leal	43(%rcx), %esi
 36565 10d2b 84C9     		testb	%cl, %cl
 36566 10d2d 0F45C6   		cmovne	%esi, %eax
 36567              	.LVL3475:
11951:src/vm3.c     ****     op1 = op1 + funct;
11952:src/vm3.c     ****   }
11953:src/vm3.c     ****     else {
11954:src/vm3.c     ****     op1 = op1 + FIX_OP;
11955:src/vm3.c     ****   }
11956:src/vm3.c     **** 
11957:src/vm3.c     **** goto *p[op1].code;
 36568              		.loc 1 11957 0
 36569 10d30 0FB6C0   		movzbl	%al, %eax
 36570 10d33 48C1E004 		salq	$4, %rax
 36571              	.LVL3476:
 36572 10d37 48038414 		addq	58088(%rsp,%rdx), %rax
 36572      E8E20000 
 36573 10d3f 488B08   		movq	(%rax), %rcx
 36574 10d42 E91100FF 		jmp	.L269
 36574      FF
 36575              	.LVL3477:
 36576              	.L208:
11958:src/vm3.c     **** 
11959:src/vm3.c     **** 
11960:src/vm3.c     **** srlPLUSsll:
11961:src/vm3.c     **** #if INDIRECT_DEBUG
11962:src/vm3.c     **** printf("%d|srl\n",counter);
GAS LISTING /tmp/cc15eBE3.s 			page 1199


11963:src/vm3.c     **** counter++;
11964:src/vm3.c     **** #endif
11965:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
11966:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36577              		.loc 1 11966 0
 36578 10d47 4489C0   		movl	%r8d, %eax
11967:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 36579              		.loc 1 11967 0
 36580 10d4a 4489C2   		movl	%r8d, %edx
11965:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36581              		.loc 1 11965 0
 36582 10d4d 41C1E806 		shrl	$6, %r8d
 36583              	.LVL3478:
11966:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 36584              		.loc 1 11966 0
 36585 10d51 C1E810   		shrl	$16, %eax
 36586              	.LVL3479:
11965:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36587              		.loc 1 11965 0
 36588 10d54 4488C1   		movb	%r8b, %cl
 36589              		.loc 1 11967 0
 36590 10d57 C1EA0B   		shrl	$11, %edx
 36591              	.LVL3480:
11968:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 36592              		.loc 1 11968 0
 36593 10d5a 83E01F   		andl	$31, %eax
11965:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36594              		.loc 1 11965 0
 36595 10d5d 83E11F   		andl	$31, %ecx
 36596              		.loc 1 11968 0
 36597 10d60 83E21F   		andl	$31, %edx
 36598 10d63 8B048500 		movl	RF(,%rax,4), %eax
 36598      000000
11969:src/vm3.c     **** PC  =  nPC;
11970:src/vm3.c     **** nPC  += 4;
 36599              		.loc 1 11970 0
 36600 10d6a 83050000 		addl	$4, nPC(%rip)
 36600      000004
 36601              	.LVL3481:
11968:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 36602              		.loc 1 11968 0
 36603 10d71 D3E8     		shrl	%cl, %eax
 36604 10d73 89049500 		movl	%eax, RF(,%rdx,4)
 36604      000000
11971:src/vm3.c     **** 
11972:src/vm3.c     **** #if INDIRECT_DEBUG
11973:src/vm3.c     **** printf("%d|sll\n",counter);
11974:src/vm3.c     **** counter++;
11975:src/vm3.c     **** #endif
11976:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
11977:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36605              		.loc 1 11977 0
 36606 10d7a 89D8     		movl	%ebx, %eax
11978:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36607              		.loc 1 11978 0
 36608 10d7c 89DA     		movl	%ebx, %edx
11977:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1200


 36609              		.loc 1 11977 0
 36610 10d7e C1E810   		shrl	$16, %eax
11976:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36611              		.loc 1 11976 0
 36612 10d81 C1EB06   		shrl	$6, %ebx
 36613              	.LVL3482:
 36614              		.loc 1 11978 0
 36615 10d84 C1EA0B   		shrl	$11, %edx
 36616              	.LVL3483:
11979:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 36617              		.loc 1 11979 0
 36618 10d87 83E01F   		andl	$31, %eax
11976:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36619              		.loc 1 11976 0
 36620 10d8a 88D9     		movb	%bl, %cl
 36621              		.loc 1 11979 0
 36622 10d8c 83E21F   		andl	$31, %edx
 36623 10d8f 8B048500 		movl	RF(,%rax,4), %eax
 36623      000000
11976:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36624              		.loc 1 11976 0
 36625 10d96 83E11F   		andl	$31, %ecx
 36626              		.loc 1 11979 0
 36627 10d99 D3E0     		sall	%cl, %eax
 36628 10d9b 89049500 		movl	%eax, RF(,%rdx,4)
 36628      000000
11980:src/vm3.c     **** PC  =  nPC;
 36629              		.loc 1 11980 0
 36630 10da2 8B050000 		movl	nPC(%rip), %eax
 36630      0000
11981:src/vm3.c     **** nPC  += 4;
11982:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36631              		.loc 1 11982 0
 36632 10da8 8D5003   		leal	3(%rax), %edx
11981:src/vm3.c     **** nPC  += 4;
 36633              		.loc 1 11981 0
 36634 10dab 8D4804   		leal	4(%rax), %ecx
11980:src/vm3.c     **** PC  =  nPC;
 36635              		.loc 1 11980 0
 36636 10dae 89050000 		movl	%eax, PC(%rip)
 36636      0000
 36637              		.loc 1 11982 0
 36638 10db4 440FB682 		movzbl	VM_memory(%rdx), %r8d
 36638      00000000 
 36639 10dbc 89C2     		movl	%eax, %edx
11983:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
11984:src/vm3.c     ****   if (op0 == 0x0) {
11985:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
11986:src/vm3.c     ****     op0 = op0 + funct;
11987:src/vm3.c     ****   }
11988:src/vm3.c     ****     else {
11989:src/vm3.c     ****     op0 = op0 + FIX_OP;
11990:src/vm3.c     ****   }
11991:src/vm3.c     **** 
11992:src/vm3.c     **** p = array;
11993:src/vm3.c     **** p = p[op0].next_level;
11994:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1201


11995:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36640              		.loc 1 11995 0
 36641 10dbe 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36641      000000
11982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36642              		.loc 1 11982 0
 36643 10dc5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36643      000000
11981:src/vm3.c     **** nPC  += 4;
 36644              		.loc 1 11981 0
 36645 10dcc 890D0000 		movl	%ecx, nPC(%rip)
 36645      0000
 36646              		.loc 1 11995 0
 36647 10dd2 8D4805   		leal	5(%rax), %ecx
 36648 10dd5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36648      000000
11982:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36649              		.loc 1 11982 0
 36650 10ddc C1E218   		sall	$24, %edx
 36651 10ddf 4109D0   		orl	%edx, %r8d
 36652 10de2 8D5001   		leal	1(%rax), %edx
 36653 10de5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36653      000000
 36654 10dec C1E210   		sall	$16, %edx
 36655 10def 4109D0   		orl	%edx, %r8d
 36656 10df2 8D5002   		leal	2(%rax), %edx
 36657 10df5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36657      000000
 36658 10dfc C1E208   		sall	$8, %edx
 36659 10dff 4109D0   		orl	%edx, %r8d
 36660              	.LVL3484:
11983:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36661              		.loc 1 11983 0
 36662 10e02 4489C6   		movl	%r8d, %esi
11985:src/vm3.c     ****     op0 = op0 + funct;
 36663              		.loc 1 11985 0
 36664 10e05 4488C2   		movb	%r8b, %dl
11983:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36665              		.loc 1 11983 0
 36666 10e08 C1EE1A   		shrl	$26, %esi
 36667              	.LVL3485:
11985:src/vm3.c     ****     op0 = op0 + funct;
 36668              		.loc 1 11985 0
 36669 10e0b 83E23F   		andl	$63, %edx
 36670 10e0e 8D7E2B   		leal	43(%rsi), %edi
 36671 10e11 4084F6   		testb	%sil, %sil
 36672 10e14 0F45D7   		cmovne	%edi, %edx
 36673              	.LVL3486:
 36674              		.loc 1 11995 0
 36675 10e17 C1E110   		sall	$16, %ecx
 36676 10e1a C1E318   		sall	$24, %ebx
 36677 10e1d 09CB     		orl	%ecx, %ebx
 36678 10e1f 8D4807   		leal	7(%rax), %ecx
 36679 10e22 83C006   		addl	$6, %eax
 36680 10e25 0FB68000 		movzbl	VM_memory(%rax), %eax
 36680      000000
11993:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1202


 36681              		.loc 1 11993 0
 36682 10e2c 0FB6D2   		movzbl	%dl, %edx
 36683              		.loc 1 11995 0
 36684 10e2f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36684      000000
11993:src/vm3.c     **** 
 36685              		.loc 1 11993 0
 36686 10e36 48C1E204 		salq	$4, %rdx
 36687              	.LVL3487:
 36688              		.loc 1 11995 0
 36689 10e3a C1E008   		sall	$8, %eax
 36690 10e3d 09CB     		orl	%ecx, %ebx
 36691 10e3f 09C3     		orl	%eax, %ebx
 36692              	.LVL3488:
11996:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36693              		.loc 1 11996 0
 36694 10e41 89D9     		movl	%ebx, %ecx
11997:src/vm3.c     ****   if (op1 == 0x0) {
11998:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36695              		.loc 1 11998 0
 36696 10e43 88D8     		movb	%bl, %al
11996:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36697              		.loc 1 11996 0
 36698 10e45 C1E91A   		shrl	$26, %ecx
 36699              	.LVL3489:
 36700              		.loc 1 11998 0
 36701 10e48 83E03F   		andl	$63, %eax
 36702 10e4b 8D712B   		leal	43(%rcx), %esi
 36703 10e4e 84C9     		testb	%cl, %cl
 36704 10e50 0F45C6   		cmovne	%esi, %eax
 36705              	.LVL3490:
11999:src/vm3.c     ****     op1 = op1 + funct;
12000:src/vm3.c     ****   }
12001:src/vm3.c     ****     else {
12002:src/vm3.c     ****     op1 = op1 + FIX_OP;
12003:src/vm3.c     ****   }
12004:src/vm3.c     **** 
12005:src/vm3.c     **** goto *p[op1].code;
 36706              		.loc 1 12005 0
 36707 10e53 0FB6C0   		movzbl	%al, %eax
 36708 10e56 48C1E004 		salq	$4, %rax
 36709              	.LVL3491:
 36710 10e5a 48038414 		addq	58088(%rsp,%rdx), %rax
 36710      E8E20000 
 36711 10e62 488B08   		movq	(%rax), %rcx
 36712 10e65 E9EEFEFE 		jmp	.L269
 36712      FF
 36713              	.LVL3492:
 36714              	.L14:
12006:src/vm3.c     **** 
12007:src/vm3.c     **** 
12008:src/vm3.c     **** movnPLUSandi:
12009:src/vm3.c     **** #if INDIRECT_DEBUG
12010:src/vm3.c     **** printf("%d|movn\n",counter);
12011:src/vm3.c     **** counter++;
12012:src/vm3.c     **** #endif
12013:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1203


12014:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12015:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36715              		.loc 1 12015 0
 36716 10e6a 4489C0   		movl	%r8d, %eax
 36717 10e6d C1E810   		shrl	$16, %eax
12016:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
12017:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 36718              		.loc 1 12017 0
 36719 10e70 83E01F   		andl	$31, %eax
 36720 10e73 833C8500 		cmpl	$0, RF(,%rax,4)
 36720      00000000 
 36721 10e7b 7420     		je	.L1312
12014:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36722              		.loc 1 12014 0 discriminator 1
 36723 10e7d 4489C0   		movl	%r8d, %eax
12016:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 36724              		.loc 1 12016 0 discriminator 1
 36725 10e80 41C1E80B 		shrl	$11, %r8d
 36726              	.LVL3493:
12014:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36727              		.loc 1 12014 0 discriminator 1
 36728 10e84 C1E815   		shrl	$21, %eax
 36729              	.LVL3494:
 36730              		.loc 1 12017 0 discriminator 1
 36731 10e87 4183E01F 		andl	$31, %r8d
 36732              	.LVL3495:
 36733 10e8b 83E01F   		andl	$31, %eax
 36734              	.LVL3496:
 36735 10e8e 8B048500 		movl	RF(,%rax,4), %eax
 36735      000000
 36736 10e95 42890485 		movl	%eax, RF(,%r8,4)
 36736      00000000 
 36737              	.L1312:
12018:src/vm3.c     **** PC  =  nPC;
12019:src/vm3.c     **** nPC  += 4;
12020:src/vm3.c     **** 
12021:src/vm3.c     **** #if INDIRECT_DEBUG
12022:src/vm3.c     **** printf("%d|andi\n",counter);
12023:src/vm3.c     **** counter++;
12024:src/vm3.c     **** #endif
12025:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 36738              		.loc 1 12025 0
 36739 10e9d 89DA     		movl	%ebx, %edx
12026:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36740              		.loc 1 12026 0
 36741 10e9f 89D8     		movl	%ebx, %eax
12027:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
12028:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
 36742              		.loc 1 12028 0
 36743 10ea1 0FBFDB   		movswl	%bx, %ebx
 36744              	.LVL3497:
12025:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36745              		.loc 1 12025 0
 36746 10ea4 C1EA15   		shrl	$21, %edx
12026:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36747              		.loc 1 12026 0
 36748 10ea7 C1E810   		shrl	$16, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1204


 36749              	.LVL3498:
12019:src/vm3.c     **** 
 36750              		.loc 1 12019 0
 36751 10eaa 83050000 		addl	$4, nPC(%rip)
 36751      000004
 36752              		.loc 1 12028 0
 36753 10eb1 83E21F   		andl	$31, %edx
 36754 10eb4 83E01F   		andl	$31, %eax
 36755 10eb7 231C9500 		andl	RF(,%rdx,4), %ebx
 36755      000000
 36756 10ebe 891C8500 		movl	%ebx, RF(,%rax,4)
 36756      000000
12029:src/vm3.c     **** PC  =  nPC;
 36757              		.loc 1 12029 0
 36758 10ec5 8B050000 		movl	nPC(%rip), %eax
 36758      0000
12030:src/vm3.c     **** nPC  += 4;
12031:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36759              		.loc 1 12031 0
 36760 10ecb 8D5003   		leal	3(%rax), %edx
12030:src/vm3.c     **** nPC  += 4;
 36761              		.loc 1 12030 0
 36762 10ece 8D4804   		leal	4(%rax), %ecx
12029:src/vm3.c     **** PC  =  nPC;
 36763              		.loc 1 12029 0
 36764 10ed1 89050000 		movl	%eax, PC(%rip)
 36764      0000
 36765              		.loc 1 12031 0
 36766 10ed7 440FB682 		movzbl	VM_memory(%rdx), %r8d
 36766      00000000 
 36767 10edf 89C2     		movl	%eax, %edx
12032:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12033:src/vm3.c     ****   if (op0 == 0x0) {
12034:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12035:src/vm3.c     ****     op0 = op0 + funct;
12036:src/vm3.c     ****   }
12037:src/vm3.c     ****     else {
12038:src/vm3.c     ****     op0 = op0 + FIX_OP;
12039:src/vm3.c     ****   }
12040:src/vm3.c     **** 
12041:src/vm3.c     **** p = array;
12042:src/vm3.c     **** p = p[op0].next_level;
12043:src/vm3.c     **** 
12044:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36768              		.loc 1 12044 0
 36769 10ee1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36769      000000
12031:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36770              		.loc 1 12031 0
 36771 10ee8 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36771      000000
12030:src/vm3.c     **** nPC  += 4;
 36772              		.loc 1 12030 0
 36773 10eef 890D0000 		movl	%ecx, nPC(%rip)
 36773      0000
 36774              		.loc 1 12044 0
 36775 10ef5 8D4805   		leal	5(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1205


 36776 10ef8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36776      000000
12031:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36777              		.loc 1 12031 0
 36778 10eff C1E218   		sall	$24, %edx
 36779 10f02 4109D0   		orl	%edx, %r8d
 36780 10f05 8D5001   		leal	1(%rax), %edx
 36781 10f08 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36781      000000
 36782 10f0f C1E210   		sall	$16, %edx
 36783 10f12 4109D0   		orl	%edx, %r8d
 36784 10f15 8D5002   		leal	2(%rax), %edx
 36785 10f18 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36785      000000
 36786 10f1f C1E208   		sall	$8, %edx
 36787 10f22 4109D0   		orl	%edx, %r8d
 36788              	.LVL3499:
12032:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36789              		.loc 1 12032 0
 36790 10f25 4489C6   		movl	%r8d, %esi
12034:src/vm3.c     ****     op0 = op0 + funct;
 36791              		.loc 1 12034 0
 36792 10f28 4488C2   		movb	%r8b, %dl
12032:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36793              		.loc 1 12032 0
 36794 10f2b C1EE1A   		shrl	$26, %esi
 36795              	.LVL3500:
12034:src/vm3.c     ****     op0 = op0 + funct;
 36796              		.loc 1 12034 0
 36797 10f2e 83E23F   		andl	$63, %edx
 36798 10f31 8D7E2B   		leal	43(%rsi), %edi
 36799 10f34 4084F6   		testb	%sil, %sil
 36800 10f37 0F45D7   		cmovne	%edi, %edx
 36801              	.LVL3501:
 36802              		.loc 1 12044 0
 36803 10f3a C1E110   		sall	$16, %ecx
 36804 10f3d C1E318   		sall	$24, %ebx
 36805 10f40 09CB     		orl	%ecx, %ebx
 36806 10f42 8D4807   		leal	7(%rax), %ecx
 36807 10f45 83C006   		addl	$6, %eax
 36808 10f48 0FB68000 		movzbl	VM_memory(%rax), %eax
 36808      000000
12042:src/vm3.c     **** 
 36809              		.loc 1 12042 0
 36810 10f4f 0FB6D2   		movzbl	%dl, %edx
 36811              		.loc 1 12044 0
 36812 10f52 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36812      000000
12042:src/vm3.c     **** 
 36813              		.loc 1 12042 0
 36814 10f59 48C1E204 		salq	$4, %rdx
 36815              	.LVL3502:
 36816              		.loc 1 12044 0
 36817 10f5d C1E008   		sall	$8, %eax
 36818 10f60 09CB     		orl	%ecx, %ebx
 36819 10f62 09C3     		orl	%eax, %ebx
 36820              	.LVL3503:
GAS LISTING /tmp/cc15eBE3.s 			page 1206


12045:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36821              		.loc 1 12045 0
 36822 10f64 89D9     		movl	%ebx, %ecx
12046:src/vm3.c     ****   if (op1 == 0x0) {
12047:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36823              		.loc 1 12047 0
 36824 10f66 88D8     		movb	%bl, %al
12045:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36825              		.loc 1 12045 0
 36826 10f68 C1E91A   		shrl	$26, %ecx
 36827              	.LVL3504:
 36828              		.loc 1 12047 0
 36829 10f6b 83E03F   		andl	$63, %eax
 36830 10f6e 8D712B   		leal	43(%rcx), %esi
 36831 10f71 84C9     		testb	%cl, %cl
 36832 10f73 0F45C6   		cmovne	%esi, %eax
 36833              	.LVL3505:
12048:src/vm3.c     ****     op1 = op1 + funct;
12049:src/vm3.c     ****   }
12050:src/vm3.c     ****     else {
12051:src/vm3.c     ****     op1 = op1 + FIX_OP;
12052:src/vm3.c     ****   }
12053:src/vm3.c     **** 
12054:src/vm3.c     **** goto *p[op1].code;
 36834              		.loc 1 12054 0
 36835 10f76 0FB6C0   		movzbl	%al, %eax
 36836 10f79 48C1E004 		salq	$4, %rax
 36837              	.LVL3506:
 36838 10f7d 48038414 		addq	58088(%rsp,%rdx), %rax
 36838      E8E20000 
 36839 10f85 488B08   		movq	(%rax), %rcx
 36840 10f88 E9CBFDFE 		jmp	.L269
 36840      FF
 36841              	.LVL3507:
 36842              	.L17:
12055:src/vm3.c     **** 
12056:src/vm3.c     **** 
12057:src/vm3.c     **** sllPLUSsrl:
12058:src/vm3.c     **** #if INDIRECT_DEBUG
12059:src/vm3.c     **** printf("%d|sll\n",counter);
12060:src/vm3.c     **** counter++;
12061:src/vm3.c     **** #endif
12062:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
12063:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36843              		.loc 1 12063 0
 36844 10f8d 4489C0   		movl	%r8d, %eax
12064:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 36845              		.loc 1 12064 0
 36846 10f90 4489C2   		movl	%r8d, %edx
12062:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36847              		.loc 1 12062 0
 36848 10f93 41C1E806 		shrl	$6, %r8d
 36849              	.LVL3508:
12063:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 36850              		.loc 1 12063 0
 36851 10f97 C1E810   		shrl	$16, %eax
 36852              	.LVL3509:
GAS LISTING /tmp/cc15eBE3.s 			page 1207


12062:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36853              		.loc 1 12062 0
 36854 10f9a 4488C1   		movb	%r8b, %cl
 36855              		.loc 1 12064 0
 36856 10f9d C1EA0B   		shrl	$11, %edx
 36857              	.LVL3510:
12065:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 36858              		.loc 1 12065 0
 36859 10fa0 83E01F   		andl	$31, %eax
12062:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36860              		.loc 1 12062 0
 36861 10fa3 83E11F   		andl	$31, %ecx
 36862              		.loc 1 12065 0
 36863 10fa6 83E21F   		andl	$31, %edx
 36864 10fa9 8B048500 		movl	RF(,%rax,4), %eax
 36864      000000
12066:src/vm3.c     **** PC  =  nPC;
12067:src/vm3.c     **** nPC  += 4;
 36865              		.loc 1 12067 0
 36866 10fb0 83050000 		addl	$4, nPC(%rip)
 36866      000004
 36867              	.LVL3511:
12065:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 36868              		.loc 1 12065 0
 36869 10fb7 D3E0     		sall	%cl, %eax
 36870 10fb9 89049500 		movl	%eax, RF(,%rdx,4)
 36870      000000
12068:src/vm3.c     **** 
12069:src/vm3.c     **** #if INDIRECT_DEBUG
12070:src/vm3.c     **** printf("%d|srl\n",counter);
12071:src/vm3.c     **** counter++;
12072:src/vm3.c     **** #endif
12073:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
12074:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36871              		.loc 1 12074 0
 36872 10fc0 89D8     		movl	%ebx, %eax
12075:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36873              		.loc 1 12075 0
 36874 10fc2 89DA     		movl	%ebx, %edx
12074:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 36875              		.loc 1 12074 0
 36876 10fc4 C1E810   		shrl	$16, %eax
12073:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36877              		.loc 1 12073 0
 36878 10fc7 C1EB06   		shrl	$6, %ebx
 36879              	.LVL3512:
 36880              		.loc 1 12075 0
 36881 10fca C1EA0B   		shrl	$11, %edx
 36882              	.LVL3513:
12076:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 36883              		.loc 1 12076 0
 36884 10fcd 83E01F   		andl	$31, %eax
12073:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36885              		.loc 1 12073 0
 36886 10fd0 88D9     		movb	%bl, %cl
 36887              		.loc 1 12076 0
 36888 10fd2 83E21F   		andl	$31, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1208


 36889 10fd5 8B048500 		movl	RF(,%rax,4), %eax
 36889      000000
12073:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 36890              		.loc 1 12073 0
 36891 10fdc 83E11F   		andl	$31, %ecx
 36892              		.loc 1 12076 0
 36893 10fdf D3E8     		shrl	%cl, %eax
 36894 10fe1 89049500 		movl	%eax, RF(,%rdx,4)
 36894      000000
12077:src/vm3.c     **** PC  =  nPC;
 36895              		.loc 1 12077 0
 36896 10fe8 8B050000 		movl	nPC(%rip), %eax
 36896      0000
12078:src/vm3.c     **** nPC  += 4;
12079:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 36897              		.loc 1 12079 0
 36898 10fee 8D5003   		leal	3(%rax), %edx
12078:src/vm3.c     **** nPC  += 4;
 36899              		.loc 1 12078 0
 36900 10ff1 8D4804   		leal	4(%rax), %ecx
12077:src/vm3.c     **** PC  =  nPC;
 36901              		.loc 1 12077 0
 36902 10ff4 89050000 		movl	%eax, PC(%rip)
 36902      0000
 36903              		.loc 1 12079 0
 36904 10ffa 440FB682 		movzbl	VM_memory(%rdx), %r8d
 36904      00000000 
 36905 11002 89C2     		movl	%eax, %edx
12080:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12081:src/vm3.c     ****   if (op0 == 0x0) {
12082:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12083:src/vm3.c     ****     op0 = op0 + funct;
12084:src/vm3.c     ****   }
12085:src/vm3.c     ****     else {
12086:src/vm3.c     ****     op0 = op0 + FIX_OP;
12087:src/vm3.c     ****   }
12088:src/vm3.c     **** 
12089:src/vm3.c     **** p = array;
12090:src/vm3.c     **** p = p[op0].next_level;
12091:src/vm3.c     **** 
12092:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 36906              		.loc 1 12092 0
 36907 11004 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 36907      000000
12079:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36908              		.loc 1 12079 0
 36909 1100b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36909      000000
12078:src/vm3.c     **** nPC  += 4;
 36910              		.loc 1 12078 0
 36911 11012 890D0000 		movl	%ecx, nPC(%rip)
 36911      0000
 36912              		.loc 1 12092 0
 36913 11018 8D4805   		leal	5(%rax), %ecx
 36914 1101b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36914      000000
12079:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1209


 36915              		.loc 1 12079 0
 36916 11022 C1E218   		sall	$24, %edx
 36917 11025 4109D0   		orl	%edx, %r8d
 36918 11028 8D5001   		leal	1(%rax), %edx
 36919 1102b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36919      000000
 36920 11032 C1E210   		sall	$16, %edx
 36921 11035 4109D0   		orl	%edx, %r8d
 36922 11038 8D5002   		leal	2(%rax), %edx
 36923 1103b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 36923      000000
 36924 11042 C1E208   		sall	$8, %edx
 36925 11045 4109D0   		orl	%edx, %r8d
 36926              	.LVL3514:
12080:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36927              		.loc 1 12080 0
 36928 11048 4489C6   		movl	%r8d, %esi
12082:src/vm3.c     ****     op0 = op0 + funct;
 36929              		.loc 1 12082 0
 36930 1104b 4488C2   		movb	%r8b, %dl
12080:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 36931              		.loc 1 12080 0
 36932 1104e C1EE1A   		shrl	$26, %esi
 36933              	.LVL3515:
12082:src/vm3.c     ****     op0 = op0 + funct;
 36934              		.loc 1 12082 0
 36935 11051 83E23F   		andl	$63, %edx
 36936 11054 8D7E2B   		leal	43(%rsi), %edi
 36937 11057 4084F6   		testb	%sil, %sil
 36938 1105a 0F45D7   		cmovne	%edi, %edx
 36939              	.LVL3516:
 36940              		.loc 1 12092 0
 36941 1105d C1E110   		sall	$16, %ecx
 36942 11060 C1E318   		sall	$24, %ebx
 36943 11063 09CB     		orl	%ecx, %ebx
 36944 11065 8D4807   		leal	7(%rax), %ecx
 36945 11068 83C006   		addl	$6, %eax
 36946 1106b 0FB68000 		movzbl	VM_memory(%rax), %eax
 36946      000000
12090:src/vm3.c     **** 
 36947              		.loc 1 12090 0
 36948 11072 0FB6D2   		movzbl	%dl, %edx
 36949              		.loc 1 12092 0
 36950 11075 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 36950      000000
12090:src/vm3.c     **** 
 36951              		.loc 1 12090 0
 36952 1107c 48C1E204 		salq	$4, %rdx
 36953              	.LVL3517:
 36954              		.loc 1 12092 0
 36955 11080 C1E008   		sall	$8, %eax
 36956 11083 09CB     		orl	%ecx, %ebx
 36957 11085 09C3     		orl	%eax, %ebx
 36958              	.LVL3518:
12093:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36959              		.loc 1 12093 0
 36960 11087 89D9     		movl	%ebx, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1210


12094:src/vm3.c     ****   if (op1 == 0x0) {
12095:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 36961              		.loc 1 12095 0
 36962 11089 88D8     		movb	%bl, %al
12093:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 36963              		.loc 1 12093 0
 36964 1108b C1E91A   		shrl	$26, %ecx
 36965              	.LVL3519:
 36966              		.loc 1 12095 0
 36967 1108e 83E03F   		andl	$63, %eax
 36968 11091 8D712B   		leal	43(%rcx), %esi
 36969 11094 84C9     		testb	%cl, %cl
 36970 11096 0F45C6   		cmovne	%esi, %eax
 36971              	.LVL3520:
12096:src/vm3.c     ****     op1 = op1 + funct;
12097:src/vm3.c     ****   }
12098:src/vm3.c     ****     else {
12099:src/vm3.c     ****     op1 = op1 + FIX_OP;
12100:src/vm3.c     ****   }
12101:src/vm3.c     **** 
12102:src/vm3.c     **** goto *p[op1].code;
 36972              		.loc 1 12102 0
 36973 11099 0FB6C0   		movzbl	%al, %eax
 36974 1109c 48C1E004 		salq	$4, %rax
 36975              	.LVL3521:
 36976 110a0 48038414 		addq	58088(%rsp,%rdx), %rax
 36976      E8E20000 
 36977 110a8 488B08   		movq	(%rax), %rcx
 36978 110ab E9A8FCFE 		jmp	.L269
 36978      FF
 36979              	.LVL3522:
 36980              	.L92:
12103:src/vm3.c     **** 
12104:src/vm3.c     **** 
12105:src/vm3.c     **** lwPLUSslt:
12106:src/vm3.c     **** #if INDIRECT_DEBUG
12107:src/vm3.c     **** printf("%d|lw\n",counter);
12108:src/vm3.c     **** counter++;
12109:src/vm3.c     **** #endif
12110:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 36981              		.loc 1 12110 0
 36982 110b0 4489C0   		movl	%r8d, %eax
12111:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
12112:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12113:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 36983              		.loc 1 12113 0
 36984 110b3 410FBFD0 		movswl	%r8w, %edx
12111:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36985              		.loc 1 12111 0
 36986 110b7 41C1E810 		shrl	$16, %r8d
 36987              	.LVL3523:
12110:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 36988              		.loc 1 12110 0
 36989 110bb C1E815   		shrl	$21, %eax
 36990              	.LVL3524:
 36991              		.loc 1 12113 0
 36992 110be 4183E01F 		andl	$31, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1211


12114:src/vm3.c     **** PC  =  nPC;
12115:src/vm3.c     **** nPC  += 4;
 36993              		.loc 1 12115 0
 36994 110c2 83050000 		addl	$4, nPC(%rip)
 36994      000004
 36995              	.LVL3525:
12113:src/vm3.c     **** PC  =  nPC;
 36996              		.loc 1 12113 0
 36997 110c9 83E01F   		andl	$31, %eax
 36998 110cc 03148500 		addl	RF(,%rax,4), %edx
 36998      000000
 36999              	.LVL3526:
 37000 110d3 8D4203   		leal	3(%rdx), %eax
 37001 110d6 89D1     		movl	%edx, %ecx
 37002 110d8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37002      000000
 37003 110df 0FB68000 		movzbl	VM_memory(%rax), %eax
 37003      000000
 37004 110e6 C1E118   		sall	$24, %ecx
 37005 110e9 09C8     		orl	%ecx, %eax
 37006 110eb 8D4A01   		leal	1(%rdx), %ecx
 37007 110ee 83C202   		addl	$2, %edx
 37008 110f1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37008      000000
 37009 110f8 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37009      000000
 37010 110ff C1E208   		sall	$8, %edx
 37011 11102 C1E110   		sall	$16, %ecx
 37012 11105 09C8     		orl	%ecx, %eax
 37013 11107 09D0     		orl	%edx, %eax
12116:src/vm3.c     **** 
12117:src/vm3.c     **** #if INDIRECT_DEBUG
12118:src/vm3.c     **** printf("%d|slt\n",counter);
12119:src/vm3.c     **** counter++;
12120:src/vm3.c     **** #endif
12121:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 37014              		.loc 1 12121 0
 37015 11109 89DA     		movl	%ebx, %edx
12113:src/vm3.c     **** PC  =  nPC;
 37016              		.loc 1 12113 0
 37017 1110b 42890485 		movl	%eax, RF(,%r8,4)
 37017      00000000 
 37018              		.loc 1 12121 0
 37019 11113 C1EA15   		shrl	$21, %edx
12122:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12123:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 37020              		.loc 1 12123 0
 37021 11116 89D8     		movl	%ebx, %eax
12122:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37022              		.loc 1 12122 0
 37023 11118 C1EB10   		shrl	$16, %ebx
 37024              	.LVL3527:
 37025              		.loc 1 12123 0
 37026 1111b C1E80B   		shrl	$11, %eax
 37027              	.LVL3528:
12124:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 37028              		.loc 1 12124 0
GAS LISTING /tmp/cc15eBE3.s 			page 1212


 37029 1111e 83E21F   		andl	$31, %edx
 37030 11121 83E31F   		andl	$31, %ebx
 37031 11124 83E01F   		andl	$31, %eax
 37032 11127 8B3C9D00 		movl	RF(,%rbx,4), %edi
 37032      000000
 37033 1112e 393C9500 		cmpl	%edi, RF(,%rdx,4)
 37033      000000
 37034 11135 0F92C2   		setb	%dl
 37035 11138 0FB6D2   		movzbl	%dl, %edx
 37036 1113b 89148500 		movl	%edx, RF(,%rax,4)
 37036      000000
12125:src/vm3.c     **** PC  =  nPC;
 37037              		.loc 1 12125 0
 37038 11142 8B050000 		movl	nPC(%rip), %eax
 37038      0000
12126:src/vm3.c     **** nPC  += 4;
12127:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37039              		.loc 1 12127 0
 37040 11148 8D5003   		leal	3(%rax), %edx
12126:src/vm3.c     **** nPC  += 4;
 37041              		.loc 1 12126 0
 37042 1114b 8D4804   		leal	4(%rax), %ecx
12125:src/vm3.c     **** PC  =  nPC;
 37043              		.loc 1 12125 0
 37044 1114e 89050000 		movl	%eax, PC(%rip)
 37044      0000
 37045              		.loc 1 12127 0
 37046 11154 440FB682 		movzbl	VM_memory(%rdx), %r8d
 37046      00000000 
 37047 1115c 89C2     		movl	%eax, %edx
12128:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12129:src/vm3.c     ****   if (op0 == 0x0) {
12130:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12131:src/vm3.c     ****     op0 = op0 + funct;
12132:src/vm3.c     ****   }
12133:src/vm3.c     ****     else {
12134:src/vm3.c     ****     op0 = op0 + FIX_OP;
12135:src/vm3.c     ****   }
12136:src/vm3.c     **** 
12137:src/vm3.c     **** p = array;
12138:src/vm3.c     **** p = p[op0].next_level;
12139:src/vm3.c     **** 
12140:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37048              		.loc 1 12140 0
 37049 1115e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 37049      000000
12127:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37050              		.loc 1 12127 0
 37051 11165 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37051      000000
12126:src/vm3.c     **** nPC  += 4;
 37052              		.loc 1 12126 0
 37053 1116c 890D0000 		movl	%ecx, nPC(%rip)
 37053      0000
 37054              		.loc 1 12140 0
 37055 11172 8D4805   		leal	5(%rax), %ecx
 37056 11175 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1213


 37056      000000
12127:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37057              		.loc 1 12127 0
 37058 1117c C1E218   		sall	$24, %edx
 37059 1117f 4109D0   		orl	%edx, %r8d
 37060 11182 8D5001   		leal	1(%rax), %edx
 37061 11185 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37061      000000
 37062 1118c C1E210   		sall	$16, %edx
 37063 1118f 4109D0   		orl	%edx, %r8d
 37064 11192 8D5002   		leal	2(%rax), %edx
 37065 11195 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37065      000000
 37066 1119c C1E208   		sall	$8, %edx
 37067 1119f 4109D0   		orl	%edx, %r8d
 37068              	.LVL3529:
12128:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37069              		.loc 1 12128 0
 37070 111a2 4489C6   		movl	%r8d, %esi
12130:src/vm3.c     ****     op0 = op0 + funct;
 37071              		.loc 1 12130 0
 37072 111a5 4488C2   		movb	%r8b, %dl
12128:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37073              		.loc 1 12128 0
 37074 111a8 C1EE1A   		shrl	$26, %esi
 37075              	.LVL3530:
12130:src/vm3.c     ****     op0 = op0 + funct;
 37076              		.loc 1 12130 0
 37077 111ab 83E23F   		andl	$63, %edx
 37078 111ae 8D7E2B   		leal	43(%rsi), %edi
 37079 111b1 4084F6   		testb	%sil, %sil
 37080 111b4 0F45D7   		cmovne	%edi, %edx
 37081              	.LVL3531:
 37082              		.loc 1 12140 0
 37083 111b7 C1E110   		sall	$16, %ecx
 37084 111ba C1E318   		sall	$24, %ebx
 37085 111bd 09CB     		orl	%ecx, %ebx
 37086 111bf 8D4807   		leal	7(%rax), %ecx
 37087 111c2 83C006   		addl	$6, %eax
 37088 111c5 0FB68000 		movzbl	VM_memory(%rax), %eax
 37088      000000
12138:src/vm3.c     **** 
 37089              		.loc 1 12138 0
 37090 111cc 0FB6D2   		movzbl	%dl, %edx
 37091              		.loc 1 12140 0
 37092 111cf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37092      000000
12138:src/vm3.c     **** 
 37093              		.loc 1 12138 0
 37094 111d6 48C1E204 		salq	$4, %rdx
 37095              	.LVL3532:
 37096              		.loc 1 12140 0
 37097 111da C1E008   		sall	$8, %eax
 37098 111dd 09CB     		orl	%ecx, %ebx
 37099 111df 09C3     		orl	%eax, %ebx
 37100              	.LVL3533:
12141:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1214


 37101              		.loc 1 12141 0
 37102 111e1 89D9     		movl	%ebx, %ecx
12142:src/vm3.c     ****   if (op1 == 0x0) {
12143:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37103              		.loc 1 12143 0
 37104 111e3 88D8     		movb	%bl, %al
12141:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37105              		.loc 1 12141 0
 37106 111e5 C1E91A   		shrl	$26, %ecx
 37107              	.LVL3534:
 37108              		.loc 1 12143 0
 37109 111e8 83E03F   		andl	$63, %eax
 37110 111eb 8D712B   		leal	43(%rcx), %esi
 37111 111ee 84C9     		testb	%cl, %cl
 37112 111f0 0F45C6   		cmovne	%esi, %eax
 37113              	.LVL3535:
12144:src/vm3.c     ****     op1 = op1 + funct;
12145:src/vm3.c     ****   }
12146:src/vm3.c     ****     else {
12147:src/vm3.c     ****     op1 = op1 + FIX_OP;
12148:src/vm3.c     ****   }
12149:src/vm3.c     **** 
12150:src/vm3.c     **** goto *p[op1].code;
 37114              		.loc 1 12150 0
 37115 111f3 0FB6C0   		movzbl	%al, %eax
 37116 111f6 48C1E004 		salq	$4, %rax
 37117              	.LVL3536:
 37118 111fa 48038414 		addq	58088(%rsp,%rdx), %rax
 37118      E8E20000 
 37119 11202 488B08   		movq	(%rax), %rcx
 37120 11205 E94EFBFE 		jmp	.L269
 37120      FF
 37121              	.LVL3537:
 37122              	.L180:
12151:src/vm3.c     **** 
12152:src/vm3.c     **** 
12153:src/vm3.c     **** swPLUSaddu:
12154:src/vm3.c     **** #if INDIRECT_DEBUG
12155:src/vm3.c     **** printf("%d|sw\n",counter);
12156:src/vm3.c     **** counter++;
12157:src/vm3.c     **** #endif
12158:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 37123              		.loc 1 12158 0
 37124 1120a 4489C0   		movl	%r8d, %eax
12159:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
12160:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12161:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 37125              		.loc 1 12161 0
 37126 1120d 410FBFC8 		movswl	%r8w, %ecx
12159:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37127              		.loc 1 12159 0
 37128 11211 41C1E810 		shrl	$16, %r8d
 37129              	.LVL3538:
12158:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37130              		.loc 1 12158 0
 37131 11215 C1E815   		shrl	$21, %eax
 37132              	.LVL3539:
GAS LISTING /tmp/cc15eBE3.s 			page 1215


 37133              		.loc 1 12161 0
 37134 11218 4183E01F 		andl	$31, %r8d
12162:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
12163:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
12164:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
12165:src/vm3.c     **** PC  =  nPC;
12166:src/vm3.c     **** nPC  += 4;
 37135              		.loc 1 12166 0
 37136 1121c 83050000 		addl	$4, nPC(%rip)
 37136      000004
 37137              	.LVL3540:
12161:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 37138              		.loc 1 12161 0
 37139 11223 83E01F   		andl	$31, %eax
 37140 11226 8B148500 		movl	RF(,%rax,4), %edx
 37140      000000
 37141 1122d 428B0485 		movl	RF(,%r8,4), %eax
 37141      00000000 
 37142 11235 8D3411   		leal	(%rcx,%rdx), %esi
 37143 11238 89C7     		movl	%eax, %edi
 37144 1123a C1EF18   		shrl	$24, %edi
 37145 1123d 4088BE00 		movb	%dil, VM_memory(%rsi)
 37145      000000
12162:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 37146              		.loc 1 12162 0
 37147 11244 8D741101 		leal	1(%rcx,%rdx), %esi
 37148 11248 89C7     		movl	%eax, %edi
 37149 1124a C1EF10   		shrl	$16, %edi
 37150 1124d 4088BE00 		movb	%dil, VM_memory(%rsi)
 37150      000000
12163:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 37151              		.loc 1 12163 0
 37152 11254 8D741102 		leal	2(%rcx,%rdx), %esi
12164:src/vm3.c     **** PC  =  nPC;
 37153              		.loc 1 12164 0
 37154 11258 8D541103 		leal	3(%rcx,%rdx), %edx
12163:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 37155              		.loc 1 12163 0
 37156 1125c 0FB6FC   		movzbl	%ah, %edi
 37157 1125f 4088BE00 		movb	%dil, VM_memory(%rsi)
 37157      000000
12164:src/vm3.c     **** PC  =  nPC;
 37158              		.loc 1 12164 0
 37159 11266 88820000 		movb	%al, VM_memory(%rdx)
 37159      0000
12167:src/vm3.c     **** 
12168:src/vm3.c     **** #if INDIRECT_DEBUG
12169:src/vm3.c     **** printf("%d|addu\n",counter);
12170:src/vm3.c     **** counter++;
12171:src/vm3.c     **** #endif
12172:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
12173:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37160              		.loc 1 12173 0
 37161 1126c 89D8     		movl	%ebx, %eax
12174:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 37162              		.loc 1 12174 0
 37163 1126e 89DA     		movl	%ebx, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1216


12173:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 37164              		.loc 1 12173 0
 37165 11270 C1E810   		shrl	$16, %eax
12172:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37166              		.loc 1 12172 0
 37167 11273 C1EB15   		shrl	$21, %ebx
 37168              	.LVL3541:
12175:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 37169              		.loc 1 12175 0
 37170 11276 83E31F   		andl	$31, %ebx
 37171 11279 83E01F   		andl	$31, %eax
12174:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 37172              		.loc 1 12174 0
 37173 1127c C1EA0B   		shrl	$11, %edx
 37174              	.LVL3542:
 37175              		.loc 1 12175 0
 37176 1127f 8B048500 		movl	RF(,%rax,4), %eax
 37176      000000
 37177 11286 03049D00 		addl	RF(,%rbx,4), %eax
 37177      000000
 37178 1128d 83E21F   		andl	$31, %edx
 37179 11290 89049500 		movl	%eax, RF(,%rdx,4)
 37179      000000
12176:src/vm3.c     **** PC  =  nPC;
 37180              		.loc 1 12176 0
 37181 11297 8B050000 		movl	nPC(%rip), %eax
 37181      0000
12177:src/vm3.c     **** nPC  += 4;
12178:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37182              		.loc 1 12178 0
 37183 1129d 8D5003   		leal	3(%rax), %edx
12177:src/vm3.c     **** nPC  += 4;
 37184              		.loc 1 12177 0
 37185 112a0 8D4804   		leal	4(%rax), %ecx
 37186              	.LVL3543:
12176:src/vm3.c     **** PC  =  nPC;
 37187              		.loc 1 12176 0
 37188 112a3 89050000 		movl	%eax, PC(%rip)
 37188      0000
 37189              		.loc 1 12178 0
 37190 112a9 440FB682 		movzbl	VM_memory(%rdx), %r8d
 37190      00000000 
 37191 112b1 89C2     		movl	%eax, %edx
12179:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12180:src/vm3.c     ****   if (op0 == 0x0) {
12181:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12182:src/vm3.c     ****     op0 = op0 + funct;
12183:src/vm3.c     ****   }
12184:src/vm3.c     ****     else {
12185:src/vm3.c     ****     op0 = op0 + FIX_OP;
12186:src/vm3.c     ****   }
12187:src/vm3.c     **** 
12188:src/vm3.c     **** p = array;
12189:src/vm3.c     **** p = p[op0].next_level;
12190:src/vm3.c     **** 
12191:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37192              		.loc 1 12191 0
GAS LISTING /tmp/cc15eBE3.s 			page 1217


 37193 112b3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 37193      000000
12178:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37194              		.loc 1 12178 0
 37195 112ba 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37195      000000
12177:src/vm3.c     **** nPC  += 4;
 37196              		.loc 1 12177 0
 37197 112c1 890D0000 		movl	%ecx, nPC(%rip)
 37197      0000
 37198              		.loc 1 12191 0
 37199 112c7 8D4805   		leal	5(%rax), %ecx
 37200 112ca 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37200      000000
12178:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37201              		.loc 1 12178 0
 37202 112d1 C1E218   		sall	$24, %edx
 37203 112d4 4109D0   		orl	%edx, %r8d
 37204 112d7 8D5001   		leal	1(%rax), %edx
 37205 112da 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37205      000000
 37206 112e1 C1E210   		sall	$16, %edx
 37207 112e4 4109D0   		orl	%edx, %r8d
 37208 112e7 8D5002   		leal	2(%rax), %edx
 37209 112ea 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37209      000000
 37210 112f1 C1E208   		sall	$8, %edx
 37211 112f4 4109D0   		orl	%edx, %r8d
 37212              	.LVL3544:
12179:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37213              		.loc 1 12179 0
 37214 112f7 4489C6   		movl	%r8d, %esi
12181:src/vm3.c     ****     op0 = op0 + funct;
 37215              		.loc 1 12181 0
 37216 112fa 4488C2   		movb	%r8b, %dl
12179:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37217              		.loc 1 12179 0
 37218 112fd C1EE1A   		shrl	$26, %esi
 37219              	.LVL3545:
12181:src/vm3.c     ****     op0 = op0 + funct;
 37220              		.loc 1 12181 0
 37221 11300 83E23F   		andl	$63, %edx
 37222 11303 8D7E2B   		leal	43(%rsi), %edi
 37223 11306 4084F6   		testb	%sil, %sil
 37224 11309 0F45D7   		cmovne	%edi, %edx
 37225              	.LVL3546:
 37226              		.loc 1 12191 0
 37227 1130c C1E110   		sall	$16, %ecx
 37228 1130f C1E318   		sall	$24, %ebx
 37229 11312 09CB     		orl	%ecx, %ebx
 37230 11314 8D4807   		leal	7(%rax), %ecx
 37231 11317 83C006   		addl	$6, %eax
 37232 1131a 0FB68000 		movzbl	VM_memory(%rax), %eax
 37232      000000
12189:src/vm3.c     **** 
 37233              		.loc 1 12189 0
 37234 11321 0FB6D2   		movzbl	%dl, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1218


 37235              		.loc 1 12191 0
 37236 11324 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37236      000000
12189:src/vm3.c     **** 
 37237              		.loc 1 12189 0
 37238 1132b 48C1E204 		salq	$4, %rdx
 37239              	.LVL3547:
 37240              		.loc 1 12191 0
 37241 1132f C1E008   		sall	$8, %eax
 37242 11332 09CB     		orl	%ecx, %ebx
 37243 11334 09C3     		orl	%eax, %ebx
 37244              	.LVL3548:
12192:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37245              		.loc 1 12192 0
 37246 11336 89D9     		movl	%ebx, %ecx
12193:src/vm3.c     ****   if (op1 == 0x0) {
12194:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37247              		.loc 1 12194 0
 37248 11338 88D8     		movb	%bl, %al
12192:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37249              		.loc 1 12192 0
 37250 1133a C1E91A   		shrl	$26, %ecx
 37251              	.LVL3549:
 37252              		.loc 1 12194 0
 37253 1133d 83E03F   		andl	$63, %eax
 37254 11340 8D712B   		leal	43(%rcx), %esi
 37255 11343 84C9     		testb	%cl, %cl
 37256 11345 0F45C6   		cmovne	%esi, %eax
 37257              	.LVL3550:
12195:src/vm3.c     ****     op1 = op1 + funct;
12196:src/vm3.c     ****   }
12197:src/vm3.c     ****     else {
12198:src/vm3.c     ****     op1 = op1 + FIX_OP;
12199:src/vm3.c     ****   }
12200:src/vm3.c     **** 
12201:src/vm3.c     **** goto *p[op1].code;
 37258              		.loc 1 12201 0
 37259 11348 0FB6C0   		movzbl	%al, %eax
 37260 1134b 48C1E004 		salq	$4, %rax
 37261              	.LVL3551:
 37262 1134f 48038414 		addq	58088(%rsp,%rdx), %rax
 37262      E8E20000 
 37263 11357 488B08   		movq	(%rax), %rcx
 37264 1135a E9F9F9FE 		jmp	.L269
 37264      FF
 37265              	.LVL3552:
 37266              	.L66:
12202:src/vm3.c     **** 
12203:src/vm3.c     **** 
12204:src/vm3.c     **** adduPLUSlw:
12205:src/vm3.c     **** #if INDIRECT_DEBUG
12206:src/vm3.c     **** printf("%d|addu\n",counter);
12207:src/vm3.c     **** counter++;
12208:src/vm3.c     **** #endif
12209:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12210:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37267              		.loc 1 12210 0
GAS LISTING /tmp/cc15eBE3.s 			page 1219


 37268 1135f 4489C0   		movl	%r8d, %eax
12211:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 37269              		.loc 1 12211 0
 37270 11362 4489C2   		movl	%r8d, %edx
12209:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37271              		.loc 1 12209 0
 37272 11365 41C1E815 		shrl	$21, %r8d
 37273              	.LVL3553:
12210:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 37274              		.loc 1 12210 0
 37275 11369 C1E810   		shrl	$16, %eax
 37276              	.LVL3554:
12212:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 37277              		.loc 1 12212 0
 37278 1136c 4183E01F 		andl	$31, %r8d
12211:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 37279              		.loc 1 12211 0
 37280 11370 C1EA0B   		shrl	$11, %edx
 37281              	.LVL3555:
 37282              		.loc 1 12212 0
 37283 11373 83E01F   		andl	$31, %eax
 37284 11376 83E21F   		andl	$31, %edx
12213:src/vm3.c     **** PC  =  nPC;
12214:src/vm3.c     **** nPC  += 4;
 37285              		.loc 1 12214 0
 37286 11379 83050000 		addl	$4, nPC(%rip)
 37286      000004
 37287              	.LVL3556:
12212:src/vm3.c     **** PC  =  nPC;
 37288              		.loc 1 12212 0
 37289 11380 8B048500 		movl	RF(,%rax,4), %eax
 37289      000000
 37290 11387 42030485 		addl	RF(,%r8,4), %eax
 37290      00000000 
 37291 1138f 89049500 		movl	%eax, RF(,%rdx,4)
 37291      000000
12215:src/vm3.c     **** 
12216:src/vm3.c     **** #if INDIRECT_DEBUG
12217:src/vm3.c     **** printf("%d|lw\n",counter);
12218:src/vm3.c     **** counter++;
12219:src/vm3.c     **** #endif
12220:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 37292              		.loc 1 12220 0
 37293 11396 89D8     		movl	%ebx, %eax
12221:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12222:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
12223:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 37294              		.loc 1 12223 0
 37295 11398 0FBFD3   		movswl	%bx, %edx
12220:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37296              		.loc 1 12220 0
 37297 1139b C1E815   		shrl	$21, %eax
12221:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37298              		.loc 1 12221 0
 37299 1139e C1EB10   		shrl	$16, %ebx
 37300              	.LVL3557:
 37301              		.loc 1 12223 0
GAS LISTING /tmp/cc15eBE3.s 			page 1220


 37302 113a1 83E01F   		andl	$31, %eax
 37303 113a4 83E31F   		andl	$31, %ebx
 37304 113a7 03148500 		addl	RF(,%rax,4), %edx
 37304      000000
 37305              	.LVL3558:
 37306 113ae 8D4203   		leal	3(%rdx), %eax
 37307 113b1 89D1     		movl	%edx, %ecx
 37308 113b3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37308      000000
 37309 113ba 0FB68000 		movzbl	VM_memory(%rax), %eax
 37309      000000
 37310 113c1 C1E118   		sall	$24, %ecx
 37311 113c4 09C8     		orl	%ecx, %eax
 37312 113c6 8D4A01   		leal	1(%rdx), %ecx
 37313 113c9 83C202   		addl	$2, %edx
 37314 113cc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37314      000000
 37315 113d3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37315      000000
 37316 113da C1E208   		sall	$8, %edx
 37317 113dd C1E110   		sall	$16, %ecx
 37318 113e0 09C8     		orl	%ecx, %eax
 37319 113e2 09D0     		orl	%edx, %eax
 37320 113e4 89049D00 		movl	%eax, RF(,%rbx,4)
 37320      000000
12224:src/vm3.c     **** PC  =  nPC;
 37321              		.loc 1 12224 0
 37322 113eb 8B050000 		movl	nPC(%rip), %eax
 37322      0000
12225:src/vm3.c     **** nPC  += 4;
12226:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37323              		.loc 1 12226 0
 37324 113f1 8D5003   		leal	3(%rax), %edx
12225:src/vm3.c     **** nPC  += 4;
 37325              		.loc 1 12225 0
 37326 113f4 8D4804   		leal	4(%rax), %ecx
12224:src/vm3.c     **** PC  =  nPC;
 37327              		.loc 1 12224 0
 37328 113f7 89050000 		movl	%eax, PC(%rip)
 37328      0000
 37329              		.loc 1 12226 0
 37330 113fd 440FB682 		movzbl	VM_memory(%rdx), %r8d
 37330      00000000 
 37331 11405 89C2     		movl	%eax, %edx
12227:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12228:src/vm3.c     ****   if (op0 == 0x0) {
12229:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12230:src/vm3.c     ****     op0 = op0 + funct;
12231:src/vm3.c     ****   }
12232:src/vm3.c     ****     else {
12233:src/vm3.c     ****     op0 = op0 + FIX_OP;
12234:src/vm3.c     ****   }
12235:src/vm3.c     **** 
12236:src/vm3.c     **** p = array;
12237:src/vm3.c     **** p = p[op0].next_level;
12238:src/vm3.c     **** 
12239:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 1221


 37332              		.loc 1 12239 0
 37333 11407 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 37333      000000
12226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37334              		.loc 1 12226 0
 37335 1140e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37335      000000
12225:src/vm3.c     **** nPC  += 4;
 37336              		.loc 1 12225 0
 37337 11415 890D0000 		movl	%ecx, nPC(%rip)
 37337      0000
 37338              		.loc 1 12239 0
 37339 1141b 8D4805   		leal	5(%rax), %ecx
 37340 1141e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37340      000000
12226:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37341              		.loc 1 12226 0
 37342 11425 C1E218   		sall	$24, %edx
 37343 11428 4109D0   		orl	%edx, %r8d
 37344 1142b 8D5001   		leal	1(%rax), %edx
 37345 1142e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37345      000000
 37346 11435 C1E210   		sall	$16, %edx
 37347 11438 4109D0   		orl	%edx, %r8d
 37348 1143b 8D5002   		leal	2(%rax), %edx
 37349 1143e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37349      000000
 37350 11445 C1E208   		sall	$8, %edx
 37351 11448 4109D0   		orl	%edx, %r8d
 37352              	.LVL3559:
12227:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37353              		.loc 1 12227 0
 37354 1144b 4489C6   		movl	%r8d, %esi
12229:src/vm3.c     ****     op0 = op0 + funct;
 37355              		.loc 1 12229 0
 37356 1144e 4488C2   		movb	%r8b, %dl
12227:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37357              		.loc 1 12227 0
 37358 11451 C1EE1A   		shrl	$26, %esi
 37359              	.LVL3560:
12229:src/vm3.c     ****     op0 = op0 + funct;
 37360              		.loc 1 12229 0
 37361 11454 83E23F   		andl	$63, %edx
 37362 11457 8D7E2B   		leal	43(%rsi), %edi
 37363 1145a 4084F6   		testb	%sil, %sil
 37364 1145d 0F45D7   		cmovne	%edi, %edx
 37365              	.LVL3561:
 37366              		.loc 1 12239 0
 37367 11460 C1E110   		sall	$16, %ecx
 37368 11463 C1E318   		sall	$24, %ebx
 37369 11466 09CB     		orl	%ecx, %ebx
 37370 11468 8D4807   		leal	7(%rax), %ecx
 37371 1146b 83C006   		addl	$6, %eax
 37372 1146e 0FB68000 		movzbl	VM_memory(%rax), %eax
 37372      000000
12237:src/vm3.c     **** 
 37373              		.loc 1 12237 0
GAS LISTING /tmp/cc15eBE3.s 			page 1222


 37374 11475 0FB6D2   		movzbl	%dl, %edx
 37375              		.loc 1 12239 0
 37376 11478 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37376      000000
12237:src/vm3.c     **** 
 37377              		.loc 1 12237 0
 37378 1147f 48C1E204 		salq	$4, %rdx
 37379              	.LVL3562:
 37380              		.loc 1 12239 0
 37381 11483 C1E008   		sall	$8, %eax
 37382 11486 09CB     		orl	%ecx, %ebx
 37383 11488 09C3     		orl	%eax, %ebx
 37384              	.LVL3563:
12240:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37385              		.loc 1 12240 0
 37386 1148a 89D9     		movl	%ebx, %ecx
12241:src/vm3.c     ****   if (op1 == 0x0) {
12242:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37387              		.loc 1 12242 0
 37388 1148c 88D8     		movb	%bl, %al
12240:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37389              		.loc 1 12240 0
 37390 1148e C1E91A   		shrl	$26, %ecx
 37391              	.LVL3564:
 37392              		.loc 1 12242 0
 37393 11491 83E03F   		andl	$63, %eax
 37394 11494 8D712B   		leal	43(%rcx), %esi
 37395 11497 84C9     		testb	%cl, %cl
 37396 11499 0F45C6   		cmovne	%esi, %eax
 37397              	.LVL3565:
12243:src/vm3.c     ****     op1 = op1 + funct;
12244:src/vm3.c     ****   }
12245:src/vm3.c     ****     else {
12246:src/vm3.c     ****     op1 = op1 + FIX_OP;
12247:src/vm3.c     ****   }
12248:src/vm3.c     **** 
12249:src/vm3.c     **** goto *p[op1].code;
 37398              		.loc 1 12249 0
 37399 1149c 0FB6C0   		movzbl	%al, %eax
 37400 1149f 48C1E004 		salq	$4, %rax
 37401              	.LVL3566:
 37402 114a3 48038414 		addq	58088(%rsp,%rdx), %rax
 37402      E8E20000 
 37403 114ab 488B08   		movq	(%rax), %rcx
 37404 114ae E9A5F8FE 		jmp	.L269
 37404      FF
 37405              	.LVL3567:
 37406              	.L191:
12250:src/vm3.c     **** 
12251:src/vm3.c     **** 
12252:src/vm3.c     **** bnePLUSaddu:
12253:src/vm3.c     **** #if INDIRECT_DEBUG
12254:src/vm3.c     **** printf("%d|bne\n",counter);
12255:src/vm3.c     **** counter++;
12256:src/vm3.c     **** #endif
12257:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 37407              		.loc 1 12257 0
GAS LISTING /tmp/cc15eBE3.s 			page 1223


 37408 114b3 4489C2   		movl	%r8d, %edx
12258:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37409              		.loc 1 12258 0
 37410 114b6 4489C0   		movl	%r8d, %eax
12257:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37411              		.loc 1 12257 0
 37412 114b9 C1EA15   		shrl	$21, %edx
 37413              		.loc 1 12258 0
 37414 114bc C1E810   		shrl	$16, %eax
12259:src/vm3.c     **** if (RF[rs] != RF[rt])
 37415              		.loc 1 12259 0
 37416 114bf 83E01F   		andl	$31, %eax
 37417 114c2 83E21F   		andl	$31, %edx
 37418 114c5 8B048500 		movl	RF(,%rax,4), %eax
 37418      000000
 37419 114cc 39049500 		cmpl	%eax, RF(,%rdx,4)
 37419      000000
 37420 114d3 0F84CE00 		je	.L1333
 37420      0000
 37421              	.LVL3568:
12260:src/vm3.c     **** {
12261:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
12262:src/vm3.c     ****   PC  =  nPC;
 37422              		.loc 1 12262 0
 37423 114d9 8B050000 		movl	nPC(%rip), %eax
 37423      0000
12263:src/vm3.c     ****   nPC  += (immediate << 2);
 37424              		.loc 1 12263 0
 37425 114df 450FBFC0 		movswl	%r8w, %r8d
 37426              	.LVL3569:
12264:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 37427              		.loc 1 12264 0
 37428 114e3 8D4803   		leal	3(%rax), %ecx
12263:src/vm3.c     ****   nPC  += (immediate << 2);
 37429              		.loc 1 12263 0
 37430 114e6 428D1480 		leal	(%rax,%r8,4), %edx
12262:src/vm3.c     ****   nPC  += (immediate << 2);
 37431              		.loc 1 12262 0
 37432 114ea 89050000 		movl	%eax, PC(%rip)
 37432      0000
 37433              		.loc 1 12264 0
 37434 114f0 440FB681 		movzbl	VM_memory(%rcx), %r8d
 37434      00000000 
 37435              	.LVL3570:
 37436 114f8 89C1     		movl	%eax, %ecx
12263:src/vm3.c     ****   nPC  += (immediate << 2);
 37437              		.loc 1 12263 0
 37438 114fa 89150000 		movl	%edx, nPC(%rip)
 37438      0000
 37439              		.loc 1 12264 0
 37440 11500 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37440      000000
 37441 11507 C1E118   		sall	$24, %ecx
 37442 1150a 4109C8   		orl	%ecx, %r8d
 37443 1150d 8D4801   		leal	1(%rax), %ecx
 37444 11510 83C002   		addl	$2, %eax
 37445 11513 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1224


 37445      000000
 37446 1151a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37446      000000
 37447 11521 C1E008   		sall	$8, %eax
 37448 11524 C1E110   		sall	$16, %ecx
 37449 11527 4109C8   		orl	%ecx, %r8d
 37450 1152a 4109C0   		orl	%eax, %r8d
 37451              	.LVL3571:
12265:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37452              		.loc 1 12265 0
 37453 1152d 4489C0   		movl	%r8d, %eax
12266:src/vm3.c     ****   if (op0 == 0x0) {
12267:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 37454              		.loc 1 12267 0
 37455 11530 4488C1   		movb	%r8b, %cl
12265:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37456              		.loc 1 12265 0
 37457 11533 C1E81A   		shrl	$26, %eax
 37458              	.LVL3572:
 37459              		.loc 1 12267 0
 37460 11536 83E13F   		andl	$63, %ecx
 37461 11539 8D702B   		leal	43(%rax), %esi
 37462 1153c 84C0     		testb	%al, %al
12268:src/vm3.c     ****     op0 = op0 + funct;
12269:src/vm3.c     ****   }
12270:src/vm3.c     ****     else {
12271:src/vm3.c     ****     op0 = op0 + FIX_OP;
12272:src/vm3.c     ****   }
12273:src/vm3.c     **** 
12274:src/vm3.c     **** p = array;
12275:src/vm3.c     **** p = p[op0].next_level;
12276:src/vm3.c     **** 
12277:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37463              		.loc 1 12277 0
 37464 1153e 8D4203   		leal	3(%rdx), %eax
 37465              	.LVL3573:
 37466 11541 0FB69800 		movzbl	VM_memory(%rax), %ebx
 37466      000000
 37467              	.LVL3574:
 37468 11548 89D0     		movl	%edx, %eax
12267:src/vm3.c     ****     op0 = op0 + funct;
 37469              		.loc 1 12267 0
 37470 1154a 0F45CE   		cmovne	%esi, %ecx
 37471              	.LVL3575:
 37472              		.loc 1 12277 0
 37473 1154d 0FB68000 		movzbl	VM_memory(%rax), %eax
 37473      000000
12275:src/vm3.c     **** 
 37474              		.loc 1 12275 0
 37475 11554 0FB6C9   		movzbl	%cl, %ecx
 37476 11557 48C1E104 		salq	$4, %rcx
 37477              	.LVL3576:
 37478              		.loc 1 12277 0
 37479 1155b C1E018   		sall	$24, %eax
 37480 1155e 09C3     		orl	%eax, %ebx
 37481 11560 8D4201   		leal	1(%rdx), %eax
 37482 11563 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1225


 37482      000000
 37483 1156a C1E010   		sall	$16, %eax
 37484 1156d 09C3     		orl	%eax, %ebx
 37485 1156f 8D4202   		leal	2(%rdx), %eax
 37486 11572 0FB68000 		movzbl	VM_memory(%rax), %eax
 37486      000000
 37487 11579 C1E008   		sall	$8, %eax
 37488 1157c 09C3     		orl	%eax, %ebx
 37489              	.LVL3577:
12278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37490              		.loc 1 12278 0
 37491 1157e 89DA     		movl	%ebx, %edx
12279:src/vm3.c     ****   if (op1 == 0x0) {
12280:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37492              		.loc 1 12280 0
 37493 11580 88D8     		movb	%bl, %al
12278:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37494              		.loc 1 12278 0
 37495 11582 C1EA1A   		shrl	$26, %edx
 37496              	.LVL3578:
 37497              		.loc 1 12280 0
 37498 11585 83E03F   		andl	$63, %eax
 37499 11588 8D722B   		leal	43(%rdx), %esi
 37500 1158b 84D2     		testb	%dl, %dl
 37501 1158d 0F45C6   		cmovne	%esi, %eax
 37502              	.LVL3579:
12281:src/vm3.c     ****     op1 = op1 + funct;
12282:src/vm3.c     ****   }
12283:src/vm3.c     ****     else {
12284:src/vm3.c     ****     op1 = op1 + FIX_OP;
12285:src/vm3.c     ****   }
12286:src/vm3.c     **** 
12287:src/vm3.c     **** goto *p[op1].code;
 37503              		.loc 1 12287 0
 37504 11590 0FB6C0   		movzbl	%al, %eax
 37505 11593 48C1E004 		salq	$4, %rax
 37506              	.LVL3580:
 37507 11597 4803840C 		addq	58088(%rsp,%rcx), %rax
 37507      E8E20000 
 37508 1159f 488B08   		movq	(%rax), %rcx
 37509              	.LVL3581:
 37510 115a2 E9B1F7FE 		jmp	.L269
 37510      FF
 37511              	.LVL3582:
 37512              	.L1333:
12288:src/vm3.c     **** 
12289:src/vm3.c     **** 
12290:src/vm3.c     **** }
12291:src/vm3.c     **** else
12292:src/vm3.c     **** {
12293:src/vm3.c     ****   PC  =  nPC;
12294:src/vm3.c     ****   nPC  += 4;
12295:src/vm3.c     **** }
12296:src/vm3.c     **** 
12297:src/vm3.c     **** #if INDIRECT_DEBUG
12298:src/vm3.c     **** printf("%d|addu\n",counter);
12299:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 1226


12300:src/vm3.c     **** #endif
12301:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
12302:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37513              		.loc 1 12302 0
 37514 115a7 89D8     		movl	%ebx, %eax
12303:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 37515              		.loc 1 12303 0
 37516 115a9 89DA     		movl	%ebx, %edx
12301:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37517              		.loc 1 12301 0
 37518 115ab C1EB15   		shrl	$21, %ebx
 37519              	.LVL3583:
12302:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 37520              		.loc 1 12302 0
 37521 115ae C1E810   		shrl	$16, %eax
 37522              	.LVL3584:
12304:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 37523              		.loc 1 12304 0
 37524 115b1 83E31F   		andl	$31, %ebx
12303:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 37525              		.loc 1 12303 0
 37526 115b4 C1EA0B   		shrl	$11, %edx
 37527              	.LVL3585:
 37528              		.loc 1 12304 0
 37529 115b7 83E01F   		andl	$31, %eax
12294:src/vm3.c     **** }
 37530              		.loc 1 12294 0
 37531 115ba 83050000 		addl	$4, nPC(%rip)
 37531      000004
 37532              	.LVL3586:
 37533              		.loc 1 12304 0
 37534 115c1 83E21F   		andl	$31, %edx
 37535 115c4 8B048500 		movl	RF(,%rax,4), %eax
 37535      000000
 37536 115cb 03049D00 		addl	RF(,%rbx,4), %eax
 37536      000000
 37537 115d2 89049500 		movl	%eax, RF(,%rdx,4)
 37537      000000
12305:src/vm3.c     **** PC  =  nPC;
 37538              		.loc 1 12305 0
 37539 115d9 8B050000 		movl	nPC(%rip), %eax
 37539      0000
12306:src/vm3.c     **** nPC  += 4;
12307:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37540              		.loc 1 12307 0
 37541 115df 8D5003   		leal	3(%rax), %edx
12306:src/vm3.c     **** nPC  += 4;
 37542              		.loc 1 12306 0
 37543 115e2 8D4804   		leal	4(%rax), %ecx
12305:src/vm3.c     **** PC  =  nPC;
 37544              		.loc 1 12305 0
 37545 115e5 89050000 		movl	%eax, PC(%rip)
 37545      0000
 37546              		.loc 1 12307 0
 37547 115eb 440FB682 		movzbl	VM_memory(%rdx), %r8d
 37547      00000000 
 37548              	.LVL3587:
GAS LISTING /tmp/cc15eBE3.s 			page 1227


 37549 115f3 89C2     		movl	%eax, %edx
12308:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12309:src/vm3.c     ****   if (op0 == 0x0) {
12310:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12311:src/vm3.c     ****     op0 = op0 + funct;
12312:src/vm3.c     ****   }
12313:src/vm3.c     ****     else {
12314:src/vm3.c     ****     op0 = op0 + FIX_OP;
12315:src/vm3.c     ****   }
12316:src/vm3.c     **** 
12317:src/vm3.c     **** p = array;
12318:src/vm3.c     **** p = p[op0].next_level;
12319:src/vm3.c     **** 
12320:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37550              		.loc 1 12320 0
 37551 115f5 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 37551      000000
12307:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37552              		.loc 1 12307 0
 37553 115fc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37553      000000
12306:src/vm3.c     **** nPC  += 4;
 37554              		.loc 1 12306 0
 37555 11603 890D0000 		movl	%ecx, nPC(%rip)
 37555      0000
 37556              		.loc 1 12320 0
 37557 11609 8D4805   		leal	5(%rax), %ecx
 37558 1160c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37558      000000
12307:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37559              		.loc 1 12307 0
 37560 11613 C1E218   		sall	$24, %edx
 37561 11616 4109D0   		orl	%edx, %r8d
 37562 11619 8D5001   		leal	1(%rax), %edx
 37563 1161c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37563      000000
 37564 11623 C1E210   		sall	$16, %edx
 37565 11626 4109D0   		orl	%edx, %r8d
 37566 11629 8D5002   		leal	2(%rax), %edx
 37567 1162c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37567      000000
 37568 11633 C1E208   		sall	$8, %edx
 37569 11636 4109D0   		orl	%edx, %r8d
 37570              	.LVL3588:
12308:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37571              		.loc 1 12308 0
 37572 11639 4489C6   		movl	%r8d, %esi
12310:src/vm3.c     ****     op0 = op0 + funct;
 37573              		.loc 1 12310 0
 37574 1163c 4488C2   		movb	%r8b, %dl
12308:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37575              		.loc 1 12308 0
 37576 1163f C1EE1A   		shrl	$26, %esi
 37577              	.LVL3589:
12310:src/vm3.c     ****     op0 = op0 + funct;
 37578              		.loc 1 12310 0
 37579 11642 83E23F   		andl	$63, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1228


 37580 11645 8D7E2B   		leal	43(%rsi), %edi
 37581 11648 4084F6   		testb	%sil, %sil
 37582 1164b 0F45D7   		cmovne	%edi, %edx
 37583              	.LVL3590:
 37584              		.loc 1 12320 0
 37585 1164e C1E110   		sall	$16, %ecx
 37586 11651 C1E318   		sall	$24, %ebx
 37587 11654 09CB     		orl	%ecx, %ebx
 37588 11656 8D4807   		leal	7(%rax), %ecx
 37589 11659 83C006   		addl	$6, %eax
 37590 1165c 0FB68000 		movzbl	VM_memory(%rax), %eax
 37590      000000
12318:src/vm3.c     **** 
 37591              		.loc 1 12318 0
 37592 11663 0FB6D2   		movzbl	%dl, %edx
 37593              		.loc 1 12320 0
 37594 11666 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37594      000000
12318:src/vm3.c     **** 
 37595              		.loc 1 12318 0
 37596 1166d 48C1E204 		salq	$4, %rdx
 37597              	.LVL3591:
 37598              		.loc 1 12320 0
 37599 11671 C1E008   		sall	$8, %eax
 37600 11674 09CB     		orl	%ecx, %ebx
 37601 11676 09C3     		orl	%eax, %ebx
 37602              	.LVL3592:
12321:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37603              		.loc 1 12321 0
 37604 11678 89D9     		movl	%ebx, %ecx
12322:src/vm3.c     ****   if (op1 == 0x0) {
12323:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37605              		.loc 1 12323 0
 37606 1167a 88D8     		movb	%bl, %al
12321:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37607              		.loc 1 12321 0
 37608 1167c C1E91A   		shrl	$26, %ecx
 37609              	.LVL3593:
 37610              		.loc 1 12323 0
 37611 1167f 83E03F   		andl	$63, %eax
 37612 11682 8D712B   		leal	43(%rcx), %esi
 37613 11685 84C9     		testb	%cl, %cl
 37614 11687 0F45C6   		cmovne	%esi, %eax
 37615              	.LVL3594:
12324:src/vm3.c     ****     op1 = op1 + funct;
12325:src/vm3.c     ****   }
12326:src/vm3.c     ****     else {
12327:src/vm3.c     ****     op1 = op1 + FIX_OP;
12328:src/vm3.c     ****   }
12329:src/vm3.c     **** 
12330:src/vm3.c     **** goto *p[op1].code;
 37616              		.loc 1 12330 0
 37617 1168a 0FB6C0   		movzbl	%al, %eax
 37618 1168d 48C1E004 		salq	$4, %rax
 37619              	.LVL3595:
 37620 11691 48038414 		addq	58088(%rsp,%rdx), %rax
 37620      E8E20000 
GAS LISTING /tmp/cc15eBE3.s 			page 1229


 37621 11699 488B08   		movq	(%rax), %rcx
 37622 1169c E9B7F6FE 		jmp	.L269
 37622      FF
 37623              	.LVL3596:
 37624              	.L93:
12331:src/vm3.c     **** 
12332:src/vm3.c     **** 
12333:src/vm3.c     **** lwPLUSsltu:
12334:src/vm3.c     **** #if INDIRECT_DEBUG
12335:src/vm3.c     **** printf("%d|lw\n",counter);
12336:src/vm3.c     **** counter++;
12337:src/vm3.c     **** #endif
12338:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 37625              		.loc 1 12338 0
 37626 116a1 4489C0   		movl	%r8d, %eax
12339:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
12340:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12341:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 37627              		.loc 1 12341 0
 37628 116a4 410FBFD0 		movswl	%r8w, %edx
12339:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37629              		.loc 1 12339 0
 37630 116a8 41C1E810 		shrl	$16, %r8d
 37631              	.LVL3597:
12338:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37632              		.loc 1 12338 0
 37633 116ac C1E815   		shrl	$21, %eax
 37634              	.LVL3598:
 37635              		.loc 1 12341 0
 37636 116af 4183E01F 		andl	$31, %r8d
12342:src/vm3.c     **** PC  =  nPC;
12343:src/vm3.c     **** nPC  += 4;
 37637              		.loc 1 12343 0
 37638 116b3 83050000 		addl	$4, nPC(%rip)
 37638      000004
 37639              	.LVL3599:
12341:src/vm3.c     **** PC  =  nPC;
 37640              		.loc 1 12341 0
 37641 116ba 83E01F   		andl	$31, %eax
 37642 116bd 03148500 		addl	RF(,%rax,4), %edx
 37642      000000
 37643              	.LVL3600:
 37644 116c4 8D4203   		leal	3(%rdx), %eax
 37645 116c7 89D1     		movl	%edx, %ecx
 37646 116c9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37646      000000
 37647 116d0 0FB68000 		movzbl	VM_memory(%rax), %eax
 37647      000000
 37648 116d7 C1E118   		sall	$24, %ecx
 37649 116da 09C8     		orl	%ecx, %eax
 37650 116dc 8D4A01   		leal	1(%rdx), %ecx
 37651 116df 83C202   		addl	$2, %edx
 37652 116e2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37652      000000
 37653 116e9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37653      000000
 37654 116f0 C1E208   		sall	$8, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1230


 37655 116f3 C1E110   		sall	$16, %ecx
 37656 116f6 09C8     		orl	%ecx, %eax
 37657 116f8 09D0     		orl	%edx, %eax
12344:src/vm3.c     **** 
12345:src/vm3.c     **** #if INDIRECT_DEBUG
12346:src/vm3.c     **** printf("%d|sltu\n",counter);
12347:src/vm3.c     **** counter++;
12348:src/vm3.c     **** #endif
12349:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 37658              		.loc 1 12349 0
 37659 116fa 89DA     		movl	%ebx, %edx
12341:src/vm3.c     **** PC  =  nPC;
 37660              		.loc 1 12341 0
 37661 116fc 42890485 		movl	%eax, RF(,%r8,4)
 37661      00000000 
 37662              		.loc 1 12349 0
 37663 11704 C1EA15   		shrl	$21, %edx
12350:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12351:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 37664              		.loc 1 12351 0
 37665 11707 89D8     		movl	%ebx, %eax
12350:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37666              		.loc 1 12350 0
 37667 11709 C1EB10   		shrl	$16, %ebx
 37668              	.LVL3601:
 37669              		.loc 1 12351 0
 37670 1170c C1E80B   		shrl	$11, %eax
 37671              	.LVL3602:
12352:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 37672              		.loc 1 12352 0
 37673 1170f 83E21F   		andl	$31, %edx
 37674 11712 83E31F   		andl	$31, %ebx
 37675 11715 83E01F   		andl	$31, %eax
 37676 11718 8B3C9D00 		movl	RF(,%rbx,4), %edi
 37676      000000
 37677 1171f 393C9500 		cmpl	%edi, RF(,%rdx,4)
 37677      000000
 37678 11726 0F92C2   		setb	%dl
 37679 11729 0FB6D2   		movzbl	%dl, %edx
 37680 1172c 89148500 		movl	%edx, RF(,%rax,4)
 37680      000000
12353:src/vm3.c     **** PC  =  nPC;
 37681              		.loc 1 12353 0
 37682 11733 8B050000 		movl	nPC(%rip), %eax
 37682      0000
12354:src/vm3.c     **** nPC  += 4;
12355:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37683              		.loc 1 12355 0
 37684 11739 8D5003   		leal	3(%rax), %edx
12354:src/vm3.c     **** nPC  += 4;
 37685              		.loc 1 12354 0
 37686 1173c 8D4804   		leal	4(%rax), %ecx
12353:src/vm3.c     **** PC  =  nPC;
 37687              		.loc 1 12353 0
 37688 1173f 89050000 		movl	%eax, PC(%rip)
 37688      0000
 37689              		.loc 1 12355 0
GAS LISTING /tmp/cc15eBE3.s 			page 1231


 37690 11745 440FB682 		movzbl	VM_memory(%rdx), %r8d
 37690      00000000 
 37691 1174d 89C2     		movl	%eax, %edx
12356:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12357:src/vm3.c     ****   if (op0 == 0x0) {
12358:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12359:src/vm3.c     ****     op0 = op0 + funct;
12360:src/vm3.c     ****   }
12361:src/vm3.c     ****     else {
12362:src/vm3.c     ****     op0 = op0 + FIX_OP;
12363:src/vm3.c     ****   }
12364:src/vm3.c     **** 
12365:src/vm3.c     **** p = array;
12366:src/vm3.c     **** p = p[op0].next_level;
12367:src/vm3.c     **** 
12368:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37692              		.loc 1 12368 0
 37693 1174f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 37693      000000
12355:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37694              		.loc 1 12355 0
 37695 11756 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37695      000000
12354:src/vm3.c     **** nPC  += 4;
 37696              		.loc 1 12354 0
 37697 1175d 890D0000 		movl	%ecx, nPC(%rip)
 37697      0000
 37698              		.loc 1 12368 0
 37699 11763 8D4805   		leal	5(%rax), %ecx
 37700 11766 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37700      000000
12355:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37701              		.loc 1 12355 0
 37702 1176d C1E218   		sall	$24, %edx
 37703 11770 4109D0   		orl	%edx, %r8d
 37704 11773 8D5001   		leal	1(%rax), %edx
 37705 11776 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37705      000000
 37706 1177d C1E210   		sall	$16, %edx
 37707 11780 4109D0   		orl	%edx, %r8d
 37708 11783 8D5002   		leal	2(%rax), %edx
 37709 11786 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37709      000000
 37710 1178d C1E208   		sall	$8, %edx
 37711 11790 4109D0   		orl	%edx, %r8d
 37712              	.LVL3603:
12356:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37713              		.loc 1 12356 0
 37714 11793 4489C6   		movl	%r8d, %esi
12358:src/vm3.c     ****     op0 = op0 + funct;
 37715              		.loc 1 12358 0
 37716 11796 4488C2   		movb	%r8b, %dl
12356:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37717              		.loc 1 12356 0
 37718 11799 C1EE1A   		shrl	$26, %esi
 37719              	.LVL3604:
12358:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 1232


 37720              		.loc 1 12358 0
 37721 1179c 83E23F   		andl	$63, %edx
 37722 1179f 8D7E2B   		leal	43(%rsi), %edi
 37723 117a2 4084F6   		testb	%sil, %sil
 37724 117a5 0F45D7   		cmovne	%edi, %edx
 37725              	.LVL3605:
 37726              		.loc 1 12368 0
 37727 117a8 C1E110   		sall	$16, %ecx
 37728 117ab C1E318   		sall	$24, %ebx
 37729 117ae 09CB     		orl	%ecx, %ebx
 37730 117b0 8D4807   		leal	7(%rax), %ecx
 37731 117b3 83C006   		addl	$6, %eax
 37732 117b6 0FB68000 		movzbl	VM_memory(%rax), %eax
 37732      000000
12366:src/vm3.c     **** 
 37733              		.loc 1 12366 0
 37734 117bd 0FB6D2   		movzbl	%dl, %edx
 37735              		.loc 1 12368 0
 37736 117c0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37736      000000
12366:src/vm3.c     **** 
 37737              		.loc 1 12366 0
 37738 117c7 48C1E204 		salq	$4, %rdx
 37739              	.LVL3606:
 37740              		.loc 1 12368 0
 37741 117cb C1E008   		sall	$8, %eax
 37742 117ce 09CB     		orl	%ecx, %ebx
 37743 117d0 09C3     		orl	%eax, %ebx
 37744              	.LVL3607:
12369:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37745              		.loc 1 12369 0
 37746 117d2 89D9     		movl	%ebx, %ecx
12370:src/vm3.c     ****   if (op1 == 0x0) {
12371:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37747              		.loc 1 12371 0
 37748 117d4 88D8     		movb	%bl, %al
12369:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37749              		.loc 1 12369 0
 37750 117d6 C1E91A   		shrl	$26, %ecx
 37751              	.LVL3608:
 37752              		.loc 1 12371 0
 37753 117d9 83E03F   		andl	$63, %eax
 37754 117dc 8D712B   		leal	43(%rcx), %esi
 37755 117df 84C9     		testb	%cl, %cl
 37756 117e1 0F45C6   		cmovne	%esi, %eax
 37757              	.LVL3609:
12372:src/vm3.c     ****     op1 = op1 + funct;
12373:src/vm3.c     ****   }
12374:src/vm3.c     ****     else {
12375:src/vm3.c     ****     op1 = op1 + FIX_OP;
12376:src/vm3.c     ****   }
12377:src/vm3.c     **** 
12378:src/vm3.c     **** goto *p[op1].code;
 37758              		.loc 1 12378 0
 37759 117e4 0FB6C0   		movzbl	%al, %eax
 37760 117e7 48C1E004 		salq	$4, %rax
 37761              	.LVL3610:
GAS LISTING /tmp/cc15eBE3.s 			page 1233


 37762 117eb 48038414 		addq	58088(%rsp,%rdx), %rax
 37762      E8E20000 
 37763 117f3 488B08   		movq	(%rax), %rcx
 37764 117f6 E95DF5FE 		jmp	.L269
 37764      FF
 37765              	.LVL3611:
 37766              	.L232:
12379:src/vm3.c     **** 
12380:src/vm3.c     **** 
12381:src/vm3.c     **** oriPLUSandi:
12382:src/vm3.c     **** #if INDIRECT_DEBUG
12383:src/vm3.c     **** printf("%d|ori\n",counter);
12384:src/vm3.c     **** counter++;
12385:src/vm3.c     **** #endif
12386:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 37767              		.loc 1 12386 0
 37768 117fb 4489C2   		movl	%r8d, %edx
12387:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37769              		.loc 1 12387 0
 37770 117fe 4489C0   		movl	%r8d, %eax
12388:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12389:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
 37771              		.loc 1 12389 0
 37772 11801 450FBFC0 		movswl	%r8w, %r8d
 37773              	.LVL3612:
12386:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37774              		.loc 1 12386 0
 37775 11805 C1EA15   		shrl	$21, %edx
12387:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37776              		.loc 1 12387 0
 37777 11808 C1E810   		shrl	$16, %eax
 37778              	.LVL3613:
12390:src/vm3.c     **** PC  =  nPC;
12391:src/vm3.c     **** nPC  += 4;
 37779              		.loc 1 12391 0
 37780 1180b 83050000 		addl	$4, nPC(%rip)
 37780      000004
 37781              	.LVL3614:
12389:src/vm3.c     **** PC  =  nPC;
 37782              		.loc 1 12389 0
 37783 11812 83E21F   		andl	$31, %edx
 37784 11815 83E01F   		andl	$31, %eax
 37785 11818 440B0495 		orl	RF(,%rdx,4), %r8d
 37785      00000000 
12392:src/vm3.c     **** 
12393:src/vm3.c     **** #if INDIRECT_DEBUG
12394:src/vm3.c     **** printf("%d|andi\n",counter);
12395:src/vm3.c     **** counter++;
12396:src/vm3.c     **** #endif
12397:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 37786              		.loc 1 12397 0
 37787 11820 89DA     		movl	%ebx, %edx
 37788 11822 C1EA15   		shrl	$21, %edx
12398:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12399:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
12400:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
 37789              		.loc 1 12400 0
GAS LISTING /tmp/cc15eBE3.s 			page 1234


 37790 11825 83E21F   		andl	$31, %edx
12389:src/vm3.c     **** PC  =  nPC;
 37791              		.loc 1 12389 0
 37792 11828 44890485 		movl	%r8d, RF(,%rax,4)
 37792      00000000 
12398:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37793              		.loc 1 12398 0
 37794 11830 89D8     		movl	%ebx, %eax
 37795              		.loc 1 12400 0
 37796 11832 0FBFDB   		movswl	%bx, %ebx
 37797              	.LVL3615:
 37798 11835 231C9500 		andl	RF(,%rdx,4), %ebx
 37798      000000
 37799              	.LVL3616:
12398:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 37800              		.loc 1 12398 0
 37801 1183c C1E810   		shrl	$16, %eax
 37802              	.LVL3617:
 37803              		.loc 1 12400 0
 37804 1183f 83E01F   		andl	$31, %eax
 37805 11842 891C8500 		movl	%ebx, RF(,%rax,4)
 37805      000000
12401:src/vm3.c     **** PC  =  nPC;
 37806              		.loc 1 12401 0
 37807 11849 8B050000 		movl	nPC(%rip), %eax
 37807      0000
12402:src/vm3.c     **** nPC  += 4;
12403:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37808              		.loc 1 12403 0
 37809 1184f 8D5003   		leal	3(%rax), %edx
12402:src/vm3.c     **** nPC  += 4;
 37810              		.loc 1 12402 0
 37811 11852 8D4804   		leal	4(%rax), %ecx
12401:src/vm3.c     **** PC  =  nPC;
 37812              		.loc 1 12401 0
 37813 11855 89050000 		movl	%eax, PC(%rip)
 37813      0000
 37814              		.loc 1 12403 0
 37815 1185b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 37815      00000000 
 37816 11863 89C2     		movl	%eax, %edx
12404:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12405:src/vm3.c     ****   if (op0 == 0x0) {
12406:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12407:src/vm3.c     ****     op0 = op0 + funct;
12408:src/vm3.c     ****   }
12409:src/vm3.c     ****     else {
12410:src/vm3.c     ****     op0 = op0 + FIX_OP;
12411:src/vm3.c     ****   }
12412:src/vm3.c     **** 
12413:src/vm3.c     **** p = array;
12414:src/vm3.c     **** p = p[op0].next_level;
12415:src/vm3.c     **** 
12416:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37817              		.loc 1 12416 0
 37818 11865 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 37818      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1235


12403:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37819              		.loc 1 12403 0
 37820 1186c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37820      000000
12402:src/vm3.c     **** nPC  += 4;
 37821              		.loc 1 12402 0
 37822 11873 890D0000 		movl	%ecx, nPC(%rip)
 37822      0000
 37823              		.loc 1 12416 0
 37824 11879 8D4805   		leal	5(%rax), %ecx
 37825 1187c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37825      000000
12403:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37826              		.loc 1 12403 0
 37827 11883 C1E218   		sall	$24, %edx
 37828 11886 4109D0   		orl	%edx, %r8d
 37829 11889 8D5001   		leal	1(%rax), %edx
 37830 1188c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37830      000000
 37831 11893 C1E210   		sall	$16, %edx
 37832 11896 4109D0   		orl	%edx, %r8d
 37833 11899 8D5002   		leal	2(%rax), %edx
 37834 1189c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37834      000000
 37835 118a3 C1E208   		sall	$8, %edx
 37836 118a6 4109D0   		orl	%edx, %r8d
 37837              	.LVL3618:
12404:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37838              		.loc 1 12404 0
 37839 118a9 4489C6   		movl	%r8d, %esi
12406:src/vm3.c     ****     op0 = op0 + funct;
 37840              		.loc 1 12406 0
 37841 118ac 4488C2   		movb	%r8b, %dl
12404:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37842              		.loc 1 12404 0
 37843 118af C1EE1A   		shrl	$26, %esi
 37844              	.LVL3619:
12406:src/vm3.c     ****     op0 = op0 + funct;
 37845              		.loc 1 12406 0
 37846 118b2 83E23F   		andl	$63, %edx
 37847 118b5 8D7E2B   		leal	43(%rsi), %edi
 37848 118b8 4084F6   		testb	%sil, %sil
 37849 118bb 0F45D7   		cmovne	%edi, %edx
 37850              	.LVL3620:
 37851              		.loc 1 12416 0
 37852 118be C1E110   		sall	$16, %ecx
 37853 118c1 C1E318   		sall	$24, %ebx
 37854 118c4 09CB     		orl	%ecx, %ebx
 37855 118c6 8D4807   		leal	7(%rax), %ecx
 37856 118c9 83C006   		addl	$6, %eax
 37857 118cc 0FB68000 		movzbl	VM_memory(%rax), %eax
 37857      000000
12414:src/vm3.c     **** 
 37858              		.loc 1 12414 0
 37859 118d3 0FB6D2   		movzbl	%dl, %edx
 37860              		.loc 1 12416 0
 37861 118d6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1236


 37861      000000
12414:src/vm3.c     **** 
 37862              		.loc 1 12414 0
 37863 118dd 48C1E204 		salq	$4, %rdx
 37864              	.LVL3621:
 37865              		.loc 1 12416 0
 37866 118e1 C1E008   		sall	$8, %eax
 37867 118e4 09CB     		orl	%ecx, %ebx
 37868 118e6 09C3     		orl	%eax, %ebx
 37869              	.LVL3622:
12417:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37870              		.loc 1 12417 0
 37871 118e8 89D9     		movl	%ebx, %ecx
12418:src/vm3.c     ****   if (op1 == 0x0) {
12419:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37872              		.loc 1 12419 0
 37873 118ea 88D8     		movb	%bl, %al
12417:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37874              		.loc 1 12417 0
 37875 118ec C1E91A   		shrl	$26, %ecx
 37876              	.LVL3623:
 37877              		.loc 1 12419 0
 37878 118ef 83E03F   		andl	$63, %eax
 37879 118f2 8D712B   		leal	43(%rcx), %esi
 37880 118f5 84C9     		testb	%cl, %cl
 37881 118f7 0F45C6   		cmovne	%esi, %eax
 37882              	.LVL3624:
12420:src/vm3.c     ****     op1 = op1 + funct;
12421:src/vm3.c     ****   }
12422:src/vm3.c     ****     else {
12423:src/vm3.c     ****     op1 = op1 + FIX_OP;
12424:src/vm3.c     ****   }
12425:src/vm3.c     **** 
12426:src/vm3.c     **** goto *p[op1].code;
 37883              		.loc 1 12426 0
 37884 118fa 0FB6C0   		movzbl	%al, %eax
 37885 118fd 48C1E004 		salq	$4, %rax
 37886              	.LVL3625:
 37887 11901 48038414 		addq	58088(%rsp,%rdx), %rax
 37887      E8E20000 
 37888 11909 488B08   		movq	(%rax), %rcx
 37889 1190c E947F4FE 		jmp	.L269
 37889      FF
 37890              	.LVL3626:
 37891              	.L167:
12427:src/vm3.c     **** 
12428:src/vm3.c     **** 
12429:src/vm3.c     **** norPLUSjr:
12430:src/vm3.c     **** #if INDIRECT_DEBUG
12431:src/vm3.c     **** printf("%d|nor\n",counter);
12432:src/vm3.c     **** counter++;
12433:src/vm3.c     **** #endif
12434:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12435:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37892              		.loc 1 12435 0
 37893 11911 4489C0   		movl	%r8d, %eax
12436:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1237


 37894              		.loc 1 12436 0
 37895 11914 4489C2   		movl	%r8d, %edx
12434:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 37896              		.loc 1 12434 0
 37897 11917 41C1E815 		shrl	$21, %r8d
 37898              	.LVL3627:
12435:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 37899              		.loc 1 12435 0
 37900 1191b C1E810   		shrl	$16, %eax
 37901              	.LVL3628:
12437:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 37902              		.loc 1 12437 0
 37903 1191e 4183E01F 		andl	$31, %r8d
12436:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 37904              		.loc 1 12436 0
 37905 11922 C1EA0B   		shrl	$11, %edx
 37906              	.LVL3629:
 37907              		.loc 1 12437 0
 37908 11925 83E01F   		andl	$31, %eax
 37909 11928 83E21F   		andl	$31, %edx
12438:src/vm3.c     **** PC  =  nPC;
12439:src/vm3.c     **** nPC  += 4;
12440:src/vm3.c     **** 
12441:src/vm3.c     **** #if INDIRECT_DEBUG
12442:src/vm3.c     **** printf("%d|jr\n",counter);
12443:src/vm3.c     **** counter++;
12444:src/vm3.c     **** #endif
12445:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 37910              		.loc 1 12445 0
 37911 1192b C1EB15   		shrl	$21, %ebx
 37912              	.LVL3630:
12437:src/vm3.c     **** PC  =  nPC;
 37913              		.loc 1 12437 0
 37914 1192e 8B048500 		movl	RF(,%rax,4), %eax
 37914      000000
 37915 11935 420B0485 		orl	RF(,%r8,4), %eax
 37915      00000000 
12446:src/vm3.c     **** PC = nPC;
12447:src/vm3.c     **** nPC = RF[rs];
 37916              		.loc 1 12447 0
 37917 1193d 83E31F   		andl	$31, %ebx
12437:src/vm3.c     **** PC  =  nPC;
 37918              		.loc 1 12437 0
 37919 11940 F7D0     		notl	%eax
 37920 11942 89049500 		movl	%eax, RF(,%rdx,4)
 37920      000000
12439:src/vm3.c     **** 
 37921              		.loc 1 12439 0
 37922 11949 8B150000 		movl	nPC(%rip), %edx
 37922      0000
 37923              		.loc 1 12447 0
 37924 1194f 8B049D00 		movl	RF(,%rbx,4), %eax
 37924      000000
12439:src/vm3.c     **** 
 37925              		.loc 1 12439 0
 37926 11956 8D4A04   		leal	4(%rdx), %ecx
12448:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
GAS LISTING /tmp/cc15eBE3.s 			page 1238


 37927              		.loc 1 12448 0
 37928 11959 8D7207   		leal	7(%rdx), %esi
12447:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 37929              		.loc 1 12447 0
 37930 1195c 89050000 		movl	%eax, nPC(%rip)
 37930      0000
12446:src/vm3.c     **** nPC = RF[rs];
 37931              		.loc 1 12446 0
 37932 11962 890D0000 		movl	%ecx, PC(%rip)
 37932      0000
 37933              		.loc 1 12448 0
 37934 11968 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37934      000000
 37935 1196f 440FB686 		movzbl	VM_memory(%rsi), %r8d
 37935      00000000 
 37936 11977 C1E118   		sall	$24, %ecx
 37937 1197a 4109C8   		orl	%ecx, %r8d
 37938 1197d 8D4A05   		leal	5(%rdx), %ecx
 37939 11980 83C206   		addl	$6, %edx
 37940 11983 0FB69200 		movzbl	VM_memory(%rdx), %edx
 37940      000000
 37941 1198a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37941      000000
 37942 11991 C1E208   		sall	$8, %edx
 37943 11994 C1E110   		sall	$16, %ecx
 37944 11997 4109C8   		orl	%ecx, %r8d
 37945 1199a 4109D0   		orl	%edx, %r8d
 37946              	.LVL3631:
12449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37947              		.loc 1 12449 0
 37948 1199d 4489C1   		movl	%r8d, %ecx
12450:src/vm3.c     ****   if (op0 == 0x0) {
12451:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 37949              		.loc 1 12451 0
 37950 119a0 4488C2   		movb	%r8b, %dl
12449:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 37951              		.loc 1 12449 0
 37952 119a3 C1E91A   		shrl	$26, %ecx
 37953              	.LVL3632:
 37954              		.loc 1 12451 0
 37955 119a6 83E23F   		andl	$63, %edx
 37956 119a9 8D712B   		leal	43(%rcx), %esi
 37957 119ac 84C9     		testb	%cl, %cl
12452:src/vm3.c     ****     op0 = op0 + funct;
12453:src/vm3.c     ****   }
12454:src/vm3.c     ****     else {
12455:src/vm3.c     ****     op0 = op0 + FIX_OP;
12456:src/vm3.c     ****   }
12457:src/vm3.c     **** 
12458:src/vm3.c     **** p = array;
12459:src/vm3.c     **** p = p[op0].next_level;
12460:src/vm3.c     **** 
12461:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 37958              		.loc 1 12461 0
 37959 119ae 8D4803   		leal	3(%rax), %ecx
 37960              	.LVL3633:
 37961 119b1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1239


 37961      000000
 37962 119b8 89C1     		movl	%eax, %ecx
12451:src/vm3.c     ****     op0 = op0 + funct;
 37963              		.loc 1 12451 0
 37964 119ba 0F45D6   		cmovne	%esi, %edx
 37965              	.LVL3634:
 37966              		.loc 1 12461 0
 37967 119bd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37967      000000
12459:src/vm3.c     **** 
 37968              		.loc 1 12459 0
 37969 119c4 0FB6D2   		movzbl	%dl, %edx
 37970 119c7 48C1E204 		salq	$4, %rdx
 37971              	.LVL3635:
 37972              		.loc 1 12461 0
 37973 119cb C1E118   		sall	$24, %ecx
 37974 119ce 09CB     		orl	%ecx, %ebx
 37975 119d0 8D4801   		leal	1(%rax), %ecx
 37976 119d3 83C002   		addl	$2, %eax
 37977 119d6 0FB68000 		movzbl	VM_memory(%rax), %eax
 37977      000000
 37978 119dd 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 37978      000000
 37979 119e4 C1E008   		sall	$8, %eax
 37980 119e7 C1E110   		sall	$16, %ecx
 37981 119ea 09CB     		orl	%ecx, %ebx
 37982 119ec 09C3     		orl	%eax, %ebx
 37983              	.LVL3636:
12462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37984              		.loc 1 12462 0
 37985 119ee 89D9     		movl	%ebx, %ecx
12463:src/vm3.c     ****   if (op1 == 0x0) {
12464:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 37986              		.loc 1 12464 0
 37987 119f0 88D8     		movb	%bl, %al
12462:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 37988              		.loc 1 12462 0
 37989 119f2 C1E91A   		shrl	$26, %ecx
 37990              	.LVL3637:
 37991              		.loc 1 12464 0
 37992 119f5 83E03F   		andl	$63, %eax
 37993 119f8 8D712B   		leal	43(%rcx), %esi
 37994 119fb 84C9     		testb	%cl, %cl
 37995 119fd 0F45C6   		cmovne	%esi, %eax
 37996              	.LVL3638:
12465:src/vm3.c     ****     op1 = op1 + funct;
12466:src/vm3.c     ****   }
12467:src/vm3.c     ****     else {
12468:src/vm3.c     ****     op1 = op1 + FIX_OP;
12469:src/vm3.c     ****   }
12470:src/vm3.c     **** 
12471:src/vm3.c     **** goto *p[op1].code;
 37997              		.loc 1 12471 0
 37998 11a00 0FB6C0   		movzbl	%al, %eax
 37999 11a03 48C1E004 		salq	$4, %rax
 38000              	.LVL3639:
 38001 11a07 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1240


 38001      E8E20000 
 38002 11a0f 488B08   		movq	(%rax), %rcx
 38003 11a12 E941F3FE 		jmp	.L269
 38003      FF
 38004              	.LVL3640:
 38005              	.L62:
12472:src/vm3.c     **** 
12473:src/vm3.c     **** 
12474:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
12475:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12476:src/vm3.c     ****   if (op0 == 0x0) {
12477:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12478:src/vm3.c     ****     op0 = op0 + funct;
12479:src/vm3.c     ****   }
12480:src/vm3.c     ****     else {
12481:src/vm3.c     ****     op0 = op0 + FIX_OP;
12482:src/vm3.c     ****   }
12483:src/vm3.c     **** 
12484:src/vm3.c     **** p = array;
12485:src/vm3.c     **** p = p[op0].next_level;
12486:src/vm3.c     **** 
12487:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
12488:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
12489:src/vm3.c     ****   if (op1 == 0x0) {
12490:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
12491:src/vm3.c     ****     op1 = op1 + funct;
12492:src/vm3.c     ****   }
12493:src/vm3.c     ****     else {
12494:src/vm3.c     ****     op1 = op1 + FIX_OP;
12495:src/vm3.c     ****   }
12496:src/vm3.c     **** 
12497:src/vm3.c     **** goto *p[op1].code;
12498:src/vm3.c     **** 
12499:src/vm3.c     **** 
12500:src/vm3.c     **** adduPLUSaddiu:
12501:src/vm3.c     **** #if INDIRECT_DEBUG
12502:src/vm3.c     **** printf("%d|addu\n",counter);
12503:src/vm3.c     **** counter++;
12504:src/vm3.c     **** #endif
12505:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12506:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38006              		.loc 1 12506 0
 38007 11a17 4489C0   		movl	%r8d, %eax
12507:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38008              		.loc 1 12507 0
 38009 11a1a 4489C2   		movl	%r8d, %edx
12505:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38010              		.loc 1 12505 0
 38011 11a1d 41C1E815 		shrl	$21, %r8d
 38012              	.LVL3641:
12506:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38013              		.loc 1 12506 0
 38014 11a21 C1E810   		shrl	$16, %eax
 38015              	.LVL3642:
12508:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 38016              		.loc 1 12508 0
 38017 11a24 4183E01F 		andl	$31, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1241


12507:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 38018              		.loc 1 12507 0
 38019 11a28 C1EA0B   		shrl	$11, %edx
 38020              	.LVL3643:
 38021              		.loc 1 12508 0
 38022 11a2b 83E01F   		andl	$31, %eax
 38023 11a2e 83E21F   		andl	$31, %edx
12509:src/vm3.c     **** PC  =  nPC;
12510:src/vm3.c     **** nPC  += 4;
 38024              		.loc 1 12510 0
 38025 11a31 83050000 		addl	$4, nPC(%rip)
 38025      000004
 38026              	.LVL3644:
12508:src/vm3.c     **** PC  =  nPC;
 38027              		.loc 1 12508 0
 38028 11a38 8B048500 		movl	RF(,%rax,4), %eax
 38028      000000
 38029 11a3f 42030485 		addl	RF(,%r8,4), %eax
 38029      00000000 
 38030 11a47 89049500 		movl	%eax, RF(,%rdx,4)
 38030      000000
12511:src/vm3.c     **** 
12512:src/vm3.c     **** #if INDIRECT_DEBUG
12513:src/vm3.c     **** printf("%d|addiu\n",counter);
12514:src/vm3.c     **** counter++;
12515:src/vm3.c     **** #endif
12516:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 38031              		.loc 1 12516 0
 38032 11a4e 89DA     		movl	%ebx, %edx
12517:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38033              		.loc 1 12517 0
 38034 11a50 89D8     		movl	%ebx, %eax
12516:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38035              		.loc 1 12516 0
 38036 11a52 C1EA15   		shrl	$21, %edx
12518:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
12519:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 38037              		.loc 1 12519 0
 38038 11a55 0FBFDB   		movswl	%bx, %ebx
 38039              	.LVL3645:
12517:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 38040              		.loc 1 12517 0
 38041 11a58 C1E810   		shrl	$16, %eax
 38042              	.LVL3646:
 38043              		.loc 1 12519 0
 38044 11a5b 83E21F   		andl	$31, %edx
 38045 11a5e 83E01F   		andl	$31, %eax
 38046 11a61 031C9500 		addl	RF(,%rdx,4), %ebx
 38046      000000
 38047              	.LVL3647:
 38048 11a68 891C8500 		movl	%ebx, RF(,%rax,4)
 38048      000000
12520:src/vm3.c     **** PC  =  nPC;
 38049              		.loc 1 12520 0
 38050 11a6f 8B050000 		movl	nPC(%rip), %eax
 38050      0000
12521:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1242


12522:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38051              		.loc 1 12522 0
 38052 11a75 8D5003   		leal	3(%rax), %edx
12521:src/vm3.c     **** nPC  += 4;
 38053              		.loc 1 12521 0
 38054 11a78 8D4804   		leal	4(%rax), %ecx
12520:src/vm3.c     **** PC  =  nPC;
 38055              		.loc 1 12520 0
 38056 11a7b 89050000 		movl	%eax, PC(%rip)
 38056      0000
 38057              		.loc 1 12522 0
 38058 11a81 440FB682 		movzbl	VM_memory(%rdx), %r8d
 38058      00000000 
 38059 11a89 89C2     		movl	%eax, %edx
12523:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12524:src/vm3.c     ****   if (op0 == 0x0) {
12525:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12526:src/vm3.c     ****     op0 = op0 + funct;
12527:src/vm3.c     ****   }
12528:src/vm3.c     ****     else {
12529:src/vm3.c     ****     op0 = op0 + FIX_OP;
12530:src/vm3.c     ****   }
12531:src/vm3.c     **** 
12532:src/vm3.c     **** p = array;
12533:src/vm3.c     **** p = p[op0].next_level;
12534:src/vm3.c     **** 
12535:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38060              		.loc 1 12535 0
 38061 11a8b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38061      000000
12522:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38062              		.loc 1 12522 0
 38063 11a92 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38063      000000
12521:src/vm3.c     **** nPC  += 4;
 38064              		.loc 1 12521 0
 38065 11a99 890D0000 		movl	%ecx, nPC(%rip)
 38065      0000
 38066              		.loc 1 12535 0
 38067 11a9f 8D4805   		leal	5(%rax), %ecx
 38068 11aa2 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38068      000000
12522:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38069              		.loc 1 12522 0
 38070 11aa9 C1E218   		sall	$24, %edx
 38071 11aac 4109D0   		orl	%edx, %r8d
 38072 11aaf 8D5001   		leal	1(%rax), %edx
 38073 11ab2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38073      000000
 38074 11ab9 C1E210   		sall	$16, %edx
 38075 11abc 4109D0   		orl	%edx, %r8d
 38076 11abf 8D5002   		leal	2(%rax), %edx
 38077 11ac2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38077      000000
 38078 11ac9 C1E208   		sall	$8, %edx
 38079 11acc 4109D0   		orl	%edx, %r8d
 38080              	.LVL3648:
GAS LISTING /tmp/cc15eBE3.s 			page 1243


12523:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38081              		.loc 1 12523 0
 38082 11acf 4489C6   		movl	%r8d, %esi
12525:src/vm3.c     ****     op0 = op0 + funct;
 38083              		.loc 1 12525 0
 38084 11ad2 4488C2   		movb	%r8b, %dl
12523:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38085              		.loc 1 12523 0
 38086 11ad5 C1EE1A   		shrl	$26, %esi
 38087              	.LVL3649:
12525:src/vm3.c     ****     op0 = op0 + funct;
 38088              		.loc 1 12525 0
 38089 11ad8 83E23F   		andl	$63, %edx
 38090 11adb 8D7E2B   		leal	43(%rsi), %edi
 38091 11ade 4084F6   		testb	%sil, %sil
 38092 11ae1 0F45D7   		cmovne	%edi, %edx
 38093              	.LVL3650:
 38094              		.loc 1 12535 0
 38095 11ae4 C1E110   		sall	$16, %ecx
 38096 11ae7 C1E318   		sall	$24, %ebx
 38097 11aea 09CB     		orl	%ecx, %ebx
 38098 11aec 8D4807   		leal	7(%rax), %ecx
 38099 11aef 83C006   		addl	$6, %eax
 38100 11af2 0FB68000 		movzbl	VM_memory(%rax), %eax
 38100      000000
12533:src/vm3.c     **** 
 38101              		.loc 1 12533 0
 38102 11af9 0FB6D2   		movzbl	%dl, %edx
 38103              		.loc 1 12535 0
 38104 11afc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38104      000000
12533:src/vm3.c     **** 
 38105              		.loc 1 12533 0
 38106 11b03 48C1E204 		salq	$4, %rdx
 38107              	.LVL3651:
 38108              		.loc 1 12535 0
 38109 11b07 C1E008   		sall	$8, %eax
 38110 11b0a 09CB     		orl	%ecx, %ebx
 38111 11b0c 09C3     		orl	%eax, %ebx
 38112              	.LVL3652:
12536:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38113              		.loc 1 12536 0
 38114 11b0e 89D9     		movl	%ebx, %ecx
12537:src/vm3.c     ****   if (op1 == 0x0) {
12538:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38115              		.loc 1 12538 0
 38116 11b10 88D8     		movb	%bl, %al
12536:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38117              		.loc 1 12536 0
 38118 11b12 C1E91A   		shrl	$26, %ecx
 38119              	.LVL3653:
 38120              		.loc 1 12538 0
 38121 11b15 83E03F   		andl	$63, %eax
 38122 11b18 8D712B   		leal	43(%rcx), %esi
 38123 11b1b 84C9     		testb	%cl, %cl
 38124 11b1d 0F45C6   		cmovne	%esi, %eax
 38125              	.LVL3654:
GAS LISTING /tmp/cc15eBE3.s 			page 1244


12539:src/vm3.c     ****     op1 = op1 + funct;
12540:src/vm3.c     ****   }
12541:src/vm3.c     ****     else {
12542:src/vm3.c     ****     op1 = op1 + FIX_OP;
12543:src/vm3.c     ****   }
12544:src/vm3.c     **** 
12545:src/vm3.c     **** goto *p[op1].code;
 38126              		.loc 1 12545 0
 38127 11b20 0FB6C0   		movzbl	%al, %eax
 38128 11b23 48C1E004 		salq	$4, %rax
 38129              	.LVL3655:
 38130 11b27 48038414 		addq	58088(%rsp,%rdx), %rax
 38130      E8E20000 
 38131 11b2f 488B08   		movq	(%rax), %rcx
 38132 11b32 E921F2FE 		jmp	.L269
 38132      FF
 38133              	.LVL3656:
 38134              	.L132:
12546:src/vm3.c     **** 
12547:src/vm3.c     **** 
12548:src/vm3.c     **** addiuPLUSsrl:
12549:src/vm3.c     **** #if INDIRECT_DEBUG
12550:src/vm3.c     **** printf("%d|addiu\n",counter);
12551:src/vm3.c     **** counter++;
12552:src/vm3.c     **** #endif
12553:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 38135              		.loc 1 12553 0
 38136 11b37 4489C2   		movl	%r8d, %edx
12554:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38137              		.loc 1 12554 0
 38138 11b3a 4489C0   		movl	%r8d, %eax
12555:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12556:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 38139              		.loc 1 12556 0
 38140 11b3d 450FBFC0 		movswl	%r8w, %r8d
 38141              	.LVL3657:
12553:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38142              		.loc 1 12553 0
 38143 11b41 C1EA15   		shrl	$21, %edx
12554:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38144              		.loc 1 12554 0
 38145 11b44 C1E810   		shrl	$16, %eax
 38146              	.LVL3658:
12557:src/vm3.c     **** PC  =  nPC;
12558:src/vm3.c     **** nPC  += 4;
 38147              		.loc 1 12558 0
 38148 11b47 83050000 		addl	$4, nPC(%rip)
 38148      000004
 38149              	.LVL3659:
12556:src/vm3.c     **** PC  =  nPC;
 38150              		.loc 1 12556 0
 38151 11b4e 83E21F   		andl	$31, %edx
 38152 11b51 83E01F   		andl	$31, %eax
 38153 11b54 44030495 		addl	RF(,%rdx,4), %r8d
 38153      00000000 
 38154              	.LVL3660:
12559:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1245


12560:src/vm3.c     **** #if INDIRECT_DEBUG
12561:src/vm3.c     **** printf("%d|srl\n",counter);
12562:src/vm3.c     **** counter++;
12563:src/vm3.c     **** #endif
12564:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
12565:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12566:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38155              		.loc 1 12566 0
 38156 11b5c 89DA     		movl	%ebx, %edx
 38157 11b5e C1EA0B   		shrl	$11, %edx
12567:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 38158              		.loc 1 12567 0
 38159 11b61 83E21F   		andl	$31, %edx
12556:src/vm3.c     **** PC  =  nPC;
 38160              		.loc 1 12556 0
 38161 11b64 44890485 		movl	%r8d, RF(,%rax,4)
 38161      00000000 
12565:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38162              		.loc 1 12565 0
 38163 11b6c 89D8     		movl	%ebx, %eax
12564:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38164              		.loc 1 12564 0
 38165 11b6e C1EB06   		shrl	$6, %ebx
 38166              	.LVL3661:
12565:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38167              		.loc 1 12565 0
 38168 11b71 C1E810   		shrl	$16, %eax
 38169              	.LVL3662:
12564:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38170              		.loc 1 12564 0
 38171 11b74 88D9     		movb	%bl, %cl
 38172              		.loc 1 12567 0
 38173 11b76 83E01F   		andl	$31, %eax
12564:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38174              		.loc 1 12564 0
 38175 11b79 83E11F   		andl	$31, %ecx
 38176              		.loc 1 12567 0
 38177 11b7c 8B048500 		movl	RF(,%rax,4), %eax
 38177      000000
 38178 11b83 D3E8     		shrl	%cl, %eax
 38179 11b85 89049500 		movl	%eax, RF(,%rdx,4)
 38179      000000
12568:src/vm3.c     **** PC  =  nPC;
 38180              		.loc 1 12568 0
 38181 11b8c 8B050000 		movl	nPC(%rip), %eax
 38181      0000
12569:src/vm3.c     **** nPC  += 4;
12570:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38182              		.loc 1 12570 0
 38183 11b92 8D5003   		leal	3(%rax), %edx
12569:src/vm3.c     **** nPC  += 4;
 38184              		.loc 1 12569 0
 38185 11b95 8D4804   		leal	4(%rax), %ecx
12568:src/vm3.c     **** PC  =  nPC;
 38186              		.loc 1 12568 0
 38187 11b98 89050000 		movl	%eax, PC(%rip)
 38187      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1246


 38188              		.loc 1 12570 0
 38189 11b9e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 38189      00000000 
 38190 11ba6 89C2     		movl	%eax, %edx
12571:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12572:src/vm3.c     ****   if (op0 == 0x0) {
12573:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12574:src/vm3.c     ****     op0 = op0 + funct;
12575:src/vm3.c     ****   }
12576:src/vm3.c     ****     else {
12577:src/vm3.c     ****     op0 = op0 + FIX_OP;
12578:src/vm3.c     ****   }
12579:src/vm3.c     **** 
12580:src/vm3.c     **** p = array;
12581:src/vm3.c     **** p = p[op0].next_level;
12582:src/vm3.c     **** 
12583:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38191              		.loc 1 12583 0
 38192 11ba8 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38192      000000
12570:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38193              		.loc 1 12570 0
 38194 11baf 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38194      000000
12569:src/vm3.c     **** nPC  += 4;
 38195              		.loc 1 12569 0
 38196 11bb6 890D0000 		movl	%ecx, nPC(%rip)
 38196      0000
 38197              		.loc 1 12583 0
 38198 11bbc 8D4805   		leal	5(%rax), %ecx
 38199 11bbf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38199      000000
12570:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38200              		.loc 1 12570 0
 38201 11bc6 C1E218   		sall	$24, %edx
 38202 11bc9 4109D0   		orl	%edx, %r8d
 38203 11bcc 8D5001   		leal	1(%rax), %edx
 38204 11bcf 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38204      000000
 38205 11bd6 C1E210   		sall	$16, %edx
 38206 11bd9 4109D0   		orl	%edx, %r8d
 38207 11bdc 8D5002   		leal	2(%rax), %edx
 38208 11bdf 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38208      000000
 38209 11be6 C1E208   		sall	$8, %edx
 38210 11be9 4109D0   		orl	%edx, %r8d
 38211              	.LVL3663:
12571:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38212              		.loc 1 12571 0
 38213 11bec 4489C6   		movl	%r8d, %esi
12573:src/vm3.c     ****     op0 = op0 + funct;
 38214              		.loc 1 12573 0
 38215 11bef 4488C2   		movb	%r8b, %dl
12571:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38216              		.loc 1 12571 0
 38217 11bf2 C1EE1A   		shrl	$26, %esi
 38218              	.LVL3664:
GAS LISTING /tmp/cc15eBE3.s 			page 1247


12573:src/vm3.c     ****     op0 = op0 + funct;
 38219              		.loc 1 12573 0
 38220 11bf5 83E23F   		andl	$63, %edx
 38221 11bf8 8D7E2B   		leal	43(%rsi), %edi
 38222 11bfb 4084F6   		testb	%sil, %sil
 38223 11bfe 0F45D7   		cmovne	%edi, %edx
 38224              	.LVL3665:
 38225              		.loc 1 12583 0
 38226 11c01 C1E110   		sall	$16, %ecx
 38227 11c04 C1E318   		sall	$24, %ebx
 38228 11c07 09CB     		orl	%ecx, %ebx
 38229 11c09 8D4807   		leal	7(%rax), %ecx
 38230 11c0c 83C006   		addl	$6, %eax
 38231 11c0f 0FB68000 		movzbl	VM_memory(%rax), %eax
 38231      000000
12581:src/vm3.c     **** 
 38232              		.loc 1 12581 0
 38233 11c16 0FB6D2   		movzbl	%dl, %edx
 38234              		.loc 1 12583 0
 38235 11c19 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38235      000000
12581:src/vm3.c     **** 
 38236              		.loc 1 12581 0
 38237 11c20 48C1E204 		salq	$4, %rdx
 38238              	.LVL3666:
 38239              		.loc 1 12583 0
 38240 11c24 C1E008   		sall	$8, %eax
 38241 11c27 09CB     		orl	%ecx, %ebx
 38242 11c29 09C3     		orl	%eax, %ebx
 38243              	.LVL3667:
12584:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38244              		.loc 1 12584 0
 38245 11c2b 89D9     		movl	%ebx, %ecx
12585:src/vm3.c     ****   if (op1 == 0x0) {
12586:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38246              		.loc 1 12586 0
 38247 11c2d 88D8     		movb	%bl, %al
12584:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38248              		.loc 1 12584 0
 38249 11c2f C1E91A   		shrl	$26, %ecx
 38250              	.LVL3668:
 38251              		.loc 1 12586 0
 38252 11c32 83E03F   		andl	$63, %eax
 38253 11c35 8D712B   		leal	43(%rcx), %esi
 38254 11c38 84C9     		testb	%cl, %cl
 38255 11c3a 0F45C6   		cmovne	%esi, %eax
 38256              	.LVL3669:
12587:src/vm3.c     ****     op1 = op1 + funct;
12588:src/vm3.c     ****   }
12589:src/vm3.c     ****     else {
12590:src/vm3.c     ****     op1 = op1 + FIX_OP;
12591:src/vm3.c     ****   }
12592:src/vm3.c     **** 
12593:src/vm3.c     **** goto *p[op1].code;
 38257              		.loc 1 12593 0
 38258 11c3d 0FB6C0   		movzbl	%al, %eax
 38259 11c40 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1248


 38260              	.LVL3670:
 38261 11c44 48038414 		addq	58088(%rsp,%rdx), %rax
 38261      E8E20000 
 38262 11c4c 488B08   		movq	(%rax), %rcx
 38263 11c4f E904F1FE 		jmp	.L269
 38263      FF
 38264              	.LVL3671:
 38265              	.L98:
12594:src/vm3.c     **** 
12595:src/vm3.c     **** 
12596:src/vm3.c     **** lwPLUSblez:
12597:src/vm3.c     **** #if INDIRECT_DEBUG
12598:src/vm3.c     **** printf("%d|lw\n",counter);
12599:src/vm3.c     **** counter++;
12600:src/vm3.c     **** #endif
12601:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 38266              		.loc 1 12601 0
 38267 11c54 4489C0   		movl	%r8d, %eax
12602:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
12603:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12604:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 38268              		.loc 1 12604 0
 38269 11c57 410FBFD0 		movswl	%r8w, %edx
12602:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38270              		.loc 1 12602 0
 38271 11c5b 41C1E810 		shrl	$16, %r8d
 38272              	.LVL3672:
12601:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38273              		.loc 1 12601 0
 38274 11c5f C1E815   		shrl	$21, %eax
 38275              	.LVL3673:
 38276              		.loc 1 12604 0
 38277 11c62 4183E01F 		andl	$31, %r8d
 38278 11c66 83E01F   		andl	$31, %eax
 38279 11c69 03148500 		addl	RF(,%rax,4), %edx
 38279      000000
 38280              	.LVL3674:
 38281 11c70 8D4203   		leal	3(%rdx), %eax
 38282 11c73 89D1     		movl	%edx, %ecx
 38283 11c75 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38283      000000
 38284 11c7c 0FB68000 		movzbl	VM_memory(%rax), %eax
 38284      000000
 38285 11c83 C1E118   		sall	$24, %ecx
 38286 11c86 09C8     		orl	%ecx, %eax
 38287 11c88 8D4A01   		leal	1(%rdx), %ecx
 38288 11c8b 83C202   		addl	$2, %edx
 38289 11c8e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38289      000000
 38290 11c95 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38290      000000
 38291 11c9c C1E208   		sall	$8, %edx
 38292 11c9f C1E110   		sall	$16, %ecx
 38293 11ca2 09C8     		orl	%ecx, %eax
12605:src/vm3.c     **** PC  =  nPC;
12606:src/vm3.c     **** nPC  += 4;
12607:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1249


12608:src/vm3.c     **** #if INDIRECT_DEBUG
12609:src/vm3.c     **** printf("%d|blez\n",counter);
12610:src/vm3.c     **** counter++;
12611:src/vm3.c     **** #endif
12612:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 38294              		.loc 1 12612 0
 38295 11ca4 89D9     		movl	%ebx, %ecx
12604:src/vm3.c     **** PC  =  nPC;
 38296              		.loc 1 12604 0
 38297 11ca6 09D0     		orl	%edx, %eax
 38298              		.loc 1 12612 0
 38299 11ca8 C1E915   		shrl	$21, %ecx
12604:src/vm3.c     **** PC  =  nPC;
 38300              		.loc 1 12604 0
 38301 11cab 42890485 		movl	%eax, RF(,%r8,4)
 38301      00000000 
12613:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
 38302              		.loc 1 12613 0
 38303 11cb3 83E11F   		andl	$31, %ecx
12605:src/vm3.c     **** PC  =  nPC;
 38304              		.loc 1 12605 0
 38305 11cb6 8B050000 		movl	nPC(%rip), %eax
 38305      0000
 38306              		.loc 1 12613 0
 38307 11cbc 833C8D00 		cmpl	$0, RF(,%rcx,4)
 38307      00000000 
12606:src/vm3.c     **** 
 38308              		.loc 1 12606 0
 38309 11cc4 8D5004   		leal	4(%rax), %edx
 38310              	.LVL3675:
 38311 11cc7 448D4007 		leal	7(%rax), %r8d
 38312 11ccb 8D7805   		leal	5(%rax), %edi
 38313 11cce 8D7006   		leal	6(%rax), %esi
 38314 11cd1 4189D1   		movl	%edx, %r9d
12614:src/vm3.c     **** {
12615:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
12616:src/vm3.c     ****   PC  =  nPC;
 38315              		.loc 1 12616 0
 38316 11cd4 89150000 		movl	%edx, PC(%rip)
 38316      0000
12613:src/vm3.c     **** {
 38317              		.loc 1 12613 0
 38318 11cda 0F8FB600 		jg	.L1362
 38318      0000
 38319              	.LVL3676:
12617:src/vm3.c     ****   nPC  += (immediate << 2);
 38320              		.loc 1 12617 0
 38321 11ce0 0FBFDB   		movswl	%bx, %ebx
 38322              	.LVL3677:
12618:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 38323              		.loc 1 12618 0
 38324 11ce3 450FB680 		movzbl	VM_memory(%r8), %r8d
 38324      00000000 
12617:src/vm3.c     ****   nPC  += (immediate << 2);
 38325              		.loc 1 12617 0
 38326 11ceb 8D049A   		leal	(%rdx,%rbx,4), %eax
 38327              		.loc 1 12618 0
GAS LISTING /tmp/cc15eBE3.s 			page 1250


 38328 11cee 410FB691 		movzbl	VM_memory(%r9), %edx
 38328      00000000 
12617:src/vm3.c     ****   nPC  += (immediate << 2);
 38329              		.loc 1 12617 0
 38330 11cf6 89050000 		movl	%eax, nPC(%rip)
 38330      0000
 38331              		.loc 1 12618 0
 38332 11cfc C1E218   		sall	$24, %edx
 38333 11cff 4109D0   		orl	%edx, %r8d
 38334 11d02 0FB69700 		movzbl	VM_memory(%rdi), %edx
 38334      000000
 38335 11d09 C1E210   		sall	$16, %edx
 38336 11d0c 4109D0   		orl	%edx, %r8d
 38337 11d0f 0FB69600 		movzbl	VM_memory(%rsi), %edx
 38337      000000
 38338 11d16 C1E208   		sall	$8, %edx
 38339 11d19 4109D0   		orl	%edx, %r8d
 38340              	.LVL3678:
12619:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38341              		.loc 1 12619 0
 38342 11d1c 4489C1   		movl	%r8d, %ecx
12620:src/vm3.c     ****   if (op0 == 0x0) {
12621:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 38343              		.loc 1 12621 0
 38344 11d1f 4488C2   		movb	%r8b, %dl
12619:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38345              		.loc 1 12619 0
 38346 11d22 C1E91A   		shrl	$26, %ecx
 38347              	.LVL3679:
 38348              		.loc 1 12621 0
 38349 11d25 83E23F   		andl	$63, %edx
 38350 11d28 8D712B   		leal	43(%rcx), %esi
 38351 11d2b 84C9     		testb	%cl, %cl
12622:src/vm3.c     ****     op0 = op0 + funct;
12623:src/vm3.c     ****   }
12624:src/vm3.c     ****     else {
12625:src/vm3.c     ****     op0 = op0 + FIX_OP;
12626:src/vm3.c     ****   }
12627:src/vm3.c     **** 
12628:src/vm3.c     **** p = array;
12629:src/vm3.c     **** p = p[op0].next_level;
12630:src/vm3.c     **** 
12631:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38352              		.loc 1 12631 0
 38353 11d2d 8D4803   		leal	3(%rax), %ecx
 38354              	.LVL3680:
 38355 11d30 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38355      000000
 38356              	.LVL3681:
 38357 11d37 89C1     		movl	%eax, %ecx
12621:src/vm3.c     ****     op0 = op0 + funct;
 38358              		.loc 1 12621 0
 38359 11d39 0F45D6   		cmovne	%esi, %edx
 38360              	.LVL3682:
 38361              		.loc 1 12631 0
 38362 11d3c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38362      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1251


12629:src/vm3.c     **** 
 38363              		.loc 1 12629 0
 38364 11d43 0FB6D2   		movzbl	%dl, %edx
 38365 11d46 48C1E204 		salq	$4, %rdx
 38366              	.LVL3683:
 38367              		.loc 1 12631 0
 38368 11d4a C1E118   		sall	$24, %ecx
 38369 11d4d 09CB     		orl	%ecx, %ebx
 38370 11d4f 8D4801   		leal	1(%rax), %ecx
 38371 11d52 83C002   		addl	$2, %eax
 38372 11d55 0FB68000 		movzbl	VM_memory(%rax), %eax
 38372      000000
 38373 11d5c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38373      000000
 38374 11d63 C1E008   		sall	$8, %eax
 38375 11d66 C1E110   		sall	$16, %ecx
 38376 11d69 09CB     		orl	%ecx, %ebx
 38377 11d6b 09C3     		orl	%eax, %ebx
 38378              	.LVL3684:
12632:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38379              		.loc 1 12632 0
 38380 11d6d 89D9     		movl	%ebx, %ecx
12633:src/vm3.c     ****   if (op1 == 0x0) {
12634:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38381              		.loc 1 12634 0
 38382 11d6f 88D8     		movb	%bl, %al
12632:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38383              		.loc 1 12632 0
 38384 11d71 C1E91A   		shrl	$26, %ecx
 38385              	.LVL3685:
 38386              		.loc 1 12634 0
 38387 11d74 83E03F   		andl	$63, %eax
 38388 11d77 8D712B   		leal	43(%rcx), %esi
 38389 11d7a 84C9     		testb	%cl, %cl
 38390 11d7c 0F45C6   		cmovne	%esi, %eax
 38391              	.LVL3686:
12635:src/vm3.c     ****     op1 = op1 + funct;
12636:src/vm3.c     ****   }
12637:src/vm3.c     ****     else {
12638:src/vm3.c     ****     op1 = op1 + FIX_OP;
12639:src/vm3.c     ****   }
12640:src/vm3.c     **** 
12641:src/vm3.c     **** goto *p[op1].code;
 38392              		.loc 1 12641 0
 38393 11d7f 0FB6C0   		movzbl	%al, %eax
 38394 11d82 48C1E004 		salq	$4, %rax
 38395              	.LVL3687:
 38396 11d86 48038414 		addq	58088(%rsp,%rdx), %rax
 38396      E8E20000 
 38397 11d8e 488B08   		movq	(%rax), %rcx
 38398 11d91 E9C2EFFE 		jmp	.L269
 38398      FF
 38399              	.LVL3688:
 38400              	.L1362:
12642:src/vm3.c     **** 
12643:src/vm3.c     **** 
12644:src/vm3.c     **** }
GAS LISTING /tmp/cc15eBE3.s 			page 1252


12645:src/vm3.c     **** else
12646:src/vm3.c     **** {
12647:src/vm3.c     ****   PC  =  nPC;
12648:src/vm3.c     ****   nPC  += 4;
12649:src/vm3.c     **** }
12650:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38401              		.loc 1 12650 0
 38402 11d96 410FB691 		movzbl	VM_memory(%r9), %edx
 38402      00000000 
 38403 11d9e 450FB680 		movzbl	VM_memory(%r8), %r8d
 38403      00000000 
12648:src/vm3.c     **** }
 38404              		.loc 1 12648 0
 38405 11da6 8D4808   		leal	8(%rax), %ecx
12651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12652:src/vm3.c     ****   if (op0 == 0x0) {
12653:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12654:src/vm3.c     ****     op0 = op0 + funct;
12655:src/vm3.c     ****   }
12656:src/vm3.c     ****     else {
12657:src/vm3.c     ****     op0 = op0 + FIX_OP;
12658:src/vm3.c     ****   }
12659:src/vm3.c     **** 
12660:src/vm3.c     **** p = array;
12661:src/vm3.c     **** p = p[op0].next_level;
12662:src/vm3.c     **** 
12663:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38406              		.loc 1 12663 0
 38407 11da9 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38407      000000
 38408              	.LVL3689:
12648:src/vm3.c     **** }
 38409              		.loc 1 12648 0
 38410 11db0 890D0000 		movl	%ecx, nPC(%rip)
 38410      0000
 38411              		.loc 1 12663 0
 38412 11db6 8D4809   		leal	9(%rax), %ecx
12650:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38413              		.loc 1 12650 0
 38414 11db9 C1E218   		sall	$24, %edx
 38415              		.loc 1 12663 0
 38416 11dbc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38416      000000
12650:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38417              		.loc 1 12650 0
 38418 11dc3 4109D0   		orl	%edx, %r8d
 38419 11dc6 0FB69700 		movzbl	VM_memory(%rdi), %edx
 38419      000000
 38420 11dcd C1E210   		sall	$16, %edx
 38421 11dd0 4109D0   		orl	%edx, %r8d
 38422 11dd3 0FB69600 		movzbl	VM_memory(%rsi), %edx
 38422      000000
 38423 11dda C1E208   		sall	$8, %edx
 38424 11ddd 4109D0   		orl	%edx, %r8d
 38425              	.LVL3690:
12651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38426              		.loc 1 12651 0
GAS LISTING /tmp/cc15eBE3.s 			page 1253


 38427 11de0 4489C6   		movl	%r8d, %esi
12653:src/vm3.c     ****     op0 = op0 + funct;
 38428              		.loc 1 12653 0
 38429 11de3 4488C2   		movb	%r8b, %dl
12651:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38430              		.loc 1 12651 0
 38431 11de6 C1EE1A   		shrl	$26, %esi
 38432              	.LVL3691:
12653:src/vm3.c     ****     op0 = op0 + funct;
 38433              		.loc 1 12653 0
 38434 11de9 83E23F   		andl	$63, %edx
 38435 11dec 8D7E2B   		leal	43(%rsi), %edi
 38436 11def 4084F6   		testb	%sil, %sil
 38437 11df2 0F45D7   		cmovne	%edi, %edx
 38438              	.LVL3692:
 38439              		.loc 1 12663 0
 38440 11df5 C1E110   		sall	$16, %ecx
 38441 11df8 C1E318   		sall	$24, %ebx
 38442 11dfb 09CB     		orl	%ecx, %ebx
 38443 11dfd 8D480B   		leal	11(%rax), %ecx
 38444 11e00 83C00A   		addl	$10, %eax
 38445 11e03 0FB68000 		movzbl	VM_memory(%rax), %eax
 38445      000000
12661:src/vm3.c     **** 
 38446              		.loc 1 12661 0
 38447 11e0a 0FB6D2   		movzbl	%dl, %edx
 38448              		.loc 1 12663 0
 38449 11e0d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38449      000000
12661:src/vm3.c     **** 
 38450              		.loc 1 12661 0
 38451 11e14 48C1E204 		salq	$4, %rdx
 38452              	.LVL3693:
 38453              		.loc 1 12663 0
 38454 11e18 C1E008   		sall	$8, %eax
 38455 11e1b 09CB     		orl	%ecx, %ebx
 38456 11e1d 09C3     		orl	%eax, %ebx
 38457              	.LVL3694:
12664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38458              		.loc 1 12664 0
 38459 11e1f 89D9     		movl	%ebx, %ecx
12665:src/vm3.c     ****   if (op1 == 0x0) {
12666:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38460              		.loc 1 12666 0
 38461 11e21 88D8     		movb	%bl, %al
12664:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38462              		.loc 1 12664 0
 38463 11e23 C1E91A   		shrl	$26, %ecx
 38464              	.LVL3695:
 38465              		.loc 1 12666 0
 38466 11e26 83E03F   		andl	$63, %eax
 38467 11e29 8D712B   		leal	43(%rcx), %esi
 38468 11e2c 84C9     		testb	%cl, %cl
 38469 11e2e 0F45C6   		cmovne	%esi, %eax
 38470              	.LVL3696:
12667:src/vm3.c     ****     op1 = op1 + funct;
12668:src/vm3.c     ****   }
GAS LISTING /tmp/cc15eBE3.s 			page 1254


12669:src/vm3.c     ****     else {
12670:src/vm3.c     ****     op1 = op1 + FIX_OP;
12671:src/vm3.c     ****   }
12672:src/vm3.c     **** 
12673:src/vm3.c     **** goto *p[op1].code;
 38471              		.loc 1 12673 0
 38472 11e31 0FB6C0   		movzbl	%al, %eax
 38473 11e34 48C1E004 		salq	$4, %rax
 38474              	.LVL3697:
 38475 11e38 48038414 		addq	58088(%rsp,%rdx), %rax
 38475      E8E20000 
 38476 11e40 488B08   		movq	(%rax), %rcx
 38477 11e43 E910EFFE 		jmp	.L269
 38477      FF
 38478              	.LVL3698:
 38479              	.L47:
12674:src/vm3.c     **** 
12675:src/vm3.c     **** 
12676:src/vm3.c     **** orPLUSsltu:
12677:src/vm3.c     **** #if INDIRECT_DEBUG
12678:src/vm3.c     **** printf("%d|or\n",counter);
12679:src/vm3.c     **** counter++;
12680:src/vm3.c     **** #endif
12681:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12682:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38480              		.loc 1 12682 0
 38481 11e48 4489C0   		movl	%r8d, %eax
12683:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38482              		.loc 1 12683 0
 38483 11e4b 4489C2   		movl	%r8d, %edx
12681:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38484              		.loc 1 12681 0
 38485 11e4e 41C1E815 		shrl	$21, %r8d
 38486              	.LVL3699:
12682:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38487              		.loc 1 12682 0
 38488 11e52 C1E810   		shrl	$16, %eax
 38489              	.LVL3700:
12684:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 38490              		.loc 1 12684 0
 38491 11e55 4183E01F 		andl	$31, %r8d
12683:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 38492              		.loc 1 12683 0
 38493 11e59 C1EA0B   		shrl	$11, %edx
 38494              	.LVL3701:
 38495              		.loc 1 12684 0
 38496 11e5c 83E01F   		andl	$31, %eax
 38497 11e5f 83E21F   		andl	$31, %edx
12685:src/vm3.c     **** PC  =  nPC;
12686:src/vm3.c     **** nPC  += 4;
 38498              		.loc 1 12686 0
 38499 11e62 83050000 		addl	$4, nPC(%rip)
 38499      000004
 38500              	.LVL3702:
12684:src/vm3.c     **** PC  =  nPC;
 38501              		.loc 1 12684 0
 38502 11e69 8B048500 		movl	RF(,%rax,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1255


 38502      000000
 38503 11e70 420B0485 		orl	RF(,%r8,4), %eax
 38503      00000000 
 38504 11e78 89049500 		movl	%eax, RF(,%rdx,4)
 38504      000000
12687:src/vm3.c     **** 
12688:src/vm3.c     **** #if INDIRECT_DEBUG
12689:src/vm3.c     **** printf("%d|sltu\n",counter);
12690:src/vm3.c     **** counter++;
12691:src/vm3.c     **** #endif
12692:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 38505              		.loc 1 12692 0
 38506 11e7f 89DA     		movl	%ebx, %edx
12693:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12694:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38507              		.loc 1 12694 0
 38508 11e81 89D8     		movl	%ebx, %eax
12692:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38509              		.loc 1 12692 0
 38510 11e83 C1EA15   		shrl	$21, %edx
12693:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38511              		.loc 1 12693 0
 38512 11e86 C1EB10   		shrl	$16, %ebx
 38513              	.LVL3703:
 38514              		.loc 1 12694 0
 38515 11e89 C1E80B   		shrl	$11, %eax
 38516              	.LVL3704:
12695:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 38517              		.loc 1 12695 0
 38518 11e8c 83E31F   		andl	$31, %ebx
 38519 11e8f 83E21F   		andl	$31, %edx
 38520 11e92 83E01F   		andl	$31, %eax
 38521 11e95 8B3C9D00 		movl	RF(,%rbx,4), %edi
 38521      000000
 38522 11e9c 393C9500 		cmpl	%edi, RF(,%rdx,4)
 38522      000000
 38523 11ea3 0F92C2   		setb	%dl
 38524 11ea6 0FB6D2   		movzbl	%dl, %edx
 38525 11ea9 89148500 		movl	%edx, RF(,%rax,4)
 38525      000000
12696:src/vm3.c     **** PC  =  nPC;
 38526              		.loc 1 12696 0
 38527 11eb0 8B050000 		movl	nPC(%rip), %eax
 38527      0000
12697:src/vm3.c     **** nPC  += 4;
12698:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38528              		.loc 1 12698 0
 38529 11eb6 8D5003   		leal	3(%rax), %edx
12697:src/vm3.c     **** nPC  += 4;
 38530              		.loc 1 12697 0
 38531 11eb9 8D4804   		leal	4(%rax), %ecx
12696:src/vm3.c     **** PC  =  nPC;
 38532              		.loc 1 12696 0
 38533 11ebc 89050000 		movl	%eax, PC(%rip)
 38533      0000
 38534              		.loc 1 12698 0
 38535 11ec2 440FB682 		movzbl	VM_memory(%rdx), %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1256


 38535      00000000 
 38536 11eca 89C2     		movl	%eax, %edx
12699:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12700:src/vm3.c     ****   if (op0 == 0x0) {
12701:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12702:src/vm3.c     ****     op0 = op0 + funct;
12703:src/vm3.c     ****   }
12704:src/vm3.c     ****     else {
12705:src/vm3.c     ****     op0 = op0 + FIX_OP;
12706:src/vm3.c     ****   }
12707:src/vm3.c     **** 
12708:src/vm3.c     **** p = array;
12709:src/vm3.c     **** p = p[op0].next_level;
12710:src/vm3.c     **** 
12711:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38537              		.loc 1 12711 0
 38538 11ecc 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38538      000000
12698:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38539              		.loc 1 12698 0
 38540 11ed3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38540      000000
12697:src/vm3.c     **** nPC  += 4;
 38541              		.loc 1 12697 0
 38542 11eda 890D0000 		movl	%ecx, nPC(%rip)
 38542      0000
 38543              		.loc 1 12711 0
 38544 11ee0 8D4805   		leal	5(%rax), %ecx
 38545 11ee3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38545      000000
12698:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38546              		.loc 1 12698 0
 38547 11eea C1E218   		sall	$24, %edx
 38548 11eed 4109D0   		orl	%edx, %r8d
 38549 11ef0 8D5001   		leal	1(%rax), %edx
 38550 11ef3 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38550      000000
 38551 11efa C1E210   		sall	$16, %edx
 38552 11efd 4109D0   		orl	%edx, %r8d
 38553 11f00 8D5002   		leal	2(%rax), %edx
 38554 11f03 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38554      000000
 38555 11f0a C1E208   		sall	$8, %edx
 38556 11f0d 4109D0   		orl	%edx, %r8d
 38557              	.LVL3705:
12699:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38558              		.loc 1 12699 0
 38559 11f10 4489C6   		movl	%r8d, %esi
12701:src/vm3.c     ****     op0 = op0 + funct;
 38560              		.loc 1 12701 0
 38561 11f13 4488C2   		movb	%r8b, %dl
12699:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38562              		.loc 1 12699 0
 38563 11f16 C1EE1A   		shrl	$26, %esi
 38564              	.LVL3706:
12701:src/vm3.c     ****     op0 = op0 + funct;
 38565              		.loc 1 12701 0
GAS LISTING /tmp/cc15eBE3.s 			page 1257


 38566 11f19 83E23F   		andl	$63, %edx
 38567 11f1c 8D7E2B   		leal	43(%rsi), %edi
 38568 11f1f 4084F6   		testb	%sil, %sil
 38569 11f22 0F45D7   		cmovne	%edi, %edx
 38570              	.LVL3707:
 38571              		.loc 1 12711 0
 38572 11f25 C1E110   		sall	$16, %ecx
 38573 11f28 C1E318   		sall	$24, %ebx
 38574 11f2b 09CB     		orl	%ecx, %ebx
 38575 11f2d 8D4807   		leal	7(%rax), %ecx
 38576 11f30 83C006   		addl	$6, %eax
 38577 11f33 0FB68000 		movzbl	VM_memory(%rax), %eax
 38577      000000
12709:src/vm3.c     **** 
 38578              		.loc 1 12709 0
 38579 11f3a 0FB6D2   		movzbl	%dl, %edx
 38580              		.loc 1 12711 0
 38581 11f3d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38581      000000
12709:src/vm3.c     **** 
 38582              		.loc 1 12709 0
 38583 11f44 48C1E204 		salq	$4, %rdx
 38584              	.LVL3708:
 38585              		.loc 1 12711 0
 38586 11f48 C1E008   		sall	$8, %eax
 38587 11f4b 09CB     		orl	%ecx, %ebx
 38588 11f4d 09C3     		orl	%eax, %ebx
 38589              	.LVL3709:
12712:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38590              		.loc 1 12712 0
 38591 11f4f 89D9     		movl	%ebx, %ecx
12713:src/vm3.c     ****   if (op1 == 0x0) {
12714:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38592              		.loc 1 12714 0
 38593 11f51 88D8     		movb	%bl, %al
12712:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38594              		.loc 1 12712 0
 38595 11f53 C1E91A   		shrl	$26, %ecx
 38596              	.LVL3710:
 38597              		.loc 1 12714 0
 38598 11f56 83E03F   		andl	$63, %eax
 38599 11f59 8D712B   		leal	43(%rcx), %esi
 38600 11f5c 84C9     		testb	%cl, %cl
 38601 11f5e 0F45C6   		cmovne	%esi, %eax
 38602              	.LVL3711:
12715:src/vm3.c     ****     op1 = op1 + funct;
12716:src/vm3.c     ****   }
12717:src/vm3.c     ****     else {
12718:src/vm3.c     ****     op1 = op1 + FIX_OP;
12719:src/vm3.c     ****   }
12720:src/vm3.c     **** 
12721:src/vm3.c     **** goto *p[op1].code;
 38603              		.loc 1 12721 0
 38604 11f61 0FB6C0   		movzbl	%al, %eax
 38605 11f64 48C1E004 		salq	$4, %rax
 38606              	.LVL3712:
 38607 11f68 48038414 		addq	58088(%rsp,%rdx), %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1258


 38607      E8E20000 
 38608 11f70 488B08   		movq	(%rax), %rcx
 38609 11f73 E9E0EDFE 		jmp	.L269
 38609      FF
 38610              	.LVL3713:
 38611              	.L46:
12722:src/vm3.c     **** 
12723:src/vm3.c     **** 
12724:src/vm3.c     **** orPLUSor:
12725:src/vm3.c     **** #if INDIRECT_DEBUG
12726:src/vm3.c     **** printf("%d|or\n",counter);
12727:src/vm3.c     **** counter++;
12728:src/vm3.c     **** #endif
12729:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12730:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38612              		.loc 1 12730 0
 38613 11f78 4489C0   		movl	%r8d, %eax
12731:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38614              		.loc 1 12731 0
 38615 11f7b 4489C2   		movl	%r8d, %edx
12729:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38616              		.loc 1 12729 0
 38617 11f7e 41C1E815 		shrl	$21, %r8d
 38618              	.LVL3714:
12730:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38619              		.loc 1 12730 0
 38620 11f82 C1E810   		shrl	$16, %eax
 38621              	.LVL3715:
12732:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 38622              		.loc 1 12732 0
 38623 11f85 4183E01F 		andl	$31, %r8d
12731:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 38624              		.loc 1 12731 0
 38625 11f89 C1EA0B   		shrl	$11, %edx
 38626              	.LVL3716:
 38627              		.loc 1 12732 0
 38628 11f8c 83E01F   		andl	$31, %eax
 38629 11f8f 83E21F   		andl	$31, %edx
12733:src/vm3.c     **** PC  =  nPC;
12734:src/vm3.c     **** nPC  += 4;
 38630              		.loc 1 12734 0
 38631 11f92 83050000 		addl	$4, nPC(%rip)
 38631      000004
 38632              	.LVL3717:
12732:src/vm3.c     **** PC  =  nPC;
 38633              		.loc 1 12732 0
 38634 11f99 8B048500 		movl	RF(,%rax,4), %eax
 38634      000000
 38635 11fa0 420B0485 		orl	RF(,%r8,4), %eax
 38635      00000000 
 38636 11fa8 89049500 		movl	%eax, RF(,%rdx,4)
 38636      000000
12735:src/vm3.c     **** 
12736:src/vm3.c     **** #if INDIRECT_DEBUG
12737:src/vm3.c     **** printf("%d|or\n",counter);
12738:src/vm3.c     **** counter++;
12739:src/vm3.c     **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 1259


12740:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
12741:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38637              		.loc 1 12741 0
 38638 11faf 89D8     		movl	%ebx, %eax
12742:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38639              		.loc 1 12742 0
 38640 11fb1 89DA     		movl	%ebx, %edx
12741:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38641              		.loc 1 12741 0
 38642 11fb3 C1E810   		shrl	$16, %eax
12740:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38643              		.loc 1 12740 0
 38644 11fb6 C1EB15   		shrl	$21, %ebx
 38645              	.LVL3718:
 38646              		.loc 1 12742 0
 38647 11fb9 C1EA0B   		shrl	$11, %edx
 38648              	.LVL3719:
12743:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 38649              		.loc 1 12743 0
 38650 11fbc 83E31F   		andl	$31, %ebx
 38651 11fbf 83E01F   		andl	$31, %eax
 38652 11fc2 83E21F   		andl	$31, %edx
 38653 11fc5 8B048500 		movl	RF(,%rax,4), %eax
 38653      000000
 38654 11fcc 0B049D00 		orl	RF(,%rbx,4), %eax
 38654      000000
 38655 11fd3 89049500 		movl	%eax, RF(,%rdx,4)
 38655      000000
12744:src/vm3.c     **** PC  =  nPC;
 38656              		.loc 1 12744 0
 38657 11fda 8B050000 		movl	nPC(%rip), %eax
 38657      0000
12745:src/vm3.c     **** nPC  += 4;
12746:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38658              		.loc 1 12746 0
 38659 11fe0 8D5003   		leal	3(%rax), %edx
12745:src/vm3.c     **** nPC  += 4;
 38660              		.loc 1 12745 0
 38661 11fe3 8D4804   		leal	4(%rax), %ecx
12744:src/vm3.c     **** PC  =  nPC;
 38662              		.loc 1 12744 0
 38663 11fe6 89050000 		movl	%eax, PC(%rip)
 38663      0000
 38664              		.loc 1 12746 0
 38665 11fec 440FB682 		movzbl	VM_memory(%rdx), %r8d
 38665      00000000 
 38666 11ff4 89C2     		movl	%eax, %edx
12747:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12748:src/vm3.c     ****   if (op0 == 0x0) {
12749:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12750:src/vm3.c     ****     op0 = op0 + funct;
12751:src/vm3.c     ****   }
12752:src/vm3.c     ****     else {
12753:src/vm3.c     ****     op0 = op0 + FIX_OP;
12754:src/vm3.c     ****   }
12755:src/vm3.c     **** 
12756:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 1260


12757:src/vm3.c     **** p = p[op0].next_level;
12758:src/vm3.c     **** 
12759:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38667              		.loc 1 12759 0
 38668 11ff6 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38668      000000
12746:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38669              		.loc 1 12746 0
 38670 11ffd 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38670      000000
12745:src/vm3.c     **** nPC  += 4;
 38671              		.loc 1 12745 0
 38672 12004 890D0000 		movl	%ecx, nPC(%rip)
 38672      0000
 38673              		.loc 1 12759 0
 38674 1200a 8D4805   		leal	5(%rax), %ecx
 38675 1200d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38675      000000
12746:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38676              		.loc 1 12746 0
 38677 12014 C1E218   		sall	$24, %edx
 38678 12017 4109D0   		orl	%edx, %r8d
 38679 1201a 8D5001   		leal	1(%rax), %edx
 38680 1201d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38680      000000
 38681 12024 C1E210   		sall	$16, %edx
 38682 12027 4109D0   		orl	%edx, %r8d
 38683 1202a 8D5002   		leal	2(%rax), %edx
 38684 1202d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 38684      000000
 38685 12034 C1E208   		sall	$8, %edx
 38686 12037 4109D0   		orl	%edx, %r8d
 38687              	.LVL3720:
12747:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38688              		.loc 1 12747 0
 38689 1203a 4489C6   		movl	%r8d, %esi
12749:src/vm3.c     ****     op0 = op0 + funct;
 38690              		.loc 1 12749 0
 38691 1203d 4488C2   		movb	%r8b, %dl
12747:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38692              		.loc 1 12747 0
 38693 12040 C1EE1A   		shrl	$26, %esi
 38694              	.LVL3721:
12749:src/vm3.c     ****     op0 = op0 + funct;
 38695              		.loc 1 12749 0
 38696 12043 83E23F   		andl	$63, %edx
 38697 12046 8D7E2B   		leal	43(%rsi), %edi
 38698 12049 4084F6   		testb	%sil, %sil
 38699 1204c 0F45D7   		cmovne	%edi, %edx
 38700              	.LVL3722:
 38701              		.loc 1 12759 0
 38702 1204f C1E110   		sall	$16, %ecx
 38703 12052 C1E318   		sall	$24, %ebx
 38704 12055 09CB     		orl	%ecx, %ebx
 38705 12057 8D4807   		leal	7(%rax), %ecx
 38706 1205a 83C006   		addl	$6, %eax
 38707 1205d 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1261


 38707      000000
12757:src/vm3.c     **** 
 38708              		.loc 1 12757 0
 38709 12064 0FB6D2   		movzbl	%dl, %edx
 38710              		.loc 1 12759 0
 38711 12067 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38711      000000
12757:src/vm3.c     **** 
 38712              		.loc 1 12757 0
 38713 1206e 48C1E204 		salq	$4, %rdx
 38714              	.LVL3723:
 38715              		.loc 1 12759 0
 38716 12072 C1E008   		sall	$8, %eax
 38717 12075 09CB     		orl	%ecx, %ebx
 38718 12077 09C3     		orl	%eax, %ebx
 38719              	.LVL3724:
12760:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38720              		.loc 1 12760 0
 38721 12079 89D9     		movl	%ebx, %ecx
12761:src/vm3.c     ****   if (op1 == 0x0) {
12762:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38722              		.loc 1 12762 0
 38723 1207b 88D8     		movb	%bl, %al
12760:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38724              		.loc 1 12760 0
 38725 1207d C1E91A   		shrl	$26, %ecx
 38726              	.LVL3725:
 38727              		.loc 1 12762 0
 38728 12080 83E03F   		andl	$63, %eax
 38729 12083 8D712B   		leal	43(%rcx), %esi
 38730 12086 84C9     		testb	%cl, %cl
 38731 12088 0F45C6   		cmovne	%esi, %eax
 38732              	.LVL3726:
12763:src/vm3.c     ****     op1 = op1 + funct;
12764:src/vm3.c     ****   }
12765:src/vm3.c     ****     else {
12766:src/vm3.c     ****     op1 = op1 + FIX_OP;
12767:src/vm3.c     ****   }
12768:src/vm3.c     **** 
12769:src/vm3.c     **** goto *p[op1].code;
 38733              		.loc 1 12769 0
 38734 1208b 0FB6C0   		movzbl	%al, %eax
 38735 1208e 48C1E004 		salq	$4, %rax
 38736              	.LVL3727:
 38737 12092 48038414 		addq	58088(%rsp,%rdx), %rax
 38737      E8E20000 
 38738 1209a 488B08   		movq	(%rax), %rcx
 38739 1209d E9B6ECFE 		jmp	.L269
 38739      FF
 38740              	.LVL3728:
 38741              	.L146:
12770:src/vm3.c     **** 
12771:src/vm3.c     **** 
12772:src/vm3.c     **** addiuPLUSblez:
12773:src/vm3.c     **** #if INDIRECT_DEBUG
12774:src/vm3.c     **** printf("%d|addiu\n",counter);
12775:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 1262


12776:src/vm3.c     **** #endif
12777:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 38742              		.loc 1 12777 0
 38743 120a2 4489C2   		movl	%r8d, %edx
12778:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38744              		.loc 1 12778 0
 38745 120a5 4489C0   		movl	%r8d, %eax
12779:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12780:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 38746              		.loc 1 12780 0
 38747 120a8 450FBFC0 		movswl	%r8w, %r8d
 38748              	.LVL3729:
12777:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38749              		.loc 1 12777 0
 38750 120ac C1EA15   		shrl	$21, %edx
12778:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38751              		.loc 1 12778 0
 38752 120af C1E810   		shrl	$16, %eax
 38753              	.LVL3730:
12781:src/vm3.c     **** PC  =  nPC;
12782:src/vm3.c     **** nPC  += 4;
12783:src/vm3.c     **** 
12784:src/vm3.c     **** #if INDIRECT_DEBUG
12785:src/vm3.c     **** printf("%d|blez\n",counter);
12786:src/vm3.c     **** counter++;
12787:src/vm3.c     **** #endif
12788:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 38754              		.loc 1 12788 0
 38755 120b2 89D9     		movl	%ebx, %ecx
12780:src/vm3.c     **** PC  =  nPC;
 38756              		.loc 1 12780 0
 38757 120b4 83E21F   		andl	$31, %edx
 38758 120b7 83E01F   		andl	$31, %eax
 38759              		.loc 1 12788 0
 38760 120ba C1E915   		shrl	$21, %ecx
12780:src/vm3.c     **** PC  =  nPC;
 38761              		.loc 1 12780 0
 38762 120bd 44030495 		addl	RF(,%rdx,4), %r8d
 38762      00000000 
 38763              	.LVL3731:
12789:src/vm3.c     **** if ((int32_t)RF[rs] <= 0)
 38764              		.loc 1 12789 0
 38765 120c5 83E11F   		andl	$31, %ecx
12780:src/vm3.c     **** PC  =  nPC;
 38766              		.loc 1 12780 0
 38767 120c8 44890485 		movl	%r8d, RF(,%rax,4)
 38767      00000000 
12781:src/vm3.c     **** PC  =  nPC;
 38768              		.loc 1 12781 0
 38769 120d0 8B050000 		movl	nPC(%rip), %eax
 38769      0000
 38770              		.loc 1 12789 0
 38771 120d6 833C8D00 		cmpl	$0, RF(,%rcx,4)
 38771      00000000 
12782:src/vm3.c     **** 
 38772              		.loc 1 12782 0
 38773 120de 8D5004   		leal	4(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1263


 38774              	.LVL3732:
 38775 120e1 448D4007 		leal	7(%rax), %r8d
 38776 120e5 8D7805   		leal	5(%rax), %edi
 38777 120e8 8D7006   		leal	6(%rax), %esi
 38778 120eb 4189D1   		movl	%edx, %r9d
12790:src/vm3.c     **** {
12791:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
12792:src/vm3.c     ****   PC  =  nPC;
 38779              		.loc 1 12792 0
 38780 120ee 89150000 		movl	%edx, PC(%rip)
 38780      0000
12789:src/vm3.c     **** {
 38781              		.loc 1 12789 0
 38782 120f4 0F8FB600 		jg	.L1379
 38782      0000
 38783              	.LVL3733:
12793:src/vm3.c     ****   nPC  += (immediate << 2);
 38784              		.loc 1 12793 0
 38785 120fa 0FBFDB   		movswl	%bx, %ebx
 38786              	.LVL3734:
12794:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 38787              		.loc 1 12794 0
 38788 120fd 450FB680 		movzbl	VM_memory(%r8), %r8d
 38788      00000000 
12793:src/vm3.c     ****   nPC  += (immediate << 2);
 38789              		.loc 1 12793 0
 38790 12105 8D049A   		leal	(%rdx,%rbx,4), %eax
 38791              		.loc 1 12794 0
 38792 12108 410FB691 		movzbl	VM_memory(%r9), %edx
 38792      00000000 
12793:src/vm3.c     ****   nPC  += (immediate << 2);
 38793              		.loc 1 12793 0
 38794 12110 89050000 		movl	%eax, nPC(%rip)
 38794      0000
 38795              		.loc 1 12794 0
 38796 12116 C1E218   		sall	$24, %edx
 38797 12119 4109D0   		orl	%edx, %r8d
 38798 1211c 0FB69700 		movzbl	VM_memory(%rdi), %edx
 38798      000000
 38799 12123 C1E210   		sall	$16, %edx
 38800 12126 4109D0   		orl	%edx, %r8d
 38801 12129 0FB69600 		movzbl	VM_memory(%rsi), %edx
 38801      000000
 38802 12130 C1E208   		sall	$8, %edx
 38803 12133 4109D0   		orl	%edx, %r8d
 38804              	.LVL3735:
12795:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38805              		.loc 1 12795 0
 38806 12136 4489C1   		movl	%r8d, %ecx
12796:src/vm3.c     ****   if (op0 == 0x0) {
12797:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 38807              		.loc 1 12797 0
 38808 12139 4488C2   		movb	%r8b, %dl
12795:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38809              		.loc 1 12795 0
 38810 1213c C1E91A   		shrl	$26, %ecx
 38811              	.LVL3736:
GAS LISTING /tmp/cc15eBE3.s 			page 1264


 38812              		.loc 1 12797 0
 38813 1213f 83E23F   		andl	$63, %edx
 38814 12142 8D712B   		leal	43(%rcx), %esi
 38815 12145 84C9     		testb	%cl, %cl
12798:src/vm3.c     ****     op0 = op0 + funct;
12799:src/vm3.c     ****   }
12800:src/vm3.c     ****     else {
12801:src/vm3.c     ****     op0 = op0 + FIX_OP;
12802:src/vm3.c     ****   }
12803:src/vm3.c     **** 
12804:src/vm3.c     **** p = array;
12805:src/vm3.c     **** p = p[op0].next_level;
12806:src/vm3.c     **** 
12807:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38816              		.loc 1 12807 0
 38817 12147 8D4803   		leal	3(%rax), %ecx
 38818              	.LVL3737:
 38819 1214a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 38819      000000
 38820              	.LVL3738:
 38821 12151 89C1     		movl	%eax, %ecx
12797:src/vm3.c     ****     op0 = op0 + funct;
 38822              		.loc 1 12797 0
 38823 12153 0F45D6   		cmovne	%esi, %edx
 38824              	.LVL3739:
 38825              		.loc 1 12807 0
 38826 12156 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38826      000000
12805:src/vm3.c     **** 
 38827              		.loc 1 12805 0
 38828 1215d 0FB6D2   		movzbl	%dl, %edx
 38829 12160 48C1E204 		salq	$4, %rdx
 38830              	.LVL3740:
 38831              		.loc 1 12807 0
 38832 12164 C1E118   		sall	$24, %ecx
 38833 12167 09CB     		orl	%ecx, %ebx
 38834 12169 8D4801   		leal	1(%rax), %ecx
 38835 1216c 83C002   		addl	$2, %eax
 38836 1216f 0FB68000 		movzbl	VM_memory(%rax), %eax
 38836      000000
 38837 12176 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38837      000000
 38838 1217d C1E008   		sall	$8, %eax
 38839 12180 C1E110   		sall	$16, %ecx
 38840 12183 09CB     		orl	%ecx, %ebx
 38841 12185 09C3     		orl	%eax, %ebx
 38842              	.LVL3741:
12808:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38843              		.loc 1 12808 0
 38844 12187 89D9     		movl	%ebx, %ecx
12809:src/vm3.c     ****   if (op1 == 0x0) {
12810:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38845              		.loc 1 12810 0
 38846 12189 88D8     		movb	%bl, %al
12808:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38847              		.loc 1 12808 0
 38848 1218b C1E91A   		shrl	$26, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1265


 38849              	.LVL3742:
 38850              		.loc 1 12810 0
 38851 1218e 83E03F   		andl	$63, %eax
 38852 12191 8D712B   		leal	43(%rcx), %esi
 38853 12194 84C9     		testb	%cl, %cl
 38854 12196 0F45C6   		cmovne	%esi, %eax
 38855              	.LVL3743:
12811:src/vm3.c     ****     op1 = op1 + funct;
12812:src/vm3.c     ****   }
12813:src/vm3.c     ****     else {
12814:src/vm3.c     ****     op1 = op1 + FIX_OP;
12815:src/vm3.c     ****   }
12816:src/vm3.c     **** 
12817:src/vm3.c     **** goto *p[op1].code;
 38856              		.loc 1 12817 0
 38857 12199 0FB6C0   		movzbl	%al, %eax
 38858 1219c 48C1E004 		salq	$4, %rax
 38859              	.LVL3744:
 38860 121a0 48038414 		addq	58088(%rsp,%rdx), %rax
 38860      E8E20000 
 38861 121a8 488B08   		movq	(%rax), %rcx
 38862 121ab E9A8EBFE 		jmp	.L269
 38862      FF
 38863              	.LVL3745:
 38864              	.L1379:
12818:src/vm3.c     **** 
12819:src/vm3.c     **** 
12820:src/vm3.c     **** }
12821:src/vm3.c     **** else
12822:src/vm3.c     **** {
12823:src/vm3.c     ****   PC  =  nPC;
12824:src/vm3.c     ****   nPC  += 4;
12825:src/vm3.c     **** }
12826:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38865              		.loc 1 12826 0
 38866 121b0 410FB691 		movzbl	VM_memory(%r9), %edx
 38866      00000000 
 38867 121b8 450FB680 		movzbl	VM_memory(%r8), %r8d
 38867      00000000 
12824:src/vm3.c     **** }
 38868              		.loc 1 12824 0
 38869 121c0 8D4808   		leal	8(%rax), %ecx
12827:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12828:src/vm3.c     ****   if (op0 == 0x0) {
12829:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12830:src/vm3.c     ****     op0 = op0 + funct;
12831:src/vm3.c     ****   }
12832:src/vm3.c     ****     else {
12833:src/vm3.c     ****     op0 = op0 + FIX_OP;
12834:src/vm3.c     ****   }
12835:src/vm3.c     **** 
12836:src/vm3.c     **** p = array;
12837:src/vm3.c     **** p = p[op0].next_level;
12838:src/vm3.c     **** 
12839:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 38870              		.loc 1 12839 0
 38871 121c3 0FB69900 		movzbl	VM_memory(%rcx), %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1266


 38871      000000
 38872              	.LVL3746:
12824:src/vm3.c     **** }
 38873              		.loc 1 12824 0
 38874 121ca 890D0000 		movl	%ecx, nPC(%rip)
 38874      0000
 38875              		.loc 1 12839 0
 38876 121d0 8D4809   		leal	9(%rax), %ecx
12826:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38877              		.loc 1 12826 0
 38878 121d3 C1E218   		sall	$24, %edx
 38879              		.loc 1 12839 0
 38880 121d6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38880      000000
12826:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38881              		.loc 1 12826 0
 38882 121dd 4109D0   		orl	%edx, %r8d
 38883 121e0 0FB69700 		movzbl	VM_memory(%rdi), %edx
 38883      000000
 38884 121e7 C1E210   		sall	$16, %edx
 38885 121ea 4109D0   		orl	%edx, %r8d
 38886 121ed 0FB69600 		movzbl	VM_memory(%rsi), %edx
 38886      000000
 38887 121f4 C1E208   		sall	$8, %edx
 38888 121f7 4109D0   		orl	%edx, %r8d
 38889              	.LVL3747:
12827:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38890              		.loc 1 12827 0
 38891 121fa 4489C6   		movl	%r8d, %esi
12829:src/vm3.c     ****     op0 = op0 + funct;
 38892              		.loc 1 12829 0
 38893 121fd 4488C2   		movb	%r8b, %dl
12827:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 38894              		.loc 1 12827 0
 38895 12200 C1EE1A   		shrl	$26, %esi
 38896              	.LVL3748:
12829:src/vm3.c     ****     op0 = op0 + funct;
 38897              		.loc 1 12829 0
 38898 12203 83E23F   		andl	$63, %edx
 38899 12206 8D7E2B   		leal	43(%rsi), %edi
 38900 12209 4084F6   		testb	%sil, %sil
 38901 1220c 0F45D7   		cmovne	%edi, %edx
 38902              	.LVL3749:
 38903              		.loc 1 12839 0
 38904 1220f C1E110   		sall	$16, %ecx
 38905 12212 C1E318   		sall	$24, %ebx
 38906 12215 09CB     		orl	%ecx, %ebx
 38907 12217 8D480B   		leal	11(%rax), %ecx
 38908 1221a 83C00A   		addl	$10, %eax
 38909 1221d 0FB68000 		movzbl	VM_memory(%rax), %eax
 38909      000000
12837:src/vm3.c     **** 
 38910              		.loc 1 12837 0
 38911 12224 0FB6D2   		movzbl	%dl, %edx
 38912              		.loc 1 12839 0
 38913 12227 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 38913      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1267


12837:src/vm3.c     **** 
 38914              		.loc 1 12837 0
 38915 1222e 48C1E204 		salq	$4, %rdx
 38916              	.LVL3750:
 38917              		.loc 1 12839 0
 38918 12232 C1E008   		sall	$8, %eax
 38919 12235 09CB     		orl	%ecx, %ebx
 38920 12237 09C3     		orl	%eax, %ebx
 38921              	.LVL3751:
12840:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38922              		.loc 1 12840 0
 38923 12239 89D9     		movl	%ebx, %ecx
12841:src/vm3.c     ****   if (op1 == 0x0) {
12842:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 38924              		.loc 1 12842 0
 38925 1223b 88D8     		movb	%bl, %al
12840:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 38926              		.loc 1 12840 0
 38927 1223d C1E91A   		shrl	$26, %ecx
 38928              	.LVL3752:
 38929              		.loc 1 12842 0
 38930 12240 83E03F   		andl	$63, %eax
 38931 12243 8D712B   		leal	43(%rcx), %esi
 38932 12246 84C9     		testb	%cl, %cl
 38933 12248 0F45C6   		cmovne	%esi, %eax
 38934              	.LVL3753:
12843:src/vm3.c     ****     op1 = op1 + funct;
12844:src/vm3.c     ****   }
12845:src/vm3.c     ****     else {
12846:src/vm3.c     ****     op1 = op1 + FIX_OP;
12847:src/vm3.c     ****   }
12848:src/vm3.c     **** 
12849:src/vm3.c     **** goto *p[op1].code;
 38935              		.loc 1 12849 0
 38936 1224b 0FB6C0   		movzbl	%al, %eax
 38937 1224e 48C1E004 		salq	$4, %rax
 38938              	.LVL3754:
 38939 12252 48038414 		addq	58088(%rsp,%rdx), %rax
 38939      E8E20000 
 38940 1225a 488B08   		movq	(%rax), %rcx
 38941 1225d E9F6EAFE 		jmp	.L269
 38941      FF
 38942              	.LVL3755:
 38943              	.L79:
12850:src/vm3.c     **** 
12851:src/vm3.c     **** 
12852:src/vm3.c     **** xorPLUSsrl:
12853:src/vm3.c     **** #if INDIRECT_DEBUG
12854:src/vm3.c     **** printf("%d|xor\n",counter);
12855:src/vm3.c     **** counter++;
12856:src/vm3.c     **** #endif
12857:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
12858:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38944              		.loc 1 12858 0
 38945 12262 4489C0   		movl	%r8d, %eax
12859:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38946              		.loc 1 12859 0
GAS LISTING /tmp/cc15eBE3.s 			page 1268


 38947 12265 4489C2   		movl	%r8d, %edx
12857:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 38948              		.loc 1 12857 0
 38949 12268 41C1E815 		shrl	$21, %r8d
 38950              	.LVL3756:
12858:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 38951              		.loc 1 12858 0
 38952 1226c C1E810   		shrl	$16, %eax
 38953              	.LVL3757:
12860:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 38954              		.loc 1 12860 0
 38955 1226f 4183E01F 		andl	$31, %r8d
12859:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 38956              		.loc 1 12859 0
 38957 12273 C1EA0B   		shrl	$11, %edx
 38958              	.LVL3758:
 38959              		.loc 1 12860 0
 38960 12276 83E01F   		andl	$31, %eax
 38961 12279 83E21F   		andl	$31, %edx
12861:src/vm3.c     **** PC  =  nPC;
12862:src/vm3.c     **** nPC  += 4;
 38962              		.loc 1 12862 0
 38963 1227c 83050000 		addl	$4, nPC(%rip)
 38963      000004
 38964              	.LVL3759:
12860:src/vm3.c     **** PC  =  nPC;
 38965              		.loc 1 12860 0
 38966 12283 8B048500 		movl	RF(,%rax,4), %eax
 38966      000000
 38967 1228a 42330485 		xorl	RF(,%r8,4), %eax
 38967      00000000 
 38968 12292 89049500 		movl	%eax, RF(,%rdx,4)
 38968      000000
12863:src/vm3.c     **** 
12864:src/vm3.c     **** #if INDIRECT_DEBUG
12865:src/vm3.c     **** printf("%d|srl\n",counter);
12866:src/vm3.c     **** counter++;
12867:src/vm3.c     **** #endif
12868:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
12869:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38969              		.loc 1 12869 0
 38970 12299 89D8     		movl	%ebx, %eax
12870:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38971              		.loc 1 12870 0
 38972 1229b 89DA     		movl	%ebx, %edx
12869:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 38973              		.loc 1 12869 0
 38974 1229d C1E810   		shrl	$16, %eax
12868:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38975              		.loc 1 12868 0
 38976 122a0 C1EB06   		shrl	$6, %ebx
 38977              	.LVL3760:
 38978              		.loc 1 12870 0
 38979 122a3 C1EA0B   		shrl	$11, %edx
 38980              	.LVL3761:
12871:src/vm3.c     **** RF[rd] = RF[rt] >> shamt;
 38981              		.loc 1 12871 0
GAS LISTING /tmp/cc15eBE3.s 			page 1269


 38982 122a6 83E01F   		andl	$31, %eax
12868:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38983              		.loc 1 12868 0
 38984 122a9 88D9     		movb	%bl, %cl
 38985              		.loc 1 12871 0
 38986 122ab 83E21F   		andl	$31, %edx
 38987 122ae 8B048500 		movl	RF(,%rax,4), %eax
 38987      000000
12868:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 38988              		.loc 1 12868 0
 38989 122b5 83E11F   		andl	$31, %ecx
 38990              		.loc 1 12871 0
 38991 122b8 D3E8     		shrl	%cl, %eax
 38992 122ba 89049500 		movl	%eax, RF(,%rdx,4)
 38992      000000
12872:src/vm3.c     **** PC  =  nPC;
 38993              		.loc 1 12872 0
 38994 122c1 8B050000 		movl	nPC(%rip), %eax
 38994      0000
12873:src/vm3.c     **** nPC  += 4;
12874:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 38995              		.loc 1 12874 0
 38996 122c7 8D5003   		leal	3(%rax), %edx
12873:src/vm3.c     **** nPC  += 4;
 38997              		.loc 1 12873 0
 38998 122ca 8D4804   		leal	4(%rax), %ecx
12872:src/vm3.c     **** PC  =  nPC;
 38999              		.loc 1 12872 0
 39000 122cd 89050000 		movl	%eax, PC(%rip)
 39000      0000
 39001              		.loc 1 12874 0
 39002 122d3 440FB682 		movzbl	VM_memory(%rdx), %r8d
 39002      00000000 
 39003 122db 89C2     		movl	%eax, %edx
12875:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12876:src/vm3.c     ****   if (op0 == 0x0) {
12877:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12878:src/vm3.c     ****     op0 = op0 + funct;
12879:src/vm3.c     ****   }
12880:src/vm3.c     ****     else {
12881:src/vm3.c     ****     op0 = op0 + FIX_OP;
12882:src/vm3.c     ****   }
12883:src/vm3.c     **** 
12884:src/vm3.c     **** p = array;
12885:src/vm3.c     **** p = p[op0].next_level;
12886:src/vm3.c     **** 
12887:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39004              		.loc 1 12887 0
 39005 122dd 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39005      000000
12874:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39006              		.loc 1 12874 0
 39007 122e4 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39007      000000
12873:src/vm3.c     **** nPC  += 4;
 39008              		.loc 1 12873 0
 39009 122eb 890D0000 		movl	%ecx, nPC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 1270


 39009      0000
 39010              		.loc 1 12887 0
 39011 122f1 8D4805   		leal	5(%rax), %ecx
 39012 122f4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39012      000000
12874:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39013              		.loc 1 12874 0
 39014 122fb C1E218   		sall	$24, %edx
 39015 122fe 4109D0   		orl	%edx, %r8d
 39016 12301 8D5001   		leal	1(%rax), %edx
 39017 12304 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39017      000000
 39018 1230b C1E210   		sall	$16, %edx
 39019 1230e 4109D0   		orl	%edx, %r8d
 39020 12311 8D5002   		leal	2(%rax), %edx
 39021 12314 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39021      000000
 39022 1231b C1E208   		sall	$8, %edx
 39023 1231e 4109D0   		orl	%edx, %r8d
 39024              	.LVL3762:
12875:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39025              		.loc 1 12875 0
 39026 12321 4489C6   		movl	%r8d, %esi
12877:src/vm3.c     ****     op0 = op0 + funct;
 39027              		.loc 1 12877 0
 39028 12324 4488C2   		movb	%r8b, %dl
12875:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39029              		.loc 1 12875 0
 39030 12327 C1EE1A   		shrl	$26, %esi
 39031              	.LVL3763:
12877:src/vm3.c     ****     op0 = op0 + funct;
 39032              		.loc 1 12877 0
 39033 1232a 83E23F   		andl	$63, %edx
 39034 1232d 8D7E2B   		leal	43(%rsi), %edi
 39035 12330 4084F6   		testb	%sil, %sil
 39036 12333 0F45D7   		cmovne	%edi, %edx
 39037              	.LVL3764:
 39038              		.loc 1 12887 0
 39039 12336 C1E110   		sall	$16, %ecx
 39040 12339 C1E318   		sall	$24, %ebx
 39041 1233c 09CB     		orl	%ecx, %ebx
 39042 1233e 8D4807   		leal	7(%rax), %ecx
 39043 12341 83C006   		addl	$6, %eax
 39044 12344 0FB68000 		movzbl	VM_memory(%rax), %eax
 39044      000000
12885:src/vm3.c     **** 
 39045              		.loc 1 12885 0
 39046 1234b 0FB6D2   		movzbl	%dl, %edx
 39047              		.loc 1 12887 0
 39048 1234e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39048      000000
12885:src/vm3.c     **** 
 39049              		.loc 1 12885 0
 39050 12355 48C1E204 		salq	$4, %rdx
 39051              	.LVL3765:
 39052              		.loc 1 12887 0
 39053 12359 C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1271


 39054 1235c 09CB     		orl	%ecx, %ebx
 39055 1235e 09C3     		orl	%eax, %ebx
 39056              	.LVL3766:
12888:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39057              		.loc 1 12888 0
 39058 12360 89D9     		movl	%ebx, %ecx
12889:src/vm3.c     ****   if (op1 == 0x0) {
12890:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39059              		.loc 1 12890 0
 39060 12362 88D8     		movb	%bl, %al
12888:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39061              		.loc 1 12888 0
 39062 12364 C1E91A   		shrl	$26, %ecx
 39063              	.LVL3767:
 39064              		.loc 1 12890 0
 39065 12367 83E03F   		andl	$63, %eax
 39066 1236a 8D712B   		leal	43(%rcx), %esi
 39067 1236d 84C9     		testb	%cl, %cl
 39068 1236f 0F45C6   		cmovne	%esi, %eax
 39069              	.LVL3768:
12891:src/vm3.c     ****     op1 = op1 + funct;
12892:src/vm3.c     ****   }
12893:src/vm3.c     ****     else {
12894:src/vm3.c     ****     op1 = op1 + FIX_OP;
12895:src/vm3.c     ****   }
12896:src/vm3.c     **** 
12897:src/vm3.c     **** goto *p[op1].code;
 39070              		.loc 1 12897 0
 39071 12372 0FB6C0   		movzbl	%al, %eax
 39072 12375 48C1E004 		salq	$4, %rax
 39073              	.LVL3769:
 39074 12379 48038414 		addq	58088(%rsp,%rdx), %rax
 39074      E8E20000 
 39075 12381 488B08   		movq	(%rax), %rcx
 39076 12384 E9CFE9FE 		jmp	.L269
 39076      FF
 39077              	.LVL3770:
 39078              	.L33:
12898:src/vm3.c     **** 
12899:src/vm3.c     **** 
12900:src/vm3.c     **** sllPLUSlw:
12901:src/vm3.c     **** #if INDIRECT_DEBUG
12902:src/vm3.c     **** printf("%d|sll\n",counter);
12903:src/vm3.c     **** counter++;
12904:src/vm3.c     **** #endif
12905:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
12906:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39079              		.loc 1 12906 0
 39080 12389 4489C0   		movl	%r8d, %eax
12907:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 39081              		.loc 1 12907 0
 39082 1238c 4489C2   		movl	%r8d, %edx
12905:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39083              		.loc 1 12905 0
 39084 1238f 41C1E806 		shrl	$6, %r8d
 39085              	.LVL3771:
12906:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1272


 39086              		.loc 1 12906 0
 39087 12393 C1E810   		shrl	$16, %eax
 39088              	.LVL3772:
12905:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39089              		.loc 1 12905 0
 39090 12396 4488C1   		movb	%r8b, %cl
 39091              		.loc 1 12907 0
 39092 12399 C1EA0B   		shrl	$11, %edx
 39093              	.LVL3773:
12908:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 39094              		.loc 1 12908 0
 39095 1239c 83E01F   		andl	$31, %eax
12905:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39096              		.loc 1 12905 0
 39097 1239f 83E11F   		andl	$31, %ecx
 39098              		.loc 1 12908 0
 39099 123a2 83E21F   		andl	$31, %edx
 39100 123a5 8B048500 		movl	RF(,%rax,4), %eax
 39100      000000
12909:src/vm3.c     **** PC  =  nPC;
12910:src/vm3.c     **** nPC  += 4;
 39101              		.loc 1 12910 0
 39102 123ac 83050000 		addl	$4, nPC(%rip)
 39102      000004
 39103              	.LVL3774:
12908:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 39104              		.loc 1 12908 0
 39105 123b3 D3E0     		sall	%cl, %eax
 39106 123b5 89049500 		movl	%eax, RF(,%rdx,4)
 39106      000000
12911:src/vm3.c     **** 
12912:src/vm3.c     **** #if INDIRECT_DEBUG
12913:src/vm3.c     **** printf("%d|lw\n",counter);
12914:src/vm3.c     **** counter++;
12915:src/vm3.c     **** #endif
12916:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 39107              		.loc 1 12916 0
 39108 123bc 89D8     		movl	%ebx, %eax
12917:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
12918:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
12919:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 39109              		.loc 1 12919 0
 39110 123be 0FBFD3   		movswl	%bx, %edx
12916:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39111              		.loc 1 12916 0
 39112 123c1 C1E815   		shrl	$21, %eax
12917:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39113              		.loc 1 12917 0
 39114 123c4 C1EB10   		shrl	$16, %ebx
 39115              	.LVL3775:
 39116              		.loc 1 12919 0
 39117 123c7 83E01F   		andl	$31, %eax
 39118 123ca 83E31F   		andl	$31, %ebx
 39119 123cd 03148500 		addl	RF(,%rax,4), %edx
 39119      000000
 39120              	.LVL3776:
 39121 123d4 8D4203   		leal	3(%rdx), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1273


 39122 123d7 89D1     		movl	%edx, %ecx
 39123 123d9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39123      000000
 39124 123e0 0FB68000 		movzbl	VM_memory(%rax), %eax
 39124      000000
 39125 123e7 C1E118   		sall	$24, %ecx
 39126 123ea 09C8     		orl	%ecx, %eax
 39127 123ec 8D4A01   		leal	1(%rdx), %ecx
 39128 123ef 83C202   		addl	$2, %edx
 39129 123f2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39129      000000
 39130 123f9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39130      000000
 39131 12400 C1E208   		sall	$8, %edx
 39132 12403 C1E110   		sall	$16, %ecx
 39133 12406 09C8     		orl	%ecx, %eax
 39134 12408 09D0     		orl	%edx, %eax
 39135 1240a 89049D00 		movl	%eax, RF(,%rbx,4)
 39135      000000
12920:src/vm3.c     **** PC  =  nPC;
 39136              		.loc 1 12920 0
 39137 12411 8B050000 		movl	nPC(%rip), %eax
 39137      0000
12921:src/vm3.c     **** nPC  += 4;
12922:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 39138              		.loc 1 12922 0
 39139 12417 8D5003   		leal	3(%rax), %edx
12921:src/vm3.c     **** nPC  += 4;
 39140              		.loc 1 12921 0
 39141 1241a 8D4804   		leal	4(%rax), %ecx
12920:src/vm3.c     **** PC  =  nPC;
 39142              		.loc 1 12920 0
 39143 1241d 89050000 		movl	%eax, PC(%rip)
 39143      0000
 39144              		.loc 1 12922 0
 39145 12423 440FB682 		movzbl	VM_memory(%rdx), %r8d
 39145      00000000 
 39146 1242b 89C2     		movl	%eax, %edx
12923:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
12924:src/vm3.c     ****   if (op0 == 0x0) {
12925:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
12926:src/vm3.c     ****     op0 = op0 + funct;
12927:src/vm3.c     ****   }
12928:src/vm3.c     ****     else {
12929:src/vm3.c     ****     op0 = op0 + FIX_OP;
12930:src/vm3.c     ****   }
12931:src/vm3.c     **** 
12932:src/vm3.c     **** p = array;
12933:src/vm3.c     **** p = p[op0].next_level;
12934:src/vm3.c     **** 
12935:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39147              		.loc 1 12935 0
 39148 1242d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39148      000000
12922:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39149              		.loc 1 12922 0
 39150 12434 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1274


 39150      000000
12921:src/vm3.c     **** nPC  += 4;
 39151              		.loc 1 12921 0
 39152 1243b 890D0000 		movl	%ecx, nPC(%rip)
 39152      0000
 39153              		.loc 1 12935 0
 39154 12441 8D4805   		leal	5(%rax), %ecx
 39155 12444 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39155      000000
12922:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39156              		.loc 1 12922 0
 39157 1244b C1E218   		sall	$24, %edx
 39158 1244e 4109D0   		orl	%edx, %r8d
 39159 12451 8D5001   		leal	1(%rax), %edx
 39160 12454 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39160      000000
 39161 1245b C1E210   		sall	$16, %edx
 39162 1245e 4109D0   		orl	%edx, %r8d
 39163 12461 8D5002   		leal	2(%rax), %edx
 39164 12464 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39164      000000
 39165 1246b C1E208   		sall	$8, %edx
 39166 1246e 4109D0   		orl	%edx, %r8d
 39167              	.LVL3777:
12923:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39168              		.loc 1 12923 0
 39169 12471 4489C6   		movl	%r8d, %esi
12925:src/vm3.c     ****     op0 = op0 + funct;
 39170              		.loc 1 12925 0
 39171 12474 4488C2   		movb	%r8b, %dl
12923:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39172              		.loc 1 12923 0
 39173 12477 C1EE1A   		shrl	$26, %esi
 39174              	.LVL3778:
12925:src/vm3.c     ****     op0 = op0 + funct;
 39175              		.loc 1 12925 0
 39176 1247a 83E23F   		andl	$63, %edx
 39177 1247d 8D7E2B   		leal	43(%rsi), %edi
 39178 12480 4084F6   		testb	%sil, %sil
 39179 12483 0F45D7   		cmovne	%edi, %edx
 39180              	.LVL3779:
 39181              		.loc 1 12935 0
 39182 12486 C1E110   		sall	$16, %ecx
 39183 12489 C1E318   		sall	$24, %ebx
 39184 1248c 09CB     		orl	%ecx, %ebx
 39185 1248e 8D4807   		leal	7(%rax), %ecx
 39186 12491 83C006   		addl	$6, %eax
 39187 12494 0FB68000 		movzbl	VM_memory(%rax), %eax
 39187      000000
12933:src/vm3.c     **** 
 39188              		.loc 1 12933 0
 39189 1249b 0FB6D2   		movzbl	%dl, %edx
 39190              		.loc 1 12935 0
 39191 1249e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39191      000000
12933:src/vm3.c     **** 
 39192              		.loc 1 12933 0
GAS LISTING /tmp/cc15eBE3.s 			page 1275


 39193 124a5 48C1E204 		salq	$4, %rdx
 39194              	.LVL3780:
 39195              		.loc 1 12935 0
 39196 124a9 C1E008   		sall	$8, %eax
 39197 124ac 09CB     		orl	%ecx, %ebx
 39198 124ae 09C3     		orl	%eax, %ebx
 39199              	.LVL3781:
12936:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39200              		.loc 1 12936 0
 39201 124b0 89D9     		movl	%ebx, %ecx
12937:src/vm3.c     ****   if (op1 == 0x0) {
12938:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39202              		.loc 1 12938 0
 39203 124b2 88D8     		movb	%bl, %al
12936:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39204              		.loc 1 12936 0
 39205 124b4 C1E91A   		shrl	$26, %ecx
 39206              	.LVL3782:
 39207              		.loc 1 12938 0
 39208 124b7 83E03F   		andl	$63, %eax
 39209 124ba 8D712B   		leal	43(%rcx), %esi
 39210 124bd 84C9     		testb	%cl, %cl
 39211 124bf 0F45C6   		cmovne	%esi, %eax
 39212              	.LVL3783:
12939:src/vm3.c     ****     op1 = op1 + funct;
12940:src/vm3.c     ****   }
12941:src/vm3.c     ****     else {
12942:src/vm3.c     ****     op1 = op1 + FIX_OP;
12943:src/vm3.c     ****   }
12944:src/vm3.c     **** 
12945:src/vm3.c     **** goto *p[op1].code;
 39213              		.loc 1 12945 0
 39214 124c2 0FB6C0   		movzbl	%al, %eax
 39215 124c5 48C1E004 		salq	$4, %rax
 39216              	.LVL3784:
 39217 124c9 48038414 		addq	58088(%rsp,%rdx), %rax
 39217      E8E20000 
 39218 124d1 488B08   		movq	(%rax), %rcx
 39219 124d4 E97FE8FE 		jmp	.L269
 39219      FF
 39220              	.LVL3785:
 39221              	.L170:
12946:src/vm3.c     **** 
12947:src/vm3.c     **** 
12948:src/vm3.c     **** sltiPLUSbeq:
12949:src/vm3.c     **** #if INDIRECT_DEBUG
12950:src/vm3.c     **** printf("%d|slti\n",counter);
12951:src/vm3.c     **** counter++;
12952:src/vm3.c     **** #endif
12953:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 39222              		.loc 1 12953 0
 39223 124d9 4489C2   		movl	%r8d, %edx
12954:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39224              		.loc 1 12954 0
 39225 124dc 4489C0   		movl	%r8d, %eax
12955:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
12956:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
GAS LISTING /tmp/cc15eBE3.s 			page 1276


 39226              		.loc 1 12956 0
 39227 124df 450FBFC0 		movswl	%r8w, %r8d
 39228              	.LVL3786:
12953:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39229              		.loc 1 12953 0
 39230 124e3 C1EA15   		shrl	$21, %edx
12954:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39231              		.loc 1 12954 0
 39232 124e6 C1E810   		shrl	$16, %eax
 39233              	.LVL3787:
12957:src/vm3.c     **** PC  =  nPC;
12958:src/vm3.c     **** nPC  += 4;
12959:src/vm3.c     **** 
12960:src/vm3.c     **** #if INDIRECT_DEBUG
12961:src/vm3.c     **** printf("%d|beq\n",counter);
12962:src/vm3.c     **** counter++;
12963:src/vm3.c     **** #endif
12964:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 39234              		.loc 1 12964 0
 39235 124e9 89DE     		movl	%ebx, %esi
12956:src/vm3.c     **** PC  =  nPC;
 39236              		.loc 1 12956 0
 39237 124eb 83E21F   		andl	$31, %edx
 39238 124ee 83E01F   		andl	$31, %eax
12965:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39239              		.loc 1 12965 0
 39240 124f1 89D9     		movl	%ebx, %ecx
12956:src/vm3.c     **** PC  =  nPC;
 39241              		.loc 1 12956 0
 39242 124f3 44390495 		cmpl	%r8d, RF(,%rdx,4)
 39242      00000000 
 39243 124fb 0F92C2   		setb	%dl
12964:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39244              		.loc 1 12964 0
 39245 124fe C1EE15   		shrl	$21, %esi
 39246              		.loc 1 12965 0
 39247 12501 C1E910   		shrl	$16, %ecx
12956:src/vm3.c     **** PC  =  nPC;
 39248              		.loc 1 12956 0
 39249 12504 0FB6D2   		movzbl	%dl, %edx
12966:src/vm3.c     **** if (RF[rs] == RF[rt])
 39250              		.loc 1 12966 0
 39251 12507 83E61F   		andl	$31, %esi
 39252 1250a 83E11F   		andl	$31, %ecx
12956:src/vm3.c     **** PC  =  nPC;
 39253              		.loc 1 12956 0
 39254 1250d 89148500 		movl	%edx, RF(,%rax,4)
 39254      000000
12957:src/vm3.c     **** nPC  += 4;
 39255              		.loc 1 12957 0
 39256 12514 8B050000 		movl	nPC(%rip), %eax
 39256      0000
 39257              		.loc 1 12966 0
 39258 1251a 8B3C8D00 		movl	RF(,%rcx,4), %edi
 39258      000000
 39259 12521 393CB500 		cmpl	%edi, RF(,%rsi,4)
 39259      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1277


12958:src/vm3.c     **** 
 39260              		.loc 1 12958 0
 39261 12528 8D5004   		leal	4(%rax), %edx
 39262              	.LVL3788:
 39263 1252b 448D4007 		leal	7(%rax), %r8d
 39264              	.LVL3789:
 39265 1252f 8D7805   		leal	5(%rax), %edi
 39266 12532 8D7006   		leal	6(%rax), %esi
 39267 12535 4189D1   		movl	%edx, %r9d
12967:src/vm3.c     **** {
12968:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
12969:src/vm3.c     ****   PC  =  nPC;
 39268              		.loc 1 12969 0
 39269 12538 89150000 		movl	%edx, PC(%rip)
 39269      0000
12966:src/vm3.c     **** {
 39270              		.loc 1 12966 0
 39271 1253e 0F85B600 		jne	.L1396
 39271      0000
 39272              	.LVL3790:
12970:src/vm3.c     ****   nPC  += (immediate << 2);
 39273              		.loc 1 12970 0
 39274 12544 0FBFDB   		movswl	%bx, %ebx
 39275              	.LVL3791:
12971:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 39276              		.loc 1 12971 0
 39277 12547 450FB680 		movzbl	VM_memory(%r8), %r8d
 39277      00000000 
12970:src/vm3.c     ****   nPC  += (immediate << 2);
 39278              		.loc 1 12970 0
 39279 1254f 8D049A   		leal	(%rdx,%rbx,4), %eax
 39280              		.loc 1 12971 0
 39281 12552 410FB691 		movzbl	VM_memory(%r9), %edx
 39281      00000000 
12970:src/vm3.c     ****   nPC  += (immediate << 2);
 39282              		.loc 1 12970 0
 39283 1255a 89050000 		movl	%eax, nPC(%rip)
 39283      0000
 39284              		.loc 1 12971 0
 39285 12560 C1E218   		sall	$24, %edx
 39286 12563 4109D0   		orl	%edx, %r8d
 39287 12566 0FB69700 		movzbl	VM_memory(%rdi), %edx
 39287      000000
 39288 1256d C1E210   		sall	$16, %edx
 39289 12570 4109D0   		orl	%edx, %r8d
 39290 12573 0FB69600 		movzbl	VM_memory(%rsi), %edx
 39290      000000
 39291 1257a C1E208   		sall	$8, %edx
 39292 1257d 4109D0   		orl	%edx, %r8d
 39293              	.LVL3792:
12972:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39294              		.loc 1 12972 0
 39295 12580 4489C1   		movl	%r8d, %ecx
12973:src/vm3.c     ****   if (op0 == 0x0) {
12974:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 39296              		.loc 1 12974 0
 39297 12583 4488C2   		movb	%r8b, %dl
GAS LISTING /tmp/cc15eBE3.s 			page 1278


12972:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39298              		.loc 1 12972 0
 39299 12586 C1E91A   		shrl	$26, %ecx
 39300              	.LVL3793:
 39301              		.loc 1 12974 0
 39302 12589 83E23F   		andl	$63, %edx
 39303 1258c 8D712B   		leal	43(%rcx), %esi
 39304 1258f 84C9     		testb	%cl, %cl
12975:src/vm3.c     ****     op0 = op0 + funct;
12976:src/vm3.c     ****   }
12977:src/vm3.c     ****     else {
12978:src/vm3.c     ****     op0 = op0 + FIX_OP;
12979:src/vm3.c     ****   }
12980:src/vm3.c     **** 
12981:src/vm3.c     **** p = array;
12982:src/vm3.c     **** p = p[op0].next_level;
12983:src/vm3.c     **** 
12984:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39305              		.loc 1 12984 0
 39306 12591 8D4803   		leal	3(%rax), %ecx
 39307              	.LVL3794:
 39308 12594 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39308      000000
 39309              	.LVL3795:
 39310 1259b 89C1     		movl	%eax, %ecx
12974:src/vm3.c     ****     op0 = op0 + funct;
 39311              		.loc 1 12974 0
 39312 1259d 0F45D6   		cmovne	%esi, %edx
 39313              	.LVL3796:
 39314              		.loc 1 12984 0
 39315 125a0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39315      000000
12982:src/vm3.c     **** 
 39316              		.loc 1 12982 0
 39317 125a7 0FB6D2   		movzbl	%dl, %edx
 39318 125aa 48C1E204 		salq	$4, %rdx
 39319              	.LVL3797:
 39320              		.loc 1 12984 0
 39321 125ae C1E118   		sall	$24, %ecx
 39322 125b1 09CB     		orl	%ecx, %ebx
 39323 125b3 8D4801   		leal	1(%rax), %ecx
 39324 125b6 83C002   		addl	$2, %eax
 39325 125b9 0FB68000 		movzbl	VM_memory(%rax), %eax
 39325      000000
 39326 125c0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39326      000000
 39327 125c7 C1E008   		sall	$8, %eax
 39328 125ca C1E110   		sall	$16, %ecx
 39329 125cd 09CB     		orl	%ecx, %ebx
 39330 125cf 09C3     		orl	%eax, %ebx
 39331              	.LVL3798:
12985:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39332              		.loc 1 12985 0
 39333 125d1 89D9     		movl	%ebx, %ecx
12986:src/vm3.c     ****   if (op1 == 0x0) {
12987:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39334              		.loc 1 12987 0
GAS LISTING /tmp/cc15eBE3.s 			page 1279


 39335 125d3 88D8     		movb	%bl, %al
12985:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39336              		.loc 1 12985 0
 39337 125d5 C1E91A   		shrl	$26, %ecx
 39338              	.LVL3799:
 39339              		.loc 1 12987 0
 39340 125d8 83E03F   		andl	$63, %eax
 39341 125db 8D712B   		leal	43(%rcx), %esi
 39342 125de 84C9     		testb	%cl, %cl
 39343 125e0 0F45C6   		cmovne	%esi, %eax
 39344              	.LVL3800:
12988:src/vm3.c     ****     op1 = op1 + funct;
12989:src/vm3.c     ****   }
12990:src/vm3.c     ****     else {
12991:src/vm3.c     ****     op1 = op1 + FIX_OP;
12992:src/vm3.c     ****   }
12993:src/vm3.c     **** 
12994:src/vm3.c     **** goto *p[op1].code;
 39345              		.loc 1 12994 0
 39346 125e3 0FB6C0   		movzbl	%al, %eax
 39347 125e6 48C1E004 		salq	$4, %rax
 39348              	.LVL3801:
 39349 125ea 48038414 		addq	58088(%rsp,%rdx), %rax
 39349      E8E20000 
 39350 125f2 488B08   		movq	(%rax), %rcx
 39351 125f5 E95EE7FE 		jmp	.L269
 39351      FF
 39352              	.LVL3802:
 39353              	.L1396:
12995:src/vm3.c     **** 
12996:src/vm3.c     **** 
12997:src/vm3.c     **** }
12998:src/vm3.c     **** else
12999:src/vm3.c     **** {
13000:src/vm3.c     ****   PC  =  nPC;
13001:src/vm3.c     ****   nPC  += 4;
13002:src/vm3.c     **** }
13003:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 39354              		.loc 1 13003 0
 39355 125fa 410FB691 		movzbl	VM_memory(%r9), %edx
 39355      00000000 
 39356 12602 450FB680 		movzbl	VM_memory(%r8), %r8d
 39356      00000000 
13001:src/vm3.c     **** }
 39357              		.loc 1 13001 0
 39358 1260a 8D4808   		leal	8(%rax), %ecx
13004:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13005:src/vm3.c     ****   if (op0 == 0x0) {
13006:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13007:src/vm3.c     ****     op0 = op0 + funct;
13008:src/vm3.c     ****   }
13009:src/vm3.c     ****     else {
13010:src/vm3.c     ****     op0 = op0 + FIX_OP;
13011:src/vm3.c     ****   }
13012:src/vm3.c     **** 
13013:src/vm3.c     **** p = array;
13014:src/vm3.c     **** p = p[op0].next_level;
GAS LISTING /tmp/cc15eBE3.s 			page 1280


13015:src/vm3.c     **** 
13016:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39359              		.loc 1 13016 0
 39360 1260d 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39360      000000
 39361              	.LVL3803:
13001:src/vm3.c     **** }
 39362              		.loc 1 13001 0
 39363 12614 890D0000 		movl	%ecx, nPC(%rip)
 39363      0000
 39364              		.loc 1 13016 0
 39365 1261a 8D4809   		leal	9(%rax), %ecx
13003:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39366              		.loc 1 13003 0
 39367 1261d C1E218   		sall	$24, %edx
 39368              		.loc 1 13016 0
 39369 12620 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39369      000000
13003:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39370              		.loc 1 13003 0
 39371 12627 4109D0   		orl	%edx, %r8d
 39372 1262a 0FB69700 		movzbl	VM_memory(%rdi), %edx
 39372      000000
 39373 12631 C1E210   		sall	$16, %edx
 39374 12634 4109D0   		orl	%edx, %r8d
 39375 12637 0FB69600 		movzbl	VM_memory(%rsi), %edx
 39375      000000
 39376 1263e C1E208   		sall	$8, %edx
 39377 12641 4109D0   		orl	%edx, %r8d
 39378              	.LVL3804:
13004:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39379              		.loc 1 13004 0
 39380 12644 4489C6   		movl	%r8d, %esi
13006:src/vm3.c     ****     op0 = op0 + funct;
 39381              		.loc 1 13006 0
 39382 12647 4488C2   		movb	%r8b, %dl
13004:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39383              		.loc 1 13004 0
 39384 1264a C1EE1A   		shrl	$26, %esi
 39385              	.LVL3805:
13006:src/vm3.c     ****     op0 = op0 + funct;
 39386              		.loc 1 13006 0
 39387 1264d 83E23F   		andl	$63, %edx
 39388 12650 8D7E2B   		leal	43(%rsi), %edi
 39389 12653 4084F6   		testb	%sil, %sil
 39390 12656 0F45D7   		cmovne	%edi, %edx
 39391              	.LVL3806:
 39392              		.loc 1 13016 0
 39393 12659 C1E110   		sall	$16, %ecx
 39394 1265c C1E318   		sall	$24, %ebx
 39395 1265f 09CB     		orl	%ecx, %ebx
 39396 12661 8D480B   		leal	11(%rax), %ecx
 39397 12664 83C00A   		addl	$10, %eax
 39398 12667 0FB68000 		movzbl	VM_memory(%rax), %eax
 39398      000000
13014:src/vm3.c     **** 
 39399              		.loc 1 13014 0
GAS LISTING /tmp/cc15eBE3.s 			page 1281


 39400 1266e 0FB6D2   		movzbl	%dl, %edx
 39401              		.loc 1 13016 0
 39402 12671 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39402      000000
13014:src/vm3.c     **** 
 39403              		.loc 1 13014 0
 39404 12678 48C1E204 		salq	$4, %rdx
 39405              	.LVL3807:
 39406              		.loc 1 13016 0
 39407 1267c C1E008   		sall	$8, %eax
 39408 1267f 09CB     		orl	%ecx, %ebx
 39409 12681 09C3     		orl	%eax, %ebx
 39410              	.LVL3808:
13017:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39411              		.loc 1 13017 0
 39412 12683 89D9     		movl	%ebx, %ecx
13018:src/vm3.c     ****   if (op1 == 0x0) {
13019:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39413              		.loc 1 13019 0
 39414 12685 88D8     		movb	%bl, %al
13017:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39415              		.loc 1 13017 0
 39416 12687 C1E91A   		shrl	$26, %ecx
 39417              	.LVL3809:
 39418              		.loc 1 13019 0
 39419 1268a 83E03F   		andl	$63, %eax
 39420 1268d 8D712B   		leal	43(%rcx), %esi
 39421 12690 84C9     		testb	%cl, %cl
 39422 12692 0F45C6   		cmovne	%esi, %eax
 39423              	.LVL3810:
13020:src/vm3.c     ****     op1 = op1 + funct;
13021:src/vm3.c     ****   }
13022:src/vm3.c     ****     else {
13023:src/vm3.c     ****     op1 = op1 + FIX_OP;
13024:src/vm3.c     ****   }
13025:src/vm3.c     **** 
13026:src/vm3.c     **** goto *p[op1].code;
 39424              		.loc 1 13026 0
 39425 12695 0FB6C0   		movzbl	%al, %eax
 39426 12698 48C1E004 		salq	$4, %rax
 39427              	.LVL3811:
 39428 1269c 48038414 		addq	58088(%rsp,%rdx), %rax
 39428      E8E20000 
 39429 126a4 488B08   		movq	(%rax), %rcx
 39430 126a7 E9ACE6FE 		jmp	.L269
 39430      FF
 39431              	.LVL3812:
 39432              	.L29:
13027:src/vm3.c     **** 
13028:src/vm3.c     **** 
13029:src/vm3.c     **** sllPLUSslti:
13030:src/vm3.c     **** #if INDIRECT_DEBUG
13031:src/vm3.c     **** printf("%d|sll\n",counter);
13032:src/vm3.c     **** counter++;
13033:src/vm3.c     **** #endif
13034:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
13035:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1282


 39433              		.loc 1 13035 0
 39434 126ac 4489C0   		movl	%r8d, %eax
13036:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 39435              		.loc 1 13036 0
 39436 126af 4489C2   		movl	%r8d, %edx
13034:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39437              		.loc 1 13034 0
 39438 126b2 41C1E806 		shrl	$6, %r8d
 39439              	.LVL3813:
13035:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 39440              		.loc 1 13035 0
 39441 126b6 C1E810   		shrl	$16, %eax
 39442              	.LVL3814:
13034:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39443              		.loc 1 13034 0
 39444 126b9 4488C1   		movb	%r8b, %cl
 39445              		.loc 1 13036 0
 39446 126bc C1EA0B   		shrl	$11, %edx
 39447              	.LVL3815:
13037:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 39448              		.loc 1 13037 0
 39449 126bf 83E01F   		andl	$31, %eax
13034:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39450              		.loc 1 13034 0
 39451 126c2 83E11F   		andl	$31, %ecx
 39452              		.loc 1 13037 0
 39453 126c5 83E21F   		andl	$31, %edx
 39454 126c8 8B048500 		movl	RF(,%rax,4), %eax
 39454      000000
13038:src/vm3.c     **** PC  =  nPC;
13039:src/vm3.c     **** nPC  += 4;
 39455              		.loc 1 13039 0
 39456 126cf 83050000 		addl	$4, nPC(%rip)
 39456      000004
 39457              	.LVL3816:
13037:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 39458              		.loc 1 13037 0
 39459 126d6 D3E0     		sall	%cl, %eax
 39460 126d8 89049500 		movl	%eax, RF(,%rdx,4)
 39460      000000
13040:src/vm3.c     **** 
13041:src/vm3.c     **** #if INDIRECT_DEBUG
13042:src/vm3.c     **** printf("%d|slti\n",counter);
13043:src/vm3.c     **** counter++;
13044:src/vm3.c     **** #endif
13045:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 39461              		.loc 1 13045 0
 39462 126df 89DA     		movl	%ebx, %edx
13046:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39463              		.loc 1 13046 0
 39464 126e1 89D8     		movl	%ebx, %eax
13045:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39465              		.loc 1 13045 0
 39466 126e3 C1EA15   		shrl	$21, %edx
 39467              		.loc 1 13046 0
 39468 126e6 C1E810   		shrl	$16, %eax
13047:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 1283


13048:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
 39469              		.loc 1 13048 0
 39470 126e9 0FBFDB   		movswl	%bx, %ebx
 39471              	.LVL3817:
 39472 126ec 83E21F   		andl	$31, %edx
 39473 126ef 83E01F   		andl	$31, %eax
 39474 126f2 391C9500 		cmpl	%ebx, RF(,%rdx,4)
 39474      000000
 39475 126f9 0F92C2   		setb	%dl
 39476 126fc 0FB6D2   		movzbl	%dl, %edx
 39477 126ff 89148500 		movl	%edx, RF(,%rax,4)
 39477      000000
13049:src/vm3.c     **** PC  =  nPC;
 39478              		.loc 1 13049 0
 39479 12706 8B050000 		movl	nPC(%rip), %eax
 39479      0000
13050:src/vm3.c     **** nPC  += 4;
13051:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 39480              		.loc 1 13051 0
 39481 1270c 8D5003   		leal	3(%rax), %edx
13050:src/vm3.c     **** nPC  += 4;
 39482              		.loc 1 13050 0
 39483 1270f 8D4804   		leal	4(%rax), %ecx
13049:src/vm3.c     **** PC  =  nPC;
 39484              		.loc 1 13049 0
 39485 12712 89050000 		movl	%eax, PC(%rip)
 39485      0000
 39486              		.loc 1 13051 0
 39487 12718 440FB682 		movzbl	VM_memory(%rdx), %r8d
 39487      00000000 
 39488 12720 89C2     		movl	%eax, %edx
13052:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13053:src/vm3.c     ****   if (op0 == 0x0) {
13054:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13055:src/vm3.c     ****     op0 = op0 + funct;
13056:src/vm3.c     ****   }
13057:src/vm3.c     ****     else {
13058:src/vm3.c     ****     op0 = op0 + FIX_OP;
13059:src/vm3.c     ****   }
13060:src/vm3.c     **** 
13061:src/vm3.c     **** p = array;
13062:src/vm3.c     **** p = p[op0].next_level;
13063:src/vm3.c     **** 
13064:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39489              		.loc 1 13064 0
 39490 12722 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39490      000000
 39491              	.LVL3818:
13051:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39492              		.loc 1 13051 0
 39493 12729 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39493      000000
13050:src/vm3.c     **** nPC  += 4;
 39494              		.loc 1 13050 0
 39495 12730 890D0000 		movl	%ecx, nPC(%rip)
 39495      0000
 39496              		.loc 1 13064 0
GAS LISTING /tmp/cc15eBE3.s 			page 1284


 39497 12736 8D4805   		leal	5(%rax), %ecx
 39498 12739 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39498      000000
13051:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39499              		.loc 1 13051 0
 39500 12740 C1E218   		sall	$24, %edx
 39501 12743 4109D0   		orl	%edx, %r8d
 39502 12746 8D5001   		leal	1(%rax), %edx
 39503 12749 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39503      000000
 39504 12750 C1E210   		sall	$16, %edx
 39505 12753 4109D0   		orl	%edx, %r8d
 39506 12756 8D5002   		leal	2(%rax), %edx
 39507 12759 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39507      000000
 39508 12760 C1E208   		sall	$8, %edx
 39509 12763 4109D0   		orl	%edx, %r8d
 39510              	.LVL3819:
13052:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39511              		.loc 1 13052 0
 39512 12766 4489C6   		movl	%r8d, %esi
13054:src/vm3.c     ****     op0 = op0 + funct;
 39513              		.loc 1 13054 0
 39514 12769 4488C2   		movb	%r8b, %dl
13052:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39515              		.loc 1 13052 0
 39516 1276c C1EE1A   		shrl	$26, %esi
 39517              	.LVL3820:
13054:src/vm3.c     ****     op0 = op0 + funct;
 39518              		.loc 1 13054 0
 39519 1276f 83E23F   		andl	$63, %edx
 39520 12772 8D7E2B   		leal	43(%rsi), %edi
 39521 12775 4084F6   		testb	%sil, %sil
 39522 12778 0F45D7   		cmovne	%edi, %edx
 39523              	.LVL3821:
 39524              		.loc 1 13064 0
 39525 1277b C1E110   		sall	$16, %ecx
 39526 1277e C1E318   		sall	$24, %ebx
 39527 12781 09CB     		orl	%ecx, %ebx
 39528 12783 8D4807   		leal	7(%rax), %ecx
 39529 12786 83C006   		addl	$6, %eax
 39530 12789 0FB68000 		movzbl	VM_memory(%rax), %eax
 39530      000000
13062:src/vm3.c     **** 
 39531              		.loc 1 13062 0
 39532 12790 0FB6D2   		movzbl	%dl, %edx
 39533              		.loc 1 13064 0
 39534 12793 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39534      000000
13062:src/vm3.c     **** 
 39535              		.loc 1 13062 0
 39536 1279a 48C1E204 		salq	$4, %rdx
 39537              	.LVL3822:
 39538              		.loc 1 13064 0
 39539 1279e C1E008   		sall	$8, %eax
 39540 127a1 09CB     		orl	%ecx, %ebx
 39541 127a3 09C3     		orl	%eax, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1285


 39542              	.LVL3823:
13065:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39543              		.loc 1 13065 0
 39544 127a5 89D9     		movl	%ebx, %ecx
13066:src/vm3.c     ****   if (op1 == 0x0) {
13067:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39545              		.loc 1 13067 0
 39546 127a7 88D8     		movb	%bl, %al
13065:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39547              		.loc 1 13065 0
 39548 127a9 C1E91A   		shrl	$26, %ecx
 39549              	.LVL3824:
 39550              		.loc 1 13067 0
 39551 127ac 83E03F   		andl	$63, %eax
 39552 127af 8D712B   		leal	43(%rcx), %esi
 39553 127b2 84C9     		testb	%cl, %cl
 39554 127b4 0F45C6   		cmovne	%esi, %eax
 39555              	.LVL3825:
13068:src/vm3.c     ****     op1 = op1 + funct;
13069:src/vm3.c     ****   }
13070:src/vm3.c     ****     else {
13071:src/vm3.c     ****     op1 = op1 + FIX_OP;
13072:src/vm3.c     ****   }
13073:src/vm3.c     **** 
13074:src/vm3.c     **** goto *p[op1].code;
 39556              		.loc 1 13074 0
 39557 127b7 0FB6C0   		movzbl	%al, %eax
 39558 127ba 48C1E004 		salq	$4, %rax
 39559              	.LVL3826:
 39560 127be 48038414 		addq	58088(%rsp,%rdx), %rax
 39560      E8E20000 
 39561 127c6 488B08   		movq	(%rax), %rcx
 39562 127c9 E98AE5FE 		jmp	.L269
 39562      FF
 39563              	.LVL3827:
 39564              	.L171:
13075:src/vm3.c     **** 
13076:src/vm3.c     **** 
13077:src/vm3.c     **** sltiPLUSbne:
13078:src/vm3.c     **** #if INDIRECT_DEBUG
13079:src/vm3.c     **** printf("%d|slti\n",counter);
13080:src/vm3.c     **** counter++;
13081:src/vm3.c     **** #endif
13082:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 39565              		.loc 1 13082 0
 39566 127ce 4489C2   		movl	%r8d, %edx
13083:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39567              		.loc 1 13083 0
 39568 127d1 4489C0   		movl	%r8d, %eax
13084:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13085:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
 39569              		.loc 1 13085 0
 39570 127d4 450FBFC0 		movswl	%r8w, %r8d
 39571              	.LVL3828:
13082:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39572              		.loc 1 13082 0
 39573 127d8 C1EA15   		shrl	$21, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1286


13083:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39574              		.loc 1 13083 0
 39575 127db C1E810   		shrl	$16, %eax
 39576              	.LVL3829:
13086:src/vm3.c     **** PC  =  nPC;
13087:src/vm3.c     **** nPC  += 4;
13088:src/vm3.c     **** 
13089:src/vm3.c     **** #if INDIRECT_DEBUG
13090:src/vm3.c     **** printf("%d|bne\n",counter);
13091:src/vm3.c     **** counter++;
13092:src/vm3.c     **** #endif
13093:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 39577              		.loc 1 13093 0
 39578 127de 89DE     		movl	%ebx, %esi
13085:src/vm3.c     **** PC  =  nPC;
 39579              		.loc 1 13085 0
 39580 127e0 83E21F   		andl	$31, %edx
 39581 127e3 83E01F   		andl	$31, %eax
13094:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39582              		.loc 1 13094 0
 39583 127e6 89D9     		movl	%ebx, %ecx
13085:src/vm3.c     **** PC  =  nPC;
 39584              		.loc 1 13085 0
 39585 127e8 44390495 		cmpl	%r8d, RF(,%rdx,4)
 39585      00000000 
 39586 127f0 0F92C2   		setb	%dl
13093:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39587              		.loc 1 13093 0
 39588 127f3 C1EE15   		shrl	$21, %esi
 39589              		.loc 1 13094 0
 39590 127f6 C1E910   		shrl	$16, %ecx
13085:src/vm3.c     **** PC  =  nPC;
 39591              		.loc 1 13085 0
 39592 127f9 0FB6D2   		movzbl	%dl, %edx
13095:src/vm3.c     **** if (RF[rs] != RF[rt])
 39593              		.loc 1 13095 0
 39594 127fc 83E61F   		andl	$31, %esi
 39595 127ff 83E11F   		andl	$31, %ecx
13085:src/vm3.c     **** PC  =  nPC;
 39596              		.loc 1 13085 0
 39597 12802 89148500 		movl	%edx, RF(,%rax,4)
 39597      000000
13086:src/vm3.c     **** nPC  += 4;
 39598              		.loc 1 13086 0
 39599 12809 8B050000 		movl	nPC(%rip), %eax
 39599      0000
 39600              		.loc 1 13095 0
 39601 1280f 8B3C8D00 		movl	RF(,%rcx,4), %edi
 39601      000000
 39602 12816 393CB500 		cmpl	%edi, RF(,%rsi,4)
 39602      000000
13087:src/vm3.c     **** 
 39603              		.loc 1 13087 0
 39604 1281d 8D5004   		leal	4(%rax), %edx
 39605              	.LVL3830:
 39606 12820 448D4007 		leal	7(%rax), %r8d
 39607              	.LVL3831:
GAS LISTING /tmp/cc15eBE3.s 			page 1287


 39608 12824 8D7805   		leal	5(%rax), %edi
 39609 12827 8D7006   		leal	6(%rax), %esi
 39610 1282a 4189D1   		movl	%edx, %r9d
13096:src/vm3.c     **** {
13097:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
13098:src/vm3.c     ****   PC  =  nPC;
 39611              		.loc 1 13098 0
 39612 1282d 89150000 		movl	%edx, PC(%rip)
 39612      0000
13095:src/vm3.c     **** {
 39613              		.loc 1 13095 0
 39614 12833 0F84B600 		je	.L1409
 39614      0000
 39615              	.LVL3832:
13099:src/vm3.c     ****   nPC  += (immediate << 2);
 39616              		.loc 1 13099 0
 39617 12839 0FBFDB   		movswl	%bx, %ebx
 39618              	.LVL3833:
13100:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 39619              		.loc 1 13100 0
 39620 1283c 450FB680 		movzbl	VM_memory(%r8), %r8d
 39620      00000000 
13099:src/vm3.c     ****   nPC  += (immediate << 2);
 39621              		.loc 1 13099 0
 39622 12844 8D049A   		leal	(%rdx,%rbx,4), %eax
 39623              		.loc 1 13100 0
 39624 12847 410FB691 		movzbl	VM_memory(%r9), %edx
 39624      00000000 
13099:src/vm3.c     ****   nPC  += (immediate << 2);
 39625              		.loc 1 13099 0
 39626 1284f 89050000 		movl	%eax, nPC(%rip)
 39626      0000
 39627              		.loc 1 13100 0
 39628 12855 C1E218   		sall	$24, %edx
 39629 12858 4109D0   		orl	%edx, %r8d
 39630 1285b 0FB69700 		movzbl	VM_memory(%rdi), %edx
 39630      000000
 39631 12862 C1E210   		sall	$16, %edx
 39632 12865 4109D0   		orl	%edx, %r8d
 39633 12868 0FB69600 		movzbl	VM_memory(%rsi), %edx
 39633      000000
 39634 1286f C1E208   		sall	$8, %edx
 39635 12872 4109D0   		orl	%edx, %r8d
 39636              	.LVL3834:
13101:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39637              		.loc 1 13101 0
 39638 12875 4489C1   		movl	%r8d, %ecx
13102:src/vm3.c     ****   if (op0 == 0x0) {
13103:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 39639              		.loc 1 13103 0
 39640 12878 4488C2   		movb	%r8b, %dl
13101:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39641              		.loc 1 13101 0
 39642 1287b C1E91A   		shrl	$26, %ecx
 39643              	.LVL3835:
 39644              		.loc 1 13103 0
 39645 1287e 83E23F   		andl	$63, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1288


 39646 12881 8D712B   		leal	43(%rcx), %esi
 39647 12884 84C9     		testb	%cl, %cl
13104:src/vm3.c     ****     op0 = op0 + funct;
13105:src/vm3.c     ****   }
13106:src/vm3.c     ****     else {
13107:src/vm3.c     ****     op0 = op0 + FIX_OP;
13108:src/vm3.c     ****   }
13109:src/vm3.c     **** 
13110:src/vm3.c     **** p = array;
13111:src/vm3.c     **** p = p[op0].next_level;
13112:src/vm3.c     **** 
13113:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39648              		.loc 1 13113 0
 39649 12886 8D4803   		leal	3(%rax), %ecx
 39650              	.LVL3836:
 39651 12889 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39651      000000
 39652              	.LVL3837:
 39653 12890 89C1     		movl	%eax, %ecx
13103:src/vm3.c     ****     op0 = op0 + funct;
 39654              		.loc 1 13103 0
 39655 12892 0F45D6   		cmovne	%esi, %edx
 39656              	.LVL3838:
 39657              		.loc 1 13113 0
 39658 12895 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39658      000000
13111:src/vm3.c     **** 
 39659              		.loc 1 13111 0
 39660 1289c 0FB6D2   		movzbl	%dl, %edx
 39661 1289f 48C1E204 		salq	$4, %rdx
 39662              	.LVL3839:
 39663              		.loc 1 13113 0
 39664 128a3 C1E118   		sall	$24, %ecx
 39665 128a6 09CB     		orl	%ecx, %ebx
 39666 128a8 8D4801   		leal	1(%rax), %ecx
 39667 128ab 83C002   		addl	$2, %eax
 39668 128ae 0FB68000 		movzbl	VM_memory(%rax), %eax
 39668      000000
 39669 128b5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39669      000000
 39670 128bc C1E008   		sall	$8, %eax
 39671 128bf C1E110   		sall	$16, %ecx
 39672 128c2 09CB     		orl	%ecx, %ebx
 39673 128c4 09C3     		orl	%eax, %ebx
 39674              	.LVL3840:
13114:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39675              		.loc 1 13114 0
 39676 128c6 89D9     		movl	%ebx, %ecx
13115:src/vm3.c     ****   if (op1 == 0x0) {
13116:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39677              		.loc 1 13116 0
 39678 128c8 88D8     		movb	%bl, %al
13114:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39679              		.loc 1 13114 0
 39680 128ca C1E91A   		shrl	$26, %ecx
 39681              	.LVL3841:
 39682              		.loc 1 13116 0
GAS LISTING /tmp/cc15eBE3.s 			page 1289


 39683 128cd 83E03F   		andl	$63, %eax
 39684 128d0 8D712B   		leal	43(%rcx), %esi
 39685 128d3 84C9     		testb	%cl, %cl
 39686 128d5 0F45C6   		cmovne	%esi, %eax
 39687              	.LVL3842:
13117:src/vm3.c     ****     op1 = op1 + funct;
13118:src/vm3.c     ****   }
13119:src/vm3.c     ****     else {
13120:src/vm3.c     ****     op1 = op1 + FIX_OP;
13121:src/vm3.c     ****   }
13122:src/vm3.c     **** 
13123:src/vm3.c     **** goto *p[op1].code;
 39688              		.loc 1 13123 0
 39689 128d8 0FB6C0   		movzbl	%al, %eax
 39690 128db 48C1E004 		salq	$4, %rax
 39691              	.LVL3843:
 39692 128df 48038414 		addq	58088(%rsp,%rdx), %rax
 39692      E8E20000 
 39693 128e7 488B08   		movq	(%rax), %rcx
 39694 128ea E969E4FE 		jmp	.L269
 39694      FF
 39695              	.LVL3844:
 39696              	.L1409:
13124:src/vm3.c     **** 
13125:src/vm3.c     **** 
13126:src/vm3.c     **** }
13127:src/vm3.c     **** else
13128:src/vm3.c     **** {
13129:src/vm3.c     ****   PC  =  nPC;
13130:src/vm3.c     ****   nPC  += 4;
13131:src/vm3.c     **** }
13132:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 39697              		.loc 1 13132 0
 39698 128ef 410FB691 		movzbl	VM_memory(%r9), %edx
 39698      00000000 
 39699 128f7 450FB680 		movzbl	VM_memory(%r8), %r8d
 39699      00000000 
13130:src/vm3.c     **** }
 39700              		.loc 1 13130 0
 39701 128ff 8D4808   		leal	8(%rax), %ecx
13133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13134:src/vm3.c     ****   if (op0 == 0x0) {
13135:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13136:src/vm3.c     ****     op0 = op0 + funct;
13137:src/vm3.c     ****   }
13138:src/vm3.c     ****     else {
13139:src/vm3.c     ****     op0 = op0 + FIX_OP;
13140:src/vm3.c     ****   }
13141:src/vm3.c     **** 
13142:src/vm3.c     **** p = array;
13143:src/vm3.c     **** p = p[op0].next_level;
13144:src/vm3.c     **** 
13145:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39702              		.loc 1 13145 0
 39703 12902 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39703      000000
 39704              	.LVL3845:
GAS LISTING /tmp/cc15eBE3.s 			page 1290


13130:src/vm3.c     **** }
 39705              		.loc 1 13130 0
 39706 12909 890D0000 		movl	%ecx, nPC(%rip)
 39706      0000
 39707              		.loc 1 13145 0
 39708 1290f 8D4809   		leal	9(%rax), %ecx
13132:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39709              		.loc 1 13132 0
 39710 12912 C1E218   		sall	$24, %edx
 39711              		.loc 1 13145 0
 39712 12915 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39712      000000
13132:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39713              		.loc 1 13132 0
 39714 1291c 4109D0   		orl	%edx, %r8d
 39715 1291f 0FB69700 		movzbl	VM_memory(%rdi), %edx
 39715      000000
 39716 12926 C1E210   		sall	$16, %edx
 39717 12929 4109D0   		orl	%edx, %r8d
 39718 1292c 0FB69600 		movzbl	VM_memory(%rsi), %edx
 39718      000000
 39719 12933 C1E208   		sall	$8, %edx
 39720 12936 4109D0   		orl	%edx, %r8d
 39721              	.LVL3846:
13133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39722              		.loc 1 13133 0
 39723 12939 4489C6   		movl	%r8d, %esi
13135:src/vm3.c     ****     op0 = op0 + funct;
 39724              		.loc 1 13135 0
 39725 1293c 4488C2   		movb	%r8b, %dl
13133:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39726              		.loc 1 13133 0
 39727 1293f C1EE1A   		shrl	$26, %esi
 39728              	.LVL3847:
13135:src/vm3.c     ****     op0 = op0 + funct;
 39729              		.loc 1 13135 0
 39730 12942 83E23F   		andl	$63, %edx
 39731 12945 8D7E2B   		leal	43(%rsi), %edi
 39732 12948 4084F6   		testb	%sil, %sil
 39733 1294b 0F45D7   		cmovne	%edi, %edx
 39734              	.LVL3848:
 39735              		.loc 1 13145 0
 39736 1294e C1E110   		sall	$16, %ecx
 39737 12951 C1E318   		sall	$24, %ebx
 39738 12954 09CB     		orl	%ecx, %ebx
 39739 12956 8D480B   		leal	11(%rax), %ecx
 39740 12959 83C00A   		addl	$10, %eax
 39741 1295c 0FB68000 		movzbl	VM_memory(%rax), %eax
 39741      000000
13143:src/vm3.c     **** 
 39742              		.loc 1 13143 0
 39743 12963 0FB6D2   		movzbl	%dl, %edx
 39744              		.loc 1 13145 0
 39745 12966 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39745      000000
13143:src/vm3.c     **** 
 39746              		.loc 1 13143 0
GAS LISTING /tmp/cc15eBE3.s 			page 1291


 39747 1296d 48C1E204 		salq	$4, %rdx
 39748              	.LVL3849:
 39749              		.loc 1 13145 0
 39750 12971 C1E008   		sall	$8, %eax
 39751 12974 09CB     		orl	%ecx, %ebx
 39752 12976 09C3     		orl	%eax, %ebx
 39753              	.LVL3850:
13146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39754              		.loc 1 13146 0
 39755 12978 89D9     		movl	%ebx, %ecx
13147:src/vm3.c     ****   if (op1 == 0x0) {
13148:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39756              		.loc 1 13148 0
 39757 1297a 88D8     		movb	%bl, %al
13146:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39758              		.loc 1 13146 0
 39759 1297c C1E91A   		shrl	$26, %ecx
 39760              	.LVL3851:
 39761              		.loc 1 13148 0
 39762 1297f 83E03F   		andl	$63, %eax
 39763 12982 8D712B   		leal	43(%rcx), %esi
 39764 12985 84C9     		testb	%cl, %cl
 39765 12987 0F45C6   		cmovne	%esi, %eax
 39766              	.LVL3852:
13149:src/vm3.c     ****     op1 = op1 + funct;
13150:src/vm3.c     ****   }
13151:src/vm3.c     ****     else {
13152:src/vm3.c     ****     op1 = op1 + FIX_OP;
13153:src/vm3.c     ****   }
13154:src/vm3.c     **** 
13155:src/vm3.c     **** goto *p[op1].code;
 39767              		.loc 1 13155 0
 39768 1298a 0FB6C0   		movzbl	%al, %eax
 39769 1298d 48C1E004 		salq	$4, %rax
 39770              	.LVL3853:
 39771 12991 48038414 		addq	58088(%rsp,%rdx), %rax
 39771      E8E20000 
 39772 12999 488B08   		movq	(%rax), %rcx
 39773 1299c E9B7E3FE 		jmp	.L269
 39773      FF
 39774              	.LVL3854:
 39775              	.L5:
13156:src/vm3.c     **** 
13157:src/vm3.c     **** 
13158:src/vm3.c     **** luiPLUSori:
13159:src/vm3.c     **** #if INDIRECT_DEBUG
13160:src/vm3.c     **** printf("%d|lui\n",counter);
13161:src/vm3.c     **** counter++;
13162:src/vm3.c     **** #endif
13163:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
13164:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39776              		.loc 1 13164 0
 39777 129a1 4489C0   		movl	%r8d, %eax
13165:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13166:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
13167:src/vm3.c     **** PC  =  nPC;
13168:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1292


13169:src/vm3.c     **** 
13170:src/vm3.c     **** #if INDIRECT_DEBUG
13171:src/vm3.c     **** printf("%d|ori\n",counter);
13172:src/vm3.c     **** counter++;
13173:src/vm3.c     **** #endif
13174:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 39778              		.loc 1 13174 0
 39779 129a4 89DA     		movl	%ebx, %edx
13166:src/vm3.c     **** PC  =  nPC;
 39780              		.loc 1 13166 0
 39781 129a6 41C1E010 		sall	$16, %r8d
 39782              	.LVL3855:
13164:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 39783              		.loc 1 13164 0
 39784 129aa C1E810   		shrl	$16, %eax
 39785              	.LVL3856:
 39786              		.loc 1 13174 0
 39787 129ad C1EA15   		shrl	$21, %edx
13168:src/vm3.c     **** 
 39788              		.loc 1 13168 0
 39789 129b0 83050000 		addl	$4, nPC(%rip)
 39789      000004
 39790              	.LVL3857:
13166:src/vm3.c     **** PC  =  nPC;
 39791              		.loc 1 13166 0
 39792 129b7 83E01F   		andl	$31, %eax
13175:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13176:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13177:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
 39793              		.loc 1 13177 0
 39794 129ba 83E21F   		andl	$31, %edx
13166:src/vm3.c     **** PC  =  nPC;
 39795              		.loc 1 13166 0
 39796 129bd 44890485 		movl	%r8d, RF(,%rax,4)
 39796      00000000 
13175:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39797              		.loc 1 13175 0
 39798 129c5 89D8     		movl	%ebx, %eax
 39799              		.loc 1 13177 0
 39800 129c7 0FBFDB   		movswl	%bx, %ebx
 39801              	.LVL3858:
 39802 129ca 0B1C9500 		orl	RF(,%rdx,4), %ebx
 39802      000000
 39803              	.LVL3859:
13175:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39804              		.loc 1 13175 0
 39805 129d1 C1E810   		shrl	$16, %eax
 39806              	.LVL3860:
 39807              		.loc 1 13177 0
 39808 129d4 83E01F   		andl	$31, %eax
 39809 129d7 891C8500 		movl	%ebx, RF(,%rax,4)
 39809      000000
13178:src/vm3.c     **** PC  =  nPC;
 39810              		.loc 1 13178 0
 39811 129de 8B050000 		movl	nPC(%rip), %eax
 39811      0000
13179:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1293


13180:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 39812              		.loc 1 13180 0
 39813 129e4 8D5003   		leal	3(%rax), %edx
13179:src/vm3.c     **** nPC  += 4;
 39814              		.loc 1 13179 0
 39815 129e7 8D4804   		leal	4(%rax), %ecx
13178:src/vm3.c     **** PC  =  nPC;
 39816              		.loc 1 13178 0
 39817 129ea 89050000 		movl	%eax, PC(%rip)
 39817      0000
 39818              		.loc 1 13180 0
 39819 129f0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 39819      00000000 
 39820 129f8 89C2     		movl	%eax, %edx
13181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13182:src/vm3.c     ****   if (op0 == 0x0) {
13183:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13184:src/vm3.c     ****     op0 = op0 + funct;
13185:src/vm3.c     ****   }
13186:src/vm3.c     ****     else {
13187:src/vm3.c     ****     op0 = op0 + FIX_OP;
13188:src/vm3.c     ****   }
13189:src/vm3.c     **** 
13190:src/vm3.c     **** p = array;
13191:src/vm3.c     **** p = p[op0].next_level;
13192:src/vm3.c     **** 
13193:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39821              		.loc 1 13193 0
 39822 129fa 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39822      000000
13180:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39823              		.loc 1 13180 0
 39824 12a01 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39824      000000
13179:src/vm3.c     **** nPC  += 4;
 39825              		.loc 1 13179 0
 39826 12a08 890D0000 		movl	%ecx, nPC(%rip)
 39826      0000
 39827              		.loc 1 13193 0
 39828 12a0e 8D4805   		leal	5(%rax), %ecx
 39829 12a11 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39829      000000
13180:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39830              		.loc 1 13180 0
 39831 12a18 C1E218   		sall	$24, %edx
 39832 12a1b 4109D0   		orl	%edx, %r8d
 39833 12a1e 8D5001   		leal	1(%rax), %edx
 39834 12a21 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39834      000000
 39835 12a28 C1E210   		sall	$16, %edx
 39836 12a2b 4109D0   		orl	%edx, %r8d
 39837 12a2e 8D5002   		leal	2(%rax), %edx
 39838 12a31 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39838      000000
 39839 12a38 C1E208   		sall	$8, %edx
 39840 12a3b 4109D0   		orl	%edx, %r8d
 39841              	.LVL3861:
GAS LISTING /tmp/cc15eBE3.s 			page 1294


13181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39842              		.loc 1 13181 0
 39843 12a3e 4489C6   		movl	%r8d, %esi
13183:src/vm3.c     ****     op0 = op0 + funct;
 39844              		.loc 1 13183 0
 39845 12a41 4488C2   		movb	%r8b, %dl
13181:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39846              		.loc 1 13181 0
 39847 12a44 C1EE1A   		shrl	$26, %esi
 39848              	.LVL3862:
13183:src/vm3.c     ****     op0 = op0 + funct;
 39849              		.loc 1 13183 0
 39850 12a47 83E23F   		andl	$63, %edx
 39851 12a4a 8D7E2B   		leal	43(%rsi), %edi
 39852 12a4d 4084F6   		testb	%sil, %sil
 39853 12a50 0F45D7   		cmovne	%edi, %edx
 39854              	.LVL3863:
 39855              		.loc 1 13193 0
 39856 12a53 C1E110   		sall	$16, %ecx
 39857 12a56 C1E318   		sall	$24, %ebx
 39858 12a59 09CB     		orl	%ecx, %ebx
 39859 12a5b 8D4807   		leal	7(%rax), %ecx
 39860 12a5e 83C006   		addl	$6, %eax
 39861 12a61 0FB68000 		movzbl	VM_memory(%rax), %eax
 39861      000000
13191:src/vm3.c     **** 
 39862              		.loc 1 13191 0
 39863 12a68 0FB6D2   		movzbl	%dl, %edx
 39864              		.loc 1 13193 0
 39865 12a6b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39865      000000
13191:src/vm3.c     **** 
 39866              		.loc 1 13191 0
 39867 12a72 48C1E204 		salq	$4, %rdx
 39868              	.LVL3864:
 39869              		.loc 1 13193 0
 39870 12a76 C1E008   		sall	$8, %eax
 39871 12a79 09CB     		orl	%ecx, %ebx
 39872 12a7b 09C3     		orl	%eax, %ebx
 39873              	.LVL3865:
13194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39874              		.loc 1 13194 0
 39875 12a7d 89D9     		movl	%ebx, %ecx
13195:src/vm3.c     ****   if (op1 == 0x0) {
13196:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 39876              		.loc 1 13196 0
 39877 12a7f 88D8     		movb	%bl, %al
13194:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 39878              		.loc 1 13194 0
 39879 12a81 C1E91A   		shrl	$26, %ecx
 39880              	.LVL3866:
 39881              		.loc 1 13196 0
 39882 12a84 83E03F   		andl	$63, %eax
 39883 12a87 8D712B   		leal	43(%rcx), %esi
 39884 12a8a 84C9     		testb	%cl, %cl
 39885 12a8c 0F45C6   		cmovne	%esi, %eax
 39886              	.LVL3867:
GAS LISTING /tmp/cc15eBE3.s 			page 1295


13197:src/vm3.c     ****     op1 = op1 + funct;
13198:src/vm3.c     ****   }
13199:src/vm3.c     ****     else {
13200:src/vm3.c     ****     op1 = op1 + FIX_OP;
13201:src/vm3.c     ****   }
13202:src/vm3.c     **** 
13203:src/vm3.c     **** goto *p[op1].code;
 39887              		.loc 1 13203 0
 39888 12a8f 0FB6C0   		movzbl	%al, %eax
 39889 12a92 48C1E004 		salq	$4, %rax
 39890              	.LVL3868:
 39891 12a96 48038414 		addq	58088(%rsp,%rdx), %rax
 39891      E8E20000 
 39892 12a9e 488B08   		movq	(%rax), %rcx
 39893 12aa1 E9B2E2FE 		jmp	.L269
 39893      FF
 39894              	.LVL3869:
 39895              	.L175:
13204:src/vm3.c     **** 
13205:src/vm3.c     **** 
13206:src/vm3.c     **** lbuPLUSxor:
13207:src/vm3.c     **** #if INDIRECT_DEBUG
13208:src/vm3.c     **** printf("%d|lbu\n",counter);
13209:src/vm3.c     **** counter++;
13210:src/vm3.c     **** #endif
13211:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 39896              		.loc 1 13211 0
 39897 12aa6 4489C2   		movl	%r8d, %edx
13212:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39898              		.loc 1 13212 0
 39899 12aa9 4489C0   		movl	%r8d, %eax
13213:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13214:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 39900              		.loc 1 13214 0
 39901 12aac 450FBFC0 		movswl	%r8w, %r8d
 39902              	.LVL3870:
13211:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39903              		.loc 1 13211 0
 39904 12ab0 C1EA15   		shrl	$21, %edx
13212:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 39905              		.loc 1 13212 0
 39906 12ab3 C1E810   		shrl	$16, %eax
 39907              	.LVL3871:
13215:src/vm3.c     **** PC  =  nPC;
13216:src/vm3.c     **** nPC  += 4;
 39908              		.loc 1 13216 0
 39909 12ab6 83050000 		addl	$4, nPC(%rip)
 39909      000004
 39910              	.LVL3872:
13214:src/vm3.c     **** PC  =  nPC;
 39911              		.loc 1 13214 0
 39912 12abd 83E21F   		andl	$31, %edx
 39913 12ac0 83E01F   		andl	$31, %eax
 39914 12ac3 44030495 		addl	RF(,%rdx,4), %r8d
 39914      00000000 
 39915              	.LVL3873:
 39916 12acb 410FB690 		movzbl	VM_memory(%r8), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1296


 39916      00000000 
 39917 12ad3 89148500 		movl	%edx, RF(,%rax,4)
 39917      000000
13217:src/vm3.c     **** 
13218:src/vm3.c     **** #if INDIRECT_DEBUG
13219:src/vm3.c     **** printf("%d|xor\n",counter);
13220:src/vm3.c     **** counter++;
13221:src/vm3.c     **** #endif
13222:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
13223:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39918              		.loc 1 13223 0
 39919 12ada 89D8     		movl	%ebx, %eax
13224:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 39920              		.loc 1 13224 0
 39921 12adc 89DA     		movl	%ebx, %edx
13223:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 39922              		.loc 1 13223 0
 39923 12ade C1E810   		shrl	$16, %eax
13222:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 39924              		.loc 1 13222 0
 39925 12ae1 C1EB15   		shrl	$21, %ebx
 39926              	.LVL3874:
 39927              		.loc 1 13224 0
 39928 12ae4 C1EA0B   		shrl	$11, %edx
 39929              	.LVL3875:
13225:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 39930              		.loc 1 13225 0
 39931 12ae7 83E31F   		andl	$31, %ebx
 39932 12aea 83E01F   		andl	$31, %eax
 39933 12aed 83E21F   		andl	$31, %edx
 39934 12af0 8B048500 		movl	RF(,%rax,4), %eax
 39934      000000
 39935 12af7 33049D00 		xorl	RF(,%rbx,4), %eax
 39935      000000
 39936 12afe 89049500 		movl	%eax, RF(,%rdx,4)
 39936      000000
13226:src/vm3.c     **** PC  =  nPC;
 39937              		.loc 1 13226 0
 39938 12b05 8B050000 		movl	nPC(%rip), %eax
 39938      0000
13227:src/vm3.c     **** nPC  += 4;
13228:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 39939              		.loc 1 13228 0
 39940 12b0b 8D5003   		leal	3(%rax), %edx
13227:src/vm3.c     **** nPC  += 4;
 39941              		.loc 1 13227 0
 39942 12b0e 8D4804   		leal	4(%rax), %ecx
13226:src/vm3.c     **** PC  =  nPC;
 39943              		.loc 1 13226 0
 39944 12b11 89050000 		movl	%eax, PC(%rip)
 39944      0000
 39945              		.loc 1 13228 0
 39946 12b17 440FB682 		movzbl	VM_memory(%rdx), %r8d
 39946      00000000 
 39947 12b1f 89C2     		movl	%eax, %edx
13229:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13230:src/vm3.c     ****   if (op0 == 0x0) {
GAS LISTING /tmp/cc15eBE3.s 			page 1297


13231:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13232:src/vm3.c     ****     op0 = op0 + funct;
13233:src/vm3.c     ****   }
13234:src/vm3.c     ****     else {
13235:src/vm3.c     ****     op0 = op0 + FIX_OP;
13236:src/vm3.c     ****   }
13237:src/vm3.c     **** 
13238:src/vm3.c     **** p = array;
13239:src/vm3.c     **** p = p[op0].next_level;
13240:src/vm3.c     **** 
13241:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 39948              		.loc 1 13241 0
 39949 12b21 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 39949      000000
13228:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39950              		.loc 1 13228 0
 39951 12b28 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39951      000000
13227:src/vm3.c     **** nPC  += 4;
 39952              		.loc 1 13227 0
 39953 12b2f 890D0000 		movl	%ecx, nPC(%rip)
 39953      0000
 39954              		.loc 1 13241 0
 39955 12b35 8D4805   		leal	5(%rax), %ecx
 39956 12b38 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39956      000000
13228:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39957              		.loc 1 13228 0
 39958 12b3f C1E218   		sall	$24, %edx
 39959 12b42 4109D0   		orl	%edx, %r8d
 39960 12b45 8D5001   		leal	1(%rax), %edx
 39961 12b48 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39961      000000
 39962 12b4f C1E210   		sall	$16, %edx
 39963 12b52 4109D0   		orl	%edx, %r8d
 39964 12b55 8D5002   		leal	2(%rax), %edx
 39965 12b58 0FB69200 		movzbl	VM_memory(%rdx), %edx
 39965      000000
 39966 12b5f C1E208   		sall	$8, %edx
 39967 12b62 4109D0   		orl	%edx, %r8d
 39968              	.LVL3876:
13229:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39969              		.loc 1 13229 0
 39970 12b65 4489C6   		movl	%r8d, %esi
13231:src/vm3.c     ****     op0 = op0 + funct;
 39971              		.loc 1 13231 0
 39972 12b68 4488C2   		movb	%r8b, %dl
13229:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 39973              		.loc 1 13229 0
 39974 12b6b C1EE1A   		shrl	$26, %esi
 39975              	.LVL3877:
13231:src/vm3.c     ****     op0 = op0 + funct;
 39976              		.loc 1 13231 0
 39977 12b6e 83E23F   		andl	$63, %edx
 39978 12b71 8D7E2B   		leal	43(%rsi), %edi
 39979 12b74 4084F6   		testb	%sil, %sil
 39980 12b77 0F45D7   		cmovne	%edi, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1298


 39981              	.LVL3878:
 39982              		.loc 1 13241 0
 39983 12b7a C1E110   		sall	$16, %ecx
 39984 12b7d C1E318   		sall	$24, %ebx
 39985 12b80 09CB     		orl	%ecx, %ebx
 39986 12b82 8D4807   		leal	7(%rax), %ecx
 39987 12b85 83C006   		addl	$6, %eax
 39988 12b88 0FB68000 		movzbl	VM_memory(%rax), %eax
 39988      000000
13239:src/vm3.c     **** 
 39989              		.loc 1 13239 0
 39990 12b8f 0FB6D2   		movzbl	%dl, %edx
 39991              		.loc 1 13241 0
 39992 12b92 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 39992      000000
13239:src/vm3.c     **** 
 39993              		.loc 1 13239 0
 39994 12b99 48C1E204 		salq	$4, %rdx
 39995              	.LVL3879:
 39996              		.loc 1 13241 0
 39997 12b9d C1E008   		sall	$8, %eax
 39998 12ba0 09CB     		orl	%ecx, %ebx
 39999 12ba2 09C3     		orl	%eax, %ebx
 40000              	.LVL3880:
13242:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40001              		.loc 1 13242 0
 40002 12ba4 89D9     		movl	%ebx, %ecx
13243:src/vm3.c     ****   if (op1 == 0x0) {
13244:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40003              		.loc 1 13244 0
 40004 12ba6 88D8     		movb	%bl, %al
13242:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40005              		.loc 1 13242 0
 40006 12ba8 C1E91A   		shrl	$26, %ecx
 40007              	.LVL3881:
 40008              		.loc 1 13244 0
 40009 12bab 83E03F   		andl	$63, %eax
 40010 12bae 8D712B   		leal	43(%rcx), %esi
 40011 12bb1 84C9     		testb	%cl, %cl
 40012 12bb3 0F45C6   		cmovne	%esi, %eax
 40013              	.LVL3882:
13245:src/vm3.c     ****     op1 = op1 + funct;
13246:src/vm3.c     ****   }
13247:src/vm3.c     ****     else {
13248:src/vm3.c     ****     op1 = op1 + FIX_OP;
13249:src/vm3.c     ****   }
13250:src/vm3.c     **** 
13251:src/vm3.c     **** goto *p[op1].code;
 40014              		.loc 1 13251 0
 40015 12bb6 0FB6C0   		movzbl	%al, %eax
 40016 12bb9 48C1E004 		salq	$4, %rax
 40017              	.LVL3883:
 40018 12bbd 48038414 		addq	58088(%rsp,%rdx), %rax
 40018      E8E20000 
 40019 12bc5 488B08   		movq	(%rax), %rcx
 40020 12bc8 E98BE1FE 		jmp	.L269
 40020      FF
GAS LISTING /tmp/cc15eBE3.s 			page 1299


 40021              	.LVL3884:
 40022              	.L4:
13252:src/vm3.c     **** 
13253:src/vm3.c     **** 
13254:src/vm3.c     **** luiPLUSaddiu:
13255:src/vm3.c     **** #if INDIRECT_DEBUG
13256:src/vm3.c     **** printf("%d|lui\n",counter);
13257:src/vm3.c     **** counter++;
13258:src/vm3.c     **** #endif
13259:src/vm3.c     **** // NOTHING IMPLEMENTED, COPIED FROM BELOW
13260:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40023              		.loc 1 13260 0
 40024 12bcd 4489C0   		movl	%r8d, %eax
13261:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13262:src/vm3.c     **** RF[rt] = ((uint32_t)immediate) << 16;
13263:src/vm3.c     **** PC  =  nPC;
13264:src/vm3.c     **** nPC  += 4;
13265:src/vm3.c     **** 
13266:src/vm3.c     **** #if INDIRECT_DEBUG
13267:src/vm3.c     **** printf("%d|addiu\n",counter);
13268:src/vm3.c     **** counter++;
13269:src/vm3.c     **** #endif
13270:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 40025              		.loc 1 13270 0
 40026 12bd0 89DA     		movl	%ebx, %edx
13262:src/vm3.c     **** PC  =  nPC;
 40027              		.loc 1 13262 0
 40028 12bd2 41C1E010 		sall	$16, %r8d
 40029              	.LVL3885:
13260:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
 40030              		.loc 1 13260 0
 40031 12bd6 C1E810   		shrl	$16, %eax
 40032              	.LVL3886:
 40033              		.loc 1 13270 0
 40034 12bd9 C1EA15   		shrl	$21, %edx
13264:src/vm3.c     **** 
 40035              		.loc 1 13264 0
 40036 12bdc 83050000 		addl	$4, nPC(%rip)
 40036      000004
 40037              	.LVL3887:
13262:src/vm3.c     **** PC  =  nPC;
 40038              		.loc 1 13262 0
 40039 12be3 83E01F   		andl	$31, %eax
13271:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13272:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13273:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 40040              		.loc 1 13273 0
 40041 12be6 83E21F   		andl	$31, %edx
13262:src/vm3.c     **** PC  =  nPC;
 40042              		.loc 1 13262 0
 40043 12be9 44890485 		movl	%r8d, RF(,%rax,4)
 40043      00000000 
13271:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40044              		.loc 1 13271 0
 40045 12bf1 89D8     		movl	%ebx, %eax
 40046              		.loc 1 13273 0
 40047 12bf3 0FBFDB   		movswl	%bx, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1300


 40048              	.LVL3888:
 40049 12bf6 031C9500 		addl	RF(,%rdx,4), %ebx
 40049      000000
 40050              	.LVL3889:
13271:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40051              		.loc 1 13271 0
 40052 12bfd C1E810   		shrl	$16, %eax
 40053              	.LVL3890:
 40054              		.loc 1 13273 0
 40055 12c00 83E01F   		andl	$31, %eax
 40056 12c03 891C8500 		movl	%ebx, RF(,%rax,4)
 40056      000000
13274:src/vm3.c     **** PC  =  nPC;
 40057              		.loc 1 13274 0
 40058 12c0a 8B050000 		movl	nPC(%rip), %eax
 40058      0000
13275:src/vm3.c     **** nPC  += 4;
13276:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40059              		.loc 1 13276 0
 40060 12c10 8D5003   		leal	3(%rax), %edx
13275:src/vm3.c     **** nPC  += 4;
 40061              		.loc 1 13275 0
 40062 12c13 8D4804   		leal	4(%rax), %ecx
13274:src/vm3.c     **** PC  =  nPC;
 40063              		.loc 1 13274 0
 40064 12c16 89050000 		movl	%eax, PC(%rip)
 40064      0000
 40065              		.loc 1 13276 0
 40066 12c1c 440FB682 		movzbl	VM_memory(%rdx), %r8d
 40066      00000000 
 40067 12c24 89C2     		movl	%eax, %edx
13277:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13278:src/vm3.c     ****   if (op0 == 0x0) {
13279:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13280:src/vm3.c     ****     op0 = op0 + funct;
13281:src/vm3.c     ****   }
13282:src/vm3.c     ****     else {
13283:src/vm3.c     ****     op0 = op0 + FIX_OP;
13284:src/vm3.c     ****   }
13285:src/vm3.c     **** 
13286:src/vm3.c     **** p = array;
13287:src/vm3.c     **** p = p[op0].next_level;
13288:src/vm3.c     **** 
13289:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40068              		.loc 1 13289 0
 40069 12c26 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40069      000000
13276:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40070              		.loc 1 13276 0
 40071 12c2d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40071      000000
13275:src/vm3.c     **** nPC  += 4;
 40072              		.loc 1 13275 0
 40073 12c34 890D0000 		movl	%ecx, nPC(%rip)
 40073      0000
 40074              		.loc 1 13289 0
 40075 12c3a 8D4805   		leal	5(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1301


 40076 12c3d 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40076      000000
13276:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40077              		.loc 1 13276 0
 40078 12c44 C1E218   		sall	$24, %edx
 40079 12c47 4109D0   		orl	%edx, %r8d
 40080 12c4a 8D5001   		leal	1(%rax), %edx
 40081 12c4d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40081      000000
 40082 12c54 C1E210   		sall	$16, %edx
 40083 12c57 4109D0   		orl	%edx, %r8d
 40084 12c5a 8D5002   		leal	2(%rax), %edx
 40085 12c5d 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40085      000000
 40086 12c64 C1E208   		sall	$8, %edx
 40087 12c67 4109D0   		orl	%edx, %r8d
 40088              	.LVL3891:
13277:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40089              		.loc 1 13277 0
 40090 12c6a 4489C6   		movl	%r8d, %esi
13279:src/vm3.c     ****     op0 = op0 + funct;
 40091              		.loc 1 13279 0
 40092 12c6d 4488C2   		movb	%r8b, %dl
13277:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40093              		.loc 1 13277 0
 40094 12c70 C1EE1A   		shrl	$26, %esi
 40095              	.LVL3892:
13279:src/vm3.c     ****     op0 = op0 + funct;
 40096              		.loc 1 13279 0
 40097 12c73 83E23F   		andl	$63, %edx
 40098 12c76 8D7E2B   		leal	43(%rsi), %edi
 40099 12c79 4084F6   		testb	%sil, %sil
 40100 12c7c 0F45D7   		cmovne	%edi, %edx
 40101              	.LVL3893:
 40102              		.loc 1 13289 0
 40103 12c7f C1E110   		sall	$16, %ecx
 40104 12c82 C1E318   		sall	$24, %ebx
 40105 12c85 09CB     		orl	%ecx, %ebx
 40106 12c87 8D4807   		leal	7(%rax), %ecx
 40107 12c8a 83C006   		addl	$6, %eax
 40108 12c8d 0FB68000 		movzbl	VM_memory(%rax), %eax
 40108      000000
13287:src/vm3.c     **** 
 40109              		.loc 1 13287 0
 40110 12c94 0FB6D2   		movzbl	%dl, %edx
 40111              		.loc 1 13289 0
 40112 12c97 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40112      000000
13287:src/vm3.c     **** 
 40113              		.loc 1 13287 0
 40114 12c9e 48C1E204 		salq	$4, %rdx
 40115              	.LVL3894:
 40116              		.loc 1 13289 0
 40117 12ca2 C1E008   		sall	$8, %eax
 40118 12ca5 09CB     		orl	%ecx, %ebx
 40119 12ca7 09C3     		orl	%eax, %ebx
 40120              	.LVL3895:
GAS LISTING /tmp/cc15eBE3.s 			page 1302


13290:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40121              		.loc 1 13290 0
 40122 12ca9 89D9     		movl	%ebx, %ecx
13291:src/vm3.c     ****   if (op1 == 0x0) {
13292:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40123              		.loc 1 13292 0
 40124 12cab 88D8     		movb	%bl, %al
13290:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40125              		.loc 1 13290 0
 40126 12cad C1E91A   		shrl	$26, %ecx
 40127              	.LVL3896:
 40128              		.loc 1 13292 0
 40129 12cb0 83E03F   		andl	$63, %eax
 40130 12cb3 8D712B   		leal	43(%rcx), %esi
 40131 12cb6 84C9     		testb	%cl, %cl
 40132 12cb8 0F45C6   		cmovne	%esi, %eax
 40133              	.LVL3897:
13293:src/vm3.c     ****     op1 = op1 + funct;
13294:src/vm3.c     ****   }
13295:src/vm3.c     ****     else {
13296:src/vm3.c     ****     op1 = op1 + FIX_OP;
13297:src/vm3.c     ****   }
13298:src/vm3.c     **** 
13299:src/vm3.c     **** goto *p[op1].code;
 40134              		.loc 1 13299 0
 40135 12cbb 0FB6C0   		movzbl	%al, %eax
 40136 12cbe 48C1E004 		salq	$4, %rax
 40137              	.LVL3898:
 40138 12cc2 48038414 		addq	58088(%rsp,%rdx), %rax
 40138      E8E20000 
 40139 12cca 488B08   		movq	(%rax), %rcx
 40140 12ccd E986E0FE 		jmp	.L269
 40140      FF
 40141              	.LVL3899:
 40142              	.L86:
13300:src/vm3.c     **** 
13301:src/vm3.c     **** 
13302:src/vm3.c     **** xorPLUSsw:
13303:src/vm3.c     **** #if INDIRECT_DEBUG
13304:src/vm3.c     **** printf("%d|xor\n",counter);
13305:src/vm3.c     **** counter++;
13306:src/vm3.c     **** #endif
13307:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
13308:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40143              		.loc 1 13308 0
 40144 12cd2 4489C0   		movl	%r8d, %eax
13309:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40145              		.loc 1 13309 0
 40146 12cd5 4489C2   		movl	%r8d, %edx
13307:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40147              		.loc 1 13307 0
 40148 12cd8 41C1E815 		shrl	$21, %r8d
 40149              	.LVL3900:
13308:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40150              		.loc 1 13308 0
 40151 12cdc C1E810   		shrl	$16, %eax
 40152              	.LVL3901:
GAS LISTING /tmp/cc15eBE3.s 			page 1303


13310:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 40153              		.loc 1 13310 0
 40154 12cdf 4183E01F 		andl	$31, %r8d
13309:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 40155              		.loc 1 13309 0
 40156 12ce3 C1EA0B   		shrl	$11, %edx
 40157              	.LVL3902:
 40158              		.loc 1 13310 0
 40159 12ce6 83E01F   		andl	$31, %eax
 40160 12ce9 83E21F   		andl	$31, %edx
13311:src/vm3.c     **** PC  =  nPC;
13312:src/vm3.c     **** nPC  += 4;
13313:src/vm3.c     **** 
13314:src/vm3.c     **** #if INDIRECT_DEBUG
13315:src/vm3.c     **** printf("%d|sw\n",counter);
13316:src/vm3.c     **** counter++;
13317:src/vm3.c     **** #endif
13318:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
13319:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13320:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13321:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 40161              		.loc 1 13321 0
 40162 12cec 0FBFCB   		movswl	%bx, %ecx
13310:src/vm3.c     **** PC  =  nPC;
 40163              		.loc 1 13310 0
 40164 12cef 8B048500 		movl	RF(,%rax,4), %eax
 40164      000000
 40165 12cf6 42330485 		xorl	RF(,%r8,4), %eax
 40165      00000000 
13312:src/vm3.c     **** 
 40166              		.loc 1 13312 0
 40167 12cfe 83050000 		addl	$4, nPC(%rip)
 40167      000004
 40168              	.LVL3903:
13310:src/vm3.c     **** PC  =  nPC;
 40169              		.loc 1 13310 0
 40170 12d05 89049500 		movl	%eax, RF(,%rdx,4)
 40170      000000
13318:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40171              		.loc 1 13318 0
 40172 12d0c 89D8     		movl	%ebx, %eax
13319:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 40173              		.loc 1 13319 0
 40174 12d0e C1EB10   		shrl	$16, %ebx
 40175              	.LVL3904:
13318:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40176              		.loc 1 13318 0
 40177 12d11 C1E815   		shrl	$21, %eax
 40178              	.LVL3905:
 40179              		.loc 1 13321 0
 40180 12d14 83E31F   		andl	$31, %ebx
 40181 12d17 83E01F   		andl	$31, %eax
 40182 12d1a 8B148500 		movl	RF(,%rax,4), %edx
 40182      000000
 40183 12d21 8B049D00 		movl	RF(,%rbx,4), %eax
 40183      000000
 40184 12d28 8D3411   		leal	(%rcx,%rdx), %esi
GAS LISTING /tmp/cc15eBE3.s 			page 1304


 40185 12d2b 89C7     		movl	%eax, %edi
 40186 12d2d C1EF18   		shrl	$24, %edi
 40187 12d30 4088BE00 		movb	%dil, VM_memory(%rsi)
 40187      000000
13322:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 40188              		.loc 1 13322 0
 40189 12d37 8D741101 		leal	1(%rcx,%rdx), %esi
 40190 12d3b 89C7     		movl	%eax, %edi
 40191 12d3d C1EF10   		shrl	$16, %edi
 40192 12d40 4088BE00 		movb	%dil, VM_memory(%rsi)
 40192      000000
13323:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 40193              		.loc 1 13323 0
 40194 12d47 8D741102 		leal	2(%rcx,%rdx), %esi
13324:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 40195              		.loc 1 13324 0
 40196 12d4b 8D541103 		leal	3(%rcx,%rdx), %edx
13323:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 40197              		.loc 1 13323 0
 40198 12d4f 0FB6FC   		movzbl	%ah, %edi
 40199 12d52 4088BE00 		movb	%dil, VM_memory(%rsi)
 40199      000000
 40200              		.loc 1 13324 0
 40201 12d59 88820000 		movb	%al, VM_memory(%rdx)
 40201      0000
13325:src/vm3.c     **** PC  =  nPC;
 40202              		.loc 1 13325 0
 40203 12d5f 8B050000 		movl	nPC(%rip), %eax
 40203      0000
13326:src/vm3.c     **** nPC  += 4;
13327:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40204              		.loc 1 13327 0
 40205 12d65 8D5003   		leal	3(%rax), %edx
13326:src/vm3.c     **** nPC  += 4;
 40206              		.loc 1 13326 0
 40207 12d68 8D4804   		leal	4(%rax), %ecx
 40208              	.LVL3906:
13325:src/vm3.c     **** PC  =  nPC;
 40209              		.loc 1 13325 0
 40210 12d6b 89050000 		movl	%eax, PC(%rip)
 40210      0000
 40211              		.loc 1 13327 0
 40212 12d71 440FB682 		movzbl	VM_memory(%rdx), %r8d
 40212      00000000 
 40213 12d79 89C2     		movl	%eax, %edx
13328:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13329:src/vm3.c     ****   if (op0 == 0x0) {
13330:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13331:src/vm3.c     ****     op0 = op0 + funct;
13332:src/vm3.c     ****   }
13333:src/vm3.c     ****     else {
13334:src/vm3.c     ****     op0 = op0 + FIX_OP;
13335:src/vm3.c     ****   }
13336:src/vm3.c     **** 
13337:src/vm3.c     **** p = array;
13338:src/vm3.c     **** p = p[op0].next_level;
13339:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1305


13340:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40214              		.loc 1 13340 0
 40215 12d7b 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40215      000000
13327:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40216              		.loc 1 13327 0
 40217 12d82 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40217      000000
13326:src/vm3.c     **** nPC  += 4;
 40218              		.loc 1 13326 0
 40219 12d89 890D0000 		movl	%ecx, nPC(%rip)
 40219      0000
 40220              		.loc 1 13340 0
 40221 12d8f 8D4805   		leal	5(%rax), %ecx
 40222 12d92 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40222      000000
13327:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40223              		.loc 1 13327 0
 40224 12d99 C1E218   		sall	$24, %edx
 40225 12d9c 4109D0   		orl	%edx, %r8d
 40226 12d9f 8D5001   		leal	1(%rax), %edx
 40227 12da2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40227      000000
 40228 12da9 C1E210   		sall	$16, %edx
 40229 12dac 4109D0   		orl	%edx, %r8d
 40230 12daf 8D5002   		leal	2(%rax), %edx
 40231 12db2 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40231      000000
 40232 12db9 C1E208   		sall	$8, %edx
 40233 12dbc 4109D0   		orl	%edx, %r8d
 40234              	.LVL3907:
13328:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40235              		.loc 1 13328 0
 40236 12dbf 4489C6   		movl	%r8d, %esi
13330:src/vm3.c     ****     op0 = op0 + funct;
 40237              		.loc 1 13330 0
 40238 12dc2 4488C2   		movb	%r8b, %dl
13328:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40239              		.loc 1 13328 0
 40240 12dc5 C1EE1A   		shrl	$26, %esi
 40241              	.LVL3908:
13330:src/vm3.c     ****     op0 = op0 + funct;
 40242              		.loc 1 13330 0
 40243 12dc8 83E23F   		andl	$63, %edx
 40244 12dcb 8D7E2B   		leal	43(%rsi), %edi
 40245 12dce 4084F6   		testb	%sil, %sil
 40246 12dd1 0F45D7   		cmovne	%edi, %edx
 40247              	.LVL3909:
 40248              		.loc 1 13340 0
 40249 12dd4 C1E110   		sall	$16, %ecx
 40250 12dd7 C1E318   		sall	$24, %ebx
 40251 12dda 09CB     		orl	%ecx, %ebx
 40252 12ddc 8D4807   		leal	7(%rax), %ecx
 40253 12ddf 83C006   		addl	$6, %eax
 40254 12de2 0FB68000 		movzbl	VM_memory(%rax), %eax
 40254      000000
13338:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1306


 40255              		.loc 1 13338 0
 40256 12de9 0FB6D2   		movzbl	%dl, %edx
 40257              		.loc 1 13340 0
 40258 12dec 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40258      000000
13338:src/vm3.c     **** 
 40259              		.loc 1 13338 0
 40260 12df3 48C1E204 		salq	$4, %rdx
 40261              	.LVL3910:
 40262              		.loc 1 13340 0
 40263 12df7 C1E008   		sall	$8, %eax
 40264 12dfa 09CB     		orl	%ecx, %ebx
 40265 12dfc 09C3     		orl	%eax, %ebx
 40266              	.LVL3911:
13341:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40267              		.loc 1 13341 0
 40268 12dfe 89D9     		movl	%ebx, %ecx
13342:src/vm3.c     ****   if (op1 == 0x0) {
13343:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40269              		.loc 1 13343 0
 40270 12e00 88D8     		movb	%bl, %al
13341:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40271              		.loc 1 13341 0
 40272 12e02 C1E91A   		shrl	$26, %ecx
 40273              	.LVL3912:
 40274              		.loc 1 13343 0
 40275 12e05 83E03F   		andl	$63, %eax
 40276 12e08 8D712B   		leal	43(%rcx), %esi
 40277 12e0b 84C9     		testb	%cl, %cl
 40278 12e0d 0F45C6   		cmovne	%esi, %eax
 40279              	.LVL3913:
13344:src/vm3.c     ****     op1 = op1 + funct;
13345:src/vm3.c     ****   }
13346:src/vm3.c     ****     else {
13347:src/vm3.c     ****     op1 = op1 + FIX_OP;
13348:src/vm3.c     ****   }
13349:src/vm3.c     **** 
13350:src/vm3.c     **** goto *p[op1].code;
 40280              		.loc 1 13350 0
 40281 12e10 0FB6C0   		movzbl	%al, %eax
 40282 12e13 48C1E004 		salq	$4, %rax
 40283              	.LVL3914:
 40284 12e17 48038414 		addq	58088(%rsp,%rdx), %rax
 40284      E8E20000 
 40285 12e1f 488B08   		movq	(%rax), %rcx
 40286 12e22 E931DFFE 		jmp	.L269
 40286      FF
 40287              	.LVL3915:
 40288              	.L221:
13351:src/vm3.c     **** 
13352:src/vm3.c     **** 
13353:src/vm3.c     **** subuPLUSand:
13354:src/vm3.c     **** #if INDIRECT_DEBUG
13355:src/vm3.c     **** printf("%d|subu\n",counter);
13356:src/vm3.c     **** counter++;
13357:src/vm3.c     **** #endif
13358:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1307


 40289              		.loc 1 13358 0
 40290 12e27 4489C0   		movl	%r8d, %eax
13359:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
13360:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40291              		.loc 1 13360 0
 40292 12e2a 4489C2   		movl	%r8d, %edx
13359:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40293              		.loc 1 13359 0
 40294 12e2d 41C1E810 		shrl	$16, %r8d
 40295              	.LVL3916:
13358:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40296              		.loc 1 13358 0
 40297 12e31 C1E815   		shrl	$21, %eax
 40298              	.LVL3917:
13361:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 40299              		.loc 1 13361 0
 40300 12e34 4183E01F 		andl	$31, %r8d
13360:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 40301              		.loc 1 13360 0
 40302 12e38 C1EA0B   		shrl	$11, %edx
 40303              	.LVL3918:
 40304              		.loc 1 13361 0
 40305 12e3b 83E01F   		andl	$31, %eax
 40306 12e3e 83E21F   		andl	$31, %edx
13362:src/vm3.c     **** PC  =  nPC;
13363:src/vm3.c     **** nPC  += 4;
 40307              		.loc 1 13363 0
 40308 12e41 83050000 		addl	$4, nPC(%rip)
 40308      000004
 40309              	.LVL3919:
13361:src/vm3.c     **** PC  =  nPC;
 40310              		.loc 1 13361 0
 40311 12e48 8B048500 		movl	RF(,%rax,4), %eax
 40311      000000
 40312 12e4f 422B0485 		subl	RF(,%r8,4), %eax
 40312      00000000 
 40313 12e57 89049500 		movl	%eax, RF(,%rdx,4)
 40313      000000
13364:src/vm3.c     **** 
13365:src/vm3.c     **** #if INDIRECT_DEBUG
13366:src/vm3.c     **** printf("%d|and\n",counter);
13367:src/vm3.c     **** counter++;
13368:src/vm3.c     **** #endif
13369:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
13370:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40314              		.loc 1 13370 0
 40315 12e5e 89D8     		movl	%ebx, %eax
13371:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 40316              		.loc 1 13371 0
 40317 12e60 89DA     		movl	%ebx, %edx
13370:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 40318              		.loc 1 13370 0
 40319 12e62 C1E810   		shrl	$16, %eax
13369:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40320              		.loc 1 13369 0
 40321 12e65 C1EB15   		shrl	$21, %ebx
 40322              	.LVL3920:
GAS LISTING /tmp/cc15eBE3.s 			page 1308


 40323              		.loc 1 13371 0
 40324 12e68 C1EA0B   		shrl	$11, %edx
 40325              	.LVL3921:
13372:src/vm3.c     **** RF[rd] = RF[rs] & RF[rt];
 40326              		.loc 1 13372 0
 40327 12e6b 83E31F   		andl	$31, %ebx
 40328 12e6e 83E01F   		andl	$31, %eax
 40329 12e71 83E21F   		andl	$31, %edx
 40330 12e74 8B048500 		movl	RF(,%rax,4), %eax
 40330      000000
 40331 12e7b 23049D00 		andl	RF(,%rbx,4), %eax
 40331      000000
 40332 12e82 89049500 		movl	%eax, RF(,%rdx,4)
 40332      000000
13373:src/vm3.c     **** PC  =  nPC;
 40333              		.loc 1 13373 0
 40334 12e89 8B050000 		movl	nPC(%rip), %eax
 40334      0000
13374:src/vm3.c     **** nPC  += 4;
13375:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40335              		.loc 1 13375 0
 40336 12e8f 8D5003   		leal	3(%rax), %edx
13374:src/vm3.c     **** nPC  += 4;
 40337              		.loc 1 13374 0
 40338 12e92 8D4804   		leal	4(%rax), %ecx
13373:src/vm3.c     **** PC  =  nPC;
 40339              		.loc 1 13373 0
 40340 12e95 89050000 		movl	%eax, PC(%rip)
 40340      0000
 40341              		.loc 1 13375 0
 40342 12e9b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 40342      00000000 
 40343 12ea3 89C2     		movl	%eax, %edx
13376:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13377:src/vm3.c     ****   if (op0 == 0x0) {
13378:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13379:src/vm3.c     ****     op0 = op0 + funct;
13380:src/vm3.c     ****   }
13381:src/vm3.c     ****     else {
13382:src/vm3.c     ****     op0 = op0 + FIX_OP;
13383:src/vm3.c     ****   }
13384:src/vm3.c     **** 
13385:src/vm3.c     **** p = array;
13386:src/vm3.c     **** p = p[op0].next_level;
13387:src/vm3.c     **** 
13388:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40344              		.loc 1 13388 0
 40345 12ea5 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40345      000000
13375:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40346              		.loc 1 13375 0
 40347 12eac 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40347      000000
13374:src/vm3.c     **** nPC  += 4;
 40348              		.loc 1 13374 0
 40349 12eb3 890D0000 		movl	%ecx, nPC(%rip)
 40349      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1309


 40350              		.loc 1 13388 0
 40351 12eb9 8D4805   		leal	5(%rax), %ecx
 40352 12ebc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40352      000000
13375:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40353              		.loc 1 13375 0
 40354 12ec3 C1E218   		sall	$24, %edx
 40355 12ec6 4109D0   		orl	%edx, %r8d
 40356 12ec9 8D5001   		leal	1(%rax), %edx
 40357 12ecc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40357      000000
 40358 12ed3 C1E210   		sall	$16, %edx
 40359 12ed6 4109D0   		orl	%edx, %r8d
 40360 12ed9 8D5002   		leal	2(%rax), %edx
 40361 12edc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40361      000000
 40362 12ee3 C1E208   		sall	$8, %edx
 40363 12ee6 4109D0   		orl	%edx, %r8d
 40364              	.LVL3922:
13376:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40365              		.loc 1 13376 0
 40366 12ee9 4489C6   		movl	%r8d, %esi
13378:src/vm3.c     ****     op0 = op0 + funct;
 40367              		.loc 1 13378 0
 40368 12eec 4488C2   		movb	%r8b, %dl
13376:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40369              		.loc 1 13376 0
 40370 12eef C1EE1A   		shrl	$26, %esi
 40371              	.LVL3923:
13378:src/vm3.c     ****     op0 = op0 + funct;
 40372              		.loc 1 13378 0
 40373 12ef2 83E23F   		andl	$63, %edx
 40374 12ef5 8D7E2B   		leal	43(%rsi), %edi
 40375 12ef8 4084F6   		testb	%sil, %sil
 40376 12efb 0F45D7   		cmovne	%edi, %edx
 40377              	.LVL3924:
 40378              		.loc 1 13388 0
 40379 12efe C1E110   		sall	$16, %ecx
 40380 12f01 C1E318   		sall	$24, %ebx
 40381 12f04 09CB     		orl	%ecx, %ebx
 40382 12f06 8D4807   		leal	7(%rax), %ecx
 40383 12f09 83C006   		addl	$6, %eax
 40384 12f0c 0FB68000 		movzbl	VM_memory(%rax), %eax
 40384      000000
13386:src/vm3.c     **** 
 40385              		.loc 1 13386 0
 40386 12f13 0FB6D2   		movzbl	%dl, %edx
 40387              		.loc 1 13388 0
 40388 12f16 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40388      000000
13386:src/vm3.c     **** 
 40389              		.loc 1 13386 0
 40390 12f1d 48C1E204 		salq	$4, %rdx
 40391              	.LVL3925:
 40392              		.loc 1 13388 0
 40393 12f21 C1E008   		sall	$8, %eax
 40394 12f24 09CB     		orl	%ecx, %ebx
GAS LISTING /tmp/cc15eBE3.s 			page 1310


 40395 12f26 09C3     		orl	%eax, %ebx
 40396              	.LVL3926:
13389:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40397              		.loc 1 13389 0
 40398 12f28 89D9     		movl	%ebx, %ecx
13390:src/vm3.c     ****   if (op1 == 0x0) {
13391:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40399              		.loc 1 13391 0
 40400 12f2a 88D8     		movb	%bl, %al
13389:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40401              		.loc 1 13389 0
 40402 12f2c C1E91A   		shrl	$26, %ecx
 40403              	.LVL3927:
 40404              		.loc 1 13391 0
 40405 12f2f 83E03F   		andl	$63, %eax
 40406 12f32 8D712B   		leal	43(%rcx), %esi
 40407 12f35 84C9     		testb	%cl, %cl
 40408 12f37 0F45C6   		cmovne	%esi, %eax
 40409              	.LVL3928:
13392:src/vm3.c     ****     op1 = op1 + funct;
13393:src/vm3.c     ****   }
13394:src/vm3.c     ****     else {
13395:src/vm3.c     ****     op1 = op1 + FIX_OP;
13396:src/vm3.c     ****   }
13397:src/vm3.c     **** 
13398:src/vm3.c     **** goto *p[op1].code;
 40410              		.loc 1 13398 0
 40411 12f3a 0FB6C0   		movzbl	%al, %eax
 40412 12f3d 48C1E004 		salq	$4, %rax
 40413              	.LVL3929:
 40414 12f41 48038414 		addq	58088(%rsp,%rdx), %rax
 40414      E8E20000 
 40415 12f49 488B08   		movq	(%rax), %rcx
 40416 12f4c E907DEFE 		jmp	.L269
 40416      FF
 40417              	.LVL3930:
 40418              	.L49:
13399:src/vm3.c     **** 
13400:src/vm3.c     **** 
13401:src/vm3.c     **** orPLUSsw:
13402:src/vm3.c     **** #if INDIRECT_DEBUG
13403:src/vm3.c     **** printf("%d|or\n",counter);
13404:src/vm3.c     **** counter++;
13405:src/vm3.c     **** #endif
13406:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
13407:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40419              		.loc 1 13407 0
 40420 12f51 4489C0   		movl	%r8d, %eax
13408:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40421              		.loc 1 13408 0
 40422 12f54 4489C2   		movl	%r8d, %edx
13406:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40423              		.loc 1 13406 0
 40424 12f57 41C1E815 		shrl	$21, %r8d
 40425              	.LVL3931:
13407:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40426              		.loc 1 13407 0
GAS LISTING /tmp/cc15eBE3.s 			page 1311


 40427 12f5b C1E810   		shrl	$16, %eax
 40428              	.LVL3932:
13409:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 40429              		.loc 1 13409 0
 40430 12f5e 4183E01F 		andl	$31, %r8d
13408:src/vm3.c     **** RF[rd] = RF[rs] | RF[rt];
 40431              		.loc 1 13408 0
 40432 12f62 C1EA0B   		shrl	$11, %edx
 40433              	.LVL3933:
 40434              		.loc 1 13409 0
 40435 12f65 83E01F   		andl	$31, %eax
 40436 12f68 83E21F   		andl	$31, %edx
13410:src/vm3.c     **** PC  =  nPC;
13411:src/vm3.c     **** nPC  += 4;
13412:src/vm3.c     **** 
13413:src/vm3.c     **** #if INDIRECT_DEBUG
13414:src/vm3.c     **** printf("%d|sw\n",counter);
13415:src/vm3.c     **** counter++;
13416:src/vm3.c     **** #endif
13417:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
13418:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13419:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13420:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 40437              		.loc 1 13420 0
 40438 12f6b 0FBFCB   		movswl	%bx, %ecx
13409:src/vm3.c     **** PC  =  nPC;
 40439              		.loc 1 13409 0
 40440 12f6e 8B048500 		movl	RF(,%rax,4), %eax
 40440      000000
 40441 12f75 420B0485 		orl	RF(,%r8,4), %eax
 40441      00000000 
13411:src/vm3.c     **** 
 40442              		.loc 1 13411 0
 40443 12f7d 83050000 		addl	$4, nPC(%rip)
 40443      000004
 40444              	.LVL3934:
13409:src/vm3.c     **** PC  =  nPC;
 40445              		.loc 1 13409 0
 40446 12f84 89049500 		movl	%eax, RF(,%rdx,4)
 40446      000000
13417:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40447              		.loc 1 13417 0
 40448 12f8b 89D8     		movl	%ebx, %eax
13418:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 40449              		.loc 1 13418 0
 40450 12f8d C1EB10   		shrl	$16, %ebx
 40451              	.LVL3935:
13417:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40452              		.loc 1 13417 0
 40453 12f90 C1E815   		shrl	$21, %eax
 40454              	.LVL3936:
 40455              		.loc 1 13420 0
 40456 12f93 83E31F   		andl	$31, %ebx
 40457 12f96 83E01F   		andl	$31, %eax
 40458 12f99 8B148500 		movl	RF(,%rax,4), %edx
 40458      000000
 40459 12fa0 8B049D00 		movl	RF(,%rbx,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1312


 40459      000000
 40460 12fa7 8D3411   		leal	(%rcx,%rdx), %esi
 40461 12faa 89C7     		movl	%eax, %edi
 40462 12fac C1EF18   		shrl	$24, %edi
 40463 12faf 4088BE00 		movb	%dil, VM_memory(%rsi)
 40463      000000
13421:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 40464              		.loc 1 13421 0
 40465 12fb6 8D741101 		leal	1(%rcx,%rdx), %esi
 40466 12fba 89C7     		movl	%eax, %edi
 40467 12fbc C1EF10   		shrl	$16, %edi
 40468 12fbf 4088BE00 		movb	%dil, VM_memory(%rsi)
 40468      000000
13422:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 40469              		.loc 1 13422 0
 40470 12fc6 8D741102 		leal	2(%rcx,%rdx), %esi
13423:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 40471              		.loc 1 13423 0
 40472 12fca 8D541103 		leal	3(%rcx,%rdx), %edx
13422:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 40473              		.loc 1 13422 0
 40474 12fce 0FB6FC   		movzbl	%ah, %edi
 40475 12fd1 4088BE00 		movb	%dil, VM_memory(%rsi)
 40475      000000
 40476              		.loc 1 13423 0
 40477 12fd8 88820000 		movb	%al, VM_memory(%rdx)
 40477      0000
13424:src/vm3.c     **** PC  =  nPC;
 40478              		.loc 1 13424 0
 40479 12fde 8B050000 		movl	nPC(%rip), %eax
 40479      0000
13425:src/vm3.c     **** nPC  += 4;
13426:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40480              		.loc 1 13426 0
 40481 12fe4 8D5003   		leal	3(%rax), %edx
13425:src/vm3.c     **** nPC  += 4;
 40482              		.loc 1 13425 0
 40483 12fe7 8D4804   		leal	4(%rax), %ecx
 40484              	.LVL3937:
13424:src/vm3.c     **** PC  =  nPC;
 40485              		.loc 1 13424 0
 40486 12fea 89050000 		movl	%eax, PC(%rip)
 40486      0000
 40487              		.loc 1 13426 0
 40488 12ff0 440FB682 		movzbl	VM_memory(%rdx), %r8d
 40488      00000000 
 40489 12ff8 89C2     		movl	%eax, %edx
13427:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13428:src/vm3.c     ****   if (op0 == 0x0) {
13429:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13430:src/vm3.c     ****     op0 = op0 + funct;
13431:src/vm3.c     ****   }
13432:src/vm3.c     ****     else {
13433:src/vm3.c     ****     op0 = op0 + FIX_OP;
13434:src/vm3.c     ****   }
13435:src/vm3.c     **** 
13436:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 1313


13437:src/vm3.c     **** p = p[op0].next_level;
13438:src/vm3.c     **** 
13439:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40490              		.loc 1 13439 0
 40491 12ffa 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40491      000000
13426:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40492              		.loc 1 13426 0
 40493 13001 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40493      000000
13425:src/vm3.c     **** nPC  += 4;
 40494              		.loc 1 13425 0
 40495 13008 890D0000 		movl	%ecx, nPC(%rip)
 40495      0000
 40496              		.loc 1 13439 0
 40497 1300e 8D4805   		leal	5(%rax), %ecx
 40498 13011 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40498      000000
13426:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40499              		.loc 1 13426 0
 40500 13018 C1E218   		sall	$24, %edx
 40501 1301b 4109D0   		orl	%edx, %r8d
 40502 1301e 8D5001   		leal	1(%rax), %edx
 40503 13021 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40503      000000
 40504 13028 C1E210   		sall	$16, %edx
 40505 1302b 4109D0   		orl	%edx, %r8d
 40506 1302e 8D5002   		leal	2(%rax), %edx
 40507 13031 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40507      000000
 40508 13038 C1E208   		sall	$8, %edx
 40509 1303b 4109D0   		orl	%edx, %r8d
 40510              	.LVL3938:
13427:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40511              		.loc 1 13427 0
 40512 1303e 4489C6   		movl	%r8d, %esi
13429:src/vm3.c     ****     op0 = op0 + funct;
 40513              		.loc 1 13429 0
 40514 13041 4488C2   		movb	%r8b, %dl
13427:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40515              		.loc 1 13427 0
 40516 13044 C1EE1A   		shrl	$26, %esi
 40517              	.LVL3939:
13429:src/vm3.c     ****     op0 = op0 + funct;
 40518              		.loc 1 13429 0
 40519 13047 83E23F   		andl	$63, %edx
 40520 1304a 8D7E2B   		leal	43(%rsi), %edi
 40521 1304d 4084F6   		testb	%sil, %sil
 40522 13050 0F45D7   		cmovne	%edi, %edx
 40523              	.LVL3940:
 40524              		.loc 1 13439 0
 40525 13053 C1E110   		sall	$16, %ecx
 40526 13056 C1E318   		sall	$24, %ebx
 40527 13059 09CB     		orl	%ecx, %ebx
 40528 1305b 8D4807   		leal	7(%rax), %ecx
 40529 1305e 83C006   		addl	$6, %eax
 40530 13061 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1314


 40530      000000
13437:src/vm3.c     **** 
 40531              		.loc 1 13437 0
 40532 13068 0FB6D2   		movzbl	%dl, %edx
 40533              		.loc 1 13439 0
 40534 1306b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40534      000000
13437:src/vm3.c     **** 
 40535              		.loc 1 13437 0
 40536 13072 48C1E204 		salq	$4, %rdx
 40537              	.LVL3941:
 40538              		.loc 1 13439 0
 40539 13076 C1E008   		sall	$8, %eax
 40540 13079 09CB     		orl	%ecx, %ebx
 40541 1307b 09C3     		orl	%eax, %ebx
 40542              	.LVL3942:
13440:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40543              		.loc 1 13440 0
 40544 1307d 89D9     		movl	%ebx, %ecx
13441:src/vm3.c     ****   if (op1 == 0x0) {
13442:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40545              		.loc 1 13442 0
 40546 1307f 88D8     		movb	%bl, %al
13440:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40547              		.loc 1 13440 0
 40548 13081 C1E91A   		shrl	$26, %ecx
 40549              	.LVL3943:
 40550              		.loc 1 13442 0
 40551 13084 83E03F   		andl	$63, %eax
 40552 13087 8D712B   		leal	43(%rcx), %esi
 40553 1308a 84C9     		testb	%cl, %cl
 40554 1308c 0F45C6   		cmovne	%esi, %eax
 40555              	.LVL3944:
13443:src/vm3.c     ****     op1 = op1 + funct;
13444:src/vm3.c     ****   }
13445:src/vm3.c     ****     else {
13446:src/vm3.c     ****     op1 = op1 + FIX_OP;
13447:src/vm3.c     ****   }
13448:src/vm3.c     **** 
13449:src/vm3.c     **** goto *p[op1].code;
 40556              		.loc 1 13449 0
 40557 1308f 0FB6C0   		movzbl	%al, %eax
 40558 13092 48C1E004 		salq	$4, %rax
 40559              	.LVL3945:
 40560 13096 48038414 		addq	58088(%rsp,%rdx), %rax
 40560      E8E20000 
 40561 1309e 488B08   		movq	(%rax), %rcx
 40562 130a1 E9B2DCFE 		jmp	.L269
 40562      FF
 40563              	.LVL3946:
 40564              	.L11:
13450:src/vm3.c     **** 
13451:src/vm3.c     **** 
13452:src/vm3.c     **** movnPLUSjump:
13453:src/vm3.c     **** #if INDIRECT_DEBUG
13454:src/vm3.c     **** printf("%d|movn\n",counter);
13455:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 1315


13456:src/vm3.c     **** #endif
13457:src/vm3.c     **** 
13458:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
13459:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40565              		.loc 1 13459 0
 40566 130a6 4489C0   		movl	%r8d, %eax
 40567 130a9 C1E810   		shrl	$16, %eax
13460:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
13461:src/vm3.c     **** if (RF[rt] != 0) RF[rd] = RF[rs];
 40568              		.loc 1 13461 0
 40569 130ac 83E01F   		andl	$31, %eax
 40570 130af 833C8500 		cmpl	$0, RF(,%rax,4)
 40570      00000000 
 40571 130b7 7420     		je	.L1442
13458:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40572              		.loc 1 13458 0 discriminator 1
 40573 130b9 4489C0   		movl	%r8d, %eax
13460:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40574              		.loc 1 13460 0 discriminator 1
 40575 130bc 41C1E80B 		shrl	$11, %r8d
 40576              	.LVL3947:
13458:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40577              		.loc 1 13458 0 discriminator 1
 40578 130c0 C1E815   		shrl	$21, %eax
 40579              	.LVL3948:
 40580              		.loc 1 13461 0 discriminator 1
 40581 130c3 4183E01F 		andl	$31, %r8d
 40582              	.LVL3949:
 40583 130c7 83E01F   		andl	$31, %eax
 40584              	.LVL3950:
 40585 130ca 8B048500 		movl	RF(,%rax,4), %eax
 40585      000000
 40586 130d1 42890485 		movl	%eax, RF(,%r8,4)
 40586      00000000 
 40587              	.L1442:
13462:src/vm3.c     **** PC  =  nPC;
13463:src/vm3.c     **** nPC  += 4;
 40588              		.loc 1 13463 0
 40589 130d9 8B150000 		movl	nPC(%rip), %edx
 40589      0000
13464:src/vm3.c     **** 
13465:src/vm3.c     **** #if INDIRECT_DEBUG
13466:src/vm3.c     **** printf("%d|jump\n",counter);
13467:src/vm3.c     **** counter++;
13468:src/vm3.c     **** #endif
13469:src/vm3.c     **** PC = nPC;
13470:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 40590              		.loc 1 13470 0
 40591 130df 81E3FFFF 		andl	$67108863, %ebx
 40591      FF03
 40592              	.LVL3951:
13471:src/vm3.c     **** nPC = address << 2;
 40593              		.loc 1 13471 0
 40594 130e5 8D049D00 		leal	0(,%rbx,4), %eax
 40594      000000
13463:src/vm3.c     **** 
 40595              		.loc 1 13463 0
GAS LISTING /tmp/cc15eBE3.s 			page 1316


 40596 130ec 8D4A04   		leal	4(%rdx), %ecx
13472:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40597              		.loc 1 13472 0
 40598 130ef 8D7207   		leal	7(%rdx), %esi
13471:src/vm3.c     **** nPC = address << 2;
 40599              		.loc 1 13471 0
 40600 130f2 89050000 		movl	%eax, nPC(%rip)
 40600      0000
13469:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 40601              		.loc 1 13469 0
 40602 130f8 890D0000 		movl	%ecx, PC(%rip)
 40602      0000
 40603              		.loc 1 13472 0
 40604 130fe 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40604      000000
 40605 13105 440FB686 		movzbl	VM_memory(%rsi), %r8d
 40605      00000000 
 40606 1310d C1E118   		sall	$24, %ecx
 40607 13110 4109C8   		orl	%ecx, %r8d
 40608 13113 8D4A05   		leal	5(%rdx), %ecx
 40609 13116 83C206   		addl	$6, %edx
 40610 13119 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40610      000000
 40611 13120 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40611      000000
 40612 13127 C1E208   		sall	$8, %edx
 40613 1312a C1E110   		sall	$16, %ecx
 40614 1312d 4109C8   		orl	%ecx, %r8d
 40615 13130 4109D0   		orl	%edx, %r8d
 40616              	.LVL3952:
13473:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40617              		.loc 1 13473 0
 40618 13133 4489C1   		movl	%r8d, %ecx
13474:src/vm3.c     ****   if (op0 == 0x0) {
13475:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 40619              		.loc 1 13475 0
 40620 13136 4488C2   		movb	%r8b, %dl
13473:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40621              		.loc 1 13473 0
 40622 13139 C1E91A   		shrl	$26, %ecx
 40623              	.LVL3953:
 40624              		.loc 1 13475 0
 40625 1313c 83E23F   		andl	$63, %edx
 40626 1313f 8D712B   		leal	43(%rcx), %esi
 40627 13142 84C9     		testb	%cl, %cl
13476:src/vm3.c     ****     op0 = op0 + funct;
13477:src/vm3.c     ****   }
13478:src/vm3.c     ****     else {
13479:src/vm3.c     ****     op0 = op0 + FIX_OP;
13480:src/vm3.c     ****   }
13481:src/vm3.c     **** 
13482:src/vm3.c     **** p = array;
13483:src/vm3.c     **** p = p[op0].next_level;
13484:src/vm3.c     **** 
13485:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40628              		.loc 1 13485 0
 40629 13144 8D4803   		leal	3(%rax), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1317


 40630              	.LVL3954:
 40631 13147 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40631      000000
 40632 1314e 89C1     		movl	%eax, %ecx
13475:src/vm3.c     ****     op0 = op0 + funct;
 40633              		.loc 1 13475 0
 40634 13150 0F45D6   		cmovne	%esi, %edx
 40635              	.LVL3955:
 40636              		.loc 1 13485 0
 40637 13153 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40637      000000
13483:src/vm3.c     **** 
 40638              		.loc 1 13483 0
 40639 1315a 0FB6D2   		movzbl	%dl, %edx
 40640 1315d 48C1E204 		salq	$4, %rdx
 40641              	.LVL3956:
 40642              		.loc 1 13485 0
 40643 13161 C1E118   		sall	$24, %ecx
 40644 13164 09CB     		orl	%ecx, %ebx
 40645 13166 8D4801   		leal	1(%rax), %ecx
 40646 13169 83C002   		addl	$2, %eax
 40647 1316c 0FB68000 		movzbl	VM_memory(%rax), %eax
 40647      000000
 40648 13173 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40648      000000
 40649 1317a C1E008   		sall	$8, %eax
 40650 1317d C1E110   		sall	$16, %ecx
 40651 13180 09CB     		orl	%ecx, %ebx
 40652 13182 09C3     		orl	%eax, %ebx
 40653              	.LVL3957:
13486:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40654              		.loc 1 13486 0
 40655 13184 89D9     		movl	%ebx, %ecx
13487:src/vm3.c     ****   if (op1 == 0x0) {
13488:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40656              		.loc 1 13488 0
 40657 13186 88D8     		movb	%bl, %al
13486:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40658              		.loc 1 13486 0
 40659 13188 C1E91A   		shrl	$26, %ecx
 40660              	.LVL3958:
 40661              		.loc 1 13488 0
 40662 1318b 83E03F   		andl	$63, %eax
 40663 1318e 8D712B   		leal	43(%rcx), %esi
 40664 13191 84C9     		testb	%cl, %cl
 40665 13193 0F45C6   		cmovne	%esi, %eax
 40666              	.LVL3959:
13489:src/vm3.c     ****     op1 = op1 + funct;
13490:src/vm3.c     ****   }
13491:src/vm3.c     ****     else {
13492:src/vm3.c     ****     op1 = op1 + FIX_OP;
13493:src/vm3.c     ****   }
13494:src/vm3.c     **** 
13495:src/vm3.c     **** goto *p[op1].code;
 40667              		.loc 1 13495 0
 40668 13196 0FB6C0   		movzbl	%al, %eax
 40669 13199 48C1E004 		salq	$4, %rax
GAS LISTING /tmp/cc15eBE3.s 			page 1318


 40670              	.LVL3960:
 40671 1319d 48038414 		addq	58088(%rsp,%rdx), %rax
 40671      E8E20000 
 40672 131a5 488B08   		movq	(%rax), %rcx
 40673 131a8 E9ABDBFE 		jmp	.L269
 40673      FF
 40674              	.LVL3961:
 40675              	.L50:
13496:src/vm3.c     **** 
13497:src/vm3.c     **** 
13498:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
13499:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13500:src/vm3.c     ****   if (op0 == 0x0) {
13501:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13502:src/vm3.c     ****     op0 = op0 + funct;
13503:src/vm3.c     ****   }
13504:src/vm3.c     ****     else {
13505:src/vm3.c     ****     op0 = op0 + FIX_OP;
13506:src/vm3.c     ****   }
13507:src/vm3.c     **** 
13508:src/vm3.c     **** p = array;
13509:src/vm3.c     **** p = p[op0].next_level;
13510:src/vm3.c     **** 
13511:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
13512:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
13513:src/vm3.c     ****   if (op1 == 0x0) {
13514:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
13515:src/vm3.c     ****     op1 = op1 + funct;
13516:src/vm3.c     ****   }
13517:src/vm3.c     ****     else {
13518:src/vm3.c     ****     op1 = op1 + FIX_OP;
13519:src/vm3.c     ****   }
13520:src/vm3.c     **** 
13521:src/vm3.c     **** goto *p[op1].code;
13522:src/vm3.c     **** 
13523:src/vm3.c     **** 
13524:src/vm3.c     **** adduPLUSsll:
13525:src/vm3.c     **** #if INDIRECT_DEBUG
13526:src/vm3.c     **** printf("%d|addu\n",counter);
13527:src/vm3.c     **** counter++;
13528:src/vm3.c     **** #endif
13529:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
13530:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40676              		.loc 1 13530 0
 40677 131ad 4489C0   		movl	%r8d, %eax
13531:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40678              		.loc 1 13531 0
 40679 131b0 4489C2   		movl	%r8d, %edx
13529:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40680              		.loc 1 13529 0
 40681 131b3 41C1E815 		shrl	$21, %r8d
 40682              	.LVL3962:
13530:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 40683              		.loc 1 13530 0
 40684 131b7 C1E810   		shrl	$16, %eax
 40685              	.LVL3963:
13532:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
GAS LISTING /tmp/cc15eBE3.s 			page 1319


 40686              		.loc 1 13532 0
 40687 131ba 4183E01F 		andl	$31, %r8d
13531:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 40688              		.loc 1 13531 0
 40689 131be C1EA0B   		shrl	$11, %edx
 40690              	.LVL3964:
 40691              		.loc 1 13532 0
 40692 131c1 83E01F   		andl	$31, %eax
 40693 131c4 83E21F   		andl	$31, %edx
13533:src/vm3.c     **** PC  =  nPC;
13534:src/vm3.c     **** nPC  += 4;
 40694              		.loc 1 13534 0
 40695 131c7 83050000 		addl	$4, nPC(%rip)
 40695      000004
 40696              	.LVL3965:
13532:src/vm3.c     **** PC  =  nPC;
 40697              		.loc 1 13532 0
 40698 131ce 8B048500 		movl	RF(,%rax,4), %eax
 40698      000000
 40699 131d5 42030485 		addl	RF(,%r8,4), %eax
 40699      00000000 
 40700 131dd 89049500 		movl	%eax, RF(,%rdx,4)
 40700      000000
13535:src/vm3.c     **** 
13536:src/vm3.c     **** #if INDIRECT_DEBUG
13537:src/vm3.c     **** printf("%d|sll\n",counter);
13538:src/vm3.c     **** counter++;
13539:src/vm3.c     **** #endif
13540:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
13541:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40701              		.loc 1 13541 0
 40702 131e4 89D8     		movl	%ebx, %eax
13542:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 40703              		.loc 1 13542 0
 40704 131e6 89DA     		movl	%ebx, %edx
13541:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 40705              		.loc 1 13541 0
 40706 131e8 C1E810   		shrl	$16, %eax
13540:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40707              		.loc 1 13540 0
 40708 131eb C1EB06   		shrl	$6, %ebx
 40709              	.LVL3966:
 40710              		.loc 1 13542 0
 40711 131ee C1EA0B   		shrl	$11, %edx
 40712              	.LVL3967:
13543:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 40713              		.loc 1 13543 0
 40714 131f1 83E01F   		andl	$31, %eax
13540:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40715              		.loc 1 13540 0
 40716 131f4 88D9     		movb	%bl, %cl
 40717              		.loc 1 13543 0
 40718 131f6 83E21F   		andl	$31, %edx
 40719 131f9 8B048500 		movl	RF(,%rax,4), %eax
 40719      000000
13540:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 40720              		.loc 1 13540 0
GAS LISTING /tmp/cc15eBE3.s 			page 1320


 40721 13200 83E11F   		andl	$31, %ecx
 40722              		.loc 1 13543 0
 40723 13203 D3E0     		sall	%cl, %eax
 40724 13205 89049500 		movl	%eax, RF(,%rdx,4)
 40724      000000
13544:src/vm3.c     **** PC  =  nPC;
 40725              		.loc 1 13544 0
 40726 1320c 8B050000 		movl	nPC(%rip), %eax
 40726      0000
13545:src/vm3.c     **** nPC  += 4;
13546:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40727              		.loc 1 13546 0
 40728 13212 8D5003   		leal	3(%rax), %edx
13545:src/vm3.c     **** nPC  += 4;
 40729              		.loc 1 13545 0
 40730 13215 8D4804   		leal	4(%rax), %ecx
13544:src/vm3.c     **** PC  =  nPC;
 40731              		.loc 1 13544 0
 40732 13218 89050000 		movl	%eax, PC(%rip)
 40732      0000
 40733              		.loc 1 13546 0
 40734 1321e 440FB682 		movzbl	VM_memory(%rdx), %r8d
 40734      00000000 
 40735 13226 89C2     		movl	%eax, %edx
13547:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13548:src/vm3.c     ****   if (op0 == 0x0) {
13549:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13550:src/vm3.c     ****     op0 = op0 + funct;
13551:src/vm3.c     ****   }
13552:src/vm3.c     ****     else {
13553:src/vm3.c     ****     op0 = op0 + FIX_OP;
13554:src/vm3.c     ****   }
13555:src/vm3.c     **** 
13556:src/vm3.c     **** p = array;
13557:src/vm3.c     **** p = p[op0].next_level;
13558:src/vm3.c     **** 
13559:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40736              		.loc 1 13559 0
 40737 13228 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40737      000000
13546:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40738              		.loc 1 13546 0
 40739 1322f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40739      000000
13545:src/vm3.c     **** nPC  += 4;
 40740              		.loc 1 13545 0
 40741 13236 890D0000 		movl	%ecx, nPC(%rip)
 40741      0000
 40742              		.loc 1 13559 0
 40743 1323c 8D4805   		leal	5(%rax), %ecx
 40744 1323f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40744      000000
13546:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40745              		.loc 1 13546 0
 40746 13246 C1E218   		sall	$24, %edx
 40747 13249 4109D0   		orl	%edx, %r8d
 40748 1324c 8D5001   		leal	1(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1321


 40749 1324f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40749      000000
 40750 13256 C1E210   		sall	$16, %edx
 40751 13259 4109D0   		orl	%edx, %r8d
 40752 1325c 8D5002   		leal	2(%rax), %edx
 40753 1325f 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40753      000000
 40754 13266 C1E208   		sall	$8, %edx
 40755 13269 4109D0   		orl	%edx, %r8d
 40756              	.LVL3968:
13547:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40757              		.loc 1 13547 0
 40758 1326c 4489C6   		movl	%r8d, %esi
13549:src/vm3.c     ****     op0 = op0 + funct;
 40759              		.loc 1 13549 0
 40760 1326f 4488C2   		movb	%r8b, %dl
13547:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40761              		.loc 1 13547 0
 40762 13272 C1EE1A   		shrl	$26, %esi
 40763              	.LVL3969:
13549:src/vm3.c     ****     op0 = op0 + funct;
 40764              		.loc 1 13549 0
 40765 13275 83E23F   		andl	$63, %edx
 40766 13278 8D7E2B   		leal	43(%rsi), %edi
 40767 1327b 4084F6   		testb	%sil, %sil
 40768 1327e 0F45D7   		cmovne	%edi, %edx
 40769              	.LVL3970:
 40770              		.loc 1 13559 0
 40771 13281 C1E110   		sall	$16, %ecx
 40772 13284 C1E318   		sall	$24, %ebx
 40773 13287 09CB     		orl	%ecx, %ebx
 40774 13289 8D4807   		leal	7(%rax), %ecx
 40775 1328c 83C006   		addl	$6, %eax
 40776 1328f 0FB68000 		movzbl	VM_memory(%rax), %eax
 40776      000000
13557:src/vm3.c     **** 
 40777              		.loc 1 13557 0
 40778 13296 0FB6D2   		movzbl	%dl, %edx
 40779              		.loc 1 13559 0
 40780 13299 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40780      000000
13557:src/vm3.c     **** 
 40781              		.loc 1 13557 0
 40782 132a0 48C1E204 		salq	$4, %rdx
 40783              	.LVL3971:
 40784              		.loc 1 13559 0
 40785 132a4 C1E008   		sall	$8, %eax
 40786 132a7 09CB     		orl	%ecx, %ebx
 40787 132a9 09C3     		orl	%eax, %ebx
 40788              	.LVL3972:
13560:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40789              		.loc 1 13560 0
 40790 132ab 89D9     		movl	%ebx, %ecx
13561:src/vm3.c     ****   if (op1 == 0x0) {
13562:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40791              		.loc 1 13562 0
 40792 132ad 88D8     		movb	%bl, %al
GAS LISTING /tmp/cc15eBE3.s 			page 1322


13560:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40793              		.loc 1 13560 0
 40794 132af C1E91A   		shrl	$26, %ecx
 40795              	.LVL3973:
 40796              		.loc 1 13562 0
 40797 132b2 83E03F   		andl	$63, %eax
 40798 132b5 8D712B   		leal	43(%rcx), %esi
 40799 132b8 84C9     		testb	%cl, %cl
 40800 132ba 0F45C6   		cmovne	%esi, %eax
 40801              	.LVL3974:
13563:src/vm3.c     ****     op1 = op1 + funct;
13564:src/vm3.c     ****   }
13565:src/vm3.c     ****     else {
13566:src/vm3.c     ****     op1 = op1 + FIX_OP;
13567:src/vm3.c     ****   }
13568:src/vm3.c     **** 
13569:src/vm3.c     **** goto *p[op1].code;
 40802              		.loc 1 13569 0
 40803 132bd 0FB6C0   		movzbl	%al, %eax
 40804 132c0 48C1E004 		salq	$4, %rax
 40805              	.LVL3975:
 40806 132c4 48038414 		addq	58088(%rsp,%rdx), %rax
 40806      E8E20000 
 40807 132cc 488B08   		movq	(%rax), %rcx
 40808 132cf E984DAFE 		jmp	.L269
 40808      FF
 40809              	.LVL3976:
 40810              	.L88:
13570:src/vm3.c     **** 
13571:src/vm3.c     **** 
13572:src/vm3.c     **** lwPLUSerror:
13573:src/vm3.c     **** #if INDIRECT_DEBUG
13574:src/vm3.c     **** printf("%d|lw\n",counter);
13575:src/vm3.c     **** counter++;
13576:src/vm3.c     **** #endif
13577:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 40811              		.loc 1 13577 0
 40812 132d4 4489C0   		movl	%r8d, %eax
13578:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
13579:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13580:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 40813              		.loc 1 13580 0
 40814 132d7 410FBFD0 		movswl	%r8w, %edx
13578:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40815              		.loc 1 13578 0
 40816 132db 41C1E810 		shrl	$16, %r8d
 40817              	.LVL3977:
13577:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40818              		.loc 1 13577 0
 40819 132df C1E815   		shrl	$21, %eax
 40820              	.LVL3978:
 40821              		.loc 1 13580 0
 40822 132e2 4183E01F 		andl	$31, %r8d
 40823 132e6 83E01F   		andl	$31, %eax
 40824 132e9 03148500 		addl	RF(,%rax,4), %edx
 40824      000000
 40825              	.LVL3979:
GAS LISTING /tmp/cc15eBE3.s 			page 1323


 40826 132f0 8D4203   		leal	3(%rdx), %eax
 40827 132f3 89D1     		movl	%edx, %ecx
 40828 132f5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40828      000000
 40829 132fc 0FB68000 		movzbl	VM_memory(%rax), %eax
 40829      000000
 40830 13303 C1E118   		sall	$24, %ecx
 40831 13306 09C8     		orl	%ecx, %eax
 40832 13308 8D4A01   		leal	1(%rdx), %ecx
 40833 1330b 83C202   		addl	$2, %edx
 40834 1330e 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40834      000000
 40835 13315 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40835      000000
 40836 1331c C1E208   		sall	$8, %edx
 40837 1331f C1E110   		sall	$16, %ecx
 40838 13322 09C8     		orl	%ecx, %eax
 40839 13324 09D0     		orl	%edx, %eax
 40840 13326 42890485 		movl	%eax, RF(,%r8,4)
 40840      00000000 
13581:src/vm3.c     **** PC  =  nPC;
13582:src/vm3.c     **** nPC  += 4;
 40841              		.loc 1 13582 0
 40842 1332e 8B050000 		movl	nPC(%rip), %eax
 40842      0000
 40843 13334 8D5004   		leal	4(%rax), %edx
13583:src/vm3.c     **** 
13584:src/vm3.c     **** #if INDIRECT_DEBUG
13585:src/vm3.c     **** printf("Error, unknown instr1uction %d.\n", instr1);
13586:src/vm3.c     **** #endif
13587:src/vm3.c     **** PC  =  nPC;
13588:src/vm3.c     **** nPC  += 4;
13589:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40844              		.loc 1 13589 0
 40845 13337 8D7007   		leal	7(%rax), %esi
13588:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40846              		.loc 1 13588 0
 40847 1333a 8D4808   		leal	8(%rax), %ecx
13587:src/vm3.c     **** nPC  += 4;
 40848              		.loc 1 13587 0
 40849 1333d 89150000 		movl	%edx, PC(%rip)
 40849      0000
 40850              		.loc 1 13589 0
 40851 13343 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40851      000000
 40852 1334a 440FB686 		movzbl	VM_memory(%rsi), %r8d
 40852      00000000 
13590:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13591:src/vm3.c     ****   if (op0 == 0x0) {
13592:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13593:src/vm3.c     ****     op0 = op0 + funct;
13594:src/vm3.c     ****   }
13595:src/vm3.c     ****     else {
13596:src/vm3.c     ****     op0 = op0 + FIX_OP;
13597:src/vm3.c     ****   }
13598:src/vm3.c     **** 
13599:src/vm3.c     **** p = array;
GAS LISTING /tmp/cc15eBE3.s 			page 1324


13600:src/vm3.c     **** p = p[op0].next_level;
13601:src/vm3.c     **** 
13602:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40853              		.loc 1 13602 0
 40854 13352 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 40854      000000
 40855              	.LVL3980:
13588:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 40856              		.loc 1 13588 0
 40857 13359 890D0000 		movl	%ecx, nPC(%rip)
 40857      0000
 40858              		.loc 1 13602 0
 40859 1335f 8D4809   		leal	9(%rax), %ecx
13589:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40860              		.loc 1 13589 0
 40861 13362 C1E218   		sall	$24, %edx
 40862              		.loc 1 13602 0
 40863 13365 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40863      000000
13589:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40864              		.loc 1 13589 0
 40865 1336c 4109D0   		orl	%edx, %r8d
 40866 1336f 8D5005   		leal	5(%rax), %edx
 40867 13372 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40867      000000
 40868 13379 C1E210   		sall	$16, %edx
 40869 1337c 4109D0   		orl	%edx, %r8d
 40870 1337f 8D5006   		leal	6(%rax), %edx
 40871 13382 0FB69200 		movzbl	VM_memory(%rdx), %edx
 40871      000000
 40872 13389 C1E208   		sall	$8, %edx
 40873 1338c 4109D0   		orl	%edx, %r8d
 40874              	.LVL3981:
13590:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40875              		.loc 1 13590 0
 40876 1338f 4489C6   		movl	%r8d, %esi
13592:src/vm3.c     ****     op0 = op0 + funct;
 40877              		.loc 1 13592 0
 40878 13392 4488C2   		movb	%r8b, %dl
13590:src/vm3.c     ****   if (op0 == 0x0) {
 40879              		.loc 1 13590 0
 40880 13395 C1EE1A   		shrl	$26, %esi
 40881              	.LVL3982:
13592:src/vm3.c     ****     op0 = op0 + funct;
 40882              		.loc 1 13592 0
 40883 13398 83E23F   		andl	$63, %edx
 40884 1339b 8D7E2B   		leal	43(%rsi), %edi
 40885 1339e 4084F6   		testb	%sil, %sil
 40886 133a1 0F45D7   		cmovne	%edi, %edx
 40887              	.LVL3983:
 40888              		.loc 1 13602 0
 40889 133a4 C1E110   		sall	$16, %ecx
 40890 133a7 C1E318   		sall	$24, %ebx
 40891 133aa 09CB     		orl	%ecx, %ebx
 40892 133ac 8D480B   		leal	11(%rax), %ecx
 40893 133af 83C00A   		addl	$10, %eax
 40894 133b2 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1325


 40894      000000
13600:src/vm3.c     **** 
 40895              		.loc 1 13600 0
 40896 133b9 0FB6D2   		movzbl	%dl, %edx
 40897              		.loc 1 13602 0
 40898 133bc 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40898      000000
13600:src/vm3.c     **** 
 40899              		.loc 1 13600 0
 40900 133c3 48C1E204 		salq	$4, %rdx
 40901              	.LVL3984:
 40902              		.loc 1 13602 0
 40903 133c7 C1E008   		sall	$8, %eax
 40904 133ca 09CB     		orl	%ecx, %ebx
 40905 133cc 09C3     		orl	%eax, %ebx
 40906              	.LVL3985:
13603:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40907              		.loc 1 13603 0
 40908 133ce 89D9     		movl	%ebx, %ecx
13604:src/vm3.c     ****   if (op1 == 0x0) {
13605:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 40909              		.loc 1 13605 0
 40910 133d0 88D8     		movb	%bl, %al
13603:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 40911              		.loc 1 13603 0
 40912 133d2 C1E91A   		shrl	$26, %ecx
 40913              	.LVL3986:
 40914              		.loc 1 13605 0
 40915 133d5 83E03F   		andl	$63, %eax
 40916 133d8 8D712B   		leal	43(%rcx), %esi
 40917 133db 84C9     		testb	%cl, %cl
 40918 133dd 0F45C6   		cmovne	%esi, %eax
 40919              	.LVL3987:
13606:src/vm3.c     ****     op1 = op1 + funct;
13607:src/vm3.c     ****   }
13608:src/vm3.c     ****     else {
13609:src/vm3.c     ****     op1 = op1 + FIX_OP;
13610:src/vm3.c     ****   }
13611:src/vm3.c     **** 
13612:src/vm3.c     **** goto *p[op1].code;
 40920              		.loc 1 13612 0
 40921 133e0 0FB6C0   		movzbl	%al, %eax
 40922 133e3 48C1E004 		salq	$4, %rax
 40923              	.LVL3988:
 40924 133e7 48038414 		addq	58088(%rsp,%rdx), %rax
 40924      E8E20000 
 40925 133ef 488B08   		movq	(%rax), %rcx
 40926 133f2 E961D9FE 		jmp	.L269
 40926      FF
 40927              	.LVL3989:
 40928              	.L123:
13613:src/vm3.c     **** 
13614:src/vm3.c     **** 
13615:src/vm3.c     **** beqPLUSsw:
13616:src/vm3.c     **** #if INDIRECT_DEBUG
13617:src/vm3.c     **** printf("%d|beq\n",counter);
13618:src/vm3.c     **** counter++;
GAS LISTING /tmp/cc15eBE3.s 			page 1326


13619:src/vm3.c     **** #endif
13620:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 40929              		.loc 1 13620 0
 40930 133f7 4489C2   		movl	%r8d, %edx
13621:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40931              		.loc 1 13621 0
 40932 133fa 4489C0   		movl	%r8d, %eax
13620:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 40933              		.loc 1 13620 0
 40934 133fd C1EA15   		shrl	$21, %edx
 40935              		.loc 1 13621 0
 40936 13400 C1E810   		shrl	$16, %eax
13622:src/vm3.c     **** if (RF[rs] == RF[rt])
 40937              		.loc 1 13622 0
 40938 13403 83E01F   		andl	$31, %eax
 40939 13406 83E21F   		andl	$31, %edx
 40940 13409 8B048500 		movl	RF(,%rax,4), %eax
 40940      000000
 40941 13410 39049500 		cmpl	%eax, RF(,%rdx,4)
 40941      000000
 40942 13417 0F85CE00 		jne	.L1455
 40942      0000
 40943              	.LVL3990:
13623:src/vm3.c     **** {
13624:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
13625:src/vm3.c     ****   PC  =  nPC;
 40944              		.loc 1 13625 0
 40945 1341d 8B050000 		movl	nPC(%rip), %eax
 40945      0000
13626:src/vm3.c     ****   nPC  += (immediate << 2);
 40946              		.loc 1 13626 0
 40947 13423 450FBFC0 		movswl	%r8w, %r8d
 40948              	.LVL3991:
13627:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 40949              		.loc 1 13627 0
 40950 13427 8D4803   		leal	3(%rax), %ecx
13626:src/vm3.c     ****   nPC  += (immediate << 2);
 40951              		.loc 1 13626 0
 40952 1342a 428D1480 		leal	(%rax,%r8,4), %edx
13625:src/vm3.c     ****   nPC  += (immediate << 2);
 40953              		.loc 1 13625 0
 40954 1342e 89050000 		movl	%eax, PC(%rip)
 40954      0000
 40955              		.loc 1 13627 0
 40956 13434 440FB681 		movzbl	VM_memory(%rcx), %r8d
 40956      00000000 
 40957              	.LVL3992:
 40958 1343c 89C1     		movl	%eax, %ecx
13626:src/vm3.c     ****   nPC  += (immediate << 2);
 40959              		.loc 1 13626 0
 40960 1343e 89150000 		movl	%edx, nPC(%rip)
 40960      0000
 40961              		.loc 1 13627 0
 40962 13444 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40962      000000
 40963 1344b C1E118   		sall	$24, %ecx
 40964 1344e 4109C8   		orl	%ecx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1327


 40965 13451 8D4801   		leal	1(%rax), %ecx
 40966 13454 83C002   		addl	$2, %eax
 40967 13457 0FB68000 		movzbl	VM_memory(%rax), %eax
 40967      000000
 40968 1345e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 40968      000000
 40969 13465 C1E008   		sall	$8, %eax
 40970 13468 C1E110   		sall	$16, %ecx
 40971 1346b 4109C8   		orl	%ecx, %r8d
 40972 1346e 4109C0   		orl	%eax, %r8d
 40973              	.LVL3993:
13628:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40974              		.loc 1 13628 0
 40975 13471 4489C0   		movl	%r8d, %eax
13629:src/vm3.c     ****   if (op0 == 0x0) {
13630:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 40976              		.loc 1 13630 0
 40977 13474 4488C1   		movb	%r8b, %cl
13628:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 40978              		.loc 1 13628 0
 40979 13477 C1E81A   		shrl	$26, %eax
 40980              	.LVL3994:
 40981              		.loc 1 13630 0
 40982 1347a 83E13F   		andl	$63, %ecx
 40983 1347d 8D702B   		leal	43(%rax), %esi
 40984 13480 84C0     		testb	%al, %al
13631:src/vm3.c     ****     op0 = op0 + funct;
13632:src/vm3.c     ****   }
13633:src/vm3.c     ****     else {
13634:src/vm3.c     ****     op0 = op0 + FIX_OP;
13635:src/vm3.c     ****   }
13636:src/vm3.c     **** 
13637:src/vm3.c     **** p = array;
13638:src/vm3.c     **** p = p[op0].next_level;
13639:src/vm3.c     **** 
13640:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 40985              		.loc 1 13640 0
 40986 13482 8D4203   		leal	3(%rdx), %eax
 40987              	.LVL3995:
 40988 13485 0FB69800 		movzbl	VM_memory(%rax), %ebx
 40988      000000
 40989              	.LVL3996:
 40990 1348c 89D0     		movl	%edx, %eax
13630:src/vm3.c     ****     op0 = op0 + funct;
 40991              		.loc 1 13630 0
 40992 1348e 0F45CE   		cmovne	%esi, %ecx
 40993              	.LVL3997:
 40994              		.loc 1 13640 0
 40995 13491 0FB68000 		movzbl	VM_memory(%rax), %eax
 40995      000000
13638:src/vm3.c     **** 
 40996              		.loc 1 13638 0
 40997 13498 0FB6C9   		movzbl	%cl, %ecx
 40998 1349b 48C1E104 		salq	$4, %rcx
 40999              	.LVL3998:
 41000              		.loc 1 13640 0
 41001 1349f C1E018   		sall	$24, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1328


 41002 134a2 09C3     		orl	%eax, %ebx
 41003 134a4 8D4201   		leal	1(%rdx), %eax
 41004 134a7 0FB68000 		movzbl	VM_memory(%rax), %eax
 41004      000000
 41005 134ae C1E010   		sall	$16, %eax
 41006 134b1 09C3     		orl	%eax, %ebx
 41007 134b3 8D4202   		leal	2(%rdx), %eax
 41008 134b6 0FB68000 		movzbl	VM_memory(%rax), %eax
 41008      000000
 41009 134bd C1E008   		sall	$8, %eax
 41010 134c0 09C3     		orl	%eax, %ebx
 41011              	.LVL3999:
13641:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41012              		.loc 1 13641 0
 41013 134c2 89DA     		movl	%ebx, %edx
13642:src/vm3.c     ****   if (op1 == 0x0) {
13643:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41014              		.loc 1 13643 0
 41015 134c4 88D8     		movb	%bl, %al
13641:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41016              		.loc 1 13641 0
 41017 134c6 C1EA1A   		shrl	$26, %edx
 41018              	.LVL4000:
 41019              		.loc 1 13643 0
 41020 134c9 83E03F   		andl	$63, %eax
 41021 134cc 8D722B   		leal	43(%rdx), %esi
 41022 134cf 84D2     		testb	%dl, %dl
 41023 134d1 0F45C6   		cmovne	%esi, %eax
 41024              	.LVL4001:
13644:src/vm3.c     ****     op1 = op1 + funct;
13645:src/vm3.c     ****   }
13646:src/vm3.c     ****     else {
13647:src/vm3.c     ****     op1 = op1 + FIX_OP;
13648:src/vm3.c     ****   }
13649:src/vm3.c     **** 
13650:src/vm3.c     **** goto *p[op1].code;
 41025              		.loc 1 13650 0
 41026 134d4 0FB6C0   		movzbl	%al, %eax
 41027 134d7 48C1E004 		salq	$4, %rax
 41028              	.LVL4002:
 41029 134db 4803840C 		addq	58088(%rsp,%rcx), %rax
 41029      E8E20000 
 41030 134e3 488B08   		movq	(%rax), %rcx
 41031              	.LVL4003:
 41032 134e6 E96DD8FE 		jmp	.L269
 41032      FF
 41033              	.LVL4004:
 41034              	.L1455:
13651:src/vm3.c     **** 
13652:src/vm3.c     **** 
13653:src/vm3.c     **** }
13654:src/vm3.c     **** else
13655:src/vm3.c     **** {
13656:src/vm3.c     ****   PC  =  nPC;
13657:src/vm3.c     ****   nPC  += 4;
13658:src/vm3.c     **** }
13659:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1329


13660:src/vm3.c     **** #if INDIRECT_DEBUG
13661:src/vm3.c     **** printf("%d|sw\n",counter);
13662:src/vm3.c     **** counter++;
13663:src/vm3.c     **** #endif
13664:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 41035              		.loc 1 13664 0
 41036 134eb 89D8     		movl	%ebx, %eax
13665:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13666:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13667:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 41037              		.loc 1 13667 0
 41038 134ed 0FBFCB   		movswl	%bx, %ecx
13665:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41039              		.loc 1 13665 0
 41040 134f0 C1EB10   		shrl	$16, %ebx
 41041              	.LVL4005:
13664:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41042              		.loc 1 13664 0
 41043 134f3 C1E815   		shrl	$21, %eax
 41044              	.LVL4006:
 41045              		.loc 1 13667 0
 41046 134f6 83E31F   		andl	$31, %ebx
13657:src/vm3.c     **** }
 41047              		.loc 1 13657 0
 41048 134f9 83050000 		addl	$4, nPC(%rip)
 41048      000004
 41049              	.LVL4007:
 41050              		.loc 1 13667 0
 41051 13500 83E01F   		andl	$31, %eax
 41052 13503 8B148500 		movl	RF(,%rax,4), %edx
 41052      000000
 41053 1350a 8B049D00 		movl	RF(,%rbx,4), %eax
 41053      000000
 41054 13511 8D3411   		leal	(%rcx,%rdx), %esi
 41055 13514 89C7     		movl	%eax, %edi
 41056 13516 C1EF18   		shrl	$24, %edi
 41057 13519 4088BE00 		movb	%dil, VM_memory(%rsi)
 41057      000000
13668:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 41058              		.loc 1 13668 0
 41059 13520 8D741101 		leal	1(%rcx,%rdx), %esi
 41060 13524 89C7     		movl	%eax, %edi
 41061 13526 C1EF10   		shrl	$16, %edi
 41062 13529 4088BE00 		movb	%dil, VM_memory(%rsi)
 41062      000000
13669:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 41063              		.loc 1 13669 0
 41064 13530 8D741102 		leal	2(%rcx,%rdx), %esi
13670:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 41065              		.loc 1 13670 0
 41066 13534 8D541103 		leal	3(%rcx,%rdx), %edx
13669:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 41067              		.loc 1 13669 0
 41068 13538 0FB6FC   		movzbl	%ah, %edi
 41069 1353b 4088BE00 		movb	%dil, VM_memory(%rsi)
 41069      000000
 41070              		.loc 1 13670 0
GAS LISTING /tmp/cc15eBE3.s 			page 1330


 41071 13542 88820000 		movb	%al, VM_memory(%rdx)
 41071      0000
13671:src/vm3.c     **** PC  =  nPC;
 41072              		.loc 1 13671 0
 41073 13548 8B050000 		movl	nPC(%rip), %eax
 41073      0000
13672:src/vm3.c     **** nPC  += 4;
13673:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41074              		.loc 1 13673 0
 41075 1354e 8D5003   		leal	3(%rax), %edx
13672:src/vm3.c     **** nPC  += 4;
 41076              		.loc 1 13672 0
 41077 13551 8D4804   		leal	4(%rax), %ecx
13671:src/vm3.c     **** PC  =  nPC;
 41078              		.loc 1 13671 0
 41079 13554 89050000 		movl	%eax, PC(%rip)
 41079      0000
 41080              		.loc 1 13673 0
 41081 1355a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 41081      00000000 
 41082              	.LVL4008:
 41083 13562 89C2     		movl	%eax, %edx
13674:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13675:src/vm3.c     ****   if (op0 == 0x0) {
13676:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13677:src/vm3.c     ****     op0 = op0 + funct;
13678:src/vm3.c     ****   }
13679:src/vm3.c     ****     else {
13680:src/vm3.c     ****     op0 = op0 + FIX_OP;
13681:src/vm3.c     ****   }
13682:src/vm3.c     **** 
13683:src/vm3.c     **** p = array;
13684:src/vm3.c     **** p = p[op0].next_level;
13685:src/vm3.c     **** 
13686:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41084              		.loc 1 13686 0
 41085 13564 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41085      000000
13673:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41086              		.loc 1 13673 0
 41087 1356b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41087      000000
13672:src/vm3.c     **** nPC  += 4;
 41088              		.loc 1 13672 0
 41089 13572 890D0000 		movl	%ecx, nPC(%rip)
 41089      0000
 41090              		.loc 1 13686 0
 41091 13578 8D4805   		leal	5(%rax), %ecx
 41092 1357b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41092      000000
13673:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41093              		.loc 1 13673 0
 41094 13582 C1E218   		sall	$24, %edx
 41095 13585 4109D0   		orl	%edx, %r8d
 41096 13588 8D5001   		leal	1(%rax), %edx
 41097 1358b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41097      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1331


 41098 13592 C1E210   		sall	$16, %edx
 41099 13595 4109D0   		orl	%edx, %r8d
 41100 13598 8D5002   		leal	2(%rax), %edx
 41101 1359b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41101      000000
 41102 135a2 C1E208   		sall	$8, %edx
 41103 135a5 4109D0   		orl	%edx, %r8d
 41104              	.LVL4009:
13674:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41105              		.loc 1 13674 0
 41106 135a8 4489C6   		movl	%r8d, %esi
13676:src/vm3.c     ****     op0 = op0 + funct;
 41107              		.loc 1 13676 0
 41108 135ab 4488C2   		movb	%r8b, %dl
13674:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41109              		.loc 1 13674 0
 41110 135ae C1EE1A   		shrl	$26, %esi
 41111              	.LVL4010:
13676:src/vm3.c     ****     op0 = op0 + funct;
 41112              		.loc 1 13676 0
 41113 135b1 83E23F   		andl	$63, %edx
 41114 135b4 8D7E2B   		leal	43(%rsi), %edi
 41115 135b7 4084F6   		testb	%sil, %sil
 41116 135ba 0F45D7   		cmovne	%edi, %edx
 41117              	.LVL4011:
 41118              		.loc 1 13686 0
 41119 135bd C1E110   		sall	$16, %ecx
 41120 135c0 C1E318   		sall	$24, %ebx
 41121 135c3 09CB     		orl	%ecx, %ebx
 41122 135c5 8D4807   		leal	7(%rax), %ecx
 41123 135c8 83C006   		addl	$6, %eax
 41124 135cb 0FB68000 		movzbl	VM_memory(%rax), %eax
 41124      000000
13684:src/vm3.c     **** 
 41125              		.loc 1 13684 0
 41126 135d2 0FB6D2   		movzbl	%dl, %edx
 41127              		.loc 1 13686 0
 41128 135d5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41128      000000
13684:src/vm3.c     **** 
 41129              		.loc 1 13684 0
 41130 135dc 48C1E204 		salq	$4, %rdx
 41131              	.LVL4012:
 41132              		.loc 1 13686 0
 41133 135e0 C1E008   		sall	$8, %eax
 41134 135e3 09CB     		orl	%ecx, %ebx
 41135 135e5 09C3     		orl	%eax, %ebx
 41136              	.LVL4013:
13687:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41137              		.loc 1 13687 0
 41138 135e7 89D9     		movl	%ebx, %ecx
13688:src/vm3.c     ****   if (op1 == 0x0) {
13689:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41139              		.loc 1 13689 0
 41140 135e9 88D8     		movb	%bl, %al
13687:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41141              		.loc 1 13687 0
GAS LISTING /tmp/cc15eBE3.s 			page 1332


 41142 135eb C1E91A   		shrl	$26, %ecx
 41143              	.LVL4014:
 41144              		.loc 1 13689 0
 41145 135ee 83E03F   		andl	$63, %eax
 41146 135f1 8D712B   		leal	43(%rcx), %esi
 41147 135f4 84C9     		testb	%cl, %cl
 41148 135f6 0F45C6   		cmovne	%esi, %eax
 41149              	.LVL4015:
13690:src/vm3.c     ****     op1 = op1 + funct;
13691:src/vm3.c     ****   }
13692:src/vm3.c     ****     else {
13693:src/vm3.c     ****     op1 = op1 + FIX_OP;
13694:src/vm3.c     ****   }
13695:src/vm3.c     **** 
13696:src/vm3.c     **** goto *p[op1].code;
 41150              		.loc 1 13696 0
 41151 135f9 0FB6C0   		movzbl	%al, %eax
 41152 135fc 48C1E004 		salq	$4, %rax
 41153              	.LVL4016:
 41154 13600 48038414 		addq	58088(%rsp,%rdx), %rax
 41154      E8E20000 
 41155 13608 488B08   		movq	(%rax), %rcx
 41156 1360b E948D7FE 		jmp	.L269
 41156      FF
 41157              	.LVL4017:
 41158              	.L63:
13697:src/vm3.c     **** 
13698:src/vm3.c     **** 
13699:src/vm3.c     **** adduPLUSslti:
13700:src/vm3.c     **** #if INDIRECT_DEBUG
13701:src/vm3.c     **** printf("%d|addu\n",counter);
13702:src/vm3.c     **** counter++;
13703:src/vm3.c     **** #endif
13704:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
13705:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41159              		.loc 1 13705 0
 41160 13610 4489C0   		movl	%r8d, %eax
13706:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 41161              		.loc 1 13706 0
 41162 13613 4489C2   		movl	%r8d, %edx
13704:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41163              		.loc 1 13704 0
 41164 13616 41C1E815 		shrl	$21, %r8d
 41165              	.LVL4018:
13705:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 41166              		.loc 1 13705 0
 41167 1361a C1E810   		shrl	$16, %eax
 41168              	.LVL4019:
13707:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 41169              		.loc 1 13707 0
 41170 1361d 4183E01F 		andl	$31, %r8d
13706:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 41171              		.loc 1 13706 0
 41172 13621 C1EA0B   		shrl	$11, %edx
 41173              	.LVL4020:
 41174              		.loc 1 13707 0
 41175 13624 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1333


 41176 13627 83E21F   		andl	$31, %edx
13708:src/vm3.c     **** PC  =  nPC;
13709:src/vm3.c     **** nPC  += 4;
 41177              		.loc 1 13709 0
 41178 1362a 83050000 		addl	$4, nPC(%rip)
 41178      000004
 41179              	.LVL4021:
13707:src/vm3.c     **** PC  =  nPC;
 41180              		.loc 1 13707 0
 41181 13631 8B048500 		movl	RF(,%rax,4), %eax
 41181      000000
 41182 13638 42030485 		addl	RF(,%r8,4), %eax
 41182      00000000 
 41183 13640 89049500 		movl	%eax, RF(,%rdx,4)
 41183      000000
13710:src/vm3.c     **** 
13711:src/vm3.c     **** #if INDIRECT_DEBUG
13712:src/vm3.c     **** printf("%d|slti\n",counter);
13713:src/vm3.c     **** counter++;
13714:src/vm3.c     **** #endif
13715:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 41184              		.loc 1 13715 0
 41185 13647 89DA     		movl	%ebx, %edx
13716:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41186              		.loc 1 13716 0
 41187 13649 89D8     		movl	%ebx, %eax
13715:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41188              		.loc 1 13715 0
 41189 1364b C1EA15   		shrl	$21, %edx
 41190              		.loc 1 13716 0
 41191 1364e C1E810   		shrl	$16, %eax
13717:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13718:src/vm3.c     **** RF[rt] = (RF[rs] < immediate)?1:0;
 41192              		.loc 1 13718 0
 41193 13651 0FBFDB   		movswl	%bx, %ebx
 41194              	.LVL4022:
 41195 13654 83E21F   		andl	$31, %edx
 41196 13657 83E01F   		andl	$31, %eax
 41197 1365a 391C9500 		cmpl	%ebx, RF(,%rdx,4)
 41197      000000
 41198 13661 0F92C2   		setb	%dl
 41199 13664 0FB6D2   		movzbl	%dl, %edx
 41200 13667 89148500 		movl	%edx, RF(,%rax,4)
 41200      000000
13719:src/vm3.c     **** PC  =  nPC;
 41201              		.loc 1 13719 0
 41202 1366e 8B050000 		movl	nPC(%rip), %eax
 41202      0000
13720:src/vm3.c     **** nPC  += 4;
13721:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41203              		.loc 1 13721 0
 41204 13674 8D5003   		leal	3(%rax), %edx
13720:src/vm3.c     **** nPC  += 4;
 41205              		.loc 1 13720 0
 41206 13677 8D4804   		leal	4(%rax), %ecx
13719:src/vm3.c     **** PC  =  nPC;
 41207              		.loc 1 13719 0
GAS LISTING /tmp/cc15eBE3.s 			page 1334


 41208 1367a 89050000 		movl	%eax, PC(%rip)
 41208      0000
 41209              		.loc 1 13721 0
 41210 13680 440FB682 		movzbl	VM_memory(%rdx), %r8d
 41210      00000000 
 41211 13688 89C2     		movl	%eax, %edx
13722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13723:src/vm3.c     ****   if (op0 == 0x0) {
13724:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13725:src/vm3.c     ****     op0 = op0 + funct;
13726:src/vm3.c     ****   }
13727:src/vm3.c     ****     else {
13728:src/vm3.c     ****     op0 = op0 + FIX_OP;
13729:src/vm3.c     ****   }
13730:src/vm3.c     **** 
13731:src/vm3.c     **** p = array;
13732:src/vm3.c     **** p = p[op0].next_level;
13733:src/vm3.c     **** 
13734:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41212              		.loc 1 13734 0
 41213 1368a 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41213      000000
 41214              	.LVL4023:
13721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41215              		.loc 1 13721 0
 41216 13691 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41216      000000
13720:src/vm3.c     **** nPC  += 4;
 41217              		.loc 1 13720 0
 41218 13698 890D0000 		movl	%ecx, nPC(%rip)
 41218      0000
 41219              		.loc 1 13734 0
 41220 1369e 8D4805   		leal	5(%rax), %ecx
 41221 136a1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41221      000000
13721:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41222              		.loc 1 13721 0
 41223 136a8 C1E218   		sall	$24, %edx
 41224 136ab 4109D0   		orl	%edx, %r8d
 41225 136ae 8D5001   		leal	1(%rax), %edx
 41226 136b1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41226      000000
 41227 136b8 C1E210   		sall	$16, %edx
 41228 136bb 4109D0   		orl	%edx, %r8d
 41229 136be 8D5002   		leal	2(%rax), %edx
 41230 136c1 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41230      000000
 41231 136c8 C1E208   		sall	$8, %edx
 41232 136cb 4109D0   		orl	%edx, %r8d
 41233              	.LVL4024:
13722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41234              		.loc 1 13722 0
 41235 136ce 4489C6   		movl	%r8d, %esi
13724:src/vm3.c     ****     op0 = op0 + funct;
 41236              		.loc 1 13724 0
 41237 136d1 4488C2   		movb	%r8b, %dl
13722:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1335


 41238              		.loc 1 13722 0
 41239 136d4 C1EE1A   		shrl	$26, %esi
 41240              	.LVL4025:
13724:src/vm3.c     ****     op0 = op0 + funct;
 41241              		.loc 1 13724 0
 41242 136d7 83E23F   		andl	$63, %edx
 41243 136da 8D7E2B   		leal	43(%rsi), %edi
 41244 136dd 4084F6   		testb	%sil, %sil
 41245 136e0 0F45D7   		cmovne	%edi, %edx
 41246              	.LVL4026:
 41247              		.loc 1 13734 0
 41248 136e3 C1E110   		sall	$16, %ecx
 41249 136e6 C1E318   		sall	$24, %ebx
 41250 136e9 09CB     		orl	%ecx, %ebx
 41251 136eb 8D4807   		leal	7(%rax), %ecx
 41252 136ee 83C006   		addl	$6, %eax
 41253 136f1 0FB68000 		movzbl	VM_memory(%rax), %eax
 41253      000000
13732:src/vm3.c     **** 
 41254              		.loc 1 13732 0
 41255 136f8 0FB6D2   		movzbl	%dl, %edx
 41256              		.loc 1 13734 0
 41257 136fb 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41257      000000
13732:src/vm3.c     **** 
 41258              		.loc 1 13732 0
 41259 13702 48C1E204 		salq	$4, %rdx
 41260              	.LVL4027:
 41261              		.loc 1 13734 0
 41262 13706 C1E008   		sall	$8, %eax
 41263 13709 09CB     		orl	%ecx, %ebx
 41264 1370b 09C3     		orl	%eax, %ebx
 41265              	.LVL4028:
13735:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41266              		.loc 1 13735 0
 41267 1370d 89D9     		movl	%ebx, %ecx
13736:src/vm3.c     ****   if (op1 == 0x0) {
13737:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41268              		.loc 1 13737 0
 41269 1370f 88D8     		movb	%bl, %al
13735:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41270              		.loc 1 13735 0
 41271 13711 C1E91A   		shrl	$26, %ecx
 41272              	.LVL4029:
 41273              		.loc 1 13737 0
 41274 13714 83E03F   		andl	$63, %eax
 41275 13717 8D712B   		leal	43(%rcx), %esi
 41276 1371a 84C9     		testb	%cl, %cl
 41277 1371c 0F45C6   		cmovne	%esi, %eax
 41278              	.LVL4030:
13738:src/vm3.c     ****     op1 = op1 + funct;
13739:src/vm3.c     ****   }
13740:src/vm3.c     ****     else {
13741:src/vm3.c     ****     op1 = op1 + FIX_OP;
13742:src/vm3.c     ****   }
13743:src/vm3.c     **** 
13744:src/vm3.c     **** goto *p[op1].code;
GAS LISTING /tmp/cc15eBE3.s 			page 1336


 41279              		.loc 1 13744 0
 41280 1371f 0FB6C0   		movzbl	%al, %eax
 41281 13722 48C1E004 		salq	$4, %rax
 41282              	.LVL4031:
 41283 13726 48038414 		addq	58088(%rsp,%rdx), %rax
 41283      E8E20000 
 41284 1372e 488B08   		movq	(%rax), %rcx
 41285 13731 E922D6FE 		jmp	.L269
 41285      FF
 41286              	.LVL4032:
 41287              	.L104:
13745:src/vm3.c     **** 
13746:src/vm3.c     **** 
13747:src/vm3.c     **** lwPLUSsw:
13748:src/vm3.c     **** #if INDIRECT_DEBUG
13749:src/vm3.c     **** printf("%d|lw\n",counter);
13750:src/vm3.c     **** counter++;
13751:src/vm3.c     **** #endif
13752:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 41288              		.loc 1 13752 0
 41289 13736 4489C0   		movl	%r8d, %eax
13753:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
13754:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13755:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 41290              		.loc 1 13755 0
 41291 13739 410FBFD0 		movswl	%r8w, %edx
13753:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41292              		.loc 1 13753 0
 41293 1373d 41C1E810 		shrl	$16, %r8d
 41294              	.LVL4033:
13752:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41295              		.loc 1 13752 0
 41296 13741 C1E815   		shrl	$21, %eax
 41297              	.LVL4034:
 41298              		.loc 1 13755 0
 41299 13744 4183E01F 		andl	$31, %r8d
13756:src/vm3.c     **** PC  =  nPC;
13757:src/vm3.c     **** nPC  += 4;
 41300              		.loc 1 13757 0
 41301 13748 83050000 		addl	$4, nPC(%rip)
 41301      000004
 41302              	.LVL4035:
13755:src/vm3.c     **** PC  =  nPC;
 41303              		.loc 1 13755 0
 41304 1374f 83E01F   		andl	$31, %eax
 41305 13752 03148500 		addl	RF(,%rax,4), %edx
 41305      000000
 41306 13759 8D4203   		leal	3(%rdx), %eax
 41307 1375c 89D1     		movl	%edx, %ecx
 41308 1375e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41308      000000
 41309 13765 0FB68000 		movzbl	VM_memory(%rax), %eax
 41309      000000
 41310 1376c C1E118   		sall	$24, %ecx
 41311 1376f 09C8     		orl	%ecx, %eax
 41312 13771 8D4A01   		leal	1(%rdx), %ecx
 41313 13774 83C202   		addl	$2, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1337


 41314 13777 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41314      000000
 41315 1377e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41315      000000
 41316 13785 C1E208   		sall	$8, %edx
 41317 13788 C1E110   		sall	$16, %ecx
 41318 1378b 09C8     		orl	%ecx, %eax
13758:src/vm3.c     **** 
13759:src/vm3.c     **** #if INDIRECT_DEBUG
13760:src/vm3.c     **** printf("%d|sw\n",counter);
13761:src/vm3.c     **** counter++;
13762:src/vm3.c     **** #endif
13763:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
13764:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13765:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13766:src/vm3.c     **** VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 41319              		.loc 1 13766 0
 41320 1378d 0FBFCB   		movswl	%bx, %ecx
13755:src/vm3.c     **** PC  =  nPC;
 41321              		.loc 1 13755 0
 41322 13790 09D0     		orl	%edx, %eax
 41323 13792 42890485 		movl	%eax, RF(,%r8,4)
 41323      00000000 
13763:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41324              		.loc 1 13763 0
 41325 1379a 89D8     		movl	%ebx, %eax
13764:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 41326              		.loc 1 13764 0
 41327 1379c C1EB10   		shrl	$16, %ebx
 41328              	.LVL4036:
13763:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41329              		.loc 1 13763 0
 41330 1379f C1E815   		shrl	$21, %eax
 41331              	.LVL4037:
 41332              		.loc 1 13766 0
 41333 137a2 83E31F   		andl	$31, %ebx
 41334 137a5 83E01F   		andl	$31, %eax
 41335 137a8 8B148500 		movl	RF(,%rax,4), %edx
 41335      000000
 41336 137af 8B049D00 		movl	RF(,%rbx,4), %eax
 41336      000000
 41337 137b6 8D3411   		leal	(%rcx,%rdx), %esi
 41338 137b9 89C7     		movl	%eax, %edi
 41339 137bb C1EF18   		shrl	$24, %edi
 41340 137be 4088BE00 		movb	%dil, VM_memory(%rsi)
 41340      000000
13767:src/vm3.c     **** VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 41341              		.loc 1 13767 0
 41342 137c5 8D741101 		leal	1(%rcx,%rdx), %esi
 41343 137c9 89C7     		movl	%eax, %edi
 41344 137cb C1EF10   		shrl	$16, %edi
 41345 137ce 4088BE00 		movb	%dil, VM_memory(%rsi)
 41345      000000
13768:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 41346              		.loc 1 13768 0
 41347 137d5 8D741102 		leal	2(%rcx,%rdx), %esi
13769:src/vm3.c     **** VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
GAS LISTING /tmp/cc15eBE3.s 			page 1338


 41348              		.loc 1 13769 0
 41349 137d9 8D541103 		leal	3(%rcx,%rdx), %edx
13768:src/vm3.c     **** VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 41350              		.loc 1 13768 0
 41351 137dd 0FB6FC   		movzbl	%ah, %edi
 41352 137e0 4088BE00 		movb	%dil, VM_memory(%rsi)
 41352      000000
 41353              		.loc 1 13769 0
 41354 137e7 88820000 		movb	%al, VM_memory(%rdx)
 41354      0000
13770:src/vm3.c     **** PC  =  nPC;
 41355              		.loc 1 13770 0
 41356 137ed 8B050000 		movl	nPC(%rip), %eax
 41356      0000
13771:src/vm3.c     **** nPC  += 4;
13772:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41357              		.loc 1 13772 0
 41358 137f3 8D5003   		leal	3(%rax), %edx
13771:src/vm3.c     **** nPC  += 4;
 41359              		.loc 1 13771 0
 41360 137f6 8D4804   		leal	4(%rax), %ecx
 41361              	.LVL4038:
13770:src/vm3.c     **** PC  =  nPC;
 41362              		.loc 1 13770 0
 41363 137f9 89050000 		movl	%eax, PC(%rip)
 41363      0000
 41364              		.loc 1 13772 0
 41365 137ff 440FB682 		movzbl	VM_memory(%rdx), %r8d
 41365      00000000 
 41366 13807 89C2     		movl	%eax, %edx
13773:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13774:src/vm3.c     ****   if (op0 == 0x0) {
13775:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13776:src/vm3.c     ****     op0 = op0 + funct;
13777:src/vm3.c     ****   }
13778:src/vm3.c     ****     else {
13779:src/vm3.c     ****     op0 = op0 + FIX_OP;
13780:src/vm3.c     ****   }
13781:src/vm3.c     **** 
13782:src/vm3.c     **** p = array;
13783:src/vm3.c     **** p = p[op0].next_level;
13784:src/vm3.c     **** 
13785:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41367              		.loc 1 13785 0
 41368 13809 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41368      000000
13772:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41369              		.loc 1 13772 0
 41370 13810 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41370      000000
13771:src/vm3.c     **** nPC  += 4;
 41371              		.loc 1 13771 0
 41372 13817 890D0000 		movl	%ecx, nPC(%rip)
 41372      0000
 41373              		.loc 1 13785 0
 41374 1381d 8D4805   		leal	5(%rax), %ecx
 41375 13820 0FB68900 		movzbl	VM_memory(%rcx), %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1339


 41375      000000
13772:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41376              		.loc 1 13772 0
 41377 13827 C1E218   		sall	$24, %edx
 41378 1382a 4109D0   		orl	%edx, %r8d
 41379 1382d 8D5001   		leal	1(%rax), %edx
 41380 13830 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41380      000000
 41381 13837 C1E210   		sall	$16, %edx
 41382 1383a 4109D0   		orl	%edx, %r8d
 41383 1383d 8D5002   		leal	2(%rax), %edx
 41384 13840 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41384      000000
 41385 13847 C1E208   		sall	$8, %edx
 41386 1384a 4109D0   		orl	%edx, %r8d
 41387              	.LVL4039:
13773:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41388              		.loc 1 13773 0
 41389 1384d 4489C6   		movl	%r8d, %esi
13775:src/vm3.c     ****     op0 = op0 + funct;
 41390              		.loc 1 13775 0
 41391 13850 4488C2   		movb	%r8b, %dl
13773:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41392              		.loc 1 13773 0
 41393 13853 C1EE1A   		shrl	$26, %esi
 41394              	.LVL4040:
13775:src/vm3.c     ****     op0 = op0 + funct;
 41395              		.loc 1 13775 0
 41396 13856 83E23F   		andl	$63, %edx
 41397 13859 8D7E2B   		leal	43(%rsi), %edi
 41398 1385c 4084F6   		testb	%sil, %sil
 41399 1385f 0F45D7   		cmovne	%edi, %edx
 41400              	.LVL4041:
 41401              		.loc 1 13785 0
 41402 13862 C1E110   		sall	$16, %ecx
 41403 13865 C1E318   		sall	$24, %ebx
 41404 13868 09CB     		orl	%ecx, %ebx
 41405 1386a 8D4807   		leal	7(%rax), %ecx
 41406 1386d 83C006   		addl	$6, %eax
 41407 13870 0FB68000 		movzbl	VM_memory(%rax), %eax
 41407      000000
13783:src/vm3.c     **** 
 41408              		.loc 1 13783 0
 41409 13877 0FB6D2   		movzbl	%dl, %edx
 41410              		.loc 1 13785 0
 41411 1387a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41411      000000
13783:src/vm3.c     **** 
 41412              		.loc 1 13783 0
 41413 13881 48C1E204 		salq	$4, %rdx
 41414              	.LVL4042:
 41415              		.loc 1 13785 0
 41416 13885 C1E008   		sall	$8, %eax
 41417 13888 09CB     		orl	%ecx, %ebx
 41418 1388a 09C3     		orl	%eax, %ebx
 41419              	.LVL4043:
13786:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1340


 41420              		.loc 1 13786 0
 41421 1388c 89D9     		movl	%ebx, %ecx
13787:src/vm3.c     ****   if (op1 == 0x0) {
13788:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41422              		.loc 1 13788 0
 41423 1388e 88D8     		movb	%bl, %al
13786:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41424              		.loc 1 13786 0
 41425 13890 C1E91A   		shrl	$26, %ecx
 41426              	.LVL4044:
 41427              		.loc 1 13788 0
 41428 13893 83E03F   		andl	$63, %eax
 41429 13896 8D712B   		leal	43(%rcx), %esi
 41430 13899 84C9     		testb	%cl, %cl
 41431 1389b 0F45C6   		cmovne	%esi, %eax
 41432              	.LVL4045:
13789:src/vm3.c     ****     op1 = op1 + funct;
13790:src/vm3.c     ****   }
13791:src/vm3.c     ****     else {
13792:src/vm3.c     ****     op1 = op1 + FIX_OP;
13793:src/vm3.c     ****   }
13794:src/vm3.c     **** 
13795:src/vm3.c     **** goto *p[op1].code;
 41433              		.loc 1 13795 0
 41434 1389e 0FB6C0   		movzbl	%al, %eax
 41435 138a1 48C1E004 		salq	$4, %rax
 41436              	.LVL4046:
 41437 138a5 48038414 		addq	58088(%rsp,%rdx), %rax
 41437      E8E20000 
 41438 138ad 488B08   		movq	(%rax), %rcx
 41439 138b0 E9A3D4FE 		jmp	.L269
 41439      FF
 41440              	.LVL4047:
 41441              	.L81:
13796:src/vm3.c     **** 
13797:src/vm3.c     **** 
13798:src/vm3.c     **** xorPLUSxor:
13799:src/vm3.c     **** #if INDIRECT_DEBUG
13800:src/vm3.c     **** printf("%d|xor\n",counter);
13801:src/vm3.c     **** counter++;
13802:src/vm3.c     **** #endif
13803:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
13804:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41442              		.loc 1 13804 0
 41443 138b5 4489C0   		movl	%r8d, %eax
13805:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 41444              		.loc 1 13805 0
 41445 138b8 4489C2   		movl	%r8d, %edx
13803:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41446              		.loc 1 13803 0
 41447 138bb 41C1E815 		shrl	$21, %r8d
 41448              	.LVL4048:
13804:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 41449              		.loc 1 13804 0
 41450 138bf C1E810   		shrl	$16, %eax
 41451              	.LVL4049:
13806:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
GAS LISTING /tmp/cc15eBE3.s 			page 1341


 41452              		.loc 1 13806 0
 41453 138c2 4183E01F 		andl	$31, %r8d
13805:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 41454              		.loc 1 13805 0
 41455 138c6 C1EA0B   		shrl	$11, %edx
 41456              	.LVL4050:
 41457              		.loc 1 13806 0
 41458 138c9 83E01F   		andl	$31, %eax
 41459 138cc 83E21F   		andl	$31, %edx
13807:src/vm3.c     **** PC  =  nPC;
13808:src/vm3.c     **** nPC  += 4;
 41460              		.loc 1 13808 0
 41461 138cf 83050000 		addl	$4, nPC(%rip)
 41461      000004
 41462              	.LVL4051:
13806:src/vm3.c     **** PC  =  nPC;
 41463              		.loc 1 13806 0
 41464 138d6 8B048500 		movl	RF(,%rax,4), %eax
 41464      000000
 41465 138dd 42330485 		xorl	RF(,%r8,4), %eax
 41465      00000000 
 41466 138e5 89049500 		movl	%eax, RF(,%rdx,4)
 41466      000000
13809:src/vm3.c     **** 
13810:src/vm3.c     **** #if INDIRECT_DEBUG
13811:src/vm3.c     **** printf("%d|xor\n",counter);
13812:src/vm3.c     **** counter++;
13813:src/vm3.c     **** #endif
13814:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
13815:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41467              		.loc 1 13815 0
 41468 138ec 89D8     		movl	%ebx, %eax
13816:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 41469              		.loc 1 13816 0
 41470 138ee 89DA     		movl	%ebx, %edx
13815:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 41471              		.loc 1 13815 0
 41472 138f0 C1E810   		shrl	$16, %eax
13814:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41473              		.loc 1 13814 0
 41474 138f3 C1EB15   		shrl	$21, %ebx
 41475              	.LVL4052:
 41476              		.loc 1 13816 0
 41477 138f6 C1EA0B   		shrl	$11, %edx
 41478              	.LVL4053:
13817:src/vm3.c     **** RF[rd] = RF[rs] ^ RF[rt];
 41479              		.loc 1 13817 0
 41480 138f9 83E31F   		andl	$31, %ebx
 41481 138fc 83E01F   		andl	$31, %eax
 41482 138ff 83E21F   		andl	$31, %edx
 41483 13902 8B048500 		movl	RF(,%rax,4), %eax
 41483      000000
 41484 13909 33049D00 		xorl	RF(,%rbx,4), %eax
 41484      000000
 41485 13910 89049500 		movl	%eax, RF(,%rdx,4)
 41485      000000
13818:src/vm3.c     **** PC  =  nPC;
GAS LISTING /tmp/cc15eBE3.s 			page 1342


 41486              		.loc 1 13818 0
 41487 13917 8B050000 		movl	nPC(%rip), %eax
 41487      0000
13819:src/vm3.c     **** nPC  += 4;
13820:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41488              		.loc 1 13820 0
 41489 1391d 8D5003   		leal	3(%rax), %edx
13819:src/vm3.c     **** nPC  += 4;
 41490              		.loc 1 13819 0
 41491 13920 8D4804   		leal	4(%rax), %ecx
13818:src/vm3.c     **** PC  =  nPC;
 41492              		.loc 1 13818 0
 41493 13923 89050000 		movl	%eax, PC(%rip)
 41493      0000
 41494              		.loc 1 13820 0
 41495 13929 440FB682 		movzbl	VM_memory(%rdx), %r8d
 41495      00000000 
 41496 13931 89C2     		movl	%eax, %edx
13821:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13822:src/vm3.c     ****   if (op0 == 0x0) {
13823:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13824:src/vm3.c     ****     op0 = op0 + funct;
13825:src/vm3.c     ****   }
13826:src/vm3.c     ****     else {
13827:src/vm3.c     ****     op0 = op0 + FIX_OP;
13828:src/vm3.c     ****   }
13829:src/vm3.c     **** 
13830:src/vm3.c     **** p = array;
13831:src/vm3.c     **** p = p[op0].next_level;
13832:src/vm3.c     **** 
13833:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41497              		.loc 1 13833 0
 41498 13933 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41498      000000
13820:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41499              		.loc 1 13820 0
 41500 1393a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41500      000000
13819:src/vm3.c     **** nPC  += 4;
 41501              		.loc 1 13819 0
 41502 13941 890D0000 		movl	%ecx, nPC(%rip)
 41502      0000
 41503              		.loc 1 13833 0
 41504 13947 8D4805   		leal	5(%rax), %ecx
 41505 1394a 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41505      000000
13820:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41506              		.loc 1 13820 0
 41507 13951 C1E218   		sall	$24, %edx
 41508 13954 4109D0   		orl	%edx, %r8d
 41509 13957 8D5001   		leal	1(%rax), %edx
 41510 1395a 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41510      000000
 41511 13961 C1E210   		sall	$16, %edx
 41512 13964 4109D0   		orl	%edx, %r8d
 41513 13967 8D5002   		leal	2(%rax), %edx
 41514 1396a 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1343


 41514      000000
 41515 13971 C1E208   		sall	$8, %edx
 41516 13974 4109D0   		orl	%edx, %r8d
 41517              	.LVL4054:
13821:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41518              		.loc 1 13821 0
 41519 13977 4489C6   		movl	%r8d, %esi
13823:src/vm3.c     ****     op0 = op0 + funct;
 41520              		.loc 1 13823 0
 41521 1397a 4488C2   		movb	%r8b, %dl
13821:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41522              		.loc 1 13821 0
 41523 1397d C1EE1A   		shrl	$26, %esi
 41524              	.LVL4055:
13823:src/vm3.c     ****     op0 = op0 + funct;
 41525              		.loc 1 13823 0
 41526 13980 83E23F   		andl	$63, %edx
 41527 13983 8D7E2B   		leal	43(%rsi), %edi
 41528 13986 4084F6   		testb	%sil, %sil
 41529 13989 0F45D7   		cmovne	%edi, %edx
 41530              	.LVL4056:
 41531              		.loc 1 13833 0
 41532 1398c C1E110   		sall	$16, %ecx
 41533 1398f C1E318   		sall	$24, %ebx
 41534 13992 09CB     		orl	%ecx, %ebx
 41535 13994 8D4807   		leal	7(%rax), %ecx
 41536 13997 83C006   		addl	$6, %eax
 41537 1399a 0FB68000 		movzbl	VM_memory(%rax), %eax
 41537      000000
13831:src/vm3.c     **** 
 41538              		.loc 1 13831 0
 41539 139a1 0FB6D2   		movzbl	%dl, %edx
 41540              		.loc 1 13833 0
 41541 139a4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41541      000000
13831:src/vm3.c     **** 
 41542              		.loc 1 13831 0
 41543 139ab 48C1E204 		salq	$4, %rdx
 41544              	.LVL4057:
 41545              		.loc 1 13833 0
 41546 139af C1E008   		sall	$8, %eax
 41547 139b2 09CB     		orl	%ecx, %ebx
 41548 139b4 09C3     		orl	%eax, %ebx
 41549              	.LVL4058:
13834:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41550              		.loc 1 13834 0
 41551 139b6 89D9     		movl	%ebx, %ecx
13835:src/vm3.c     ****   if (op1 == 0x0) {
13836:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41552              		.loc 1 13836 0
 41553 139b8 88D8     		movb	%bl, %al
13834:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41554              		.loc 1 13834 0
 41555 139ba C1E91A   		shrl	$26, %ecx
 41556              	.LVL4059:
 41557              		.loc 1 13836 0
 41558 139bd 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1344


 41559 139c0 8D712B   		leal	43(%rcx), %esi
 41560 139c3 84C9     		testb	%cl, %cl
 41561 139c5 0F45C6   		cmovne	%esi, %eax
 41562              	.LVL4060:
13837:src/vm3.c     ****     op1 = op1 + funct;
13838:src/vm3.c     ****   }
13839:src/vm3.c     ****     else {
13840:src/vm3.c     ****     op1 = op1 + FIX_OP;
13841:src/vm3.c     ****   }
13842:src/vm3.c     **** 
13843:src/vm3.c     **** goto *p[op1].code;
 41563              		.loc 1 13843 0
 41564 139c8 0FB6C0   		movzbl	%al, %eax
 41565 139cb 48C1E004 		salq	$4, %rax
 41566              	.LVL4061:
 41567 139cf 48038414 		addq	58088(%rsp,%rdx), %rax
 41567      E8E20000 
 41568 139d7 488B08   		movq	(%rax), %rcx
 41569 139da E979D3FE 		jmp	.L269
 41569      FF
 41570              	.LVL4062:
 41571              	.L119:
13844:src/vm3.c     **** 
13845:src/vm3.c     **** 
13846:src/vm3.c     **** beqPLUSsll:
13847:src/vm3.c     **** #if INDIRECT_DEBUG
13848:src/vm3.c     **** printf("%d|beq\n",counter);
13849:src/vm3.c     **** counter++;
13850:src/vm3.c     **** #endif
13851:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 41572              		.loc 1 13851 0
 41573 139df 4489C2   		movl	%r8d, %edx
13852:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41574              		.loc 1 13852 0
 41575 139e2 4489C0   		movl	%r8d, %eax
13851:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41576              		.loc 1 13851 0
 41577 139e5 C1EA15   		shrl	$21, %edx
 41578              		.loc 1 13852 0
 41579 139e8 C1E810   		shrl	$16, %eax
13853:src/vm3.c     **** if (RF[rs] == RF[rt])
 41580              		.loc 1 13853 0
 41581 139eb 83E01F   		andl	$31, %eax
 41582 139ee 83E21F   		andl	$31, %edx
 41583 139f1 8B048500 		movl	RF(,%rax,4), %eax
 41583      000000
 41584 139f8 39049500 		cmpl	%eax, RF(,%rdx,4)
 41584      000000
 41585 139ff 0F85CE00 		jne	.L1476
 41585      0000
 41586              	.LVL4063:
13854:src/vm3.c     **** {
13855:src/vm3.c     ****   immediate = (instr0 >> 0) & 0xFFFF;
13856:src/vm3.c     ****   PC  =  nPC;
 41587              		.loc 1 13856 0
 41588 13a05 8B050000 		movl	nPC(%rip), %eax
 41588      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1345


13857:src/vm3.c     ****   nPC  += (immediate << 2);
 41589              		.loc 1 13857 0
 41590 13a0b 450FBFC0 		movswl	%r8w, %r8d
 41591              	.LVL4064:
13858:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 41592              		.loc 1 13858 0
 41593 13a0f 8D4803   		leal	3(%rax), %ecx
13857:src/vm3.c     ****   nPC  += (immediate << 2);
 41594              		.loc 1 13857 0
 41595 13a12 428D1480 		leal	(%rax,%r8,4), %edx
13856:src/vm3.c     ****   nPC  += (immediate << 2);
 41596              		.loc 1 13856 0
 41597 13a16 89050000 		movl	%eax, PC(%rip)
 41597      0000
 41598              		.loc 1 13858 0
 41599 13a1c 440FB681 		movzbl	VM_memory(%rcx), %r8d
 41599      00000000 
 41600              	.LVL4065:
 41601 13a24 89C1     		movl	%eax, %ecx
13857:src/vm3.c     ****   nPC  += (immediate << 2);
 41602              		.loc 1 13857 0
 41603 13a26 89150000 		movl	%edx, nPC(%rip)
 41603      0000
 41604              		.loc 1 13858 0
 41605 13a2c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41605      000000
 41606 13a33 C1E118   		sall	$24, %ecx
 41607 13a36 4109C8   		orl	%ecx, %r8d
 41608 13a39 8D4801   		leal	1(%rax), %ecx
 41609 13a3c 83C002   		addl	$2, %eax
 41610 13a3f 0FB68000 		movzbl	VM_memory(%rax), %eax
 41610      000000
 41611 13a46 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41611      000000
 41612 13a4d C1E008   		sall	$8, %eax
 41613 13a50 C1E110   		sall	$16, %ecx
 41614 13a53 4109C8   		orl	%ecx, %r8d
 41615 13a56 4109C0   		orl	%eax, %r8d
 41616              	.LVL4066:
13859:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41617              		.loc 1 13859 0
 41618 13a59 4489C0   		movl	%r8d, %eax
13860:src/vm3.c     ****   if (op0 == 0x0) {
13861:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 41619              		.loc 1 13861 0
 41620 13a5c 4488C1   		movb	%r8b, %cl
13859:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41621              		.loc 1 13859 0
 41622 13a5f C1E81A   		shrl	$26, %eax
 41623              	.LVL4067:
 41624              		.loc 1 13861 0
 41625 13a62 83E13F   		andl	$63, %ecx
 41626 13a65 8D702B   		leal	43(%rax), %esi
 41627 13a68 84C0     		testb	%al, %al
13862:src/vm3.c     ****     op0 = op0 + funct;
13863:src/vm3.c     ****   }
13864:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 1346


13865:src/vm3.c     ****     op0 = op0 + FIX_OP;
13866:src/vm3.c     ****   }
13867:src/vm3.c     **** 
13868:src/vm3.c     **** p = array;
13869:src/vm3.c     **** p = p[op0].next_level;
13870:src/vm3.c     **** 
13871:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41628              		.loc 1 13871 0
 41629 13a6a 8D4203   		leal	3(%rdx), %eax
 41630              	.LVL4068:
 41631 13a6d 0FB69800 		movzbl	VM_memory(%rax), %ebx
 41631      000000
 41632              	.LVL4069:
 41633 13a74 89D0     		movl	%edx, %eax
13861:src/vm3.c     ****     op0 = op0 + funct;
 41634              		.loc 1 13861 0
 41635 13a76 0F45CE   		cmovne	%esi, %ecx
 41636              	.LVL4070:
 41637              		.loc 1 13871 0
 41638 13a79 0FB68000 		movzbl	VM_memory(%rax), %eax
 41638      000000
13869:src/vm3.c     **** 
 41639              		.loc 1 13869 0
 41640 13a80 0FB6C9   		movzbl	%cl, %ecx
 41641 13a83 48C1E104 		salq	$4, %rcx
 41642              	.LVL4071:
 41643              		.loc 1 13871 0
 41644 13a87 C1E018   		sall	$24, %eax
 41645 13a8a 09C3     		orl	%eax, %ebx
 41646 13a8c 8D4201   		leal	1(%rdx), %eax
 41647 13a8f 0FB68000 		movzbl	VM_memory(%rax), %eax
 41647      000000
 41648 13a96 C1E010   		sall	$16, %eax
 41649 13a99 09C3     		orl	%eax, %ebx
 41650 13a9b 8D4202   		leal	2(%rdx), %eax
 41651 13a9e 0FB68000 		movzbl	VM_memory(%rax), %eax
 41651      000000
 41652 13aa5 C1E008   		sall	$8, %eax
 41653 13aa8 09C3     		orl	%eax, %ebx
 41654              	.LVL4072:
13872:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41655              		.loc 1 13872 0
 41656 13aaa 89DA     		movl	%ebx, %edx
13873:src/vm3.c     ****   if (op1 == 0x0) {
13874:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41657              		.loc 1 13874 0
 41658 13aac 88D8     		movb	%bl, %al
13872:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41659              		.loc 1 13872 0
 41660 13aae C1EA1A   		shrl	$26, %edx
 41661              	.LVL4073:
 41662              		.loc 1 13874 0
 41663 13ab1 83E03F   		andl	$63, %eax
 41664 13ab4 8D722B   		leal	43(%rdx), %esi
 41665 13ab7 84D2     		testb	%dl, %dl
 41666 13ab9 0F45C6   		cmovne	%esi, %eax
 41667              	.LVL4074:
GAS LISTING /tmp/cc15eBE3.s 			page 1347


13875:src/vm3.c     ****     op1 = op1 + funct;
13876:src/vm3.c     ****   }
13877:src/vm3.c     ****     else {
13878:src/vm3.c     ****     op1 = op1 + FIX_OP;
13879:src/vm3.c     ****   }
13880:src/vm3.c     **** 
13881:src/vm3.c     **** goto *p[op1].code;
 41668              		.loc 1 13881 0
 41669 13abc 0FB6C0   		movzbl	%al, %eax
 41670 13abf 48C1E004 		salq	$4, %rax
 41671              	.LVL4075:
 41672 13ac3 4803840C 		addq	58088(%rsp,%rcx), %rax
 41672      E8E20000 
 41673 13acb 488B08   		movq	(%rax), %rcx
 41674              	.LVL4076:
 41675 13ace E985D2FE 		jmp	.L269
 41675      FF
 41676              	.LVL4077:
 41677              	.L1476:
13882:src/vm3.c     **** 
13883:src/vm3.c     **** 
13884:src/vm3.c     **** }
13885:src/vm3.c     **** else
13886:src/vm3.c     **** {
13887:src/vm3.c     ****   PC  =  nPC;
13888:src/vm3.c     ****   nPC  += 4;
13889:src/vm3.c     **** }
13890:src/vm3.c     **** 
13891:src/vm3.c     **** #if INDIRECT_DEBUG
13892:src/vm3.c     **** printf("%d|sll\n",counter);
13893:src/vm3.c     **** counter++;
13894:src/vm3.c     **** #endif
13895:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
13896:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41678              		.loc 1 13896 0
 41679 13ad3 89D8     		movl	%ebx, %eax
13897:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 41680              		.loc 1 13897 0
 41681 13ad5 89DA     		movl	%ebx, %edx
13895:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41682              		.loc 1 13895 0
 41683 13ad7 C1EB06   		shrl	$6, %ebx
 41684              	.LVL4078:
13896:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 41685              		.loc 1 13896 0
 41686 13ada C1E810   		shrl	$16, %eax
 41687              	.LVL4079:
13895:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41688              		.loc 1 13895 0
 41689 13add 88D9     		movb	%bl, %cl
 41690              		.loc 1 13897 0
 41691 13adf C1EA0B   		shrl	$11, %edx
 41692              	.LVL4080:
13898:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 41693              		.loc 1 13898 0
 41694 13ae2 83E01F   		andl	$31, %eax
13895:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1348


 41695              		.loc 1 13895 0
 41696 13ae5 83E11F   		andl	$31, %ecx
13888:src/vm3.c     **** }
 41697              		.loc 1 13888 0
 41698 13ae8 83050000 		addl	$4, nPC(%rip)
 41698      000004
 41699              	.LVL4081:
 41700              		.loc 1 13898 0
 41701 13aef 8B048500 		movl	RF(,%rax,4), %eax
 41701      000000
 41702 13af6 83E21F   		andl	$31, %edx
 41703 13af9 D3E0     		sall	%cl, %eax
 41704 13afb 89049500 		movl	%eax, RF(,%rdx,4)
 41704      000000
13899:src/vm3.c     **** PC  =  nPC;
 41705              		.loc 1 13899 0
 41706 13b02 8B050000 		movl	nPC(%rip), %eax
 41706      0000
13900:src/vm3.c     **** nPC  += 4;
13901:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41707              		.loc 1 13901 0
 41708 13b08 8D5003   		leal	3(%rax), %edx
13900:src/vm3.c     **** nPC  += 4;
 41709              		.loc 1 13900 0
 41710 13b0b 8D4804   		leal	4(%rax), %ecx
13899:src/vm3.c     **** PC  =  nPC;
 41711              		.loc 1 13899 0
 41712 13b0e 89050000 		movl	%eax, PC(%rip)
 41712      0000
 41713              		.loc 1 13901 0
 41714 13b14 440FB682 		movzbl	VM_memory(%rdx), %r8d
 41714      00000000 
 41715              	.LVL4082:
 41716 13b1c 89C2     		movl	%eax, %edx
13902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13903:src/vm3.c     ****   if (op0 == 0x0) {
13904:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13905:src/vm3.c     ****     op0 = op0 + funct;
13906:src/vm3.c     ****   }
13907:src/vm3.c     ****     else {
13908:src/vm3.c     ****     op0 = op0 + FIX_OP;
13909:src/vm3.c     ****   }
13910:src/vm3.c     **** 
13911:src/vm3.c     **** p = array;
13912:src/vm3.c     **** p = p[op0].next_level;
13913:src/vm3.c     **** 
13914:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41717              		.loc 1 13914 0
 41718 13b1e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41718      000000
13901:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41719              		.loc 1 13901 0
 41720 13b25 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41720      000000
13900:src/vm3.c     **** nPC  += 4;
 41721              		.loc 1 13900 0
 41722 13b2c 890D0000 		movl	%ecx, nPC(%rip)
GAS LISTING /tmp/cc15eBE3.s 			page 1349


 41722      0000
 41723              		.loc 1 13914 0
 41724 13b32 8D4805   		leal	5(%rax), %ecx
 41725 13b35 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41725      000000
13901:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41726              		.loc 1 13901 0
 41727 13b3c C1E218   		sall	$24, %edx
 41728 13b3f 4109D0   		orl	%edx, %r8d
 41729 13b42 8D5001   		leal	1(%rax), %edx
 41730 13b45 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41730      000000
 41731 13b4c C1E210   		sall	$16, %edx
 41732 13b4f 4109D0   		orl	%edx, %r8d
 41733 13b52 8D5002   		leal	2(%rax), %edx
 41734 13b55 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41734      000000
 41735 13b5c C1E208   		sall	$8, %edx
 41736 13b5f 4109D0   		orl	%edx, %r8d
 41737              	.LVL4083:
13902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41738              		.loc 1 13902 0
 41739 13b62 4489C6   		movl	%r8d, %esi
13904:src/vm3.c     ****     op0 = op0 + funct;
 41740              		.loc 1 13904 0
 41741 13b65 4488C2   		movb	%r8b, %dl
13902:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41742              		.loc 1 13902 0
 41743 13b68 C1EE1A   		shrl	$26, %esi
 41744              	.LVL4084:
13904:src/vm3.c     ****     op0 = op0 + funct;
 41745              		.loc 1 13904 0
 41746 13b6b 83E23F   		andl	$63, %edx
 41747 13b6e 8D7E2B   		leal	43(%rsi), %edi
 41748 13b71 4084F6   		testb	%sil, %sil
 41749 13b74 0F45D7   		cmovne	%edi, %edx
 41750              	.LVL4085:
 41751              		.loc 1 13914 0
 41752 13b77 C1E110   		sall	$16, %ecx
 41753 13b7a C1E318   		sall	$24, %ebx
 41754 13b7d 09CB     		orl	%ecx, %ebx
 41755 13b7f 8D4807   		leal	7(%rax), %ecx
 41756 13b82 83C006   		addl	$6, %eax
 41757 13b85 0FB68000 		movzbl	VM_memory(%rax), %eax
 41757      000000
13912:src/vm3.c     **** 
 41758              		.loc 1 13912 0
 41759 13b8c 0FB6D2   		movzbl	%dl, %edx
 41760              		.loc 1 13914 0
 41761 13b8f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41761      000000
13912:src/vm3.c     **** 
 41762              		.loc 1 13912 0
 41763 13b96 48C1E204 		salq	$4, %rdx
 41764              	.LVL4086:
 41765              		.loc 1 13914 0
 41766 13b9a C1E008   		sall	$8, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1350


 41767 13b9d 09CB     		orl	%ecx, %ebx
 41768 13b9f 09C3     		orl	%eax, %ebx
 41769              	.LVL4087:
13915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41770              		.loc 1 13915 0
 41771 13ba1 89D9     		movl	%ebx, %ecx
13916:src/vm3.c     ****   if (op1 == 0x0) {
13917:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41772              		.loc 1 13917 0
 41773 13ba3 88D8     		movb	%bl, %al
13915:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41774              		.loc 1 13915 0
 41775 13ba5 C1E91A   		shrl	$26, %ecx
 41776              	.LVL4088:
 41777              		.loc 1 13917 0
 41778 13ba8 83E03F   		andl	$63, %eax
 41779 13bab 8D712B   		leal	43(%rcx), %esi
 41780 13bae 84C9     		testb	%cl, %cl
 41781 13bb0 0F45C6   		cmovne	%esi, %eax
 41782              	.LVL4089:
13918:src/vm3.c     ****     op1 = op1 + funct;
13919:src/vm3.c     ****   }
13920:src/vm3.c     ****     else {
13921:src/vm3.c     ****     op1 = op1 + FIX_OP;
13922:src/vm3.c     ****   }
13923:src/vm3.c     **** 
13924:src/vm3.c     **** goto *p[op1].code;
 41783              		.loc 1 13924 0
 41784 13bb3 0FB6C0   		movzbl	%al, %eax
 41785 13bb6 48C1E004 		salq	$4, %rax
 41786              	.LVL4090:
 41787 13bba 48038414 		addq	58088(%rsp,%rdx), %rax
 41787      E8E20000 
 41788 13bc2 488B08   		movq	(%rax), %rcx
 41789 13bc5 E98ED1FE 		jmp	.L269
 41789      FF
 41790              	.LVL4091:
 41791              	.L231:
13925:src/vm3.c     **** 
13926:src/vm3.c     **** 
13927:src/vm3.c     **** oriPLUSaddiu:
13928:src/vm3.c     **** #if INDIRECT_DEBUG
13929:src/vm3.c     **** printf("%d|ori\n",counter);
13930:src/vm3.c     **** counter++;
13931:src/vm3.c     **** #endif
13932:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 41792              		.loc 1 13932 0
 41793 13bca 4489C2   		movl	%r8d, %edx
13933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41794              		.loc 1 13933 0
 41795 13bcd 4489C0   		movl	%r8d, %eax
13934:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
13935:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
 41796              		.loc 1 13935 0
 41797 13bd0 450FBFC0 		movswl	%r8w, %r8d
 41798              	.LVL4092:
13932:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1351


 41799              		.loc 1 13932 0
 41800 13bd4 C1EA15   		shrl	$21, %edx
13933:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 41801              		.loc 1 13933 0
 41802 13bd7 C1E810   		shrl	$16, %eax
 41803              	.LVL4093:
13936:src/vm3.c     **** PC  =  nPC;
13937:src/vm3.c     **** nPC  += 4;
 41804              		.loc 1 13937 0
 41805 13bda 83050000 		addl	$4, nPC(%rip)
 41805      000004
 41806              	.LVL4094:
13935:src/vm3.c     **** PC  =  nPC;
 41807              		.loc 1 13935 0
 41808 13be1 83E21F   		andl	$31, %edx
 41809 13be4 83E01F   		andl	$31, %eax
 41810 13be7 440B0495 		orl	RF(,%rdx,4), %r8d
 41810      00000000 
13938:src/vm3.c     **** 
13939:src/vm3.c     **** #if INDIRECT_DEBUG
13940:src/vm3.c     **** printf("%d|addiu\n",counter);
13941:src/vm3.c     **** counter++;
13942:src/vm3.c     **** #endif
13943:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 41811              		.loc 1 13943 0
 41812 13bef 89DA     		movl	%ebx, %edx
 41813 13bf1 C1EA15   		shrl	$21, %edx
13944:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
13945:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
13946:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 41814              		.loc 1 13946 0
 41815 13bf4 83E21F   		andl	$31, %edx
13935:src/vm3.c     **** PC  =  nPC;
 41816              		.loc 1 13935 0
 41817 13bf7 44890485 		movl	%r8d, RF(,%rax,4)
 41817      00000000 
13944:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41818              		.loc 1 13944 0
 41819 13bff 89D8     		movl	%ebx, %eax
 41820              		.loc 1 13946 0
 41821 13c01 0FBFDB   		movswl	%bx, %ebx
 41822              	.LVL4095:
 41823 13c04 031C9500 		addl	RF(,%rdx,4), %ebx
 41823      000000
 41824              	.LVL4096:
13944:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 41825              		.loc 1 13944 0
 41826 13c0b C1E810   		shrl	$16, %eax
 41827              	.LVL4097:
 41828              		.loc 1 13946 0
 41829 13c0e 83E01F   		andl	$31, %eax
 41830 13c11 891C8500 		movl	%ebx, RF(,%rax,4)
 41830      000000
13947:src/vm3.c     **** PC  =  nPC;
 41831              		.loc 1 13947 0
 41832 13c18 8B050000 		movl	nPC(%rip), %eax
 41832      0000
GAS LISTING /tmp/cc15eBE3.s 			page 1352


13948:src/vm3.c     **** nPC  += 4;
13949:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41833              		.loc 1 13949 0
 41834 13c1e 8D5003   		leal	3(%rax), %edx
13948:src/vm3.c     **** nPC  += 4;
 41835              		.loc 1 13948 0
 41836 13c21 8D4804   		leal	4(%rax), %ecx
13947:src/vm3.c     **** PC  =  nPC;
 41837              		.loc 1 13947 0
 41838 13c24 89050000 		movl	%eax, PC(%rip)
 41838      0000
 41839              		.loc 1 13949 0
 41840 13c2a 440FB682 		movzbl	VM_memory(%rdx), %r8d
 41840      00000000 
 41841 13c32 89C2     		movl	%eax, %edx
13950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
13951:src/vm3.c     ****   if (op0 == 0x0) {
13952:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
13953:src/vm3.c     ****     op0 = op0 + funct;
13954:src/vm3.c     ****   }
13955:src/vm3.c     ****     else {
13956:src/vm3.c     ****     op0 = op0 + FIX_OP;
13957:src/vm3.c     ****   }
13958:src/vm3.c     **** 
13959:src/vm3.c     **** p = array;
13960:src/vm3.c     **** p = p[op0].next_level;
13961:src/vm3.c     **** 
13962:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41842              		.loc 1 13962 0
 41843 13c34 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41843      000000
13949:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41844              		.loc 1 13949 0
 41845 13c3b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41845      000000
13948:src/vm3.c     **** nPC  += 4;
 41846              		.loc 1 13948 0
 41847 13c42 890D0000 		movl	%ecx, nPC(%rip)
 41847      0000
 41848              		.loc 1 13962 0
 41849 13c48 8D4805   		leal	5(%rax), %ecx
 41850 13c4b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41850      000000
13949:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41851              		.loc 1 13949 0
 41852 13c52 C1E218   		sall	$24, %edx
 41853 13c55 4109D0   		orl	%edx, %r8d
 41854 13c58 8D5001   		leal	1(%rax), %edx
 41855 13c5b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41855      000000
 41856 13c62 C1E210   		sall	$16, %edx
 41857 13c65 4109D0   		orl	%edx, %r8d
 41858 13c68 8D5002   		leal	2(%rax), %edx
 41859 13c6b 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41859      000000
 41860 13c72 C1E208   		sall	$8, %edx
 41861 13c75 4109D0   		orl	%edx, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1353


 41862              	.LVL4098:
13950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41863              		.loc 1 13950 0
 41864 13c78 4489C6   		movl	%r8d, %esi
13952:src/vm3.c     ****     op0 = op0 + funct;
 41865              		.loc 1 13952 0
 41866 13c7b 4488C2   		movb	%r8b, %dl
13950:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41867              		.loc 1 13950 0
 41868 13c7e C1EE1A   		shrl	$26, %esi
 41869              	.LVL4099:
13952:src/vm3.c     ****     op0 = op0 + funct;
 41870              		.loc 1 13952 0
 41871 13c81 83E23F   		andl	$63, %edx
 41872 13c84 8D7E2B   		leal	43(%rsi), %edi
 41873 13c87 4084F6   		testb	%sil, %sil
 41874 13c8a 0F45D7   		cmovne	%edi, %edx
 41875              	.LVL4100:
 41876              		.loc 1 13962 0
 41877 13c8d C1E110   		sall	$16, %ecx
 41878 13c90 C1E318   		sall	$24, %ebx
 41879 13c93 09CB     		orl	%ecx, %ebx
 41880 13c95 8D4807   		leal	7(%rax), %ecx
 41881 13c98 83C006   		addl	$6, %eax
 41882 13c9b 0FB68000 		movzbl	VM_memory(%rax), %eax
 41882      000000
13960:src/vm3.c     **** 
 41883              		.loc 1 13960 0
 41884 13ca2 0FB6D2   		movzbl	%dl, %edx
 41885              		.loc 1 13962 0
 41886 13ca5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41886      000000
13960:src/vm3.c     **** 
 41887              		.loc 1 13960 0
 41888 13cac 48C1E204 		salq	$4, %rdx
 41889              	.LVL4101:
 41890              		.loc 1 13962 0
 41891 13cb0 C1E008   		sall	$8, %eax
 41892 13cb3 09CB     		orl	%ecx, %ebx
 41893 13cb5 09C3     		orl	%eax, %ebx
 41894              	.LVL4102:
13963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41895              		.loc 1 13963 0
 41896 13cb7 89D9     		movl	%ebx, %ecx
13964:src/vm3.c     ****   if (op1 == 0x0) {
13965:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41897              		.loc 1 13965 0
 41898 13cb9 88D8     		movb	%bl, %al
13963:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41899              		.loc 1 13963 0
 41900 13cbb C1E91A   		shrl	$26, %ecx
 41901              	.LVL4103:
 41902              		.loc 1 13965 0
 41903 13cbe 83E03F   		andl	$63, %eax
 41904 13cc1 8D712B   		leal	43(%rcx), %esi
 41905 13cc4 84C9     		testb	%cl, %cl
 41906 13cc6 0F45C6   		cmovne	%esi, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1354


 41907              	.LVL4104:
13966:src/vm3.c     ****     op1 = op1 + funct;
13967:src/vm3.c     ****   }
13968:src/vm3.c     ****     else {
13969:src/vm3.c     ****     op1 = op1 + FIX_OP;
13970:src/vm3.c     ****   }
13971:src/vm3.c     **** 
13972:src/vm3.c     **** goto *p[op1].code;
 41908              		.loc 1 13972 0
 41909 13cc9 0FB6C0   		movzbl	%al, %eax
 41910 13ccc 48C1E004 		salq	$4, %rax
 41911              	.LVL4105:
 41912 13cd0 48038414 		addq	58088(%rsp,%rdx), %rax
 41912      E8E20000 
 41913 13cd8 488B08   		movq	(%rax), %rcx
 41914 13cdb E978D0FE 		jmp	.L269
 41914      FF
 41915              	.LVL4106:
 41916              	.L197:
13973:src/vm3.c     **** 
13974:src/vm3.c     **** 
13975:src/vm3.c     **** jumpPLUSaddu:
13976:src/vm3.c     **** #if INDIRECT_DEBUG
13977:src/vm3.c     **** printf("%d|jump\n",counter);
13978:src/vm3.c     **** counter++;
13979:src/vm3.c     **** #endif
13980:src/vm3.c     **** PC = nPC;
 41917              		.loc 1 13980 0
 41918 13ce0 8B150000 		movl	nPC(%rip), %edx
 41918      0000
13981:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 41919              		.loc 1 13981 0
 41920 13ce6 4181E0FF 		andl	$67108863, %r8d
 41920      FFFF03
 41921              	.LVL4107:
13982:src/vm3.c     **** nPC = address << 2;
 41922              		.loc 1 13982 0
 41923 13ced 428D0485 		leal	0(,%r8,4), %eax
 41923      00000000 
13983:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 41924              		.loc 1 13983 0
 41925 13cf5 8D4A03   		leal	3(%rdx), %ecx
13980:src/vm3.c     **** address = (instr0 >> 0) & 0x3FFFFFF;
 41926              		.loc 1 13980 0
 41927 13cf8 89150000 		movl	%edx, PC(%rip)
 41927      0000
13982:src/vm3.c     **** nPC = address << 2;
 41928              		.loc 1 13982 0
 41929 13cfe 89050000 		movl	%eax, nPC(%rip)
 41929      0000
 41930              		.loc 1 13983 0
 41931 13d04 440FB681 		movzbl	VM_memory(%rcx), %r8d
 41931      00000000 
 41932 13d0c 89D1     		movl	%edx, %ecx
 41933 13d0e 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41933      000000
 41934 13d15 C1E118   		sall	$24, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1355


 41935 13d18 4109C8   		orl	%ecx, %r8d
 41936 13d1b 8D4A01   		leal	1(%rdx), %ecx
 41937 13d1e 83C202   		addl	$2, %edx
 41938 13d21 0FB69200 		movzbl	VM_memory(%rdx), %edx
 41938      000000
 41939 13d28 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41939      000000
 41940 13d2f C1E208   		sall	$8, %edx
 41941 13d32 C1E110   		sall	$16, %ecx
 41942 13d35 4109C8   		orl	%ecx, %r8d
 41943 13d38 4109D0   		orl	%edx, %r8d
 41944              	.LVL4108:
13984:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41945              		.loc 1 13984 0
 41946 13d3b 4489C1   		movl	%r8d, %ecx
13985:src/vm3.c     ****   if (op0 == 0x0) {
13986:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 41947              		.loc 1 13986 0
 41948 13d3e 4488C2   		movb	%r8b, %dl
13984:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 41949              		.loc 1 13984 0
 41950 13d41 C1E91A   		shrl	$26, %ecx
 41951              	.LVL4109:
 41952              		.loc 1 13986 0
 41953 13d44 83E23F   		andl	$63, %edx
 41954 13d47 8D712B   		leal	43(%rcx), %esi
 41955 13d4a 84C9     		testb	%cl, %cl
13987:src/vm3.c     ****     op0 = op0 + funct;
13988:src/vm3.c     ****   }
13989:src/vm3.c     ****     else {
13990:src/vm3.c     ****     op0 = op0 + FIX_OP;
13991:src/vm3.c     ****   }
13992:src/vm3.c     **** 
13993:src/vm3.c     **** p = array;
13994:src/vm3.c     **** p = p[op0].next_level;
13995:src/vm3.c     **** 
13996:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 41956              		.loc 1 13996 0
 41957 13d4c 8D4803   		leal	3(%rax), %ecx
 41958              	.LVL4110:
 41959 13d4f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 41959      000000
 41960              	.LVL4111:
 41961 13d56 89C1     		movl	%eax, %ecx
13986:src/vm3.c     ****     op0 = op0 + funct;
 41962              		.loc 1 13986 0
 41963 13d58 0F45D6   		cmovne	%esi, %edx
 41964              	.LVL4112:
 41965              		.loc 1 13996 0
 41966 13d5b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41966      000000
13994:src/vm3.c     **** 
 41967              		.loc 1 13994 0
 41968 13d62 0FB6D2   		movzbl	%dl, %edx
 41969 13d65 48C1E204 		salq	$4, %rdx
 41970              	.LVL4113:
 41971              		.loc 1 13996 0
GAS LISTING /tmp/cc15eBE3.s 			page 1356


 41972 13d69 C1E118   		sall	$24, %ecx
 41973 13d6c 09CB     		orl	%ecx, %ebx
 41974 13d6e 8D4801   		leal	1(%rax), %ecx
 41975 13d71 83C002   		addl	$2, %eax
 41976 13d74 0FB68000 		movzbl	VM_memory(%rax), %eax
 41976      000000
 41977 13d7b 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 41977      000000
 41978 13d82 C1E008   		sall	$8, %eax
 41979 13d85 C1E110   		sall	$16, %ecx
 41980 13d88 09CB     		orl	%ecx, %ebx
 41981 13d8a 09C3     		orl	%eax, %ebx
 41982              	.LVL4114:
13997:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41983              		.loc 1 13997 0
 41984 13d8c 89D9     		movl	%ebx, %ecx
13998:src/vm3.c     ****   if (op1 == 0x0) {
13999:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 41985              		.loc 1 13999 0
 41986 13d8e 88D8     		movb	%bl, %al
13997:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 41987              		.loc 1 13997 0
 41988 13d90 C1E91A   		shrl	$26, %ecx
 41989              	.LVL4115:
 41990              		.loc 1 13999 0
 41991 13d93 83E03F   		andl	$63, %eax
 41992 13d96 8D712B   		leal	43(%rcx), %esi
 41993 13d99 84C9     		testb	%cl, %cl
 41994 13d9b 0F45C6   		cmovne	%esi, %eax
 41995              	.LVL4116:
14000:src/vm3.c     ****     op1 = op1 + funct;
14001:src/vm3.c     ****   }
14002:src/vm3.c     ****     else {
14003:src/vm3.c     ****     op1 = op1 + FIX_OP;
14004:src/vm3.c     ****   }
14005:src/vm3.c     **** 
14006:src/vm3.c     **** goto *p[op1].code;
 41996              		.loc 1 14006 0
 41997 13d9e 0FB6C0   		movzbl	%al, %eax
 41998 13da1 48C1E004 		salq	$4, %rax
 41999              	.LVL4117:
 42000 13da5 48038414 		addq	58088(%rsp,%rdx), %rax
 42000      E8E20000 
 42001 13dad 488B08   		movq	(%rax), %rcx
 42002 13db0 E9A3CFFE 		jmp	.L269
 42002      FF
 42003              	.LVL4118:
 42004              	.L72:
14007:src/vm3.c     **** 
14008:src/vm3.c     **** 
14009:src/vm3.c     **** 
14010:src/vm3.c     **** #if INDIRECT_DEBUG
14011:src/vm3.c     **** printf("%d|addu\n",counter);
14012:src/vm3.c     **** counter++;
14013:src/vm3.c     **** #endif
14014:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
14015:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1357


14016:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
14017:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
14018:src/vm3.c     **** PC  =  nPC;
14019:src/vm3.c     **** nPC  += 4;
14020:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
14021:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14022:src/vm3.c     ****   if (op0 == 0x0) {
14023:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14024:src/vm3.c     ****     op0 = op0 + funct;
14025:src/vm3.c     ****   }
14026:src/vm3.c     ****     else {
14027:src/vm3.c     ****     op0 = op0 + FIX_OP;
14028:src/vm3.c     ****   }
14029:src/vm3.c     **** 
14030:src/vm3.c     **** p = array;
14031:src/vm3.c     **** p = p[op0].next_level;
14032:src/vm3.c     **** 
14033:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
14034:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
14035:src/vm3.c     ****   if (op1 == 0x0) {
14036:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
14037:src/vm3.c     ****     op1 = op1 + funct;
14038:src/vm3.c     ****   }
14039:src/vm3.c     ****     else {
14040:src/vm3.c     ****     op1 = op1 + FIX_OP;
14041:src/vm3.c     ****   }
14042:src/vm3.c     **** 
14043:src/vm3.c     **** goto *p[op1].code;
14044:src/vm3.c     **** 
14045:src/vm3.c     **** 
14046:src/vm3.c     **** sltuPLUSaddiu:
14047:src/vm3.c     **** #if INDIRECT_DEBUG
14048:src/vm3.c     **** printf("%d|sltu\n",counter);
14049:src/vm3.c     **** counter++;
14050:src/vm3.c     **** #endif
14051:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 42005              		.loc 1 14051 0
 42006 13db5 4489C2   		movl	%r8d, %edx
14052:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
14053:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42007              		.loc 1 14053 0
 42008 13db8 4489C0   		movl	%r8d, %eax
14052:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42009              		.loc 1 14052 0
 42010 13dbb 41C1E810 		shrl	$16, %r8d
 42011              	.LVL4119:
14051:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42012              		.loc 1 14051 0
 42013 13dbf C1EA15   		shrl	$21, %edx
14054:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 42014              		.loc 1 14054 0
 42015 13dc2 4183E01F 		andl	$31, %r8d
14053:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 42016              		.loc 1 14053 0
 42017 13dc6 C1E80B   		shrl	$11, %eax
 42018              	.LVL4120:
 42019              		.loc 1 14054 0
GAS LISTING /tmp/cc15eBE3.s 			page 1358


 42020 13dc9 83E21F   		andl	$31, %edx
 42021 13dcc 428B3C85 		movl	RF(,%r8,4), %edi
 42021      00000000 
 42022 13dd4 83E01F   		andl	$31, %eax
 42023 13dd7 393C9500 		cmpl	%edi, RF(,%rdx,4)
 42023      000000
 42024 13dde 0F92C2   		setb	%dl
14055:src/vm3.c     **** PC  =  nPC;
14056:src/vm3.c     **** nPC  += 4;
 42025              		.loc 1 14056 0
 42026 13de1 83050000 		addl	$4, nPC(%rip)
 42026      000004
 42027              	.LVL4121:
14054:src/vm3.c     **** PC  =  nPC;
 42028              		.loc 1 14054 0
 42029 13de8 0FB6D2   		movzbl	%dl, %edx
 42030 13deb 89148500 		movl	%edx, RF(,%rax,4)
 42030      000000
14057:src/vm3.c     **** 
14058:src/vm3.c     **** #if INDIRECT_DEBUG
14059:src/vm3.c     **** printf("%d|addiu\n",counter);
14060:src/vm3.c     **** counter++;
14061:src/vm3.c     **** #endif
14062:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 42031              		.loc 1 14062 0
 42032 13df2 89DA     		movl	%ebx, %edx
14063:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42033              		.loc 1 14063 0
 42034 13df4 89D8     		movl	%ebx, %eax
14062:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42035              		.loc 1 14062 0
 42036 13df6 C1EA15   		shrl	$21, %edx
14064:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
14065:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 42037              		.loc 1 14065 0
 42038 13df9 0FBFDB   		movswl	%bx, %ebx
 42039              	.LVL4122:
14063:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 42040              		.loc 1 14063 0
 42041 13dfc C1E810   		shrl	$16, %eax
 42042              	.LVL4123:
 42043              		.loc 1 14065 0
 42044 13dff 83E21F   		andl	$31, %edx
 42045 13e02 83E01F   		andl	$31, %eax
 42046 13e05 031C9500 		addl	RF(,%rdx,4), %ebx
 42046      000000
 42047              	.LVL4124:
 42048 13e0c 891C8500 		movl	%ebx, RF(,%rax,4)
 42048      000000
14066:src/vm3.c     **** PC  =  nPC;
 42049              		.loc 1 14066 0
 42050 13e13 8B050000 		movl	nPC(%rip), %eax
 42050      0000
14067:src/vm3.c     **** nPC  += 4;
14068:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42051              		.loc 1 14068 0
 42052 13e19 8D5003   		leal	3(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1359


14067:src/vm3.c     **** nPC  += 4;
 42053              		.loc 1 14067 0
 42054 13e1c 8D4804   		leal	4(%rax), %ecx
14066:src/vm3.c     **** PC  =  nPC;
 42055              		.loc 1 14066 0
 42056 13e1f 89050000 		movl	%eax, PC(%rip)
 42056      0000
 42057              		.loc 1 14068 0
 42058 13e25 440FB682 		movzbl	VM_memory(%rdx), %r8d
 42058      00000000 
 42059 13e2d 89C2     		movl	%eax, %edx
14069:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14070:src/vm3.c     ****   if (op0 == 0x0) {
14071:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14072:src/vm3.c     ****     op0 = op0 + funct;
14073:src/vm3.c     ****   }
14074:src/vm3.c     ****     else {
14075:src/vm3.c     ****     op0 = op0 + FIX_OP;
14076:src/vm3.c     ****   }
14077:src/vm3.c     **** 
14078:src/vm3.c     **** p = array;
14079:src/vm3.c     **** p = p[op0].next_level;
14080:src/vm3.c     **** 
14081:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42060              		.loc 1 14081 0
 42061 13e2f 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42061      000000
14068:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42062              		.loc 1 14068 0
 42063 13e36 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42063      000000
14067:src/vm3.c     **** nPC  += 4;
 42064              		.loc 1 14067 0
 42065 13e3d 890D0000 		movl	%ecx, nPC(%rip)
 42065      0000
 42066              		.loc 1 14081 0
 42067 13e43 8D4805   		leal	5(%rax), %ecx
 42068 13e46 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42068      000000
14068:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42069              		.loc 1 14068 0
 42070 13e4d C1E218   		sall	$24, %edx
 42071 13e50 4109D0   		orl	%edx, %r8d
 42072 13e53 8D5001   		leal	1(%rax), %edx
 42073 13e56 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42073      000000
 42074 13e5d C1E210   		sall	$16, %edx
 42075 13e60 4109D0   		orl	%edx, %r8d
 42076 13e63 8D5002   		leal	2(%rax), %edx
 42077 13e66 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42077      000000
 42078 13e6d C1E208   		sall	$8, %edx
 42079 13e70 4109D0   		orl	%edx, %r8d
 42080              	.LVL4125:
14069:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42081              		.loc 1 14069 0
 42082 13e73 4489C6   		movl	%r8d, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 1360


14071:src/vm3.c     ****     op0 = op0 + funct;
 42083              		.loc 1 14071 0
 42084 13e76 4488C2   		movb	%r8b, %dl
14069:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42085              		.loc 1 14069 0
 42086 13e79 C1EE1A   		shrl	$26, %esi
 42087              	.LVL4126:
14071:src/vm3.c     ****     op0 = op0 + funct;
 42088              		.loc 1 14071 0
 42089 13e7c 83E23F   		andl	$63, %edx
 42090 13e7f 8D7E2B   		leal	43(%rsi), %edi
 42091 13e82 4084F6   		testb	%sil, %sil
 42092 13e85 0F45D7   		cmovne	%edi, %edx
 42093              	.LVL4127:
 42094              		.loc 1 14081 0
 42095 13e88 C1E110   		sall	$16, %ecx
 42096 13e8b C1E318   		sall	$24, %ebx
 42097 13e8e 09CB     		orl	%ecx, %ebx
 42098 13e90 8D4807   		leal	7(%rax), %ecx
 42099 13e93 83C006   		addl	$6, %eax
 42100 13e96 0FB68000 		movzbl	VM_memory(%rax), %eax
 42100      000000
14079:src/vm3.c     **** 
 42101              		.loc 1 14079 0
 42102 13e9d 0FB6D2   		movzbl	%dl, %edx
 42103              		.loc 1 14081 0
 42104 13ea0 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42104      000000
14079:src/vm3.c     **** 
 42105              		.loc 1 14079 0
 42106 13ea7 48C1E204 		salq	$4, %rdx
 42107              	.LVL4128:
 42108              		.loc 1 14081 0
 42109 13eab C1E008   		sall	$8, %eax
 42110 13eae 09CB     		orl	%ecx, %ebx
 42111 13eb0 09C3     		orl	%eax, %ebx
 42112              	.LVL4129:
14082:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42113              		.loc 1 14082 0
 42114 13eb2 89D9     		movl	%ebx, %ecx
14083:src/vm3.c     ****   if (op1 == 0x0) {
14084:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42115              		.loc 1 14084 0
 42116 13eb4 88D8     		movb	%bl, %al
14082:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42117              		.loc 1 14082 0
 42118 13eb6 C1E91A   		shrl	$26, %ecx
 42119              	.LVL4130:
 42120              		.loc 1 14084 0
 42121 13eb9 83E03F   		andl	$63, %eax
 42122 13ebc 8D712B   		leal	43(%rcx), %esi
 42123 13ebf 84C9     		testb	%cl, %cl
 42124 13ec1 0F45C6   		cmovne	%esi, %eax
 42125              	.LVL4131:
14085:src/vm3.c     ****     op1 = op1 + funct;
14086:src/vm3.c     ****   }
14087:src/vm3.c     ****     else {
GAS LISTING /tmp/cc15eBE3.s 			page 1361


14088:src/vm3.c     ****     op1 = op1 + FIX_OP;
14089:src/vm3.c     ****   }
14090:src/vm3.c     **** 
14091:src/vm3.c     **** goto *p[op1].code;
 42126              		.loc 1 14091 0
 42127 13ec4 0FB6C0   		movzbl	%al, %eax
 42128 13ec7 48C1E004 		salq	$4, %rax
 42129              	.LVL4132:
 42130 13ecb 48038414 		addq	58088(%rsp,%rdx), %rax
 42130      E8E20000 
 42131 13ed3 488B08   		movq	(%rax), %rcx
 42132 13ed6 E97DCEFE 		jmp	.L269
 42132      FF
 42133              	.LVL4133:
 42134              	.L220:
14092:src/vm3.c     **** 
14093:src/vm3.c     **** 
14094:src/vm3.c     **** subuPLUSaddu:
14095:src/vm3.c     **** #if INDIRECT_DEBUG
14096:src/vm3.c     **** printf("%d|subu\n",counter);
14097:src/vm3.c     **** counter++;
14098:src/vm3.c     **** #endif
14099:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 42135              		.loc 1 14099 0
 42136 13edb 4489C0   		movl	%r8d, %eax
14100:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
14101:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42137              		.loc 1 14101 0
 42138 13ede 4489C2   		movl	%r8d, %edx
14100:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42139              		.loc 1 14100 0
 42140 13ee1 41C1E810 		shrl	$16, %r8d
 42141              	.LVL4134:
14099:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42142              		.loc 1 14099 0
 42143 13ee5 C1E815   		shrl	$21, %eax
 42144              	.LVL4135:
14102:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 42145              		.loc 1 14102 0
 42146 13ee8 4183E01F 		andl	$31, %r8d
14101:src/vm3.c     **** RF[rd] = RF[rs] - RF[rt];
 42147              		.loc 1 14101 0
 42148 13eec C1EA0B   		shrl	$11, %edx
 42149              	.LVL4136:
 42150              		.loc 1 14102 0
 42151 13eef 83E01F   		andl	$31, %eax
 42152 13ef2 83E21F   		andl	$31, %edx
14103:src/vm3.c     **** PC  =  nPC;
14104:src/vm3.c     **** nPC  += 4;
 42153              		.loc 1 14104 0
 42154 13ef5 83050000 		addl	$4, nPC(%rip)
 42154      000004
 42155              	.LVL4137:
14102:src/vm3.c     **** PC  =  nPC;
 42156              		.loc 1 14102 0
 42157 13efc 8B048500 		movl	RF(,%rax,4), %eax
 42157      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1362


 42158 13f03 422B0485 		subl	RF(,%r8,4), %eax
 42158      00000000 
 42159 13f0b 89049500 		movl	%eax, RF(,%rdx,4)
 42159      000000
14105:src/vm3.c     **** 
14106:src/vm3.c     **** #if INDIRECT_DEBUG
14107:src/vm3.c     **** printf("%d|addu\n",counter);
14108:src/vm3.c     **** counter++;
14109:src/vm3.c     **** #endif
14110:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
14111:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42160              		.loc 1 14111 0
 42161 13f12 89D8     		movl	%ebx, %eax
14112:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42162              		.loc 1 14112 0
 42163 13f14 89DA     		movl	%ebx, %edx
14111:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42164              		.loc 1 14111 0
 42165 13f16 C1E810   		shrl	$16, %eax
14110:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42166              		.loc 1 14110 0
 42167 13f19 C1EB15   		shrl	$21, %ebx
 42168              	.LVL4138:
 42169              		.loc 1 14112 0
 42170 13f1c C1EA0B   		shrl	$11, %edx
 42171              	.LVL4139:
14113:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 42172              		.loc 1 14113 0
 42173 13f1f 83E31F   		andl	$31, %ebx
 42174 13f22 83E01F   		andl	$31, %eax
 42175 13f25 83E21F   		andl	$31, %edx
 42176 13f28 8B048500 		movl	RF(,%rax,4), %eax
 42176      000000
 42177 13f2f 03049D00 		addl	RF(,%rbx,4), %eax
 42177      000000
 42178 13f36 89049500 		movl	%eax, RF(,%rdx,4)
 42178      000000
14114:src/vm3.c     **** PC  =  nPC;
 42179              		.loc 1 14114 0
 42180 13f3d 8B050000 		movl	nPC(%rip), %eax
 42180      0000
14115:src/vm3.c     **** nPC  += 4;
14116:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42181              		.loc 1 14116 0
 42182 13f43 8D5003   		leal	3(%rax), %edx
14115:src/vm3.c     **** nPC  += 4;
 42183              		.loc 1 14115 0
 42184 13f46 8D4804   		leal	4(%rax), %ecx
14114:src/vm3.c     **** PC  =  nPC;
 42185              		.loc 1 14114 0
 42186 13f49 89050000 		movl	%eax, PC(%rip)
 42186      0000
 42187              		.loc 1 14116 0
 42188 13f4f 440FB682 		movzbl	VM_memory(%rdx), %r8d
 42188      00000000 
 42189 13f57 89C2     		movl	%eax, %edx
14117:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1363


14118:src/vm3.c     ****   if (op0 == 0x0) {
14119:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14120:src/vm3.c     ****     op0 = op0 + funct;
14121:src/vm3.c     ****   }
14122:src/vm3.c     ****     else {
14123:src/vm3.c     ****     op0 = op0 + FIX_OP;
14124:src/vm3.c     ****   }
14125:src/vm3.c     **** 
14126:src/vm3.c     **** p = array;
14127:src/vm3.c     **** p = p[op0].next_level;
14128:src/vm3.c     **** 
14129:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42190              		.loc 1 14129 0
 42191 13f59 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42191      000000
14116:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42192              		.loc 1 14116 0
 42193 13f60 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42193      000000
14115:src/vm3.c     **** nPC  += 4;
 42194              		.loc 1 14115 0
 42195 13f67 890D0000 		movl	%ecx, nPC(%rip)
 42195      0000
 42196              		.loc 1 14129 0
 42197 13f6d 8D4805   		leal	5(%rax), %ecx
 42198 13f70 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42198      000000
14116:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42199              		.loc 1 14116 0
 42200 13f77 C1E218   		sall	$24, %edx
 42201 13f7a 4109D0   		orl	%edx, %r8d
 42202 13f7d 8D5001   		leal	1(%rax), %edx
 42203 13f80 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42203      000000
 42204 13f87 C1E210   		sall	$16, %edx
 42205 13f8a 4109D0   		orl	%edx, %r8d
 42206 13f8d 8D5002   		leal	2(%rax), %edx
 42207 13f90 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42207      000000
 42208 13f97 C1E208   		sall	$8, %edx
 42209 13f9a 4109D0   		orl	%edx, %r8d
 42210              	.LVL4140:
14117:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42211              		.loc 1 14117 0
 42212 13f9d 4489C6   		movl	%r8d, %esi
14119:src/vm3.c     ****     op0 = op0 + funct;
 42213              		.loc 1 14119 0
 42214 13fa0 4488C2   		movb	%r8b, %dl
14117:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42215              		.loc 1 14117 0
 42216 13fa3 C1EE1A   		shrl	$26, %esi
 42217              	.LVL4141:
14119:src/vm3.c     ****     op0 = op0 + funct;
 42218              		.loc 1 14119 0
 42219 13fa6 83E23F   		andl	$63, %edx
 42220 13fa9 8D7E2B   		leal	43(%rsi), %edi
 42221 13fac 4084F6   		testb	%sil, %sil
GAS LISTING /tmp/cc15eBE3.s 			page 1364


 42222 13faf 0F45D7   		cmovne	%edi, %edx
 42223              	.LVL4142:
 42224              		.loc 1 14129 0
 42225 13fb2 C1E110   		sall	$16, %ecx
 42226 13fb5 C1E318   		sall	$24, %ebx
 42227 13fb8 09CB     		orl	%ecx, %ebx
 42228 13fba 8D4807   		leal	7(%rax), %ecx
 42229 13fbd 83C006   		addl	$6, %eax
 42230 13fc0 0FB68000 		movzbl	VM_memory(%rax), %eax
 42230      000000
14127:src/vm3.c     **** 
 42231              		.loc 1 14127 0
 42232 13fc7 0FB6D2   		movzbl	%dl, %edx
 42233              		.loc 1 14129 0
 42234 13fca 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42234      000000
14127:src/vm3.c     **** 
 42235              		.loc 1 14127 0
 42236 13fd1 48C1E204 		salq	$4, %rdx
 42237              	.LVL4143:
 42238              		.loc 1 14129 0
 42239 13fd5 C1E008   		sall	$8, %eax
 42240 13fd8 09CB     		orl	%ecx, %ebx
 42241 13fda 09C3     		orl	%eax, %ebx
 42242              	.LVL4144:
14130:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42243              		.loc 1 14130 0
 42244 13fdc 89D9     		movl	%ebx, %ecx
14131:src/vm3.c     ****   if (op1 == 0x0) {
14132:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42245              		.loc 1 14132 0
 42246 13fde 88D8     		movb	%bl, %al
14130:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42247              		.loc 1 14130 0
 42248 13fe0 C1E91A   		shrl	$26, %ecx
 42249              	.LVL4145:
 42250              		.loc 1 14132 0
 42251 13fe3 83E03F   		andl	$63, %eax
 42252 13fe6 8D712B   		leal	43(%rcx), %esi
 42253 13fe9 84C9     		testb	%cl, %cl
 42254 13feb 0F45C6   		cmovne	%esi, %eax
 42255              	.LVL4146:
14133:src/vm3.c     ****     op1 = op1 + funct;
14134:src/vm3.c     ****   }
14135:src/vm3.c     ****     else {
14136:src/vm3.c     ****     op1 = op1 + FIX_OP;
14137:src/vm3.c     ****   }
14138:src/vm3.c     **** 
14139:src/vm3.c     **** goto *p[op1].code;
 42256              		.loc 1 14139 0
 42257 13fee 0FB6C0   		movzbl	%al, %eax
 42258 13ff1 48C1E004 		salq	$4, %rax
 42259              	.LVL4147:
 42260 13ff5 48038414 		addq	58088(%rsp,%rdx), %rax
 42260      E8E20000 
 42261 13ffd 488B08   		movq	(%rax), %rcx
 42262 14000 E953CDFE 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 1365


 42262      FF
 42263              	.LVL4148:
 42264              	.L57:
14140:src/vm3.c     **** 
14141:src/vm3.c     **** 
14142:src/vm3.c     **** adduPLUSnor:
14143:src/vm3.c     **** #if INDIRECT_DEBUG
14144:src/vm3.c     **** printf("%d|addu\n",counter);
14145:src/vm3.c     **** counter++;
14146:src/vm3.c     **** #endif
14147:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
14148:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42265              		.loc 1 14148 0
 42266 14005 4489C0   		movl	%r8d, %eax
14149:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42267              		.loc 1 14149 0
 42268 14008 4489C2   		movl	%r8d, %edx
14147:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42269              		.loc 1 14147 0
 42270 1400b 41C1E815 		shrl	$21, %r8d
 42271              	.LVL4149:
14148:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42272              		.loc 1 14148 0
 42273 1400f C1E810   		shrl	$16, %eax
 42274              	.LVL4150:
14150:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 42275              		.loc 1 14150 0
 42276 14012 4183E01F 		andl	$31, %r8d
14149:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 42277              		.loc 1 14149 0
 42278 14016 C1EA0B   		shrl	$11, %edx
 42279              	.LVL4151:
 42280              		.loc 1 14150 0
 42281 14019 83E01F   		andl	$31, %eax
 42282 1401c 83E21F   		andl	$31, %edx
14151:src/vm3.c     **** PC  =  nPC;
14152:src/vm3.c     **** nPC  += 4;
 42283              		.loc 1 14152 0
 42284 1401f 83050000 		addl	$4, nPC(%rip)
 42284      000004
 42285              	.LVL4152:
14150:src/vm3.c     **** PC  =  nPC;
 42286              		.loc 1 14150 0
 42287 14026 8B048500 		movl	RF(,%rax,4), %eax
 42287      000000
 42288 1402d 42030485 		addl	RF(,%r8,4), %eax
 42288      00000000 
 42289 14035 89049500 		movl	%eax, RF(,%rdx,4)
 42289      000000
14153:src/vm3.c     **** 
14154:src/vm3.c     **** #if INDIRECT_DEBUG
14155:src/vm3.c     **** printf("%d|nor\n",counter);
14156:src/vm3.c     **** counter++;
14157:src/vm3.c     **** #endif
14158:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
14159:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42290              		.loc 1 14159 0
GAS LISTING /tmp/cc15eBE3.s 			page 1366


 42291 1403c 89D8     		movl	%ebx, %eax
14160:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42292              		.loc 1 14160 0
 42293 1403e 89DA     		movl	%ebx, %edx
14159:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42294              		.loc 1 14159 0
 42295 14040 C1E810   		shrl	$16, %eax
14158:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42296              		.loc 1 14158 0
 42297 14043 C1EB15   		shrl	$21, %ebx
 42298              	.LVL4153:
 42299              		.loc 1 14160 0
 42300 14046 C1EA0B   		shrl	$11, %edx
 42301              	.LVL4154:
14161:src/vm3.c     **** RF[rd] = ~(RF[rs] | RF[rt]);
 42302              		.loc 1 14161 0
 42303 14049 83E31F   		andl	$31, %ebx
 42304 1404c 83E01F   		andl	$31, %eax
 42305 1404f 83E21F   		andl	$31, %edx
 42306 14052 8B048500 		movl	RF(,%rax,4), %eax
 42306      000000
 42307 14059 0B049D00 		orl	RF(,%rbx,4), %eax
 42307      000000
 42308 14060 F7D0     		notl	%eax
 42309 14062 89049500 		movl	%eax, RF(,%rdx,4)
 42309      000000
14162:src/vm3.c     **** PC  =  nPC;
 42310              		.loc 1 14162 0
 42311 14069 8B050000 		movl	nPC(%rip), %eax
 42311      0000
14163:src/vm3.c     **** nPC  += 4;
14164:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42312              		.loc 1 14164 0
 42313 1406f 8D5003   		leal	3(%rax), %edx
14163:src/vm3.c     **** nPC  += 4;
 42314              		.loc 1 14163 0
 42315 14072 8D4804   		leal	4(%rax), %ecx
14162:src/vm3.c     **** PC  =  nPC;
 42316              		.loc 1 14162 0
 42317 14075 89050000 		movl	%eax, PC(%rip)
 42317      0000
 42318              		.loc 1 14164 0
 42319 1407b 440FB682 		movzbl	VM_memory(%rdx), %r8d
 42319      00000000 
 42320 14083 89C2     		movl	%eax, %edx
14165:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14166:src/vm3.c     ****   if (op0 == 0x0) {
14167:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14168:src/vm3.c     ****     op0 = op0 + funct;
14169:src/vm3.c     ****   }
14170:src/vm3.c     ****     else {
14171:src/vm3.c     ****     op0 = op0 + FIX_OP;
14172:src/vm3.c     ****   }
14173:src/vm3.c     **** 
14174:src/vm3.c     **** p = array;
14175:src/vm3.c     **** p = p[op0].next_level;
14176:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1367


14177:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42321              		.loc 1 14177 0
 42322 14085 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42322      000000
14164:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42323              		.loc 1 14164 0
 42324 1408c 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42324      000000
14163:src/vm3.c     **** nPC  += 4;
 42325              		.loc 1 14163 0
 42326 14093 890D0000 		movl	%ecx, nPC(%rip)
 42326      0000
 42327              		.loc 1 14177 0
 42328 14099 8D4805   		leal	5(%rax), %ecx
 42329 1409c 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42329      000000
14164:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42330              		.loc 1 14164 0
 42331 140a3 C1E218   		sall	$24, %edx
 42332 140a6 4109D0   		orl	%edx, %r8d
 42333 140a9 8D5001   		leal	1(%rax), %edx
 42334 140ac 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42334      000000
 42335 140b3 C1E210   		sall	$16, %edx
 42336 140b6 4109D0   		orl	%edx, %r8d
 42337 140b9 8D5002   		leal	2(%rax), %edx
 42338 140bc 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42338      000000
 42339 140c3 C1E208   		sall	$8, %edx
 42340 140c6 4109D0   		orl	%edx, %r8d
 42341              	.LVL4155:
14165:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42342              		.loc 1 14165 0
 42343 140c9 4489C6   		movl	%r8d, %esi
14167:src/vm3.c     ****     op0 = op0 + funct;
 42344              		.loc 1 14167 0
 42345 140cc 4488C2   		movb	%r8b, %dl
14165:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42346              		.loc 1 14165 0
 42347 140cf C1EE1A   		shrl	$26, %esi
 42348              	.LVL4156:
14167:src/vm3.c     ****     op0 = op0 + funct;
 42349              		.loc 1 14167 0
 42350 140d2 83E23F   		andl	$63, %edx
 42351 140d5 8D7E2B   		leal	43(%rsi), %edi
 42352 140d8 4084F6   		testb	%sil, %sil
 42353 140db 0F45D7   		cmovne	%edi, %edx
 42354              	.LVL4157:
 42355              		.loc 1 14177 0
 42356 140de C1E110   		sall	$16, %ecx
 42357 140e1 C1E318   		sall	$24, %ebx
 42358 140e4 09CB     		orl	%ecx, %ebx
 42359 140e6 8D4807   		leal	7(%rax), %ecx
 42360 140e9 83C006   		addl	$6, %eax
 42361 140ec 0FB68000 		movzbl	VM_memory(%rax), %eax
 42361      000000
14175:src/vm3.c     **** 
GAS LISTING /tmp/cc15eBE3.s 			page 1368


 42362              		.loc 1 14175 0
 42363 140f3 0FB6D2   		movzbl	%dl, %edx
 42364              		.loc 1 14177 0
 42365 140f6 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42365      000000
14175:src/vm3.c     **** 
 42366              		.loc 1 14175 0
 42367 140fd 48C1E204 		salq	$4, %rdx
 42368              	.LVL4158:
 42369              		.loc 1 14177 0
 42370 14101 C1E008   		sall	$8, %eax
 42371 14104 09CB     		orl	%ecx, %ebx
 42372 14106 09C3     		orl	%eax, %ebx
 42373              	.LVL4159:
14178:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42374              		.loc 1 14178 0
 42375 14108 89D9     		movl	%ebx, %ecx
14179:src/vm3.c     ****   if (op1 == 0x0) {
14180:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42376              		.loc 1 14180 0
 42377 1410a 88D8     		movb	%bl, %al
14178:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42378              		.loc 1 14178 0
 42379 1410c C1E91A   		shrl	$26, %ecx
 42380              	.LVL4160:
 42381              		.loc 1 14180 0
 42382 1410f 83E03F   		andl	$63, %eax
 42383 14112 8D712B   		leal	43(%rcx), %esi
 42384 14115 84C9     		testb	%cl, %cl
 42385 14117 0F45C6   		cmovne	%esi, %eax
 42386              	.LVL4161:
14181:src/vm3.c     ****     op1 = op1 + funct;
14182:src/vm3.c     ****   }
14183:src/vm3.c     ****     else {
14184:src/vm3.c     ****     op1 = op1 + FIX_OP;
14185:src/vm3.c     ****   }
14186:src/vm3.c     **** 
14187:src/vm3.c     **** goto *p[op1].code;
 42387              		.loc 1 14187 0
 42388 1411a 0FB6C0   		movzbl	%al, %eax
 42389 1411d 48C1E004 		salq	$4, %rax
 42390              	.LVL4162:
 42391 14121 48038414 		addq	58088(%rsp,%rdx), %rax
 42391      E8E20000 
 42392 14129 488B08   		movq	(%rax), %rcx
 42393 1412c E927CCFE 		jmp	.L269
 42393      FF
 42394              	.LVL4163:
 42395              	.L226:
14188:src/vm3.c     **** 
14189:src/vm3.c     **** 
14190:src/vm3.c     **** oriPLUSsll:
14191:src/vm3.c     **** #if INDIRECT_DEBUG
14192:src/vm3.c     **** printf("%d|ori\n",counter);
14193:src/vm3.c     **** counter++;
14194:src/vm3.c     **** #endif
14195:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1369


 42396              		.loc 1 14195 0
 42397 14131 4489C2   		movl	%r8d, %edx
14196:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42398              		.loc 1 14196 0
 42399 14134 4489C0   		movl	%r8d, %eax
14197:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
14198:src/vm3.c     **** RF[rt] = RF[rs] | (uint32_t)immediate;
 42400              		.loc 1 14198 0
 42401 14137 450FBFC0 		movswl	%r8w, %r8d
 42402              	.LVL4164:
14195:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42403              		.loc 1 14195 0
 42404 1413b C1EA15   		shrl	$21, %edx
14196:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42405              		.loc 1 14196 0
 42406 1413e C1E810   		shrl	$16, %eax
 42407              	.LVL4165:
14199:src/vm3.c     **** PC  =  nPC;
14200:src/vm3.c     **** nPC  += 4;
 42408              		.loc 1 14200 0
 42409 14141 83050000 		addl	$4, nPC(%rip)
 42409      000004
 42410              	.LVL4166:
14198:src/vm3.c     **** PC  =  nPC;
 42411              		.loc 1 14198 0
 42412 14148 83E21F   		andl	$31, %edx
 42413 1414b 83E01F   		andl	$31, %eax
 42414 1414e 440B0495 		orl	RF(,%rdx,4), %r8d
 42414      00000000 
 42415              	.LVL4167:
14201:src/vm3.c     **** 
14202:src/vm3.c     **** #if INDIRECT_DEBUG
14203:src/vm3.c     **** printf("%d|sll\n",counter);
14204:src/vm3.c     **** counter++;
14205:src/vm3.c     **** #endif
14206:src/vm3.c     **** shamt = (instr1 >> 6) & 0x1F;
14207:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
14208:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42416              		.loc 1 14208 0
 42417 14156 89DA     		movl	%ebx, %edx
 42418 14158 C1EA0B   		shrl	$11, %edx
14209:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 42419              		.loc 1 14209 0
 42420 1415b 83E21F   		andl	$31, %edx
14198:src/vm3.c     **** PC  =  nPC;
 42421              		.loc 1 14198 0
 42422 1415e 44890485 		movl	%r8d, RF(,%rax,4)
 42422      00000000 
14207:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42423              		.loc 1 14207 0
 42424 14166 89D8     		movl	%ebx, %eax
14206:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42425              		.loc 1 14206 0
 42426 14168 C1EB06   		shrl	$6, %ebx
 42427              	.LVL4168:
14207:src/vm3.c     **** rd = (instr1 >> 11) & 0x1F;
 42428              		.loc 1 14207 0
GAS LISTING /tmp/cc15eBE3.s 			page 1370


 42429 1416b C1E810   		shrl	$16, %eax
 42430              	.LVL4169:
14206:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42431              		.loc 1 14206 0
 42432 1416e 88D9     		movb	%bl, %cl
 42433              		.loc 1 14209 0
 42434 14170 83E01F   		andl	$31, %eax
14206:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42435              		.loc 1 14206 0
 42436 14173 83E11F   		andl	$31, %ecx
 42437              		.loc 1 14209 0
 42438 14176 8B048500 		movl	RF(,%rax,4), %eax
 42438      000000
 42439 1417d D3E0     		sall	%cl, %eax
 42440 1417f 89049500 		movl	%eax, RF(,%rdx,4)
 42440      000000
14210:src/vm3.c     **** PC  =  nPC;
 42441              		.loc 1 14210 0
 42442 14186 8B050000 		movl	nPC(%rip), %eax
 42442      0000
14211:src/vm3.c     **** nPC  += 4;
14212:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42443              		.loc 1 14212 0
 42444 1418c 8D5003   		leal	3(%rax), %edx
14211:src/vm3.c     **** nPC  += 4;
 42445              		.loc 1 14211 0
 42446 1418f 8D4804   		leal	4(%rax), %ecx
14210:src/vm3.c     **** PC  =  nPC;
 42447              		.loc 1 14210 0
 42448 14192 89050000 		movl	%eax, PC(%rip)
 42448      0000
 42449              		.loc 1 14212 0
 42450 14198 440FB682 		movzbl	VM_memory(%rdx), %r8d
 42450      00000000 
 42451 141a0 89C2     		movl	%eax, %edx
14213:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14214:src/vm3.c     ****   if (op0 == 0x0) {
14215:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14216:src/vm3.c     ****     op0 = op0 + funct;
14217:src/vm3.c     ****   }
14218:src/vm3.c     ****     else {
14219:src/vm3.c     ****     op0 = op0 + FIX_OP;
14220:src/vm3.c     ****   }
14221:src/vm3.c     **** 
14222:src/vm3.c     **** p = array;
14223:src/vm3.c     **** p = p[op0].next_level;
14224:src/vm3.c     **** 
14225:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42452              		.loc 1 14225 0
 42453 141a2 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42453      000000
14212:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42454              		.loc 1 14212 0
 42455 141a9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42455      000000
14211:src/vm3.c     **** nPC  += 4;
 42456              		.loc 1 14211 0
GAS LISTING /tmp/cc15eBE3.s 			page 1371


 42457 141b0 890D0000 		movl	%ecx, nPC(%rip)
 42457      0000
 42458              		.loc 1 14225 0
 42459 141b6 8D4805   		leal	5(%rax), %ecx
 42460 141b9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42460      000000
14212:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42461              		.loc 1 14212 0
 42462 141c0 C1E218   		sall	$24, %edx
 42463 141c3 4109D0   		orl	%edx, %r8d
 42464 141c6 8D5001   		leal	1(%rax), %edx
 42465 141c9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42465      000000
 42466 141d0 C1E210   		sall	$16, %edx
 42467 141d3 4109D0   		orl	%edx, %r8d
 42468 141d6 8D5002   		leal	2(%rax), %edx
 42469 141d9 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42469      000000
 42470 141e0 C1E208   		sall	$8, %edx
 42471 141e3 4109D0   		orl	%edx, %r8d
 42472              	.LVL4170:
14213:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42473              		.loc 1 14213 0
 42474 141e6 4489C6   		movl	%r8d, %esi
14215:src/vm3.c     ****     op0 = op0 + funct;
 42475              		.loc 1 14215 0
 42476 141e9 4488C2   		movb	%r8b, %dl
14213:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42477              		.loc 1 14213 0
 42478 141ec C1EE1A   		shrl	$26, %esi
 42479              	.LVL4171:
14215:src/vm3.c     ****     op0 = op0 + funct;
 42480              		.loc 1 14215 0
 42481 141ef 83E23F   		andl	$63, %edx
 42482 141f2 8D7E2B   		leal	43(%rsi), %edi
 42483 141f5 4084F6   		testb	%sil, %sil
 42484 141f8 0F45D7   		cmovne	%edi, %edx
 42485              	.LVL4172:
 42486              		.loc 1 14225 0
 42487 141fb C1E110   		sall	$16, %ecx
 42488 141fe C1E318   		sall	$24, %ebx
 42489 14201 09CB     		orl	%ecx, %ebx
 42490 14203 8D4807   		leal	7(%rax), %ecx
 42491 14206 83C006   		addl	$6, %eax
 42492 14209 0FB68000 		movzbl	VM_memory(%rax), %eax
 42492      000000
14223:src/vm3.c     **** 
 42493              		.loc 1 14223 0
 42494 14210 0FB6D2   		movzbl	%dl, %edx
 42495              		.loc 1 14225 0
 42496 14213 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42496      000000
14223:src/vm3.c     **** 
 42497              		.loc 1 14223 0
 42498 1421a 48C1E204 		salq	$4, %rdx
 42499              	.LVL4173:
 42500              		.loc 1 14225 0
GAS LISTING /tmp/cc15eBE3.s 			page 1372


 42501 1421e C1E008   		sall	$8, %eax
 42502 14221 09CB     		orl	%ecx, %ebx
 42503 14223 09C3     		orl	%eax, %ebx
 42504              	.LVL4174:
14226:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42505              		.loc 1 14226 0
 42506 14225 89D9     		movl	%ebx, %ecx
14227:src/vm3.c     ****   if (op1 == 0x0) {
14228:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42507              		.loc 1 14228 0
 42508 14227 88D8     		movb	%bl, %al
14226:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42509              		.loc 1 14226 0
 42510 14229 C1E91A   		shrl	$26, %ecx
 42511              	.LVL4175:
 42512              		.loc 1 14228 0
 42513 1422c 83E03F   		andl	$63, %eax
 42514 1422f 8D712B   		leal	43(%rcx), %esi
 42515 14232 84C9     		testb	%cl, %cl
 42516 14234 0F45C6   		cmovne	%esi, %eax
 42517              	.LVL4176:
14229:src/vm3.c     ****     op1 = op1 + funct;
14230:src/vm3.c     ****   }
14231:src/vm3.c     ****     else {
14232:src/vm3.c     ****     op1 = op1 + FIX_OP;
14233:src/vm3.c     ****   }
14234:src/vm3.c     **** 
14235:src/vm3.c     **** goto *p[op1].code;
 42518              		.loc 1 14235 0
 42519 14237 0FB6C0   		movzbl	%al, %eax
 42520 1423a 48C1E004 		salq	$4, %rax
 42521              	.LVL4177:
 42522 1423e 48038414 		addq	58088(%rsp,%rdx), %rax
 42522      E8E20000 
 42523 14246 488B08   		movq	(%rax), %rcx
 42524 14249 E90ACBFE 		jmp	.L269
 42524      FF
 42525              	.LVL4178:
 42526              	.L28:
14236:src/vm3.c     **** 
14237:src/vm3.c     **** 
14238:src/vm3.c     **** sllPLUSaddiu:
14239:src/vm3.c     **** #if INDIRECT_DEBUG
14240:src/vm3.c     **** printf("%d|sll\n",counter);
14241:src/vm3.c     **** counter++;
14242:src/vm3.c     **** #endif
14243:src/vm3.c     **** shamt = (instr0 >> 6) & 0x1F;
14244:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42527              		.loc 1 14244 0
 42528 1424e 4489C0   		movl	%r8d, %eax
14245:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42529              		.loc 1 14245 0
 42530 14251 4489C2   		movl	%r8d, %edx
14243:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42531              		.loc 1 14243 0
 42532 14254 41C1E806 		shrl	$6, %r8d
 42533              	.LVL4179:
GAS LISTING /tmp/cc15eBE3.s 			page 1373


14244:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42534              		.loc 1 14244 0
 42535 14258 C1E810   		shrl	$16, %eax
 42536              	.LVL4180:
14243:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42537              		.loc 1 14243 0
 42538 1425b 4488C1   		movb	%r8b, %cl
 42539              		.loc 1 14245 0
 42540 1425e C1EA0B   		shrl	$11, %edx
 42541              	.LVL4181:
14246:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 42542              		.loc 1 14246 0
 42543 14261 83E01F   		andl	$31, %eax
14243:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42544              		.loc 1 14243 0
 42545 14264 83E11F   		andl	$31, %ecx
 42546              		.loc 1 14246 0
 42547 14267 83E21F   		andl	$31, %edx
 42548 1426a 8B048500 		movl	RF(,%rax,4), %eax
 42548      000000
14247:src/vm3.c     **** PC  =  nPC;
14248:src/vm3.c     **** nPC  += 4;
 42549              		.loc 1 14248 0
 42550 14271 83050000 		addl	$4, nPC(%rip)
 42550      000004
 42551              	.LVL4182:
14246:src/vm3.c     **** RF[rd] = RF[rt] << shamt;
 42552              		.loc 1 14246 0
 42553 14278 D3E0     		sall	%cl, %eax
 42554 1427a 89049500 		movl	%eax, RF(,%rdx,4)
 42554      000000
14249:src/vm3.c     **** 
14250:src/vm3.c     **** #if INDIRECT_DEBUG
14251:src/vm3.c     **** printf("%d|addiu\n",counter);
14252:src/vm3.c     **** counter++;
14253:src/vm3.c     **** #endif
14254:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 42555              		.loc 1 14254 0
 42556 14281 89DA     		movl	%ebx, %edx
14255:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42557              		.loc 1 14255 0
 42558 14283 89D8     		movl	%ebx, %eax
14254:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42559              		.loc 1 14254 0
 42560 14285 C1EA15   		shrl	$21, %edx
14256:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
14257:src/vm3.c     **** RF[rt] = (RF[rs] + immediate);
 42561              		.loc 1 14257 0
 42562 14288 0FBFDB   		movswl	%bx, %ebx
 42563              	.LVL4183:
14255:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 42564              		.loc 1 14255 0
 42565 1428b C1E810   		shrl	$16, %eax
 42566              	.LVL4184:
 42567              		.loc 1 14257 0
 42568 1428e 83E21F   		andl	$31, %edx
 42569 14291 83E01F   		andl	$31, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1374


 42570 14294 031C9500 		addl	RF(,%rdx,4), %ebx
 42570      000000
 42571              	.LVL4185:
 42572 1429b 891C8500 		movl	%ebx, RF(,%rax,4)
 42572      000000
14258:src/vm3.c     **** PC  =  nPC;
 42573              		.loc 1 14258 0
 42574 142a2 8B050000 		movl	nPC(%rip), %eax
 42574      0000
14259:src/vm3.c     **** nPC  += 4;
14260:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42575              		.loc 1 14260 0
 42576 142a8 8D5003   		leal	3(%rax), %edx
14259:src/vm3.c     **** nPC  += 4;
 42577              		.loc 1 14259 0
 42578 142ab 8D4804   		leal	4(%rax), %ecx
14258:src/vm3.c     **** PC  =  nPC;
 42579              		.loc 1 14258 0
 42580 142ae 89050000 		movl	%eax, PC(%rip)
 42580      0000
 42581              		.loc 1 14260 0
 42582 142b4 440FB682 		movzbl	VM_memory(%rdx), %r8d
 42582      00000000 
 42583 142bc 89C2     		movl	%eax, %edx
14261:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14262:src/vm3.c     ****   if (op0 == 0x0) {
14263:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14264:src/vm3.c     ****     op0 = op0 + funct;
14265:src/vm3.c     ****   }
14266:src/vm3.c     ****     else {
14267:src/vm3.c     ****     op0 = op0 + FIX_OP;
14268:src/vm3.c     ****   }
14269:src/vm3.c     **** 
14270:src/vm3.c     **** p = array;
14271:src/vm3.c     **** p = p[op0].next_level;
14272:src/vm3.c     **** 
14273:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42584              		.loc 1 14273 0
 42585 142be 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42585      000000
14260:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42586              		.loc 1 14260 0
 42587 142c5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42587      000000
14259:src/vm3.c     **** nPC  += 4;
 42588              		.loc 1 14259 0
 42589 142cc 890D0000 		movl	%ecx, nPC(%rip)
 42589      0000
 42590              		.loc 1 14273 0
 42591 142d2 8D4805   		leal	5(%rax), %ecx
 42592 142d5 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42592      000000
14260:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42593              		.loc 1 14260 0
 42594 142dc C1E218   		sall	$24, %edx
 42595 142df 4109D0   		orl	%edx, %r8d
 42596 142e2 8D5001   		leal	1(%rax), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1375


 42597 142e5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42597      000000
 42598 142ec C1E210   		sall	$16, %edx
 42599 142ef 4109D0   		orl	%edx, %r8d
 42600 142f2 8D5002   		leal	2(%rax), %edx
 42601 142f5 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42601      000000
 42602 142fc C1E208   		sall	$8, %edx
 42603 142ff 4109D0   		orl	%edx, %r8d
 42604              	.LVL4186:
14261:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42605              		.loc 1 14261 0
 42606 14302 4489C6   		movl	%r8d, %esi
14263:src/vm3.c     ****     op0 = op0 + funct;
 42607              		.loc 1 14263 0
 42608 14305 4488C2   		movb	%r8b, %dl
14261:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42609              		.loc 1 14261 0
 42610 14308 C1EE1A   		shrl	$26, %esi
 42611              	.LVL4187:
14263:src/vm3.c     ****     op0 = op0 + funct;
 42612              		.loc 1 14263 0
 42613 1430b 83E23F   		andl	$63, %edx
 42614 1430e 8D7E2B   		leal	43(%rsi), %edi
 42615 14311 4084F6   		testb	%sil, %sil
 42616 14314 0F45D7   		cmovne	%edi, %edx
 42617              	.LVL4188:
 42618              		.loc 1 14273 0
 42619 14317 C1E110   		sall	$16, %ecx
 42620 1431a C1E318   		sall	$24, %ebx
 42621 1431d 09CB     		orl	%ecx, %ebx
 42622 1431f 8D4807   		leal	7(%rax), %ecx
 42623 14322 83C006   		addl	$6, %eax
 42624 14325 0FB68000 		movzbl	VM_memory(%rax), %eax
 42624      000000
14271:src/vm3.c     **** 
 42625              		.loc 1 14271 0
 42626 1432c 0FB6D2   		movzbl	%dl, %edx
 42627              		.loc 1 14273 0
 42628 1432f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42628      000000
14271:src/vm3.c     **** 
 42629              		.loc 1 14271 0
 42630 14336 48C1E204 		salq	$4, %rdx
 42631              	.LVL4189:
 42632              		.loc 1 14273 0
 42633 1433a C1E008   		sall	$8, %eax
 42634 1433d 09CB     		orl	%ecx, %ebx
 42635 1433f 09C3     		orl	%eax, %ebx
 42636              	.LVL4190:
14274:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42637              		.loc 1 14274 0
 42638 14341 89D9     		movl	%ebx, %ecx
14275:src/vm3.c     ****   if (op1 == 0x0) {
14276:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42639              		.loc 1 14276 0
 42640 14343 88D8     		movb	%bl, %al
GAS LISTING /tmp/cc15eBE3.s 			page 1376


14274:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42641              		.loc 1 14274 0
 42642 14345 C1E91A   		shrl	$26, %ecx
 42643              	.LVL4191:
 42644              		.loc 1 14276 0
 42645 14348 83E03F   		andl	$63, %eax
 42646 1434b 8D712B   		leal	43(%rcx), %esi
 42647 1434e 84C9     		testb	%cl, %cl
 42648 14350 0F45C6   		cmovne	%esi, %eax
 42649              	.LVL4192:
14277:src/vm3.c     ****     op1 = op1 + funct;
14278:src/vm3.c     ****   }
14279:src/vm3.c     ****     else {
14280:src/vm3.c     ****     op1 = op1 + FIX_OP;
14281:src/vm3.c     ****   }
14282:src/vm3.c     **** 
14283:src/vm3.c     **** goto *p[op1].code;
 42650              		.loc 1 14283 0
 42651 14353 0FB6C0   		movzbl	%al, %eax
 42652 14356 48C1E004 		salq	$4, %rax
 42653              	.LVL4193:
 42654 1435a 48038414 		addq	58088(%rsp,%rdx), %rax
 42654      E8E20000 
 42655 14362 488B08   		movq	(%rax), %rcx
 42656 14365 E9EEC9FE 		jmp	.L269
 42656      FF
 42657              	.LVL4194:
 42658              	.L59:
14284:src/vm3.c     **** 
14285:src/vm3.c     **** 
14286:src/vm3.c     **** adduPLUSjump:
14287:src/vm3.c     **** #if INDIRECT_DEBUG
14288:src/vm3.c     **** printf("%d|addu\n",counter);
14289:src/vm3.c     **** counter++;
14290:src/vm3.c     **** #endif
14291:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
14292:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42659              		.loc 1 14292 0
 42660 1436a 4489C0   		movl	%r8d, %eax
14293:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42661              		.loc 1 14293 0
 42662 1436d 4489C2   		movl	%r8d, %edx
14291:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42663              		.loc 1 14291 0
 42664 14370 41C1E815 		shrl	$21, %r8d
 42665              	.LVL4195:
14292:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42666              		.loc 1 14292 0
 42667 14374 C1E810   		shrl	$16, %eax
 42668              	.LVL4196:
14294:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 42669              		.loc 1 14294 0
 42670 14377 4183E01F 		andl	$31, %r8d
14293:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 42671              		.loc 1 14293 0
 42672 1437b C1EA0B   		shrl	$11, %edx
 42673              	.LVL4197:
GAS LISTING /tmp/cc15eBE3.s 			page 1377


 42674              		.loc 1 14294 0
 42675 1437e 83E01F   		andl	$31, %eax
 42676 14381 83E21F   		andl	$31, %edx
14295:src/vm3.c     **** PC  =  nPC;
14296:src/vm3.c     **** nPC  += 4;
14297:src/vm3.c     **** 
14298:src/vm3.c     **** #if INDIRECT_DEBUG
14299:src/vm3.c     **** printf("%d|jump\n",counter);
14300:src/vm3.c     **** counter++;
14301:src/vm3.c     **** #endif
14302:src/vm3.c     **** PC = nPC;
14303:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 42677              		.loc 1 14303 0
 42678 14384 81E3FFFF 		andl	$67108863, %ebx
 42678      FF03
 42679              	.LVL4198:
14294:src/vm3.c     **** PC  =  nPC;
 42680              		.loc 1 14294 0
 42681 1438a 8B048500 		movl	RF(,%rax,4), %eax
 42681      000000
 42682 14391 42030485 		addl	RF(,%r8,4), %eax
 42682      00000000 
 42683 14399 89049500 		movl	%eax, RF(,%rdx,4)
 42683      000000
14296:src/vm3.c     **** 
 42684              		.loc 1 14296 0
 42685 143a0 8B150000 		movl	nPC(%rip), %edx
 42685      0000
14304:src/vm3.c     **** nPC = address << 2;
 42686              		.loc 1 14304 0
 42687 143a6 8D049D00 		leal	0(,%rbx,4), %eax
 42687      000000
 42688 143ad 89050000 		movl	%eax, nPC(%rip)
 42688      0000
14296:src/vm3.c     **** 
 42689              		.loc 1 14296 0
 42690 143b3 8D4A04   		leal	4(%rdx), %ecx
14305:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42691              		.loc 1 14305 0
 42692 143b6 8D7207   		leal	7(%rdx), %esi
14302:src/vm3.c     **** address = (instr1 >> 0) & 0x3FFFFFF;
 42693              		.loc 1 14302 0
 42694 143b9 890D0000 		movl	%ecx, PC(%rip)
 42694      0000
 42695              		.loc 1 14305 0
 42696 143bf 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42696      000000
 42697 143c6 440FB686 		movzbl	VM_memory(%rsi), %r8d
 42697      00000000 
 42698 143ce C1E118   		sall	$24, %ecx
 42699 143d1 4109C8   		orl	%ecx, %r8d
 42700 143d4 8D4A05   		leal	5(%rdx), %ecx
 42701 143d7 83C206   		addl	$6, %edx
 42702 143da 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42702      000000
 42703 143e1 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42703      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1378


 42704 143e8 C1E208   		sall	$8, %edx
 42705 143eb C1E110   		sall	$16, %ecx
 42706 143ee 4109C8   		orl	%ecx, %r8d
 42707 143f1 4109D0   		orl	%edx, %r8d
 42708              	.LVL4199:
14306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42709              		.loc 1 14306 0
 42710 143f4 4489C1   		movl	%r8d, %ecx
14307:src/vm3.c     ****   if (op0 == 0x0) {
14308:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 42711              		.loc 1 14308 0
 42712 143f7 4488C2   		movb	%r8b, %dl
14306:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42713              		.loc 1 14306 0
 42714 143fa C1E91A   		shrl	$26, %ecx
 42715              	.LVL4200:
 42716              		.loc 1 14308 0
 42717 143fd 83E23F   		andl	$63, %edx
 42718 14400 8D712B   		leal	43(%rcx), %esi
 42719 14403 84C9     		testb	%cl, %cl
14309:src/vm3.c     ****     op0 = op0 + funct;
14310:src/vm3.c     ****   }
14311:src/vm3.c     ****     else {
14312:src/vm3.c     ****     op0 = op0 + FIX_OP;
14313:src/vm3.c     ****   }
14314:src/vm3.c     **** 
14315:src/vm3.c     **** p = array;
14316:src/vm3.c     **** p = p[op0].next_level;
14317:src/vm3.c     **** 
14318:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42720              		.loc 1 14318 0
 42721 14405 8D4803   		leal	3(%rax), %ecx
 42722              	.LVL4201:
 42723 14408 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42723      000000
 42724 1440f 89C1     		movl	%eax, %ecx
14308:src/vm3.c     ****     op0 = op0 + funct;
 42725              		.loc 1 14308 0
 42726 14411 0F45D6   		cmovne	%esi, %edx
 42727              	.LVL4202:
 42728              		.loc 1 14318 0
 42729 14414 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42729      000000
14316:src/vm3.c     **** 
 42730              		.loc 1 14316 0
 42731 1441b 0FB6D2   		movzbl	%dl, %edx
 42732 1441e 48C1E204 		salq	$4, %rdx
 42733              	.LVL4203:
 42734              		.loc 1 14318 0
 42735 14422 C1E118   		sall	$24, %ecx
 42736 14425 09CB     		orl	%ecx, %ebx
 42737 14427 8D4801   		leal	1(%rax), %ecx
 42738 1442a 83C002   		addl	$2, %eax
 42739 1442d 0FB68000 		movzbl	VM_memory(%rax), %eax
 42739      000000
 42740 14434 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42740      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1379


 42741 1443b C1E008   		sall	$8, %eax
 42742 1443e C1E110   		sall	$16, %ecx
 42743 14441 09CB     		orl	%ecx, %ebx
 42744 14443 09C3     		orl	%eax, %ebx
 42745              	.LVL4204:
14319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42746              		.loc 1 14319 0
 42747 14445 89D9     		movl	%ebx, %ecx
14320:src/vm3.c     ****   if (op1 == 0x0) {
14321:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42748              		.loc 1 14321 0
 42749 14447 88D8     		movb	%bl, %al
14319:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42750              		.loc 1 14319 0
 42751 14449 C1E91A   		shrl	$26, %ecx
 42752              	.LVL4205:
 42753              		.loc 1 14321 0
 42754 1444c 83E03F   		andl	$63, %eax
 42755 1444f 8D712B   		leal	43(%rcx), %esi
 42756 14452 84C9     		testb	%cl, %cl
 42757 14454 0F45C6   		cmovne	%esi, %eax
 42758              	.LVL4206:
14322:src/vm3.c     ****     op1 = op1 + funct;
14323:src/vm3.c     ****   }
14324:src/vm3.c     ****     else {
14325:src/vm3.c     ****     op1 = op1 + FIX_OP;
14326:src/vm3.c     ****   }
14327:src/vm3.c     **** 
14328:src/vm3.c     **** goto *p[op1].code;
 42759              		.loc 1 14328 0
 42760 14457 0FB6C0   		movzbl	%al, %eax
 42761 1445a 48C1E004 		salq	$4, %rax
 42762              	.LVL4207:
 42763 1445e 48038414 		addq	58088(%rsp,%rdx), %rax
 42763      E8E20000 
 42764 14466 488B08   		movq	(%rax), %rcx
 42765 14469 E9EAC8FE 		jmp	.L269
 42765      FF
 42766              	.LVL4208:
 42767              	.L97:
14329:src/vm3.c     **** 
14330:src/vm3.c     **** 
14331:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
14332:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14333:src/vm3.c     ****   if (op0 == 0x0) {
14334:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14335:src/vm3.c     ****     op0 = op0 + funct;
14336:src/vm3.c     ****   }
14337:src/vm3.c     ****     else {
14338:src/vm3.c     ****     op0 = op0 + FIX_OP;
14339:src/vm3.c     ****   }
14340:src/vm3.c     **** 
14341:src/vm3.c     **** p = array;
14342:src/vm3.c     **** p = p[op0].next_level;
14343:src/vm3.c     **** 
14344:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
14345:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1380


14346:src/vm3.c     ****   if (op1 == 0x0) {
14347:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
14348:src/vm3.c     ****     op1 = op1 + funct;
14349:src/vm3.c     ****   }
14350:src/vm3.c     ****     else {
14351:src/vm3.c     ****     op1 = op1 + FIX_OP;
14352:src/vm3.c     ****   }
14353:src/vm3.c     **** 
14354:src/vm3.c     **** goto *p[op1].code;
14355:src/vm3.c     **** 
14356:src/vm3.c     **** 
14357:src/vm3.c     **** lwPLUSbne:
14358:src/vm3.c     **** #if INDIRECT_DEBUG
14359:src/vm3.c     **** printf("%d|lw\n",counter);
14360:src/vm3.c     **** counter++;
14361:src/vm3.c     **** #endif
14362:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 42768              		.loc 1 14362 0
 42769 1446e 4489C0   		movl	%r8d, %eax
14363:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
14364:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
14365:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 42770              		.loc 1 14365 0
 42771 14471 410FBFD0 		movswl	%r8w, %edx
14366:src/vm3.c     **** PC  =  nPC;
14367:src/vm3.c     **** nPC  += 4;
14368:src/vm3.c     **** 
14369:src/vm3.c     **** #if INDIRECT_DEBUG
14370:src/vm3.c     **** printf("%d|bne\n",counter);
14371:src/vm3.c     **** counter++;
14372:src/vm3.c     **** #endif
14373:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 42772              		.loc 1 14373 0
 42773 14475 89DE     		movl	%ebx, %esi
14362:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42774              		.loc 1 14362 0
 42775 14477 C1E815   		shrl	$21, %eax
14363:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42776              		.loc 1 14363 0
 42777 1447a 41C1E810 		shrl	$16, %r8d
 42778              	.LVL4209:
 42779              		.loc 1 14373 0
 42780 1447e C1EE15   		shrl	$21, %esi
14365:src/vm3.c     **** PC  =  nPC;
 42781              		.loc 1 14365 0
 42782 14481 83E01F   		andl	$31, %eax
 42783 14484 4183E01F 		andl	$31, %r8d
14374:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
14375:src/vm3.c     **** if (RF[rs] != RF[rt])
 42784              		.loc 1 14375 0
 42785 14488 83E61F   		andl	$31, %esi
14365:src/vm3.c     **** PC  =  nPC;
 42786              		.loc 1 14365 0
 42787 1448b 03148500 		addl	RF(,%rax,4), %edx
 42787      000000
 42788              	.LVL4210:
 42789 14492 8D4203   		leal	3(%rdx), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1381


 42790 14495 89D1     		movl	%edx, %ecx
 42791 14497 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42791      000000
 42792 1449e 0FB68000 		movzbl	VM_memory(%rax), %eax
 42792      000000
 42793 144a5 C1E118   		sall	$24, %ecx
 42794 144a8 09C8     		orl	%ecx, %eax
 42795 144aa 8D4A01   		leal	1(%rdx), %ecx
 42796 144ad 83C202   		addl	$2, %edx
 42797 144b0 0FB69200 		movzbl	VM_memory(%rdx), %edx
 42797      000000
 42798 144b7 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42798      000000
 42799 144be C1E208   		sall	$8, %edx
 42800 144c1 C1E110   		sall	$16, %ecx
 42801 144c4 09C8     		orl	%ecx, %eax
14374:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42802              		.loc 1 14374 0
 42803 144c6 89D9     		movl	%ebx, %ecx
14365:src/vm3.c     **** PC  =  nPC;
 42804              		.loc 1 14365 0
 42805 144c8 09D0     		orl	%edx, %eax
14374:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 42806              		.loc 1 14374 0
 42807 144ca C1E910   		shrl	$16, %ecx
14365:src/vm3.c     **** PC  =  nPC;
 42808              		.loc 1 14365 0
 42809 144cd 42890485 		movl	%eax, RF(,%r8,4)
 42809      00000000 
 42810              		.loc 1 14375 0
 42811 144d5 83E11F   		andl	$31, %ecx
14366:src/vm3.c     **** nPC  += 4;
 42812              		.loc 1 14366 0
 42813 144d8 8B050000 		movl	nPC(%rip), %eax
 42813      0000
 42814              		.loc 1 14375 0
 42815 144de 8B3C8D00 		movl	RF(,%rcx,4), %edi
 42815      000000
 42816 144e5 393CB500 		cmpl	%edi, RF(,%rsi,4)
 42816      000000
14367:src/vm3.c     **** 
 42817              		.loc 1 14367 0
 42818 144ec 8D5004   		leal	4(%rax), %edx
 42819              	.LVL4211:
 42820 144ef 448D4007 		leal	7(%rax), %r8d
 42821 144f3 8D7805   		leal	5(%rax), %edi
 42822 144f6 8D7006   		leal	6(%rax), %esi
 42823 144f9 4189D1   		movl	%edx, %r9d
14376:src/vm3.c     **** {
14377:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
14378:src/vm3.c     ****   PC  =  nPC;
 42824              		.loc 1 14378 0
 42825 144fc 89150000 		movl	%edx, PC(%rip)
 42825      0000
14375:src/vm3.c     **** {
 42826              		.loc 1 14375 0
 42827 14502 0F84B600 		je	.L1517
GAS LISTING /tmp/cc15eBE3.s 			page 1382


 42827      0000
 42828              	.LVL4212:
14379:src/vm3.c     ****   nPC  += (immediate << 2);
 42829              		.loc 1 14379 0
 42830 14508 0FBFDB   		movswl	%bx, %ebx
 42831              	.LVL4213:
14380:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 42832              		.loc 1 14380 0
 42833 1450b 450FB680 		movzbl	VM_memory(%r8), %r8d
 42833      00000000 
14379:src/vm3.c     ****   nPC  += (immediate << 2);
 42834              		.loc 1 14379 0
 42835 14513 8D049A   		leal	(%rdx,%rbx,4), %eax
 42836              		.loc 1 14380 0
 42837 14516 410FB691 		movzbl	VM_memory(%r9), %edx
 42837      00000000 
14379:src/vm3.c     ****   nPC  += (immediate << 2);
 42838              		.loc 1 14379 0
 42839 1451e 89050000 		movl	%eax, nPC(%rip)
 42839      0000
 42840              		.loc 1 14380 0
 42841 14524 C1E218   		sall	$24, %edx
 42842 14527 4109D0   		orl	%edx, %r8d
 42843 1452a 0FB69700 		movzbl	VM_memory(%rdi), %edx
 42843      000000
 42844 14531 C1E210   		sall	$16, %edx
 42845 14534 4109D0   		orl	%edx, %r8d
 42846 14537 0FB69600 		movzbl	VM_memory(%rsi), %edx
 42846      000000
 42847 1453e C1E208   		sall	$8, %edx
 42848 14541 4109D0   		orl	%edx, %r8d
 42849              	.LVL4214:
14381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42850              		.loc 1 14381 0
 42851 14544 4489C1   		movl	%r8d, %ecx
14382:src/vm3.c     ****   if (op0 == 0x0) {
14383:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 42852              		.loc 1 14383 0
 42853 14547 4488C2   		movb	%r8b, %dl
14381:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42854              		.loc 1 14381 0
 42855 1454a C1E91A   		shrl	$26, %ecx
 42856              	.LVL4215:
 42857              		.loc 1 14383 0
 42858 1454d 83E23F   		andl	$63, %edx
 42859 14550 8D712B   		leal	43(%rcx), %esi
 42860 14553 84C9     		testb	%cl, %cl
14384:src/vm3.c     ****     op0 = op0 + funct;
14385:src/vm3.c     ****   }
14386:src/vm3.c     ****     else {
14387:src/vm3.c     ****     op0 = op0 + FIX_OP;
14388:src/vm3.c     ****   }
14389:src/vm3.c     **** 
14390:src/vm3.c     **** p = array;
14391:src/vm3.c     **** p = p[op0].next_level;
14392:src/vm3.c     **** 
14393:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
GAS LISTING /tmp/cc15eBE3.s 			page 1383


 42861              		.loc 1 14393 0
 42862 14555 8D4803   		leal	3(%rax), %ecx
 42863              	.LVL4216:
 42864 14558 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42864      000000
 42865              	.LVL4217:
 42866 1455f 89C1     		movl	%eax, %ecx
14383:src/vm3.c     ****     op0 = op0 + funct;
 42867              		.loc 1 14383 0
 42868 14561 0F45D6   		cmovne	%esi, %edx
 42869              	.LVL4218:
 42870              		.loc 1 14393 0
 42871 14564 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42871      000000
14391:src/vm3.c     **** 
 42872              		.loc 1 14391 0
 42873 1456b 0FB6D2   		movzbl	%dl, %edx
 42874 1456e 48C1E204 		salq	$4, %rdx
 42875              	.LVL4219:
 42876              		.loc 1 14393 0
 42877 14572 C1E118   		sall	$24, %ecx
 42878 14575 09CB     		orl	%ecx, %ebx
 42879 14577 8D4801   		leal	1(%rax), %ecx
 42880 1457a 83C002   		addl	$2, %eax
 42881 1457d 0FB68000 		movzbl	VM_memory(%rax), %eax
 42881      000000
 42882 14584 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42882      000000
 42883 1458b C1E008   		sall	$8, %eax
 42884 1458e C1E110   		sall	$16, %ecx
 42885 14591 09CB     		orl	%ecx, %ebx
 42886 14593 09C3     		orl	%eax, %ebx
 42887              	.LVL4220:
14394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42888              		.loc 1 14394 0
 42889 14595 89D9     		movl	%ebx, %ecx
14395:src/vm3.c     ****   if (op1 == 0x0) {
14396:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 42890              		.loc 1 14396 0
 42891 14597 88D8     		movb	%bl, %al
14394:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42892              		.loc 1 14394 0
 42893 14599 C1E91A   		shrl	$26, %ecx
 42894              	.LVL4221:
 42895              		.loc 1 14396 0
 42896 1459c 83E03F   		andl	$63, %eax
 42897 1459f 8D712B   		leal	43(%rcx), %esi
 42898 145a2 84C9     		testb	%cl, %cl
 42899 145a4 0F45C6   		cmovne	%esi, %eax
 42900              	.LVL4222:
14397:src/vm3.c     ****     op1 = op1 + funct;
14398:src/vm3.c     ****   }
14399:src/vm3.c     ****     else {
14400:src/vm3.c     ****     op1 = op1 + FIX_OP;
14401:src/vm3.c     ****   }
14402:src/vm3.c     **** 
14403:src/vm3.c     **** goto *p[op1].code;
GAS LISTING /tmp/cc15eBE3.s 			page 1384


 42901              		.loc 1 14403 0
 42902 145a7 0FB6C0   		movzbl	%al, %eax
 42903 145aa 48C1E004 		salq	$4, %rax
 42904              	.LVL4223:
 42905 145ae 48038414 		addq	58088(%rsp,%rdx), %rax
 42905      E8E20000 
 42906 145b6 488B08   		movq	(%rax), %rcx
 42907 145b9 E99AC7FE 		jmp	.L269
 42907      FF
 42908              	.LVL4224:
 42909              	.L1517:
14404:src/vm3.c     **** 
14405:src/vm3.c     **** 
14406:src/vm3.c     **** }
14407:src/vm3.c     **** else
14408:src/vm3.c     **** {
14409:src/vm3.c     ****   PC  =  nPC;
14410:src/vm3.c     ****   nPC  += 4;
14411:src/vm3.c     **** }
14412:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 42910              		.loc 1 14412 0
 42911 145be 410FB691 		movzbl	VM_memory(%r9), %edx
 42911      00000000 
 42912 145c6 450FB680 		movzbl	VM_memory(%r8), %r8d
 42912      00000000 
14410:src/vm3.c     **** }
 42913              		.loc 1 14410 0
 42914 145ce 8D4808   		leal	8(%rax), %ecx
14413:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14414:src/vm3.c     ****   if (op0 == 0x0) {
14415:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14416:src/vm3.c     ****     op0 = op0 + funct;
14417:src/vm3.c     ****   }
14418:src/vm3.c     ****     else {
14419:src/vm3.c     ****     op0 = op0 + FIX_OP;
14420:src/vm3.c     ****   }
14421:src/vm3.c     **** 
14422:src/vm3.c     **** p = array;
14423:src/vm3.c     **** p = p[op0].next_level;
14424:src/vm3.c     **** 
14425:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 42915              		.loc 1 14425 0
 42916 145d1 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 42916      000000
 42917              	.LVL4225:
14410:src/vm3.c     **** }
 42918              		.loc 1 14410 0
 42919 145d8 890D0000 		movl	%ecx, nPC(%rip)
 42919      0000
 42920              		.loc 1 14425 0
 42921 145de 8D4809   		leal	9(%rax), %ecx
14412:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42922              		.loc 1 14412 0
 42923 145e1 C1E218   		sall	$24, %edx
 42924              		.loc 1 14425 0
 42925 145e4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42925      000000
GAS LISTING /tmp/cc15eBE3.s 			page 1385


14412:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42926              		.loc 1 14412 0
 42927 145eb 4109D0   		orl	%edx, %r8d
 42928 145ee 0FB69700 		movzbl	VM_memory(%rdi), %edx
 42928      000000
 42929 145f5 C1E210   		sall	$16, %edx
 42930 145f8 4109D0   		orl	%edx, %r8d
 42931 145fb 0FB69600 		movzbl	VM_memory(%rsi), %edx
 42931      000000
 42932 14602 C1E208   		sall	$8, %edx
 42933 14605 4109D0   		orl	%edx, %r8d
 42934              	.LVL4226:
14413:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42935              		.loc 1 14413 0
 42936 14608 4489C6   		movl	%r8d, %esi
14415:src/vm3.c     ****     op0 = op0 + funct;
 42937              		.loc 1 14415 0
 42938 1460b 4488C2   		movb	%r8b, %dl
14413:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 42939              		.loc 1 14413 0
 42940 1460e C1EE1A   		shrl	$26, %esi
 42941              	.LVL4227:
14415:src/vm3.c     ****     op0 = op0 + funct;
 42942              		.loc 1 14415 0
 42943 14611 83E23F   		andl	$63, %edx
 42944 14614 8D7E2B   		leal	43(%rsi), %edi
 42945 14617 4084F6   		testb	%sil, %sil
 42946 1461a 0F45D7   		cmovne	%edi, %edx
 42947              	.LVL4228:
 42948              		.loc 1 14425 0
 42949 1461d C1E110   		sall	$16, %ecx
 42950 14620 C1E318   		sall	$24, %ebx
 42951 14623 09CB     		orl	%ecx, %ebx
 42952 14625 8D480B   		leal	11(%rax), %ecx
 42953 14628 83C00A   		addl	$10, %eax
 42954 1462b 0FB68000 		movzbl	VM_memory(%rax), %eax
 42954      000000
14423:src/vm3.c     **** 
 42955              		.loc 1 14423 0
 42956 14632 0FB6D2   		movzbl	%dl, %edx
 42957              		.loc 1 14425 0
 42958 14635 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 42958      000000
14423:src/vm3.c     **** 
 42959              		.loc 1 14423 0
 42960 1463c 48C1E204 		salq	$4, %rdx
 42961              	.LVL4229:
 42962              		.loc 1 14425 0
 42963 14640 C1E008   		sall	$8, %eax
 42964 14643 09CB     		orl	%ecx, %ebx
 42965 14645 09C3     		orl	%eax, %ebx
 42966              	.LVL4230:
14426:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42967              		.loc 1 14426 0
 42968 14647 89D9     		movl	%ebx, %ecx
14427:src/vm3.c     ****   if (op1 == 0x0) {
14428:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1386


 42969              		.loc 1 14428 0
 42970 14649 88D8     		movb	%bl, %al
14426:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 42971              		.loc 1 14426 0
 42972 1464b C1E91A   		shrl	$26, %ecx
 42973              	.LVL4231:
 42974              		.loc 1 14428 0
 42975 1464e 83E03F   		andl	$63, %eax
 42976 14651 8D712B   		leal	43(%rcx), %esi
 42977 14654 84C9     		testb	%cl, %cl
 42978 14656 0F45C6   		cmovne	%esi, %eax
 42979              	.LVL4232:
14429:src/vm3.c     ****     op1 = op1 + funct;
14430:src/vm3.c     ****   }
14431:src/vm3.c     ****     else {
14432:src/vm3.c     ****     op1 = op1 + FIX_OP;
14433:src/vm3.c     ****   }
14434:src/vm3.c     **** 
14435:src/vm3.c     **** goto *p[op1].code;
 42980              		.loc 1 14435 0
 42981 14659 0FB6C0   		movzbl	%al, %eax
 42982 1465c 48C1E004 		salq	$4, %rax
 42983              	.LVL4233:
 42984 14660 48038414 		addq	58088(%rsp,%rdx), %rax
 42984      E8E20000 
 42985 14668 488B08   		movq	(%rax), %rcx
 42986 1466b E9E8C6FE 		jmp	.L269
 42986      FF
 42987              	.LVL4234:
 42988              	.L73:
14436:src/vm3.c     **** 
14437:src/vm3.c     **** 
14438:src/vm3.c     **** sltuPLUSlw:
14439:src/vm3.c     **** #if INDIRECT_DEBUG
14440:src/vm3.c     **** printf("%d|sltu\n",counter);
14441:src/vm3.c     **** counter++;
14442:src/vm3.c     **** #endif
14443:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 42989              		.loc 1 14443 0
 42990 14670 4489C2   		movl	%r8d, %edx
14444:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
14445:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 42991              		.loc 1 14445 0
 42992 14673 4489C0   		movl	%r8d, %eax
14444:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42993              		.loc 1 14444 0
 42994 14676 41C1E810 		shrl	$16, %r8d
 42995              	.LVL4235:
14443:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 42996              		.loc 1 14443 0
 42997 1467a C1EA15   		shrl	$21, %edx
14446:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 42998              		.loc 1 14446 0
 42999 1467d 4183E01F 		andl	$31, %r8d
14445:src/vm3.c     **** RF[rd] = (RF[rs] < RF[rt])?1:0;
 43000              		.loc 1 14445 0
 43001 14681 C1E80B   		shrl	$11, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1387


 43002              	.LVL4236:
 43003              		.loc 1 14446 0
 43004 14684 83E21F   		andl	$31, %edx
 43005 14687 428B3C85 		movl	RF(,%r8,4), %edi
 43005      00000000 
 43006 1468f 83E01F   		andl	$31, %eax
 43007 14692 393C9500 		cmpl	%edi, RF(,%rdx,4)
 43007      000000
 43008 14699 0F92C2   		setb	%dl
14447:src/vm3.c     **** PC  =  nPC;
14448:src/vm3.c     **** nPC  += 4;
 43009              		.loc 1 14448 0
 43010 1469c 83050000 		addl	$4, nPC(%rip)
 43010      000004
 43011              	.LVL4237:
14446:src/vm3.c     **** PC  =  nPC;
 43012              		.loc 1 14446 0
 43013 146a3 0FB6D2   		movzbl	%dl, %edx
 43014 146a6 89148500 		movl	%edx, RF(,%rax,4)
 43014      000000
14449:src/vm3.c     **** 
14450:src/vm3.c     **** #if INDIRECT_DEBUG
14451:src/vm3.c     **** printf("%d|lw\n",counter);
14452:src/vm3.c     **** counter++;
14453:src/vm3.c     **** #endif
14454:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 43015              		.loc 1 14454 0
 43016 146ad 89D8     		movl	%ebx, %eax
14455:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
14456:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
14457:src/vm3.c     **** RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + immedia
 43017              		.loc 1 14457 0
 43018 146af 0FBFD3   		movswl	%bx, %edx
14454:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 43019              		.loc 1 14454 0
 43020 146b2 C1E815   		shrl	$21, %eax
14455:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 43021              		.loc 1 14455 0
 43022 146b5 C1EB10   		shrl	$16, %ebx
 43023              	.LVL4238:
 43024              		.loc 1 14457 0
 43025 146b8 83E01F   		andl	$31, %eax
 43026 146bb 83E31F   		andl	$31, %ebx
 43027 146be 03148500 		addl	RF(,%rax,4), %edx
 43027      000000
 43028              	.LVL4239:
 43029 146c5 8D4203   		leal	3(%rdx), %eax
 43030 146c8 89D1     		movl	%edx, %ecx
 43031 146ca 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43031      000000
 43032 146d1 0FB68000 		movzbl	VM_memory(%rax), %eax
 43032      000000
 43033 146d8 C1E118   		sall	$24, %ecx
 43034 146db 09C8     		orl	%ecx, %eax
 43035 146dd 8D4A01   		leal	1(%rdx), %ecx
 43036 146e0 83C202   		addl	$2, %edx
 43037 146e3 0FB69200 		movzbl	VM_memory(%rdx), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1388


 43037      000000
 43038 146ea 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43038      000000
 43039 146f1 C1E208   		sall	$8, %edx
 43040 146f4 C1E110   		sall	$16, %ecx
 43041 146f7 09C8     		orl	%ecx, %eax
 43042 146f9 09D0     		orl	%edx, %eax
 43043 146fb 89049D00 		movl	%eax, RF(,%rbx,4)
 43043      000000
14458:src/vm3.c     **** PC  =  nPC;
 43044              		.loc 1 14458 0
 43045 14702 8B050000 		movl	nPC(%rip), %eax
 43045      0000
14459:src/vm3.c     **** nPC  += 4;
14460:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 43046              		.loc 1 14460 0
 43047 14708 8D5003   		leal	3(%rax), %edx
14459:src/vm3.c     **** nPC  += 4;
 43048              		.loc 1 14459 0
 43049 1470b 8D4804   		leal	4(%rax), %ecx
14458:src/vm3.c     **** PC  =  nPC;
 43050              		.loc 1 14458 0
 43051 1470e 89050000 		movl	%eax, PC(%rip)
 43051      0000
 43052              		.loc 1 14460 0
 43053 14714 440FB682 		movzbl	VM_memory(%rdx), %r8d
 43053      00000000 
 43054 1471c 89C2     		movl	%eax, %edx
14461:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14462:src/vm3.c     ****   if (op0 == 0x0) {
14463:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14464:src/vm3.c     ****     op0 = op0 + funct;
14465:src/vm3.c     ****   }
14466:src/vm3.c     ****     else {
14467:src/vm3.c     ****     op0 = op0 + FIX_OP;
14468:src/vm3.c     ****   }
14469:src/vm3.c     **** 
14470:src/vm3.c     **** p = array;
14471:src/vm3.c     **** p = p[op0].next_level;
14472:src/vm3.c     **** 
14473:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 43055              		.loc 1 14473 0
 43056 1471e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 43056      000000
14460:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43057              		.loc 1 14460 0
 43058 14725 0FB69200 		movzbl	VM_memory(%rdx), %edx
 43058      000000
14459:src/vm3.c     **** nPC  += 4;
 43059              		.loc 1 14459 0
 43060 1472c 890D0000 		movl	%ecx, nPC(%rip)
 43060      0000
 43061              		.loc 1 14473 0
 43062 14732 8D4805   		leal	5(%rax), %ecx
 43063 14735 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43063      000000
14460:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
GAS LISTING /tmp/cc15eBE3.s 			page 1389


 43064              		.loc 1 14460 0
 43065 1473c C1E218   		sall	$24, %edx
 43066 1473f 4109D0   		orl	%edx, %r8d
 43067 14742 8D5001   		leal	1(%rax), %edx
 43068 14745 0FB69200 		movzbl	VM_memory(%rdx), %edx
 43068      000000
 43069 1474c C1E210   		sall	$16, %edx
 43070 1474f 4109D0   		orl	%edx, %r8d
 43071 14752 8D5002   		leal	2(%rax), %edx
 43072 14755 0FB69200 		movzbl	VM_memory(%rdx), %edx
 43072      000000
 43073 1475c C1E208   		sall	$8, %edx
 43074 1475f 4109D0   		orl	%edx, %r8d
 43075              	.LVL4240:
14461:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43076              		.loc 1 14461 0
 43077 14762 4489C6   		movl	%r8d, %esi
14463:src/vm3.c     ****     op0 = op0 + funct;
 43078              		.loc 1 14463 0
 43079 14765 4488C2   		movb	%r8b, %dl
14461:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43080              		.loc 1 14461 0
 43081 14768 C1EE1A   		shrl	$26, %esi
 43082              	.LVL4241:
14463:src/vm3.c     ****     op0 = op0 + funct;
 43083              		.loc 1 14463 0
 43084 1476b 83E23F   		andl	$63, %edx
 43085 1476e 8D7E2B   		leal	43(%rsi), %edi
 43086 14771 4084F6   		testb	%sil, %sil
 43087 14774 0F45D7   		cmovne	%edi, %edx
 43088              	.LVL4242:
 43089              		.loc 1 14473 0
 43090 14777 C1E110   		sall	$16, %ecx
 43091 1477a C1E318   		sall	$24, %ebx
 43092 1477d 09CB     		orl	%ecx, %ebx
 43093 1477f 8D4807   		leal	7(%rax), %ecx
 43094 14782 83C006   		addl	$6, %eax
 43095 14785 0FB68000 		movzbl	VM_memory(%rax), %eax
 43095      000000
14471:src/vm3.c     **** 
 43096              		.loc 1 14471 0
 43097 1478c 0FB6D2   		movzbl	%dl, %edx
 43098              		.loc 1 14473 0
 43099 1478f 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43099      000000
14471:src/vm3.c     **** 
 43100              		.loc 1 14471 0
 43101 14796 48C1E204 		salq	$4, %rdx
 43102              	.LVL4243:
 43103              		.loc 1 14473 0
 43104 1479a C1E008   		sall	$8, %eax
 43105 1479d 09CB     		orl	%ecx, %ebx
 43106 1479f 09C3     		orl	%eax, %ebx
 43107              	.LVL4244:
14474:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43108              		.loc 1 14474 0
 43109 147a1 89D9     		movl	%ebx, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 1390


14475:src/vm3.c     ****   if (op1 == 0x0) {
14476:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 43110              		.loc 1 14476 0
 43111 147a3 88D8     		movb	%bl, %al
14474:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43112              		.loc 1 14474 0
 43113 147a5 C1E91A   		shrl	$26, %ecx
 43114              	.LVL4245:
 43115              		.loc 1 14476 0
 43116 147a8 83E03F   		andl	$63, %eax
 43117 147ab 8D712B   		leal	43(%rcx), %esi
 43118 147ae 84C9     		testb	%cl, %cl
 43119 147b0 0F45C6   		cmovne	%esi, %eax
 43120              	.LVL4246:
14477:src/vm3.c     ****     op1 = op1 + funct;
14478:src/vm3.c     ****   }
14479:src/vm3.c     ****     else {
14480:src/vm3.c     ****     op1 = op1 + FIX_OP;
14481:src/vm3.c     ****   }
14482:src/vm3.c     **** 
14483:src/vm3.c     **** goto *p[op1].code;
 43121              		.loc 1 14483 0
 43122 147b3 0FB6C0   		movzbl	%al, %eax
 43123 147b6 48C1E004 		salq	$4, %rax
 43124              	.LVL4247:
 43125 147ba 48038414 		addq	58088(%rsp,%rdx), %rax
 43125      E8E20000 
 43126 147c2 488B08   		movq	(%rax), %rcx
 43127 147c5 E98EC5FE 		jmp	.L269
 43127      FF
 43128              	.LVL4248:
 43129              	.L64:
14484:src/vm3.c     **** 
14485:src/vm3.c     **** 
14486:src/vm3.c     **** adduPLUSandi:
14487:src/vm3.c     **** #if INDIRECT_DEBUG
14488:src/vm3.c     **** printf("%d|addu\n",counter);
14489:src/vm3.c     **** counter++;
14490:src/vm3.c     **** #endif
14491:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
14492:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 43130              		.loc 1 14492 0
 43131 147ca 4489C0   		movl	%r8d, %eax
14493:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 43132              		.loc 1 14493 0
 43133 147cd 4489C2   		movl	%r8d, %edx
14491:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 43134              		.loc 1 14491 0
 43135 147d0 41C1E815 		shrl	$21, %r8d
 43136              	.LVL4249:
14492:src/vm3.c     **** rd = (instr0 >> 11) & 0x1F;
 43137              		.loc 1 14492 0
 43138 147d4 C1E810   		shrl	$16, %eax
 43139              	.LVL4250:
14494:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 43140              		.loc 1 14494 0
 43141 147d7 4183E01F 		andl	$31, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 1391


14493:src/vm3.c     **** RF[rd] = RF[rs] + RF[rt];
 43142              		.loc 1 14493 0
 43143 147db C1EA0B   		shrl	$11, %edx
 43144              	.LVL4251:
 43145              		.loc 1 14494 0
 43146 147de 83E01F   		andl	$31, %eax
 43147 147e1 83E21F   		andl	$31, %edx
14495:src/vm3.c     **** PC  =  nPC;
14496:src/vm3.c     **** nPC  += 4;
 43148              		.loc 1 14496 0
 43149 147e4 83050000 		addl	$4, nPC(%rip)
 43149      000004
 43150              	.LVL4252:
14494:src/vm3.c     **** PC  =  nPC;
 43151              		.loc 1 14494 0
 43152 147eb 8B048500 		movl	RF(,%rax,4), %eax
 43152      000000
 43153 147f2 42030485 		addl	RF(,%r8,4), %eax
 43153      00000000 
 43154 147fa 89049500 		movl	%eax, RF(,%rdx,4)
 43154      000000
14497:src/vm3.c     **** 
14498:src/vm3.c     **** #if INDIRECT_DEBUG
14499:src/vm3.c     **** printf("%d|andi\n",counter);
14500:src/vm3.c     **** counter++;
14501:src/vm3.c     **** #endif
14502:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 43155              		.loc 1 14502 0
 43156 14801 89DA     		movl	%ebx, %edx
14503:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 43157              		.loc 1 14503 0
 43158 14803 89D8     		movl	%ebx, %eax
14502:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 43159              		.loc 1 14502 0
 43160 14805 C1EA15   		shrl	$21, %edx
14504:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
14505:src/vm3.c     **** RF[rt] = RF[rs] & (uint32_t)immediate;
 43161              		.loc 1 14505 0
 43162 14808 0FBFDB   		movswl	%bx, %ebx
 43163              	.LVL4253:
14503:src/vm3.c     **** immediate = (instr1 >> 0) & 0xFFFF;
 43164              		.loc 1 14503 0
 43165 1480b C1E810   		shrl	$16, %eax
 43166              	.LVL4254:
 43167              		.loc 1 14505 0
 43168 1480e 83E21F   		andl	$31, %edx
 43169 14811 83E01F   		andl	$31, %eax
 43170 14814 231C9500 		andl	RF(,%rdx,4), %ebx
 43170      000000
 43171              	.LVL4255:
 43172 1481b 891C8500 		movl	%ebx, RF(,%rax,4)
 43172      000000
14506:src/vm3.c     **** PC  =  nPC;
 43173              		.loc 1 14506 0
 43174 14822 8B050000 		movl	nPC(%rip), %eax
 43174      0000
14507:src/vm3.c     **** nPC  += 4;
GAS LISTING /tmp/cc15eBE3.s 			page 1392


14508:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 43175              		.loc 1 14508 0
 43176 14828 8D5003   		leal	3(%rax), %edx
14507:src/vm3.c     **** nPC  += 4;
 43177              		.loc 1 14507 0
 43178 1482b 8D4804   		leal	4(%rax), %ecx
14506:src/vm3.c     **** PC  =  nPC;
 43179              		.loc 1 14506 0
 43180 1482e 89050000 		movl	%eax, PC(%rip)
 43180      0000
 43181              		.loc 1 14508 0
 43182 14834 440FB682 		movzbl	VM_memory(%rdx), %r8d
 43182      00000000 
 43183 1483c 89C2     		movl	%eax, %edx
14509:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14510:src/vm3.c     ****   if (op0 == 0x0) {
14511:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14512:src/vm3.c     ****     op0 = op0 + funct;
14513:src/vm3.c     ****   }
14514:src/vm3.c     ****     else {
14515:src/vm3.c     ****     op0 = op0 + FIX_OP;
14516:src/vm3.c     ****   }
14517:src/vm3.c     **** 
14518:src/vm3.c     **** p = array;
14519:src/vm3.c     **** p = p[op0].next_level;
14520:src/vm3.c     **** 
14521:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 43184              		.loc 1 14521 0
 43185 1483e 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 43185      000000
14508:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43186              		.loc 1 14508 0
 43187 14845 0FB69200 		movzbl	VM_memory(%rdx), %edx
 43187      000000
14507:src/vm3.c     **** nPC  += 4;
 43188              		.loc 1 14507 0
 43189 1484c 890D0000 		movl	%ecx, nPC(%rip)
 43189      0000
 43190              		.loc 1 14521 0
 43191 14852 8D4805   		leal	5(%rax), %ecx
 43192 14855 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43192      000000
14508:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43193              		.loc 1 14508 0
 43194 1485c C1E218   		sall	$24, %edx
 43195 1485f 4109D0   		orl	%edx, %r8d
 43196 14862 8D5001   		leal	1(%rax), %edx
 43197 14865 0FB69200 		movzbl	VM_memory(%rdx), %edx
 43197      000000
 43198 1486c C1E210   		sall	$16, %edx
 43199 1486f 4109D0   		orl	%edx, %r8d
 43200 14872 8D5002   		leal	2(%rax), %edx
 43201 14875 0FB69200 		movzbl	VM_memory(%rdx), %edx
 43201      000000
 43202 1487c C1E208   		sall	$8, %edx
 43203 1487f 4109D0   		orl	%edx, %r8d
 43204              	.LVL4256:
GAS LISTING /tmp/cc15eBE3.s 			page 1393


14509:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43205              		.loc 1 14509 0
 43206 14882 4489C6   		movl	%r8d, %esi
14511:src/vm3.c     ****     op0 = op0 + funct;
 43207              		.loc 1 14511 0
 43208 14885 4488C2   		movb	%r8b, %dl
14509:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43209              		.loc 1 14509 0
 43210 14888 C1EE1A   		shrl	$26, %esi
 43211              	.LVL4257:
14511:src/vm3.c     ****     op0 = op0 + funct;
 43212              		.loc 1 14511 0
 43213 1488b 83E23F   		andl	$63, %edx
 43214 1488e 8D7E2B   		leal	43(%rsi), %edi
 43215 14891 4084F6   		testb	%sil, %sil
 43216 14894 0F45D7   		cmovne	%edi, %edx
 43217              	.LVL4258:
 43218              		.loc 1 14521 0
 43219 14897 C1E110   		sall	$16, %ecx
 43220 1489a C1E318   		sall	$24, %ebx
 43221 1489d 09CB     		orl	%ecx, %ebx
 43222 1489f 8D4807   		leal	7(%rax), %ecx
 43223 148a2 83C006   		addl	$6, %eax
 43224 148a5 0FB68000 		movzbl	VM_memory(%rax), %eax
 43224      000000
14519:src/vm3.c     **** 
 43225              		.loc 1 14519 0
 43226 148ac 0FB6D2   		movzbl	%dl, %edx
 43227              		.loc 1 14521 0
 43228 148af 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43228      000000
14519:src/vm3.c     **** 
 43229              		.loc 1 14519 0
 43230 148b6 48C1E204 		salq	$4, %rdx
 43231              	.LVL4259:
 43232              		.loc 1 14521 0
 43233 148ba C1E008   		sall	$8, %eax
 43234 148bd 09CB     		orl	%ecx, %ebx
 43235 148bf 09C3     		orl	%eax, %ebx
 43236              	.LVL4260:
14522:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43237              		.loc 1 14522 0
 43238 148c1 89D9     		movl	%ebx, %ecx
14523:src/vm3.c     ****   if (op1 == 0x0) {
14524:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 43239              		.loc 1 14524 0
 43240 148c3 88D8     		movb	%bl, %al
14522:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43241              		.loc 1 14522 0
 43242 148c5 C1E91A   		shrl	$26, %ecx
 43243              	.LVL4261:
 43244              		.loc 1 14524 0
 43245 148c8 83E03F   		andl	$63, %eax
 43246 148cb 8D712B   		leal	43(%rcx), %esi
 43247 148ce 84C9     		testb	%cl, %cl
 43248 148d0 0F45C6   		cmovne	%esi, %eax
 43249              	.LVL4262:
GAS LISTING /tmp/cc15eBE3.s 			page 1394


14525:src/vm3.c     ****     op1 = op1 + funct;
14526:src/vm3.c     ****   }
14527:src/vm3.c     ****     else {
14528:src/vm3.c     ****     op1 = op1 + FIX_OP;
14529:src/vm3.c     ****   }
14530:src/vm3.c     **** 
14531:src/vm3.c     **** goto *p[op1].code;
 43250              		.loc 1 14531 0
 43251 148d3 0FB6C0   		movzbl	%al, %eax
 43252 148d6 48C1E004 		salq	$4, %rax
 43253              	.LVL4263:
 43254 148da 48038414 		addq	58088(%rsp,%rdx), %rax
 43254      E8E20000 
 43255 148e2 488B08   		movq	(%rax), %rcx
 43256 148e5 E96EC4FE 		jmp	.L269
 43256      FF
 43257              	.LVL4264:
 43258              	.L176:
14532:src/vm3.c     **** 
14533:src/vm3.c     **** 
14534:src/vm3.c     **** lbuPLUSbeq:
14535:src/vm3.c     **** #if INDIRECT_DEBUG
14536:src/vm3.c     **** printf("%d|lbu\n",counter);
14537:src/vm3.c     **** counter++;
14538:src/vm3.c     **** #endif
14539:src/vm3.c     **** rs = (instr0 >> 21) & 0x1F;
 43259              		.loc 1 14539 0
 43260 148ea 4489C2   		movl	%r8d, %edx
14540:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 43261              		.loc 1 14540 0
 43262 148ed 4489C0   		movl	%r8d, %eax
14541:src/vm3.c     **** immediate = (instr0 >> 0) & 0xFFFF;
14542:src/vm3.c     **** RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 43263              		.loc 1 14542 0
 43264 148f0 450FBFC0 		movswl	%r8w, %r8d
 43265              	.LVL4265:
14539:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 43266              		.loc 1 14539 0
 43267 148f4 C1EA15   		shrl	$21, %edx
14540:src/vm3.c     **** rt = (instr0 >> 16) & 0x1F;
 43268              		.loc 1 14540 0
 43269 148f7 C1E810   		shrl	$16, %eax
 43270              	.LVL4266:
14543:src/vm3.c     **** PC  =  nPC;
14544:src/vm3.c     **** nPC  += 4;
14545:src/vm3.c     **** 
14546:src/vm3.c     **** #if INDIRECT_DEBUG
14547:src/vm3.c     **** printf("%d|beq\n",counter);
14548:src/vm3.c     **** counter++;
14549:src/vm3.c     **** #endif
14550:src/vm3.c     **** rs = (instr1 >> 21) & 0x1F;
 43271              		.loc 1 14550 0
 43272 148fa 89DE     		movl	%ebx, %esi
14542:src/vm3.c     **** PC  =  nPC;
 43273              		.loc 1 14542 0
 43274 148fc 83E21F   		andl	$31, %edx
14551:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 1395


 43275              		.loc 1 14551 0
 43276 148ff 89D9     		movl	%ebx, %ecx
14542:src/vm3.c     **** PC  =  nPC;
 43277              		.loc 1 14542 0
 43278 14901 83E01F   		andl	$31, %eax
 43279 14904 44030495 		addl	RF(,%rdx,4), %r8d
 43279      00000000 
 43280              	.LVL4267:
14550:src/vm3.c     **** rt = (instr1 >> 16) & 0x1F;
 43281              		.loc 1 14550 0
 43282 1490c C1EE15   		shrl	$21, %esi
 43283              		.loc 1 14551 0
 43284 1490f C1E910   		shrl	$16, %ecx
14552:src/vm3.c     **** if (RF[rs] == RF[rt])
 43285              		.loc 1 14552 0
 43286 14912 83E61F   		andl	$31, %esi
 43287 14915 83E11F   		andl	$31, %ecx
14542:src/vm3.c     **** PC  =  nPC;
 43288              		.loc 1 14542 0
 43289 14918 410FB690 		movzbl	VM_memory(%r8), %edx
 43289      00000000 
 43290 14920 89148500 		movl	%edx, RF(,%rax,4)
 43290      000000
14543:src/vm3.c     **** nPC  += 4;
 43291              		.loc 1 14543 0
 43292 14927 8B050000 		movl	nPC(%rip), %eax
 43292      0000
 43293              		.loc 1 14552 0
 43294 1492d 8B3C8D00 		movl	RF(,%rcx,4), %edi
 43294      000000
 43295 14934 393CB500 		cmpl	%edi, RF(,%rsi,4)
 43295      000000
14544:src/vm3.c     **** 
 43296              		.loc 1 14544 0
 43297 1493b 8D5004   		leal	4(%rax), %edx
 43298              	.LVL4268:
 43299 1493e 448D4007 		leal	7(%rax), %r8d
 43300 14942 8D7805   		leal	5(%rax), %edi
 43301 14945 8D7006   		leal	6(%rax), %esi
 43302 14948 4189D1   		movl	%edx, %r9d
14553:src/vm3.c     **** {
14554:src/vm3.c     ****   immediate = (instr1 >> 0) & 0xFFFF;
14555:src/vm3.c     ****   PC  =  nPC;
 43303              		.loc 1 14555 0
 43304 1494b 89150000 		movl	%edx, PC(%rip)
 43304      0000
14552:src/vm3.c     **** {
 43305              		.loc 1 14552 0
 43306 14951 0F85B600 		jne	.L1534
 43306      0000
 43307              	.LVL4269:
14556:src/vm3.c     ****   nPC  += (immediate << 2);
 43308              		.loc 1 14556 0
 43309 14957 0FBFDB   		movswl	%bx, %ebx
 43310              	.LVL4270:
14557:src/vm3.c     ****     instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_mem
 43311              		.loc 1 14557 0
GAS LISTING /tmp/cc15eBE3.s 			page 1396


 43312 1495a 450FB680 		movzbl	VM_memory(%r8), %r8d
 43312      00000000 
14556:src/vm3.c     ****   nPC  += (immediate << 2);
 43313              		.loc 1 14556 0
 43314 14962 8D049A   		leal	(%rdx,%rbx,4), %eax
 43315              		.loc 1 14557 0
 43316 14965 410FB691 		movzbl	VM_memory(%r9), %edx
 43316      00000000 
14556:src/vm3.c     ****   nPC  += (immediate << 2);
 43317              		.loc 1 14556 0
 43318 1496d 89050000 		movl	%eax, nPC(%rip)
 43318      0000
 43319              		.loc 1 14557 0
 43320 14973 C1E218   		sall	$24, %edx
 43321 14976 4109D0   		orl	%edx, %r8d
 43322 14979 0FB69700 		movzbl	VM_memory(%rdi), %edx
 43322      000000
 43323 14980 C1E210   		sall	$16, %edx
 43324 14983 4109D0   		orl	%edx, %r8d
 43325 14986 0FB69600 		movzbl	VM_memory(%rsi), %edx
 43325      000000
 43326 1498d C1E208   		sall	$8, %edx
 43327 14990 4109D0   		orl	%edx, %r8d
 43328              	.LVL4271:
14558:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43329              		.loc 1 14558 0
 43330 14993 4489C1   		movl	%r8d, %ecx
14559:src/vm3.c     ****   if (op0 == 0x0) {
14560:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
 43331              		.loc 1 14560 0
 43332 14996 4488C2   		movb	%r8b, %dl
14558:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43333              		.loc 1 14558 0
 43334 14999 C1E91A   		shrl	$26, %ecx
 43335              	.LVL4272:
 43336              		.loc 1 14560 0
 43337 1499c 83E23F   		andl	$63, %edx
 43338 1499f 8D712B   		leal	43(%rcx), %esi
 43339 149a2 84C9     		testb	%cl, %cl
14561:src/vm3.c     ****     op0 = op0 + funct;
14562:src/vm3.c     ****   }
14563:src/vm3.c     ****     else {
14564:src/vm3.c     ****     op0 = op0 + FIX_OP;
14565:src/vm3.c     ****   }
14566:src/vm3.c     **** 
14567:src/vm3.c     **** p = array;
14568:src/vm3.c     **** p = p[op0].next_level;
14569:src/vm3.c     **** 
14570:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 43340              		.loc 1 14570 0
 43341 149a4 8D4803   		leal	3(%rax), %ecx
 43342              	.LVL4273:
 43343 149a7 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 43343      000000
 43344              	.LVL4274:
 43345 149ae 89C1     		movl	%eax, %ecx
14560:src/vm3.c     ****     op0 = op0 + funct;
GAS LISTING /tmp/cc15eBE3.s 			page 1397


 43346              		.loc 1 14560 0
 43347 149b0 0F45D6   		cmovne	%esi, %edx
 43348              	.LVL4275:
 43349              		.loc 1 14570 0
 43350 149b3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43350      000000
14568:src/vm3.c     **** 
 43351              		.loc 1 14568 0
 43352 149ba 0FB6D2   		movzbl	%dl, %edx
 43353 149bd 48C1E204 		salq	$4, %rdx
 43354              	.LVL4276:
 43355              		.loc 1 14570 0
 43356 149c1 C1E118   		sall	$24, %ecx
 43357 149c4 09CB     		orl	%ecx, %ebx
 43358 149c6 8D4801   		leal	1(%rax), %ecx
 43359 149c9 83C002   		addl	$2, %eax
 43360 149cc 0FB68000 		movzbl	VM_memory(%rax), %eax
 43360      000000
 43361 149d3 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43361      000000
 43362 149da C1E008   		sall	$8, %eax
 43363 149dd C1E110   		sall	$16, %ecx
 43364 149e0 09CB     		orl	%ecx, %ebx
 43365 149e2 09C3     		orl	%eax, %ebx
 43366              	.LVL4277:
14571:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43367              		.loc 1 14571 0
 43368 149e4 89D9     		movl	%ebx, %ecx
14572:src/vm3.c     ****   if (op1 == 0x0) {
14573:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 43369              		.loc 1 14573 0
 43370 149e6 88D8     		movb	%bl, %al
14571:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43371              		.loc 1 14571 0
 43372 149e8 C1E91A   		shrl	$26, %ecx
 43373              	.LVL4278:
 43374              		.loc 1 14573 0
 43375 149eb 83E03F   		andl	$63, %eax
 43376 149ee 8D712B   		leal	43(%rcx), %esi
 43377 149f1 84C9     		testb	%cl, %cl
 43378 149f3 0F45C6   		cmovne	%esi, %eax
 43379              	.LVL4279:
14574:src/vm3.c     ****     op1 = op1 + funct;
14575:src/vm3.c     ****   }
14576:src/vm3.c     ****     else {
14577:src/vm3.c     ****     op1 = op1 + FIX_OP;
14578:src/vm3.c     ****   }
14579:src/vm3.c     **** 
14580:src/vm3.c     **** goto *p[op1].code;
 43380              		.loc 1 14580 0
 43381 149f6 0FB6C0   		movzbl	%al, %eax
 43382 149f9 48C1E004 		salq	$4, %rax
 43383              	.LVL4280:
 43384 149fd 48038414 		addq	58088(%rsp,%rdx), %rax
 43384      E8E20000 
 43385 14a05 488B08   		movq	(%rax), %rcx
 43386 14a08 E94BC3FE 		jmp	.L269
GAS LISTING /tmp/cc15eBE3.s 			page 1398


 43386      FF
 43387              	.LVL4281:
 43388              	.L1534:
14581:src/vm3.c     **** 
14582:src/vm3.c     **** 
14583:src/vm3.c     **** }
14584:src/vm3.c     **** else
14585:src/vm3.c     **** {
14586:src/vm3.c     ****   PC  =  nPC;
14587:src/vm3.c     ****   nPC  += 4;
14588:src/vm3.c     **** }
14589:src/vm3.c     ****   instr0 = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t)VM_memor
 43389              		.loc 1 14589 0
 43390 14a0d 410FB691 		movzbl	VM_memory(%r9), %edx
 43390      00000000 
 43391 14a15 450FB680 		movzbl	VM_memory(%r8), %r8d
 43391      00000000 
14587:src/vm3.c     **** }
 43392              		.loc 1 14587 0
 43393 14a1d 8D4808   		leal	8(%rax), %ecx
14590:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
14591:src/vm3.c     ****   if (op0 == 0x0) {
14592:src/vm3.c     ****     funct = (instr0 >> 0) & 0x3F;
14593:src/vm3.c     ****     op0 = op0 + funct;
14594:src/vm3.c     ****   }
14595:src/vm3.c     ****     else {
14596:src/vm3.c     ****     op0 = op0 + FIX_OP;
14597:src/vm3.c     ****   }
14598:src/vm3.c     **** 
14599:src/vm3.c     **** p = array;
14600:src/vm3.c     **** p = p[op0].next_level;
14601:src/vm3.c     **** 
14602:src/vm3.c     ****   instr1 = (((uint32_t)VM_memory[nPC] <<24) | ((uint32_t)VM_memory[nPC+1] <<16) | ((uint32_t)VM_mem
 43394              		.loc 1 14602 0
 43395 14a20 0FB69900 		movzbl	VM_memory(%rcx), %ebx
 43395      000000
 43396              	.LVL4282:
14587:src/vm3.c     **** }
 43397              		.loc 1 14587 0
 43398 14a27 890D0000 		movl	%ecx, nPC(%rip)
 43398      0000
 43399              		.loc 1 14602 0
 43400 14a2d 8D4809   		leal	9(%rax), %ecx
14589:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43401              		.loc 1 14589 0
 43402 14a30 C1E218   		sall	$24, %edx
 43403              		.loc 1 14602 0
 43404 14a33 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43404      000000
14589:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43405              		.loc 1 14589 0
 43406 14a3a 4109D0   		orl	%edx, %r8d
 43407 14a3d 0FB69700 		movzbl	VM_memory(%rdi), %edx
 43407      000000
 43408 14a44 C1E210   		sall	$16, %edx
 43409 14a47 4109D0   		orl	%edx, %r8d
 43410 14a4a 0FB69600 		movzbl	VM_memory(%rsi), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 1399


 43410      000000
 43411 14a51 C1E208   		sall	$8, %edx
 43412 14a54 4109D0   		orl	%edx, %r8d
 43413              	.LVL4283:
14590:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43414              		.loc 1 14590 0
 43415 14a57 4489C6   		movl	%r8d, %esi
14592:src/vm3.c     ****     op0 = op0 + funct;
 43416              		.loc 1 14592 0
 43417 14a5a 4488C2   		movb	%r8b, %dl
14590:src/vm3.c     ****   op0 = (instr0 >> 26) & 0x3F;
 43418              		.loc 1 14590 0
 43419 14a5d C1EE1A   		shrl	$26, %esi
 43420              	.LVL4284:
14592:src/vm3.c     ****     op0 = op0 + funct;
 43421              		.loc 1 14592 0
 43422 14a60 83E23F   		andl	$63, %edx
 43423 14a63 8D7E2B   		leal	43(%rsi), %edi
 43424 14a66 4084F6   		testb	%sil, %sil
 43425 14a69 0F45D7   		cmovne	%edi, %edx
 43426              	.LVL4285:
 43427              		.loc 1 14602 0
 43428 14a6c C1E110   		sall	$16, %ecx
 43429 14a6f C1E318   		sall	$24, %ebx
 43430 14a72 09CB     		orl	%ecx, %ebx
 43431 14a74 8D480B   		leal	11(%rax), %ecx
 43432 14a77 83C00A   		addl	$10, %eax
 43433 14a7a 0FB68000 		movzbl	VM_memory(%rax), %eax
 43433      000000
14600:src/vm3.c     **** 
 43434              		.loc 1 14600 0
 43435 14a81 0FB6D2   		movzbl	%dl, %edx
 43436              		.loc 1 14602 0
 43437 14a84 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 43437      000000
14600:src/vm3.c     **** 
 43438              		.loc 1 14600 0
 43439 14a8b 48C1E204 		salq	$4, %rdx
 43440              	.LVL4286:
 43441              		.loc 1 14602 0
 43442 14a8f C1E008   		sall	$8, %eax
 43443 14a92 09CB     		orl	%ecx, %ebx
 43444 14a94 09C3     		orl	%eax, %ebx
 43445              	.LVL4287:
14603:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43446              		.loc 1 14603 0
 43447 14a96 89D9     		movl	%ebx, %ecx
14604:src/vm3.c     ****   if (op1 == 0x0) {
14605:src/vm3.c     ****     funct = (instr1 >> 0) & 0x3F;
 43448              		.loc 1 14605 0
 43449 14a98 88D8     		movb	%bl, %al
14603:src/vm3.c     ****   op1 = (instr1 >> 26) & 0x3F;
 43450              		.loc 1 14603 0
 43451 14a9a C1E91A   		shrl	$26, %ecx
 43452              	.LVL4288:
 43453              		.loc 1 14605 0
 43454 14a9d 83E03F   		andl	$63, %eax
GAS LISTING /tmp/cc15eBE3.s 			page 1400


 43455 14aa0 8D712B   		leal	43(%rcx), %esi
 43456 14aa3 84C9     		testb	%cl, %cl
 43457 14aa5 0F45C6   		cmovne	%esi, %eax
 43458              	.LVL4289:
14606:src/vm3.c     ****     op1 = op1 + funct;
14607:src/vm3.c     ****   }
14608:src/vm3.c     ****     else {
14609:src/vm3.c     ****     op1 = op1 + FIX_OP;
14610:src/vm3.c     ****   }
14611:src/vm3.c     **** 
14612:src/vm3.c     **** goto *p[op1].code;
 43459              		.loc 1 14612 0
 43460 14aa8 0FB6C0   		movzbl	%al, %eax
 43461 14aab 48C1E004 		salq	$4, %rax
 43462              	.LVL4290:
 43463 14aaf 48038414 		addq	58088(%rsp,%rdx), %rax
 43463      E8E20000 
 43464 14ab7 488B08   		movq	(%rax), %rcx
 43465 14aba E999C2FE 		jmp	.L269
 43465      FF
 43466              	.LVL4291:
 43467              	.L387:
14613:src/vm3.c     **** 
14614:src/vm3.c     **** 
14615:src/vm3.c     **** end:
14616:src/vm3.c     **** if(opt) {
 43468              		.loc 1 14616 0
 43469 14abf 85ED     		testl	%ebp, %ebp
 43470 14ac1 7419     		je	.L237
14617:src/vm3.c     ****   print_memory();
 43471              		.loc 1 14617 0
 43472 14ac3 E8000000 		call	print_memory
 43472      00
 43473              	.LVL4292:
14618:src/vm3.c     ****   print_registers();
14619:src/vm3.c     **** }
14620:src/vm3.c     **** 
14621:src/vm3.c     **** }
 43474              		.loc 1 14621 0
 43475 14ac8 4881C4C0 		addq	$59840, %rsp
 43475      E90000
 43476              		.cfi_remember_state
 43477              		.cfi_def_cfa_offset 48
 43478 14acf 5B       		popq	%rbx
 43479              		.cfi_def_cfa_offset 40
 43480              	.LVL4293:
 43481 14ad0 5D       		popq	%rbp
 43482              		.cfi_def_cfa_offset 32
 43483              	.LVL4294:
 43484 14ad1 415C     		popq	%r12
 43485              		.cfi_def_cfa_offset 24
 43486 14ad3 415D     		popq	%r13
 43487              		.cfi_def_cfa_offset 16
 43488              	.LVL4295:
 43489 14ad5 415E     		popq	%r14
 43490              		.cfi_def_cfa_offset 8
 43491              	.LVL4296:
GAS LISTING /tmp/cc15eBE3.s 			page 1401


14618:src/vm3.c     ****   print_registers();
 43492              		.loc 1 14618 0
 43493 14ad7 E9000000 		jmp	print_registers
 43493      00
 43494              	.LVL4297:
 43495              	.L237:
 43496              		.cfi_restore_state
 43497              		.loc 1 14621 0
 43498 14adc 4881C4C0 		addq	$59840, %rsp
 43498      E90000
 43499              		.cfi_def_cfa_offset 48
 43500 14ae3 5B       		popq	%rbx
 43501              		.cfi_def_cfa_offset 40
 43502              	.LVL4298:
 43503 14ae4 5D       		popq	%rbp
 43504              		.cfi_def_cfa_offset 32
 43505              	.LVL4299:
 43506 14ae5 415C     		popq	%r12
 43507              		.cfi_def_cfa_offset 24
 43508 14ae7 415D     		popq	%r13
 43509              		.cfi_def_cfa_offset 16
 43510              	.LVL4300:
 43511 14ae9 415E     		popq	%r14
 43512              		.cfi_def_cfa_offset 8
 43513              	.LVL4301:
 43514 14aeb C3       		ret
 43515              		.cfi_endproc
 43516              	.LFE11:
 43518              	.Letext0:
 43519              		.file 2 "/usr/include/stdint.h"
 43520              		.file 3 "src/vm.h"
 43521              		.file 4 "src/syscall.h"
GAS LISTING /tmp/cc15eBE3.s 			page 1402


DEFINED SYMBOLS
                            *ABS*:0000000000000000 vm3.c
     /tmp/cc15eBE3.s:7334   .text:0000000000000000 vm_cpu_super

UNDEFINED SYMBOLS
PC
nPC
RF
VM_memory
syscall
print_memory
print_registers
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"vm.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	advance_pc
   6              	advance_pc:
   7              	.LFB16:
   8              		.file 1 "src/vm.c"
   1:src/vm.c      **** /***************************************************************************
   2:src/vm.c      ****  *   Copyright (C) 2015 by                                                 *
   3:src/vm.c      ****  *   - Carlos Eduardo Millani (carloseduardomillani@gmail.com)             *
   4:src/vm.c      ****  *   - Edson Borin (edson@ic.unicamp.br)                                   *
   5:src/vm.c      ****  *                                                                         *
   6:src/vm.c      ****  *   This program is free software; you can redistribute it and/or modify  *
   7:src/vm.c      ****  *   it under the terms of the GNU General Public License as published by  *
   8:src/vm.c      ****  *   the Free Software Foundation; either version 2 of the License, or     *
   9:src/vm.c      ****  *   (at your option) any later version.                                   *
  10:src/vm.c      ****  *                                                                         *
  11:src/vm.c      ****  *   This program is distributed in the hope that it will be useful,       *
  12:src/vm.c      ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  13:src/vm.c      ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  14:src/vm.c      ****  *   GNU General Public License for more details.                          *
  15:src/vm.c      ****  *                                                                         *
  16:src/vm.c      ****  *   You should have received a copy of the GNU General Public License     *
  17:src/vm.c      ****  *   along with this program; if not, write to the                         *
  18:src/vm.c      ****  *   Free Software Foundation, Inc.,                                       *
  19:src/vm.c      ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  20:src/vm.c      ****  ***************************************************************************/
  21:src/vm.c      **** 
  22:src/vm.c      **** /*
  23:src/vm.c      ****  * Description: This file implements the virtual machine. 
  24:src/vm.c      ****  */
  25:src/vm.c      **** 
  26:src/vm.c      **** #ifdef __cplusplus
  27:src/vm.c      **** extern "C" {
  28:src/vm.c      **** #endif
  29:src/vm.c      **** 
  30:src/vm.c      **** 
  31:src/vm.c      **** #include "vm.h"
  32:src/vm.c      **** #include "syscall.h"
  33:src/vm.c      **** #include <inttypes.h>
  34:src/vm.c      **** #include <stdio.h>
  35:src/vm.c      **** #include <stdlib.h>
  36:src/vm.c      **** #include "journal.h"
  37:src/vm.c      **** 
  38:src/vm.c      **** void print_memory(void);
  39:src/vm.c      **** void print_registers(void);
  40:src/vm.c      **** 
  41:src/vm.c      **** #include "HAL.h"
  42:src/vm.c      **** 
  43:src/vm.c      **** /*typedef struct decoded_instruction
  44:src/vm.c      **** {
  45:src/vm.c      ****   uint8_t op;
  46:src/vm.c      ****   union {
  47:src/vm.c      ****     struct R {
  48:src/vm.c      ****       // op == 000000
  49:src/vm.c      ****       uint8_t rs, rt, rd, shamt, funct;
  50:src/vm.c      ****     } R;
GAS LISTING /tmp/cc15eBE3.s 			page 2


  51:src/vm.c      ****     struct I {
  52:src/vm.c      ****       uint8_t rs, rt; 
  53:src/vm.c      ****       uint16_t immediate;
  54:src/vm.c      ****     } I;
  55:src/vm.c      ****     struct J {
  56:src/vm.c      ****       uint32_t address;
  57:src/vm.c      ****     } J;
  58:src/vm.c      ****   };
  59:src/vm.c      **** } decoded_instruction_t;*/
  60:src/vm.c      **** 
  61:src/vm.c      **** 
  62:src/vm.c      **** /*
  63:src/vm.c      ****  * Central processing unit. It continuously fetches and executes
  64:src/vm.c      ****  * instructions.
  65:src/vm.c      ****  */
  66:src/vm.c      **** 
  67:src/vm.c      **** /* Register file. */
  68:src/vm.c      **** uint32_t RF[32];
  69:src/vm.c      **** /*VM memory vector*/
  70:src/vm.c      **** uint8_t VM_memory[VM_MEMORY_SZ] = {0};
  71:src/vm.c      **** 
  72:src/vm.c      **** uint32_t PC = 0;
  73:src/vm.c      **** uint32_t nPC = 4;
  74:src/vm.c      **** 
  75:src/vm.c      **** void advance_pc(int32_t offset)
  76:src/vm.c      **** {
   9              		.loc 1 76 0
  10              		.cfi_startproc
  11              	.LVL0:
  77:src/vm.c      **** 	PC  =  nPC;
  12              		.loc 1 77 0
  13 0000 8B050000 		movl	nPC(%rip), %eax
  13      0000
  14 0006 89050000 		movl	%eax, PC(%rip)
  14      0000
  78:src/vm.c      **** 	nPC  += offset;
  15              		.loc 1 78 0
  16 000c 01F8     		addl	%edi, %eax
  17 000e 89050000 		movl	%eax, nPC(%rip)
  17      0000
  18 0014 C3       		ret
  19              		.cfi_endproc
  20              	.LFE16:
  22              		.globl	vm_cpu_init_only
  24              	vm_cpu_init_only:
  25              	.LFB17:
  79:src/vm.c      **** }
  80:src/vm.c      **** 
  81:src/vm.c      **** 
  82:src/vm.c      **** void vm_cpu_init_only(uint32_t newPC, int opt)
  83:src/vm.c      **** {
  26              		.loc 1 83 0
  27              		.cfi_startproc
  28              	.LVL1:
  84:src/vm.c      **** #if COUNTING
  85:src/vm.c      **** 	int instruct_cnt = 0;
  86:src/vm.c      **** #endif
GAS LISTING /tmp/cc15eBE3.s 			page 3


  87:src/vm.c      **** #if COUNTING_STACK
  88:src/vm.c      **** 	int max_stack = VM_MEMORY_SZ;
  89:src/vm.c      **** #endif
  90:src/vm.c      **** 	PC = newPC;
  29              		.loc 1 90 0
  30 0015 893D0000 		movl	%edi, PC(%rip)
  30      0000
  91:src/vm.c      **** 	nPC = 4;
  31              		.loc 1 91 0
  32 001b C7050000 		movl	$4, nPC(%rip)
  32      00000400 
  32      0000
  92:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
  33              		.loc 1 92 0
  34 0025 C7050000 		movl	$0, RF(%rip)
  34      00000000 
  34      0000
  93:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
  35              		.loc 1 93 0
  36 002f C7050000 		movl	$1, RF+124(%rip)
  36      00000100 
  36      0000
  37              	.LVL2:
  38 0039 C3       		ret
  39              		.cfi_endproc
  40              	.LFE17:
  42              		.globl	fetch
  44              	fetch:
  45              	.LFB19:
  94:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
  95:src/vm.c      **** 	uint32_t offset = 4;
  96:src/vm.c      **** 	uint8_t halted = 0;
  97:src/vm.c      **** 	
  98:src/vm.c      **** 	return;
  99:src/vm.c      **** }
 100:src/vm.c      **** 
 101:src/vm.c      **** void vm_cpu(uint32_t newPC, int opt)
 102:src/vm.c      **** {
 103:src/vm.c      **** #if COUNTING
 104:src/vm.c      **** 	int instruct_cnt = 0;
 105:src/vm.c      **** #endif
 106:src/vm.c      **** #if COUNTING_STACK
 107:src/vm.c      **** 	int max_stack = VM_MEMORY_SZ;
 108:src/vm.c      **** #endif
 109:src/vm.c      **** 	PC = newPC;
 110:src/vm.c      **** 	nPC = 4;
 111:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
 112:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 113:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
 114:src/vm.c      **** 	uint32_t offset = 4;
 115:src/vm.c      **** 	uint8_t halted = 0;
 116:src/vm.c      **** 	
 117:src/vm.c      **** 	//return;
 118:src/vm.c      **** 
 119:src/vm.c      **** 	while (!halted) 
 120:src/vm.c      **** 	{
 121:src/vm.c      **** #if COUNTING
GAS LISTING /tmp/cc15eBE3.s 			page 4


 122:src/vm.c      **** 		instruct_cnt++;
 123:src/vm.c      **** #endif
 124:src/vm.c      **** #if COUNTING_STACK
 125:src/vm.c      **** 	if (max_stack > RF[29] && RF[29] != 0) max_stack = RF[29]; //Stack == 0 means it`s not yet initial
 126:src/vm.c      **** #endif
 127:src/vm.c      **** 		uint32_t instr = fetch(PC);
 128:src/vm.c      **** 		uint8_t op = (instr >> 26) & 0x3F;
 129:src/vm.c      **** #if DEBUGING
 130:src/vm.c      **** 		char a;
 131:src/vm.c      **** 		while (PC >= 0x160 && PC <= 0x2bc && (a = getchar()) != 'c')
 132:src/vm.c      **** 		{
 133:src/vm.c      **** 			switch (a)
 134:src/vm.c      **** 			{
 135:src/vm.c      **** 				case 'a':
 136:src/vm.c      **** 				print_memory();
 137:src/vm.c      **** 				break;
 138:src/vm.c      **** 				case 'b':
 139:src/vm.c      **** 				print_registers();
 140:src/vm.c      **** 				break;
 141:src/vm.c      **** 				default:
 142:src/vm.c      **** 				break;
 143:src/vm.c      **** 			}
 144:src/vm.c      **** 		}
 145:src/vm.c      **** 		printf("\n<Instr:%x op:%x\n\n", instr, op);
 146:src/vm.c      **** #endif
 147:src/vm.c      **** #if PRINTING_INST
 148:src/vm.c      **** 		printf("|-----------------------------------------------|\n");
 149:src/vm.c      **** 		printf("|PC:%x\tInstr:%x\tOp:%x\n", PC, instr,op);
 150:src/vm.c      **** 		printf("|-----------------------------------------------|\n");
 151:src/vm.c      **** #endif
 152:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 153:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 154:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 155:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 156:src/vm.c      **** 		uint32_t address = (instr >> 0) & 0x3FFFFFF;
 157:src/vm.c      **** 		
 158:src/vm.c      **** 		offset = 4; //default offset for non-branching instructions
 159:src/vm.c      **** 		//TODO Handle events here!
 160:src/vm.c      **** 		switch (op) 
 161:src/vm.c      **** 		{
 162:src/vm.c      **** 			case 0x0: { // 000000 => Register encoding.
 163:src/vm.c      **** 				uint8_t shamt = (instr >> 6) & 0x1F;
 164:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 165:src/vm.c      **** 			  
 166:src/vm.c      **** 				switch (funct) {
 167:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 168:src/vm.c      **** 						if (RF[rt] != 0) RF[rd] = RF[rs];
 169:src/vm.c      **** 						break;
 170:src/vm.c      **** 					}
 171:src/vm.c      **** 					case 0b001010: { // movz	001010 				if(rt==0) rd = rs
 172:src/vm.c      **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
 173:src/vm.c      **** 						break;
 174:src/vm.c      **** 					}
 175:src/vm.c      **** 					case 0b100000: { // add		100000	ArithLog	$d = $s + $t
 176:src/vm.c      **** 						RF[rd] = RF[rs] + RF[rt];
 177:src/vm.c      **** 						break;
 178:src/vm.c      **** 					}
GAS LISTING /tmp/cc15eBE3.s 			page 5


 179:src/vm.c      **** 					case 0b100001: { // addu	100001	ArithLog	$d = $s + $t
 180:src/vm.c      **** 						RF[rd] = RF[rs] + RF[rt];
 181:src/vm.c      **** 						break;
 182:src/vm.c      **** 					}
 183:src/vm.c      **** 					case 0b100100: { // and		100100	ArithLog	$d = $s & $t
 184:src/vm.c      **** 						RF[rd] = RF[rs] & RF[rt];
 185:src/vm.c      **** 						break;
 186:src/vm.c      **** 					}
 187:src/vm.c      **** 					case 0b011010: { // div		011010  DivMult		lo = $s / $t; hi = $s % $t
 188:src/vm.c      **** 						LO = RF[rs] / RF[rt];
 189:src/vm.c      **** 						HI = RF[rs] % RF[rt];
 190:src/vm.c      **** 						break;
 191:src/vm.c      **** 					}
 192:src/vm.c      **** 					case 0b011011: { // divu	011011  DivMult		lo = $s / $t; hi = $s % $t
 193:src/vm.c      **** 						LO = RF[rs] / RF[rt];
 194:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 195:src/vm.c      **** 						break;
 196:src/vm.c      **** 					}
 197:src/vm.c      **** 					case 0b011000: { // mult	011000  DivMult		hi:lo = $s * $t
 198:src/vm.c      **** 						uint64_t mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 199:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 200:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;
 201:src/vm.c      **** 						break;
 202:src/vm.c      **** 					}
 203:src/vm.c      **** 					case 0b011001: { // multu	011001	DivMult		hi:lo = $s * $t
 204:src/vm.c      **** 						uint64_t mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 205:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 206:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;  
 207:src/vm.c      **** 						break;
 208:src/vm.c      **** 					}
 209:src/vm.c      **** 					case 0b100111: { // nor		100111	ArithLog	$d = ~($s | $t)
 210:src/vm.c      **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 211:src/vm.c      **** 						break;
 212:src/vm.c      **** 					}
 213:src/vm.c      **** 					case 0b100101: { // or		100101	ArithLog	$d = $s | $t
 214:src/vm.c      **** 						RF[rd] = RF[rs] | RF[rt];
 215:src/vm.c      **** 						break;
 216:src/vm.c      **** 					}
 217:src/vm.c      **** 					case 0b000000: { // sll		000000	Shift		$d = $t << a
 218:src/vm.c      **** 						RF[rd] = RF[rt] << shamt;
 219:src/vm.c      **** 						break;
 220:src/vm.c      **** 					}
 221:src/vm.c      **** 					case 0b000100: { // sllv	000100	ShiftV		$d = $t << $s
 222:src/vm.c      **** 						RF[rd] = RF[rt] << RF[rs];
 223:src/vm.c      **** 						break;
 224:src/vm.c      **** 					}
 225:src/vm.c      **** 					case 0b000011: { // sra		000011	Shift		$d = $t >> a 
 226:src/vm.c      **** 						if ((int32_t)RF[rt] < 0 && shamt > 0)
 227:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 228:src/vm.c      **** 					    else
 229:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] >> shamt;
 230:src/vm.c      **** 						break;
 231:src/vm.c      **** 					}
 232:src/vm.c      **** 					case 0b000111: { // srav	000111	ShiftV		$d = $t >> $s
 233:src/vm.c      **** 						RF[rd] = RF[rt] >> RF[rs];
 234:src/vm.c      **** 						break;
 235:src/vm.c      **** 					}
GAS LISTING /tmp/cc15eBE3.s 			page 6


 236:src/vm.c      **** 					case 0b000010: { // srl		000010	Shift		$d = $t >>> a
 237:src/vm.c      **** 						RF[rd] = RF[rt] >> shamt;
 238:src/vm.c      **** 						break;
 239:src/vm.c      **** 					}
 240:src/vm.c      **** 					case 0b000110: { // srlv	000110	ShiftV		$d = $t >>> $s
 241:src/vm.c      **** 						RF[rd] = RF[rt] >> RF[rs];  
 242:src/vm.c      **** 						break;
 243:src/vm.c      **** 					}
 244:src/vm.c      **** 					case 0b100010: { // sub		100010	ArithLog	$d = $s - $t
 245:src/vm.c      **** 						RF[rd] = RF[rs] - RF[rt];  
 246:src/vm.c      **** 						break;
 247:src/vm.c      **** 					}
 248:src/vm.c      **** 					case 0b100011: { // subu	100011	ArithLog	$d = $s - $t
 249:src/vm.c      **** 						RF[rd] = RF[rs] - RF[rt];    
 250:src/vm.c      **** 						break;
 251:src/vm.c      **** 					}
 252:src/vm.c      **** 					case 0b100110: { // xor		100110  ArithLog	$d = $s ^ $t
 253:src/vm.c      **** 						RF[rd] = RF[rs] ^ RF[rt];    
 254:src/vm.c      **** 						break;
 255:src/vm.c      **** 					}
 256:src/vm.c      **** 					case 0b101010: { // slt		101010	ArithLog	$d = ($s < $t)
 257:src/vm.c      **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 258:src/vm.c      **** 						break;
 259:src/vm.c      **** 					}
 260:src/vm.c      **** 					case 0b101011: { // sltu	101011	ArithLog	$d = ($s < $t)
 261:src/vm.c      **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 262:src/vm.c      **** 						break;
 263:src/vm.c      **** 					}
 264:src/vm.c      **** 					case 0b001001: { // jalr	001001	JumpR		$31 = pc; pc = $s
 265:src/vm.c      **** 						RF[31] = PC+8;
 266:src/vm.c      **** 						PC = nPC;
 267:src/vm.c      **** 						nPC = RF[rs];
 268:src/vm.c      **** 						continue;
 269:src/vm.c      **** 					}
 270:src/vm.c      **** 					case 0b001000: { // jr		001000	JumpR		pc = $s 
 271:src/vm.c      **** 						PC = nPC;
 272:src/vm.c      **** 						nPC = RF[rs];
 273:src/vm.c      **** 						continue;
 274:src/vm.c      **** 					}
 275:src/vm.c      **** 					case 0b010000: { // mfhi	010000	MoveFrom	$d = hi
 276:src/vm.c      **** 						RF[rd] = HI;
 277:src/vm.c      **** 						break;
 278:src/vm.c      **** 					}
 279:src/vm.c      **** 					case 0b010010: { // mflo	010010	MoveFrom	$d = lo
 280:src/vm.c      **** 						RF[rd] = LO;
 281:src/vm.c      **** 						break;
 282:src/vm.c      **** 					}
 283:src/vm.c      **** 					case 0b010001: { // mthi	010001	MoveTo		hi = $s
 284:src/vm.c      **** 						HI = RF[rs];
 285:src/vm.c      **** 						break;
 286:src/vm.c      **** 					}
 287:src/vm.c      **** 					case 0b010011: { // mtlo	010011	MoveTo		lo = $s
 288:src/vm.c      **** 						LO = RF[rs];
 289:src/vm.c      **** 						break;
 290:src/vm.c      **** 					}
 291:src/vm.c      **** 					case 0b001100: { // syscall 	001100	syscall		$2		seen on the .s generated by the ecc compiler
 292:src/vm.c      **** 						if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respec
GAS LISTING /tmp/cc15eBE3.s 			page 7


 293:src/vm.c      **** 						{
 294:src/vm.c      **** 							halted = 1; //Syscall returned 1, exit code
 295:src/vm.c      **** #if PRINTING
 296:src/vm.c      **** 							printf("Vm stopped by exit signal\n");
 297:src/vm.c      **** #endif
 298:src/vm.c      **** 						}
 299:src/vm.c      **** 						break; 
 300:src/vm.c      **** 					}	
 301:src/vm.c      **** 					default:
 302:src/vm.c      **** 					{
 303:src/vm.c      **** 		#if PRINTING
 304:src/vm.c      **** 						if (instr != 0)	printf("\n(ERROR)Invalid instruction %x at PC: %x\n",instr, PC);
 305:src/vm.c      **** 		#endif
 306:src/vm.c      **** 					}
 307:src/vm.c      **** 					break;
 308:src/vm.c      **** 				}      
 309:src/vm.c      **** 				break; // case 0x0
 310:src/vm.c      **** 			}
 311:src/vm.c      **** 			
 312:src/vm.c      **** 			//Immediate encoding
 313:src/vm.c      **** 			case 0b001000: { //addi    001000  ArithLogI       $t = $s + SE(i)
 314:src/vm.c      **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
 315:src/vm.c      **** 				break;
 316:src/vm.c      **** 			}
 317:src/vm.c      **** 			case 0b001001: { //addiu   001001  ArithLogI       $t = $s + SE(i)
 318:src/vm.c      **** 				RF[rt] = (RF[rs] + immediate);
 319:src/vm.c      **** 				break;
 320:src/vm.c      **** 			}
 321:src/vm.c      **** 			case 0b001100: { //andi    001100  ArithLogI       $t = $s & ZE(i)
 322:src/vm.c      **** 			    RF[rt] = RF[rs] & (uint32_t)immediate;
 323:src/vm.c      **** 				break;
 324:src/vm.c      **** 			}
 325:src/vm.c      **** 			case 0b001101: { //ori     001101  ArithLogI       $t = $s | ZE(i)
 326:src/vm.c      **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
 327:src/vm.c      **** 				break;
 328:src/vm.c      **** 			}
 329:src/vm.c      **** 			case 0b001110: { //xori    001110  ArithLogI       $d = $s ^ ZE(i)
 330:src/vm.c      **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
 331:src/vm.c      **** 				break;
 332:src/vm.c      **** 			}
 333:src/vm.c      **** 			case 0b001111: 	 //lui	   001111          Rdest, imm: Load Upper Immediate
 334:src/vm.c      **** 			case 0b011001: { //lhi     011001  LoadI   HH ($t) = i 
 335:src/vm.c      **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 336:src/vm.c      **** 				break;
 337:src/vm.c      **** 			}
 338:src/vm.c      **** 			case 0b011000: { //llo     011000  LoadI   LH ($t) = i
 339:src/vm.c      **** 			  	RF[rt] = immediate;
 340:src/vm.c      **** 				break;
 341:src/vm.c      **** 			}
 342:src/vm.c      **** 			case 0b001010: { //slti    001010  ArithLogI       $t = ($s < SE(i))
 343:src/vm.c      **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
 344:src/vm.c      **** 				break;
 345:src/vm.c      **** 			}
 346:src/vm.c      **** 			case 0b001011: { //sltiu   001011  ArithLogI       $t = ($s < SE(i)) 
 347:src/vm.c      **** 				RF[rt] = (RF[rs] < immediate)?1:0;
 348:src/vm.c      **** 				break;
 349:src/vm.c      **** 			}
GAS LISTING /tmp/cc15eBE3.s 			page 8


 350:src/vm.c      **** 			case 0b000001: {
 351:src/vm.c      **** 				if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
 352:src/vm.c      **** 				{
 353:src/vm.c      **** 					if ((int32_t)RF[rs] >= 0)
 354:src/vm.c      **** 					{
 355:src/vm.c      **** 						advance_pc(immediate << 2);
 356:src/vm.c      **** 						continue;
 357:src/vm.c      **** 					}
 358:src/vm.c      **** 					else
 359:src/vm.c      **** 					{
 360:src/vm.c      **** 						break;
 361:src/vm.c      **** 					}
 362:src/vm.c      **** 				}
 363:src/vm.c      **** 				else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
 364:src/vm.c      **** 				{
 365:src/vm.c      **** 					if ((int32_t)RF[rs] >= 0)
 366:src/vm.c      **** 					{
 367:src/vm.c      **** 						RF[31] = PC + 8;
 368:src/vm.c      **** 						advance_pc(immediate << 2);
 369:src/vm.c      **** 						continue;
 370:src/vm.c      **** 					}
 371:src/vm.c      **** 					else
 372:src/vm.c      **** 					{
 373:src/vm.c      **** 						break;
 374:src/vm.c      **** 					}
 375:src/vm.c      **** 				}
 376:src/vm.c      **** 				else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
 377:src/vm.c      **** 				{
 378:src/vm.c      **** 					if ((int32_t)RF[rs] < 0)
 379:src/vm.c      **** 					{
 380:src/vm.c      **** 						advance_pc(immediate << 2);
 381:src/vm.c      **** 						continue;
 382:src/vm.c      **** 					}
 383:src/vm.c      **** 					else
 384:src/vm.c      **** 					{
 385:src/vm.c      **** 						break;
 386:src/vm.c      **** 					}
 387:src/vm.c      **** 				}
 388:src/vm.c      **** 				else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
 389:src/vm.c      **** 				{
 390:src/vm.c      **** 					if ((int32_t)RF[rs] < 0)
 391:src/vm.c      **** 					{
 392:src/vm.c      **** 						RF[31] = PC + 8;
 393:src/vm.c      **** 						advance_pc(immediate << 2);
 394:src/vm.c      **** 						continue;
 395:src/vm.c      **** 					}
 396:src/vm.c      **** 					else
 397:src/vm.c      **** 					{
 398:src/vm.c      **** 						break;
 399:src/vm.c      **** 					}
 400:src/vm.c      **** 				}
 401:src/vm.c      **** 				break;
 402:src/vm.c      **** 			}
 403:src/vm.c      **** 			case 0b000100: { //beq     000100  Branch  if ($s == $t) pc += i << 2
 404:src/vm.c      **** 				if (RF[rs] == RF[rt])
 405:src/vm.c      **** 				{
 406:src/vm.c      **** 					advance_pc(immediate << 2);
GAS LISTING /tmp/cc15eBE3.s 			page 9


 407:src/vm.c      **** 					continue;
 408:src/vm.c      **** 				}
 409:src/vm.c      **** 				else
 410:src/vm.c      **** 				{
 411:src/vm.c      **** 					break;
 412:src/vm.c      **** 				}
 413:src/vm.c      **** 				break;
 414:src/vm.c      **** 			}
 415:src/vm.c      **** 			case 0b000111: { //bgtz    000111  BranchZ if ($s > 0) pc += i << 2
 416:src/vm.c      **** 				if ((int32_t)RF[rs] > 0)
 417:src/vm.c      **** 				{
 418:src/vm.c      **** 					advance_pc(immediate << 2);
 419:src/vm.c      **** 					continue;
 420:src/vm.c      **** 				}
 421:src/vm.c      **** 				else
 422:src/vm.c      **** 				{
 423:src/vm.c      **** 					break;
 424:src/vm.c      **** 				}
 425:src/vm.c      **** 				break;
 426:src/vm.c      **** 			}
 427:src/vm.c      **** 			case 0b000110: { //blez    000110  BranchZ if ($s <= 0) pc += i << 2
 428:src/vm.c      **** 				if ((int32_t)RF[rs] <= 0)
 429:src/vm.c      **** 				{
 430:src/vm.c      **** 					advance_pc(immediate << 2);
 431:src/vm.c      **** 					continue;
 432:src/vm.c      **** 				}
 433:src/vm.c      **** 				else
 434:src/vm.c      **** 				{
 435:src/vm.c      **** 					break;
 436:src/vm.c      **** 				}
 437:src/vm.c      **** 				break;
 438:src/vm.c      **** 			}
 439:src/vm.c      **** 			case 0b000101: { //bne     000101  Branch  if ($s != $t) pc += i << 2
 440:src/vm.c      **** #if DEBUGING
 441:src/vm.c      **** 				printf(">>RA:%x\tAddress:%x\n", RF[31], immediate<<2);
 442:src/vm.c      **** #endif
 443:src/vm.c      **** 				if (RF[rs] != RF[rt])
 444:src/vm.c      **** 				{
 445:src/vm.c      **** 					advance_pc(immediate << 2);
 446:src/vm.c      **** 					continue;
 447:src/vm.c      **** 				}
 448:src/vm.c      **** 				else
 449:src/vm.c      **** 				{
 450:src/vm.c      **** 					break;
 451:src/vm.c      **** 				}
 452:src/vm.c      **** 				break;
 453:src/vm.c      **** 			}
 454:src/vm.c      **** 			case 0b100000: { //lb      100000  LoadStore       $t = SE (MEM [$s + i]:1)
 455:src/vm.c      **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
 456:src/vm.c      **** 				break;
 457:src/vm.c      **** 			}
 458:src/vm.c      **** 			case 0b100100: { //lbu     100100  LoadStore       $t = ZE (MEM [$s + i]:1)
 459:src/vm.c      **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 460:src/vm.c      **** 				break;
 461:src/vm.c      **** 			}
 462:src/vm.c      **** 			case 0b100001: { //lh      100001  LoadStore       $t = SE (MEM [$s + i]:2)
 463:src/vm.c      **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
GAS LISTING /tmp/cc15eBE3.s 			page 10


 464:src/vm.c      **** 				break;
 465:src/vm.c      **** 			}
 466:src/vm.c      **** 			case 0b100101: { //lhu     100101  LoadStore       $t = ZE (MEM [$s + i]:2)
 467:src/vm.c      **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
 468:src/vm.c      **** 				break;
 469:src/vm.c      **** 			}
 470:src/vm.c      **** 			case 0b100011: { //lw      100011  LoadStore       $t = MEM [$s + i]:4
 471:src/vm.c      **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 472:src/vm.c      **** 				break;
 473:src/vm.c      **** 			}
 474:src/vm.c      **** 			case 0b101000: { //sb      101000  LoadStore       MEM [$s + i]:1 = LB ($t)
 475:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 476:src/vm.c      **** 				break;
 477:src/vm.c      **** 			}
 478:src/vm.c      **** 			case 0b101001: { //sh      101001  LoadStore       MEM [$s + i]:2 = LH ($t)
 479:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 480:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 481:src/vm.c      **** 				break;
 482:src/vm.c      **** 			}
 483:src/vm.c      **** 			case 0b101011: { //sw      101011  LoadStore       MEM [$s + i]:4 = $t
 484:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 485:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 486:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 487:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 488:src/vm.c      **** 				break;
 489:src/vm.c      **** 			}
 490:src/vm.c      **** 	
 491:src/vm.c      **** 			//Jump encoding
 492:src/vm.c      **** 			
 493:src/vm.c      **** 			case 0b000010: { //j       000010  Jump    pc = i << 2
 494:src/vm.c      **** 				PC = nPC;
 495:src/vm.c      **** 				nPC = address << 2;
 496:src/vm.c      **** 				continue;
 497:src/vm.c      **** 			}
 498:src/vm.c      **** 			case 0b000011: { //jal     000011  Jump    $31 = pc; pc = i << 2
 499:src/vm.c      **** #if DEBUGING
 500:src/vm.c      **** 				printf(">>RA:%x\tAddress:%x\n", RF[31], address<<2);
 501:src/vm.c      **** #endif
 502:src/vm.c      **** 				RF[31] = PC + 8;
 503:src/vm.c      **** 				PC = nPC;
 504:src/vm.c      **** 				nPC = address << 2;
 505:src/vm.c      **** 				continue;
 506:src/vm.c      **** 			}
 507:src/vm.c      **** 			case 0b011010: { //trap    011010  Trap    Dependent on operating system; different values for i
 508:src/vm.c      **** 				syscall((uint8_t)(address&0xFF));
 509:src/vm.c      **** 				break;
 510:src/vm.c      **** 			}
 511:src/vm.c      **** 			
 512:src/vm.c      **** 			
 513:src/vm.c      **** 			
 514:src/vm.c      **** 			case 0b101010: { //swl Rsrc1, imm(Rsrc2): Store Word Left
 515:src/vm.c      **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 516:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 517:src/vm.c      **** 				break;
 518:src/vm.c      **** 			}
 519:src/vm.c      **** 			case 0b101110: { //swr Rsrc1, imm(Rsrc2): Store Word Right
 520:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
GAS LISTING /tmp/cc15eBE3.s 			page 11


 521:src/vm.c      **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 522:src/vm.c      **** 				break;
 523:src/vm.c      **** 			}
 524:src/vm.c      **** 			case 0b100010: { //lwl Rdest, imm(Rsrc): Load Word Left
 525:src/vm.c      **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
 526:src/vm.c      **** 				break;
 527:src/vm.c      **** 			}
 528:src/vm.c      **** 			case 0b100110: { //lwr Rdest, imm(Rsrc): Load Word Right
 529:src/vm.c      **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
 530:src/vm.c      **** 				break;
 531:src/vm.c      **** 			}
 532:src/vm.c      **** 			
 533:src/vm.c      **** 			//uint8_t op = (instr >> 26) & 0x3F;
 534:src/vm.c      **** 			break; //op
 535:src/vm.c      **** 			default:
 536:src/vm.c      **** 			{
 537:src/vm.c      **** #if PRINTING
 538:src/vm.c      **** 				if (instr != 0)	printf("\n(ERROR)Invalid instruction %x at PC: %x\n",instr, PC);
 539:src/vm.c      **** #endif
 540:src/vm.c      **** 				break;
 541:src/vm.c      **** 			}
 542:src/vm.c      **** 		}
 543:src/vm.c      **** 		advance_pc(offset);//Advances the PC
 544:src/vm.c      **** 	}
 545:src/vm.c      **** #if COUNTING
 546:src/vm.c      **** 	print("INSTCOUNT.");
 547:src/vm.c      **** 	printnum(instruct_cnt);
 548:src/vm.c      **** 	print(".");
 549:src/vm.c      **** 	print("\n");
 550:src/vm.c      **** #endif
 551:src/vm.c      **** #if COUNTING_STACK
 552:src/vm.c      **** 	print("MAXSTACK");
 553:src/vm.c      **** 	printnum(VM_MEMORY_SZ - max_stack);
 554:src/vm.c      **** 	print("\n");
 555:src/vm.c      **** #endif
 556:src/vm.c      **** 	
 557:src/vm.c      **** 	if(opt) {
 558:src/vm.c      **** 	  print_memory();
 559:src/vm.c      **** 	  print_registers();
 560:src/vm.c      **** 	}
 561:src/vm.c      **** }
 562:src/vm.c      **** uint32_t fetch(uint32_t PC)
 563:src/vm.c      **** {
  46              		.loc 1 563 0
  47              		.cfi_startproc
  48              	.LVL3:
 564:src/vm.c      **** #if DEBUGING
 565:src/vm.c      **** 	printf("<Will fetch %x\n", PC);
 566:src/vm.c      **** #endif	
 567:src/vm.c      **** 	uint32_t ret_val = (((uint32_t)VM_memory[PC] <<24) | ((uint32_t)VM_memory[PC+1] <<16) | ((uint32_t
  49              		.loc 1 567 0
  50 003a 8D4703   		leal	3(%rdi), %eax
  51              	.LVL4:
  52 003d 89FA     		movl	%edi, %edx
  53 003f 0FB69200 		movzbl	VM_memory(%rdx), %edx
  53      000000
  54              	.LVL5:
GAS LISTING /tmp/cc15eBE3.s 			page 12


  55 0046 0FB68000 		movzbl	VM_memory(%rax), %eax
  55      000000
  56              	.LVL6:
  57 004d C1E218   		sall	$24, %edx
  58              	.LVL7:
  59 0050 09D0     		orl	%edx, %eax
  60 0052 8D5701   		leal	1(%rdi), %edx
  61 0055 0FB69200 		movzbl	VM_memory(%rdx), %edx
  61      000000
  62 005c C1E210   		sall	$16, %edx
  63 005f 09D0     		orl	%edx, %eax
  64 0061 8D5702   		leal	2(%rdi), %edx
  65 0064 0FB69200 		movzbl	VM_memory(%rdx), %edx
  65      000000
  66 006b C1E208   		sall	$8, %edx
  67 006e 09D0     		orl	%edx, %eax
 568:src/vm.c      **** 	return ret_val;
 569:src/vm.c      **** }
  68              		.loc 1 569 0
  69 0070 C3       		ret
  70              		.cfi_endproc
  71              	.LFE19:
  73              		.section	.rodata.str1.1,"aMS",@progbits,1
  74              	.LC0:
  75 0000 25327825 		.string	"%2x%2x%2x%2x\n"
  75      32782532 
  75      78253278 
  75      0A00
  76              		.text
  77              		.globl	print_memory
  79              	print_memory:
  80              	.LFB20:
 570:src/vm.c      ****     
 571:src/vm.c      **** void print_memory(void)
 572:src/vm.c      **** {
  81              		.loc 1 572 0
  82              		.cfi_startproc
  83              	.LVL8:
  84 0071 53       		pushq	%rbx
  85              		.cfi_def_cfa_offset 16
  86              		.cfi_offset 3, -16
  87 0072 BB000000 		movl	$VM_memory+3, %ebx
  87      00
  88              	.LVL9:
  89              	.L6:
 573:src/vm.c      **** 	int i;
 574:src/vm.c      **** 	for (i = 0; i < VM_MEMORY_SZ; i = i+4)
 575:src/vm.c      **** 	{
 576:src/vm.c      **** 		printf ("%2x%2x%2x%2x\n", VM_memory[i], VM_memory[i + 1], VM_memory[i + 2], VM_memory[i + 3]);
  90              		.loc 1 576 0 discriminator 2
  91 0077 0FB64BFE 		movzbl	-2(%rbx), %ecx
  92 007b 0FB653FD 		movzbl	-3(%rbx), %edx
  93              	.LBB12:
  94              	.LBB13:
  95              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
GAS LISTING /tmp/cc15eBE3.s 			page 13


   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
GAS LISTING /tmp/cc15eBE3.s 			page 14


  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  96              		.loc 2 104 0 discriminator 2
  97 007f 31C0     		xorl	%eax, %eax
  98 0081 440FB60B 		movzbl	(%rbx), %r9d
  99 0085 440FB643 		movzbl	-1(%rbx), %r8d
  99      FF
 100 008a BE000000 		movl	$.LC0, %esi
 100      00
 101 008f BF010000 		movl	$1, %edi
 101      00
 102 0094 4883C304 		addq	$4, %rbx
 103              	.LVL10:
 104 0098 E8000000 		call	__printf_chk
GAS LISTING /tmp/cc15eBE3.s 			page 15


 104      00
 105              	.LVL11:
 106              	.LBE13:
 107              	.LBE12:
 574:src/vm.c      **** 	{
 108              		.loc 1 574 0 discriminator 2
 109 009d 4881FB00 		cmpq	$VM_memory+5123, %rbx
 109      000000
 110 00a4 75D1     		jne	.L6
 577:src/vm.c      **** 	}
 578:src/vm.c      **** }
 111              		.loc 1 578 0
 112 00a6 5B       		popq	%rbx
 113              		.cfi_def_cfa_offset 8
 114 00a7 C3       		ret
 115              		.cfi_endproc
 116              	.LFE20:
 118              		.section	.rodata.str1.1
 119              	.LC1:
 120 000e 25643A25 		.string	"%d:%x\n"
 120      780A00
 121              		.text
 122              		.globl	print_registers
 124              	print_registers:
 125              	.LFB21:
 579:src/vm.c      **** void print_registers(void)
 580:src/vm.c      **** {
 126              		.loc 1 580 0
 127              		.cfi_startproc
 128              	.LVL12:
 129 00a8 53       		pushq	%rbx
 130              		.cfi_def_cfa_offset 16
 131              		.cfi_offset 3, -16
 132              		.loc 1 580 0
 133 00a9 31DB     		xorl	%ebx, %ebx
 134              	.LVL13:
 135              	.L11:
 136              	.LBB14:
 137              	.LBB15:
 138              		.loc 2 104 0 discriminator 2
 139 00ab 8B0C9D00 		movl	RF(,%rbx,4), %ecx
 139      000000
 140 00b2 8D5301   		leal	1(%rbx), %edx
 141 00b5 31C0     		xorl	%eax, %eax
 142 00b7 BE000000 		movl	$.LC1, %esi
 142      00
 143 00bc BF010000 		movl	$1, %edi
 143      00
 144 00c1 48FFC3   		incq	%rbx
 145              	.LVL14:
 146 00c4 E8000000 		call	__printf_chk
 146      00
 147              	.LVL15:
 148              	.LBE15:
 149              	.LBE14:
 581:src/vm.c      **** 	int i;
 582:src/vm.c      **** 	for (i = 0; i < 32; i++)
GAS LISTING /tmp/cc15eBE3.s 			page 16


 150              		.loc 1 582 0 discriminator 2
 151 00c9 4883FB20 		cmpq	$32, %rbx
 152 00cd 75DC     		jne	.L11
 583:src/vm.c      **** 	{
 584:src/vm.c      **** 		printf ("%d:%x\n",i+1 ,RF[i]);
 585:src/vm.c      **** 	}
 586:src/vm.c      **** }
 153              		.loc 1 586 0
 154 00cf 5B       		popq	%rbx
 155              		.cfi_def_cfa_offset 8
 156 00d0 C3       		ret
 157              		.cfi_endproc
 158              	.LFE21:
 160              		.globl	vm_cpu
 162              	vm_cpu:
 163              	.LFB18:
 102:src/vm.c      **** #if COUNTING
 164              		.loc 1 102 0
 165              		.cfi_startproc
 166              	.LVL16:
 167 00d1 4157     		pushq	%r15
 168              		.cfi_def_cfa_offset 16
 169              		.cfi_offset 15, -16
 170 00d3 4156     		pushq	%r14
 171              		.cfi_def_cfa_offset 24
 172              		.cfi_offset 14, -24
 173              	.LBB16:
 174              	.LBB17:
 227:src/vm.c      **** 					    else
 175              		.loc 1 227 0
 176 00d5 4183CEFF 		orl	$-1, %r14d
 177              	.LBE17:
 178              	.LBE16:
 102:src/vm.c      **** #if COUNTING
 179              		.loc 1 102 0
 180 00d9 4155     		pushq	%r13
 181              		.cfi_def_cfa_offset 32
 182              		.cfi_offset 13, -32
 183 00db 4189F5   		movl	%esi, %r13d
 184 00de 4154     		pushq	%r12
 185              		.cfi_def_cfa_offset 40
 186              		.cfi_offset 12, -40
 113:src/vm.c      **** 	uint32_t offset = 4;
 187              		.loc 1 113 0
 188 00e0 4531E4   		xorl	%r12d, %r12d
 102:src/vm.c      **** #if COUNTING
 189              		.loc 1 102 0
 190 00e3 55       		pushq	%rbp
 191              		.cfi_def_cfa_offset 48
 192              		.cfi_offset 6, -48
 113:src/vm.c      **** 	uint32_t offset = 4;
 193              		.loc 1 113 0
 194 00e4 31ED     		xorl	%ebp, %ebp
 102:src/vm.c      **** #if COUNTING
 195              		.loc 1 102 0
 196 00e6 53       		pushq	%rbx
 197              		.cfi_def_cfa_offset 56
GAS LISTING /tmp/cc15eBE3.s 			page 17


 198              		.cfi_offset 3, -56
 199 00e7 51       		pushq	%rcx
 200              		.cfi_def_cfa_offset 64
 109:src/vm.c      **** 	nPC = 4;
 201              		.loc 1 109 0
 202 00e8 893D0000 		movl	%edi, PC(%rip)
 202      0000
 110:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
 203              		.loc 1 110 0
 204 00ee C7050000 		movl	$4, nPC(%rip)
 204      00000400 
 204      0000
 111:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 205              		.loc 1 111 0
 206 00f8 C7050000 		movl	$0, RF(%rip)
 206      00000000 
 206      0000
 112:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
 207              		.loc 1 112 0
 208 0102 C7050000 		movl	$1, RF+124(%rip)
 208      00000100 
 208      0000
 209              	.LVL17:
 210              	.L14:
 211              	.LBB21:
 127:src/vm.c      **** 		uint8_t op = (instr >> 26) & 0x3F;
 212              		.loc 1 127 0
 213 010c 448B3D00 		movl	PC(%rip), %r15d
 213      000000
 214 0113 4489FF   		movl	%r15d, %edi
 215 0116 E8000000 		call	fetch
 215      00
 216              	.LVL18:
 152:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 217              		.loc 1 152 0
 218 011b 4189C0   		movl	%eax, %r8d
 153:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 219              		.loc 1 153 0
 220 011e 89C2     		movl	%eax, %edx
 154:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 221              		.loc 1 154 0
 222 0120 89C6     		movl	%eax, %esi
 128:src/vm.c      **** #if DEBUGING
 223              		.loc 1 128 0
 224 0122 89C7     		movl	%eax, %edi
 152:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 225              		.loc 1 152 0
 226 0124 41C1E815 		shrl	$21, %r8d
 153:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 227              		.loc 1 153 0
 228 0128 C1EA10   		shrl	$16, %edx
 154:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 229              		.loc 1 154 0
 230 012b C1EE0B   		shrl	$11, %esi
 156:src/vm.c      **** 		
 231              		.loc 1 156 0
 232 012e 89C1     		movl	%eax, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 18


 128:src/vm.c      **** #if DEBUGING
 233              		.loc 1 128 0
 234 0130 C1EF1A   		shrl	$26, %edi
 152:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 235              		.loc 1 152 0
 236 0133 4183E01F 		andl	$31, %r8d
 237              	.LVL19:
 153:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 238              		.loc 1 153 0
 239 0137 83E21F   		andl	$31, %edx
 240              	.LVL20:
 154:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 241              		.loc 1 154 0
 242 013a 83E61F   		andl	$31, %esi
 243              	.LVL21:
 156:src/vm.c      **** 		
 244              		.loc 1 156 0
 245 013d 81E1FFFF 		andl	$67108863, %ecx
 245      FF03
 246              	.LVL22:
 160:src/vm.c      **** 		{
 247              		.loc 1 160 0
 248 0143 83FF2E   		cmpl	$46, %edi
 249 0146 0F873806 		ja	.L85
 249      0000
 250 014c FF24FD00 		jmp	*.L17(,%rdi,8)
 250      000000
 251              		.section	.rodata
 252              		.align 8
 253              		.align 4
 254              	.L17:
 255 0000 00000000 		.quad	.L16
 255      00000000 
 256 0008 00000000 		.quad	.L18
 256      00000000 
 257 0010 00000000 		.quad	.L104
 257      00000000 
 258 0018 00000000 		.quad	.L20
 258      00000000 
 259 0020 00000000 		.quad	.L21
 259      00000000 
 260 0028 00000000 		.quad	.L22
 260      00000000 
 261 0030 00000000 		.quad	.L23
 261      00000000 
 262 0038 00000000 		.quad	.L24
 262      00000000 
 263 0040 00000000 		.quad	.L26
 263      00000000 
 264 0048 00000000 		.quad	.L26
 264      00000000 
 265 0050 00000000 		.quad	.L28
 265      00000000 
 266 0058 00000000 		.quad	.L28
 266      00000000 
 267 0060 00000000 		.quad	.L29
 267      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 19


 268 0068 00000000 		.quad	.L30
 268      00000000 
 269 0070 00000000 		.quad	.L31
 269      00000000 
 270 0078 00000000 		.quad	.L32
 270      00000000 
 271 0080 00000000 		.quad	.L85
 271      00000000 
 272 0088 00000000 		.quad	.L85
 272      00000000 
 273 0090 00000000 		.quad	.L85
 273      00000000 
 274 0098 00000000 		.quad	.L85
 274      00000000 
 275 00a0 00000000 		.quad	.L85
 275      00000000 
 276 00a8 00000000 		.quad	.L85
 276      00000000 
 277 00b0 00000000 		.quad	.L85
 277      00000000 
 278 00b8 00000000 		.quad	.L85
 278      00000000 
 279 00c0 00000000 		.quad	.L33
 279      00000000 
 280 00c8 00000000 		.quad	.L32
 280      00000000 
 281 00d0 00000000 		.quad	.L34
 281      00000000 
 282 00d8 00000000 		.quad	.L85
 282      00000000 
 283 00e0 00000000 		.quad	.L85
 283      00000000 
 284 00e8 00000000 		.quad	.L85
 284      00000000 
 285 00f0 00000000 		.quad	.L85
 285      00000000 
 286 00f8 00000000 		.quad	.L85
 286      00000000 
 287 0100 00000000 		.quad	.L35
 287      00000000 
 288 0108 00000000 		.quad	.L40
 288      00000000 
 289 0110 00000000 		.quad	.L37
 289      00000000 
 290 0118 00000000 		.quad	.L38
 290      00000000 
 291 0120 00000000 		.quad	.L39
 291      00000000 
 292 0128 00000000 		.quad	.L40
 292      00000000 
 293 0130 00000000 		.quad	.L41
 293      00000000 
 294 0138 00000000 		.quad	.L85
 294      00000000 
 295 0140 00000000 		.quad	.L42
 295      00000000 
 296 0148 00000000 		.quad	.L43
GAS LISTING /tmp/cc15eBE3.s 			page 20


 296      00000000 
 297 0150 00000000 		.quad	.L44
 297      00000000 
 298 0158 00000000 		.quad	.L45
 298      00000000 
 299 0160 00000000 		.quad	.L85
 299      00000000 
 300 0168 00000000 		.quad	.L85
 300      00000000 
 301 0170 00000000 		.quad	.L46
 301      00000000 
 302              		.text
 303              	.L16:
 304              	.LBB19:
 163:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 305              		.loc 1 163 0
 306 0153 89C1     		movl	%eax, %ecx
 307              	.LVL23:
 164:src/vm.c      **** 			  
 308              		.loc 1 164 0
 309 0155 83E03F   		andl	$63, %eax
 310              	.LVL24:
 163:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 311              		.loc 1 163 0
 312 0158 C1E906   		shrl	$6, %ecx
 313              	.LVL25:
 314 015b 83E11F   		andl	$31, %ecx
 315              	.LVL26:
 166:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 316              		.loc 1 166 0
 317 015e 3C2B     		cmpb	$43, %al
 318 0160 0F871E06 		ja	.L85
 318      0000
 319 0166 0FB6C0   		movzbl	%al, %eax
 320 0169 FF24C500 		jmp	*.L48(,%rax,8)
 320      000000
 321              		.section	.rodata
 322              		.align 8
 323              		.align 4
 324              	.L48:
 325 0178 00000000 		.quad	.L47
 325      00000000 
 326 0180 00000000 		.quad	.L85
 326      00000000 
 327 0188 00000000 		.quad	.L49
 327      00000000 
 328 0190 00000000 		.quad	.L50
 328      00000000 
 329 0198 00000000 		.quad	.L51
 329      00000000 
 330 01a0 00000000 		.quad	.L85
 330      00000000 
 331 01a8 00000000 		.quad	.L52
 331      00000000 
 332 01b0 00000000 		.quad	.L52
 332      00000000 
 333 01b8 00000000 		.quad	.L54
GAS LISTING /tmp/cc15eBE3.s 			page 21


 333      00000000 
 334 01c0 00000000 		.quad	.L55
 334      00000000 
 335 01c8 00000000 		.quad	.L56
 335      00000000 
 336 01d0 00000000 		.quad	.L57
 336      00000000 
 337 01d8 00000000 		.quad	.L58
 337      00000000 
 338 01e0 00000000 		.quad	.L85
 338      00000000 
 339 01e8 00000000 		.quad	.L85
 339      00000000 
 340 01f0 00000000 		.quad	.L85
 340      00000000 
 341 01f8 00000000 		.quad	.L59
 341      00000000 
 342 0200 00000000 		.quad	.L60
 342      00000000 
 343 0208 00000000 		.quad	.L61
 343      00000000 
 344 0210 00000000 		.quad	.L62
 344      00000000 
 345 0218 00000000 		.quad	.L85
 345      00000000 
 346 0220 00000000 		.quad	.L85
 346      00000000 
 347 0228 00000000 		.quad	.L85
 347      00000000 
 348 0230 00000000 		.quad	.L85
 348      00000000 
 349 0238 00000000 		.quad	.L64
 349      00000000 
 350 0240 00000000 		.quad	.L64
 350      00000000 
 351 0248 00000000 		.quad	.L66
 351      00000000 
 352 0250 00000000 		.quad	.L66
 352      00000000 
 353 0258 00000000 		.quad	.L85
 353      00000000 
 354 0260 00000000 		.quad	.L85
 354      00000000 
 355 0268 00000000 		.quad	.L85
 355      00000000 
 356 0270 00000000 		.quad	.L85
 356      00000000 
 357 0278 00000000 		.quad	.L68
 357      00000000 
 358 0280 00000000 		.quad	.L68
 358      00000000 
 359 0288 00000000 		.quad	.L70
 359      00000000 
 360 0290 00000000 		.quad	.L70
 360      00000000 
 361 0298 00000000 		.quad	.L71
 361      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 22


 362 02a0 00000000 		.quad	.L72
 362      00000000 
 363 02a8 00000000 		.quad	.L73
 363      00000000 
 364 02b0 00000000 		.quad	.L74
 364      00000000 
 365 02b8 00000000 		.quad	.L85
 365      00000000 
 366 02c0 00000000 		.quad	.L85
 366      00000000 
 367 02c8 00000000 		.quad	.L76
 367      00000000 
 368 02d0 00000000 		.quad	.L76
 368      00000000 
 369              		.text
 370              	.L57:
 168:src/vm.c      **** 						break;
 371              		.loc 1 168 0
 372 0170 83E21F   		andl	$31, %edx
 373              	.LVL27:
 374 0173 31DB     		xorl	%ebx, %ebx
 375 0175 833C9500 		cmpl	$0, RF(,%rdx,4)
 375      00000000 
 376 017d 0F840306 		je	.L15
 376      0000
 377 0183 EB13     		jmp	.L107
 378              	.LVL28:
 379              	.L56:
 172:src/vm.c      **** 						break;
 380              		.loc 1 172 0
 381 0185 83E21F   		andl	$31, %edx
 382              	.LVL29:
 383 0188 31DB     		xorl	%ebx, %ebx
 384 018a 833C9500 		cmpl	$0, RF(,%rdx,4)
 384      00000000 
 385 0192 0F85EE05 		jne	.L15
 385      0000
 386              	.L107:
 172:src/vm.c      **** 						break;
 387              		.loc 1 172 0 is_stmt 0 discriminator 1
 388 0198 4183E01F 		andl	$31, %r8d
 389              	.LVL30:
 390 019c 83E61F   		andl	$31, %esi
 391              	.LVL31:
 392 019f 428B0485 		movl	RF(,%r8,4), %eax
 392      00000000 
 393 01a7 8904B500 		movl	%eax, RF(,%rsi,4)
 393      000000
 394 01ae E9D30500 		jmp	.L15
 394      00
 395              	.LVL32:
 396              	.L68:
 180:src/vm.c      **** 						break;
 397              		.loc 1 180 0 is_stmt 1
 398 01b3 83E21F   		andl	$31, %edx
 399              	.LVL33:
 400 01b6 4183E01F 		andl	$31, %r8d
GAS LISTING /tmp/cc15eBE3.s 			page 23


 401              	.LVL34:
 402 01ba 83E61F   		andl	$31, %esi
 403              	.LVL35:
 404 01bd 8B049500 		movl	RF(,%rdx,4), %eax
 404      000000
 405 01c4 42030485 		addl	RF(,%r8,4), %eax
 405      00000000 
 406 01cc EB19     		jmp	.L108
 407              	.LVL36:
 408              	.L71:
 184:src/vm.c      **** 						break;
 409              		.loc 1 184 0
 410 01ce 83E21F   		andl	$31, %edx
 411              	.LVL37:
 412 01d1 4183E01F 		andl	$31, %r8d
 413              	.LVL38:
 414 01d5 83E61F   		andl	$31, %esi
 415              	.LVL39:
 416 01d8 8B049500 		movl	RF(,%rdx,4), %eax
 416      000000
 417 01df 42230485 		andl	RF(,%r8,4), %eax
 417      00000000 
 418              	.LVL40:
 419              	.L108:
 420 01e7 8904B500 		movl	%eax, RF(,%rsi,4)
 420      000000
 421 01ee E9910500 		jmp	.L85
 421      00
 422              	.LVL41:
 423              	.L66:
 193:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 424              		.loc 1 193 0
 425 01f3 4183E01F 		andl	$31, %r8d
 426              	.LVL42:
 427 01f7 4889D7   		movq	%rdx, %rdi
 194:src/vm.c      **** 						break;
 428              		.loc 1 194 0
 429 01fa 31D2     		xorl	%edx, %edx
 430              	.LVL43:
 193:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 431              		.loc 1 193 0
 432 01fc 428B0485 		movl	RF(,%r8,4), %eax
 432      00000000 
 433 0204 83E71F   		andl	$31, %edi
 434              	.LVL44:
 194:src/vm.c      **** 						break;
 435              		.loc 1 194 0
 436 0207 F734BD00 		divl	RF(,%rdi,4)
 436      000000
 437              	.LVL45:
 438 020e 89D5     		movl	%edx, %ebp
 439              	.LVL46:
 440 0210 4189C4   		movl	%eax, %r12d
 441 0213 E96C0500 		jmp	.L85
 441      00
 442              	.LVL47:
 443              	.L64:
GAS LISTING /tmp/cc15eBE3.s 			page 24


 444              	.LBB18:
 204:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 445              		.loc 1 204 0
 446 0218 83E21F   		andl	$31, %edx
 447              	.LVL48:
 448 021b 4183E01F 		andl	$31, %r8d
 449              	.LVL49:
 450 021f 428B0485 		movl	RF(,%r8,4), %eax
 450      00000000 
 451 0227 448B2495 		movl	RF(,%rdx,4), %r12d
 451      00000000 
 452              	.LVL50:
 453 022f 4C0FAFE0 		imulq	%rax, %r12
 454              	.LVL51:
 205:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;  
 455              		.loc 1 205 0
 456 0233 4C89E0   		movq	%r12, %rax
 457 0236 48C1E820 		shrq	$32, %rax
 458 023a 4889C5   		movq	%rax, %rbp
 459              	.LVL52:
 460 023d E9420500 		jmp	.L85
 460      00
 461              	.LVL53:
 462              	.L74:
 463              	.LBE18:
 210:src/vm.c      **** 						break;
 464              		.loc 1 210 0
 465 0242 83E21F   		andl	$31, %edx
 466              	.LVL54:
 467 0245 4183E01F 		andl	$31, %r8d
 468              	.LVL55:
 469 0249 83E61F   		andl	$31, %esi
 470              	.LVL56:
 471 024c 8B049500 		movl	RF(,%rdx,4), %eax
 471      000000
 472 0253 420B0485 		orl	RF(,%r8,4), %eax
 472      00000000 
 473 025b F7D0     		notl	%eax
 474 025d EB88     		jmp	.L108
 475              	.LVL57:
 476              	.L72:
 214:src/vm.c      **** 						break;
 477              		.loc 1 214 0
 478 025f 83E21F   		andl	$31, %edx
 479              	.LVL58:
 480 0262 4183E01F 		andl	$31, %r8d
 481              	.LVL59:
 482 0266 83E61F   		andl	$31, %esi
 483              	.LVL60:
 484 0269 8B049500 		movl	RF(,%rdx,4), %eax
 484      000000
 485 0270 420B0485 		orl	RF(,%r8,4), %eax
 485      00000000 
 486 0278 E96AFFFF 		jmp	.L108
 486      FF
 487              	.LVL61:
 488              	.L47:
GAS LISTING /tmp/cc15eBE3.s 			page 25


 218:src/vm.c      **** 						break;
 489              		.loc 1 218 0
 490 027d 83E61F   		andl	$31, %esi
 491              	.LVL62:
 492 0280 83E21F   		andl	$31, %edx
 493              	.LVL63:
 494 0283 EB12     		jmp	.L113
 495              	.LVL64:
 496              	.L51:
 222:src/vm.c      **** 						break;
 497              		.loc 1 222 0
 498 0285 4183E01F 		andl	$31, %r8d
 499              	.LVL65:
 500 0289 83E61F   		andl	$31, %esi
 501              	.LVL66:
 502 028c 83E21F   		andl	$31, %edx
 503              	.LVL67:
 504 028f 428B0C85 		movl	RF(,%r8,4), %ecx
 504      00000000 
 505              	.LVL68:
 506              	.L113:
 507 0297 8B049500 		movl	RF(,%rdx,4), %eax
 507      000000
 508 029e D3E0     		sall	%cl, %eax
 509 02a0 E942FFFF 		jmp	.L108
 509      FF
 510              	.LVL69:
 511              	.L50:
 226:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 512              		.loc 1 226 0
 513 02a5 83E21F   		andl	$31, %edx
 514              	.LVL70:
 515 02a8 400FB6F6 		movzbl	%sil, %esi
 516 02ac 8B149500 		movl	RF(,%rdx,4), %edx
 516      000000
 517 02b3 85D2     		testl	%edx, %edx
 518 02b5 7912     		jns	.L77
 226:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 519              		.loc 1 226 0 is_stmt 0 discriminator 1
 520 02b7 84C9     		testb	%cl, %cl
 521 02b9 740E     		je	.L77
 227:src/vm.c      **** 					    else
 522              		.loc 1 227 0 is_stmt 1
 523 02bb 4489F0   		movl	%r14d, %eax
 524 02be D3E8     		shrl	%cl, %eax
 525 02c0 F7D0     		notl	%eax
 526 02c2 09D0     		orl	%edx, %eax
 527 02c4 E91EFFFF 		jmp	.L108
 527      FF
 528              	.L77:
 229:src/vm.c      **** 						break;
 529              		.loc 1 229 0
 530 02c9 D3FA     		sarl	%cl, %edx
 531 02cb 8914B500 		movl	%edx, RF(,%rsi,4)
 531      000000
 532 02d2 E9AD0400 		jmp	.L85
 532      00
GAS LISTING /tmp/cc15eBE3.s 			page 26


 533              	.LVL71:
 534              	.L49:
 237:src/vm.c      **** 						break;
 535              		.loc 1 237 0
 536 02d7 83E61F   		andl	$31, %esi
 537              	.LVL72:
 538 02da 83E21F   		andl	$31, %edx
 539              	.LVL73:
 540              	.L115:
 541 02dd 8B049500 		movl	RF(,%rdx,4), %eax
 541      000000
 542 02e4 D3E8     		shrl	%cl, %eax
 543 02e6 E9FCFEFF 		jmp	.L108
 543      FF
 544              	.LVL74:
 545              	.L52:
 241:src/vm.c      **** 						break;
 546              		.loc 1 241 0
 547 02eb 4183E01F 		andl	$31, %r8d
 548              	.LVL75:
 549 02ef 83E61F   		andl	$31, %esi
 550              	.LVL76:
 551 02f2 83E21F   		andl	$31, %edx
 552              	.LVL77:
 553 02f5 428B0C85 		movl	RF(,%r8,4), %ecx
 553      00000000 
 554              	.LVL78:
 555 02fd EBDE     		jmp	.L115
 556              	.LVL79:
 557              	.L70:
 249:src/vm.c      **** 						break;
 558              		.loc 1 249 0
 559 02ff 4183E01F 		andl	$31, %r8d
 560              	.LVL80:
 561 0303 83E21F   		andl	$31, %edx
 562              	.LVL81:
 563 0306 83E61F   		andl	$31, %esi
 564              	.LVL82:
 565 0309 428B0485 		movl	RF(,%r8,4), %eax
 565      00000000 
 566 0311 2B049500 		subl	RF(,%rdx,4), %eax
 566      000000
 567 0318 E9CAFEFF 		jmp	.L108
 567      FF
 568              	.LVL83:
 569              	.L73:
 253:src/vm.c      **** 						break;
 570              		.loc 1 253 0
 571 031d 83E21F   		andl	$31, %edx
 572              	.LVL84:
 573 0320 83E61F   		andl	$31, %esi
 574              	.LVL85:
 575 0323 4183E01F 		andl	$31, %r8d
 576              	.LVL86:
 577 0327 8B049500 		movl	RF(,%rdx,4), %eax
 577      000000
 578 032e E9F00000 		jmp	.L114
GAS LISTING /tmp/cc15eBE3.s 			page 27


 578      00
 579              	.LVL87:
 580              	.L76:
 261:src/vm.c      **** 						break;
 581              		.loc 1 261 0
 582 0333 83E21F   		andl	$31, %edx
 583              	.LVL88:
 584 0336 4183E01F 		andl	$31, %r8d
 585              	.LVL89:
 586 033a 83E61F   		andl	$31, %esi
 587              	.LVL90:
 588 033d 8B049500 		movl	RF(,%rdx,4), %eax
 588      000000
 589 0344 42390485 		cmpl	%eax, RF(,%r8,4)
 589      00000000 
 590 034c 0F92C0   		setb	%al
 591 034f 0FB6C0   		movzbl	%al, %eax
 592 0352 E990FEFF 		jmp	.L108
 592      FF
 593              	.LVL91:
 594              	.L55:
 265:src/vm.c      **** 						PC = nPC;
 595              		.loc 1 265 0
 596 0357 4183C708 		addl	$8, %r15d
 597 035b 44893D00 		movl	%r15d, RF+124(%rip)
 597      000000
 598              	.L54:
 271:src/vm.c      **** 						nPC = RF[rs];
 599              		.loc 1 271 0
 600 0362 8B050000 		movl	nPC(%rip), %eax
 600      0000
 272:src/vm.c      **** 						continue;
 601              		.loc 1 272 0
 602 0368 4183E01F 		andl	$31, %r8d
 603              	.LVL92:
 271:src/vm.c      **** 						nPC = RF[rs];
 604              		.loc 1 271 0
 605 036c 89050000 		movl	%eax, PC(%rip)
 605      0000
 272:src/vm.c      **** 						continue;
 606              		.loc 1 272 0
 607 0372 428B0485 		movl	RF(,%r8,4), %eax
 607      00000000 
 608 037a 89050000 		movl	%eax, nPC(%rip)
 608      0000
 273:src/vm.c      **** 					}
 609              		.loc 1 273 0
 610 0380 E987FDFF 		jmp	.L14
 610      FF
 611              	.LVL93:
 612              	.L59:
 276:src/vm.c      **** 						break;
 613              		.loc 1 276 0
 614 0385 83E61F   		andl	$31, %esi
 615              	.LVL94:
 616 0388 892CB500 		movl	%ebp, RF(,%rsi,4)
 616      000000
GAS LISTING /tmp/cc15eBE3.s 			page 28


 617 038f E9F00300 		jmp	.L85
 617      00
 618              	.LVL95:
 619              	.L61:
 280:src/vm.c      **** 						break;
 620              		.loc 1 280 0
 621 0394 83E61F   		andl	$31, %esi
 622              	.LVL96:
 623 0397 448924B5 		movl	%r12d, RF(,%rsi,4)
 623      00000000 
 624 039f E9E00300 		jmp	.L85
 624      00
 625              	.LVL97:
 626              	.L60:
 284:src/vm.c      **** 						break;
 627              		.loc 1 284 0
 628 03a4 4183E01F 		andl	$31, %r8d
 629              	.LVL98:
 630 03a8 428B2C85 		movl	RF(,%r8,4), %ebp
 630      00000000 
 631              	.LVL99:
 632 03b0 E9CF0300 		jmp	.L85
 632      00
 633              	.LVL100:
 634              	.L62:
 288:src/vm.c      **** 						break;
 635              		.loc 1 288 0
 636 03b5 4183E01F 		andl	$31, %r8d
 637              	.LVL101:
 638 03b9 468B2485 		movl	RF(,%r8,4), %r12d
 638      00000000 
 639              	.LVL102:
 640 03c1 E9BE0300 		jmp	.L85
 640      00
 641              	.LVL103:
 642              	.L58:
 643 03c6 0FB63D00 		movzbl	RF+8(%rip), %edi
 643      000000
 292:src/vm.c      **** 						{
 644              		.loc 1 292 0
 645 03cd E8000000 		call	syscall
 645      00
 646              	.LVL104:
 647 03d2 84C0     		testb	%al, %al
 648 03d4 0F95C3   		setne	%bl
 649 03d7 E9AA0300 		jmp	.L15
 649      00
 650              	.LVL105:
 651              	.L26:
 652              	.LBE19:
 318:src/vm.c      **** 				break;
 653              		.loc 1 318 0
 654 03dc 4183E01F 		andl	$31, %r8d
 655              	.LVL106:
 656 03e0 98       		cwtl
 657              	.LVL107:
 658 03e1 83E21F   		andl	$31, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 29


 659              	.LVL108:
 660 03e4 42030485 		addl	RF(,%r8,4), %eax
 660      00000000 
 661              	.LVL109:
 662 03ec E9CB0100 		jmp	.L109
 662      00
 663              	.LVL110:
 664              	.L29:
 322:src/vm.c      **** 				break;
 665              		.loc 1 322 0
 666 03f1 4183E01F 		andl	$31, %r8d
 667              	.LVL111:
 668 03f5 98       		cwtl
 669              	.LVL112:
 670 03f6 83E21F   		andl	$31, %edx
 671              	.LVL113:
 672 03f9 42230485 		andl	RF(,%r8,4), %eax
 672      00000000 
 673              	.LVL114:
 674 0401 E9B60100 		jmp	.L109
 674      00
 675              	.LVL115:
 676              	.L30:
 326:src/vm.c      **** 				break;
 677              		.loc 1 326 0
 678 0406 4183E01F 		andl	$31, %r8d
 679              	.LVL116:
 680 040a 98       		cwtl
 681              	.LVL117:
 682 040b 83E21F   		andl	$31, %edx
 683              	.LVL118:
 684 040e 420B0485 		orl	RF(,%r8,4), %eax
 684      00000000 
 685              	.LVL119:
 686 0416 E9A10100 		jmp	.L109
 686      00
 687              	.LVL120:
 688              	.L31:
 330:src/vm.c      **** 				break;
 689              		.loc 1 330 0
 690 041b 83E61F   		andl	$31, %esi
 691              	.LVL121:
 692 041e 4183E01F 		andl	$31, %r8d
 693              	.LVL122:
 694 0422 98       		cwtl
 695              	.LVL123:
 696              	.L114:
 697 0423 42330485 		xorl	RF(,%r8,4), %eax
 697      00000000 
 698 042b E9B7FDFF 		jmp	.L108
 698      FF
 699              	.LVL124:
 700              	.L32:
 335:src/vm.c      **** 				break;
 701              		.loc 1 335 0
 702 0430 83E21F   		andl	$31, %edx
 703              	.LVL125:
GAS LISTING /tmp/cc15eBE3.s 			page 30


 704 0433 C1E010   		sall	$16, %eax
 705              	.LVL126:
 706 0436 E9810100 		jmp	.L109
 706      00
 707              	.LVL127:
 708              	.L33:
 339:src/vm.c      **** 				break;
 709              		.loc 1 339 0
 710 043b 83E21F   		andl	$31, %edx
 711              	.LVL128:
 712 043e 98       		cwtl
 713              	.LVL129:
 714 043f E9780100 		jmp	.L109
 714      00
 715              	.LVL130:
 716              	.L28:
 347:src/vm.c      **** 				break;
 717              		.loc 1 347 0
 718 0444 4183E01F 		andl	$31, %r8d
 719              	.LVL131:
 720 0448 98       		cwtl
 721              	.LVL132:
 722 0449 83E21F   		andl	$31, %edx
 723              	.LVL133:
 724 044c 42390485 		cmpl	%eax, RF(,%r8,4)
 724      00000000 
 725 0454 0F92C0   		setb	%al
 726              	.LVL134:
 727 0457 0FB6C0   		movzbl	%al, %eax
 728 045a E95D0100 		jmp	.L109
 728      00
 729              	.LVL135:
 730              	.L18:
 351:src/vm.c      **** 				{
 731              		.loc 1 351 0
 732 045f 83E21F   		andl	$31, %edx
 733              	.LVL136:
 734 0462 8B149500 		movl	RF(,%rdx,4), %edx
 734      000000
 735 0469 83FA01   		cmpl	$1, %edx
 736 046c 751A     		jne	.L79
 353:src/vm.c      **** 					{
 737              		.loc 1 353 0
 738 046e 4183E01F 		andl	$31, %r8d
 739              	.LVL137:
 740 0472 31DB     		xorl	%ebx, %ebx
 741 0474 42833C85 		cmpl	$0, RF(,%r8,4)
 741      00000000 
 741      00
 742 047d 0F89D400 		jns	.L105
 742      0000
 743 0483 E9FE0200 		jmp	.L15
 743      00
 744              	.LVL138:
 745              	.L79:
 363:src/vm.c      **** 				{
 746              		.loc 1 363 0
GAS LISTING /tmp/cc15eBE3.s 			page 31


 747 0488 83FA11   		cmpl	$17, %edx
 748 048b 7516     		jne	.L80
 365:src/vm.c      **** 					{
 749              		.loc 1 365 0
 750 048d 4183E01F 		andl	$31, %r8d
 751              	.LVL139:
 752 0491 31DB     		xorl	%ebx, %ebx
 753 0493 42833C85 		cmpl	$0, RF(,%r8,4)
 753      00000000 
 753      00
 754 049c 7941     		jns	.L106
 755 049e E9E30200 		jmp	.L15
 755      00
 756              	.LVL140:
 757              	.L80:
 376:src/vm.c      **** 				{
 758              		.loc 1 376 0
 759 04a3 85D2     		testl	%edx, %edx
 760 04a5 751A     		jne	.L81
 378:src/vm.c      **** 					{
 761              		.loc 1 378 0
 762 04a7 4183E01F 		andl	$31, %r8d
 763              	.LVL141:
 764 04ab 31DB     		xorl	%ebx, %ebx
 765 04ad 42833C85 		cmpl	$0, RF(,%r8,4)
 765      00000000 
 765      00
 766 04b6 0F89CA02 		jns	.L15
 766      0000
 767 04bc E9960000 		jmp	.L105
 767      00
 768              	.LVL142:
 769              	.L81:
 770 04c1 31DB     		xorl	%ebx, %ebx
 388:src/vm.c      **** 				{
 771              		.loc 1 388 0
 772 04c3 83FA10   		cmpl	$16, %edx
 773 04c6 0F85BA02 		jne	.L15
 773      0000
 390:src/vm.c      **** 					{
 774              		.loc 1 390 0
 775 04cc 4183E01F 		andl	$31, %r8d
 776              	.LVL143:
 777 04d0 42833C85 		cmpl	$0, RF(,%r8,4)
 777      00000000 
 777      00
 778 04d9 0F89A702 		jns	.L15
 778      0000
 779              	.L106:
 392:src/vm.c      **** 						advance_pc(immediate << 2);
 780              		.loc 1 392 0
 781 04df 4183C708 		addl	$8, %r15d
 782 04e3 44893D00 		movl	%r15d, RF+124(%rip)
 782      000000
 783 04ea EB6B     		jmp	.L105
 784              	.LVL144:
 785              	.L21:
GAS LISTING /tmp/cc15eBE3.s 			page 32


 404:src/vm.c      **** 				{
 786              		.loc 1 404 0
 787 04ec 83E21F   		andl	$31, %edx
 788              	.LVL145:
 789 04ef 4183E01F 		andl	$31, %r8d
 790              	.LVL146:
 791 04f3 31DB     		xorl	%ebx, %ebx
 792 04f5 8B3C9500 		movl	RF(,%rdx,4), %edi
 792      000000
 793 04fc 42393C85 		cmpl	%edi, RF(,%r8,4)
 793      00000000 
 794 0504 0F857C02 		jne	.L15
 794      0000
 795 050a EB4B     		jmp	.L105
 796              	.LVL147:
 797              	.L24:
 416:src/vm.c      **** 				{
 798              		.loc 1 416 0
 799 050c 4183E01F 		andl	$31, %r8d
 800              	.LVL148:
 801 0510 31DB     		xorl	%ebx, %ebx
 802 0512 42833C85 		cmpl	$0, RF(,%r8,4)
 802      00000000 
 802      00
 803 051b 7F3A     		jg	.L105
 804 051d E9640200 		jmp	.L15
 804      00
 805              	.LVL149:
 806              	.L23:
 428:src/vm.c      **** 				{
 807              		.loc 1 428 0
 808 0522 4183E01F 		andl	$31, %r8d
 809              	.LVL150:
 810 0526 31DB     		xorl	%ebx, %ebx
 811 0528 42833C85 		cmpl	$0, RF(,%r8,4)
 811      00000000 
 811      00
 812 0531 0F8F4F02 		jg	.L15
 812      0000
 813 0537 EB1E     		jmp	.L105
 814              	.LVL151:
 815              	.L22:
 443:src/vm.c      **** 				{
 816              		.loc 1 443 0
 817 0539 83E21F   		andl	$31, %edx
 818              	.LVL152:
 819 053c 4183E01F 		andl	$31, %r8d
 820              	.LVL153:
 821 0540 31DB     		xorl	%ebx, %ebx
 822 0542 8B3C9500 		movl	RF(,%rdx,4), %edi
 822      000000
 823 0549 42393C85 		cmpl	%edi, RF(,%r8,4)
 823      00000000 
 824 0551 0F842F02 		je	.L15
 824      0000
 825              	.L105:
 445:src/vm.c      **** 					continue;
GAS LISTING /tmp/cc15eBE3.s 			page 33


 826              		.loc 1 445 0
 827 0557 98       		cwtl
 828              	.LVL154:
 829 0558 8D3C8500 		leal	0(,%rax,4), %edi
 829      000000
 830 055f E8000000 		call	advance_pc
 830      00
 831              	.LVL155:
 446:src/vm.c      **** 				}
 832              		.loc 1 446 0
 833 0564 E9A3FBFF 		jmp	.L14
 833      FF
 834              	.LVL156:
 835              	.L35:
 455:src/vm.c      **** 				break;
 836              		.loc 1 455 0
 837 0569 4183E01F 		andl	$31, %r8d
 838              	.LVL157:
 839 056d 98       		cwtl
 840              	.LVL158:
 841 056e 83E21F   		andl	$31, %edx
 842              	.LVL159:
 843 0571 42030485 		addl	RF(,%r8,4), %eax
 843      00000000 
 844              	.LVL160:
 845 0579 8A880000 		movb	VM_memory(%rax), %cl
 845      0000
 846              	.LVL161:
 847 057f 88C8     		movb	%cl, %al
 848 0581 83E17F   		andl	$127, %ecx
 849 0584 83E080   		andl	$-128, %eax
 850 0587 0FB6C0   		movzbl	%al, %eax
 851 058a C1E018   		sall	$24, %eax
 852 058d 09C8     		orl	%ecx, %eax
 853 058f EB2B     		jmp	.L109
 854              	.LVL162:
 855              	.L39:
 459:src/vm.c      **** 				break;
 856              		.loc 1 459 0
 857 0591 4183E01F 		andl	$31, %r8d
 858              	.LVL163:
 859 0595 98       		cwtl
 860              	.LVL164:
 861 0596 83E21F   		andl	$31, %edx
 862              	.LVL165:
 863 0599 42030485 		addl	RF(,%r8,4), %eax
 863      00000000 
 864              	.LVL166:
 865 05a1 EB12     		jmp	.L110
 866              	.LVL167:
 867              	.L40:
 467:src/vm.c      **** 				break;
 868              		.loc 1 467 0
 869 05a3 4183E01F 		andl	$31, %r8d
 870              	.LVL168:
 871 05a7 98       		cwtl
 872              	.LVL169:
GAS LISTING /tmp/cc15eBE3.s 			page 34


 873 05a8 83E21F   		andl	$31, %edx
 874              	.LVL170:
 875 05ab 42030485 		addl	RF(,%r8,4), %eax
 875      00000000 
 876              	.LVL171:
 877 05b3 FFC0     		incl	%eax
 878              	.L110:
 879 05b5 0FB68000 		movzbl	VM_memory(%rax), %eax
 879      000000
 880              	.LVL172:
 881              	.L109:
 882 05bc 89049500 		movl	%eax, RF(,%rdx,4)
 882      000000
 883 05c3 E9BC0100 		jmp	.L85
 883      00
 884              	.LVL173:
 885              	.L38:
 471:src/vm.c      **** 				break;
 886              		.loc 1 471 0
 887 05c8 4183E01F 		andl	$31, %r8d
 888              	.LVL174:
 889 05cc 98       		cwtl
 890              	.LVL175:
 891 05cd 83E21F   		andl	$31, %edx
 892              	.LVL176:
 893 05d0 42030485 		addl	RF(,%r8,4), %eax
 893      00000000 
 894              	.LVL177:
 895 05d8 8D4803   		leal	3(%rax), %ecx
 896              	.LVL178:
 897 05db 89C6     		movl	%eax, %esi
 898              	.LVL179:
 899 05dd 0FB6B600 		movzbl	VM_memory(%rsi), %esi
 899      000000
 900 05e4 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 900      000000
 901 05eb C1E618   		sall	$24, %esi
 902 05ee 09F1     		orl	%esi, %ecx
 903 05f0 8D7001   		leal	1(%rax), %esi
 904 05f3 83C002   		addl	$2, %eax
 905 05f6 0FB68000 		movzbl	VM_memory(%rax), %eax
 905      000000
 906 05fd 0FB6B600 		movzbl	VM_memory(%rsi), %esi
 906      000000
 907 0604 C1E008   		sall	$8, %eax
 908 0607 C1E610   		sall	$16, %esi
 909 060a 09F1     		orl	%esi, %ecx
 910 060c E96A0100 		jmp	.L111
 910      00
 911              	.LVL180:
 912              	.L42:
 475:src/vm.c      **** 				break;
 913              		.loc 1 475 0
 914 0611 4183E01F 		andl	$31, %r8d
 915              	.LVL181:
 916 0615 83E21F   		andl	$31, %edx
 917              	.LVL182:
GAS LISTING /tmp/cc15eBE3.s 			page 35


 918 0618 98       		cwtl
 919              	.LVL183:
 920 0619 8B149500 		movl	RF(,%rdx,4), %edx
 920      000000
 921 0620 42030485 		addl	RF(,%r8,4), %eax
 921      00000000 
 922              	.LVL184:
 923 0628 E9CC0000 		jmp	.L112
 923      00
 924              	.LVL185:
 925              	.L43:
 479:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 926              		.loc 1 479 0
 927 062d 4183E01F 		andl	$31, %r8d
 928              	.LVL186:
 929 0631 98       		cwtl
 930              	.LVL187:
 931 0632 83E21F   		andl	$31, %edx
 932              	.LVL188:
 933 0635 42030485 		addl	RF(,%r8,4), %eax
 933      00000000 
 934              	.LVL189:
 935 063d 8B149500 		movl	RF(,%rdx,4), %edx
 935      000000
 936 0644 0FB6F6   		movzbl	%dh, %esi
 937              	.LVL190:
 938 0647 89C1     		movl	%eax, %ecx
 939              	.LVL191:
 480:src/vm.c      **** 				break;
 940              		.loc 1 480 0
 941 0649 FFC0     		incl	%eax
 479:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 942              		.loc 1 479 0
 943 064b 4088B100 		movb	%sil, VM_memory(%rcx)
 943      000000
 944 0652 E9A20000 		jmp	.L112
 944      00
 945              	.LVL192:
 946              	.L45:
 484:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 947              		.loc 1 484 0
 948 0657 4183E01F 		andl	$31, %r8d
 949              	.LVL193:
 950 065b 83E21F   		andl	$31, %edx
 951              	.LVL194:
 952 065e 98       		cwtl
 953              	.LVL195:
 954 065f 8B149500 		movl	RF(,%rdx,4), %edx
 954      000000
 955 0666 42030485 		addl	RF(,%r8,4), %eax
 955      00000000 
 956              	.LVL196:
 957 066e 89D6     		movl	%edx, %esi
 958              	.LVL197:
 959 0670 89C1     		movl	%eax, %ecx
 960              	.LVL198:
 961 0672 C1EE18   		shrl	$24, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 36


 962 0675 4088B100 		movb	%sil, VM_memory(%rcx)
 962      000000
 485:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 963              		.loc 1 485 0
 964 067c 8D4801   		leal	1(%rax), %ecx
 965 067f 89D6     		movl	%edx, %esi
 966 0681 C1EE10   		shrl	$16, %esi
 967 0684 4088B100 		movb	%sil, VM_memory(%rcx)
 967      000000
 486:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 968              		.loc 1 486 0
 969 068b 8D4802   		leal	2(%rax), %ecx
 970 068e 0FB6F6   		movzbl	%dh, %esi
 487:src/vm.c      **** 				break;
 971              		.loc 1 487 0
 972 0691 83C003   		addl	$3, %eax
 486:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 973              		.loc 1 486 0
 974 0694 4088B100 		movb	%sil, VM_memory(%rcx)
 974      000000
 975 069b EB5C     		jmp	.L112
 976              	.LVL199:
 977              	.L20:
 502:src/vm.c      **** 				PC = nPC;
 978              		.loc 1 502 0
 979 069d 4183C708 		addl	$8, %r15d
 980 06a1 44893D00 		movl	%r15d, RF+124(%rip)
 980      000000
 981              	.L104:
 503:src/vm.c      **** 				nPC = address << 2;
 982              		.loc 1 503 0
 983 06a8 8B050000 		movl	nPC(%rip), %eax
 983      0000
 984              	.LVL200:
 504:src/vm.c      **** 				continue;
 985              		.loc 1 504 0
 986 06ae C1E102   		sall	$2, %ecx
 987              	.LVL201:
 988 06b1 890D0000 		movl	%ecx, nPC(%rip)
 988      0000
 503:src/vm.c      **** 				nPC = address << 2;
 989              		.loc 1 503 0
 990 06b7 89050000 		movl	%eax, PC(%rip)
 990      0000
 505:src/vm.c      **** 			}
 991              		.loc 1 505 0
 992 06bd E94AFAFF 		jmp	.L14
 992      FF
 993              	.LVL202:
 994              	.L34:
 995 06c2 0FB6F8   		movzbl	%al, %edi
 508:src/vm.c      **** 				break;
 996              		.loc 1 508 0
 997 06c5 E8000000 		call	syscall
 997      00
 998              	.LVL203:
 999 06ca E9B50000 		jmp	.L85
GAS LISTING /tmp/cc15eBE3.s 			page 37


 999      00
 1000              	.LVL204:
 1001              	.L44:
 515:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1002              		.loc 1 515 0
 1003 06cf 4183E01F 		andl	$31, %r8d
 1004              	.LVL205:
 1005 06d3 83E21F   		andl	$31, %edx
 1006              	.LVL206:
 1007 06d6 98       		cwtl
 1008              	.LVL207:
 1009 06d7 8B149500 		movl	RF(,%rdx,4), %edx
 1009      000000
 1010 06de 42030485 		addl	RF(,%r8,4), %eax
 1010      00000000 
 1011              	.LVL208:
 1012 06e6 89D6     		movl	%edx, %esi
 1013              	.LVL209:
 516:src/vm.c      **** 				break;
 1014              		.loc 1 516 0
 1015 06e8 C1EA10   		shrl	$16, %edx
 515:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1016              		.loc 1 515 0
 1017 06eb 89C1     		movl	%eax, %ecx
 1018              	.LVL210:
 1019 06ed C1EE18   		shrl	$24, %esi
 516:src/vm.c      **** 				break;
 1020              		.loc 1 516 0
 1021 06f0 FFC0     		incl	%eax
 515:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1022              		.loc 1 515 0
 1023 06f2 4088B100 		movb	%sil, VM_memory(%rcx)
 1023      000000
 1024              	.L112:
 516:src/vm.c      **** 				break;
 1025              		.loc 1 516 0
 1026 06f9 88900000 		movb	%dl, VM_memory(%rax)
 1026      0000
 1027 06ff E9800000 		jmp	.L85
 1027      00
 1028              	.LVL211:
 1029              	.L46:
 520:src/vm.c      **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 1030              		.loc 1 520 0
 1031 0704 4183E01F 		andl	$31, %r8d
 1032              	.LVL212:
 1033 0708 98       		cwtl
 1034              	.LVL213:
 1035 0709 83E21F   		andl	$31, %edx
 1036              	.LVL214:
 1037 070c 42030485 		addl	RF(,%r8,4), %eax
 1037      00000000 
 1038              	.LVL215:
 1039 0714 8B149500 		movl	RF(,%rdx,4), %edx
 1039      000000
 1040 071b 89C1     		movl	%eax, %ecx
 1041              	.LVL216:
GAS LISTING /tmp/cc15eBE3.s 			page 38


 521:src/vm.c      **** 				break;
 1042              		.loc 1 521 0
 1043 071d FFC8     		decl	%eax
 520:src/vm.c      **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 1044              		.loc 1 520 0
 1045 071f 88910000 		movb	%dl, VM_memory(%rcx)
 1045      0000
 521:src/vm.c      **** 				break;
 1046              		.loc 1 521 0
 1047 0725 C6800000 		movb	$0, VM_memory(%rax)
 1047      000000
 1048 072c EB56     		jmp	.L85
 1049              	.LVL217:
 1050              	.L37:
 525:src/vm.c      **** 				break;
 1051              		.loc 1 525 0
 1052 072e 4183E01F 		andl	$31, %r8d
 1053              	.LVL218:
 1054 0732 98       		cwtl
 1055              	.LVL219:
 1056 0733 83E21F   		andl	$31, %edx
 1057              	.LVL220:
 1058 0736 42030485 		addl	RF(,%r8,4), %eax
 1058      00000000 
 1059              	.LVL221:
 1060 073e 8D4801   		leal	1(%rax), %ecx
 1061              	.LVL222:
 1062 0741 0FB68000 		movzbl	VM_memory(%rax), %eax
 1062      000000
 1063 0748 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 1063      000000
 1064 074f C1E018   		sall	$24, %eax
 1065 0752 C1E110   		sall	$16, %ecx
 1066 0755 EB24     		jmp	.L111
 1067              	.LVL223:
 1068              	.L41:
 529:src/vm.c      **** 				break;
 1069              		.loc 1 529 0
 1070 0757 4183E01F 		andl	$31, %r8d
 1071              	.LVL224:
 1072 075b 98       		cwtl
 1073              	.LVL225:
 1074 075c 83E21F   		andl	$31, %edx
 1075              	.LVL226:
 1076 075f 42030485 		addl	RF(,%r8,4), %eax
 1076      00000000 
 1077              	.LVL227:
 1078 0767 8D48FF   		leal	-1(%rax), %ecx
 1079              	.LVL228:
 1080 076a 0FB68000 		movzbl	VM_memory(%rax), %eax
 1080      000000
 1081 0771 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 1081      000000
 1082 0778 C1E108   		sall	$8, %ecx
 1083              	.LVL229:
 1084              	.L111:
 1085 077b 09C1     		orl	%eax, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 39


 1086 077d 890C9500 		movl	%ecx, RF(,%rdx,4)
 1086      000000
 1087              	.LVL230:
 1088              	.L85:
 1089              	.LBB20:
 166:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 1090              		.loc 1 166 0
 1091 0784 31DB     		xorl	%ebx, %ebx
 1092              	.L15:
 1093              	.LVL231:
 1094              	.LBE20:
 543:src/vm.c      **** 	}
 1095              		.loc 1 543 0
 1096 0786 BF040000 		movl	$4, %edi
 1096      00
 1097 078b E8000000 		call	advance_pc
 1097      00
 1098              	.LVL232:
 1099              	.LBE21:
 119:src/vm.c      **** 	{
 1100              		.loc 1 119 0
 1101 0790 84DB     		testb	%bl, %bl
 1102 0792 0F8474F9 		je	.L14
 1102      FFFF
 557:src/vm.c      **** 	  print_memory();
 1103              		.loc 1 557 0
 1104 0798 4585ED   		testl	%r13d, %r13d
 1105 079b 7415     		je	.L13
 558:src/vm.c      **** 	  print_registers();
 1106              		.loc 1 558 0
 1107 079d E8000000 		call	print_memory
 1107      00
 1108              	.LVL233:
 561:src/vm.c      **** uint32_t fetch(uint32_t PC)
 1109              		.loc 1 561 0
 1110 07a2 5A       		popq	%rdx
 1111              		.cfi_remember_state
 1112              		.cfi_def_cfa_offset 56
 1113 07a3 5B       		popq	%rbx
 1114              		.cfi_def_cfa_offset 48
 1115              	.LVL234:
 1116 07a4 5D       		popq	%rbp
 1117              		.cfi_def_cfa_offset 40
 1118              	.LVL235:
 1119 07a5 415C     		popq	%r12
 1120              		.cfi_def_cfa_offset 32
 1121              	.LVL236:
 1122 07a7 415D     		popq	%r13
 1123              		.cfi_def_cfa_offset 24
 1124              	.LVL237:
 1125 07a9 415E     		popq	%r14
 1126              		.cfi_def_cfa_offset 16
 1127 07ab 415F     		popq	%r15
 1128              		.cfi_def_cfa_offset 8
 559:src/vm.c      **** 	}
 1129              		.loc 1 559 0
 1130 07ad E9000000 		jmp	print_registers
GAS LISTING /tmp/cc15eBE3.s 			page 40


 1130      00
 1131              	.LVL238:
 1132              	.L13:
 1133              		.cfi_restore_state
 561:src/vm.c      **** uint32_t fetch(uint32_t PC)
 1134              		.loc 1 561 0
 1135 07b2 58       		popq	%rax
 1136              		.cfi_def_cfa_offset 56
 1137 07b3 5B       		popq	%rbx
 1138              		.cfi_def_cfa_offset 48
 1139              	.LVL239:
 1140 07b4 5D       		popq	%rbp
 1141              		.cfi_def_cfa_offset 40
 1142              	.LVL240:
 1143 07b5 415C     		popq	%r12
 1144              		.cfi_def_cfa_offset 32
 1145              	.LVL241:
 1146 07b7 415D     		popq	%r13
 1147              		.cfi_def_cfa_offset 24
 1148              	.LVL242:
 1149 07b9 415E     		popq	%r14
 1150              		.cfi_def_cfa_offset 16
 1151 07bb 415F     		popq	%r15
 1152              		.cfi_def_cfa_offset 8
 1153 07bd C3       		ret
 1154              		.cfi_endproc
 1155              	.LFE18:
 1157              		.section	.rodata.str1.1
 1158              	.LC2:
 1159 0015 256400   		.string	"%d"
 1160              		.text
 1161              		.globl	vm_cpu_count
 1163              	vm_cpu_count:
 1164              	.LFB22:
 587:src/vm.c      **** 
 588:src/vm.c      **** void vm_cpu_count(uint32_t newPC)
 589:src/vm.c      **** {
 1165              		.loc 1 589 0
 1166              		.cfi_startproc
 1167              	.LVL243:
 1168 07be 4157     		pushq	%r15
 1169              		.cfi_def_cfa_offset 16
 1170              		.cfi_offset 15, -16
 1171 07c0 4156     		pushq	%r14
 1172              		.cfi_def_cfa_offset 24
 1173              		.cfi_offset 14, -24
 1174              	.LBB22:
 1175              	.LBB23:
 590:src/vm.c      **** 	int instruct_cnt = 0;
 591:src/vm.c      **** 	PC = newPC;
 592:src/vm.c      **** 	nPC = 4;
 593:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
 594:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 595:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
 596:src/vm.c      **** 	uint32_t offset = 4;
 597:src/vm.c      **** 	uint8_t halted = 0;
 598:src/vm.c      **** 	
GAS LISTING /tmp/cc15eBE3.s 			page 41


 599:src/vm.c      **** 	while (!halted) 
 600:src/vm.c      **** 	{
 601:src/vm.c      **** 		instruct_cnt++;
 602:src/vm.c      **** 		uint32_t instr = fetch(PC);
 603:src/vm.c      **** 		uint8_t op = (instr >> 26) & 0x3F;
 604:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 605:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 606:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 607:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 608:src/vm.c      **** 		uint32_t address = (instr >> 0) & 0x3FFFFFF;
 609:src/vm.c      **** 		
 610:src/vm.c      **** 		offset = 4; //default offset for non-branching instructions
 611:src/vm.c      **** 		//TODO Handle events here!
 612:src/vm.c      **** 		switch (op) 
 613:src/vm.c      **** 		{
 614:src/vm.c      **** 			case 0x0: { // 000000 => Register encoding.
 615:src/vm.c      **** 				uint8_t shamt = (instr >> 6) & 0x1F;
 616:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 617:src/vm.c      **** 			  
 618:src/vm.c      **** 				switch (funct) {
 619:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 620:src/vm.c      **** 						if (RF[rt] != 0) RF[rd] = RF[rs];
 621:src/vm.c      **** 						break;
 622:src/vm.c      **** 					}
 623:src/vm.c      **** 					case 0b001010: { // movz	001010 				if(rt==0) rd = rs
 624:src/vm.c      **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
 625:src/vm.c      **** 						break;
 626:src/vm.c      **** 					}
 627:src/vm.c      **** 					case 0b100000: { // add		100000	ArithLog	$d = $s + $t
 628:src/vm.c      **** 						RF[rd] = RF[rs] + RF[rt];
 629:src/vm.c      **** 						break;
 630:src/vm.c      **** 					}
 631:src/vm.c      **** 					case 0b100001: { // addu	100001	ArithLog	$d = $s + $t
 632:src/vm.c      **** 						RF[rd] = RF[rs] + RF[rt];
 633:src/vm.c      **** 						break;
 634:src/vm.c      **** 					}
 635:src/vm.c      **** 					case 0b100100: { // and		100100	ArithLog	$d = $s & $t
 636:src/vm.c      **** 						RF[rd] = RF[rs] & RF[rt];
 637:src/vm.c      **** 						break;
 638:src/vm.c      **** 					}
 639:src/vm.c      **** 					case 0b011010: { // div		011010  DivMult		lo = $s / $t; hi = $s % $t
 640:src/vm.c      **** 						LO = RF[rs] / RF[rt];
 641:src/vm.c      **** 						HI = RF[rs] % RF[rt];
 642:src/vm.c      **** 						break;
 643:src/vm.c      **** 					}
 644:src/vm.c      **** 					case 0b011011: { // divu	011011  DivMult		lo = $s / $t; hi = $s % $t
 645:src/vm.c      **** 						LO = RF[rs] / RF[rt];
 646:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 647:src/vm.c      **** 						break;
 648:src/vm.c      **** 					}
 649:src/vm.c      **** 					case 0b011000: { // mult	011000  DivMult		hi:lo = $s * $t
 650:src/vm.c      **** 						uint64_t mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 651:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 652:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;
 653:src/vm.c      **** 						break;
 654:src/vm.c      **** 					}
 655:src/vm.c      **** 					case 0b011001: { // multu	011001	DivMult		hi:lo = $s * $t
GAS LISTING /tmp/cc15eBE3.s 			page 42


 656:src/vm.c      **** 						uint64_t mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 657:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 658:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;  
 659:src/vm.c      **** 						break;
 660:src/vm.c      **** 					}
 661:src/vm.c      **** 					case 0b100111: { // nor		100111	ArithLog	$d = ~($s | $t)
 662:src/vm.c      **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 663:src/vm.c      **** 						break;
 664:src/vm.c      **** 					}
 665:src/vm.c      **** 					case 0b100101: { // or		100101	ArithLog	$d = $s | $t
 666:src/vm.c      **** 						RF[rd] = RF[rs] | RF[rt];
 667:src/vm.c      **** 						break;
 668:src/vm.c      **** 					}
 669:src/vm.c      **** 					case 0b000000: { // sll		000000	Shift		$d = $t << a
 670:src/vm.c      **** 						RF[rd] = RF[rt] << shamt;
 671:src/vm.c      **** 						break;
 672:src/vm.c      **** 					}
 673:src/vm.c      **** 					case 0b000100: { // sllv	000100	ShiftV		$d = $t << $s
 674:src/vm.c      **** 						RF[rd] = RF[rt] << RF[rs];
 675:src/vm.c      **** 						break;
 676:src/vm.c      **** 					}
 677:src/vm.c      **** 					case 0b000011: { // sra		000011	Shift		$d = $t >> a 
 678:src/vm.c      **** 						if ((int32_t)RF[rt] < 0 && shamt > 0)
 679:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 1176              		.loc 1 679 0
 1177 07c2 4183CEFF 		orl	$-1, %r14d
 1178              	.LBE23:
 1179              	.LBE22:
 589:src/vm.c      **** 	int instruct_cnt = 0;
 1180              		.loc 1 589 0
 1181 07c6 4155     		pushq	%r13
 1182              		.cfi_def_cfa_offset 32
 1183              		.cfi_offset 13, -32
 590:src/vm.c      **** 	int instruct_cnt = 0;
 1184              		.loc 1 590 0
 1185 07c8 4531ED   		xorl	%r13d, %r13d
 589:src/vm.c      **** 	int instruct_cnt = 0;
 1186              		.loc 1 589 0
 1187 07cb 4154     		pushq	%r12
 1188              		.cfi_def_cfa_offset 40
 1189              		.cfi_offset 12, -40
 595:src/vm.c      **** 	uint32_t offset = 4;
 1190              		.loc 1 595 0
 1191 07cd 4531E4   		xorl	%r12d, %r12d
 589:src/vm.c      **** 	int instruct_cnt = 0;
 1192              		.loc 1 589 0
 1193 07d0 55       		pushq	%rbp
 1194              		.cfi_def_cfa_offset 48
 1195              		.cfi_offset 6, -48
 595:src/vm.c      **** 	uint32_t offset = 4;
 1196              		.loc 1 595 0
 1197 07d1 31ED     		xorl	%ebp, %ebp
 589:src/vm.c      **** 	int instruct_cnt = 0;
 1198              		.loc 1 589 0
 1199 07d3 53       		pushq	%rbx
 1200              		.cfi_def_cfa_offset 56
 1201              		.cfi_offset 3, -56
GAS LISTING /tmp/cc15eBE3.s 			page 43


 1202 07d4 56       		pushq	%rsi
 1203              		.cfi_def_cfa_offset 64
 591:src/vm.c      **** 	nPC = 4;
 1204              		.loc 1 591 0
 1205 07d5 893D0000 		movl	%edi, PC(%rip)
 1205      0000
 592:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
 1206              		.loc 1 592 0
 1207 07db C7050000 		movl	$4, nPC(%rip)
 1207      00000400 
 1207      0000
 593:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 1208              		.loc 1 593 0
 1209 07e5 C7050000 		movl	$0, RF(%rip)
 1209      00000000 
 1209      0000
 594:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
 1210              		.loc 1 594 0
 1211 07ef C7050000 		movl	$1, RF+124(%rip)
 1211      00000100 
 1211      0000
 1212              	.LVL244:
 1213              	.L117:
 1214              	.LBB27:
 602:src/vm.c      **** 		uint8_t op = (instr >> 26) & 0x3F;
 1215              		.loc 1 602 0
 1216 07f9 448B3D00 		movl	PC(%rip), %r15d
 1216      000000
 601:src/vm.c      **** 		uint32_t instr = fetch(PC);
 1217              		.loc 1 601 0
 1218 0800 41FFC5   		incl	%r13d
 1219              	.LVL245:
 602:src/vm.c      **** 		uint8_t op = (instr >> 26) & 0x3F;
 1220              		.loc 1 602 0
 1221 0803 4489FF   		movl	%r15d, %edi
 1222 0806 E8000000 		call	fetch
 1222      00
 1223              	.LVL246:
 604:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 1224              		.loc 1 604 0
 1225 080b 89C6     		movl	%eax, %esi
 605:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 1226              		.loc 1 605 0
 1227 080d 89C2     		movl	%eax, %edx
 606:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 1228              		.loc 1 606 0
 1229 080f 4189C0   		movl	%eax, %r8d
 603:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 1230              		.loc 1 603 0
 1231 0812 89C7     		movl	%eax, %edi
 604:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 1232              		.loc 1 604 0
 1233 0814 C1EE15   		shrl	$21, %esi
 605:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 1234              		.loc 1 605 0
 1235 0817 C1EA10   		shrl	$16, %edx
 606:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
GAS LISTING /tmp/cc15eBE3.s 			page 44


 1236              		.loc 1 606 0
 1237 081a 41C1E80B 		shrl	$11, %r8d
 608:src/vm.c      **** 		
 1238              		.loc 1 608 0
 1239 081e 89C1     		movl	%eax, %ecx
 603:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 1240              		.loc 1 603 0
 1241 0820 C1EF1A   		shrl	$26, %edi
 604:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 1242              		.loc 1 604 0
 1243 0823 83E61F   		andl	$31, %esi
 1244              	.LVL247:
 605:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 1245              		.loc 1 605 0
 1246 0826 83E21F   		andl	$31, %edx
 1247              	.LVL248:
 606:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 1248              		.loc 1 606 0
 1249 0829 4183E01F 		andl	$31, %r8d
 1250              	.LVL249:
 608:src/vm.c      **** 		
 1251              		.loc 1 608 0
 1252 082d 81E1FFFF 		andl	$67108863, %ecx
 1252      FF03
 1253              	.LVL250:
 612:src/vm.c      **** 		{
 1254              		.loc 1 612 0
 1255 0833 83FF2E   		cmpl	$46, %edi
 1256 0836 0F87FC05 		ja	.L187
 1256      0000
 1257 083c FF24FD00 		jmp	*.L120(,%rdi,8)
 1257      000000
 1258              		.section	.rodata
 1259              		.align 8
 1260              		.align 4
 1261              	.L120:
 1262 02d8 00000000 		.quad	.L119
 1262      00000000 
 1263 02e0 00000000 		.quad	.L121
 1263      00000000 
 1264 02e8 00000000 		.quad	.L206
 1264      00000000 
 1265 02f0 00000000 		.quad	.L123
 1265      00000000 
 1266 02f8 00000000 		.quad	.L124
 1266      00000000 
 1267 0300 00000000 		.quad	.L125
 1267      00000000 
 1268 0308 00000000 		.quad	.L126
 1268      00000000 
 1269 0310 00000000 		.quad	.L127
 1269      00000000 
 1270 0318 00000000 		.quad	.L129
 1270      00000000 
 1271 0320 00000000 		.quad	.L129
 1271      00000000 
 1272 0328 00000000 		.quad	.L131
GAS LISTING /tmp/cc15eBE3.s 			page 45


 1272      00000000 
 1273 0330 00000000 		.quad	.L131
 1273      00000000 
 1274 0338 00000000 		.quad	.L132
 1274      00000000 
 1275 0340 00000000 		.quad	.L133
 1275      00000000 
 1276 0348 00000000 		.quad	.L134
 1276      00000000 
 1277 0350 00000000 		.quad	.L135
 1277      00000000 
 1278 0358 00000000 		.quad	.L187
 1278      00000000 
 1279 0360 00000000 		.quad	.L187
 1279      00000000 
 1280 0368 00000000 		.quad	.L187
 1280      00000000 
 1281 0370 00000000 		.quad	.L187
 1281      00000000 
 1282 0378 00000000 		.quad	.L187
 1282      00000000 
 1283 0380 00000000 		.quad	.L187
 1283      00000000 
 1284 0388 00000000 		.quad	.L187
 1284      00000000 
 1285 0390 00000000 		.quad	.L187
 1285      00000000 
 1286 0398 00000000 		.quad	.L136
 1286      00000000 
 1287 03a0 00000000 		.quad	.L135
 1287      00000000 
 1288 03a8 00000000 		.quad	.L137
 1288      00000000 
 1289 03b0 00000000 		.quad	.L187
 1289      00000000 
 1290 03b8 00000000 		.quad	.L187
 1290      00000000 
 1291 03c0 00000000 		.quad	.L187
 1291      00000000 
 1292 03c8 00000000 		.quad	.L187
 1292      00000000 
 1293 03d0 00000000 		.quad	.L187
 1293      00000000 
 1294 03d8 00000000 		.quad	.L138
 1294      00000000 
 1295 03e0 00000000 		.quad	.L143
 1295      00000000 
 1296 03e8 00000000 		.quad	.L140
 1296      00000000 
 1297 03f0 00000000 		.quad	.L141
 1297      00000000 
 1298 03f8 00000000 		.quad	.L142
 1298      00000000 
 1299 0400 00000000 		.quad	.L143
 1299      00000000 
 1300 0408 00000000 		.quad	.L144
 1300      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 46


 1301 0410 00000000 		.quad	.L187
 1301      00000000 
 1302 0418 00000000 		.quad	.L145
 1302      00000000 
 1303 0420 00000000 		.quad	.L146
 1303      00000000 
 1304 0428 00000000 		.quad	.L147
 1304      00000000 
 1305 0430 00000000 		.quad	.L148
 1305      00000000 
 1306 0438 00000000 		.quad	.L187
 1306      00000000 
 1307 0440 00000000 		.quad	.L187
 1307      00000000 
 1308 0448 00000000 		.quad	.L149
 1308      00000000 
 1309              		.text
 1310              	.L119:
 1311              	.LBB25:
 615:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 1312              		.loc 1 615 0
 1313 0843 89C1     		movl	%eax, %ecx
 1314              	.LVL251:
 616:src/vm.c      **** 			  
 1315              		.loc 1 616 0
 1316 0845 83E03F   		andl	$63, %eax
 1317              	.LVL252:
 615:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 1318              		.loc 1 615 0
 1319 0848 C1E906   		shrl	$6, %ecx
 1320              	.LVL253:
 1321 084b 83E11F   		andl	$31, %ecx
 1322              	.LVL254:
 618:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 1323              		.loc 1 618 0
 1324 084e 3C2B     		cmpb	$43, %al
 1325 0850 0F87E205 		ja	.L187
 1325      0000
 1326 0856 0FB6C0   		movzbl	%al, %eax
 1327 0859 FF24C500 		jmp	*.L151(,%rax,8)
 1327      000000
 1328              		.section	.rodata
 1329              		.align 8
 1330              		.align 4
 1331              	.L151:
 1332 0450 00000000 		.quad	.L150
 1332      00000000 
 1333 0458 00000000 		.quad	.L187
 1333      00000000 
 1334 0460 00000000 		.quad	.L152
 1334      00000000 
 1335 0468 00000000 		.quad	.L153
 1335      00000000 
 1336 0470 00000000 		.quad	.L154
 1336      00000000 
 1337 0478 00000000 		.quad	.L187
 1337      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 47


 1338 0480 00000000 		.quad	.L155
 1338      00000000 
 1339 0488 00000000 		.quad	.L155
 1339      00000000 
 1340 0490 00000000 		.quad	.L157
 1340      00000000 
 1341 0498 00000000 		.quad	.L158
 1341      00000000 
 1342 04a0 00000000 		.quad	.L159
 1342      00000000 
 1343 04a8 00000000 		.quad	.L160
 1343      00000000 
 1344 04b0 00000000 		.quad	.L161
 1344      00000000 
 1345 04b8 00000000 		.quad	.L187
 1345      00000000 
 1346 04c0 00000000 		.quad	.L187
 1346      00000000 
 1347 04c8 00000000 		.quad	.L187
 1347      00000000 
 1348 04d0 00000000 		.quad	.L162
 1348      00000000 
 1349 04d8 00000000 		.quad	.L163
 1349      00000000 
 1350 04e0 00000000 		.quad	.L164
 1350      00000000 
 1351 04e8 00000000 		.quad	.L165
 1351      00000000 
 1352 04f0 00000000 		.quad	.L187
 1352      00000000 
 1353 04f8 00000000 		.quad	.L187
 1353      00000000 
 1354 0500 00000000 		.quad	.L187
 1354      00000000 
 1355 0508 00000000 		.quad	.L187
 1355      00000000 
 1356 0510 00000000 		.quad	.L167
 1356      00000000 
 1357 0518 00000000 		.quad	.L167
 1357      00000000 
 1358 0520 00000000 		.quad	.L169
 1358      00000000 
 1359 0528 00000000 		.quad	.L169
 1359      00000000 
 1360 0530 00000000 		.quad	.L187
 1360      00000000 
 1361 0538 00000000 		.quad	.L187
 1361      00000000 
 1362 0540 00000000 		.quad	.L187
 1362      00000000 
 1363 0548 00000000 		.quad	.L187
 1363      00000000 
 1364 0550 00000000 		.quad	.L171
 1364      00000000 
 1365 0558 00000000 		.quad	.L171
 1365      00000000 
 1366 0560 00000000 		.quad	.L173
GAS LISTING /tmp/cc15eBE3.s 			page 48


 1366      00000000 
 1367 0568 00000000 		.quad	.L173
 1367      00000000 
 1368 0570 00000000 		.quad	.L174
 1368      00000000 
 1369 0578 00000000 		.quad	.L175
 1369      00000000 
 1370 0580 00000000 		.quad	.L176
 1370      00000000 
 1371 0588 00000000 		.quad	.L177
 1371      00000000 
 1372 0590 00000000 		.quad	.L187
 1372      00000000 
 1373 0598 00000000 		.quad	.L187
 1373      00000000 
 1374 05a0 00000000 		.quad	.L179
 1374      00000000 
 1375 05a8 00000000 		.quad	.L179
 1375      00000000 
 1376              		.text
 1377              	.L160:
 620:src/vm.c      **** 						break;
 1378              		.loc 1 620 0
 1379 0860 83E21F   		andl	$31, %edx
 1380              	.LVL255:
 1381 0863 31DB     		xorl	%ebx, %ebx
 1382 0865 833C9500 		cmpl	$0, RF(,%rdx,4)
 1382      00000000 
 1383 086d 0F84C705 		je	.L118
 1383      0000
 1384 0873 EB13     		jmp	.L209
 1385              	.LVL256:
 1386              	.L159:
 624:src/vm.c      **** 						break;
 1387              		.loc 1 624 0
 1388 0875 83E21F   		andl	$31, %edx
 1389              	.LVL257:
 1390 0878 31DB     		xorl	%ebx, %ebx
 1391 087a 833C9500 		cmpl	$0, RF(,%rdx,4)
 1391      00000000 
 1392 0882 0F85B205 		jne	.L118
 1392      0000
 1393              	.L209:
 624:src/vm.c      **** 						break;
 1394              		.loc 1 624 0 is_stmt 0 discriminator 1
 1395 0888 83E61F   		andl	$31, %esi
 1396              	.LVL258:
 1397 088b 4183E01F 		andl	$31, %r8d
 1398              	.LVL259:
 1399 088f 8B04B500 		movl	RF(,%rsi,4), %eax
 1399      000000
 1400 0896 42890485 		movl	%eax, RF(,%r8,4)
 1400      00000000 
 1401 089e E9970500 		jmp	.L118
 1401      00
 1402              	.LVL260:
 1403              	.L171:
GAS LISTING /tmp/cc15eBE3.s 			page 49


 632:src/vm.c      **** 						break;
 1404              		.loc 1 632 0 is_stmt 1
 1405 08a3 83E21F   		andl	$31, %edx
 1406              	.LVL261:
 1407 08a6 83E61F   		andl	$31, %esi
 1408              	.LVL262:
 1409 08a9 4183E01F 		andl	$31, %r8d
 1410              	.LVL263:
 1411 08ad 8B049500 		movl	RF(,%rdx,4), %eax
 1411      000000
 1412 08b4 0304B500 		addl	RF(,%rsi,4), %eax
 1412      000000
 1413 08bb EB18     		jmp	.L210
 1414              	.LVL264:
 1415              	.L174:
 636:src/vm.c      **** 						break;
 1416              		.loc 1 636 0
 1417 08bd 83E21F   		andl	$31, %edx
 1418              	.LVL265:
 1419 08c0 83E61F   		andl	$31, %esi
 1420              	.LVL266:
 1421 08c3 4183E01F 		andl	$31, %r8d
 1422              	.LVL267:
 1423 08c7 8B049500 		movl	RF(,%rdx,4), %eax
 1423      000000
 1424 08ce 2304B500 		andl	RF(,%rsi,4), %eax
 1424      000000
 1425              	.LVL268:
 1426              	.L210:
 1427 08d5 42890485 		movl	%eax, RF(,%r8,4)
 1427      00000000 
 1428 08dd E9560500 		jmp	.L187
 1428      00
 1429              	.LVL269:
 1430              	.L169:
 645:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 1431              		.loc 1 645 0
 1432 08e2 83E61F   		andl	$31, %esi
 1433              	.LVL270:
 1434 08e5 4889D7   		movq	%rdx, %rdi
 646:src/vm.c      **** 						break;
 1435              		.loc 1 646 0
 1436 08e8 31D2     		xorl	%edx, %edx
 1437              	.LVL271:
 645:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 1438              		.loc 1 645 0
 1439 08ea 8B04B500 		movl	RF(,%rsi,4), %eax
 1439      000000
 1440 08f1 83E71F   		andl	$31, %edi
 1441              	.LVL272:
 646:src/vm.c      **** 						break;
 1442              		.loc 1 646 0
 1443 08f4 F734BD00 		divl	RF(,%rdi,4)
 1443      000000
 1444              	.LVL273:
 1445 08fb 89D5     		movl	%edx, %ebp
 1446              	.LVL274:
GAS LISTING /tmp/cc15eBE3.s 			page 50


 1447 08fd 4189C4   		movl	%eax, %r12d
 1448 0900 E9330500 		jmp	.L187
 1448      00
 1449              	.LVL275:
 1450              	.L167:
 1451              	.LBB24:
 656:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 1452              		.loc 1 656 0
 1453 0905 83E21F   		andl	$31, %edx
 1454              	.LVL276:
 1455 0908 83E61F   		andl	$31, %esi
 1456              	.LVL277:
 1457 090b 8B04B500 		movl	RF(,%rsi,4), %eax
 1457      000000
 1458 0912 448B2495 		movl	RF(,%rdx,4), %r12d
 1458      00000000 
 1459              	.LVL278:
 1460 091a 4C0FAFE0 		imulq	%rax, %r12
 1461              	.LVL279:
 657:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;  
 1462              		.loc 1 657 0
 1463 091e 4C89E0   		movq	%r12, %rax
 1464 0921 48C1E820 		shrq	$32, %rax
 1465 0925 4889C5   		movq	%rax, %rbp
 1466              	.LVL280:
 1467 0928 E90B0500 		jmp	.L187
 1467      00
 1468              	.LVL281:
 1469              	.L177:
 1470              	.LBE24:
 662:src/vm.c      **** 						break;
 1471              		.loc 1 662 0
 1472 092d 83E21F   		andl	$31, %edx
 1473              	.LVL282:
 1474 0930 83E61F   		andl	$31, %esi
 1475              	.LVL283:
 1476 0933 4183E01F 		andl	$31, %r8d
 1477              	.LVL284:
 1478 0937 8B049500 		movl	RF(,%rdx,4), %eax
 1478      000000
 1479 093e 0B04B500 		orl	RF(,%rsi,4), %eax
 1479      000000
 1480 0945 F7D0     		notl	%eax
 1481 0947 EB8C     		jmp	.L210
 1482              	.LVL285:
 1483              	.L175:
 666:src/vm.c      **** 						break;
 1484              		.loc 1 666 0
 1485 0949 83E21F   		andl	$31, %edx
 1486              	.LVL286:
 1487 094c 83E61F   		andl	$31, %esi
 1488              	.LVL287:
 1489 094f 4183E01F 		andl	$31, %r8d
 1490              	.LVL288:
 1491 0953 8B049500 		movl	RF(,%rdx,4), %eax
 1491      000000
 1492 095a 0B04B500 		orl	RF(,%rsi,4), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 51


 1492      000000
 1493 0961 E96FFFFF 		jmp	.L210
 1493      FF
 1494              	.LVL289:
 1495              	.L150:
 670:src/vm.c      **** 						break;
 1496              		.loc 1 670 0
 1497 0966 4183E01F 		andl	$31, %r8d
 1498              	.LVL290:
 1499 096a 83E21F   		andl	$31, %edx
 1500              	.LVL291:
 1501 096d EB11     		jmp	.L215
 1502              	.LVL292:
 1503              	.L154:
 674:src/vm.c      **** 						break;
 1504              		.loc 1 674 0
 1505 096f 83E61F   		andl	$31, %esi
 1506              	.LVL293:
 1507 0972 4183E01F 		andl	$31, %r8d
 1508              	.LVL294:
 1509 0976 83E21F   		andl	$31, %edx
 1510              	.LVL295:
 1511 0979 8B0CB500 		movl	RF(,%rsi,4), %ecx
 1511      000000
 1512              	.LVL296:
 1513              	.L215:
 1514 0980 8B049500 		movl	RF(,%rdx,4), %eax
 1514      000000
 1515 0987 D3E0     		sall	%cl, %eax
 1516 0989 E947FFFF 		jmp	.L210
 1516      FF
 1517              	.LVL297:
 1518              	.L153:
 678:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 1519              		.loc 1 678 0
 1520 098e 83E21F   		andl	$31, %edx
 1521              	.LVL298:
 1522 0991 450FB6C0 		movzbl	%r8b, %r8d
 1523 0995 8B149500 		movl	RF(,%rdx,4), %edx
 1523      000000
 1524 099c 85D2     		testl	%edx, %edx
 1525 099e 7912     		jns	.L180
 678:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 1526              		.loc 1 678 0 is_stmt 0 discriminator 1
 1527 09a0 84C9     		testb	%cl, %cl
 1528 09a2 740E     		je	.L180
 1529              		.loc 1 679 0 is_stmt 1
 1530 09a4 4489F0   		movl	%r14d, %eax
 1531 09a7 D3E8     		shrl	%cl, %eax
 1532 09a9 F7D0     		notl	%eax
 1533 09ab 09D0     		orl	%edx, %eax
 1534 09ad E923FFFF 		jmp	.L210
 1534      FF
 1535              	.L180:
 680:src/vm.c      **** 					    else
 681:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] >> shamt;
 1536              		.loc 1 681 0
GAS LISTING /tmp/cc15eBE3.s 			page 52


 1537 09b2 D3FA     		sarl	%cl, %edx
 1538 09b4 42891485 		movl	%edx, RF(,%r8,4)
 1538      00000000 
 1539 09bc E9770400 		jmp	.L187
 1539      00
 1540              	.LVL299:
 1541              	.L152:
 682:src/vm.c      **** 						break;
 683:src/vm.c      **** 					}
 684:src/vm.c      **** 					case 0b000111: { // srav	000111	ShiftV		$d = $t >> $s
 685:src/vm.c      **** 						RF[rd] = RF[rt] >> RF[rs];
 686:src/vm.c      **** 						break;
 687:src/vm.c      **** 					}
 688:src/vm.c      **** 					case 0b000010: { // srl		000010	Shift		$d = $t >>> a
 689:src/vm.c      **** 						RF[rd] = RF[rt] >> shamt;
 1542              		.loc 1 689 0
 1543 09c1 4183E01F 		andl	$31, %r8d
 1544              	.LVL300:
 1545 09c5 83E21F   		andl	$31, %edx
 1546              	.LVL301:
 1547              	.L217:
 1548 09c8 8B049500 		movl	RF(,%rdx,4), %eax
 1548      000000
 1549 09cf D3E8     		shrl	%cl, %eax
 1550 09d1 E9FFFEFF 		jmp	.L210
 1550      FF
 1551              	.LVL302:
 1552              	.L155:
 690:src/vm.c      **** 						break;
 691:src/vm.c      **** 					}
 692:src/vm.c      **** 					case 0b000110: { // srlv	000110	ShiftV		$d = $t >>> $s
 693:src/vm.c      **** 						RF[rd] = RF[rt] >> RF[rs];  
 1553              		.loc 1 693 0
 1554 09d6 83E61F   		andl	$31, %esi
 1555              	.LVL303:
 1556 09d9 4183E01F 		andl	$31, %r8d
 1557              	.LVL304:
 1558 09dd 83E21F   		andl	$31, %edx
 1559              	.LVL305:
 1560 09e0 8B0CB500 		movl	RF(,%rsi,4), %ecx
 1560      000000
 1561              	.LVL306:
 1562 09e7 EBDF     		jmp	.L217
 1563              	.LVL307:
 1564              	.L173:
 694:src/vm.c      **** 						break;
 695:src/vm.c      **** 					}
 696:src/vm.c      **** 					case 0b100010: { // sub		100010	ArithLog	$d = $s - $t
 697:src/vm.c      **** 						RF[rd] = RF[rs] - RF[rt];  
 698:src/vm.c      **** 						break;
 699:src/vm.c      **** 					}
 700:src/vm.c      **** 					case 0b100011: { // subu	100011	ArithLog	$d = $s - $t
 701:src/vm.c      **** 						RF[rd] = RF[rs] - RF[rt];    
 1565              		.loc 1 701 0
 1566 09e9 83E61F   		andl	$31, %esi
 1567              	.LVL308:
 1568 09ec 83E21F   		andl	$31, %edx
GAS LISTING /tmp/cc15eBE3.s 			page 53


 1569              	.LVL309:
 1570 09ef 4183E01F 		andl	$31, %r8d
 1571              	.LVL310:
 1572 09f3 8B04B500 		movl	RF(,%rsi,4), %eax
 1572      000000
 1573 09fa 2B049500 		subl	RF(,%rdx,4), %eax
 1573      000000
 1574 0a01 E9CFFEFF 		jmp	.L210
 1574      FF
 1575              	.LVL311:
 1576              	.L176:
 702:src/vm.c      **** 						break;
 703:src/vm.c      **** 					}
 704:src/vm.c      **** 					case 0b100110: { // xor		100110  ArithLog	$d = $s ^ $t
 705:src/vm.c      **** 						RF[rd] = RF[rs] ^ RF[rt];    
 1577              		.loc 1 705 0
 1578 0a06 83E21F   		andl	$31, %edx
 1579              	.LVL312:
 1580 0a09 4183E01F 		andl	$31, %r8d
 1581              	.LVL313:
 1582 0a0d 83E61F   		andl	$31, %esi
 1583              	.LVL314:
 1584 0a10 8B049500 		movl	RF(,%rdx,4), %eax
 1584      000000
 1585 0a17 E9E70000 		jmp	.L216
 1585      00
 1586              	.LVL315:
 1587              	.L179:
 706:src/vm.c      **** 						break;
 707:src/vm.c      **** 					}
 708:src/vm.c      **** 					case 0b101010: { // slt		101010	ArithLog	$d = ($s < $t)
 709:src/vm.c      **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 710:src/vm.c      **** 						break;
 711:src/vm.c      **** 					}
 712:src/vm.c      **** 					case 0b101011: { // sltu	101011	ArithLog	$d = ($s < $t)
 713:src/vm.c      **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 1588              		.loc 1 713 0
 1589 0a1c 83E21F   		andl	$31, %edx
 1590              	.LVL316:
 1591 0a1f 83E61F   		andl	$31, %esi
 1592              	.LVL317:
 1593 0a22 4183E01F 		andl	$31, %r8d
 1594              	.LVL318:
 1595 0a26 8B049500 		movl	RF(,%rdx,4), %eax
 1595      000000
 1596 0a2d 3904B500 		cmpl	%eax, RF(,%rsi,4)
 1596      000000
 1597 0a34 0F92C0   		setb	%al
 1598 0a37 0FB6C0   		movzbl	%al, %eax
 1599 0a3a E996FEFF 		jmp	.L210
 1599      FF
 1600              	.LVL319:
 1601              	.L158:
 714:src/vm.c      **** 						break;
 715:src/vm.c      **** 					}
 716:src/vm.c      **** 					case 0b001001: { // jalr	001001	JumpR		$31 = pc; pc = $s
 717:src/vm.c      **** 						RF[31] = PC+8;
GAS LISTING /tmp/cc15eBE3.s 			page 54


 1602              		.loc 1 717 0
 1603 0a3f 4183C708 		addl	$8, %r15d
 1604 0a43 44893D00 		movl	%r15d, RF+124(%rip)
 1604      000000
 1605              	.L157:
 718:src/vm.c      **** 						PC = nPC;
 719:src/vm.c      **** 						nPC = RF[rs];
 720:src/vm.c      **** 						continue;
 721:src/vm.c      **** 					}
 722:src/vm.c      **** 					case 0b001000: { // jr		001000	JumpR		pc = $s 
 723:src/vm.c      **** 						PC = nPC;
 1606              		.loc 1 723 0
 1607 0a4a 8B050000 		movl	nPC(%rip), %eax
 1607      0000
 724:src/vm.c      **** 						nPC = RF[rs];
 1608              		.loc 1 724 0
 1609 0a50 83E61F   		andl	$31, %esi
 1610              	.LVL320:
 723:src/vm.c      **** 						nPC = RF[rs];
 1611              		.loc 1 723 0
 1612 0a53 89050000 		movl	%eax, PC(%rip)
 1612      0000
 1613              		.loc 1 724 0
 1614 0a59 8B04B500 		movl	RF(,%rsi,4), %eax
 1614      000000
 1615 0a60 89050000 		movl	%eax, nPC(%rip)
 1615      0000
 725:src/vm.c      **** 						continue;
 1616              		.loc 1 725 0
 1617 0a66 E98EFDFF 		jmp	.L117
 1617      FF
 1618              	.LVL321:
 1619              	.L162:
 726:src/vm.c      **** 					}
 727:src/vm.c      **** 					case 0b010000: { // mfhi	010000	MoveFrom	$d = hi
 728:src/vm.c      **** 						RF[rd] = HI;
 1620              		.loc 1 728 0
 1621 0a6b 4183E01F 		andl	$31, %r8d
 1622              	.LVL322:
 1623 0a6f 42892C85 		movl	%ebp, RF(,%r8,4)
 1623      00000000 
 1624 0a77 E9BC0300 		jmp	.L187
 1624      00
 1625              	.LVL323:
 1626              	.L164:
 729:src/vm.c      **** 						break;
 730:src/vm.c      **** 					}
 731:src/vm.c      **** 					case 0b010010: { // mflo	010010	MoveFrom	$d = lo
 732:src/vm.c      **** 						RF[rd] = LO;
 1627              		.loc 1 732 0
 1628 0a7c 4183E01F 		andl	$31, %r8d
 1629              	.LVL324:
 1630 0a80 46892485 		movl	%r12d, RF(,%r8,4)
 1630      00000000 
 1631 0a88 E9AB0300 		jmp	.L187
 1631      00
 1632              	.LVL325:
GAS LISTING /tmp/cc15eBE3.s 			page 55


 1633              	.L163:
 733:src/vm.c      **** 						break;
 734:src/vm.c      **** 					}
 735:src/vm.c      **** 					case 0b010001: { // mthi	010001	MoveTo		hi = $s
 736:src/vm.c      **** 						HI = RF[rs];
 1634              		.loc 1 736 0
 1635 0a8d 83E61F   		andl	$31, %esi
 1636              	.LVL326:
 1637 0a90 8B2CB500 		movl	RF(,%rsi,4), %ebp
 1637      000000
 1638              	.LVL327:
 1639 0a97 E99C0300 		jmp	.L187
 1639      00
 1640              	.LVL328:
 1641              	.L165:
 737:src/vm.c      **** 						break;
 738:src/vm.c      **** 					}
 739:src/vm.c      **** 					case 0b010011: { // mtlo	010011	MoveTo		lo = $s
 740:src/vm.c      **** 						LO = RF[rs];
 1642              		.loc 1 740 0
 1643 0a9c 83E61F   		andl	$31, %esi
 1644              	.LVL329:
 1645 0a9f 448B24B5 		movl	RF(,%rsi,4), %r12d
 1645      00000000 
 1646              	.LVL330:
 1647 0aa7 E98C0300 		jmp	.L187
 1647      00
 1648              	.LVL331:
 1649              	.L161:
 1650 0aac 0FB63D00 		movzbl	RF+8(%rip), %edi
 1650      000000
 741:src/vm.c      **** 						break;
 742:src/vm.c      **** 					}
 743:src/vm.c      **** 					case 0b001100: { // syscall 	001100	syscall		$2		seen on the .s generated by the ecc compiler
 744:src/vm.c      **** 						if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respec
 1651              		.loc 1 744 0
 1652 0ab3 E8000000 		call	syscall
 1652      00
 1653              	.LVL332:
 1654 0ab8 84C0     		testb	%al, %al
 1655 0aba 0F95C3   		setne	%bl
 1656 0abd E9780300 		jmp	.L118
 1656      00
 1657              	.LVL333:
 1658              	.L129:
 1659              	.LBE25:
 745:src/vm.c      **** 						{
 746:src/vm.c      **** 							halted = 1; //Syscall returned 1, exit code
 747:src/vm.c      **** 						}
 748:src/vm.c      **** 						break; 
 749:src/vm.c      **** 					}	
 750:src/vm.c      **** 					default:
 751:src/vm.c      **** 					{
 752:src/vm.c      **** 					}
 753:src/vm.c      **** 					break;
 754:src/vm.c      **** 				}      
 755:src/vm.c      **** 				break; // case 0x0
GAS LISTING /tmp/cc15eBE3.s 			page 56


 756:src/vm.c      **** 			}
 757:src/vm.c      **** 			
 758:src/vm.c      **** 			//Immediate encoding
 759:src/vm.c      **** 			case 0b001000: { //addi    001000  ArithLogI       $t = $s + SE(i)
 760:src/vm.c      **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
 761:src/vm.c      **** 				break;
 762:src/vm.c      **** 			}
 763:src/vm.c      **** 			case 0b001001: { //addiu   001001  ArithLogI       $t = $s + SE(i)
 764:src/vm.c      **** 				RF[rt] = (RF[rs] + immediate);
 1660              		.loc 1 764 0
 1661 0ac2 83E61F   		andl	$31, %esi
 1662              	.LVL334:
 1663 0ac5 98       		cwtl
 1664              	.LVL335:
 1665 0ac6 83E21F   		andl	$31, %edx
 1666              	.LVL336:
 1667 0ac9 0304B500 		addl	RF(,%rsi,4), %eax
 1667      000000
 1668              	.LVL337:
 1669 0ad0 E9AE0100 		jmp	.L211
 1669      00
 1670              	.LVL338:
 1671              	.L132:
 765:src/vm.c      **** 				break;
 766:src/vm.c      **** 			}
 767:src/vm.c      **** 			case 0b001100: { //andi    001100  ArithLogI       $t = $s & ZE(i)
 768:src/vm.c      **** 			    RF[rt] = RF[rs] & (uint32_t)immediate;
 1672              		.loc 1 768 0
 1673 0ad5 83E61F   		andl	$31, %esi
 1674              	.LVL339:
 1675 0ad8 98       		cwtl
 1676              	.LVL340:
 1677 0ad9 83E21F   		andl	$31, %edx
 1678              	.LVL341:
 1679 0adc 2304B500 		andl	RF(,%rsi,4), %eax
 1679      000000
 1680              	.LVL342:
 1681 0ae3 E99B0100 		jmp	.L211
 1681      00
 1682              	.LVL343:
 1683              	.L133:
 769:src/vm.c      **** 				break;
 770:src/vm.c      **** 			}
 771:src/vm.c      **** 			case 0b001101: { //ori     001101  ArithLogI       $t = $s | ZE(i)
 772:src/vm.c      **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
 1684              		.loc 1 772 0
 1685 0ae8 83E61F   		andl	$31, %esi
 1686              	.LVL344:
 1687 0aeb 98       		cwtl
 1688              	.LVL345:
 1689 0aec 83E21F   		andl	$31, %edx
 1690              	.LVL346:
 1691 0aef 0B04B500 		orl	RF(,%rsi,4), %eax
 1691      000000
 1692              	.LVL347:
 1693 0af6 E9880100 		jmp	.L211
 1693      00
GAS LISTING /tmp/cc15eBE3.s 			page 57


 1694              	.LVL348:
 1695              	.L134:
 773:src/vm.c      **** 				break;
 774:src/vm.c      **** 			}
 775:src/vm.c      **** 			case 0b001110: { //xori    001110  ArithLogI       $d = $s ^ ZE(i)
 776:src/vm.c      **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
 1696              		.loc 1 776 0
 1697 0afb 4183E01F 		andl	$31, %r8d
 1698              	.LVL349:
 1699 0aff 83E61F   		andl	$31, %esi
 1700              	.LVL350:
 1701 0b02 98       		cwtl
 1702              	.LVL351:
 1703              	.L216:
 1704 0b03 3304B500 		xorl	RF(,%rsi,4), %eax
 1704      000000
 1705 0b0a E9C6FDFF 		jmp	.L210
 1705      FF
 1706              	.LVL352:
 1707              	.L135:
 777:src/vm.c      **** 				break;
 778:src/vm.c      **** 			}
 779:src/vm.c      **** 			case 0b001111: 	 //lui	   001111          Rdest, imm: Load Upper Immediate
 780:src/vm.c      **** 			case 0b011001: { //lhi     011001  LoadI   HH ($t) = i 
 781:src/vm.c      **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 1708              		.loc 1 781 0
 1709 0b0f 83E21F   		andl	$31, %edx
 1710              	.LVL353:
 1711 0b12 C1E010   		sall	$16, %eax
 1712              	.LVL354:
 1713 0b15 E9690100 		jmp	.L211
 1713      00
 1714              	.LVL355:
 1715              	.L136:
 782:src/vm.c      **** 				break;
 783:src/vm.c      **** 			}
 784:src/vm.c      **** 			case 0b011000: { //llo     011000  LoadI   LH ($t) = i
 785:src/vm.c      **** 			  	RF[rt] = immediate;
 1716              		.loc 1 785 0
 1717 0b1a 83E21F   		andl	$31, %edx
 1718              	.LVL356:
 1719 0b1d 98       		cwtl
 1720              	.LVL357:
 1721 0b1e E9600100 		jmp	.L211
 1721      00
 1722              	.LVL358:
 1723              	.L131:
 786:src/vm.c      **** 				break;
 787:src/vm.c      **** 			}
 788:src/vm.c      **** 			case 0b001010: { //slti    001010  ArithLogI       $t = ($s < SE(i))
 789:src/vm.c      **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
 790:src/vm.c      **** 				break;
 791:src/vm.c      **** 			}
 792:src/vm.c      **** 			case 0b001011: { //sltiu   001011  ArithLogI       $t = ($s < SE(i)) 
 793:src/vm.c      **** 				RF[rt] = (RF[rs] < immediate)?1:0;
 1724              		.loc 1 793 0
 1725 0b23 83E61F   		andl	$31, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 58


 1726              	.LVL359:
 1727 0b26 98       		cwtl
 1728              	.LVL360:
 1729 0b27 83E21F   		andl	$31, %edx
 1730              	.LVL361:
 1731 0b2a 3904B500 		cmpl	%eax, RF(,%rsi,4)
 1731      000000
 1732 0b31 0F92C0   		setb	%al
 1733              	.LVL362:
 1734 0b34 0FB6C0   		movzbl	%al, %eax
 1735 0b37 E9470100 		jmp	.L211
 1735      00
 1736              	.LVL363:
 1737              	.L121:
 794:src/vm.c      **** 				break;
 795:src/vm.c      **** 			}
 796:src/vm.c      **** 			case 0b000001: {
 797:src/vm.c      **** 				if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
 1738              		.loc 1 797 0
 1739 0b3c 83E21F   		andl	$31, %edx
 1740              	.LVL364:
 1741 0b3f 8B149500 		movl	RF(,%rdx,4), %edx
 1741      000000
 1742 0b46 83FA01   		cmpl	$1, %edx
 1743 0b49 7518     		jne	.L182
 798:src/vm.c      **** 				{
 799:src/vm.c      **** 					if ((int32_t)RF[rs] >= 0)
 1744              		.loc 1 799 0
 1745 0b4b 83E61F   		andl	$31, %esi
 1746              	.LVL365:
 1747 0b4e 31DB     		xorl	%ebx, %ebx
 1748 0b50 833CB500 		cmpl	$0, RF(,%rsi,4)
 1748      00000000 
 1749 0b58 0F89C600 		jns	.L207
 1749      0000
 1750 0b5e E9D70200 		jmp	.L118
 1750      00
 1751              	.LVL366:
 1752              	.L182:
 800:src/vm.c      **** 					{
 801:src/vm.c      **** 						advance_pc(immediate << 2);
 802:src/vm.c      **** 						continue;
 803:src/vm.c      **** 					}
 804:src/vm.c      **** 					else
 805:src/vm.c      **** 					{
 806:src/vm.c      **** 						break;
 807:src/vm.c      **** 					}
 808:src/vm.c      **** 				}
 809:src/vm.c      **** 				else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
 1753              		.loc 1 809 0
 1754 0b63 83FA11   		cmpl	$17, %edx
 1755 0b66 7514     		jne	.L183
 810:src/vm.c      **** 				{
 811:src/vm.c      **** 					if ((int32_t)RF[rs] >= 0)
 1756              		.loc 1 811 0
 1757 0b68 83E61F   		andl	$31, %esi
 1758              	.LVL367:
GAS LISTING /tmp/cc15eBE3.s 			page 59


 1759 0b6b 31DB     		xorl	%ebx, %ebx
 1760 0b6d 833CB500 		cmpl	$0, RF(,%rsi,4)
 1760      00000000 
 1761 0b75 793D     		jns	.L208
 1762 0b77 E9BE0200 		jmp	.L118
 1762      00
 1763              	.LVL368:
 1764              	.L183:
 812:src/vm.c      **** 					{
 813:src/vm.c      **** 						RF[31] = PC + 8;
 814:src/vm.c      **** 						advance_pc(immediate << 2);
 815:src/vm.c      **** 						continue;
 816:src/vm.c      **** 					}
 817:src/vm.c      **** 					else
 818:src/vm.c      **** 					{
 819:src/vm.c      **** 						break;
 820:src/vm.c      **** 					}
 821:src/vm.c      **** 				}
 822:src/vm.c      **** 				else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
 1765              		.loc 1 822 0
 1766 0b7c 85D2     		testl	%edx, %edx
 1767 0b7e 7518     		jne	.L184
 823:src/vm.c      **** 				{
 824:src/vm.c      **** 					if ((int32_t)RF[rs] < 0)
 1768              		.loc 1 824 0
 1769 0b80 83E61F   		andl	$31, %esi
 1770              	.LVL369:
 1771 0b83 31DB     		xorl	%ebx, %ebx
 1772 0b85 833CB500 		cmpl	$0, RF(,%rsi,4)
 1772      00000000 
 1773 0b8d 0F89A702 		jns	.L118
 1773      0000
 1774 0b93 E98C0000 		jmp	.L207
 1774      00
 1775              	.LVL370:
 1776              	.L184:
 1777 0b98 31DB     		xorl	%ebx, %ebx
 825:src/vm.c      **** 					{
 826:src/vm.c      **** 						advance_pc(immediate << 2);
 827:src/vm.c      **** 						continue;
 828:src/vm.c      **** 					}
 829:src/vm.c      **** 					else
 830:src/vm.c      **** 					{
 831:src/vm.c      **** 						break;
 832:src/vm.c      **** 					}
 833:src/vm.c      **** 				}
 834:src/vm.c      **** 				else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
 1778              		.loc 1 834 0
 1779 0b9a 83FA10   		cmpl	$16, %edx
 1780 0b9d 0F859702 		jne	.L118
 1780      0000
 835:src/vm.c      **** 				{
 836:src/vm.c      **** 					if ((int32_t)RF[rs] < 0)
 1781              		.loc 1 836 0
 1782 0ba3 83E61F   		andl	$31, %esi
 1783              	.LVL371:
 1784 0ba6 833CB500 		cmpl	$0, RF(,%rsi,4)
GAS LISTING /tmp/cc15eBE3.s 			page 60


 1784      00000000 
 1785 0bae 0F898602 		jns	.L118
 1785      0000
 1786              	.L208:
 837:src/vm.c      **** 					{
 838:src/vm.c      **** 						RF[31] = PC + 8;
 1787              		.loc 1 838 0
 1788 0bb4 4183C708 		addl	$8, %r15d
 1789 0bb8 44893D00 		movl	%r15d, RF+124(%rip)
 1789      000000
 1790 0bbf EB63     		jmp	.L207
 1791              	.LVL372:
 1792              	.L124:
 839:src/vm.c      **** 						advance_pc(immediate << 2);
 840:src/vm.c      **** 						continue;
 841:src/vm.c      **** 					}
 842:src/vm.c      **** 					else
 843:src/vm.c      **** 					{
 844:src/vm.c      **** 						break;
 845:src/vm.c      **** 					}
 846:src/vm.c      **** 				}
 847:src/vm.c      **** 				break;
 848:src/vm.c      **** 			}
 849:src/vm.c      **** 			case 0b000100: { //beq     000100  Branch  if ($s == $t) pc += i << 2
 850:src/vm.c      **** 				if (RF[rs] == RF[rt])
 1793              		.loc 1 850 0
 1794 0bc1 83E21F   		andl	$31, %edx
 1795              	.LVL373:
 1796 0bc4 83E61F   		andl	$31, %esi
 1797              	.LVL374:
 1798 0bc7 31DB     		xorl	%ebx, %ebx
 1799 0bc9 8B3C9500 		movl	RF(,%rdx,4), %edi
 1799      000000
 1800 0bd0 393CB500 		cmpl	%edi, RF(,%rsi,4)
 1800      000000
 1801 0bd7 0F855D02 		jne	.L118
 1801      0000
 1802 0bdd EB45     		jmp	.L207
 1803              	.LVL375:
 1804              	.L127:
 851:src/vm.c      **** 				{
 852:src/vm.c      **** 					advance_pc(immediate << 2);
 853:src/vm.c      **** 					continue;
 854:src/vm.c      **** 				}
 855:src/vm.c      **** 				else
 856:src/vm.c      **** 				{
 857:src/vm.c      **** 					break;
 858:src/vm.c      **** 				}
 859:src/vm.c      **** 				break;
 860:src/vm.c      **** 			}
 861:src/vm.c      **** 			case 0b000111: { //bgtz    000111  BranchZ if ($s > 0) pc += i << 2
 862:src/vm.c      **** 				if ((int32_t)RF[rs] > 0)
 1805              		.loc 1 862 0
 1806 0bdf 83E61F   		andl	$31, %esi
 1807              	.LVL376:
 1808 0be2 31DB     		xorl	%ebx, %ebx
 1809 0be4 833CB500 		cmpl	$0, RF(,%rsi,4)
GAS LISTING /tmp/cc15eBE3.s 			page 61


 1809      00000000 
 1810 0bec 7F36     		jg	.L207
 1811 0bee E9470200 		jmp	.L118
 1811      00
 1812              	.LVL377:
 1813              	.L126:
 863:src/vm.c      **** 				{
 864:src/vm.c      **** 					advance_pc(immediate << 2);
 865:src/vm.c      **** 					continue;
 866:src/vm.c      **** 				}
 867:src/vm.c      **** 				else
 868:src/vm.c      **** 				{
 869:src/vm.c      **** 					break;
 870:src/vm.c      **** 				}
 871:src/vm.c      **** 				break;
 872:src/vm.c      **** 			}
 873:src/vm.c      **** 			case 0b000110: { //blez    000110  BranchZ if ($s <= 0) pc += i << 2
 874:src/vm.c      **** 				if ((int32_t)RF[rs] <= 0)
 1814              		.loc 1 874 0
 1815 0bf3 83E61F   		andl	$31, %esi
 1816              	.LVL378:
 1817 0bf6 31DB     		xorl	%ebx, %ebx
 1818 0bf8 833CB500 		cmpl	$0, RF(,%rsi,4)
 1818      00000000 
 1819 0c00 0F8F3402 		jg	.L118
 1819      0000
 1820 0c06 EB1C     		jmp	.L207
 1821              	.LVL379:
 1822              	.L125:
 875:src/vm.c      **** 				{
 876:src/vm.c      **** 					advance_pc(immediate << 2);
 877:src/vm.c      **** 					continue;
 878:src/vm.c      **** 				}
 879:src/vm.c      **** 				else
 880:src/vm.c      **** 				{
 881:src/vm.c      **** 					break;
 882:src/vm.c      **** 				}
 883:src/vm.c      **** 				break;
 884:src/vm.c      **** 			}
 885:src/vm.c      **** 			case 0b000101: { //bne     000101  Branch  if ($s != $t) pc += i << 2
 886:src/vm.c      **** 				if (RF[rs] != RF[rt])
 1823              		.loc 1 886 0
 1824 0c08 83E21F   		andl	$31, %edx
 1825              	.LVL380:
 1826 0c0b 83E61F   		andl	$31, %esi
 1827              	.LVL381:
 1828 0c0e 31DB     		xorl	%ebx, %ebx
 1829 0c10 8B3C9500 		movl	RF(,%rdx,4), %edi
 1829      000000
 1830 0c17 393CB500 		cmpl	%edi, RF(,%rsi,4)
 1830      000000
 1831 0c1e 0F841602 		je	.L118
 1831      0000
 1832              	.L207:
 887:src/vm.c      **** 				{
 888:src/vm.c      **** 					advance_pc(immediate << 2);
 1833              		.loc 1 888 0
GAS LISTING /tmp/cc15eBE3.s 			page 62


 1834 0c24 98       		cwtl
 1835              	.LVL382:
 1836 0c25 8D3C8500 		leal	0(,%rax,4), %edi
 1836      000000
 1837 0c2c E8000000 		call	advance_pc
 1837      00
 1838              	.LVL383:
 889:src/vm.c      **** 					continue;
 1839              		.loc 1 889 0
 1840 0c31 E9C3FBFF 		jmp	.L117
 1840      FF
 1841              	.LVL384:
 1842              	.L138:
 890:src/vm.c      **** 				}
 891:src/vm.c      **** 				else
 892:src/vm.c      **** 				{
 893:src/vm.c      **** 					break;
 894:src/vm.c      **** 				}
 895:src/vm.c      **** 				break;
 896:src/vm.c      **** 			}
 897:src/vm.c      **** 			case 0b100000: { //lb      100000  LoadStore       $t = SE (MEM [$s + i]:1)
 898:src/vm.c      **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
 1843              		.loc 1 898 0
 1844 0c36 83E61F   		andl	$31, %esi
 1845              	.LVL385:
 1846 0c39 98       		cwtl
 1847              	.LVL386:
 1848 0c3a 83E21F   		andl	$31, %edx
 1849              	.LVL387:
 1850 0c3d 0304B500 		addl	RF(,%rsi,4), %eax
 1850      000000
 1851              	.LVL388:
 1852 0c44 8A880000 		movb	VM_memory(%rax), %cl
 1852      0000
 1853              	.LVL389:
 1854 0c4a 88C8     		movb	%cl, %al
 1855 0c4c 83E17F   		andl	$127, %ecx
 1856 0c4f 83E080   		andl	$-128, %eax
 1857 0c52 0FB6C0   		movzbl	%al, %eax
 1858 0c55 C1E018   		sall	$24, %eax
 1859 0c58 09C8     		orl	%ecx, %eax
 1860 0c5a EB27     		jmp	.L211
 1861              	.LVL390:
 1862              	.L142:
 899:src/vm.c      **** 				break;
 900:src/vm.c      **** 			}
 901:src/vm.c      **** 			case 0b100100: { //lbu     100100  LoadStore       $t = ZE (MEM [$s + i]:1)
 902:src/vm.c      **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 1863              		.loc 1 902 0
 1864 0c5c 83E61F   		andl	$31, %esi
 1865              	.LVL391:
 1866 0c5f 98       		cwtl
 1867              	.LVL392:
 1868 0c60 83E21F   		andl	$31, %edx
 1869              	.LVL393:
 1870 0c63 0304B500 		addl	RF(,%rsi,4), %eax
 1870      000000
GAS LISTING /tmp/cc15eBE3.s 			page 63


 1871              	.LVL394:
 1872 0c6a EB10     		jmp	.L212
 1873              	.LVL395:
 1874              	.L143:
 903:src/vm.c      **** 				break;
 904:src/vm.c      **** 			}
 905:src/vm.c      **** 			case 0b100001: { //lh      100001  LoadStore       $t = SE (MEM [$s + i]:2)
 906:src/vm.c      **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
 907:src/vm.c      **** 				break;
 908:src/vm.c      **** 			}
 909:src/vm.c      **** 			case 0b100101: { //lhu     100101  LoadStore       $t = ZE (MEM [$s + i]:2)
 910:src/vm.c      **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
 1875              		.loc 1 910 0
 1876 0c6c 83E61F   		andl	$31, %esi
 1877              	.LVL396:
 1878 0c6f 98       		cwtl
 1879              	.LVL397:
 1880 0c70 83E21F   		andl	$31, %edx
 1881              	.LVL398:
 1882 0c73 0304B500 		addl	RF(,%rsi,4), %eax
 1882      000000
 1883              	.LVL399:
 1884 0c7a FFC0     		incl	%eax
 1885              	.L212:
 1886 0c7c 0FB68000 		movzbl	VM_memory(%rax), %eax
 1886      000000
 1887              	.LVL400:
 1888              	.L211:
 1889 0c83 89049500 		movl	%eax, RF(,%rdx,4)
 1889      000000
 1890 0c8a E9A90100 		jmp	.L187
 1890      00
 1891              	.LVL401:
 1892              	.L141:
 911:src/vm.c      **** 				break;
 912:src/vm.c      **** 			}
 913:src/vm.c      **** 			case 0b100011: { //lw      100011  LoadStore       $t = MEM [$s + i]:4
 914:src/vm.c      **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 1893              		.loc 1 914 0
 1894 0c8f 83E61F   		andl	$31, %esi
 1895              	.LVL402:
 1896 0c92 98       		cwtl
 1897              	.LVL403:
 1898 0c93 83E21F   		andl	$31, %edx
 1899              	.LVL404:
 1900 0c96 0304B500 		addl	RF(,%rsi,4), %eax
 1900      000000
 1901              	.LVL405:
 1902 0c9d 8D4803   		leal	3(%rax), %ecx
 1903              	.LVL406:
 1904 0ca0 89C6     		movl	%eax, %esi
 1905 0ca2 0FB6B600 		movzbl	VM_memory(%rsi), %esi
 1905      000000
 1906 0ca9 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 1906      000000
 1907 0cb0 C1E618   		sall	$24, %esi
 1908 0cb3 09F1     		orl	%esi, %ecx
GAS LISTING /tmp/cc15eBE3.s 			page 64


 1909 0cb5 8D7001   		leal	1(%rax), %esi
 1910 0cb8 83C002   		addl	$2, %eax
 1911 0cbb 0FB68000 		movzbl	VM_memory(%rax), %eax
 1911      000000
 1912 0cc2 0FB6B600 		movzbl	VM_memory(%rsi), %esi
 1912      000000
 1913 0cc9 C1E008   		sall	$8, %eax
 1914 0ccc C1E610   		sall	$16, %esi
 1915 0ccf 09F1     		orl	%esi, %ecx
 1916 0cd1 E9590100 		jmp	.L213
 1916      00
 1917              	.LVL407:
 1918              	.L145:
 915:src/vm.c      **** 				break;
 916:src/vm.c      **** 			}
 917:src/vm.c      **** 			case 0b101000: { //sb      101000  LoadStore       MEM [$s + i]:1 = LB ($t)
 918:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 1919              		.loc 1 918 0
 1920 0cd6 83E61F   		andl	$31, %esi
 1921              	.LVL408:
 1922 0cd9 83E21F   		andl	$31, %edx
 1923              	.LVL409:
 1924 0cdc 98       		cwtl
 1925              	.LVL410:
 1926 0cdd 8B149500 		movl	RF(,%rdx,4), %edx
 1926      000000
 1927 0ce4 0304B500 		addl	RF(,%rsi,4), %eax
 1927      000000
 1928              	.LVL411:
 1929 0ceb E9C60000 		jmp	.L214
 1929      00
 1930              	.LVL412:
 1931              	.L146:
 919:src/vm.c      **** 				break;
 920:src/vm.c      **** 			}
 921:src/vm.c      **** 			case 0b101001: { //sh      101001  LoadStore       MEM [$s + i]:2 = LH ($t)
 922:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 1932              		.loc 1 922 0
 1933 0cf0 83E61F   		andl	$31, %esi
 1934              	.LVL413:
 1935 0cf3 98       		cwtl
 1936              	.LVL414:
 1937 0cf4 83E21F   		andl	$31, %edx
 1938              	.LVL415:
 1939 0cf7 0304B500 		addl	RF(,%rsi,4), %eax
 1939      000000
 1940              	.LVL416:
 1941 0cfe 8B149500 		movl	RF(,%rdx,4), %edx
 1941      000000
 1942 0d05 0FB6F6   		movzbl	%dh, %esi
 1943 0d08 89C1     		movl	%eax, %ecx
 1944              	.LVL417:
 923:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 1945              		.loc 1 923 0
 1946 0d0a FFC0     		incl	%eax
 922:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 1947              		.loc 1 922 0
GAS LISTING /tmp/cc15eBE3.s 			page 65


 1948 0d0c 4088B100 		movb	%sil, VM_memory(%rcx)
 1948      000000
 1949 0d13 E99E0000 		jmp	.L214
 1949      00
 1950              	.LVL418:
 1951              	.L148:
 924:src/vm.c      **** 				break;
 925:src/vm.c      **** 			}
 926:src/vm.c      **** 			case 0b101011: { //sw      101011  LoadStore       MEM [$s + i]:4 = $t
 927:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 1952              		.loc 1 927 0
 1953 0d18 83E61F   		andl	$31, %esi
 1954              	.LVL419:
 1955 0d1b 83E21F   		andl	$31, %edx
 1956              	.LVL420:
 1957 0d1e 98       		cwtl
 1958              	.LVL421:
 1959 0d1f 8B149500 		movl	RF(,%rdx,4), %edx
 1959      000000
 1960 0d26 0304B500 		addl	RF(,%rsi,4), %eax
 1960      000000
 1961              	.LVL422:
 1962 0d2d 89D6     		movl	%edx, %esi
 1963 0d2f 89C1     		movl	%eax, %ecx
 1964              	.LVL423:
 1965 0d31 C1EE18   		shrl	$24, %esi
 1966 0d34 4088B100 		movb	%sil, VM_memory(%rcx)
 1966      000000
 928:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 1967              		.loc 1 928 0
 1968 0d3b 8D4801   		leal	1(%rax), %ecx
 1969 0d3e 89D6     		movl	%edx, %esi
 1970 0d40 C1EE10   		shrl	$16, %esi
 1971 0d43 4088B100 		movb	%sil, VM_memory(%rcx)
 1971      000000
 929:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 1972              		.loc 1 929 0
 1973 0d4a 8D4802   		leal	2(%rax), %ecx
 1974 0d4d 0FB6F6   		movzbl	%dh, %esi
 930:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 1975              		.loc 1 930 0
 1976 0d50 83C003   		addl	$3, %eax
 929:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 1977              		.loc 1 929 0
 1978 0d53 4088B100 		movb	%sil, VM_memory(%rcx)
 1978      000000
 1979 0d5a EB5A     		jmp	.L214
 1980              	.LVL424:
 1981              	.L123:
 931:src/vm.c      **** 				break;
 932:src/vm.c      **** 			}
 933:src/vm.c      **** 	
 934:src/vm.c      **** 			//Jump encoding
 935:src/vm.c      **** 			
 936:src/vm.c      **** 			case 0b000010: { //j       000010  Jump    pc = i << 2
 937:src/vm.c      **** 				PC = nPC;
 938:src/vm.c      **** 				nPC = address << 2;
GAS LISTING /tmp/cc15eBE3.s 			page 66


 939:src/vm.c      **** 				continue;
 940:src/vm.c      **** 			}
 941:src/vm.c      **** 			case 0b000011: { //jal     000011  Jump    $31 = pc; pc = i << 2
 942:src/vm.c      **** 				RF[31] = PC + 8;
 1982              		.loc 1 942 0
 1983 0d5c 4183C708 		addl	$8, %r15d
 1984 0d60 44893D00 		movl	%r15d, RF+124(%rip)
 1984      000000
 1985              	.L206:
 943:src/vm.c      **** 				PC = nPC;
 1986              		.loc 1 943 0
 1987 0d67 8B050000 		movl	nPC(%rip), %eax
 1987      0000
 1988              	.LVL425:
 944:src/vm.c      **** 				nPC = address << 2;
 1989              		.loc 1 944 0
 1990 0d6d C1E102   		sall	$2, %ecx
 1991              	.LVL426:
 1992 0d70 890D0000 		movl	%ecx, nPC(%rip)
 1992      0000
 943:src/vm.c      **** 				PC = nPC;
 1993              		.loc 1 943 0
 1994 0d76 89050000 		movl	%eax, PC(%rip)
 1994      0000
 945:src/vm.c      **** 				continue;
 1995              		.loc 1 945 0
 1996 0d7c E978FAFF 		jmp	.L117
 1996      FF
 1997              	.LVL427:
 1998              	.L137:
 1999 0d81 0FB6F8   		movzbl	%al, %edi
 946:src/vm.c      **** 			}
 947:src/vm.c      **** 			case 0b011010: { //trap    011010  Trap    Dependent on operating system; different values for i
 948:src/vm.c      **** 				syscall((uint8_t)(address&0xFF));
 2000              		.loc 1 948 0
 2001 0d84 E8000000 		call	syscall
 2001      00
 2002              	.LVL428:
 2003 0d89 E9AA0000 		jmp	.L187
 2003      00
 2004              	.LVL429:
 2005              	.L147:
 949:src/vm.c      **** 				break;
 950:src/vm.c      **** 			}
 951:src/vm.c      **** 			
 952:src/vm.c      **** 			
 953:src/vm.c      **** 			
 954:src/vm.c      **** 			case 0b101010: { //swl Rsrc1, imm(Rsrc2): Store Word Left
 955:src/vm.c      **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 2006              		.loc 1 955 0
 2007 0d8e 83E61F   		andl	$31, %esi
 2008              	.LVL430:
 2009 0d91 83E21F   		andl	$31, %edx
 2010              	.LVL431:
 2011 0d94 98       		cwtl
 2012              	.LVL432:
 2013 0d95 8B149500 		movl	RF(,%rdx,4), %edx
GAS LISTING /tmp/cc15eBE3.s 			page 67


 2013      000000
 2014 0d9c 0304B500 		addl	RF(,%rsi,4), %eax
 2014      000000
 2015              	.LVL433:
 2016 0da3 89D6     		movl	%edx, %esi
 956:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 2017              		.loc 1 956 0
 2018 0da5 C1EA10   		shrl	$16, %edx
 955:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 2019              		.loc 1 955 0
 2020 0da8 89C1     		movl	%eax, %ecx
 2021              	.LVL434:
 2022 0daa C1EE18   		shrl	$24, %esi
 2023              		.loc 1 956 0
 2024 0dad FFC0     		incl	%eax
 955:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 2025              		.loc 1 955 0
 2026 0daf 4088B100 		movb	%sil, VM_memory(%rcx)
 2026      000000
 2027              	.L214:
 2028              		.loc 1 956 0
 2029 0db6 88900000 		movb	%dl, VM_memory(%rax)
 2029      0000
 2030 0dbc EB7A     		jmp	.L187
 2031              	.LVL435:
 2032              	.L149:
 957:src/vm.c      **** 				break;
 958:src/vm.c      **** 			}
 959:src/vm.c      **** 			case 0b101110: { //swr Rsrc1, imm(Rsrc2): Store Word Right
 960:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 2033              		.loc 1 960 0
 2034 0dbe 83E61F   		andl	$31, %esi
 2035              	.LVL436:
 2036 0dc1 98       		cwtl
 2037              	.LVL437:
 2038 0dc2 83E21F   		andl	$31, %edx
 2039              	.LVL438:
 2040 0dc5 0304B500 		addl	RF(,%rsi,4), %eax
 2040      000000
 2041              	.LVL439:
 2042 0dcc 8B149500 		movl	RF(,%rdx,4), %edx
 2042      000000
 2043 0dd3 89C1     		movl	%eax, %ecx
 2044              	.LVL440:
 961:src/vm.c      **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 2045              		.loc 1 961 0
 2046 0dd5 FFC8     		decl	%eax
 960:src/vm.c      **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 2047              		.loc 1 960 0
 2048 0dd7 88910000 		movb	%dl, VM_memory(%rcx)
 2048      0000
 2049              		.loc 1 961 0
 2050 0ddd C6800000 		movb	$0, VM_memory(%rax)
 2050      000000
 2051 0de4 EB52     		jmp	.L187
 2052              	.LVL441:
 2053              	.L140:
GAS LISTING /tmp/cc15eBE3.s 			page 68


 962:src/vm.c      **** 				break;
 963:src/vm.c      **** 			}
 964:src/vm.c      **** 			case 0b100010: { //lwl Rdest, imm(Rsrc): Load Word Left
 965:src/vm.c      **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
 2054              		.loc 1 965 0
 2055 0de6 83E61F   		andl	$31, %esi
 2056              	.LVL442:
 2057 0de9 98       		cwtl
 2058              	.LVL443:
 2059 0dea 83E21F   		andl	$31, %edx
 2060              	.LVL444:
 2061 0ded 0304B500 		addl	RF(,%rsi,4), %eax
 2061      000000
 2062              	.LVL445:
 2063 0df4 8D4801   		leal	1(%rax), %ecx
 2064              	.LVL446:
 2065 0df7 0FB68000 		movzbl	VM_memory(%rax), %eax
 2065      000000
 2066 0dfe 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 2066      000000
 2067 0e05 C1E018   		sall	$24, %eax
 2068 0e08 C1E110   		sall	$16, %ecx
 2069 0e0b EB22     		jmp	.L213
 2070              	.LVL447:
 2071              	.L144:
 966:src/vm.c      **** 				break;
 967:src/vm.c      **** 			}
 968:src/vm.c      **** 			case 0b100110: { //lwr Rdest, imm(Rsrc): Load Word Right
 969:src/vm.c      **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
 2072              		.loc 1 969 0
 2073 0e0d 83E61F   		andl	$31, %esi
 2074              	.LVL448:
 2075 0e10 98       		cwtl
 2076              	.LVL449:
 2077 0e11 83E21F   		andl	$31, %edx
 2078              	.LVL450:
 2079 0e14 0304B500 		addl	RF(,%rsi,4), %eax
 2079      000000
 2080              	.LVL451:
 2081 0e1b 8D48FF   		leal	-1(%rax), %ecx
 2082              	.LVL452:
 2083 0e1e 0FB68000 		movzbl	VM_memory(%rax), %eax
 2083      000000
 2084 0e25 0FB68900 		movzbl	VM_memory(%rcx), %ecx
 2084      000000
 2085 0e2c C1E108   		sall	$8, %ecx
 2086              	.L213:
 2087 0e2f 09C1     		orl	%eax, %ecx
 2088 0e31 890C9500 		movl	%ecx, RF(,%rdx,4)
 2088      000000
 2089              	.LVL453:
 2090              	.L187:
 2091              	.LBB26:
 618:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 2092              		.loc 1 618 0
 2093 0e38 31DB     		xorl	%ebx, %ebx
 2094              	.L118:
GAS LISTING /tmp/cc15eBE3.s 			page 69


 2095              	.LVL454:
 2096              	.LBE26:
 970:src/vm.c      **** 				break;
 971:src/vm.c      **** 			}
 972:src/vm.c      **** 			
 973:src/vm.c      **** 			//uint8_t op = (instr >> 26) & 0x3F;
 974:src/vm.c      **** 			break; //op
 975:src/vm.c      **** 			default:
 976:src/vm.c      **** 			{
 977:src/vm.c      **** 				break;
 978:src/vm.c      **** 			}
 979:src/vm.c      **** 		}
 980:src/vm.c      **** 		advance_pc(offset);//Advances the PC
 2097              		.loc 1 980 0
 2098 0e3a BF040000 		movl	$4, %edi
 2098      00
 2099 0e3f E8000000 		call	advance_pc
 2099      00
 2100              	.LVL455:
 2101              	.LBE27:
 599:src/vm.c      **** 	{
 2102              		.loc 1 599 0
 2103 0e44 84DB     		testb	%bl, %bl
 2104 0e46 0F84ADF9 		je	.L117
 2104      FFFF
 2105              	.LVL456:
 981:src/vm.c      **** 	}
 982:src/vm.c      **** 	printf("%d", instruct_cnt);
 983:src/vm.c      **** 	//printnum(instruct_cnt);
 984:src/vm.c      **** }
 2106              		.loc 1 984 0
 2107 0e4c 59       		popq	%rcx
 2108              		.cfi_def_cfa_offset 56
 2109 0e4d 5B       		popq	%rbx
 2110              		.cfi_def_cfa_offset 48
 2111              	.LVL457:
 2112 0e4e 5D       		popq	%rbp
 2113              		.cfi_def_cfa_offset 40
 2114              	.LVL458:
 2115 0e4f 415C     		popq	%r12
 2116              		.cfi_def_cfa_offset 32
 2117              	.LVL459:
 2118              	.LBB28:
 2119              	.LBB29:
 2120              		.loc 2 104 0
 2121 0e51 4489EA   		movl	%r13d, %edx
 2122 0e54 BE000000 		movl	$.LC2, %esi
 2122      00
 2123 0e59 BF010000 		movl	$1, %edi
 2123      00
 2124              	.LBE29:
 2125              	.LBE28:
 2126              		.loc 1 984 0
 2127 0e5e 415D     		popq	%r13
 2128              		.cfi_def_cfa_offset 24
 2129              	.LVL460:
 2130 0e60 415E     		popq	%r14
GAS LISTING /tmp/cc15eBE3.s 			page 70


 2131              		.cfi_def_cfa_offset 16
 2132 0e62 415F     		popq	%r15
 2133              		.cfi_def_cfa_offset 8
 2134              	.LBB31:
 2135              	.LBB30:
 2136              		.loc 2 104 0
 2137 0e64 31C0     		xorl	%eax, %eax
 2138 0e66 E9000000 		jmp	__printf_chk
 2138      00
 2139              	.LVL461:
 2140              	.LBE30:
 2141              	.LBE31:
 2142              		.cfi_endproc
 2143              	.LFE22:
 2145              		.section	.rodata
 2146              	.LC3:
 2147 05b0 6D6F766E 		.string	"movn"
 2147      00
 2148 05b5 00       		.string	""
 2149              	.LC4:
 2150 05b6 6D6F767A 		.string	"movz"
 2150      00
 2151 05bb 00       		.string	""
 2152              	.LC5:
 2153 05bc 61646400 		.string	"add"
 2154 05c0 00       		.string	""
 2155              	.LC6:
 2156 05c1 61646475 		.string	"addu"
 2156      00
 2157 05c6 00       		.string	""
 2158              	.LC7:
 2159 05c7 616E6400 		.string	"and"
 2160 05cb 00       		.string	""
 2161              	.LC8:
 2162 05cc 64697600 		.string	"div"
 2163 05d0 00       		.string	""
 2164              	.LC9:
 2165 05d1 64697675 		.string	"divu"
 2165      00
 2166 05d6 00       		.string	""
 2167              	.LC10:
 2168 05d7 6D756C74 		.string	"mult"
 2168      00
 2169 05dc 00       		.string	""
 2170              	.LC11:
 2171 05dd 6D756C74 		.string	"multu"
 2171      7500
 2172 05e3 00       		.string	""
 2173              	.LC12:
 2174 05e4 6E6F7200 		.string	"nor"
 2175 05e8 00       		.string	""
 2176              	.LC13:
 2177 05e9 6F7200   		.string	"or"
 2178 05ec 00       		.string	""
 2179              	.LC14:
 2180 05ed 736C6C00 		.string	"sll"
 2181 05f1 00       		.string	""
GAS LISTING /tmp/cc15eBE3.s 			page 71


 2182              	.LC15:
 2183 05f2 736C6C76 		.string	"sllv"
 2183      00
 2184 05f7 00       		.string	""
 2185              	.LC16:
 2186 05f8 73726100 		.string	"sra"
 2187 05fc 00       		.string	""
 2188              	.LC17:
 2189 05fd 73726176 		.string	"srav"
 2189      00
 2190 0602 00       		.string	""
 2191              	.LC18:
 2192 0603 73726C00 		.string	"srl"
 2193 0607 00       		.string	""
 2194              	.LC19:
 2195 0608 73726C76 		.string	"srlv"
 2195      00
 2196 060d 00       		.string	""
 2197              	.LC20:
 2198 060e 73756200 		.string	"sub"
 2199 0612 00       		.string	""
 2200              	.LC21:
 2201 0613 73756275 		.string	"subu"
 2201      00
 2202 0618 00       		.string	""
 2203              	.LC22:
 2204 0619 786F7200 		.string	"xor"
 2205 061d 00       		.string	""
 2206              	.LC23:
 2207 061e 736C7400 		.string	"slt"
 2208 0622 00       		.string	""
 2209              	.LC24:
 2210 0623 736C7475 		.string	"sltu"
 2210      00
 2211 0628 00       		.string	""
 2212              	.LC25:
 2213 0629 6A756D70 		.string	"jumpr1"
 2213      723100
 2214 0630 00       		.string	""
 2215              	.LC26:
 2216 0631 6A756D70 		.string	"jumpr2"
 2216      723200
 2217 0638 00       		.string	""
 2218              	.LC27:
 2219 0639 6D686669 		.string	"mhfi"
 2219      00
 2220 063e 00       		.string	""
 2221              	.LC28:
 2222 063f 6D666C6F 		.string	"mflo"
 2222      00
 2223 0644 00       		.string	""
 2224              	.LC29:
 2225 0645 6D746869 		.string	"mthi"
 2225      00
 2226 064a 00       		.string	""
 2227              	.LC30:
 2228 064b 6D746C6F 		.string	"mtlo"
GAS LISTING /tmp/cc15eBE3.s 			page 72


 2228      00
 2229 0650 00       		.string	""
 2230              	.LC31:
 2231 0651 73797363 		.string	"syscall"
 2231      616C6C00 
 2232 0659 00       		.string	""
 2233              	.LC32:
 2234 065a 61646469 		.string	"addi"
 2234      00
 2235 065f 00       		.string	""
 2236              	.LC33:
 2237 0660 61646469 		.string	"addiu"
 2237      7500
 2238 0666 00       		.string	""
 2239              	.LC34:
 2240 0667 616E6469 		.string	"andi"
 2240      00
 2241 066c 00       		.string	""
 2242              	.LC35:
 2243 066d 6F726900 		.string	"ori"
 2244 0671 00       		.string	""
 2245              	.LC36:
 2246 0672 786F7269 		.string	"xori"
 2246      00
 2247 0677 00       		.string	""
 2248              	.LC37:
 2249 0678 6C756900 		.string	"lui"
 2250 067c 00       		.string	""
 2251              	.LC38:
 2252 067d 6C686900 		.string	"lhi"
 2253 0681 00       		.string	""
 2254              	.LC39:
 2255 0682 6C6C6F00 		.string	"llo"
 2256 0686 00       		.string	""
 2257              	.LC40:
 2258 0687 736C7469 		.string	"slti"
 2258      00
 2259 068c 00       		.string	""
 2260              	.LC41:
 2261 068d 736C7469 		.string	"sltiu"
 2261      7500
 2262 0693 00       		.string	""
 2263              	.LC42:
 2264 0694 6267657A 		.string	"bgez"
 2264      00
 2265 0699 00       		.string	""
 2266              	.LC43:
 2267 069a 6267657A 		.string	"bgezal"
 2267      616C00
 2268 06a1 00       		.string	""
 2269              	.LC44:
 2270 06a2 626C747A 		.string	"bltz"
 2270      00
 2271 06a7 00       		.string	""
 2272              	.LC45:
 2273 06a8 626C747A 		.string	"bltzal"
 2273      616C00
GAS LISTING /tmp/cc15eBE3.s 			page 73


 2274 06af 00       		.string	""
 2275              	.LC46:
 2276 06b0 62657100 		.string	"beq"
 2277 06b4 00       		.string	""
 2278              	.LC47:
 2279 06b5 6267747A 		.string	"bgtz"
 2279      00
 2280 06ba 00       		.string	""
 2281              	.LC48:
 2282 06bb 626C657A 		.string	"blez"
 2282      00
 2283 06c0 00       		.string	""
 2284              	.LC49:
 2285 06c1 626E6500 		.string	"bne"
 2286 06c5 00       		.string	""
 2287              	.LC50:
 2288 06c6 6C6200   		.string	"lb"
 2289 06c9 00       		.string	""
 2290              	.LC51:
 2291 06ca 6C627500 		.string	"lbu"
 2292 06ce 00       		.string	""
 2293              	.LC52:
 2294 06cf 6C6800   		.string	"lh"
 2295 06d2 00       		.string	""
 2296              	.LC53:
 2297 06d3 6C687500 		.string	"lhu"
 2298 06d7 00       		.string	""
 2299              	.LC54:
 2300 06d8 6C7700   		.string	"lw"
 2301 06db 00       		.string	""
 2302              	.LC55:
 2303 06dc 736200   		.string	"sb"
 2304 06df 00       		.string	""
 2305              	.LC56:
 2306 06e0 736800   		.string	"sh"
 2307 06e3 00       		.string	""
 2308              	.LC57:
 2309 06e4 737700   		.string	"sw"
 2310 06e7 00       		.string	""
 2311              	.LC58:
 2312 06e8 6A756D70 		.string	"jump"
 2312      00
 2313 06ed 00       		.string	""
 2314              	.LC59:
 2315 06ee 6A616C00 		.string	"jal"
 2316 06f2 00       		.string	""
 2317              	.LC60:
 2318 06f3 74726170 		.string	"trap"
 2318      00
 2319 06f8 00       		.string	""
 2320              	.LC61:
 2321 06f9 73776C00 		.string	"swl"
 2322 06fd 00       		.string	""
 2323              	.LC62:
 2324 06fe 73777200 		.string	"swr"
 2325 0702 00       		.string	""
 2326              	.LC63:
GAS LISTING /tmp/cc15eBE3.s 			page 74


 2327 0703 6C776C00 		.string	"lwl"
 2328 0707 00       		.string	""
 2329              	.LC64:
 2330 0708 6C777200 		.string	"lwr"
 2331 070c 00       		.string	""
 2332              	.LC65:
 2333 070d 23554E4B 		.string	"#UNKNOWN"
 2333      4E4F574E 
 2333      00
 2334 0716 00       		.string	""
 2335              		.text
 2336              		.globl	vm_cpu_identify_instructions
 2338              	vm_cpu_identify_instructions:
 2339              	.LFB23:
 985:src/vm.c      **** 
 986:src/vm.c      **** #define NUM_INSTR 64
 987:src/vm.c      **** 
 988:src/vm.c      **** void vm_cpu_identify_instructions(uint32_t newPC)
 989:src/vm.c      **** {
 2340              		.loc 1 989 0
 2341              		.cfi_startproc
 2342              	.LVL462:
 2343 0e6b 4157     		pushq	%r15
 2344              		.cfi_def_cfa_offset 16
 2345              		.cfi_offset 15, -16
 990:src/vm.c      **** 	int instruct_cnt = 0;
 991:src/vm.c      **** 	PC = newPC;
 992:src/vm.c      **** 	nPC = 4;
 993:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
 994:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 995:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
 996:src/vm.c      **** 	uint32_t offset = 4;
 997:src/vm.c      **** 	uint8_t halted = 0;
 998:src/vm.c      **** 	
 999:src/vm.c      **** 	int usage[NUM_INSTR];
1000:src/vm.c      **** 	int i;
1001:src/vm.c      **** 	
1002:src/vm.c      **** 	struct journal dia;
1003:src/vm.c      **** 	struct j_entry * j_entry;
1004:src/vm.c      **** 	int j_id;
1005:src/vm.c      **** 	char * j_text;
1006:src/vm.c      **** 	
1007:src/vm.c      **** 	JOURNAL_init(&dia, 1, 0, 0);
 2346              		.loc 1 1007 0
 2347 0e6d 31C9     		xorl	%ecx, %ecx
 2348 0e6f 31D2     		xorl	%edx, %edx
 2349 0e71 BE010000 		movl	$1, %esi
 2349      00
1008:src/vm.c      **** 	j_id = JOURNAL_get_id(&dia, 'i');
 2350              		.loc 1 1008 0
 2351 0e76 4531FF   		xorl	%r15d, %r15d
 989:src/vm.c      **** 	int instruct_cnt = 0;
 2352              		.loc 1 989 0
 2353 0e79 4156     		pushq	%r14
 2354              		.cfi_def_cfa_offset 24
 2355              		.cfi_offset 14, -24
 2356 0e7b 4155     		pushq	%r13
GAS LISTING /tmp/cc15eBE3.s 			page 75


 2357              		.cfi_def_cfa_offset 32
 2358              		.cfi_offset 13, -32
 2359 0e7d 4154     		pushq	%r12
 2360              		.cfi_def_cfa_offset 40
 2361              		.cfi_offset 12, -40
 2362 0e7f 55       		pushq	%rbp
 2363              		.cfi_def_cfa_offset 48
 2364              		.cfi_offset 6, -48
 2365 0e80 53       		pushq	%rbx
 2366              		.cfi_def_cfa_offset 56
 2367              		.cfi_offset 3, -56
 2368 0e81 4883EC68 		subq	$104, %rsp
 2369              		.cfi_def_cfa_offset 160
 991:src/vm.c      **** 	nPC = 4;
 2370              		.loc 1 991 0
 2371 0e85 893D0000 		movl	%edi, PC(%rip)
 2371      0000
 992:src/vm.c      **** 	RF[0] = 0; //Register $zero must always be zero
 2372              		.loc 1 992 0
 2373 0e8b C7050000 		movl	$4, nPC(%rip)
 2373      00000400 
 2373      0000
1007:src/vm.c      **** 	j_id = JOURNAL_get_id(&dia, 'i');
 2374              		.loc 1 1007 0
 2375 0e95 488D7C24 		leaq	40(%rsp), %rdi
 2375      28
 2376              	.LVL463:
 993:src/vm.c      **** 	RF[31] = 1; //Return default (if the program does not set to zero, should put error)
 2377              		.loc 1 993 0
 2378 0e9a C7050000 		movl	$0, RF(%rip)
 2378      00000000 
 2378      0000
 994:src/vm.c      **** 	uint32_t HI = 0, LO = 0;  
 2379              		.loc 1 994 0
 2380 0ea4 C7050000 		movl	$1, RF+124(%rip)
 2380      00000100 
 2380      0000
 2381              	.LVL464:
1007:src/vm.c      **** 	j_id = JOURNAL_get_id(&dia, 'i');
 2382              		.loc 1 1007 0
 2383 0eae E8000000 		call	JOURNAL_init
 2383      00
 2384              	.LVL465:
 2385              		.loc 1 1008 0
 2386 0eb3 488D7C24 		leaq	40(%rsp), %rdi
 2386      28
 2387 0eb8 BE690000 		movl	$105, %esi
 2387      00
 2388 0ebd E8000000 		call	JOURNAL_get_id
 2388      00
 2389              	.LVL466:
 2390 0ec2 C7042400 		movl	$0, (%rsp)
 2390      000000
 2391 0ec9 89C3     		movl	%eax, %ebx
 2392              	.LVL467:
 2393              	.L219:
 2394              	.LBB32:
GAS LISTING /tmp/cc15eBE3.s 			page 76


1009:src/vm.c      **** 	
1010:src/vm.c      **** 	for (i=0; i<NUM_INSTR; i++)
1011:src/vm.c      **** 	  usage[i] = 0;
1012:src/vm.c      **** 
1013:src/vm.c      **** 	while (!halted) 
1014:src/vm.c      **** 	{
1015:src/vm.c      **** 		instruct_cnt++;
1016:src/vm.c      **** 		uint32_t instr = fetch(PC);
 2395              		.loc 1 1016 0
 2396 0ecb 8B3D0000 		movl	PC(%rip), %edi
 2396      0000
 2397 0ed1 E8000000 		call	fetch
 2397      00
 2398              	.LVL468:
 2399 0ed6 4189C5   		movl	%eax, %r13d
 2400              	.LVL469:
1017:src/vm.c      **** 		uint8_t op = (instr >> 26) & 0x3F;
1018:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 2401              		.loc 1 1018 0
 2402 0ed9 89C5     		movl	%eax, %ebp
1019:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 2403              		.loc 1 1019 0
 2404 0edb 4189C4   		movl	%eax, %r12d
1020:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 2405              		.loc 1 1020 0
 2406 0ede 4189C6   		movl	%eax, %r14d
1021:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
1022:src/vm.c      **** 		uint32_t address = (instr >> 0) & 0x3FFFFFF;
 2407              		.loc 1 1022 0
 2408 0ee1 25FFFFFF 		andl	$67108863, %eax
 2408      03
 2409              	.LVL470:
1018:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 2410              		.loc 1 1018 0
 2411 0ee6 C1ED15   		shrl	$21, %ebp
 2412              	.LVL471:
 2413              		.loc 1 1022 0
 2414 0ee9 8944241C 		movl	%eax, 28(%rsp)
1017:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 2415              		.loc 1 1017 0
 2416 0eed 4489E8   		movl	%r13d, %eax
1019:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
 2417              		.loc 1 1019 0
 2418 0ef0 41C1EC10 		shrl	$16, %r12d
 2419              	.LVL472:
1020:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 2420              		.loc 1 1020 0
 2421 0ef4 41C1EE0B 		shrl	$11, %r14d
1017:src/vm.c      **** 		uint8_t rs = (instr >> 21) & 0x1F;
 2422              		.loc 1 1017 0
 2423 0ef8 C1E81A   		shrl	$26, %eax
 2424              	.LVL473:
1018:src/vm.c      **** 		uint8_t rt = (instr >> 16) & 0x1F;
 2425              		.loc 1 1018 0
 2426 0efb 83E51F   		andl	$31, %ebp
 2427              	.LVL474:
1019:src/vm.c      **** 		uint8_t rd = (instr >> 11) & 0x1F;
GAS LISTING /tmp/cc15eBE3.s 			page 77


 2428              		.loc 1 1019 0
 2429 0efe 4183E41F 		andl	$31, %r12d
 2430              	.LVL475:
1020:src/vm.c      **** 		int16_t immediate = (instr >> 0) & 0xFFFF;
 2431              		.loc 1 1020 0
 2432 0f02 4183E61F 		andl	$31, %r14d
 2433              	.LVL476:
1023:src/vm.c      **** 		
1024:src/vm.c      **** 		offset = 4; //default offset for non-branching instructions
1025:src/vm.c      **** 		//TODO Handle events here!
1026:src/vm.c      **** 		switch (op) 
 2434              		.loc 1 1026 0
 2435 0f06 83F82E   		cmpl	$46, %eax
 2436 0f09 0F87DE0C 		ja	.L220
 2436      0000
 2437 0f0f FF24C500 		jmp	*.L222(,%rax,8)
 2437      000000
 2438              		.section	.rodata
 2439 0717 00       		.align 8
 2440              		.align 4
 2441              	.L222:
 2442 0718 00000000 		.quad	.L221
 2442      00000000 
 2443 0720 00000000 		.quad	.L223
 2443      00000000 
 2444 0728 00000000 		.quad	.L224
 2444      00000000 
 2445 0730 00000000 		.quad	.L225
 2445      00000000 
 2446 0738 00000000 		.quad	.L226
 2446      00000000 
 2447 0740 00000000 		.quad	.L227
 2447      00000000 
 2448 0748 00000000 		.quad	.L228
 2448      00000000 
 2449 0750 00000000 		.quad	.L229
 2449      00000000 
 2450 0758 00000000 		.quad	.L230
 2450      00000000 
 2451 0760 00000000 		.quad	.L231
 2451      00000000 
 2452 0768 00000000 		.quad	.L232
 2452      00000000 
 2453 0770 00000000 		.quad	.L233
 2453      00000000 
 2454 0778 00000000 		.quad	.L234
 2454      00000000 
 2455 0780 00000000 		.quad	.L235
 2455      00000000 
 2456 0788 00000000 		.quad	.L236
 2456      00000000 
 2457 0790 00000000 		.quad	.L237
 2457      00000000 
 2458 0798 00000000 		.quad	.L220
 2458      00000000 
 2459 07a0 00000000 		.quad	.L220
 2459      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 78


 2460 07a8 00000000 		.quad	.L220
 2460      00000000 
 2461 07b0 00000000 		.quad	.L220
 2461      00000000 
 2462 07b8 00000000 		.quad	.L220
 2462      00000000 
 2463 07c0 00000000 		.quad	.L220
 2463      00000000 
 2464 07c8 00000000 		.quad	.L220
 2464      00000000 
 2465 07d0 00000000 		.quad	.L220
 2465      00000000 
 2466 07d8 00000000 		.quad	.L238
 2466      00000000 
 2467 07e0 00000000 		.quad	.L239
 2467      00000000 
 2468 07e8 00000000 		.quad	.L240
 2468      00000000 
 2469 07f0 00000000 		.quad	.L220
 2469      00000000 
 2470 07f8 00000000 		.quad	.L220
 2470      00000000 
 2471 0800 00000000 		.quad	.L220
 2471      00000000 
 2472 0808 00000000 		.quad	.L220
 2472      00000000 
 2473 0810 00000000 		.quad	.L220
 2473      00000000 
 2474 0818 00000000 		.quad	.L241
 2474      00000000 
 2475 0820 00000000 		.quad	.L242
 2475      00000000 
 2476 0828 00000000 		.quad	.L243
 2476      00000000 
 2477 0830 00000000 		.quad	.L244
 2477      00000000 
 2478 0838 00000000 		.quad	.L245
 2478      00000000 
 2479 0840 00000000 		.quad	.L246
 2479      00000000 
 2480 0848 00000000 		.quad	.L247
 2480      00000000 
 2481 0850 00000000 		.quad	.L220
 2481      00000000 
 2482 0858 00000000 		.quad	.L248
 2482      00000000 
 2483 0860 00000000 		.quad	.L249
 2483      00000000 
 2484 0868 00000000 		.quad	.L250
 2484      00000000 
 2485 0870 00000000 		.quad	.L251
 2485      00000000 
 2486 0878 00000000 		.quad	.L220
 2486      00000000 
 2487 0880 00000000 		.quad	.L220
 2487      00000000 
 2488 0888 00000000 		.quad	.L252
GAS LISTING /tmp/cc15eBE3.s 			page 79


 2488      00000000 
 2489              		.text
 2490              	.L221:
 2491              	.LBB33:
1027:src/vm.c      **** 		{
1028:src/vm.c      **** 			case 0x0: { // 000000 => Register encoding.
1029:src/vm.c      **** 				uint8_t shamt = (instr >> 6) & 0x1F;
 2492              		.loc 1 1029 0
 2493 0f16 4489E8   		movl	%r13d, %eax
1030:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 2494              		.loc 1 1030 0
 2495 0f19 4183E53F 		andl	$63, %r13d
 2496              	.LVL477:
1029:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 2497              		.loc 1 1029 0
 2498 0f1d C1E806   		shrl	$6, %eax
 2499              	.LVL478:
 2500 0f20 83E01F   		andl	$31, %eax
1031:src/vm.c      **** 			  
1032:src/vm.c      **** 				switch (funct) {
 2501              		.loc 1 1032 0
 2502 0f23 4180FD2B 		cmpb	$43, %r13b
1029:src/vm.c      **** 				uint8_t funct = (instr >> 0) & 0x3F;
 2503              		.loc 1 1029 0
 2504 0f27 8844241C 		movb	%al, 28(%rsp)
 2505              	.LVL479:
 2506              		.loc 1 1032 0
 2507 0f2b 0F87D50C 		ja	.L290
 2507      0000
 2508 0f31 450FB6ED 		movzbl	%r13b, %r13d
 2509 0f35 42FF24ED 		jmp	*.L255(,%r13,8)
 2509      00000000 
 2510              		.section	.rodata
 2511              		.align 8
 2512              		.align 4
 2513              	.L255:
 2514 0890 00000000 		.quad	.L254
 2514      00000000 
 2515 0898 00000000 		.quad	.L290
 2515      00000000 
 2516 08a0 00000000 		.quad	.L256
 2516      00000000 
 2517 08a8 00000000 		.quad	.L257
 2517      00000000 
 2518 08b0 00000000 		.quad	.L258
 2518      00000000 
 2519 08b8 00000000 		.quad	.L290
 2519      00000000 
 2520 08c0 00000000 		.quad	.L259
 2520      00000000 
 2521 08c8 00000000 		.quad	.L260
 2521      00000000 
 2522 08d0 00000000 		.quad	.L261
 2522      00000000 
 2523 08d8 00000000 		.quad	.L262
 2523      00000000 
 2524 08e0 00000000 		.quad	.L263
GAS LISTING /tmp/cc15eBE3.s 			page 80


 2524      00000000 
 2525 08e8 00000000 		.quad	.L264
 2525      00000000 
 2526 08f0 00000000 		.quad	.L265
 2526      00000000 
 2527 08f8 00000000 		.quad	.L290
 2527      00000000 
 2528 0900 00000000 		.quad	.L290
 2528      00000000 
 2529 0908 00000000 		.quad	.L290
 2529      00000000 
 2530 0910 00000000 		.quad	.L266
 2530      00000000 
 2531 0918 00000000 		.quad	.L267
 2531      00000000 
 2532 0920 00000000 		.quad	.L268
 2532      00000000 
 2533 0928 00000000 		.quad	.L269
 2533      00000000 
 2534 0930 00000000 		.quad	.L290
 2534      00000000 
 2535 0938 00000000 		.quad	.L290
 2535      00000000 
 2536 0940 00000000 		.quad	.L290
 2536      00000000 
 2537 0948 00000000 		.quad	.L290
 2537      00000000 
 2538 0950 00000000 		.quad	.L270
 2538      00000000 
 2539 0958 00000000 		.quad	.L271
 2539      00000000 
 2540 0960 00000000 		.quad	.L272
 2540      00000000 
 2541 0968 00000000 		.quad	.L273
 2541      00000000 
 2542 0970 00000000 		.quad	.L290
 2542      00000000 
 2543 0978 00000000 		.quad	.L290
 2543      00000000 
 2544 0980 00000000 		.quad	.L290
 2544      00000000 
 2545 0988 00000000 		.quad	.L290
 2545      00000000 
 2546 0990 00000000 		.quad	.L274
 2546      00000000 
 2547 0998 00000000 		.quad	.L275
 2547      00000000 
 2548 09a0 00000000 		.quad	.L276
 2548      00000000 
 2549 09a8 00000000 		.quad	.L277
 2549      00000000 
 2550 09b0 00000000 		.quad	.L278
 2550      00000000 
 2551 09b8 00000000 		.quad	.L279
 2551      00000000 
 2552 09c0 00000000 		.quad	.L280
 2552      00000000 
GAS LISTING /tmp/cc15eBE3.s 			page 81


 2553 09c8 00000000 		.quad	.L281
 2553      00000000 
 2554 09d0 00000000 		.quad	.L290
 2554      00000000 
 2555 09d8 00000000 		.quad	.L290
 2555      00000000 
 2556 09e0 00000000 		.quad	.L282
 2556      00000000 
 2557 09e8 00000000 		.quad	.L283
 2557      00000000 
 2558              		.text
 2559              	.L264:
1033:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
1034:src/vm.c      **** 						//usage[0]++;
1035:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2560              		.loc 1 1035 0
 2561 0f3d 488D7C24 		leaq	40(%rsp), %rdi
 2561      28
 2562 0f42 89DE     		movl	%ebx, %esi
 2563 0f44 E8000000 		call	JOURNAL_new_entry
 2563      00
 2564              	.LVL480:
1036:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "movn\0");
 2565              		.loc 1 1036 0
 2566 0f49 BE000000 		movl	$.LC3, %esi
 2566      00
 2567 0f4e 4889C7   		movq	%rax, %rdi
 2568 0f51 E8000000 		call	JOURNAL_insert_text
 2568      00
 2569              	.LVL481:
1037:src/vm.c      **** 						if (RF[rt] != 0) RF[rd] = RF[rs];
 2570              		.loc 1 1037 0
 2571 0f56 4C89E0   		movq	%r12, %rax
 2572 0f59 4531E4   		xorl	%r12d, %r12d
 2573              	.LVL482:
 2574 0f5c 83E01F   		andl	$31, %eax
 2575 0f5f 833C8500 		cmpl	$0, RF(,%rax,4)
 2575      00000000 
 2576 0f67 0F849C0C 		je	.L253
 2576      0000
 2577 0f6d EB30     		jmp	.L314
 2578              	.LVL483:
 2579              	.L263:
1038:src/vm.c      **** 						break;
1039:src/vm.c      **** 					}
1040:src/vm.c      **** 					case 0b001010: { // movz	001010 				if(rt==0) rd = rs
1041:src/vm.c      **** 						//usage[1]++;
1042:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2580              		.loc 1 1042 0
 2581 0f6f 488D7C24 		leaq	40(%rsp), %rdi
 2581      28
 2582 0f74 89DE     		movl	%ebx, %esi
 2583 0f76 E8000000 		call	JOURNAL_new_entry
 2583      00
 2584              	.LVL484:
1043:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "movz\0");
 2585              		.loc 1 1043 0
GAS LISTING /tmp/cc15eBE3.s 			page 82


 2586 0f7b BE000000 		movl	$.LC4, %esi
 2586      00
 2587 0f80 4889C7   		movq	%rax, %rdi
 2588 0f83 E8000000 		call	JOURNAL_insert_text
 2588      00
 2589              	.LVL485:
1044:src/vm.c      **** 						if (RF[rt] == 0) RF[rd] = RF[rs];
 2590              		.loc 1 1044 0
 2591 0f88 4C89E0   		movq	%r12, %rax
 2592 0f8b 4531E4   		xorl	%r12d, %r12d
 2593              	.LVL486:
 2594 0f8e 83E01F   		andl	$31, %eax
 2595 0f91 833C8500 		cmpl	$0, RF(,%rax,4)
 2595      00000000 
 2596 0f99 0F856A0C 		jne	.L253
 2596      0000
 2597              	.L314:
 2598              		.loc 1 1044 0 is_stmt 0 discriminator 1
 2599 0f9f 83E51F   		andl	$31, %ebp
 2600              	.LVL487:
 2601 0fa2 4183E61F 		andl	$31, %r14d
 2602              	.LVL488:
 2603 0fa6 8B04AD00 		movl	RF(,%rbp,4), %eax
 2603      000000
 2604 0fad 428904B5 		movl	%eax, RF(,%r14,4)
 2604      00000000 
 2605 0fb5 E94F0C00 		jmp	.L253
 2605      00
 2606              	.LVL489:
 2607              	.L274:
1045:src/vm.c      **** 						break;
1046:src/vm.c      **** 					}
1047:src/vm.c      **** 					case 0b100000: { // add		100000	ArithLog	$d = $s + $t
1048:src/vm.c      **** 						//usage[2]++;
1049:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2608              		.loc 1 1049 0 is_stmt 1
 2609 0fba 488D7C24 		leaq	40(%rsp), %rdi
 2609      28
 2610 0fbf 89DE     		movl	%ebx, %esi
 2611 0fc1 E8000000 		call	JOURNAL_new_entry
 2611      00
 2612              	.LVL490:
1050:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "add\0");
 2613              		.loc 1 1050 0
 2614 0fc6 BE000000 		movl	$.LC5, %esi
 2614      00
 2615 0fcb EB11     		jmp	.L323
 2616              	.LVL491:
 2617              	.L275:
1051:src/vm.c      **** 						RF[rd] = RF[rs] + RF[rt];
1052:src/vm.c      **** 						break;
1053:src/vm.c      **** 					}
1054:src/vm.c      **** 					case 0b100001: { // addu	100001	ArithLog	$d = $s + $t
1055:src/vm.c      **** 						//usage[3]++;
1056:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2618              		.loc 1 1056 0
 2619 0fcd 488D7C24 		leaq	40(%rsp), %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 83


 2619      28
 2620 0fd2 89DE     		movl	%ebx, %esi
 2621 0fd4 E8000000 		call	JOURNAL_new_entry
 2621      00
 2622              	.LVL492:
1057:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "addu\0");
 2623              		.loc 1 1057 0
 2624 0fd9 BE000000 		movl	$.LC6, %esi
 2624      00
 2625              	.L323:
 2626 0fde 4889C7   		movq	%rax, %rdi
1058:src/vm.c      **** 						RF[rd] = RF[rs] + RF[rt];
 2627              		.loc 1 1058 0
 2628 0fe1 4183E41F 		andl	$31, %r12d
 2629              	.LVL493:
 2630 0fe5 83E51F   		andl	$31, %ebp
 2631              	.LVL494:
1057:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "addu\0");
 2632              		.loc 1 1057 0
 2633 0fe8 E8000000 		call	JOURNAL_insert_text
 2633      00
 2634              	.LVL495:
 2635              		.loc 1 1058 0
 2636 0fed 4183E61F 		andl	$31, %r14d
 2637              	.LVL496:
 2638 0ff1 428B04A5 		movl	RF(,%r12,4), %eax
 2638      00000000 
 2639 0ff9 0304AD00 		addl	RF(,%rbp,4), %eax
 2639      000000
 2640 1000 EB33     		jmp	.L315
 2641              	.LVL497:
 2642              	.L278:
1059:src/vm.c      **** 						break;
1060:src/vm.c      **** 					}
1061:src/vm.c      **** 					case 0b100100: { // and		100100	ArithLog	$d = $s & $t
1062:src/vm.c      **** 						//usage[4]++;
1063:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2643              		.loc 1 1063 0
 2644 1002 488D7C24 		leaq	40(%rsp), %rdi
 2644      28
 2645 1007 89DE     		movl	%ebx, %esi
1064:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "and\0");
1065:src/vm.c      **** 						RF[rd] = RF[rs] & RF[rt];
 2646              		.loc 1 1065 0
 2647 1009 4183E41F 		andl	$31, %r12d
 2648              	.LVL498:
 2649 100d 83E51F   		andl	$31, %ebp
 2650              	.LVL499:
 2651 1010 4183E61F 		andl	$31, %r14d
 2652              	.LVL500:
1063:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "and\0");
 2653              		.loc 1 1063 0
 2654 1014 E8000000 		call	JOURNAL_new_entry
 2654      00
 2655              	.LVL501:
1064:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "and\0");
 2656              		.loc 1 1064 0
GAS LISTING /tmp/cc15eBE3.s 			page 84


 2657 1019 BE000000 		movl	$.LC7, %esi
 2657      00
 2658 101e 4889C7   		movq	%rax, %rdi
 2659 1021 E8000000 		call	JOURNAL_insert_text
 2659      00
 2660              	.LVL502:
 2661              		.loc 1 1065 0
 2662 1026 428B04A5 		movl	RF(,%r12,4), %eax
 2662      00000000 
 2663 102e 2304AD00 		andl	RF(,%rbp,4), %eax
 2663      000000
 2664              	.L315:
 2665 1035 428904B5 		movl	%eax, RF(,%r14,4)
 2665      00000000 
 2666 103d E9C40B00 		jmp	.L290
 2666      00
 2667              	.LVL503:
 2668              	.L272:
1066:src/vm.c      **** 						break;
1067:src/vm.c      **** 					}
1068:src/vm.c      **** 					case 0b011010: { // div		011010  DivMult		lo = $s / $t; hi = $s % $t
1069:src/vm.c      **** 						//usage[5]++;
1070:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2669              		.loc 1 1070 0
 2670 1042 488D7C24 		leaq	40(%rsp), %rdi
 2670      28
 2671 1047 89DE     		movl	%ebx, %esi
 2672 1049 E8000000 		call	JOURNAL_new_entry
 2672      00
 2673              	.LVL504:
1071:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "div\0");
 2674              		.loc 1 1071 0
 2675 104e BE000000 		movl	$.LC8, %esi
 2675      00
 2676 1053 EB11     		jmp	.L317
 2677              	.LVL505:
 2678              	.L273:
1072:src/vm.c      **** 						LO = RF[rs] / RF[rt];
1073:src/vm.c      **** 						HI = RF[rs] % RF[rt];
1074:src/vm.c      **** 						break;
1075:src/vm.c      **** 					}
1076:src/vm.c      **** 					case 0b011011: { // divu	011011  DivMult		lo = $s / $t; hi = $s % $t
1077:src/vm.c      **** 						//usage[6]++;
1078:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2679              		.loc 1 1078 0
 2680 1055 488D7C24 		leaq	40(%rsp), %rdi
 2680      28
 2681 105a 89DE     		movl	%ebx, %esi
 2682 105c E8000000 		call	JOURNAL_new_entry
 2682      00
 2683              	.LVL506:
1079:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "divu\0");
 2684              		.loc 1 1079 0
 2685 1061 BE000000 		movl	$.LC9, %esi
 2685      00
 2686              	.L317:
 2687 1066 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 85


1080:src/vm.c      **** 						LO = RF[rs] / RF[rt];
 2688              		.loc 1 1080 0
 2689 1069 83E51F   		andl	$31, %ebp
 2690              	.LVL507:
 2691 106c 4183E41F 		andl	$31, %r12d
 2692              	.LVL508:
1079:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "divu\0");
 2693              		.loc 1 1079 0
 2694 1070 E8000000 		call	JOURNAL_insert_text
 2694      00
 2695              	.LVL509:
 2696              		.loc 1 1080 0
 2697 1075 8B04AD00 		movl	RF(,%rbp,4), %eax
 2697      000000
 2698              	.LVL510:
1081:src/vm.c      **** 						HI = RF[rs] % RF[rt];  
 2699              		.loc 1 1081 0
 2700 107c 31D2     		xorl	%edx, %edx
 2701 107e 42F734A5 		divl	RF(,%r12,4)
 2701      00000000 
 2702              	.LVL511:
 2703 1086 891424   		movl	%edx, (%rsp)
 2704              	.LVL512:
 2705 1089 4189C7   		movl	%eax, %r15d
 2706 108c E9750B00 		jmp	.L290
 2706      00
 2707              	.LVL513:
 2708              	.L270:
 2709              	.LBB34:
1082:src/vm.c      **** 						break;
1083:src/vm.c      **** 					}
1084:src/vm.c      **** 					case 0b011000: { // mult	011000  DivMult		hi:lo = $s * $t
1085:src/vm.c      **** 						//usage[7]++;
1086:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2710              		.loc 1 1086 0
 2711 1091 488D7C24 		leaq	40(%rsp), %rdi
 2711      28
 2712 1096 89DE     		movl	%ebx, %esi
 2713 1098 E8000000 		call	JOURNAL_new_entry
 2713      00
 2714              	.LVL514:
1087:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mult\0");
 2715              		.loc 1 1087 0
 2716 109d BE000000 		movl	$.LC10, %esi
 2716      00
 2717 10a2 EB11     		jmp	.L319
 2718              	.LVL515:
 2719              	.L271:
 2720              	.LBE34:
 2721              	.LBB35:
1088:src/vm.c      **** 						uint64_t mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
1089:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
1090:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;
1091:src/vm.c      **** 						break;
1092:src/vm.c      **** 					}
1093:src/vm.c      **** 					case 0b011001: { // multu	011001	DivMult		hi:lo = $s * $t
1094:src/vm.c      **** 						//usage[8]++;
GAS LISTING /tmp/cc15eBE3.s 			page 86


1095:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2722              		.loc 1 1095 0
 2723 10a4 488D7C24 		leaq	40(%rsp), %rdi
 2723      28
 2724 10a9 89DE     		movl	%ebx, %esi
 2725 10ab E8000000 		call	JOURNAL_new_entry
 2725      00
 2726              	.LVL516:
1096:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "multu\0");
 2727              		.loc 1 1096 0
 2728 10b0 BE000000 		movl	$.LC11, %esi
 2728      00
 2729              	.L319:
 2730 10b5 4889C7   		movq	%rax, %rdi
1097:src/vm.c      **** 						uint64_t mult = (uint64_t)RF[rs] * (uint64_t) RF[rt];
 2731              		.loc 1 1097 0
 2732 10b8 4183E41F 		andl	$31, %r12d
 2733              	.LVL517:
 2734 10bc 83E51F   		andl	$31, %ebp
 2735              	.LVL518:
1096:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "multu\0");
 2736              		.loc 1 1096 0
 2737 10bf E8000000 		call	JOURNAL_insert_text
 2737      00
 2738              	.LVL519:
 2739              		.loc 1 1097 0
 2740 10c4 8B04AD00 		movl	RF(,%rbp,4), %eax
 2740      000000
 2741 10cb 468B3CA5 		movl	RF(,%r12,4), %r15d
 2741      00000000 
 2742              	.LVL520:
 2743 10d3 4C0FAFF8 		imulq	%rax, %r15
 2744              	.LVL521:
1098:src/vm.c      **** 						HI = (mult >> 32) & 0xFFFFFFFF;
 2745              		.loc 1 1098 0
 2746 10d7 4C89F8   		movq	%r15, %rax
 2747 10da 48C1E820 		shrq	$32, %rax
 2748 10de 48890424 		movq	%rax, (%rsp)
 2749              	.LVL522:
 2750 10e2 E91F0B00 		jmp	.L290
 2750      00
 2751              	.LVL523:
 2752              	.L281:
 2753              	.LBE35:
1099:src/vm.c      **** 						LO = mult & 0xFFFFFFFF;  
1100:src/vm.c      **** 						break;
1101:src/vm.c      **** 					}
1102:src/vm.c      **** 					case 0b100111: { // nor		100111	ArithLog	$d = ~($s | $t)
1103:src/vm.c      **** 						//usage[9]++;
1104:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2754              		.loc 1 1104 0
 2755 10e7 488D7C24 		leaq	40(%rsp), %rdi
 2755      28
 2756 10ec 89DE     		movl	%ebx, %esi
1105:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "nor\0");
1106:src/vm.c      **** 						RF[rd] = ~(RF[rs] | RF[rt]);
 2757              		.loc 1 1106 0
GAS LISTING /tmp/cc15eBE3.s 			page 87


 2758 10ee 4183E41F 		andl	$31, %r12d
 2759              	.LVL524:
 2760 10f2 83E51F   		andl	$31, %ebp
 2761              	.LVL525:
 2762 10f5 4183E61F 		andl	$31, %r14d
 2763              	.LVL526:
1104:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "nor\0");
 2764              		.loc 1 1104 0
 2765 10f9 E8000000 		call	JOURNAL_new_entry
 2765      00
 2766              	.LVL527:
1105:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "nor\0");
 2767              		.loc 1 1105 0
 2768 10fe BE000000 		movl	$.LC12, %esi
 2768      00
 2769 1103 4889C7   		movq	%rax, %rdi
 2770 1106 E8000000 		call	JOURNAL_insert_text
 2770      00
 2771              	.LVL528:
 2772              		.loc 1 1106 0
 2773 110b 428B04A5 		movl	RF(,%r12,4), %eax
 2773      00000000 
 2774 1113 0B04AD00 		orl	RF(,%rbp,4), %eax
 2774      000000
 2775 111a F7D0     		notl	%eax
 2776 111c E914FFFF 		jmp	.L315
 2776      FF
 2777              	.LVL529:
 2778              	.L279:
1107:src/vm.c      **** 						break;
1108:src/vm.c      **** 					}
1109:src/vm.c      **** 					case 0b100101: { // or		100101	ArithLog	$d = $s | $t
1110:src/vm.c      **** 						//usage[10]++;
1111:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2779              		.loc 1 1111 0
 2780 1121 488D7C24 		leaq	40(%rsp), %rdi
 2780      28
 2781 1126 89DE     		movl	%ebx, %esi
1112:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "or\0");
1113:src/vm.c      **** 						RF[rd] = RF[rs] | RF[rt];
 2782              		.loc 1 1113 0
 2783 1128 4183E41F 		andl	$31, %r12d
 2784              	.LVL530:
 2785 112c 83E51F   		andl	$31, %ebp
 2786              	.LVL531:
 2787 112f 4183E61F 		andl	$31, %r14d
 2788              	.LVL532:
1111:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "or\0");
 2789              		.loc 1 1111 0
 2790 1133 E8000000 		call	JOURNAL_new_entry
 2790      00
 2791              	.LVL533:
1112:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "or\0");
 2792              		.loc 1 1112 0
 2793 1138 BE000000 		movl	$.LC13, %esi
 2793      00
 2794 113d 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 88


 2795 1140 E8000000 		call	JOURNAL_insert_text
 2795      00
 2796              	.LVL534:
 2797              		.loc 1 1113 0
 2798 1145 428B04A5 		movl	RF(,%r12,4), %eax
 2798      00000000 
 2799 114d 0B04AD00 		orl	RF(,%rbp,4), %eax
 2799      000000
 2800 1154 E9DCFEFF 		jmp	.L315
 2800      FF
 2801              	.LVL535:
 2802              	.L254:
1114:src/vm.c      **** 						break;
1115:src/vm.c      **** 					}
1116:src/vm.c      **** 					case 0b000000: { // sll		000000	Shift		$d = $t << a
1117:src/vm.c      **** 						//usage[11]++;
1118:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2803              		.loc 1 1118 0
 2804 1159 488D7C24 		leaq	40(%rsp), %rdi
 2804      28
 2805 115e 89DE     		movl	%ebx, %esi
1119:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sll\0");
1120:src/vm.c      **** 						//j_entry = JOURNAL_new_entry(&dia, j_id);
1121:src/vm.c      **** 						//char * x[100];
1122:src/vm.c      **** 						//sprintf(x, " -PC: %d ; rd: %d ; rt : %d ; shamt : %d", PC, (int)rd, (int)rt, (int)shamt);
1123:src/vm.c      **** 						//JOURNAL_insert_text(j_entry, x);
1124:src/vm.c      **** 						RF[rd] = RF[rt] << shamt;
 2806              		.loc 1 1124 0
 2807 1160 4183E41F 		andl	$31, %r12d
 2808              	.LVL536:
 2809 1164 4183E61F 		andl	$31, %r14d
 2810              	.LVL537:
1118:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sll\0");
 2811              		.loc 1 1118 0
 2812 1168 E8000000 		call	JOURNAL_new_entry
 2812      00
 2813              	.LVL538:
1119:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sll\0");
 2814              		.loc 1 1119 0
 2815 116d BE000000 		movl	$.LC14, %esi
 2815      00
 2816 1172 4889C7   		movq	%rax, %rdi
 2817 1175 E8000000 		call	JOURNAL_insert_text
 2817      00
 2818              	.LVL539:
 2819              		.loc 1 1124 0
 2820 117a 428B04A5 		movl	RF(,%r12,4), %eax
 2820      00000000 
 2821 1182 8A4C241C 		movb	28(%rsp), %cl
 2822 1186 EB33     		jmp	.L322
 2823              	.LVL540:
 2824              	.L258:
1125:src/vm.c      **** 						break;
1126:src/vm.c      **** 					}
1127:src/vm.c      **** 					case 0b000100: { // sllv	000100	ShiftV		$d = $t << $s
1128:src/vm.c      **** 						//usage[12]++;
1129:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
GAS LISTING /tmp/cc15eBE3.s 			page 89


 2825              		.loc 1 1129 0
 2826 1188 488D7C24 		leaq	40(%rsp), %rdi
 2826      28
 2827 118d 89DE     		movl	%ebx, %esi
1130:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sllv\0");
1131:src/vm.c      **** 						RF[rd] = RF[rt] << RF[rs];
 2828              		.loc 1 1131 0
 2829 118f 4183E41F 		andl	$31, %r12d
 2830              	.LVL541:
 2831 1193 83E51F   		andl	$31, %ebp
 2832              	.LVL542:
 2833 1196 4183E61F 		andl	$31, %r14d
 2834              	.LVL543:
1129:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sllv\0");
 2835              		.loc 1 1129 0
 2836 119a E8000000 		call	JOURNAL_new_entry
 2836      00
 2837              	.LVL544:
1130:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sllv\0");
 2838              		.loc 1 1130 0
 2839 119f BE000000 		movl	$.LC15, %esi
 2839      00
 2840 11a4 4889C7   		movq	%rax, %rdi
 2841 11a7 E8000000 		call	JOURNAL_insert_text
 2841      00
 2842              	.LVL545:
 2843              		.loc 1 1131 0
 2844 11ac 8B0CAD00 		movl	RF(,%rbp,4), %ecx
 2844      000000
 2845 11b3 428B04A5 		movl	RF(,%r12,4), %eax
 2845      00000000 
 2846              	.L322:
 2847 11bb D3E0     		sall	%cl, %eax
 2848 11bd E973FEFF 		jmp	.L315
 2848      FF
 2849              	.LVL546:
 2850              	.L257:
1132:src/vm.c      **** 						break;
1133:src/vm.c      **** 					}
1134:src/vm.c      **** 					case 0b000011: { // sra		000011	Shift		$d = $t >> a 
1135:src/vm.c      **** 					    //usage[13]++;
1136:src/vm.c      **** 					    j_entry = JOURNAL_new_entry(&dia, j_id);
 2851              		.loc 1 1136 0
 2852 11c2 488D7C24 		leaq	40(%rsp), %rdi
 2852      28
 2853 11c7 89DE     		movl	%ebx, %esi
1137:src/vm.c      **** 					    JOURNAL_insert_text(j_entry, "sra\0");
1138:src/vm.c      **** 					    if ((int32_t)RF[rt] < 0 && shamt > 0)
 2854              		.loc 1 1138 0
 2855 11c9 4183E41F 		andl	$31, %r12d
 2856              	.LVL547:
 2857 11cd 450FB6F6 		movzbl	%r14b, %r14d
1136:src/vm.c      **** 					    JOURNAL_insert_text(j_entry, "sra\0");
 2858              		.loc 1 1136 0
 2859 11d1 E8000000 		call	JOURNAL_new_entry
 2859      00
 2860              	.LVL548:
GAS LISTING /tmp/cc15eBE3.s 			page 90


1137:src/vm.c      **** 					    JOURNAL_insert_text(j_entry, "sra\0");
 2861              		.loc 1 1137 0
 2862 11d6 BE000000 		movl	$.LC16, %esi
 2862      00
 2863 11db 4889C7   		movq	%rax, %rdi
 2864 11de E8000000 		call	JOURNAL_insert_text
 2864      00
 2865              	.LVL549:
 2866              		.loc 1 1138 0
 2867 11e3 428B14A5 		movl	RF(,%r12,4), %edx
 2867      00000000 
 2868 11eb 85D2     		testl	%edx, %edx
 2869 11ed 7919     		jns	.L284
 2870              		.loc 1 1138 0 is_stmt 0 discriminator 1
 2871 11ef 807C241C 		cmpb	$0, 28(%rsp)
 2871      00
 2872 11f4 7412     		je	.L284
1139:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] | ~(~0U >> shamt);
 2873              		.loc 1 1139 0 is_stmt 1
 2874 11f6 8A4C241C 		movb	28(%rsp), %cl
 2875 11fa 83C8FF   		orl	$-1, %eax
 2876 11fd D3E8     		shrl	%cl, %eax
 2877 11ff F7D0     		notl	%eax
 2878 1201 09D0     		orl	%edx, %eax
 2879 1203 E92DFEFF 		jmp	.L315
 2879      FF
 2880              	.L284:
1140:src/vm.c      **** 					    else
1141:src/vm.c      **** 					        RF[rd] = (int32_t)RF[rt] >> shamt;
 2881              		.loc 1 1141 0
 2882 1208 8A4C241C 		movb	28(%rsp), %cl
 2883 120c D3FA     		sarl	%cl, %edx
 2884 120e 428914B5 		movl	%edx, RF(,%r14,4)
 2884      00000000 
 2885 1216 E9EB0900 		jmp	.L290
 2885      00
 2886              	.LVL550:
 2887              	.L260:
1142:src/vm.c      **** 						break;
1143:src/vm.c      **** 					}
1144:src/vm.c      **** 					case 0b000111: { // srav	000111	ShiftV		$d = $t >> $s
1145:src/vm.c      **** 						//usage[14]++;
1146:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2888              		.loc 1 1146 0
 2889 121b 488D7C24 		leaq	40(%rsp), %rdi
 2889      28
 2890 1220 89DE     		movl	%ebx, %esi
 2891 1222 E8000000 		call	JOURNAL_new_entry
 2891      00
 2892              	.LVL551:
1147:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "srav\0");
 2893              		.loc 1 1147 0
 2894 1227 BE000000 		movl	$.LC17, %esi
 2894      00
 2895 122c EB45     		jmp	.L327
 2896              	.LVL552:
 2897              	.L256:
GAS LISTING /tmp/cc15eBE3.s 			page 91


1148:src/vm.c      **** 						RF[rd] = RF[rt] >> RF[rs];
1149:src/vm.c      **** 						break;
1150:src/vm.c      **** 					}
1151:src/vm.c      **** 					case 0b000010: { // srl		000010	Shift		$d = $t >>> a
1152:src/vm.c      **** 						//usage[15]++;
1153:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2898              		.loc 1 1153 0
 2899 122e 488D7C24 		leaq	40(%rsp), %rdi
 2899      28
 2900 1233 89DE     		movl	%ebx, %esi
1154:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "srl\0");
1155:src/vm.c      **** 						RF[rd] = RF[rt] >> shamt;
 2901              		.loc 1 1155 0
 2902 1235 4183E41F 		andl	$31, %r12d
 2903              	.LVL553:
 2904 1239 4183E61F 		andl	$31, %r14d
 2905              	.LVL554:
1153:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "srl\0");
 2906              		.loc 1 1153 0
 2907 123d E8000000 		call	JOURNAL_new_entry
 2907      00
 2908              	.LVL555:
1154:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "srl\0");
 2909              		.loc 1 1154 0
 2910 1242 BE000000 		movl	$.LC18, %esi
 2910      00
 2911 1247 4889C7   		movq	%rax, %rdi
 2912 124a E8000000 		call	JOURNAL_insert_text
 2912      00
 2913              	.LVL556:
 2914              		.loc 1 1155 0
 2915 124f 428B04A5 		movl	RF(,%r12,4), %eax
 2915      00000000 
 2916 1257 8A4C241C 		movb	28(%rsp), %cl
 2917              	.LVL557:
 2918              	.L324:
 2919 125b D3E8     		shrl	%cl, %eax
 2920 125d E9D3FDFF 		jmp	.L315
 2920      FF
 2921              	.LVL558:
 2922              	.L259:
1156:src/vm.c      **** 						break;
1157:src/vm.c      **** 					}
1158:src/vm.c      **** 					case 0b000110: { // srlv	000110	ShiftV		$d = $t >>> $s
1159:src/vm.c      **** 						//usage[16]++;
1160:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2923              		.loc 1 1160 0
 2924 1262 488D7C24 		leaq	40(%rsp), %rdi
 2924      28
 2925 1267 89DE     		movl	%ebx, %esi
 2926 1269 E8000000 		call	JOURNAL_new_entry
 2926      00
 2927              	.LVL559:
1161:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "srlv\0");
 2928              		.loc 1 1161 0
 2929 126e BE000000 		movl	$.LC19, %esi
 2929      00
GAS LISTING /tmp/cc15eBE3.s 			page 92


 2930              	.L327:
 2931 1273 4889C7   		movq	%rax, %rdi
1162:src/vm.c      **** 						RF[rd] = RF[rt] >> RF[rs];  
 2932              		.loc 1 1162 0
 2933 1276 4183E41F 		andl	$31, %r12d
 2934              	.LVL560:
 2935 127a 83E51F   		andl	$31, %ebp
 2936              	.LVL561:
1161:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "srlv\0");
 2937              		.loc 1 1161 0
 2938 127d E8000000 		call	JOURNAL_insert_text
 2938      00
 2939              	.LVL562:
 2940              		.loc 1 1162 0
 2941 1282 4183E61F 		andl	$31, %r14d
 2942              	.LVL563:
 2943 1286 8B0CAD00 		movl	RF(,%rbp,4), %ecx
 2943      000000
 2944 128d 428B04A5 		movl	RF(,%r12,4), %eax
 2944      00000000 
 2945 1295 EBC4     		jmp	.L324
 2946              	.LVL564:
 2947              	.L276:
1163:src/vm.c      **** 						break;
1164:src/vm.c      **** 					}
1165:src/vm.c      **** 					case 0b100010: { // sub		100010	ArithLog	$d = $s - $t
1166:src/vm.c      **** 						//usage[17]++;
1167:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2948              		.loc 1 1167 0
 2949 1297 488D7C24 		leaq	40(%rsp), %rdi
 2949      28
 2950 129c 89DE     		movl	%ebx, %esi
 2951 129e E8000000 		call	JOURNAL_new_entry
 2951      00
 2952              	.LVL565:
1168:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sub\0");
 2953              		.loc 1 1168 0
 2954 12a3 BE000000 		movl	$.LC20, %esi
 2954      00
 2955 12a8 EB11     		jmp	.L326
 2956              	.LVL566:
 2957              	.L277:
1169:src/vm.c      **** 						RF[rd] = RF[rs] - RF[rt];  
1170:src/vm.c      **** 						break;
1171:src/vm.c      **** 					}
1172:src/vm.c      **** 					case 0b100011: { // subu	100011	ArithLog	$d = $s - $t
1173:src/vm.c      **** 						//usage[18]++;
1174:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2958              		.loc 1 1174 0
 2959 12aa 488D7C24 		leaq	40(%rsp), %rdi
 2959      28
 2960 12af 89DE     		movl	%ebx, %esi
 2961 12b1 E8000000 		call	JOURNAL_new_entry
 2961      00
 2962              	.LVL567:
1175:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "subu\0");
 2963              		.loc 1 1175 0
GAS LISTING /tmp/cc15eBE3.s 			page 93


 2964 12b6 BE000000 		movl	$.LC21, %esi
 2964      00
 2965              	.L326:
 2966 12bb 4889C7   		movq	%rax, %rdi
1176:src/vm.c      **** 						RF[rd] = RF[rs] - RF[rt];    
 2967              		.loc 1 1176 0
 2968 12be 83E51F   		andl	$31, %ebp
 2969              	.LVL568:
 2970 12c1 4183E41F 		andl	$31, %r12d
 2971              	.LVL569:
1175:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "subu\0");
 2972              		.loc 1 1175 0
 2973 12c5 E8000000 		call	JOURNAL_insert_text
 2973      00
 2974              	.LVL570:
 2975              		.loc 1 1176 0
 2976 12ca 4183E61F 		andl	$31, %r14d
 2977              	.LVL571:
 2978 12ce 8B04AD00 		movl	RF(,%rbp,4), %eax
 2978      000000
 2979 12d5 422B04A5 		subl	RF(,%r12,4), %eax
 2979      00000000 
 2980 12dd E953FDFF 		jmp	.L315
 2980      FF
 2981              	.LVL572:
 2982              	.L280:
1177:src/vm.c      **** 						break;
1178:src/vm.c      **** 					}
1179:src/vm.c      **** 					case 0b100110: { // xor		100110  ArithLog	$d = $s ^ $t
1180:src/vm.c      **** 						//usage[19]++;
1181:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 2983              		.loc 1 1181 0
 2984 12e2 488D7C24 		leaq	40(%rsp), %rdi
 2984      28
 2985 12e7 89DE     		movl	%ebx, %esi
1182:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "xor\0");
1183:src/vm.c      **** 						RF[rd] = RF[rs] ^ RF[rt];
 2986              		.loc 1 1183 0
 2987 12e9 4183E41F 		andl	$31, %r12d
 2988              	.LVL573:
 2989 12ed 83E51F   		andl	$31, %ebp
 2990              	.LVL574:
 2991 12f0 4183E61F 		andl	$31, %r14d
 2992              	.LVL575:
1181:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "xor\0");
 2993              		.loc 1 1181 0
 2994 12f4 E8000000 		call	JOURNAL_new_entry
 2994      00
 2995              	.LVL576:
1182:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "xor\0");
 2996              		.loc 1 1182 0
 2997 12f9 BE000000 		movl	$.LC22, %esi
 2997      00
 2998 12fe 4889C7   		movq	%rax, %rdi
 2999 1301 E8000000 		call	JOURNAL_insert_text
 2999      00
 3000              	.LVL577:
GAS LISTING /tmp/cc15eBE3.s 			page 94


 3001              		.loc 1 1183 0
 3002 1306 428B04A5 		movl	RF(,%r12,4), %eax
 3002      00000000 
 3003 130e 3304AD00 		xorl	RF(,%rbp,4), %eax
 3003      000000
 3004 1315 E91BFDFF 		jmp	.L315
 3004      FF
 3005              	.LVL578:
 3006              	.L282:
1184:src/vm.c      **** 						break;
1185:src/vm.c      **** 					}
1186:src/vm.c      **** 					case 0b101010: { // slt		101010	ArithLog	$d = ($s < $t)
1187:src/vm.c      **** 						//usage[20]++;
1188:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3007              		.loc 1 1188 0
 3008 131a 488D7C24 		leaq	40(%rsp), %rdi
 3008      28
 3009 131f 89DE     		movl	%ebx, %esi
 3010 1321 E8000000 		call	JOURNAL_new_entry
 3010      00
 3011              	.LVL579:
1189:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "slt\0");
 3012              		.loc 1 1189 0
 3013 1326 BE000000 		movl	$.LC23, %esi
 3013      00
 3014 132b EB11     		jmp	.L325
 3015              	.LVL580:
 3016              	.L283:
1190:src/vm.c      **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
1191:src/vm.c      **** 						break;
1192:src/vm.c      **** 					}
1193:src/vm.c      **** 					case 0b101011: { // sltu	101011	ArithLog	$d = ($s < $t)
1194:src/vm.c      **** 						//usage[21]++;
1195:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3017              		.loc 1 1195 0
 3018 132d 488D7C24 		leaq	40(%rsp), %rdi
 3018      28
 3019 1332 89DE     		movl	%ebx, %esi
 3020 1334 E8000000 		call	JOURNAL_new_entry
 3020      00
 3021              	.LVL581:
1196:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sltu\0");
 3022              		.loc 1 1196 0
 3023 1339 BE000000 		movl	$.LC24, %esi
 3023      00
 3024              	.L325:
 3025 133e 4889C7   		movq	%rax, %rdi
1197:src/vm.c      **** 						RF[rd] = (RF[rs] < RF[rt])?1:0;
 3026              		.loc 1 1197 0
 3027 1341 4183E41F 		andl	$31, %r12d
 3028              	.LVL582:
 3029 1345 83E51F   		andl	$31, %ebp
 3030              	.LVL583:
1196:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "sltu\0");
 3031              		.loc 1 1196 0
 3032 1348 E8000000 		call	JOURNAL_insert_text
 3032      00
GAS LISTING /tmp/cc15eBE3.s 			page 95


 3033              	.LVL584:
 3034              		.loc 1 1197 0
 3035 134d 4183E61F 		andl	$31, %r14d
 3036              	.LVL585:
 3037 1351 428B04A5 		movl	RF(,%r12,4), %eax
 3037      00000000 
 3038 1359 3904AD00 		cmpl	%eax, RF(,%rbp,4)
 3038      000000
 3039 1360 0F92C0   		setb	%al
 3040 1363 0FB6C0   		movzbl	%al, %eax
 3041 1366 E9CAFCFF 		jmp	.L315
 3041      FF
 3042              	.LVL586:
 3043              	.L262:
1198:src/vm.c      **** 						break;
1199:src/vm.c      **** 					}
1200:src/vm.c      **** 					case 0b001001: { // jalr	001001	JumpR		$31 = pc; pc = $s
1201:src/vm.c      **** 						//usage[22]++;
1202:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3044              		.loc 1 1202 0
 3045 136b 488D7C24 		leaq	40(%rsp), %rdi
 3045      28
 3046 1370 89DE     		movl	%ebx, %esi
 3047 1372 E8000000 		call	JOURNAL_new_entry
 3047      00
 3048              	.LVL587:
1203:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "jumpr1\0");
 3049              		.loc 1 1203 0
 3050 1377 BE000000 		movl	$.LC25, %esi
 3050      00
 3051 137c 4889C7   		movq	%rax, %rdi
 3052 137f E8000000 		call	JOURNAL_insert_text
 3052      00
 3053              	.LVL588:
1204:src/vm.c      **** 						RF[31] = PC+8;
 3054              		.loc 1 1204 0
 3055 1384 8B050000 		movl	PC(%rip), %eax
 3055      0000
 3056 138a 83C008   		addl	$8, %eax
 3057 138d 89050000 		movl	%eax, RF+124(%rip)
 3057      0000
 3058 1393 EB19     		jmp	.L313
 3059              	.LVL589:
 3060              	.L261:
1205:src/vm.c      **** 						PC = nPC;
1206:src/vm.c      **** 						nPC = RF[rs];
1207:src/vm.c      **** 						continue;
1208:src/vm.c      **** 					}
1209:src/vm.c      **** 					case 0b001000: { // jr		001000	JumpR		pc = $s
1210:src/vm.c      **** 						//usage[23]++;
1211:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3061              		.loc 1 1211 0
 3062 1395 488D7C24 		leaq	40(%rsp), %rdi
 3062      28
 3063 139a 89DE     		movl	%ebx, %esi
 3064 139c E8000000 		call	JOURNAL_new_entry
 3064      00
GAS LISTING /tmp/cc15eBE3.s 			page 96


 3065              	.LVL590:
1212:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "jumpr2\0");
 3066              		.loc 1 1212 0
 3067 13a1 BE000000 		movl	$.LC26, %esi
 3067      00
 3068 13a6 4889C7   		movq	%rax, %rdi
 3069 13a9 E8000000 		call	JOURNAL_insert_text
 3069      00
 3070              	.LVL591:
 3071              	.L313:
1213:src/vm.c      **** 						PC = nPC;
 3072              		.loc 1 1213 0
 3073 13ae 8B050000 		movl	nPC(%rip), %eax
 3073      0000
1214:src/vm.c      **** 						nPC = RF[rs];
 3074              		.loc 1 1214 0
 3075 13b4 83E51F   		andl	$31, %ebp
 3076              	.LVL592:
1213:src/vm.c      **** 						PC = nPC;
 3077              		.loc 1 1213 0
 3078 13b7 89050000 		movl	%eax, PC(%rip)
 3078      0000
 3079              		.loc 1 1214 0
 3080 13bd 8B04AD00 		movl	RF(,%rbp,4), %eax
 3080      000000
 3081 13c4 E9BC0600 		jmp	.L310
 3081      00
 3082              	.LVL593:
 3083              	.L266:
1215:src/vm.c      **** 						continue;
1216:src/vm.c      **** 					}
1217:src/vm.c      **** 					case 0b010000: { // mfhi	010000	MoveFrom	$d = hi
1218:src/vm.c      **** 						//usage[24]++;
1219:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3084              		.loc 1 1219 0
 3085 13c9 488D7C24 		leaq	40(%rsp), %rdi
 3085      28
 3086 13ce 89DE     		movl	%ebx, %esi
1220:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mhfi\0");
1221:src/vm.c      **** 						RF[rd] = HI;
 3087              		.loc 1 1221 0
 3088 13d0 4183E61F 		andl	$31, %r14d
 3089              	.LVL594:
1219:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mhfi\0");
 3090              		.loc 1 1219 0
 3091 13d4 E8000000 		call	JOURNAL_new_entry
 3091      00
 3092              	.LVL595:
1220:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mhfi\0");
 3093              		.loc 1 1220 0
 3094 13d9 BE000000 		movl	$.LC27, %esi
 3094      00
 3095 13de 4889C7   		movq	%rax, %rdi
 3096 13e1 E8000000 		call	JOURNAL_insert_text
 3096      00
 3097              	.LVL596:
 3098              		.loc 1 1221 0
GAS LISTING /tmp/cc15eBE3.s 			page 97


 3099 13e6 8B0424   		movl	(%rsp), %eax
 3100 13e9 E947FCFF 		jmp	.L315
 3100      FF
 3101              	.LVL597:
 3102              	.L268:
1222:src/vm.c      **** 						break;
1223:src/vm.c      **** 					}
1224:src/vm.c      **** 					case 0b010010: { // mflo	010010	MoveFrom	$d = lo
1225:src/vm.c      **** 						//usage[25]++;
1226:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3103              		.loc 1 1226 0
 3104 13ee 488D7C24 		leaq	40(%rsp), %rdi
 3104      28
 3105 13f3 89DE     		movl	%ebx, %esi
1227:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mflo\0");
1228:src/vm.c      **** 						RF[rd] = LO;
 3106              		.loc 1 1228 0
 3107 13f5 4183E61F 		andl	$31, %r14d
 3108              	.LVL598:
1226:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mflo\0");
 3109              		.loc 1 1226 0
 3110 13f9 E8000000 		call	JOURNAL_new_entry
 3110      00
 3111              	.LVL599:
1227:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mflo\0");
 3112              		.loc 1 1227 0
 3113 13fe BE000000 		movl	$.LC28, %esi
 3113      00
 3114 1403 4889C7   		movq	%rax, %rdi
 3115 1406 E8000000 		call	JOURNAL_insert_text
 3115      00
 3116              	.LVL600:
 3117              		.loc 1 1228 0
 3118 140b 46893CB5 		movl	%r15d, RF(,%r14,4)
 3118      00000000 
 3119 1413 E9EE0700 		jmp	.L290
 3119      00
 3120              	.LVL601:
 3121              	.L267:
1229:src/vm.c      **** 						break;
1230:src/vm.c      **** 					}
1231:src/vm.c      **** 					case 0b010001: { // mthi	010001	MoveTo		hi = $s
1232:src/vm.c      **** 						//usage[26]++;
1233:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3122              		.loc 1 1233 0
 3123 1418 488D7C24 		leaq	40(%rsp), %rdi
 3123      28
 3124 141d 89DE     		movl	%ebx, %esi
1234:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mthi\0");
1235:src/vm.c      **** 						HI = RF[rs];
 3125              		.loc 1 1235 0
 3126 141f 83E51F   		andl	$31, %ebp
 3127              	.LVL602:
1233:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mthi\0");
 3128              		.loc 1 1233 0
 3129 1422 E8000000 		call	JOURNAL_new_entry
 3129      00
GAS LISTING /tmp/cc15eBE3.s 			page 98


 3130              	.LVL603:
1234:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mthi\0");
 3131              		.loc 1 1234 0
 3132 1427 BE000000 		movl	$.LC29, %esi
 3132      00
 3133 142c 4889C7   		movq	%rax, %rdi
 3134 142f E8000000 		call	JOURNAL_insert_text
 3134      00
 3135              	.LVL604:
 3136              		.loc 1 1235 0
 3137 1434 8B04AD00 		movl	RF(,%rbp,4), %eax
 3137      000000
 3138 143b 890424   		movl	%eax, (%rsp)
 3139              	.LVL605:
 3140 143e E9C30700 		jmp	.L290
 3140      00
 3141              	.LVL606:
 3142              	.L269:
1236:src/vm.c      **** 						break;
1237:src/vm.c      **** 					}
1238:src/vm.c      **** 					case 0b010011: { // mtlo	010011	MoveTo		lo = $s
1239:src/vm.c      **** 						//usage[27]++;
1240:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3143              		.loc 1 1240 0
 3144 1443 488D7C24 		leaq	40(%rsp), %rdi
 3144      28
 3145 1448 89DE     		movl	%ebx, %esi
1241:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mtlo\0");
1242:src/vm.c      **** 						LO = RF[rs];
 3146              		.loc 1 1242 0
 3147 144a 83E51F   		andl	$31, %ebp
 3148              	.LVL607:
1240:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mtlo\0");
 3149              		.loc 1 1240 0
 3150 144d E8000000 		call	JOURNAL_new_entry
 3150      00
 3151              	.LVL608:
1241:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "mtlo\0");
 3152              		.loc 1 1241 0
 3153 1452 BE000000 		movl	$.LC30, %esi
 3153      00
 3154 1457 4889C7   		movq	%rax, %rdi
 3155 145a E8000000 		call	JOURNAL_insert_text
 3155      00
 3156              	.LVL609:
 3157              		.loc 1 1242 0
 3158 145f 448B3CAD 		movl	RF(,%rbp,4), %r15d
 3158      00000000 
 3159              	.LVL610:
 3160 1467 E99A0700 		jmp	.L290
 3160      00
 3161              	.LVL611:
 3162              	.L265:
1243:src/vm.c      **** 						break;
1244:src/vm.c      **** 					}
1245:src/vm.c      **** 					case 0b001100: { // syscall 	001100	syscall		$2		seen on the .s generated by the ecc compiler
1246:src/vm.c      **** 						//usage[28]++;
GAS LISTING /tmp/cc15eBE3.s 			page 99


1247:src/vm.c      **** 						j_entry = JOURNAL_new_entry(&dia, j_id);
 3163              		.loc 1 1247 0
 3164 146c 488D7C24 		leaq	40(%rsp), %rdi
 3164      28
 3165 1471 89DE     		movl	%ebx, %esi
 3166 1473 E8000000 		call	JOURNAL_new_entry
 3166      00
 3167              	.LVL612:
1248:src/vm.c      **** 						JOURNAL_insert_text(j_entry, "syscall\0");
 3168              		.loc 1 1248 0
 3169 1478 BE000000 		movl	$.LC31, %esi
 3169      00
 3170 147d 4889C7   		movq	%rax, %rdi
 3171 1480 E8000000 		call	JOURNAL_insert_text
 3171      00
 3172              	.LVL613:
 3173 1485 0FB63D00 		movzbl	RF+8(%rip), %edi
 3173      000000
1249:src/vm.c      **** 						if (syscall((uint8_t)RF[2])) //registers $4 and $5 useb by hallcall (sensid and retval respec
 3174              		.loc 1 1249 0
 3175 148c E8000000 		call	syscall
 3175      00
 3176              	.LVL614:
 3177 1491 84C0     		testb	%al, %al
 3178 1493 410F95C4 		setne	%r12b
 3179              	.LVL615:
 3180 1497 E96D0700 		jmp	.L253
 3180      00
 3181              	.LVL616:
 3182              	.L230:
 3183              	.LBE33:
1250:src/vm.c      **** 						{
1251:src/vm.c      **** 							halted = 1; //Syscall returned 1, exit code
1252:src/vm.c      **** 						}
1253:src/vm.c      **** 						break; 
1254:src/vm.c      **** 					}	
1255:src/vm.c      **** 					default:
1256:src/vm.c      **** 					{
1257:src/vm.c      **** 					}
1258:src/vm.c      **** 					break;
1259:src/vm.c      **** 				}      
1260:src/vm.c      **** 				break; // case 0x0
1261:src/vm.c      **** 			}
1262:src/vm.c      **** 			
1263:src/vm.c      **** 			//Immediate encoding
1264:src/vm.c      **** 			case 0b001000: { //addi    001000  ArithLogI       $t = $s + SE(i)
1265:src/vm.c      **** 				//usage[29]++;
1266:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3184              		.loc 1 1266 0
 3185 149c 488D7C24 		leaq	40(%rsp), %rdi
 3185      28
 3186 14a1 89DE     		movl	%ebx, %esi
 3187 14a3 E8000000 		call	JOURNAL_new_entry
 3187      00
 3188              	.LVL617:
1267:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "addi\0");
 3189              		.loc 1 1267 0
GAS LISTING /tmp/cc15eBE3.s 			page 100


 3190 14a8 BE000000 		movl	$.LC32, %esi
 3190      00
 3191 14ad EB11     		jmp	.L329
 3192              	.LVL618:
 3193              	.L231:
1268:src/vm.c      **** 				RF[rt] = RF[rs] + immediate; //Implementar trap!
1269:src/vm.c      **** 				break;
1270:src/vm.c      **** 			}
1271:src/vm.c      **** 			case 0b001001: { //addiu   001001  ArithLogI       $t = $s + SE(i)
1272:src/vm.c      **** 				//usage[30]++;
1273:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3194              		.loc 1 1273 0
 3195 14af 488D7C24 		leaq	40(%rsp), %rdi
 3195      28
 3196 14b4 89DE     		movl	%ebx, %esi
 3197 14b6 E8000000 		call	JOURNAL_new_entry
 3197      00
 3198              	.LVL619:
1274:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "addiu\0");
 3199              		.loc 1 1274 0
 3200 14bb BE000000 		movl	$.LC33, %esi
 3200      00
 3201              	.L329:
 3202 14c0 4889C7   		movq	%rax, %rdi
1275:src/vm.c      **** 				RF[rt] = (RF[rs] + immediate);
 3203              		.loc 1 1275 0
 3204 14c3 83E51F   		andl	$31, %ebp
 3205              	.LVL620:
 3206 14c6 450FBFED 		movswl	%r13w, %r13d
 3207              	.LVL621:
1274:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "addiu\0");
 3208              		.loc 1 1274 0
 3209 14ca E8000000 		call	JOURNAL_insert_text
 3209      00
 3210              	.LVL622:
 3211              		.loc 1 1275 0
 3212 14cf 4183E41F 		andl	$31, %r12d
 3213              	.LVL623:
 3214 14d3 44032CAD 		addl	RF(,%rbp,4), %r13d
 3214      00000000 
 3215 14db E9F20000 		jmp	.L318
 3215      00
 3216              	.LVL624:
 3217              	.L234:
1276:src/vm.c      **** 				break;
1277:src/vm.c      **** 			}
1278:src/vm.c      **** 			case 0b001100: { //andi    001100  ArithLogI       $t = $s & ZE(i)
1279:src/vm.c      **** 				//usage[31]++;
1280:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3218              		.loc 1 1280 0
 3219 14e0 488D7C24 		leaq	40(%rsp), %rdi
 3219      28
 3220 14e5 89DE     		movl	%ebx, %esi
1281:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "andi\0");
1282:src/vm.c      **** 				RF[rt] = RF[rs] & (uint32_t)immediate;
 3221              		.loc 1 1282 0
 3222 14e7 83E51F   		andl	$31, %ebp
GAS LISTING /tmp/cc15eBE3.s 			page 101


 3223              	.LVL625:
 3224 14ea 450FBFED 		movswl	%r13w, %r13d
 3225              	.LVL626:
 3226 14ee 4183E41F 		andl	$31, %r12d
 3227              	.LVL627:
1280:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "andi\0");
 3228              		.loc 1 1280 0
 3229 14f2 E8000000 		call	JOURNAL_new_entry
 3229      00
 3230              	.LVL628:
1281:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "andi\0");
 3231              		.loc 1 1281 0
 3232 14f7 BE000000 		movl	$.LC34, %esi
 3232      00
 3233 14fc 4889C7   		movq	%rax, %rdi
 3234 14ff E8000000 		call	JOURNAL_insert_text
 3234      00
 3235              	.LVL629:
 3236              		.loc 1 1282 0
 3237 1504 44232CAD 		andl	RF(,%rbp,4), %r13d
 3237      00000000 
 3238 150c E9C10000 		jmp	.L318
 3238      00
 3239              	.LVL630:
 3240              	.L235:
1283:src/vm.c      **** 				break;
1284:src/vm.c      **** 			}
1285:src/vm.c      **** 			case 0b001101: { //ori     001101  ArithLogI       $t = $s | ZE(i)
1286:src/vm.c      **** 				//usage[32]++;
1287:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3241              		.loc 1 1287 0
 3242 1511 488D7C24 		leaq	40(%rsp), %rdi
 3242      28
 3243 1516 89DE     		movl	%ebx, %esi
1288:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "ori\0");
1289:src/vm.c      **** 				RF[rt] = RF[rs] | (uint32_t)immediate;
 3244              		.loc 1 1289 0
 3245 1518 83E51F   		andl	$31, %ebp
 3246              	.LVL631:
 3247 151b 450FBFED 		movswl	%r13w, %r13d
 3248              	.LVL632:
 3249 151f 4183E41F 		andl	$31, %r12d
 3250              	.LVL633:
1287:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "ori\0");
 3251              		.loc 1 1287 0
 3252 1523 E8000000 		call	JOURNAL_new_entry
 3252      00
 3253              	.LVL634:
1288:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "ori\0");
 3254              		.loc 1 1288 0
 3255 1528 BE000000 		movl	$.LC35, %esi
 3255      00
 3256 152d 4889C7   		movq	%rax, %rdi
 3257 1530 E8000000 		call	JOURNAL_insert_text
 3257      00
 3258              	.LVL635:
 3259              		.loc 1 1289 0
GAS LISTING /tmp/cc15eBE3.s 			page 102


 3260 1535 440B2CAD 		orl	RF(,%rbp,4), %r13d
 3260      00000000 
 3261 153d E9900000 		jmp	.L318
 3261      00
 3262              	.LVL636:
 3263              	.L236:
1290:src/vm.c      **** 				break;
1291:src/vm.c      **** 			}
1292:src/vm.c      **** 			case 0b001110: { //xori    001110  ArithLogI       $d = $s ^ ZE(i)
1293:src/vm.c      **** 				//usage[33]++;
1294:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3264              		.loc 1 1294 0
 3265 1542 488D7C24 		leaq	40(%rsp), %rdi
 3265      28
 3266 1547 89DE     		movl	%ebx, %esi
1295:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "xori\0");
1296:src/vm.c      **** 				RF[rd] = RF[rs] ^ (uint32_t)immediate;
 3267              		.loc 1 1296 0
 3268 1549 83E51F   		andl	$31, %ebp
 3269              	.LVL637:
 3270 154c 450FBFED 		movswl	%r13w, %r13d
 3271              	.LVL638:
 3272 1550 4183E61F 		andl	$31, %r14d
 3273              	.LVL639:
1294:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "xori\0");
 3274              		.loc 1 1294 0
 3275 1554 E8000000 		call	JOURNAL_new_entry
 3275      00
 3276              	.LVL640:
1295:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "xori\0");
 3277              		.loc 1 1295 0
 3278 1559 BE000000 		movl	$.LC36, %esi
 3278      00
 3279 155e 4889C7   		movq	%rax, %rdi
 3280 1561 E8000000 		call	JOURNAL_insert_text
 3280      00
 3281              	.LVL641:
 3282              		.loc 1 1296 0
 3283 1566 44332CAD 		xorl	RF(,%rbp,4), %r13d
 3283      00000000 
 3284 156e 46892CB5 		movl	%r13d, RF(,%r14,4)
 3284      00000000 
 3285 1576 E98B0600 		jmp	.L290
 3285      00
 3286              	.LVL642:
 3287              	.L237:
1297:src/vm.c      **** 				break;
1298:src/vm.c      **** 			}
1299:src/vm.c      **** 			case 0b001111: 	 //lui	   001111          Rdest, imm: Load Upper Immediate
1300:src/vm.c      **** 				//usage[34]++;
1301:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3288              		.loc 1 1301 0
 3289 157b 488D7C24 		leaq	40(%rsp), %rdi
 3289      28
 3290 1580 89DE     		movl	%ebx, %esi
 3291 1582 E8000000 		call	JOURNAL_new_entry
 3291      00
GAS LISTING /tmp/cc15eBE3.s 			page 103


 3292              	.LVL643:
1302:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lui\0");
 3293              		.loc 1 1302 0
 3294 1587 BE000000 		movl	$.LC37, %esi
 3294      00
 3295 158c EB11     		jmp	.L328
 3296              	.LVL644:
 3297              	.L239:
1303:src/vm.c      **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
1304:src/vm.c      **** 				break;
1305:src/vm.c      **** 			case 0b011001: { //lhi     011001  LoadI   HH ($t) = i 
1306:src/vm.c      **** 				//usage[35]++;
1307:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3298              		.loc 1 1307 0
 3299 158e 488D7C24 		leaq	40(%rsp), %rdi
 3299      28
 3300 1593 89DE     		movl	%ebx, %esi
 3301 1595 E8000000 		call	JOURNAL_new_entry
 3301      00
 3302              	.LVL645:
1308:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lhi\0");
 3303              		.loc 1 1308 0
 3304 159a BE000000 		movl	$.LC38, %esi
 3304      00
 3305              	.L328:
 3306 159f 4889C7   		movq	%rax, %rdi
1309:src/vm.c      **** 			  	RF[rt] = ((uint32_t)immediate) << 16;
 3307              		.loc 1 1309 0
 3308 15a2 4183E41F 		andl	$31, %r12d
 3309              	.LVL646:
 3310 15a6 41C1E510 		sall	$16, %r13d
 3311              	.LVL647:
1308:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lhi\0");
 3312              		.loc 1 1308 0
 3313 15aa E8000000 		call	JOURNAL_insert_text
 3313      00
 3314              	.LVL648:
 3315 15af EB21     		jmp	.L318
 3316              	.LVL649:
 3317              	.L238:
1310:src/vm.c      **** 				break;
1311:src/vm.c      **** 			}
1312:src/vm.c      **** 			case 0b011000: { //llo     011000  LoadI   LH ($t) = i
1313:src/vm.c      **** 				//usage[36]++;
1314:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3318              		.loc 1 1314 0
 3319 15b1 488D7C24 		leaq	40(%rsp), %rdi
 3319      28
 3320 15b6 89DE     		movl	%ebx, %esi
1315:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "llo\0");
1316:src/vm.c      **** 			  	RF[rt] = immediate;
 3321              		.loc 1 1316 0
 3322 15b8 4183E41F 		andl	$31, %r12d
 3323              	.LVL650:
 3324 15bc 450FBFED 		movswl	%r13w, %r13d
 3325              	.LVL651:
1314:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "llo\0");
GAS LISTING /tmp/cc15eBE3.s 			page 104


 3326              		.loc 1 1314 0
 3327 15c0 E8000000 		call	JOURNAL_new_entry
 3327      00
 3328              	.LVL652:
1315:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "llo\0");
 3329              		.loc 1 1315 0
 3330 15c5 BE000000 		movl	$.LC39, %esi
 3330      00
 3331 15ca 4889C7   		movq	%rax, %rdi
 3332 15cd E8000000 		call	JOURNAL_insert_text
 3332      00
 3333              	.LVL653:
 3334              	.L318:
 3335              		.loc 1 1316 0
 3336 15d2 46892CA5 		movl	%r13d, RF(,%r12,4)
 3336      00000000 
 3337 15da E9270600 		jmp	.L290
 3337      00
 3338              	.LVL654:
 3339              	.L232:
1317:src/vm.c      **** 				break;
1318:src/vm.c      **** 			}
1319:src/vm.c      **** 			case 0b001010: { //slti    001010  ArithLogI       $t = ($s < SE(i))
1320:src/vm.c      **** 				//usage[37]++;
1321:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3340              		.loc 1 1321 0
 3341 15df 488D7C24 		leaq	40(%rsp), %rdi
 3341      28
 3342 15e4 89DE     		movl	%ebx, %esi
 3343 15e6 E8000000 		call	JOURNAL_new_entry
 3343      00
 3344              	.LVL655:
1322:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "slti\0");
 3345              		.loc 1 1322 0
 3346 15eb BE000000 		movl	$.LC40, %esi
 3346      00
 3347 15f0 EB11     		jmp	.L330
 3348              	.LVL656:
 3349              	.L233:
1323:src/vm.c      **** 			  	RF[rt] = (RF[rs] < immediate)?1:0;
1324:src/vm.c      **** 				break;
1325:src/vm.c      **** 			}
1326:src/vm.c      **** 			case 0b001011: { //sltiu   001011  ArithLogI       $t = ($s < SE(i)) 
1327:src/vm.c      **** 				//usage[38]++;
1328:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3350              		.loc 1 1328 0
 3351 15f2 488D7C24 		leaq	40(%rsp), %rdi
 3351      28
 3352 15f7 89DE     		movl	%ebx, %esi
 3353 15f9 E8000000 		call	JOURNAL_new_entry
 3353      00
 3354              	.LVL657:
1329:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sltiu\0");
 3355              		.loc 1 1329 0
 3356 15fe BE000000 		movl	$.LC41, %esi
 3356      00
 3357              	.L330:
GAS LISTING /tmp/cc15eBE3.s 			page 105


 3358 1603 4889C7   		movq	%rax, %rdi
1330:src/vm.c      **** 				RF[rt] = (RF[rs] < immediate)?1:0;
 3359              		.loc 1 1330 0
 3360 1606 83E51F   		andl	$31, %ebp
 3361              	.LVL658:
 3362 1609 4183E41F 		andl	$31, %r12d
 3363              	.LVL659:
1329:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sltiu\0");
 3364              		.loc 1 1329 0
 3365 160d E8000000 		call	JOURNAL_insert_text
 3365      00
 3366              	.LVL660:
 3367              		.loc 1 1330 0
 3368 1612 450FBFED 		movswl	%r13w, %r13d
 3369              	.LVL661:
 3370 1616 31C0     		xorl	%eax, %eax
 3371 1618 44392CAD 		cmpl	%r13d, RF(,%rbp,4)
 3371      00000000 
 3372 1620 0F92C0   		setb	%al
 3373 1623 E9BB0500 		jmp	.L316
 3373      00
 3374              	.LVL662:
 3375              	.L223:
1331:src/vm.c      **** 				break;
1332:src/vm.c      **** 			}
1333:src/vm.c      **** 			case 0b000001: {
1334:src/vm.c      **** 				if (RF[rt] == 0b00001) //bgez Rsrc, offset: Branch on Greater Than Equal Zero
 3376              		.loc 1 1334 0
 3377 1628 4183E41F 		andl	$31, %r12d
 3378              	.LVL663:
 3379 162c 428B04A5 		movl	RF(,%r12,4), %eax
 3379      00000000 
 3380 1634 83F801   		cmpl	$1, %eax
 3381 1637 7532     		jne	.L286
1335:src/vm.c      **** 				{
1336:src/vm.c      **** 					//usage[39]++;
1337:src/vm.c      **** 					j_entry = JOURNAL_new_entry(&dia, j_id);
 3382              		.loc 1 1337 0
 3383 1639 488D7C24 		leaq	40(%rsp), %rdi
 3383      28
 3384 163e 89DE     		movl	%ebx, %esi
1338:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bgez\0");
1339:src/vm.c      **** 					if ((int32_t)RF[rs] >= 0)
 3385              		.loc 1 1339 0
 3386 1640 83E51F   		andl	$31, %ebp
 3387              	.LVL664:
 3388 1643 4531E4   		xorl	%r12d, %r12d
1337:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bgez\0");
 3389              		.loc 1 1337 0
 3390 1646 E8000000 		call	JOURNAL_new_entry
 3390      00
 3391              	.LVL665:
1338:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bgez\0");
 3392              		.loc 1 1338 0
 3393 164b BE000000 		movl	$.LC42, %esi
 3393      00
 3394 1650 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc15eBE3.s 			page 106


 3395 1653 E8000000 		call	JOURNAL_insert_text
 3395      00
 3396              	.LVL666:
 3397              		.loc 1 1339 0
 3398 1658 833CAD00 		cmpl	$0, RF(,%rbp,4)
 3398      00000000 
 3399 1660 0F898C01 		jns	.L311
 3399      0000
 3400 1666 E99E0500 		jmp	.L253
 3400      00
 3401              	.LVL667:
 3402              	.L286:
1340:src/vm.c      **** 					{
1341:src/vm.c      **** 						advance_pc(immediate << 2);
1342:src/vm.c      **** 						continue;
1343:src/vm.c      **** 					}
1344:src/vm.c      **** 					else
1345:src/vm.c      **** 					{
1346:src/vm.c      **** 						break;
1347:src/vm.c      **** 					}
1348:src/vm.c      **** 				}
1349:src/vm.c      **** 				else if (RF[rt] == 0b10001) //bgezal Rsrc, offset: Branch on Greater Than Equal Zero And Link
 3403              		.loc 1 1349 0
 3404 166b 83F811   		cmpl	$17, %eax
 3405 166e 752E     		jne	.L287
1350:src/vm.c      **** 				{
1351:src/vm.c      **** 					//usage[40]++;
1352:src/vm.c      **** 					j_entry = JOURNAL_new_entry(&dia, j_id);
 3406              		.loc 1 1352 0
 3407 1670 488D7C24 		leaq	40(%rsp), %rdi
 3407      28
 3408 1675 89DE     		movl	%ebx, %esi
1353:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bgezal\0");
1354:src/vm.c      **** 					if ((int32_t)RF[rs] >= 0)
 3409              		.loc 1 1354 0
 3410 1677 83E51F   		andl	$31, %ebp
 3411              	.LVL668:
 3412 167a 4531E4   		xorl	%r12d, %r12d
1352:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bgezal\0");
 3413              		.loc 1 1352 0
 3414 167d E8000000 		call	JOURNAL_new_entry
 3414      00
 3415              	.LVL669:
1353:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bgezal\0");
 3416              		.loc 1 1353 0
 3417 1682 BE000000 		movl	$.LC43, %esi
 3417      00
 3418 1687 4889C7   		movq	%rax, %rdi
 3419 168a E8000000 		call	JOURNAL_insert_text
 3419      00
 3420              	.LVL670:
 3421              		.loc 1 1354 0
 3422 168f 833CAD00 		cmpl	$0, RF(,%rbp,4)
 3422      00000000 
 3423 1697 7971     		jns	.L312
 3424 1699 E96B0500 		jmp	.L253
 3424      00
GAS LISTING /tmp/cc15eBE3.s 			page 107


 3425              	.LVL671:
 3426              	.L287:
1355:src/vm.c      **** 					{
1356:src/vm.c      **** 						RF[31] = PC + 8;
1357:src/vm.c      **** 						advance_pc(immediate << 2);
1358:src/vm.c      **** 						continue;
1359:src/vm.c      **** 					}
1360:src/vm.c      **** 					else
1361:src/vm.c      **** 					{
1362:src/vm.c      **** 						break;
1363:src/vm.c      **** 					}
1364:src/vm.c      **** 				}
1365:src/vm.c      **** 				else if (RF[rt] == 0b00000) //bltz Rsrc, offset: Branch on Less Than Zero
 3427              		.loc 1 1365 0
 3428 169e 85C0     		testl	%eax, %eax
 3429 16a0 7532     		jne	.L288
1366:src/vm.c      **** 				{
1367:src/vm.c      **** 					//usage[41]++;
1368:src/vm.c      **** 					j_entry = JOURNAL_new_entry(&dia, j_id);
 3430              		.loc 1 1368 0
 3431 16a2 488D7C24 		leaq	40(%rsp), %rdi
 3431      28
 3432 16a7 89DE     		movl	%ebx, %esi
1369:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bltz\0");
1370:src/vm.c      **** 					if ((int32_t)RF[rs] < 0)
 3433              		.loc 1 1370 0
 3434 16a9 83E51F   		andl	$31, %ebp
 3435              	.LVL672:
 3436 16ac 4531E4   		xorl	%r12d, %r12d
1368:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bltz\0");
 3437              		.loc 1 1368 0
 3438 16af E8000000 		call	JOURNAL_new_entry
 3438      00
 3439              	.LVL673:
1369:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bltz\0");
 3440              		.loc 1 1369 0
 3441 16b4 BE000000 		movl	$.LC44, %esi
 3441      00
 3442 16b9 4889C7   		movq	%rax, %rdi
 3443 16bc E8000000 		call	JOURNAL_insert_text
 3443      00
 3444              	.LVL674:
 3445              		.loc 1 1370 0
 3446 16c1 833CAD00 		cmpl	$0, RF(,%rbp,4)
 3446      00000000 
 3447 16c9 0F893A05 		jns	.L253
 3447      0000
 3448 16cf E91E0100 		jmp	.L311
 3448      00
 3449              	.LVL675:
 3450              	.L288:
 3451 16d4 4531E4   		xorl	%r12d, %r12d
1371:src/vm.c      **** 					{
1372:src/vm.c      **** 						advance_pc(immediate << 2);
1373:src/vm.c      **** 						continue;
1374:src/vm.c      **** 					}
1375:src/vm.c      **** 					else
GAS LISTING /tmp/cc15eBE3.s 			page 108


1376:src/vm.c      **** 					{
1377:src/vm.c      **** 						break;
1378:src/vm.c      **** 					}
1379:src/vm.c      **** 				}
1380:src/vm.c      **** 				else if (RF[rt] == 0b10000) //bltzal Rsrc, offset: Branch on Less Than And Link
 3452              		.loc 1 1380 0
 3453 16d7 83F810   		cmpl	$16, %eax
 3454 16da 0F852905 		jne	.L253
 3454      0000
1381:src/vm.c      **** 				{
1382:src/vm.c      **** 					//usage[42]++;
1383:src/vm.c      **** 					j_entry = JOURNAL_new_entry(&dia, j_id);
 3455              		.loc 1 1383 0
 3456 16e0 488D7C24 		leaq	40(%rsp), %rdi
 3456      28
 3457 16e5 89DE     		movl	%ebx, %esi
1384:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bltzal\0");
1385:src/vm.c      **** 					if ((int32_t)RF[rs] < 0)
 3458              		.loc 1 1385 0
 3459 16e7 83E51F   		andl	$31, %ebp
 3460              	.LVL676:
1383:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bltzal\0");
 3461              		.loc 1 1383 0
 3462 16ea E8000000 		call	JOURNAL_new_entry
 3462      00
 3463              	.LVL677:
1384:src/vm.c      **** 					JOURNAL_insert_text(j_entry, "bltzal\0");
 3464              		.loc 1 1384 0
 3465 16ef BE000000 		movl	$.LC45, %esi
 3465      00
 3466 16f4 4889C7   		movq	%rax, %rdi
 3467 16f7 E8000000 		call	JOURNAL_insert_text
 3467      00
 3468              	.LVL678:
 3469              		.loc 1 1385 0
 3470 16fc 833CAD00 		cmpl	$0, RF(,%rbp,4)
 3470      00000000 
 3471 1704 0F89FF04 		jns	.L253
 3471      0000
 3472              	.L312:
1386:src/vm.c      **** 					{
1387:src/vm.c      **** 						RF[31] = PC + 8;
 3473              		.loc 1 1387 0
 3474 170a 8B050000 		movl	PC(%rip), %eax
 3474      0000
 3475 1710 83C008   		addl	$8, %eax
 3476 1713 89050000 		movl	%eax, RF+124(%rip)
 3476      0000
 3477 1719 E9D40000 		jmp	.L311
 3477      00
 3478              	.LVL679:
 3479              	.L226:
1388:src/vm.c      **** 						advance_pc(immediate << 2);
1389:src/vm.c      **** 						continue;
1390:src/vm.c      **** 					}
1391:src/vm.c      **** 					else
1392:src/vm.c      **** 					{
GAS LISTING /tmp/cc15eBE3.s 			page 109


1393:src/vm.c      **** 						break;
1394:src/vm.c      **** 					}
1395:src/vm.c      **** 				}
1396:src/vm.c      **** 				break;
1397:src/vm.c      **** 			}
1398:src/vm.c      **** 			case 0b000100: { //beq     000100  Branch  if ($s == $t) pc += i << 2
1399:src/vm.c      **** 				//usage[43]++;
1400:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3480              		.loc 1 1400 0
 3481 171e 488D7C24 		leaq	40(%rsp), %rdi
 3481      28
 3482 1723 89DE     		movl	%ebx, %esi
1401:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "beq\0");
1402:src/vm.c      **** 				if (RF[rs] == RF[rt])
 3483              		.loc 1 1402 0
 3484 1725 83E51F   		andl	$31, %ebp
 3485              	.LVL680:
1400:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "beq\0");
 3486              		.loc 1 1400 0
 3487 1728 E8000000 		call	JOURNAL_new_entry
 3487      00
 3488              	.LVL681:
1401:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "beq\0");
 3489              		.loc 1 1401 0
 3490 172d BE000000 		movl	$.LC46, %esi
 3490      00
 3491 1732 4889C7   		movq	%rax, %rdi
 3492 1735 E8000000 		call	JOURNAL_insert_text
 3492      00
 3493              	.LVL682:
 3494              		.loc 1 1402 0
 3495 173a 4C89E0   		movq	%r12, %rax
 3496 173d 4531E4   		xorl	%r12d, %r12d
 3497              	.LVL683:
 3498 1740 83E01F   		andl	$31, %eax
 3499 1743 8B048500 		movl	RF(,%rax,4), %eax
 3499      000000
 3500 174a 3904AD00 		cmpl	%eax, RF(,%rbp,4)
 3500      000000
 3501 1751 0F85B204 		jne	.L253
 3501      0000
 3502 1757 E9960000 		jmp	.L311
 3502      00
 3503              	.LVL684:
 3504              	.L229:
1403:src/vm.c      **** 				{
1404:src/vm.c      **** 					advance_pc(immediate << 2);
1405:src/vm.c      **** 					continue;
1406:src/vm.c      **** 				}
1407:src/vm.c      **** 				else
1408:src/vm.c      **** 				{
1409:src/vm.c      **** 					break;
1410:src/vm.c      **** 				}
1411:src/vm.c      **** 				break;
1412:src/vm.c      **** 			}
1413:src/vm.c      **** 			case 0b000111: { //bgtz    000111  BranchZ if ($s > 0) pc += i << 2
1414:src/vm.c      **** 				//usage[44]++;
GAS LISTING /tmp/cc15eBE3.s 			page 110


1415:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3505              		.loc 1 1415 0
 3506 175c 488D7C24 		leaq	40(%rsp), %rdi
 3506      28
 3507 1761 89DE     		movl	%ebx, %esi
1416:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "bgtz\0");
1417:src/vm.c      **** 				if ((int32_t)RF[rs] > 0)
 3508              		.loc 1 1417 0
 3509 1763 83E51F   		andl	$31, %ebp
 3510              	.LVL685:
 3511 1766 4531E4   		xorl	%r12d, %r12d
 3512              	.LVL686:
1415:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "bgtz\0");
 3513              		.loc 1 1415 0
 3514 1769 E8000000 		call	JOURNAL_new_entry
 3514      00
 3515              	.LVL687:
1416:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "bgtz\0");
 3516              		.loc 1 1416 0
 3517 176e BE000000 		movl	$.LC47, %esi
 3517      00
 3518 1773 4889C7   		movq	%rax, %rdi
 3519 1776 E8000000 		call	JOURNAL_insert_text
 3519      00
 3520              	.LVL688:
 3521              		.loc 1 1417 0
 3522 177b 833CAD00 		cmpl	$0, RF(,%rbp,4)
 3522      00000000 
 3523 1783 7F6D     		jg	.L311
 3524 1785 E97F0400 		jmp	.L253
 3524      00
 3525              	.LVL689:
 3526              	.L228:
1418:src/vm.c      **** 				{
1419:src/vm.c      **** 					advance_pc(immediate << 2);
1420:src/vm.c      **** 					continue;
1421:src/vm.c      **** 				}
1422:src/vm.c      **** 				else
1423:src/vm.c      **** 				{
1424:src/vm.c      **** 					break;
1425:src/vm.c      **** 				}
1426:src/vm.c      **** 				break;
1427:src/vm.c      **** 			}
1428:src/vm.c      **** 			case 0b000110: { //blez    000110  BranchZ if ($s <= 0) pc += i << 2
1429:src/vm.c      **** 				//usage[45]++;
1430:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3527              		.loc 1 1430 0
 3528 178a 488D7C24 		leaq	40(%rsp), %rdi
 3528      28
 3529 178f 89DE     		movl	%ebx, %esi
1431:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "blez\0");
1432:src/vm.c      **** 				if ((int32_t)RF[rs] <= 0)
 3530              		.loc 1 1432 0
 3531 1791 83E51F   		andl	$31, %ebp
 3532              	.LVL690:
 3533 1794 4531E4   		xorl	%r12d, %r12d
 3534              	.LVL691:
GAS LISTING /tmp/cc15eBE3.s 			page 111


1430:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "blez\0");
 3535              		.loc 1 1430 0
 3536 1797 E8000000 		call	JOURNAL_new_entry
 3536      00
 3537              	.LVL692:
1431:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "blez\0");
 3538              		.loc 1 1431 0
 3539 179c BE000000 		movl	$.LC48, %esi
 3539      00
 3540 17a1 4889C7   		movq	%rax, %rdi
 3541 17a4 E8000000 		call	JOURNAL_insert_text
 3541      00
 3542              	.LVL693:
 3543              		.loc 1 1432 0
 3544 17a9 833CAD00 		cmpl	$0, RF(,%rbp,4)
 3544      00000000 
 3545 17b1 0F8F5204 		jg	.L253
 3545      0000
 3546 17b7 EB39     		jmp	.L311
 3547              	.LVL694:
 3548              	.L227:
1433:src/vm.c      **** 				{
1434:src/vm.c      **** 					advance_pc(immediate << 2);
1435:src/vm.c      **** 					continue;
1436:src/vm.c      **** 				}
1437:src/vm.c      **** 				else
1438:src/vm.c      **** 				{
1439:src/vm.c      **** 					break;
1440:src/vm.c      **** 				}
1441:src/vm.c      **** 				break;
1442:src/vm.c      **** 			}
1443:src/vm.c      **** 			case 0b000101: { //bne     000101  Branch  if ($s != $t) pc += i << 2
1444:src/vm.c      **** 				//usage[46]++;
1445:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3549              		.loc 1 1445 0
 3550 17b9 488D7C24 		leaq	40(%rsp), %rdi
 3550      28
 3551 17be 89DE     		movl	%ebx, %esi
1446:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "bne\0");
1447:src/vm.c      **** 				if (RF[rs] != RF[rt])
 3552              		.loc 1 1447 0
 3553 17c0 83E51F   		andl	$31, %ebp
 3554              	.LVL695:
1445:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "bne\0");
 3555              		.loc 1 1445 0
 3556 17c3 E8000000 		call	JOURNAL_new_entry
 3556      00
 3557              	.LVL696:
1446:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "bne\0");
 3558              		.loc 1 1446 0
 3559 17c8 BE000000 		movl	$.LC49, %esi
 3559      00
 3560 17cd 4889C7   		movq	%rax, %rdi
 3561 17d0 E8000000 		call	JOURNAL_insert_text
 3561      00
 3562              	.LVL697:
 3563              		.loc 1 1447 0
GAS LISTING /tmp/cc15eBE3.s 			page 112


 3564 17d5 4C89E0   		movq	%r12, %rax
 3565 17d8 4531E4   		xorl	%r12d, %r12d
 3566              	.LVL698:
 3567 17db 83E01F   		andl	$31, %eax
 3568 17de 8B048500 		movl	RF(,%rax,4), %eax
 3568      000000
 3569 17e5 3904AD00 		cmpl	%eax, RF(,%rbp,4)
 3569      000000
 3570 17ec 0F841704 		je	.L253
 3570      0000
 3571              	.L311:
1448:src/vm.c      **** 				{
1449:src/vm.c      **** 					advance_pc(immediate << 2);
 3572              		.loc 1 1449 0
 3573 17f2 450FBFED 		movswl	%r13w, %r13d
 3574              	.LVL699:
 3575 17f6 428D3CAD 		leal	0(,%r13,4), %edi
 3575      00000000 
 3576 17fe E8000000 		call	advance_pc
 3576      00
 3577              	.LVL700:
1450:src/vm.c      **** 					continue;
 3578              		.loc 1 1450 0
 3579 1803 E9C3F6FF 		jmp	.L219
 3579      FF
 3580              	.LVL701:
 3581              	.L241:
1451:src/vm.c      **** 				}
1452:src/vm.c      **** 				else
1453:src/vm.c      **** 				{
1454:src/vm.c      **** 					break;
1455:src/vm.c      **** 				}
1456:src/vm.c      **** 				break;
1457:src/vm.c      **** 			}
1458:src/vm.c      **** 			case 0b100000: { //lb      100000  LoadStore       $t = SE (MEM [$s + i]:1)
1459:src/vm.c      **** 				//usage[47]++;
1460:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3582              		.loc 1 1460 0
 3583 1808 488D7C24 		leaq	40(%rsp), %rdi
 3583      28
 3584 180d 89DE     		movl	%ebx, %esi
1461:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lb\0");
1462:src/vm.c      **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]& 0x7F)  | (uint32_t)(VM_memory[RF[rs] + imm
 3585              		.loc 1 1462 0
 3586 180f 83E51F   		andl	$31, %ebp
 3587              	.LVL702:
 3588 1812 450FBFED 		movswl	%r13w, %r13d
 3589              	.LVL703:
 3590 1816 4183E41F 		andl	$31, %r12d
 3591              	.LVL704:
1460:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lb\0");
 3592              		.loc 1 1460 0
 3593 181a E8000000 		call	JOURNAL_new_entry
 3593      00
 3594              	.LVL705:
1461:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lb\0");
 3595              		.loc 1 1461 0
GAS LISTING /tmp/cc15eBE3.s 			page 113


 3596 181f BE000000 		movl	$.LC50, %esi
 3596      00
 3597 1824 4889C7   		movq	%rax, %rdi
 3598 1827 E8000000 		call	JOURNAL_insert_text
 3598      00
 3599              	.LVL706:
 3600              		.loc 1 1462 0
 3601 182c 44032CAD 		addl	RF(,%rbp,4), %r13d
 3601      00000000 
 3602 1834 418A9500 		movb	VM_memory(%r13), %dl
 3602      000000
 3603 183b 88D0     		movb	%dl, %al
 3604 183d 83E27F   		andl	$127, %edx
 3605 1840 83E080   		andl	$-128, %eax
 3606 1843 0FB6C0   		movzbl	%al, %eax
 3607 1846 C1E018   		sall	$24, %eax
 3608 1849 E9930300 		jmp	.L320
 3608      00
 3609              	.LVL707:
 3610              	.L245:
1463:src/vm.c      **** 				break;
1464:src/vm.c      **** 			}
1465:src/vm.c      **** 			case 0b100100: { //lbu     100100  LoadStore       $t = ZE (MEM [$s + i]:1)
1466:src/vm.c      **** 				//usage[48]++;
1467:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3611              		.loc 1 1467 0
 3612 184e 488D7C24 		leaq	40(%rsp), %rdi
 3612      28
 3613 1853 89DE     		movl	%ebx, %esi
1468:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lbu\0");
1469:src/vm.c      **** 			  	RF[rt] = ((uint32_t)VM_memory[RF[rs] + immediate]) & 0xFF;
 3614              		.loc 1 1469 0
 3615 1855 83E51F   		andl	$31, %ebp
 3616              	.LVL708:
 3617 1858 450FBFED 		movswl	%r13w, %r13d
 3618              	.LVL709:
 3619 185c 4183E41F 		andl	$31, %r12d
 3620              	.LVL710:
1467:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lbu\0");
 3621              		.loc 1 1467 0
 3622 1860 E8000000 		call	JOURNAL_new_entry
 3622      00
 3623              	.LVL711:
1468:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lbu\0");
 3624              		.loc 1 1468 0
 3625 1865 BE000000 		movl	$.LC51, %esi
 3625      00
 3626 186a 4889C7   		movq	%rax, %rdi
 3627 186d E8000000 		call	JOURNAL_insert_text
 3627      00
 3628              	.LVL712:
 3629              		.loc 1 1469 0
 3630 1872 44032CAD 		addl	RF(,%rbp,4), %r13d
 3630      00000000 
 3631 187a 410FB685 		movzbl	VM_memory(%r13), %eax
 3631      00000000 
 3632 1882 E95C0300 		jmp	.L316
GAS LISTING /tmp/cc15eBE3.s 			page 114


 3632      00
 3633              	.LVL713:
 3634              	.L242:
1470:src/vm.c      **** 				break;
1471:src/vm.c      **** 			}
1472:src/vm.c      **** 			case 0b100001: { //lh      100001  LoadStore       $t = SE (MEM [$s + i]:2)
1473:src/vm.c      **** 				//usage[49]++;
1474:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3635              		.loc 1 1474 0
 3636 1887 488D7C24 		leaq	40(%rsp), %rdi
 3636      28
 3637 188c 89DE     		movl	%ebx, %esi
 3638 188e E8000000 		call	JOURNAL_new_entry
 3638      00
 3639              	.LVL714:
1475:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lh\0");
 3640              		.loc 1 1475 0
 3641 1893 BE000000 		movl	$.LC52, %esi
 3641      00
 3642 1898 EB11     		jmp	.L331
 3643              	.LVL715:
 3644              	.L246:
1476:src/vm.c      **** 			  	RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<< 16) | ((uint32_t)VM_memory[RF[rs] + i
1477:src/vm.c      **** 				break;
1478:src/vm.c      **** 			}
1479:src/vm.c      **** 			case 0b100101: { //lhu     100101  LoadStore       $t = ZE (MEM [$s + i]:2)
1480:src/vm.c      **** 				//usage[50]++;
1481:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3645              		.loc 1 1481 0
 3646 189a 488D7C24 		leaq	40(%rsp), %rdi
 3646      28
 3647 189f 89DE     		movl	%ebx, %esi
 3648 18a1 E8000000 		call	JOURNAL_new_entry
 3648      00
 3649              	.LVL716:
1482:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lhu\0");
 3650              		.loc 1 1482 0
 3651 18a6 BE000000 		movl	$.LC53, %esi
 3651      00
 3652              	.L331:
 3653 18ab 4889C7   		movq	%rax, %rdi
1483:src/vm.c      **** 				RF[rt] = ((((uint32_t)(VM_memory[RF[rs] + immediate])<<16) | ((uint32_t)VM_memory[RF[rs] + imme
 3654              		.loc 1 1483 0
 3655 18ae 83E51F   		andl	$31, %ebp
 3656              	.LVL717:
 3657 18b1 450FBFED 		movswl	%r13w, %r13d
 3658              	.LVL718:
1482:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lhu\0");
 3659              		.loc 1 1482 0
 3660 18b5 E8000000 		call	JOURNAL_insert_text
 3660      00
 3661              	.LVL719:
 3662              		.loc 1 1483 0
 3663 18ba 44032CAD 		addl	RF(,%rbp,4), %r13d
 3663      00000000 
 3664 18c2 4183E41F 		andl	$31, %r12d
 3665              	.LVL720:
GAS LISTING /tmp/cc15eBE3.s 			page 115


 3666 18c6 418D4501 		leal	1(%r13), %eax
 3667 18ca 0FB68000 		movzbl	VM_memory(%rax), %eax
 3667      000000
 3668 18d1 E90D0300 		jmp	.L316
 3668      00
 3669              	.LVL721:
 3670              	.L244:
1484:src/vm.c      **** 				break;
1485:src/vm.c      **** 			}
1486:src/vm.c      **** 			case 0b100011: { //lw      100011  LoadStore       $t = MEM [$s + i]:4
1487:src/vm.c      **** 				//usage[51]++;
1488:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3671              		.loc 1 1488 0
 3672 18d6 488D7C24 		leaq	40(%rsp), %rdi
 3672      28
 3673 18db 89DE     		movl	%ebx, %esi
1489:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lw\0");
1490:src/vm.c      **** 			  	RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + i
 3674              		.loc 1 1490 0
 3675 18dd 83E51F   		andl	$31, %ebp
 3676              	.LVL722:
 3677 18e0 450FBFED 		movswl	%r13w, %r13d
 3678              	.LVL723:
 3679 18e4 4183E41F 		andl	$31, %r12d
 3680              	.LVL724:
1488:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lw\0");
 3681              		.loc 1 1488 0
 3682 18e8 E8000000 		call	JOURNAL_new_entry
 3682      00
 3683              	.LVL725:
1489:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lw\0");
 3684              		.loc 1 1489 0
 3685 18ed BE000000 		movl	$.LC54, %esi
 3685      00
 3686 18f2 4889C7   		movq	%rax, %rdi
 3687 18f5 E8000000 		call	JOURNAL_insert_text
 3687      00
 3688              	.LVL726:
 3689              		.loc 1 1490 0
 3690 18fa 44032CAD 		addl	RF(,%rbp,4), %r13d
 3690      00000000 
 3691 1902 418D4503 		leal	3(%r13), %eax
 3692 1906 4489EA   		movl	%r13d, %edx
 3693 1909 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3693      000000
 3694 1910 0FB68000 		movzbl	VM_memory(%rax), %eax
 3694      000000
 3695 1917 C1E218   		sall	$24, %edx
 3696 191a 09D0     		orl	%edx, %eax
 3697 191c 418D5501 		leal	1(%r13), %edx
 3698 1920 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3698      000000
 3699 1927 C1E210   		sall	$16, %edx
 3700 192a 09D0     		orl	%edx, %eax
 3701 192c 418D5502 		leal	2(%r13), %edx
 3702 1930 0FB69200 		movzbl	VM_memory(%rdx), %edx
 3702      000000
GAS LISTING /tmp/cc15eBE3.s 			page 116


 3703 1937 C1E208   		sall	$8, %edx
 3704 193a E9A20200 		jmp	.L320
 3704      00
 3705              	.LVL727:
 3706              	.L248:
1491:src/vm.c      **** 				break;
1492:src/vm.c      **** 			}
1493:src/vm.c      **** 			case 0b101000: { //sb      101000  LoadStore       MEM [$s + i]:1 = LB ($t)
1494:src/vm.c      **** 				//usage[52]++;
1495:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3707              		.loc 1 1495 0
 3708 193f 488D7C24 		leaq	40(%rsp), %rdi
 3708      28
 3709 1944 89DE     		movl	%ebx, %esi
1496:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sb\0");
1497:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 3710              		.loc 1 1497 0
 3711 1946 83E51F   		andl	$31, %ebp
 3712              	.LVL728:
 3713 1949 450FBFED 		movswl	%r13w, %r13d
 3714              	.LVL729:
 3715 194d 4183E41F 		andl	$31, %r12d
 3716              	.LVL730:
1495:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sb\0");
 3717              		.loc 1 1495 0
 3718 1951 E8000000 		call	JOURNAL_new_entry
 3718      00
 3719              	.LVL731:
1496:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sb\0");
 3720              		.loc 1 1496 0
 3721 1956 BE000000 		movl	$.LC55, %esi
 3721      00
 3722 195b 4889C7   		movq	%rax, %rdi
 3723 195e E8000000 		call	JOURNAL_insert_text
 3723      00
 3724              	.LVL732:
 3725              		.loc 1 1497 0
 3726 1963 44032CAD 		addl	RF(,%rbp,4), %r13d
 3726      00000000 
 3727 196b 428B04A5 		movl	RF(,%r12,4), %eax
 3727      00000000 
 3728 1973 41888500 		movb	%al, VM_memory(%r13)
 3728      000000
 3729 197a E9870200 		jmp	.L290
 3729      00
 3730              	.LVL733:
 3731              	.L249:
1498:src/vm.c      **** 				break;
1499:src/vm.c      **** 			}
1500:src/vm.c      **** 			case 0b101001: { //sh      101001  LoadStore       MEM [$s + i]:2 = LH ($t)
1501:src/vm.c      **** 				//usage[53]++;
1502:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3732              		.loc 1 1502 0
 3733 197f 488D7C24 		leaq	40(%rsp), %rdi
 3733      28
 3734 1984 89DE     		movl	%ebx, %esi
1503:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sh\0");
GAS LISTING /tmp/cc15eBE3.s 			page 117


1504:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 3735              		.loc 1 1504 0
 3736 1986 83E51F   		andl	$31, %ebp
 3737              	.LVL734:
 3738 1989 450FBFED 		movswl	%r13w, %r13d
 3739              	.LVL735:
 3740 198d 4183E41F 		andl	$31, %r12d
 3741              	.LVL736:
1502:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sh\0");
 3742              		.loc 1 1502 0
 3743 1991 E8000000 		call	JOURNAL_new_entry
 3743      00
 3744              	.LVL737:
1503:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sh\0");
 3745              		.loc 1 1503 0
 3746 1996 BE000000 		movl	$.LC56, %esi
 3746      00
 3747 199b 4889C7   		movq	%rax, %rdi
 3748 199e E8000000 		call	JOURNAL_insert_text
 3748      00
 3749              	.LVL738:
 3750              		.loc 1 1504 0
 3751 19a3 44032CAD 		addl	RF(,%rbp,4), %r13d
 3751      00000000 
 3752 19ab 428B04A5 		movl	RF(,%r12,4), %eax
 3752      00000000 
 3753 19b3 0FB6CC   		movzbl	%ah, %ecx
 3754 19b6 4489EA   		movl	%r13d, %edx
 3755 19b9 888A0000 		movb	%cl, VM_memory(%rdx)
 3755      0000
1505:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)(RF[rt] & 0xFF);
 3756              		.loc 1 1505 0
 3757 19bf 418D5501 		leal	1(%r13), %edx
 3758 19c3 E9380100 		jmp	.L321
 3758      00
 3759              	.LVL739:
 3760              	.L251:
1506:src/vm.c      **** 				break;
1507:src/vm.c      **** 			}
1508:src/vm.c      **** 			case 0b101011: { //sw      101011  LoadStore       MEM [$s + i]:4 = $t
1509:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3761              		.loc 1 1509 0
 3762 19c8 488D7C24 		leaq	40(%rsp), %rdi
 3762      28
 3763 19cd 89DE     		movl	%ebx, %esi
1510:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sw\0");
1511:src/vm.c      **** 				//usage[54]++;
1512:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 3764              		.loc 1 1512 0
 3765 19cf 83E51F   		andl	$31, %ebp
 3766              	.LVL740:
 3767 19d2 4183E41F 		andl	$31, %r12d
 3768              	.LVL741:
 3769 19d6 450FBFED 		movswl	%r13w, %r13d
 3770              	.LVL742:
1509:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sw\0");
 3771              		.loc 1 1509 0
GAS LISTING /tmp/cc15eBE3.s 			page 118


 3772 19da E8000000 		call	JOURNAL_new_entry
 3772      00
 3773              	.LVL743:
1510:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "sw\0");
 3774              		.loc 1 1510 0
 3775 19df BE000000 		movl	$.LC57, %esi
 3775      00
 3776 19e4 4889C7   		movq	%rax, %rdi
 3777 19e7 E8000000 		call	JOURNAL_insert_text
 3777      00
 3778              	.LVL744:
 3779              		.loc 1 1512 0
 3780 19ec 44032CAD 		addl	RF(,%rbp,4), %r13d
 3780      00000000 
 3781 19f4 428B04A5 		movl	RF(,%r12,4), %eax
 3781      00000000 
 3782 19fc 89C1     		movl	%eax, %ecx
 3783 19fe 4489EA   		movl	%r13d, %edx
 3784 1a01 C1E918   		shrl	$24, %ecx
 3785 1a04 888A0000 		movb	%cl, VM_memory(%rdx)
 3785      0000
1513:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 3786              		.loc 1 1513 0
 3787 1a0a 418D5501 		leal	1(%r13), %edx
 3788 1a0e 89C1     		movl	%eax, %ecx
 3789 1a10 C1E910   		shrl	$16, %ecx
 3790 1a13 888A0000 		movb	%cl, VM_memory(%rdx)
 3790      0000
1514:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate + 2] = (uint8_t)((RF[rt] & 0xFF00) >> 8);
 3791              		.loc 1 1514 0
 3792 1a19 418D5502 		leal	2(%r13), %edx
 3793 1a1d 0FB6CC   		movzbl	%ah, %ecx
 3794 1a20 888A0000 		movb	%cl, VM_memory(%rdx)
 3794      0000
1515:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 3] = (uint8_t)(RF[rt] & 0xFF);
 3795              		.loc 1 1515 0
 3796 1a26 418D5503 		leal	3(%r13), %edx
 3797 1a2a E9D10000 		jmp	.L321
 3797      00
 3798              	.LVL745:
 3799              	.L224:
1516:src/vm.c      **** 				break;
1517:src/vm.c      **** 			}
1518:src/vm.c      **** 	
1519:src/vm.c      **** 			//Jump encoding
1520:src/vm.c      **** 			
1521:src/vm.c      **** 			case 0b000010: { //j       000010  Jump    pc = i << 2
1522:src/vm.c      **** 				//usage[55]++;
1523:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3800              		.loc 1 1523 0
 3801 1a2f 488D7C24 		leaq	40(%rsp), %rdi
 3801      28
 3802 1a34 89DE     		movl	%ebx, %esi
 3803 1a36 E8000000 		call	JOURNAL_new_entry
 3803      00
 3804              	.LVL746:
1524:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "jump\0");
GAS LISTING /tmp/cc15eBE3.s 			page 119


 3805              		.loc 1 1524 0
 3806 1a3b BE000000 		movl	$.LC58, %esi
 3806      00
 3807 1a40 4889C7   		movq	%rax, %rdi
 3808 1a43 E8000000 		call	JOURNAL_insert_text
 3808      00
 3809              	.LVL747:
 3810 1a48 EB28     		jmp	.L309
 3811              	.L225:
1525:src/vm.c      **** 				PC = nPC;
1526:src/vm.c      **** 				nPC = address << 2;
1527:src/vm.c      **** 				continue;
1528:src/vm.c      **** 			}
1529:src/vm.c      **** 			case 0b000011: { //jal     000011  Jump    $31 = pc; pc = i << 2
1530:src/vm.c      **** 				//usage[56]++;
1531:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3812              		.loc 1 1531 0
 3813 1a4a 488D7C24 		leaq	40(%rsp), %rdi
 3813      28
 3814 1a4f 89DE     		movl	%ebx, %esi
 3815 1a51 E8000000 		call	JOURNAL_new_entry
 3815      00
 3816              	.LVL748:
1532:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "jal\0");
 3817              		.loc 1 1532 0
 3818 1a56 BE000000 		movl	$.LC59, %esi
 3818      00
 3819 1a5b 4889C7   		movq	%rax, %rdi
 3820 1a5e E8000000 		call	JOURNAL_insert_text
 3820      00
 3821              	.LVL749:
1533:src/vm.c      **** 				RF[31] = PC + 8;
 3822              		.loc 1 1533 0
 3823 1a63 8B050000 		movl	PC(%rip), %eax
 3823      0000
 3824 1a69 83C008   		addl	$8, %eax
 3825 1a6c 89050000 		movl	%eax, RF+124(%rip)
 3825      0000
 3826              	.L309:
1534:src/vm.c      **** 				PC = nPC;
 3827              		.loc 1 1534 0
 3828 1a72 8B050000 		movl	nPC(%rip), %eax
 3828      0000
 3829 1a78 89050000 		movl	%eax, PC(%rip)
 3829      0000
1535:src/vm.c      **** 				nPC = address << 2;
 3830              		.loc 1 1535 0
 3831 1a7e 8B44241C 		movl	28(%rsp), %eax
 3832 1a82 C1E002   		sall	$2, %eax
 3833              	.LVL750:
 3834              	.L310:
 3835 1a85 89050000 		movl	%eax, nPC(%rip)
 3835      0000
1536:src/vm.c      **** 				continue;
 3836              		.loc 1 1536 0
 3837 1a8b E93BF4FF 		jmp	.L219
 3837      FF
GAS LISTING /tmp/cc15eBE3.s 			page 120


 3838              	.LVL751:
 3839              	.L240:
1537:src/vm.c      **** 			}
1538:src/vm.c      **** 			case 0b011010: { //trap    011010  Trap    Dependent on operating system; different values for i
1539:src/vm.c      **** 				//usage[57]++;
1540:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3840              		.loc 1 1540 0
 3841 1a90 488D7C24 		leaq	40(%rsp), %rdi
 3841      28
 3842 1a95 89DE     		movl	%ebx, %esi
 3843 1a97 E8000000 		call	JOURNAL_new_entry
 3843      00
 3844              	.LVL752:
1541:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "trap\0");
 3845              		.loc 1 1541 0
 3846 1a9c BE000000 		movl	$.LC60, %esi
 3846      00
 3847 1aa1 4889C7   		movq	%rax, %rdi
 3848 1aa4 E8000000 		call	JOURNAL_insert_text
 3848      00
 3849              	.LVL753:
 3850 1aa9 410FB6FD 		movzbl	%r13b, %edi
1542:src/vm.c      **** 				syscall((uint8_t)(address&0xFF));
 3851              		.loc 1 1542 0
 3852 1aad E8000000 		call	syscall
 3852      00
 3853              	.LVL754:
 3854 1ab2 E94F0100 		jmp	.L290
 3854      00
 3855              	.L250:
1543:src/vm.c      **** 				break;
1544:src/vm.c      **** 			}
1545:src/vm.c      **** 			case 0b101010: { //swl Rsrc1, imm(Rsrc2): Store Word Left
1546:src/vm.c      **** 				//usage[58]++;
1547:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3856              		.loc 1 1547 0
 3857 1ab7 488D7C24 		leaq	40(%rsp), %rdi
 3857      28
 3858 1abc 89DE     		movl	%ebx, %esi
1548:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "swl\0");
1549:src/vm.c      **** 				VM_memory[RF[rs] + immediate] = (uint8_t)((RF[rt] & 0xFF000000) >> 24);
 3859              		.loc 1 1549 0
 3860 1abe 83E51F   		andl	$31, %ebp
 3861              	.LVL755:
 3862 1ac1 4183E41F 		andl	$31, %r12d
 3863              	.LVL756:
 3864 1ac5 450FBFED 		movswl	%r13w, %r13d
 3865              	.LVL757:
1547:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "swl\0");
 3866              		.loc 1 1547 0
 3867 1ac9 E8000000 		call	JOURNAL_new_entry
 3867      00
 3868              	.LVL758:
1548:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "swl\0");
 3869              		.loc 1 1548 0
 3870 1ace BE000000 		movl	$.LC61, %esi
 3870      00
GAS LISTING /tmp/cc15eBE3.s 			page 121


 3871 1ad3 4889C7   		movq	%rax, %rdi
 3872 1ad6 E8000000 		call	JOURNAL_insert_text
 3872      00
 3873              	.LVL759:
 3874              		.loc 1 1549 0
 3875 1adb 44032CAD 		addl	RF(,%rbp,4), %r13d
 3875      00000000 
 3876 1ae3 428B04A5 		movl	RF(,%r12,4), %eax
 3876      00000000 
 3877 1aeb 89C1     		movl	%eax, %ecx
1550:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 3878              		.loc 1 1550 0
 3879 1aed C1E810   		shrl	$16, %eax
1549:src/vm.c      **** 				VM_memory[RF[rs] + immediate + 1] = (uint8_t)((RF[rt] & 0xFF0000) >> 16);
 3880              		.loc 1 1549 0
 3881 1af0 4489EA   		movl	%r13d, %edx
 3882 1af3 C1E918   		shrl	$24, %ecx
 3883 1af6 888A0000 		movb	%cl, VM_memory(%rdx)
 3883      0000
 3884              		.loc 1 1550 0
 3885 1afc 418D5501 		leal	1(%r13), %edx
 3886              	.L321:
 3887 1b00 88820000 		movb	%al, VM_memory(%rdx)
 3887      0000
 3888 1b06 E9FB0000 		jmp	.L290
 3888      00
 3889              	.LVL760:
 3890              	.L252:
1551:src/vm.c      **** 				break;
1552:src/vm.c      **** 			}
1553:src/vm.c      **** 			case 0b101110: { //swr Rsrc1, imm(Rsrc2): Store Word Right
1554:src/vm.c      **** 				//usage[59]++;
1555:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3891              		.loc 1 1555 0
 3892 1b0b 488D7C24 		leaq	40(%rsp), %rdi
 3892      28
 3893 1b10 89DE     		movl	%ebx, %esi
1556:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "swr\0");
1557:src/vm.c      **** 			  	VM_memory[RF[rs] + immediate] = (uint8_t)(RF[rt] & 0xFF);
 3894              		.loc 1 1557 0
 3895 1b12 83E51F   		andl	$31, %ebp
 3896              	.LVL761:
 3897 1b15 450FBFED 		movswl	%r13w, %r13d
 3898              	.LVL762:
 3899 1b19 4183E41F 		andl	$31, %r12d
 3900              	.LVL763:
1555:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "swr\0");
 3901              		.loc 1 1555 0
 3902 1b1d E8000000 		call	JOURNAL_new_entry
 3902      00
 3903              	.LVL764:
1556:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "swr\0");
 3904              		.loc 1 1556 0
 3905 1b22 BE000000 		movl	$.LC62, %esi
 3905      00
 3906 1b27 4889C7   		movq	%rax, %rdi
 3907 1b2a E8000000 		call	JOURNAL_insert_text
GAS LISTING /tmp/cc15eBE3.s 			page 122


 3907      00
 3908              	.LVL765:
 3909              		.loc 1 1557 0
 3910 1b2f 44032CAD 		addl	RF(,%rbp,4), %r13d
 3910      00000000 
 3911 1b37 428B14A5 		movl	RF(,%r12,4), %edx
 3911      00000000 
 3912 1b3f 4489E8   		movl	%r13d, %eax
 3913 1b42 88900000 		movb	%dl, VM_memory(%rax)
 3913      0000
1558:src/vm.c      **** 				VM_memory[RF[rs] + immediate - 1] = (uint8_t)(RF[rt] & 0xFF00) >> 8;
 3914              		.loc 1 1558 0
 3915 1b48 418D45FF 		leal	-1(%r13), %eax
 3916 1b4c C6800000 		movb	$0, VM_memory(%rax)
 3916      000000
 3917 1b53 E9AE0000 		jmp	.L290
 3917      00
 3918              	.LVL766:
 3919              	.L243:
1559:src/vm.c      **** 				break;
1560:src/vm.c      **** 			}
1561:src/vm.c      **** 			case 0b100010: { //lwl Rdest, imm(Rsrc): Load Word Left
1562:src/vm.c      **** 				//usage[60]++;
1563:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3920              		.loc 1 1563 0
 3921 1b58 488D7C24 		leaq	40(%rsp), %rdi
 3921      28
 3922 1b5d 89DE     		movl	%ebx, %esi
1564:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lwl\0");
1565:src/vm.c      **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate]) << 24) | ((uint32_t)(VM_memory[RF[rs] + imm
 3923              		.loc 1 1565 0
 3924 1b5f 83E51F   		andl	$31, %ebp
 3925              	.LVL767:
 3926 1b62 450FBFED 		movswl	%r13w, %r13d
 3927              	.LVL768:
 3928 1b66 4183E41F 		andl	$31, %r12d
 3929              	.LVL769:
1563:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lwl\0");
 3930              		.loc 1 1563 0
 3931 1b6a E8000000 		call	JOURNAL_new_entry
 3931      00
 3932              	.LVL770:
1564:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lwl\0");
 3933              		.loc 1 1564 0
 3934 1b6f BE000000 		movl	$.LC63, %esi
 3934      00
 3935 1b74 4889C7   		movq	%rax, %rdi
 3936 1b77 E8000000 		call	JOURNAL_insert_text
 3936      00
 3937              	.LVL771:
 3938              		.loc 1 1565 0
 3939 1b7c 44032CAD 		addl	RF(,%rbp,4), %r13d
 3939      00000000 
 3940 1b84 418D4501 		leal	1(%r13), %eax
 3941 1b88 410FB695 		movzbl	VM_memory(%r13), %edx
 3941      00000000 
 3942 1b90 0FB68000 		movzbl	VM_memory(%rax), %eax
GAS LISTING /tmp/cc15eBE3.s 			page 123


 3942      000000
 3943 1b97 C1E218   		sall	$24, %edx
 3944 1b9a C1E010   		sall	$16, %eax
 3945 1b9d EB42     		jmp	.L320
 3946              	.LVL772:
 3947              	.L247:
1566:src/vm.c      **** 				break;
1567:src/vm.c      **** 			}
1568:src/vm.c      **** 			case 0b100110: { //lwr Rdest, imm(Rsrc): Load Word Right
1569:src/vm.c      **** 				//usage[61]++;
1570:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3948              		.loc 1 1570 0
 3949 1b9f 488D7C24 		leaq	40(%rsp), %rdi
 3949      28
 3950 1ba4 89DE     		movl	%ebx, %esi
1571:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lwr\0");
1572:src/vm.c      **** 				RF[rt] = ((uint32_t)(VM_memory[RF[rs] + immediate -1]) << 8) | ((uint32_t)VM_memory[RF[rs] + im
 3951              		.loc 1 1572 0
 3952 1ba6 83E51F   		andl	$31, %ebp
 3953              	.LVL773:
 3954 1ba9 450FBFED 		movswl	%r13w, %r13d
 3955              	.LVL774:
 3956 1bad 4183E41F 		andl	$31, %r12d
 3957              	.LVL775:
1570:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lwr\0");
 3958              		.loc 1 1570 0
 3959 1bb1 E8000000 		call	JOURNAL_new_entry
 3959      00
 3960              	.LVL776:
1571:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "lwr\0");
 3961              		.loc 1 1571 0
 3962 1bb6 BE000000 		movl	$.LC64, %esi
 3962      00
 3963 1bbb 4889C7   		movq	%rax, %rdi
 3964 1bbe E8000000 		call	JOURNAL_insert_text
 3964      00
 3965              	.LVL777:
 3966              		.loc 1 1572 0
 3967 1bc3 44032CAD 		addl	RF(,%rbp,4), %r13d
 3967      00000000 
 3968 1bcb 418D45FF 		leal	-1(%r13), %eax
 3969 1bcf 410FB695 		movzbl	VM_memory(%r13), %edx
 3969      00000000 
 3970 1bd7 0FB68000 		movzbl	VM_memory(%rax), %eax
 3970      000000
 3971 1bde C1E008   		sall	$8, %eax
 3972              	.L320:
 3973 1be1 09D0     		orl	%edx, %eax
 3974              	.L316:
 3975 1be3 428904A5 		movl	%eax, RF(,%r12,4)
 3975      00000000 
 3976 1beb EB19     		jmp	.L290
 3977              	.LVL778:
 3978              	.L220:
1573:src/vm.c      **** 				break;
1574:src/vm.c      **** 			}
1575:src/vm.c      **** 			
GAS LISTING /tmp/cc15eBE3.s 			page 124


1576:src/vm.c      **** 			//uint8_t op = (instr >> 26) & 0x3F;
1577:src/vm.c      **** 			break; //op
1578:src/vm.c      **** 			default:
1579:src/vm.c      **** 			{
1580:src/vm.c      **** 				j_entry = JOURNAL_new_entry(&dia, j_id);
 3979              		.loc 1 1580 0
 3980 1bed 488D7C24 		leaq	40(%rsp), %rdi
 3980      28
 3981 1bf2 89DE     		movl	%ebx, %esi
 3982 1bf4 E8000000 		call	JOURNAL_new_entry
 3982      00
 3983              	.LVL779:
1581:src/vm.c      **** 				JOURNAL_insert_text(j_entry, "#UNKNOWN\0");
 3984              		.loc 1 1581 0
 3985 1bf9 BE000000 		movl	$.LC65, %esi
 3985      00
 3986 1bfe 4889C7   		movq	%rax, %rdi
 3987 1c01 E8000000 		call	JOURNAL_insert_text
 3987      00
 3988              	.LVL780:
 3989              	.L290:
 3990              	.LBB36:
1032:src/vm.c      **** 					case 0b001011: { // movn	001010 				if(rt!=0) rd = rs
 3991              		.loc 1 1032 0
 3992 1c06 4531E4   		xorl	%r12d, %r12d
 3993              	.L253:
 3994              	.LVL781:
 3995              	.LBE36:
1582:src/vm.c      **** 				break;
1583:src/vm.c      **** 			}
1584:src/vm.c      **** 		}
1585:src/vm.c      **** 		advance_pc(offset);//Advances the PC
 3996              		.loc 1 1585 0
 3997 1c09 BF040000 		movl	$4, %edi
 3997      00
 3998 1c0e E8000000 		call	advance_pc
 3998      00
 3999              	.LVL782:
 4000              	.LBE32:
1013:src/vm.c      **** 	{
 4001              		.loc 1 1013 0
 4002 1c13 4584E4   		testb	%r12b, %r12b
 4003 1c16 0F84AFF2 		je	.L219
 4003      FFFF
1586:src/vm.c      **** 	}
1587:src/vm.c      **** 
1588:src/vm.c      **** 	j_text = JOURNAL_generate_info(&dia, NULL);
 4004              		.loc 1 1588 0
 4005 1c1c 488D7C24 		leaq	40(%rsp), %rdi
 4005      28
 4006 1c21 31F6     		xorl	%esi, %esi
 4007 1c23 E8000000 		call	JOURNAL_generate_info
 4007      00
 4008              	.LVL783:
1589:src/vm.c      **** 	//printf("%s\n", j_text);
1590:src/vm.c      **** 	free(j_text);
 4009              		.loc 1 1590 0
GAS LISTING /tmp/cc15eBE3.s 			page 125


 4010 1c28 4889C7   		movq	%rax, %rdi
 4011 1c2b E8000000 		call	free
 4011      00
 4012              	.LVL784:
1591:src/vm.c      **** 	JOURNAL_free(&dia);
 4013              		.loc 1 1591 0
 4014 1c30 488D7C24 		leaq	40(%rsp), %rdi
 4014      28
 4015 1c35 E8000000 		call	JOURNAL_free
 4015      00
 4016              	.LVL785:
1592:src/vm.c      **** }
 4017              		.loc 1 1592 0
 4018 1c3a 4883C468 		addq	$104, %rsp
 4019              		.cfi_def_cfa_offset 56
 4020              	.LVL786:
 4021 1c3e 5B       		popq	%rbx
 4022              		.cfi_def_cfa_offset 48
 4023              	.LVL787:
 4024 1c3f 5D       		popq	%rbp
 4025              		.cfi_def_cfa_offset 40
 4026 1c40 415C     		popq	%r12
 4027              		.cfi_def_cfa_offset 32
 4028              	.LVL788:
 4029 1c42 415D     		popq	%r13
 4030              		.cfi_def_cfa_offset 24
 4031 1c44 415E     		popq	%r14
 4032              		.cfi_def_cfa_offset 16
 4033 1c46 415F     		popq	%r15
 4034              		.cfi_def_cfa_offset 8
 4035              	.LVL789:
 4036 1c48 C3       		ret
 4037              		.cfi_endproc
 4038              	.LFE23:
 4040              		.globl	nPC
 4041              		.data
 4042              		.align 4
 4045              	nPC:
 4046 0000 04000000 		.long	4
 4047              		.globl	PC
 4048              		.bss
 4049              		.align 4
 4052              	PC:
 4053 0000 00000000 		.zero	4
 4054              		.globl	VM_memory
 4055 0004 00000000 		.align 16
 4055      00000000 
 4055      00000000 
 4058              	VM_memory:
 4059 0010 00000000 		.zero	5120
 4059      00000000 
 4059      00000000 
 4059      00000000 
 4059      00000000 
 4060              		.comm	RF,128,16
 4061              		.text
 4062              	.Letext0:
GAS LISTING /tmp/cc15eBE3.s 			page 126


 4063              		.file 3 "/usr/include/stdint.h"
 4064              		.file 4 "src/journal.h"
 4065              		.file 5 "src/syscall.h"
 4066              		.file 6 "/usr/include/stdlib.h"
GAS LISTING /tmp/cc15eBE3.s 			page 127


DEFINED SYMBOLS
                            *ABS*:0000000000000000 vm.c
     /tmp/cc15eBE3.s:6      .text:0000000000000000 advance_pc
     /tmp/cc15eBE3.s:4045   .data:0000000000000000 nPC
     /tmp/cc15eBE3.s:4052   .bss:0000000000000000 PC
     /tmp/cc15eBE3.s:24     .text:0000000000000015 vm_cpu_init_only
                            *COM*:0000000000000080 RF
     /tmp/cc15eBE3.s:44     .text:000000000000003a fetch
     /tmp/cc15eBE3.s:4058   .bss:0000000000000010 VM_memory
     /tmp/cc15eBE3.s:79     .text:0000000000000071 print_memory
     /tmp/cc15eBE3.s:124    .text:00000000000000a8 print_registers
     /tmp/cc15eBE3.s:162    .text:00000000000000d1 vm_cpu
     /tmp/cc15eBE3.s:1163   .text:00000000000007be vm_cpu_count
     /tmp/cc15eBE3.s:2338   .text:0000000000000e6b vm_cpu_identify_instructions

UNDEFINED SYMBOLS
__printf_chk
syscall
JOURNAL_init
JOURNAL_get_id
JOURNAL_new_entry
JOURNAL_insert_text
JOURNAL_generate_info
free
JOURNAL_free
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"ARCH_i386OS_serial.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 256300   		.string	"%c"
   7              		.text
   8              		.globl	send_byte
  10              	send_byte:
  11              	.LFB11:
  12              		.file 1 "src/ARCH/i386_OS/ARCH_i386OS_serial.c"
   1:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** /***************************************************************************
   2:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   Copyright (C) 2015 by                                                 *
   3:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   - Carlos Eduardo Millani (carloseduardomillani@gmail.com)             *
   4:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   - Edson Borin (edson@ic.unicamp.br)                                   *
   5:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *                                                                         *
   6:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   This program is free software; you can redistribute it and/or modify  *
   7:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   it under the terms of the GNU General Public License as published by  *
   8:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   the Free Software Foundation; either version 2 of the License, or     *
   9:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   (at your option) any later version.                                   *
  10:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *                                                                         *
  11:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   This program is distributed in the hope that it will be useful,       *
  12:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  13:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  14:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   GNU General Public License for more details.                          *
  15:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *                                                                         *
  16:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   You should have received a copy of the GNU General Public License     *
  17:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   along with this program; if not, write to the                         *
  18:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   Free Software Foundation, Inc.,                                       *
  19:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  20:src/ARCH/i386_OS/ARCH_i386OS_serial.c ****  ***************************************************************************/
  21:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** #ifdef __cplusplus
  22:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** extern "C" {
  23:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** #endif
  24:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 	
  25:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** #include <stdio.h>
  26:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** #include "ARCH_serial.h"
  27:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 
  28:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** void send_byte(unsigned char byte)
  29:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** {
  13              		.loc 1 29 0
  14              		.cfi_startproc
  15              	.LVL0:
  30:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 	printf("%c", byte);
  16              		.loc 1 30 0
  17 0000 400FB6D7 		movzbl	%dil, %edx
  18              	.LBB8:
  19              	.LBB9:
  20              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
GAS LISTING /tmp/cc15eBE3.s 			page 2


   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
GAS LISTING /tmp/cc15eBE3.s 			page 3


  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  21              		.loc 2 104 0
  22 0004 BE000000 		movl	$.LC0, %esi
  22      00
  23 0009 BF010000 		movl	$1, %edi
  23      00
  24              	.LVL1:
  25 000e 31C0     		xorl	%eax, %eax
  26 0010 E9000000 		jmp	__printf_chk
  26      00
  27              	.LVL2:
  28              	.LBE9:
  29              	.LBE8:
  30              		.cfi_endproc
  31              	.LFE11:
  33              		.globl	read_byte
  35              	read_byte:
  36              	.LFB12:
  31:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** }
GAS LISTING /tmp/cc15eBE3.s 			page 4


  32:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** char read_byte(void)
  33:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** {
  37              		.loc 1 33 0
  38              		.cfi_startproc
  39 0015 4883EC18 		subq	$24, %rsp
  40              		.cfi_def_cfa_offset 32
  34:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 	char c;
  35:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 	scanf ("%c", &c);
  41              		.loc 1 35 0
  42 0019 BF000000 		movl	$.LC0, %edi
  42      00
  43 001e 31C0     		xorl	%eax, %eax
  44 0020 488D7424 		leaq	15(%rsp), %rsi
  44      0F
  45 0025 E8000000 		call	__isoc99_scanf
  45      00
  46              	.LVL3:
  36:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 	return c;
  37:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** }
  47              		.loc 1 37 0
  48 002a 8A44240F 		movb	15(%rsp), %al
  49 002e 4883C418 		addq	$24, %rsp
  50              		.cfi_def_cfa_offset 8
  51 0032 C3       		ret
  52              		.cfi_endproc
  53              	.LFE12:
  55              		.globl	serial_configure
  57              	serial_configure:
  58              	.LFB13:
  38:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** void serial_configure(unsigned int baudrate)
  39:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** {
  59              		.loc 1 39 0
  60              		.cfi_startproc
  61              	.LVL4:
  62 0033 C3       		ret
  63              		.cfi_endproc
  64              	.LFE13:
  66              		.section	.rodata.str1.1
  67              	.LC1:
  68 0003 256400   		.string	"%d"
  69              		.text
  70              		.globl	printnum
  72              	printnum:
  73              	.LFB14:
  40:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 
  41:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** }
  42:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** void printnum(uint32_t number)
  43:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** {
  74              		.loc 1 43 0
  75              		.cfi_startproc
  76              	.LVL5:
  77              		.loc 1 43 0
  78 0034 89FA     		movl	%edi, %edx
  79              	.LBB10:
  80              	.LBB11:
  81              		.loc 2 104 0
  82 0036 BE000000 		movl	$.LC1, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 5


  82      00
  83 003b BF010000 		movl	$1, %edi
  83      00
  84              	.LVL6:
  85 0040 31C0     		xorl	%eax, %eax
  86 0042 E9000000 		jmp	__printf_chk
  86      00
  87              	.LVL7:
  88              	.LBE11:
  89              	.LBE10:
  90              		.cfi_endproc
  91              	.LFE14:
  93              		.section	.rodata.str1.1
  94              	.LC2:
  95 0006 257300   		.string	"%s"
  96              		.text
  97              		.globl	print
  99              	print:
 100              	.LFB15:
  44:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** 	printf("%d",number);
  45:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** }
  46:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** void print(const char *str)
  47:src/ARCH/i386_OS/ARCH_i386OS_serial.c **** {
 101              		.loc 1 47 0
 102              		.cfi_startproc
 103              	.LVL8:
 104              		.loc 1 47 0
 105 0047 4889FA   		movq	%rdi, %rdx
 106              	.LBB12:
 107              	.LBB13:
 108              		.loc 2 104 0
 109 004a BE000000 		movl	$.LC2, %esi
 109      00
 110 004f BF010000 		movl	$1, %edi
 110      00
 111              	.LVL9:
 112 0054 31C0     		xorl	%eax, %eax
 113 0056 E9000000 		jmp	__printf_chk
 113      00
 114              	.LVL10:
 115              	.LBE13:
 116              	.LBE12:
 117              		.cfi_endproc
 118              	.LFE15:
 120              	.Letext0:
 121              		.file 3 "/usr/include/stdio.h"
 122              		.file 4 "/usr/include/stdint.h"
GAS LISTING /tmp/cc15eBE3.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ARCH_i386OS_serial.c
     /tmp/cc15eBE3.s:10     .text:0000000000000000 send_byte
     /tmp/cc15eBE3.s:35     .text:0000000000000015 read_byte
     /tmp/cc15eBE3.s:57     .text:0000000000000033 serial_configure
     /tmp/cc15eBE3.s:72     .text:0000000000000034 printnum
     /tmp/cc15eBE3.s:99     .text:0000000000000047 print

UNDEFINED SYMBOLS
__printf_chk
__isoc99_scanf
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"i386_OS.c"
   2              		.text
   3              	.Ltext0:
   4              	.Letext0:
GAS LISTING /tmp/cc15eBE3.s 			page 2


DEFINED SYMBOLS
                            *ABS*:0000000000000000 i386_OS.c

NO UNDEFINED SYMBOLS
GAS LISTING /tmp/cc15eBE3.s 			page 1


   1              		.file	"OS_loader.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	blah
   6              	blah:
   7              	.LFB16:
   8              		.file 1 "src/ARCH/i386_OS/OS_loader.c"
   1:src/ARCH/i386_OS/OS_loader.c **** #include "vm.h"
   2:src/ARCH/i386_OS/OS_loader.c **** #include "HAL.h"
   3:src/ARCH/i386_OS/OS_loader.c **** #include <stdio.h>
   4:src/ARCH/i386_OS/OS_loader.c **** #include <inttypes.h>
   5:src/ARCH/i386_OS/OS_loader.c **** #include <time.h>
   6:src/ARCH/i386_OS/OS_loader.c **** #include <EH.h>
   7:src/ARCH/i386_OS/OS_loader.c **** #include <stdlib.h>
   8:src/ARCH/i386_OS/OS_loader.c **** 
   9:src/ARCH/i386_OS/OS_loader.c **** /*File for debug purpose only. To be used in order to load a binary into the vm*/
  10:src/ARCH/i386_OS/OS_loader.c **** 
  11:src/ARCH/i386_OS/OS_loader.c **** void blah(void)
  12:src/ARCH/i386_OS/OS_loader.c **** {
   9              		.loc 1 12 0
  10              		.cfi_startproc
  11 0000 C3       		ret
  12              		.cfi_endproc
  13              	.LFE16:
  15              		.section	.rodata.str1.1,"aMS",@progbits,1
  16              	.LC0:
  17 0000 45787065 		.string	"Expected file name and execution type, aborting\n"
  17      63746564 
  17      2066696C 
  17      65206E61 
  17      6D652061 
  18              	.LC1:
  19 0031 726200   		.string	"rb"
  20              		.section	.text.startup,"ax",@progbits
  21              		.globl	main
  23              	main:
  24              	.LFB17:
  13:src/ARCH/i386_OS/OS_loader.c **** 	
  14:src/ARCH/i386_OS/OS_loader.c **** }
  15:src/ARCH/i386_OS/OS_loader.c **** 
  16:src/ARCH/i386_OS/OS_loader.c **** 
  17:src/ARCH/i386_OS/OS_loader.c **** int main(int argc, char * argv[])
  18:src/ARCH/i386_OS/OS_loader.c **** {
  25              		.loc 1 18 0
  26              		.cfi_startproc
  27              	.LVL0:
  28              		.loc 1 18 0
  29 0000 4154     		pushq	%r12
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 12, -16
  32 0002 55       		pushq	%rbp
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 6, -24
  35 0003 53       		pushq	%rbx
  36              		.cfi_def_cfa_offset 32
  37              		.cfi_offset 3, -32
  38 0004 4883EC20 		subq	$32, %rsp
GAS LISTING /tmp/cc15eBE3.s 			page 2


  39              		.cfi_def_cfa_offset 64
  19:src/ARCH/i386_OS/OS_loader.c **** 	/*Debugging EH*/
  20:src/ARCH/i386_OS/OS_loader.c **** 	// print_EH();
  21:src/ARCH/i386_OS/OS_loader.c **** // 	eh_init();
  22:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  23:src/ARCH/i386_OS/OS_loader.c **** // 	register_handler(1, blah);
  24:src/ARCH/i386_OS/OS_loader.c **** // 	register_handler(2, blah + 1);
  25:src/ARCH/i386_OS/OS_loader.c **** // 	register_handler(2, blah + 2);
  26:src/ARCH/i386_OS/OS_loader.c **** // 	register_handler(3, blah + 3);
  27:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  28:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(1);
  29:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(2);
  30:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(3);
  31:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(1);
  32:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  33:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  34:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  35:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  36:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  37:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  38:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(1);
  39:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(2);
  40:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(3);
  41:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(1);
  42:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  43:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  44:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  45:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  46:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  47:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  48:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(1);
  49:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(2);
  50:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(3);
  51:src/ARCH/i386_OS/OS_loader.c **** // 	insert_event(1);
  52:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  53:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  54:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  55:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  56:src/ARCH/i386_OS/OS_loader.c **** // 	consume_event();
  57:src/ARCH/i386_OS/OS_loader.c **** // 	print_EH();
  58:src/ARCH/i386_OS/OS_loader.c **** 	/*End Debugging EH*/
  59:src/ARCH/i386_OS/OS_loader.c **** 	FILE * binary;
  60:src/ARCH/i386_OS/OS_loader.c **** 	int i = 0, j = 0;
  61:src/ARCH/i386_OS/OS_loader.c **** 	uint8_t byte;
  62:src/ARCH/i386_OS/OS_loader.c **** 	
  63:src/ARCH/i386_OS/OS_loader.c **** 	if (argc < 3) 
  40              		.loc 1 63 0
  41 0008 83FF02   		cmpl	$2, %edi
  42 000b 7F1B     		jg	.L3
  43              	.LVL1:
  44              	.LBB6:
  45              	.LBB7:
  46              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2014 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
GAS LISTING /tmp/cc15eBE3.s 			page 3


   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
GAS LISTING /tmp/cc15eBE3.s 			page 4


  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  47              		.loc 2 104 0
  48 000d BE000000 		movl	$.LC0, %esi
  48      00
  49              	.LVL2:
  50 0012 BF010000 		movl	$1, %edi
  50      00
  51              	.LVL3:
  52 0017 31C0     		xorl	%eax, %eax
  53 0019 E8000000 		call	__printf_chk
  53      00
  54              	.LVL4:
  55              	.LBE7:
  56              	.LBE6:
  64:src/ARCH/i386_OS/OS_loader.c **** 	{
GAS LISTING /tmp/cc15eBE3.s 			page 5


  65:src/ARCH/i386_OS/OS_loader.c **** 		printf("Expected file name and execution type, aborting\n");
  66:src/ARCH/i386_OS/OS_loader.c **** 		return 1;
  57              		.loc 1 66 0
  58 001e B8010000 		movl	$1, %eax
  58      00
  59 0023 E9BF0000 		jmp	.L4
  59      00
  60              	.LVL5:
  61              	.L3:
  67:src/ARCH/i386_OS/OS_loader.c **** 	}
  68:src/ARCH/i386_OS/OS_loader.c **** 
  69:src/ARCH/i386_OS/OS_loader.c **** 	binary = fopen(argv[1], "rb");
  62              		.loc 1 69 0
  63 0028 488B7E08 		movq	8(%rsi), %rdi
  64              	.LVL6:
  65 002c 4889F5   		movq	%rsi, %rbp
  66 002f BE000000 		movl	$.LC1, %esi
  66      00
  67              	.LVL7:
  68 0034 BB000000 		movl	$VM_memory, %ebx
  68      00
  69 0039 E8000000 		call	fopen
  69      00
  70              	.LVL8:
  71 003e 4989C4   		movq	%rax, %r12
  72              	.LVL9:
  73              	.L5:
  74              	.LBB8:
  75              	.LBB9:
 105:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 106:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
 107:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define printf(...) \
 108:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __printf_chk (__USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 109:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define fprintf(stream, ...) \
 110:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __fprintf_chk (stream, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 111:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
 112:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 113:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 114:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** vprintf (const char *__restrict __fmt, _G_va_list __ap)
 115:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 116:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __USE_EXTERN_INLINES
 117:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vfprintf_chk (stdout, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 118:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #else
 119:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vprintf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 120:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
 121:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 122:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 123:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 124:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** vfprintf (FILE *__restrict __stream,
 125:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	  const char *__restrict __fmt, _G_va_list __ap)
 126:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 127:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 128:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 129:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 130:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __USE_XOPEN2K8
 131:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
 132:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  ...) __attribute__ ((__format__ (__printf__, 3, 4)));
GAS LISTING /tmp/cc15eBE3.s 			page 6


 133:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vdprintf_chk (int __fd, int __flag,
 134:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __fmt, _G_va_list __arg)
 135:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __attribute__ ((__format__ (__printf__, 3, 0)));
 136:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 137:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  ifdef __va_arg_pack
 138:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 139:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** dprintf (int __fd, const char *__restrict __fmt, ...)
 140:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 141:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __dprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt,
 142:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
 143:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 144:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  elif !defined __cplusplus
 145:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #   define dprintf(fd, ...) \
 146:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __dprintf_chk (fd, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 147:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  endif
 148:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 149:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 150:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** vdprintf (int __fd, const char *__restrict __fmt, _G_va_list __ap)
 151:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 152:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vdprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 153:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 154:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
 155:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 156:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __USE_GNU
 157:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 158:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __asprintf_chk (char **__restrict __ptr, int __flag,
 159:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __fmt, ...)
 160:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __THROW __attribute__ ((__format__ (__printf__, 3, 4))) __wur;
 161:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
 162:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    const char *__restrict __fmt, _G_va_list __arg)
 163:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __THROW __attribute__ ((__format__ (__printf__, 3, 0))) __wur;
 164:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
 165:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				 int __flag, const char *__restrict __format,
 166:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				 ...)
 167:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __THROW __attribute__ ((__format__ (__printf__, 3, 4)));
 168:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
 169:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  int __flag,
 170:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  const char *__restrict __format,
 171:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  _G_va_list __args)
 172:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __THROW __attribute__ ((__format__ (__printf__, 3, 0)));
 173:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 174:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  ifdef __va_arg_pack
 175:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 176:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...))
 177:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 178:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __asprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt,
 179:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			 __va_arg_pack ());
 180:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 181:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 182:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 183:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (__asprintf (char **__restrict __ptr, const char *__restrict __fmt,
 184:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		   ...))
 185:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 186:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __asprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt,
 187:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			 __va_arg_pack ());
 188:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 189:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
GAS LISTING /tmp/cc15eBE3.s 			page 7


 190:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 191:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (obstack_printf (struct obstack *__restrict __obstack,
 192:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		       const char *__restrict __fmt, ...))
 193:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 194:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __obstack_printf_chk (__obstack, __USE_FORTIFY_LEVEL - 1, __fmt,
 195:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			       __va_arg_pack ());
 196:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 197:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  elif !defined __cplusplus
 198:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #   define asprintf(ptr, ...) \
 199:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __asprintf_chk (ptr, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 200:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #   define __asprintf(ptr, ...) \
 201:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __asprintf_chk (ptr, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 202:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #   define obstack_printf(obstack, ...) \
 203:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __obstack_printf_chk (obstack, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
 204:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  endif
 205:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 206:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 207:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vasprintf (char **__restrict __ptr, const char *__restrict __fmt,
 208:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  _G_va_list __ap))
 209:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 210:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __vasprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
 211:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 212:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 213:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 214:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (obstack_vprintf (struct obstack *__restrict __obstack,
 215:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			const char *__restrict __fmt, _G_va_list __ap))
 216:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 217:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __obstack_vprintf_chk (__obstack, __USE_FORTIFY_LEVEL - 1, __fmt,
 218:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				__ap);
 219:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 220:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 221:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
 222:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 223:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
 224:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 225:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if !defined __USE_ISOC11 \
 226:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****     || (defined __cplusplus && __cplusplus <= 201103L && !defined __USE_GNU)
 227:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern char *__gets_chk (char *__str, size_t) __wur;
 228:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern char *__REDIRECT (__gets_warn, (char *__str), gets)
 229:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __wur __warnattr ("please use fgets or getline instead, gets can't "
 230:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		       "specify buffer size");
 231:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 232:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function __wur char *
 233:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** gets (char *__str)
 234:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 235:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   if (__bos (__str) != (size_t) -1)
 236:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****     return __gets_chk (__str, __bos (__str));
 237:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __gets_warn (__str);
 238:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 239:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
 240:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 241:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
 242:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  FILE *__restrict __stream) __wur;
 243:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern char *__REDIRECT (__fgets_alias,
 244:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			 (char *__restrict __s, int __n,
 245:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  FILE *__restrict __stream), fgets) __wur;
 246:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern char *__REDIRECT (__fgets_chk_warn,
GAS LISTING /tmp/cc15eBE3.s 			page 8


 247:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			 (char *__restrict __s, size_t __size, int __n,
 248:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  FILE *__restrict __stream), __fgets_chk)
 249:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __wur __warnattr ("fgets called with bigger size than length "
 250:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		       "of destination buffer");
 251:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 252:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function __wur char *
 253:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
 254:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 255:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   if (__bos (__s) != (size_t) -1)
 256:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****     {
 257:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****       if (!__builtin_constant_p (__n) || __n <= 0)
 258:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	return __fgets_chk (__s, __bos (__s), __n, __stream);
 259:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 260:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****       if ((size_t) __n > __bos (__s))
 261:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	return __fgets_chk_warn (__s, __bos (__s), __n, __stream);
 262:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****     }
 263:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fgets_alias (__s, __n, __stream);
 264:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 265:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 266:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
 267:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __size, size_t __n,
 268:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   FILE *__restrict __stream) __wur;
 269:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern size_t __REDIRECT (__fread_alias,
 270:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  (void *__restrict __ptr, size_t __size,
 271:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __n, FILE *__restrict __stream),
 272:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  fread) __wur;
 273:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern size_t __REDIRECT (__fread_chk_warn,
 274:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  (void *__restrict __ptr, size_t __ptrlen,
 275:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __size, size_t __n,
 276:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   FILE *__restrict __stream),
 277:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  __fread_chk)
 278:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****      __wur __warnattr ("fread called with bigger size * nmemb than length "
 279:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		       "of destination buffer");
 280:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 281:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function __wur size_t
 282:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fread (void *__restrict __ptr, size_t __size, size_t __n,
 283:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****        FILE *__restrict __stream)
 284:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 285:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   if (__bos0 (__ptr) != (size_t) -1)
 286:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****     {
 287:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****       if (!__builtin_constant_p (__size)
 288:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	  || !__builtin_constant_p (__n)
 289:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	  || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 290:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	return __fread_chk (__ptr, __bos0 (__ptr), __size, __n, __stream);
 291:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 292:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****       if (__size * __n > __bos0 (__ptr))
 293:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 	return __fread_chk_warn (__ptr, __bos0 (__ptr), __size, __n, __stream);
 294:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****     }
 295:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fread_alias (__ptr, __size, __n, __stream);
  76              		.loc 2 295 0 discriminator 1
  77 0041 488D7C24 		leaq	31(%rsp), %rdi
  77      1F
  78              	.LVL10:
  79 0046 4C89E1   		movq	%r12, %rcx
  80 0049 BA010000 		movl	$1, %edx
  80      00
  81 004e BE010000 		movl	$1, %esi
GAS LISTING /tmp/cc15eBE3.s 			page 9


  81      00
  82 0053 E8000000 		call	fread
  82      00
  83              	.LVL11:
  84              	.LBE9:
  85              	.LBE8:
  70:src/ARCH/i386_OS/OS_loader.c **** 
  71:src/ARCH/i386_OS/OS_loader.c **** 	while(fread(&byte,sizeof(uint8_t),1,binary))
  86              		.loc 1 71 0 discriminator 1
  87 0058 4885C0   		testq	%rax, %rax
  88 005b 740C     		je	.L22
  72:src/ARCH/i386_OS/OS_loader.c **** 	{
  73:src/ARCH/i386_OS/OS_loader.c **** 		VM_memory[i] = byte;
  89              		.loc 1 73 0
  90 005d 8A44241F 		movb	31(%rsp), %al
  91 0061 48FFC3   		incq	%rbx
  92              	.LVL12:
  93 0064 8843FF   		movb	%al, -1(%rbx)
  94 0067 EBD8     		jmp	.L5
  95              	.LVL13:
  96              	.L22:
  74:src/ARCH/i386_OS/OS_loader.c **** 		i++;
  75:src/ARCH/i386_OS/OS_loader.c **** 	}
  76:src/ARCH/i386_OS/OS_loader.c **** 
  77:src/ARCH/i386_OS/OS_loader.c **** 	fclose(binary);
  97              		.loc 1 77 0
  98 0069 4C89E7   		movq	%r12, %rdi
  99 006c E8000000 		call	fclose
  99      00
 100              	.LVL14:
  78:src/ARCH/i386_OS/OS_loader.c **** #if MEASURING
  79:src/ARCH/i386_OS/OS_loader.c **** 	time_t tic = clock();
  80:src/ARCH/i386_OS/OS_loader.c **** #endif
  81:src/ARCH/i386_OS/OS_loader.c **** #if RUN_VM
  82:src/ARCH/i386_OS/OS_loader.c **** 	// 0 : Count instructions
  83:src/ARCH/i386_OS/OS_loader.c **** 	// 1 : Normal
  84:src/ARCH/i386_OS/OS_loader.c **** 	// 2 : Normal and print memory
  85:src/ARCH/i386_OS/OS_loader.c **** 	// 3 : Optimized
  86:src/ARCH/i386_OS/OS_loader.c **** 	// 4 : Optimized and print memory
  87:src/ARCH/i386_OS/OS_loader.c **** 	// 5 : Indirect Thread
  88:src/ARCH/i386_OS/OS_loader.c **** 	// 6 : Indirect Thread and print memory
  89:src/ARCH/i386_OS/OS_loader.c **** 	// 7 : Super
  90:src/ARCH/i386_OS/OS_loader.c **** 	// 10: Normal counting total execution of each instruction
  91:src/ARCH/i386_OS/OS_loader.c **** 	// 11 : Nothing, to measure init
  92:src/ARCH/i386_OS/OS_loader.c **** 	switch (atoi(argv[2])) {
 101              		.loc 1 92 0
 102 0071 488B7D10 		movq	16(%rbp), %rdi
 103 0075 E8000000 		call	atoi
 103      00
 104              	.LVL15:
 105 007a 83F80B   		cmpl	$11, %eax
 106 007d 7766     		ja	.L17
 107 007f 89C2     		movl	%eax, %edx
 108 0081 FF24D500 		jmp	*.L8(,%rdx,8)
 108      000000
 109              		.section	.rodata
 110              		.align 8
GAS LISTING /tmp/cc15eBE3.s 			page 10


 111              		.align 4
 112              	.L8:
 113 0000 00000000 		.quad	.L7
 113      00000000 
 114 0008 00000000 		.quad	.L9
 114      00000000 
 115 0010 00000000 		.quad	.L10
 115      00000000 
 116 0018 00000000 		.quad	.L11
 116      00000000 
 117 0020 00000000 		.quad	.L12
 117      00000000 
 118 0028 00000000 		.quad	.L13
 118      00000000 
 119 0030 00000000 		.quad	.L14
 119      00000000 
 120 0038 00000000 		.quad	.L17
 120      00000000 
 121 0040 00000000 		.quad	.L17
 121      00000000 
 122 0048 00000000 		.quad	.L17
 122      00000000 
 123 0050 00000000 		.quad	.L15
 123      00000000 
 124 0058 00000000 		.quad	.L16
 124      00000000 
 125              		.section	.text.startup
 126              	.L7:
  93:src/ARCH/i386_OS/OS_loader.c **** 	  case 0:
  94:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu_count(0);
 127              		.loc 1 94 0
 128 0088 31FF     		xorl	%edi, %edi
 129 008a 8944240C 		movl	%eax, 12(%rsp)
 130 008e E8000000 		call	vm_cpu_count
 130      00
 131              	.LVL16:
  95:src/ARCH/i386_OS/OS_loader.c **** 	    break;
 132              		.loc 1 95 0
 133 0093 8B44240C 		movl	12(%rsp), %eax
 134 0097 EB4E     		jmp	.L4
 135              	.L9:
  96:src/ARCH/i386_OS/OS_loader.c **** 	  case 1:
  97:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu(0, 0);
 136              		.loc 1 97 0
 137 0099 31F6     		xorl	%esi, %esi
 138 009b EB05     		jmp	.L19
 139              	.L10:
  98:src/ARCH/i386_OS/OS_loader.c **** 	    break;
  99:src/ARCH/i386_OS/OS_loader.c **** 	  case 2:
 100:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu(0, 1); 
 140              		.loc 1 100 0
 141 009d BE010000 		movl	$1, %esi
 141      00
 142              	.L19:
 143 00a2 31FF     		xorl	%edi, %edi
 144 00a4 E8000000 		call	vm_cpu
 144      00
GAS LISTING /tmp/cc15eBE3.s 			page 11


 145              	.LVL17:
 146 00a9 EB3A     		jmp	.L17
 147              	.L11:
 101:src/ARCH/i386_OS/OS_loader.c **** 	    break;
 102:src/ARCH/i386_OS/OS_loader.c **** 	  case 3:
 103:src/ARCH/i386_OS/OS_loader.c **** 	   vm_cpu_2(0, 0);
 148              		.loc 1 103 0
 149 00ab 31F6     		xorl	%esi, %esi
 150 00ad EB05     		jmp	.L20
 151              	.L12:
 104:src/ARCH/i386_OS/OS_loader.c **** 	   break; 
 105:src/ARCH/i386_OS/OS_loader.c **** 	  case 4:
 106:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu_2(0, 1);
 152              		.loc 1 106 0
 153 00af BE010000 		movl	$1, %esi
 153      00
 154              	.L20:
 155 00b4 31FF     		xorl	%edi, %edi
 156 00b6 E8000000 		call	vm_cpu_2
 156      00
 157              	.LVL18:
 158 00bb EB28     		jmp	.L17
 159              	.L13:
 107:src/ARCH/i386_OS/OS_loader.c **** 	    break; 
 108:src/ARCH/i386_OS/OS_loader.c **** 	  case 5:
 109:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu_2_indirect(0, 0);
 160              		.loc 1 109 0
 161 00bd 31F6     		xorl	%esi, %esi
 162 00bf 31FF     		xorl	%edi, %edi
 163 00c1 E8000000 		call	vm_cpu_2_indirect
 163      00
 164              	.LVL19:
 165 00c6 EB1D     		jmp	.L17
 166              	.L14:
 110:src/ARCH/i386_OS/OS_loader.c **** 	    break;
 111:src/ARCH/i386_OS/OS_loader.c **** 	  case 6:
 112:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu_super(0, 0);
 167              		.loc 1 112 0
 168 00c8 31F6     		xorl	%esi, %esi
 169 00ca 31FF     		xorl	%edi, %edi
 170 00cc E8000000 		call	vm_cpu_super
 170      00
 171              	.LVL20:
 172 00d1 EB12     		jmp	.L17
 173              	.L15:
 113:src/ARCH/i386_OS/OS_loader.c **** 	    break;
 114:src/ARCH/i386_OS/OS_loader.c **** 	  case 10:
 115:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu_identify_instructions(0);
 174              		.loc 1 115 0
 175 00d3 31FF     		xorl	%edi, %edi
 176 00d5 E8000000 		call	vm_cpu_identify_instructions
 176      00
 177              	.LVL21:
 178 00da EB09     		jmp	.L17
 179              	.L16:
 116:src/ARCH/i386_OS/OS_loader.c **** 	    break;
 117:src/ARCH/i386_OS/OS_loader.c **** 	  case 11:
GAS LISTING /tmp/cc15eBE3.s 			page 12


 118:src/ARCH/i386_OS/OS_loader.c **** 	    vm_cpu_init_only(0, 0);
 180              		.loc 1 118 0
 181 00dc 31F6     		xorl	%esi, %esi
 182 00de 31FF     		xorl	%edi, %edi
 183 00e0 E8000000 		call	vm_cpu_init_only
 183      00
 184              	.LVL22:
 185              	.L17:
 119:src/ARCH/i386_OS/OS_loader.c **** 	    break;
 120:src/ARCH/i386_OS/OS_loader.c **** 	}
 121:src/ARCH/i386_OS/OS_loader.c **** #endif
 122:src/ARCH/i386_OS/OS_loader.c **** #if MEASURING	
 123:src/ARCH/i386_OS/OS_loader.c **** 	time_t toc = clock();
 124:src/ARCH/i386_OS/OS_loader.c **** 	printf("TIMESPENT.%ld\n", (toc - tic));
 125:src/ARCH/i386_OS/OS_loader.c **** #endif
 126:src/ARCH/i386_OS/OS_loader.c **** 	i = 0;
 127:src/ARCH/i386_OS/OS_loader.c **** 	
 128:src/ARCH/i386_OS/OS_loader.c **** 	return 0;
 186              		.loc 1 128 0
 187 00e5 31C0     		xorl	%eax, %eax
 188              	.LVL23:
 189              	.L4:
 129:src/ARCH/i386_OS/OS_loader.c **** }
 190              		.loc 1 129 0
 191 00e7 4883C420 		addq	$32, %rsp
 192              		.cfi_def_cfa_offset 32
 193 00eb 5B       		popq	%rbx
 194              		.cfi_def_cfa_offset 24
 195 00ec 5D       		popq	%rbp
 196              		.cfi_def_cfa_offset 16
 197 00ed 415C     		popq	%r12
 198              		.cfi_def_cfa_offset 8
 199 00ef C3       		ret
 200              		.cfi_endproc
 201              	.LFE17:
 203              		.text
 204              	.Letext0:
 205              		.file 3 "/usr/include/stdint.h"
 206              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 207              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 208              		.file 6 "/usr/include/stdio.h"
 209              		.file 7 "/usr/include/libio.h"
 210              		.file 8 "/usr/include/stdlib.h"
 211              		.file 9 "src/vm.h"
GAS LISTING /tmp/cc15eBE3.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 OS_loader.c
     /tmp/cc15eBE3.s:6      .text:0000000000000000 blah
     /tmp/cc15eBE3.s:23     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__printf_chk
VM_memory
fopen
fread
fclose
atoi
vm_cpu_count
vm_cpu
vm_cpu_2
vm_cpu_2_indirect
vm_cpu_super
vm_cpu_identify_instructions
vm_cpu_init_only
